#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

from OCC.wrapper.gp import gp_Vec, gp_Dir, gp_Pnt
from OCC.utils.patched.gp import _gp_Pnt_string, _gp_Pnt_tuple, _gp_Pnt_list

__all__ = [""]


def pnt_to_vec(pt):
    """ Creates a vector out of a point

    :param OCC.gp.gp_Pnt pt: point that needs to become a vector
    :rtype OCC.gp.gp_Vec
    """
    return gp_Vec(pt.X(), pt.Y(), pt.Z())


def pnt_to_string(pt):
    """ Converts a point to a string

    :param OCC.gp.gp_Pnt pt: point that needs to become a vector
    :return: str
    """
    return _gp_Pnt_string(pt)


def pnt_to_tup(pt):
    """ Converts a point to a tuple

    :param OCC.gp.gp_Pnt pt: point that needs to become a vector
    :return: tuple[float]
    """
    return _gp_Pnt_tuple(pt)


def pnt_to_list(pt):
    """ Converts a point to a list

    :param OCC.gp.gp_Pnt pt: point that needs to become a vector
    :return: list[float]
    """
    return _gp_Pnt_list(pt)

# a dictionary that provides the functions to convert something to a gp_vec
type_to_converter = {
    gp_Dir : pnt_to_vec,
    gp_Pnt : pnt_to_vec,
    list : lambda x: gp_Vec(*x),
    tuple : lambda x: gp_Vec(*x),
    gp_Vec : lambda x: x
}


def to_vec(gp):
    """Converts a type to a gp_Vec. Supported:
    gp_Vec
    gp_Dir
    gp_Pnt
    tuple (x, y, z)
    list [x, y z]

    :param any gp:
    :rtype: OCC.gp.gp_Vec
    """
    cls = type(gp)
    try:
        return type_to_converter[cls](gp)
    except KeyError:
        msg = "Type of {} can not be converted to a gp_Vec!".format(cls)
        raise Exception(msg)