#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

from OCC.wrapper import TCollection, NCollection
from OCC.wrapper.TColStd import TColStd_Array1OfReal, TColStd_Array1OfInteger, TColStd_Array2OfReal
from OCC.wrapper.TColgp import TColgp_HArray1OfPnt, TColgp_Array1OfPnt, TColgp_Array2OfPnt
from OCC.utils.patched.gp import *  #@UnusedWildImport


def _TColgp_HArray1OfPnt_tuples(self):
    arr = self.Array1()
    return tuple(arr.Value(i+1).tuple for i in range(arr.Length()))


def _TColgp_HArray1OfPnt_lists(self):
    arr = self.Array1()
    return [arr.Value(i+1).list for i in range(arr.Length())]

TColgp_HArray1OfPnt.tuples = property(_TColgp_HArray1OfPnt_tuples)
TColgp_HArray1OfPnt.lists = property(_TColgp_HArray1OfPnt_lists)


def _TColgp_Array1OfPnt_tuples(self):
    return tuple(self.Value(i+1).tuple for i in range(self.Length()))


def _TColgp_Array1OfPnt_lists(self):
    return [self.Value(i+1).list for i in range(self.Length())]


def _TColgp_Array1OfPnt_string(self):
    return ' '.join(self.Value(i+1).string for i in range(self.Length()))

TColgp_Array1OfPnt.tuples = property(_TColgp_Array1OfPnt_tuples)
TColgp_Array1OfPnt.lists = property(_TColgp_Array1OfPnt_lists)
TColgp_Array1OfPnt.string = property(_TColgp_Array1OfPnt_string)


def _TColStd_Array1OfReal_list(self):
    """A list of numbers"""
    return [self.Value(i+1) for i in range(self.Length())]

TColStd_Array1OfReal.list = property(_TColStd_Array1OfReal_list)


def _TColStd_Array2OfReal_lists(self):
    """A list of numbers"""
    return [[self.Value(i, j)\
             for j in range(self.LowerCol(), self.UpperCol()+1)]\
            for i in range(self.LowerRow(), self.UpperRow()+1)]

TColStd_Array2OfReal.list = property(_TColStd_Array2OfReal_lists)


def _TColStd_Array1OfInteger_list(self):
    return [self.Value(i+1) for i in range(self.Length())]

TColStd_Array1OfInteger.list = property(_TColStd_Array1OfInteger_list)


def _to_list(self):
    """Set (or update) TDataStd_Name attribute value on TDF_Label"""
    results = []
    for i in range(self.Length()):
        results.append(self.Value(i+1))
    return results

TCollection.TCollection_BaseSequence.to_list = _to_list
NCollection.NCollection_BaseSequence.to_list = _to_list
