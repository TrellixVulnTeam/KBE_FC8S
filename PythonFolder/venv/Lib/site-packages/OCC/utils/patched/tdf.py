#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

from OCC.wrapper import TDataStd, TCollection, TDF

__all__ = []


def _get_name(self):
    """Get TDataStd_Name attribute value on TDF_Label

    :rtype: str
    """
    if self.IsNull():
        "unknown"
    else:
        h_a = TDataStd.TDataStd_Name().handle
        gid = h_a.ID()
        if self.FindAttribute(gid, h_a):
            name = TCollection.TCollection_AsciiString(h_a.Get())
            return name.ToCString()


def _set_name(self, name):
    """Set (or update) TDataStd_Name attribute value on TDF_Label

    :param str name: name that should be given to the label
    """
    tname = TCollection.TCollection_ExtendedString(name)
    tdat_name = TDataStd.TDataStd_Name()
    h_a = tdat_name.handle
    gid = tdat_name.ID()
    if self.FindAttribute(gid, h_a):
        h_a.Set(tname)
    else:
        att = tdat_name
        att.Set(tname)
        self.AddAttribute(att.handle)


def _get_reference(self, shape_tool):
    """Tests if TDF_Label is actually referring to another label.

    :param OCC.XCAFDoc.Handle_XCAFDoc_ShapeTool shape_tool:
    :rtype: Union[TDF_Label, None]
    """
    reference = TDF.TDF_Label()
    is_referent = shape_tool.GetReferredShape(self, reference)
    if is_referent:
        return reference

TDF.TDF_Label.get_name = _get_name
TDF.TDF_Label.set_name = _set_name
TDF.TDF_Label.get_reference = _get_reference
