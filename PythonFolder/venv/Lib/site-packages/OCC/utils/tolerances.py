#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

# TODO: add 'brep_tolerance' slot to Vertex, Edge, Face classes.
# TODO: add 'max_brep_tolerance' slot to BRep

from OCC.wrapper.BRep import BRep_Tool_Tolerance
from OCC.wrapper.ShapeFix import ShapeFix_ShapeTolerance
from OCC.wrapper.TopAbs import TopAbs_FACE, TopAbs_EDGE, TopAbs_VERTEX
from OCC.utils.top import sub_shapes

__all__ = ["get_max_tolerances", "limit_max_tolerances", "report_tolerances",
           "set_tolerances", "ToleranceGuard"]


SHAPEFIX_SHAPETOLERANCE = ShapeFix_ShapeTolerance()


def get_max_tolerances(topods_shape, *more_topods_shape):
    """Return the maximum tolerance for the subshapes in ``topods_shape``

    :param OCC.TopoDS.TopoDS_Shape topods_shape: The shape of which the
        the sub-shape tolerances are investigated
    :return: a tuple of (max tolerance for vertices, max tolerance for
        edges, max tolerance for faces)
    :rtype: tuple[float | None]
    """
    if more_topods_shape:
        lst1 = list(get_max_tolerances(topods_shape))
        for topods_shape in more_topods_shape:
            lst2 = get_max_tolerances(topods_shape)
            for i, (t1, t2) in enumerate(zip(lst1, lst2)):
                if t1 is None:
                    if t2 is not None:
                        lst1[i] = t2
                elif t2 is not None:
                    if t2 > t1:
                        lst1[i] = t2
        return tuple(lst1)
    else:
        shape_type = topods_shape.ShapeType()
        f, g = BRep_Tool_Tolerance, sub_shapes
        if shape_type <= TopAbs_FACE:
            try:
                tol_faces = max(f(s) for s in g(topods_shape,
                                                shape_type=TopAbs_FACE,
                                                downcast=True))
            except ValueError:  # empty generator
                tol_faces = None
        else:
            tol_faces = None
        if shape_type <= TopAbs_EDGE:
            try:
                tol_edges = max(f(s) for s in g(topods_shape,
                                                shape_type=TopAbs_EDGE,
                                                downcast=True))
            except ValueError:  # empty generator
                tol_edges = None
        else:
            tol_edges = None
        try:
            tol_vertices = max(f(s) for s in g(topods_shape,
                                           shape_type=TopAbs_VERTEX,
                                           downcast=True))
        except ValueError:  # empty generator
            tol_vertices = None
        return tol_vertices, tol_edges, tol_faces


def set_tolerances(topods_shape, tol_vertices=None, tol_edges=None,
                   tol_faces=None):
    """ Set the tolerances of the subshapes of topods_shape. Does not touch
    the subshapes if the corresponding tolerances are set to None

    :param OCC.TopoDS.TopoDS_Shape topods_shape:
    :param float|None tol_vertices: the tolerances the vertices should get
    :param float|None tol_edges: the tolerances the edges should get
    :param float|None tol_faces: the tolerances the faces should get
    """
    fix = SHAPEFIX_SHAPETOLERANCE
    if tol_vertices is not None:
        fix.SetTolerance(topods_shape, tol_vertices, TopAbs_VERTEX)
    if tol_edges is not None:
        fix.SetTolerance(topods_shape, tol_edges, TopAbs_EDGE)
    if tol_faces is not None:
        fix.SetTolerance(topods_shape, tol_faces, TopAbs_FACE)


def limit_max_tolerances(topods_shape, tol_vertices=None, tol_edges=None,
                         tol_faces=None):
    """ Limit the maximum tolerance of the subshapes of topods_shape. Does not
    touch the subshapes if the corresponding tolerances are set to None.
    Any tolerance value lower than 1.0e-7 is pinned to 1.0e-7 by OCC.

    :param OCC.TopoDS.TopoDS_Shape topods_shape:
    :param float|None tol_vertices: the limit of the maximum tolerances the vertices should get
    :param float|None tol_edges: the limit of the maximum tolerances the edges should get
    :param float|None tol_faces: the limit of the maximum tolerances the faces should get
    """
    fix = SHAPEFIX_SHAPETOLERANCE
    if tol_vertices is not None:
        fix.LimitTolerance(topods_shape, 0.0, tol_vertices, TopAbs_VERTEX)
    if tol_edges is not None:
        fix.LimitTolerance(topods_shape, 0.0, tol_edges, TopAbs_EDGE)
    if tol_faces is not None:
        fix.LimitTolerance(topods_shape, 0.0, tol_faces, TopAbs_FACE)


def report_tolerances(topods_shape):
    """ Prints a report of the toleraces of topods_shape to the screen

    :param OCC.TopoDS.TopoDS_Shape topods_shape: the shape of which the subshapes are investigated.
    """
    f, g = BRep_Tool_Tolerance, sub_shapes
    print("------------------\n TOLERANCE REPORT \n------------------")
    for i, s in enumerate(g(topods_shape,
                            shape_type=TopAbs_FACE,
                            downcast=True)):
        print("{:<7}{:>3}: {:}".format("Face", i, f(s)))
    for i, s in enumerate(g(topods_shape,
                            shape_type=TopAbs_EDGE,
                            downcast=True)):
        print("{:<7}{:>3}: {:}".format("Edge", i, f(s)))
    for i, s in enumerate(g(topods_shape,
                            shape_type=TopAbs_VERTEX,
                            downcast=True)):
        print("{:<7}{:>3}: {:}".format("Vertex", i, f(s)))


class ToleranceGuard(object):
    """Some OpenCascade builder operations act on a topods_shape as input,
    but modify its tolerances. This context manager resets tolerances to their
    values before the operation."""

    __slots__ = ['topods_shape', 'max_tolerances']

    def __init__(self, topods_shape):
        self.topods_shape = topods_shape
        self.max_tolerances = get_max_tolerances(topods_shape)

    def __enter__(self):
        return self

    def __exit__(self, type_, value, traceback):
        self.limit_max_tolerances(self.topods_shape)

    def limit_max_tolerances(self, topods_shape):
        """ Same as :func:`~OCC.utils.tolerances.limit_max_tolerances`
        """
        limit_max_tolerances(topods_shape, *self.max_tolerances)


if __name__ == '__main__':
    from OCC.wrapper.BRepPrimAPI import BRepPrimAPI_MakeBox

    builder = BRepPrimAPI_MakeBox(1, 2, 3)
    box = builder.Shape()

    tol = get_max_tolerances(box)
    print(tol)

    set_tolerances(box, 1.0e-4)
    print(get_max_tolerances(box))

    limit_max_tolerances(box, 1.0e-10)
    print(get_max_tolerances(box))

    report_tolerances(box)

    from OCC.wrapper.Geom import Geom_Plane
    from OCC.wrapper.gp import gp_Ax3
    from OCC.wrapper.BRepBuilderAPI import BRepBuilderAPI_MakeFace

    ax = gp_Ax3()
    srf = Geom_Plane(ax).handle
    plane = BRepBuilderAPI_MakeFace(srf.Pln()).Shape()
    print(get_max_tolerances(plane))
