#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

import re
from collections import namedtuple

from OCC.wrapper.STEPCAFControl import STEPCAFControl_Writer, STEPCAFControl_Reader
from OCC.utils.exchange.cafcontrol import CAFControl_Writer, CAFControl_Reader

__all__ = ["STEPWriter", "STEPReader"]


class STEPWriter(CAFControl_Writer):
    """The STEPWriter class. It is able to keep hierarchy, names and colors.

    Usage:

        >>> box = make_box()
        ... with STEPWriter() as writer:
        ...     writer.add_shapes([box])
        ...     writer.write("some/dir/file.step")

        alternatively use

        >>> write = STEPWriter()
        ... writer.open()
        ... writer.write("some/dir/file.step")
        ... writer.close()
    """

    settings = (("write.step.product.name", "ParaPy STEPWriter"),)

    def _init_writer(self):
        return STEPCAFControl_Writer()


class STEPReader(CAFControl_Reader):
    """
    The STEPReader class.

    Usage:

        >>> with STEPReader() as reader:
        ...     reader.read("some/dir/file.step")
        ...     assy = reader.assemblies

        alternatively use

        >>> reader = STEPReader()
        ... reader.open()
        ... reader.read("some/dir/file.step")
        ... reader.close()
    """

    # CAFControl_Reader
    __readerclass__ = STEPCAFControl_Reader

    def __init__(self, settings=[], extract_shape_names=True):
        super(STEPReader, self).__init__(settings)
        self.extract_shape_names = extract_shape_names

    @property
    def entity_id_to_name(self):
        current_file = self.filename

        try:
            cache = self.__id_to_name_cache
            if cache.for_file is current_file:
                is_cached = True
            else:
                is_cached = False
        except AttributeError:
            self.__id_to_name_cache = namedtuple('for_file', 'value')
            is_cached = False

        if not is_cached:
            if self.extract_shape_names:
                parsed = parse_step_file(self.filename)
            else:
                parsed = {}

            self.__id_to_name_cache.value = parsed
            self.__id_to_name_cache.for_file = current_file
        return self.__id_to_name_cache.value

    @property
    def _STEPControl_Reader(self):
        return self.reader.Reader()

    @property
    def _StepData_StepModel(self):
        return self._STEPControl_Reader.StepModel()

    @property
    def _XSControl_TransferReader(self):
        return self._STEPControl_Reader.WS().TransferReader()

    def resolve_unfound_name(self, TopoDS_Shape, mode=1):
        Handle_Standard_Transient = \
            self._XSControl_TransferReader.EntityFromShapeResult(
                TopoDS_Shape, mode)
        step_entity_id = self._StepData_StepModel.StringLabel(
            Handle_Standard_Transient).ToCString()
        try:
            return self.entity_id_to_name[step_entity_id]
        except KeyError:
            return None

    @property
    def _EntityProperties(self):
        """See:
        http://www.opencascade.org/org/forum/thread_23527/?forum=3
        http://forum.freecadweb.org/viewtopic.php?f=10&t=3972
        from http://opencascade.wikidot.com/entitynames
        http://opencascade.sourcearchive.com/documentation/6.3.0.dfsg.1-1/classIGESData__IGESEntity.html
        """
        from OCC.wrapper.StepRepr import Handle_StepRepr_Representation_DownCast
        from OCC.wrapper.TransferBRep import TransferBRep__ShapeResult

        topodsshape2name = {}
        name2topodsshape = {}

        reader = self.reader.Reader()
        theSession = reader.WS()
        theModel = theSession.Model()
        aReader = theSession.TransferReader()
        tp = aReader.TransientProcess()

        for i in range(1, theModel.NbEntities()+1):
            ent = Handle_StepRepr_Representation_DownCast(theModel.Value(i))
            if ent.IsNull():
                #print "Handle(Handle_StepRepr_Representation_DownCast).IsNull()->ignored entity:", i
                continue

            h_name = ent.Name()
            if not h_name.IsNull():
                name = h_name.ToCString()
                print(name)
            else:
                name = "NONAME"
                #print "IGESData_IGESEntity.HasName() is False:", i
                #continue

#             if ent.HasShortLabel():
#                 name = ent.ShortLabel().String().ToCString()
#             else:
#                 print "IGESData_IGESEntity.HasShortLabel() is False->ignored entity:", i
#                 continue

            h_binder = tp.Find(ent)
            if h_binder.IsNull():
                #print "Handle(Transfer_Binder).IsNull()->ignored entity:", i, name
                continue
            #binder = h_binder
            oneShape = TransferBRep__ShapeResult(h_binder)
            if oneShape.IsNull():
                #print "TopoDS_Shape.IsNull()->ignored entity:", i, name
                continue

            topodsshape2name[oneShape] = name
            name2topodsshape[name] = oneShape

        return topodsshape2name, name2topodsshape

regex = re.compile("^(#[0-9]+)=.*\('(.*)'")


def parse_step_file(filename):
    Dict = {}
    with open(filename, 'r') as f:
        for line in f.readlines():
            match = re.match(regex, line)
            if match:
                step_id, name = match.groups()
                Dict[step_id] = name
    return Dict


def give_entity(STEPControl_Reader, TopoDS_Shape, mode=1):
    """
    :rtype: Handle_Standard_Transient
    """
    trnf = STEPControl_Reader.WS().TransferReader()
    return trnf.EntityFromShapeResult(TopoDS_Shape, mode)


def give_step_id(STEPControl_Reader, Handle_Standard_Transient):
    """
    :rtype: str
    """
    step_model = STEPControl_Reader.StepModel()
    return step_model.StringLabel(Handle_Standard_Transient).ToCString()
