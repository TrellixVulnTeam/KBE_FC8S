#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

from OCC.wrapper.IGESCAFControl import IGESCAFControl_Writer, IGESCAFControl_Reader
from OCC.wrapper.IGESControl import IGESControl_Controller_Init
from OCC.utils.exchange.cafcontrol import CAFControl_Writer, CAFControl_Reader

__all__ = ["IGESWriter", "IGESReader"]


class IGESWriter(CAFControl_Writer):
    """
    The IGESWriter class. It is able to keep hierarchy, names and colors.

    Usage:

        >>> box = make_box()
        ... with IGESWriter() as writer:
        ...     writer.add_shapes([box])
        ...     writer.write("some/dir/file.iges"))

        alternatively use

        >>> write = IGESWriter()
        ... writer.open()
        ... writer.write("some/dir/file.iges")
        ... writer.close()
    """

    def _init_writer(self):
        IGESControl_Controller_Init()
        return IGESCAFControl_Writer()


class IGESReader(CAFControl_Reader):
    """
    The IGESReader class.

    Usage:

        >>> with IGESReader() as reader:
        ...     reader.read("some/dir/file.iges")
        ...     assy = reader.assemblies

        alternatively use

        >>> reader = IGESReader()
        ... reader.open()
        ... reader.read("some/dir/file.iges")
        ... reader.close()
    """

    # CAFControl_Reader
    __readerclass__ = IGESCAFControl_Reader

    @property
    def _EntityProperties(self):
        """See:
        from http://opencascade.wikidot.com/entitynames
        http://opencascade.sourcearchive.com/documentation/6.3.0.dfsg.1-1/classIGESData__IGESEntity.html
        """
        from OCC.wrapper.IGESData import Handle_IGESData_IGESEntity_DownCast
        from OCC.wrapper.TransferBRep import TransferBRep__ShapeResult

        topodsshape2name = {}
        name2topodsshape = {}

        reader = self.reader
        theSession = reader.WS()
        theModel = theSession.Model()
        aReader = theSession.TransferReader()
        tp = aReader.TransientProcess()

        for i in range(1, theModel.NbEntities()+1):
            ent = Handle_IGESData_IGESEntity_DownCast(theModel.Value(i))
            if ent.IsNull():
                #print "Handle(IGESData_IGESEntity).IsNull()->ignored entity:", i
                continue

            if ent.HasName():
                name = ent.NameValue().String().ToCString()
            else:
                name = "NONAME"
                #print "IGESData_IGESEntity.HasName() is False:", i
                #continue

#             if ent.HasShortLabel():
#                 name = ent.ShortLabel().String().ToCString()
#             else:
#                 print "IGESData_IGESEntity.HasShortLabel() is False->ignored entity:", i
#                 continue

            h_binder = tp.Find(ent)
            if h_binder.IsNull():
                #print "Handle(Transfer_Binder).IsNull()->ignored entity:", i, name
                continue
            #binder = h_binder
            oneShape = TransferBRep__ShapeResult(h_binder)
            if oneShape.IsNull():
                #print "TopoDS_Shape.IsNull()->ignored entity:", i, name
                continue

            topodsshape2name[oneShape] = name
            name2topodsshape[name] = oneShape

        return topodsshape2name, name2topodsshape
