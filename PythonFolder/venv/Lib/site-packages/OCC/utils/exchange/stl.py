#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

from OCC.wrapper.BRepMesh import BRepMesh_IncrementalMesh
from OCC.wrapper.StlAPI import StlAPI_Reader, StlAPI_Writer
from OCC.wrapper.TopAbs import TopAbs_FACE, TopAbs_SHELL, TopAbs_SOLID
from OCC.wrapper.TopoDS import TopoDS_Shape
from OCC.utils.top import shape_copy, sub_shapes

__all__ = ["faces_from_stl_file", "shape_from_stl_file", "shape_to_stl_file",
           "solids_from_stl_file"]


_DEFAULT_LINEAR_DEFLECTION = 0.001
_DEFAULT_ANGULAR_DEFLECTION = 0.5


# TODO (TBD): expose more options from BRepMesh_FastDiscret::Parameters.
def shape_to_stl_file(shape, filename,
                      linear_deflection=_DEFAULT_LINEAR_DEFLECTION,
                      relative=False,
                      angular_deflection=_DEFAULT_ANGULAR_DEFLECTION,
                      parallel=True, adaptive_min=False, asciimode=True,
                      copy=True):
    """Write ``shape`` after meshing it to ``filename``. Meshes a copy of
    the shape instead of the shape itself. Usage:

    >>> from OCC.wrapper.gp import gp_Pnt
    >>> from OCC.wrapper.BRepBuilderAPI import BRepBuilderAPI_MakeEdge
    >>> builder = BRepBuilderAPI_MakeEdge(gp_Pnt(0, 0, 0,), gp_Pnt(0, 0, 1))
    >>> edge = builder.Shape()
    >>> shape_to_stl_file(edge, 'edge.stl')

    :param OCC.TopoDS.TopoDS_Shape shape:
    :param str filename: path to the stl file
    :param float linear_deflection: linear deflection
    :param bool relative: if TRUE deflection used for discretization of each
        edge will be ``linear_deflection`` * <size of="" edge>="">. Deflection
        used for the faces will be the maximum deflection of their edges.
    :param float angular_deflection: angular deflection
    :param bool parallel: if True shape will be meshed in parallel.
    :param bool adaptive_min: if True the minimal parametric tolerance is
        computed taking minimal parametric distance between vertices into
        account.
    :param bool asciimode: if True, output in ASCII format, else binary.
    :param bool copy: if True, a copy will be made of ``shape`` before a (new)
        mesh is attached. If False, original ``shape`` might have a new mesh
        attached to it as side-effect.

    .. caution:: for now only asciimode is supported. If you need binary
        output, please contact support@parapy.nl.
    """
    if copy:
        shape = shape_copy(shape)

    mesh = BRepMesh_IncrementalMesh(shape, linear_deflection, relative,
                                    angular_deflection, parallel,
                                    adaptive_min)
    mesh.Perform()

    if not mesh.IsDone():
        msg = ("Error meshing shape before writing to STL file: '{}'. "
               "Meshing parameters: {}.")
        keys = ["linear_deflection", "relative", "angular_deflection",
                "parallel", "adaptive_min"]
        dct = locals()
        values = [dct[k] for k in keys]
        msg_parameters = ", ".join("{}={}".format(k, v)
                                   for k, v in zip(keys, values))
        raise RuntimeError(msg.format(filename, msg_parameters))

    writer = StlAPI_Writer()
    if not asciimode:
        msg = ("For now only asciimode=True is supported. Please contact "
               "support@parapy.nl if you need binary support.")
        raise NotImplementedError(msg)
        # writer.ASCIIMode(asciimode)

    success = writer.Write(shape, filename)
    if not success :
        msg = "Error writing to STL file {}."
        raise RuntimeError(msg.format(filename))


def shape_from_stl_file(filename):
    """ Returns a shape from the brep file ``filename``. Usage:

    >>> shape = shape_from_stl_file('shape.stl')

    :param str filename: path to the stl file
    :rtype: OCC.TopoDS.TopoDS_Shape
    """
    shape = TopoDS_Shape()
    reader = StlAPI_Reader()
    reader.Read(shape, filename)
    return shape


def solids_from_stl_file(filename):
    """Return solids from .stl file ``filename``. Usage:

    >>> solids = solids_from_stl_file('faces.stl')

    :param str filename: stl file
    :rtype: list[OCC.TopoDS.TopoDS_Shape]
    """
    shape = shape_from_stl_file(filename)
    return list(sub_shapes(shape, TopAbs_SOLID))


def shells_from_stl_file(filename):
    """Return solids from .stl file ``filename``. Usage:

    >>> solids = solids_from_stl_file('faces.stl')

    :param str filename: stl file
    :rtype: list[OCC.TopoDS.TopoDS_Shape]
    """
    shape = shape_from_stl_file(filename)
    return list(sub_shapes(shape, TopAbs_SHELL))


def faces_from_stl_file(filename):
    """Return faces from .stl file ``filename``. Usage:

    >>> faces = faces_from_stl_file('faces.stl')

    :param str filename: stl file
    :rtype: list[OCC.TopoDS.TopoDS_Shape]
    """
    shape = shape_from_stl_file(filename)
    return list(sub_shapes(shape, TopAbs_FACE))
