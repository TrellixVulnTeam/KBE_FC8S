#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

"""Utilities to read from and write to .brep files."""
import os

from OCC.wrapper.BRep import BRep_Builder
from OCC.wrapper.BRepTools import BRepTools__Read, BRepTools__Write
from OCC.wrapper.TopAbs import TopAbs_SOLID, TopAbs_FACE
from OCC.wrapper.TopoDS import TopoDS_Shape

from OCC.utils.top import sub_shapes

__all__ = ["shape_from_brep_file", "solids_from_brep_file"]
__author__ = "Reinier van Dijk (support@parapy.org)"


def shape_from_brep_file(filename):
    """ Returns a shape from the brep file ``filename``.

    Example:
    >>> shape = shape_from_brep_file('shape.brep')

    :param str filename: path to the brep file
    :rtype: OCC.TopoDS.TopoDS_Shape
    """
    if not os.path.exists(filename):
        raise RuntimeError("File '{}' does not exist.".format(os.path.abspath(filename)))
    shape = TopoDS_Shape()
    builder = BRep_Builder()
    flag = BRepTools__Read(shape, filename, builder)
    if not flag:
        raise RuntimeError("Reading '{}' failed.".format(os.path.abspath(filename)))
    return shape


def shape_to_brep_file(shape, filename):
    """ Writes ``shape`` to ``filename``

    Example:
    >>> from OCC.wrapper.BRepBuilderAPI import BRepBuilderAPI_MakeEdge
    ... from OCC.wrapper.gp import gp_Pnt
    ... edge = BRepBuilderAPI_MakeEdge(gp_Pnt(0, 0, 0,), gp_Pnt(0, 0, 1))
    ... shape_to_brep_file(edge, 'edge.brep')

    :param OCC.TopoDS.TopoDS_Shape shape: a shape
    :param str filename: path to the brep file
    :rtype: bool
    """
    flag = BRepTools__Write(shape, filename)
    return flag


def solids_from_brep_file(filename):
    """ Returns the solids from brep file ``filename``

    Example:
    >>> solids = solids_from_brep_file('shapes.brep')

    :param str filename: brep file
    :rtype: list[OCC.TopoDS.TopoDS_Shape]
    """
    shape = shape_from_brep_file(filename)
    return list(sub_shapes(shape, TopAbs_SOLID))


def faces_from_brep_file(filename):
    """ Returns the faces from brep file ``filename``

    Example:
    >>> faces = faces_from_brep_file('faces.brep')

    :param str filename: brep file
    :rtype: CC.TopoDS.TopoDS_Shape
    """
    shape = shape_from_brep_file(filename)
    return list(sub_shapes(shape, TopAbs_FACE))

if __name__ == '__main__':
    pass
