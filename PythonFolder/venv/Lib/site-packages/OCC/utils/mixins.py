#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

"""Mixin for transformations"""

from OCC.wrapper.gp import gp_Trsf, gp_Ax3, gp_Vec, gp_Ax1, gp_Dir, gp_Ax2
from OCC.utils.gp import to_vec

__all__ = ["TransformationMixin"]


class TransformationMixin(object):
    def _transformed(self, trsf, **info):
        """trsf is gp_Trsf. Info is bashed into new object's _transformation slot. Form::

        {"operation" : "transformed" | "translated" ...,
         ...}
        """
        raise NotImplementedError("implement in subclass")

    def transformed(self, new_position, old_position=None):
        """ Transform this class from old_position to new_position

        :param OCC.gp.gp_Ax3 new_position:
        :param OCC.gp.gp_Ax3 old_position:
        """
        old_position = old_position or self.position
        trsf = gp_Trsf()
        trsf.SetDisplacement(old_position, new_position)
        return self._transformed(trsf, operation="transformed", from_position=old_position, to_position=new_position)

    def translated(self, *args, **kwargs):
        """same syntax as point/position.translate()"""
        p1 = self.position
        p2 = p1(*args, **kwargs)
        vec = gp_Vec(p2, p1)
        trsf = gp_Trsf()
        trsf.SetTranslation(vec)
        return self._transformed(trsf, operation="translated", vector=vec)

    def rotated(self, rotation_axis, angle, reference_point=None):
        # TODO this was ParaPy stuff, should it be replaced for this class? discuss...
        # vector = self.position.ensure_vector(rotation_axis)
        vector = to_vec(rotation_axis)
        reference_point = reference_point if not reference_point is None else self.position.Location()
        axis = gp_Ax1(reference_point, gp_Dir(vector))
        trsf = gp_Trsf()
        trsf.SetRotation(axis, angle)
        return self._transformed(trsf, operation="rotated",
                                 axis=axis,
                                 angle=angle)

    def scaled(self, factor, reference_point=None):
        """Scaling by a factor and reference_point (defaults to self.location). Non-uniform
        scaling is not supported yet. This requires gp_GTrsf() and BRepBuilderAPI_GTransform."""
        trsf = gp_Trsf()
        if reference_point is None:
            reference_point = self.position.Location()
        trsf.SetScale(reference_point, factor)
        return self._transformed(trsf, operation="scaled", reference_point=reference_point, factor=factor)

    def mirrored(self, reference, dir1=None, dir2=None):
        """Create mirrored version of this BRep. Input patterns:
            [AbstractPoint]: point symmetry
            [AbstractPoint, Vector|str]: line symmetry
            [AbstractPoint, Vector|str, Vector|str]: planar symmetry
            [obj with 'position']: planar symmetry (e.g. a Plane)
        """
        trsf = gp_Trsf()
        if isinstance(reference, gp_Ax3):
            if not dir1 is None:
                v1 = to_vec(dir1)
                if not dir2 is None:
                    v2 = to_vec(dir2)
                    axis = gp_Ax2(reference, gp_Dir(v1 - v2))
                    trsf.SetMirror(axis)
                else:
                    axis = gp_Ax1(reference.Location(), gp_Dir(v1))
                    trsf.SetMirror(axis)
            else:
                trsf.SetMirror(reference.Location())
        elif hasattr(reference, 'position'):
            trsf.SetMirror(reference.position.Ax2())
        else:
            raise ValueError(repr(reference))
        return self._transformed(trsf, operation="mirrored",
                                 reference=reference,
                                 dir1=dir1,
                                 dir2=dir2)
