#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

"""Utilities for wires"""

from OCC.wrapper.BRepTools import BRepTools_WireExplorer
from OCC.wrapper.TopExp import TopExp__Vertices
from OCC.wrapper.TopoDS import TopoDS_Vertex

__all__ = ["yield_ordered_vertices", "yield_ordered_edges",
           "first_last_vertex"]


def yield_ordered_vertices(topods_wire):
    """Yield wire vertices in order. If wire is closed, last vertex is Partner
    of first vertex.

    ..caution:: reference to previous TopoDS_Vertex is mutated when next element
        is yielded.

    :type topods_wire: OCC.TopoDS.TopoDS_Wire
    :rtype: collections.Iterator[OCC.TopoDS.TopoDS_Vertex]
    """
    exp = BRepTools_WireExplorer(topods_wire)
    while exp.More():
        yield exp.CurrentVertex()
        exp.Next()  # mutates CurrentVertex() reference
    yield exp.CurrentVertex()  # last vertex


def yield_ordered_edges(topods_wire):
    """Yield wire edges in order.

    ..caution:: reference to previous TopoDS_Edge is mutated when next element
        is yielded.

    :type topods_wire: OCC.TopoDS.TopoDS_Wire
    :rtype: collections.Iterator[OCC.TopoDS.TopoDS_Edge]

    ..caution:: reference to previous TopoDS_Edge is mutated when next element
        is yielded.
    """
    exp = BRepTools_WireExplorer(topods_wire)
    while exp.More():
        yield exp.Current()
        exp.Next()  # mutates Current() reference


def first_last_vertex(topods_wire):
    """Return first and last vertex of TopoDS_Wire.

    .. caution:: vertices can be NullShape()

    :type topods_wire: OCC.TopoDS.TopoDS_Wire
    :rtype: (TopoDS_Vertex, TopoDS_Vertex)
    """
    v1 = TopoDS_Vertex()
    v2 = TopoDS_Vertex()
    TopExp__Vertices(topods_wire, v1, v2)
    return v1, v2
