#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

from OCC.wrapper.BRepBuilderAPI import BRepBuilderAPI_MakeEdge, BRepBuilderAPI_MakeWire, \
    BRepBuilderAPI_MakeFace, BRepBuilderAPI_MakeSolid
from OCC.wrapper.TopoDS import TopoDS_Builder, TopoDS_Compound

__all__ = ["edge_from_curve", "wire_from_edge"]
__author__ = "Reinier van Dijk (support@parapy.org)"


def edge_from_curve(curve):
    builder = BRepBuilderAPI_MakeEdge(curve)

    return builder.Edge()


def wire_from_edge(edge):
    builder = BRepBuilderAPI_MakeWire(edge)

    return builder.Wire()


def face_from_surface(surface, tol_degen=1.0e-7):
    builder = BRepBuilderAPI_MakeFace(surface, tol_degen)
    if builder.IsDone():
        return builder.Face()
    else:
        raise RuntimeError("BRepBuilderAPI_MakeFace() failed.")


def solid_from_shell(shell):
    builder = BRepBuilderAPI_MakeSolid(shell)
    if builder.IsDone():
        return builder.Solid()
    else:
        raise RuntimeError("BRepBuilderAPI_MakeSolid() failed.")


def face_from_wire(wire, only_plane=False):
    builder = BRepBuilderAPI_MakeFace(wire, only_plane)
    if builder.IsDone():
        return builder.Face()
    else:
        raise RuntimeError("BRepBuilderAPI_MakeFace() failed.")


def compound_from_shapes(topods_shapes):
    """Make a TopoDS_Compound from multiple TopoDS_Shape instances.

    :type topods_shapes: collections.Iterable[OCC.TopoDS.TopoDS_Shape]
    :rtype: TopoDS_Compound
    """
    builder = TopoDS_Builder()
    topods_compound = TopoDS_Compound()
    builder.MakeCompound(topods_compound)
    for topods_shape in topods_shapes:
        builder.Add(topods_compound, topods_shape)
    return topods_compound
