#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

from OCC.wrapper.BRepBuilderAPI import BRepBuilderAPI_Sewing
from OCC.wrapper.BRepClass3d import BRepClass3d_SolidClassifier
from OCC.wrapper.TopAbs import TopAbs_IN
from OCC.wrapper.TopoDS import TopoDS__Shell
from OCC.utils.builder import solid_from_shell


def sew_into_solid(shapes, tolerance=1.0e-6, cut_free_edges=False, non_manifold=False, check_orientation=True):
    builder = BRepBuilderAPI_Sewing(tolerance, True, True, cut_free_edges, non_manifold)
    for shape in shapes:
        builder.Add(shape)
    builder.Perform()
    if builder.NbFreeEdges():
        msg = ("BRepBuilderAPI_Sewing did not return a closed shell. "
               "The resulting shape has {:} free edges. Adapt input "
               "geometry or play with tolerance.")
        raise Exception(msg.format(builder.NbFreeEdges()))
    s = builder.SewedShape()
    st = s.ShapeType()
    if st == 2:
        pass
    elif st == 3:
        s = TopoDS__Shell(s)
        s = solid_from_shell(s)
    else:
        assert False
    if check_orientation and is_solid_reversed(s):
        s = s.Reversed()
    return s


def sew(shapes, tolerance=1.0e-6, cut_free_edges=False, non_manifold=False):
    """ Sews ``shapes`` with a given ``tolerance``.

    :param collections.Sequece[OCC.TopoDS.TopoDS_Shape] shapes: list of shapes
        to be sewn
    :param float tolerance:
    :param bool cut_free_edges:
    :param bool non_manifold:
    :rtype: OCC.TopoDS.TopoDS_Shape
    """
    builder = BRepBuilderAPI_Sewing(tolerance, True, True, cut_free_edges,
                                    non_manifold)
    for shape in shapes:
        builder.Add(shape)
    builder.Perform()

    s = builder.SewedShape()
    return s


# TODO: make C++ utility
def is_solid_reversed(topods_shape, tolerance=1.0e-7):
    """Is the given solid ``topods_shape`` reversed or *inside-out*, viz. are
    all face normals pointing outwards?

    :param topods_shape: OCC.TopoDS.TopoDS_Shape
    :type tolerance: float
    :rtype: bool
    """
    classifier = BRepClass3d_SolidClassifier(topods_shape)
    classifier.PerformInfinitePoint(tolerance)
    return classifier.State() == TopAbs_IN