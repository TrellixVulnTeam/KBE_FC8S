#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

from OCC.wrapper.BRepAdaptor import BRepAdaptor_Curve
from OCC.wrapper.BRepBuilderAPI import BRepBuilderAPI_MakeEdge, BRepBuilderAPI_MakeFace
from OCC.wrapper.Geom import (Geom_Plane, Geom_RectangularTrimmedSurface,
                      Handle_Geom_Plane, Handle_Geom_RectangularTrimmedSurface)
from OCC.wrapper.GeomAPI import GeomAPI_Interpolate
from OCC.wrapper.TColgp import Handle_TColgp_HArray1OfPnt, TColgp_HArray1OfPnt
from OCC.wrapper.TopExp import TopExp__Vertices
from OCC.wrapper.TopoDS import TopoDS_Vertex
from OCC.wrapper.gp import gp_Pnt
from OCC.utils.builder import edge_from_curve
from OCC.utils.utilities import avg

__all__ = ("rectangular_face", "make_edge_2pts",
           "make_Handle_TColgp_HArray1OfPnt", "make_s_curve", "make_s_edge",
           "first_last_vertex", "midpoint_edge")


def rectangular_face(gp_ax3, width, length, toldegen=1.0e-7):
    pln = Geom_Plane(gp_ax3)
    h_pln = Handle_Geom_Plane(pln)
    srf = Geom_RectangularTrimmedSurface(h_pln, -width / 2., width / 2.,
                                         -length / 2., length / 2.)
    h_srf = Handle_Geom_RectangularTrimmedSurface(srf)
    builder = BRepBuilderAPI_MakeFace(h_srf, toldegen)
    face = builder.Face()
    return face


def make_edge_2pts(pt1, pt2):
    """ Creates an edge between two points

    :param tuple[float] pt1: (x, y, z) coordinates of point 1
    :param tuple[float] pt2: (x, y, z) coordinates of point 1
    :rtype: OCC.TopoDS.TopoDS_Edge
    """
    builder = BRepBuilderAPI_MakeEdge(gp_Pnt(*pt1), gp_Pnt(*pt2))
    edge = builder.Edge()
    return edge


def make_Handle_TColgp_HArray1OfPnt(gp_pnts):
    arr = TColgp_HArray1OfPnt(1, len(gp_pnts))
    h_arr = Handle_TColgp_HArray1OfPnt(arr)
    arr1 = arr.Array1()
    for i, gp_pnt in enumerate(gp_pnts):
        arr1.SetValue(i+1, gp_pnt)
    return h_arr


def make_s_curve(gp_pnt1, gp_pnt2, gp_vec1, gp_vec2, periodic=False,
                 tolerance=1.0e-7):
    """
    >>> crv = make_s_curve(gp_Pnt(0, 0, 0),gp_Pnt(1, 0, 1),
    ...                    gp_Vec(1, 0, 0), gp_Vec(1, 0, 0))

    :param gp_pnt1:
    :param gp_pnt2:
    :param gp_vec1:
    :param gp_vec2:
    :param periodic:
    :param tolerance:
    :return:
    """
    h_arr = make_Handle_TColgp_HArray1OfPnt((gp_pnt1, gp_pnt2))
    builder = GeomAPI_Interpolate(h_arr, periodic, tolerance)
    builder.Load(gp_vec1, gp_vec2)
    builder.Perform()
    h_crv = builder.Curve()
    return h_crv


def make_s_edge(gp_pnt1, gp_pnt2, gp_vec1, gp_vec2, **kwargs):
    h_crv = make_s_curve(gp_pnt1, gp_pnt2, gp_vec1, gp_vec2, **kwargs)
    edge = edge_from_curve(h_crv)
    return edge


def midpoint_edge(topods_edge):
    """Usage:

    >>> from OCC.wrapper.BRepBuilderAPI import BRepBuilderAPI_MakeEdge
    >>> from OCC.wrapper.gp import gp_Pnt
    >>> from OCC.utils.edge import midpoint_edge
    >>> e = BRepBuilderAPI_MakeEdge(gp_Pnt(0, 1, 2), gp_Pnt(2, 3, 4)).Edge()
    >>> midpoint_edge(e).Coord()
    [1.0, 2.0, 3.0]
    """
    adapt = BRepAdaptor_Curve(topods_edge)
    u1 = adapt.FirstParameter()
    u2 = adapt.LastParameter()
    xyz1 = adapt.Value(u1).Coord()
    xyz2 = adapt.Value(u2).Coord()
    x, y, z = (avg(a, b) for a, b in zip(xyz1, xyz2))
    return gp_Pnt(x, y, z)


def first_last_vertex(topods_edge, oriented=False):
    """Return first and last vertex of TopoDS_Edge.

    .. caution:: vertices can be NullShape()

    :type topods_edge: OCC.TopoDS.TopoDS_Edge
    :param bool oriented: taking account the edge orientation? If set to
        :py:`True`, and the edge is oriented ``TopAbs_FORWARD`` then it will
        return the ``TopAbs_FORWARD`` oriented vertex first, and the
        ``TopAbs_REVERSED`` oriented vertex second. When
        the edge is oriented ``TopAbs_REVERSED`` the order of vertices is
        reversed: ``TopAbs_REVERSED``, ``TopAbs_FORWARD``. On :py:`False`
        the behaviour is unknown.
    :rtype: (TopoDS_Vertex, TopoDS_Vertex)
    """
    v1 = TopoDS_Vertex()
    v2 = TopoDS_Vertex()
    TopExp__Vertices(topods_edge, v1, v2, oriented)
    return v1, v2
