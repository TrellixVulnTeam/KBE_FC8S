#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

from collections import namedtuple

from OCC.wrapper.Font import (
    Font_FA_Bold, Font_FA_BoldItalic, Font_FA_Italic, Font_FA_Regular,
    Font_FontMgr)

__all__ = "Font",


class Font(namedtuple('_Font', ('name', 'bold', 'italic', 'size', 'path'))):
    """Font related utility class to help conversion between Python values
    and :class:`Font_SystemFont` and to query the system for the installed
    fonts.
    """
    _BI_TO_FONT_ASPECT = {
        (True, True): Font_FA_BoldItalic,
        (True, False): Font_FA_Bold,
        (False, True): Font_FA_Italic,
        (False, False): Font_FA_Regular
    }

    _FONT_ASPECT_TO_BI = {
        Font_FA_BoldItalic: (True, True),
        Font_FA_Bold: (True, False),
        Font_FA_Italic: (False, True),
        Font_FA_Regular: (False, False)
    }

    @classmethod
    def from_system_font(cls, font):
        """Create :class:`Font` from an :class:`~OCC.Font.Font_SystemFont`.

        :param OCC.Font.Font_SystemFont font:
        """
        name = font.FontName().ToCString()
        bold, italic = cls.font_aspect_to_bi(font.FontAspect())
        size = font.FontHeight()
        path = font.FontPath().ToCString()
        return cls(name, bold, italic, size, path)

    @staticmethod
    def get_installed_fonts():
        """Return the fonts that are installed to the system and can be
        referenced by their name.

        :return: list[Font]
        """
        font_mgr = Font_FontMgr.GetInstance()
        system_fonts = font_mgr.GetAvailableFonts()
        return list(map(Font.from_system_font, system_fonts))

    @classmethod
    def font_aspect_to_bi(cls, aspect):
        return cls._FONT_ASPECT_TO_BI[aspect]

    @classmethod
    def bi_to_font_aspect(cls, bold, italic):
        return cls._BI_TO_FONT_ASPECT[(bool(bold), bool(italic))]
