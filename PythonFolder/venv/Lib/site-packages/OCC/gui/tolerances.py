#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

from math import log

import wx

from OCC.wrapper.BRep import BRep_Tool_Pnt, BRep_Tool_Tolerance
from OCC.wrapper.TopAbs import TopAbs_EDGE, TopAbs_FACE, TopAbs_VERTEX
from OCC.gui.viewer import ViewerWindow
from OCC.utils.edge import midpoint_edge
from OCC.utils.face import midpoint_face
from OCC.utils.top import sub_shapes

__all__ = ["display_tolerances"]


def get_color(tol):
    v = log(tol, 10) + 7
    r = min(0 + v * 255 / 7., 255)
    g = max(255 - v * 255 / 7., 0)
    return r, g, 0


def _display_tolerances(viewer, topods_shape, topabs_enum, pt_callback,
                        threshold=1.0e-7):
    for s in sub_shapes(topods_shape, shape_type=topabs_enum, downcast=True):
        tol = BRep_Tool_Tolerance(s)
        if tol < threshold:
            continue
        xyz = pt_callback(s)
        rgb = get_color(tol)
        obj = viewer.display_topods_shape(s, update=False, fit=False)
        viewer.apply_style(obj, color=rgb, update=False)
        obj = viewer.display_text(str(tol), xyz, top_most=True,
                                  update=False, fit=False)
        viewer.apply_style(obj, color=rgb, update=False)


def display_tolerances(topods_shape, transparent_shape=True,
                       vertices=True, edges=True, faces=True,
                       threshold=1.0e-7):
    app = wx.GetApp() or wx.App()
    viewer = ViewerWindow().viewer
    if transparent_shape:
        obj = viewer.display_topods_shape(topods_shape, update=False, fit=False)
        viewer.apply_style(obj, transparency=0.9, display_priority=4,
                           update=False)
    if vertices:
        _display_tolerances(viewer, topods_shape, TopAbs_VERTEX, BRep_Tool_Pnt,
                            threshold=threshold)
    if edges:
        _display_tolerances(viewer, topods_shape, TopAbs_EDGE, midpoint_edge,
                            threshold=threshold)
    if faces:
        _display_tolerances(viewer, topods_shape, TopAbs_FACE, midpoint_face,
                            threshold=threshold)
    viewer.fit_all()
    app.MainLoop()

if __name__ == '__main__':
    from OCC.wrapper.BRepPrimAPI import BRepPrimAPI_MakeBox

    topods_shape = BRepPrimAPI_MakeBox(1, 2, 3).Shape()
    display_tolerances(topods_shape)
