#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

import re

import wx

from OCC.gui import wx34

__all__ = ["FloatEditor"]

RE_NUMBER_BASE = r"[0-9]*\.?[0-9]*([0-9]+[eE][-+]?[0-9]*)?$"
RE_NUMBER = r"^[-+]?" + RE_NUMBER_BASE
RE_NUMBER_POSITIVE = r"^[+]?" + RE_NUMBER_BASE


class EscapableDialogNoCancelButton(wx.Dialog):
    """wx.Dialog that can be closed when pressing ESC button."""

    ESCAPE_MAP = {wx.WXK_ESCAPE: wx.ID_CANCEL}

    def __init__(self, *args, **kwargs):
        super(EscapableDialogNoCancelButton, self).__init__(*args, **kwargs)
        # self.SetEscapeId(wx.WXK_ESCAPE)
        self.Bind(wx.EVT_CHAR_HOOK, self._OnKey)

    def _OnKey(self, event):
        key_code = event.GetKeyCode()
        try:
            escape_id = self.ESCAPE_MAP[key_code]
        except KeyError:
            event.Skip()
        else:
            self.EndModal(escape_id)


class FloatValidator(wx34.Validator):
    BACKGROUND_COLOR_ON_INVALID = "pink"

    def __init__(self, min=None, max=None, incl_min=True, incl_max=True):
        wx34.Validator.__init__(self)
        self.min = min
        self.max = max
        self.incl_min = incl_min
        self.incl_max = incl_max

        if min is not None and min >= 0:
            # regex ensures that no '-' sign is entered at start
            regex = RE_NUMBER_POSITIVE
        else:
            regex = RE_NUMBER

        self._regex = re.compile(regex)
        self._invalid = False

        self.Bind(wx.EVT_CHAR, self.OnChar)

    def Clone(self):
        return FloatValidator(min=self.min, max=self.max,
                              incl_min=self.incl_min, incl_max=self.incl_max)

    def Validate(self, win):
        ctrl = self.GetWindow()
        s = ctrl.GetValue()

        value = safe_convert_float(s)

        if value is not None and self._is_value_in_range(value):
            self.ResetStyle()
            return True
        else:
            self.ApplyInvalidStyle()
            ctrl.SetFocus()

            if not wx34.Validator_IsSilent():
                wx.Bell()

            return False

    def ApplyInvalidStyle(self):
        ctrl = self.GetWindow()
        ctrl.SetBackgroundColour(self.BACKGROUND_COLOR_ON_INVALID)
        ctrl.Refresh()
        self._invalid = True

    def ResetStyle(self):
        if self._invalid:
            ctrl = self.GetWindow()
            ctrl.SetBackgroundColour(
                wx34.SystemSettings_GetColour(wx.SYS_COLOUR_WINDOW))
            ctrl.Refresh()
            self._invalid = False

    def TransferToWindow(self):
        return True

    def TransferFromWindow(self):
        return True

    def OnChar(self, event):
        self.ResetStyle()

        key = event.GetKeyCode()

        # let all special (also non-ASCII) propagate
        if key < wx.WXK_SPACE or key == wx.WXK_DELETE or key > 255:
            event.Skip()
            return

        ctrl = self.GetWindow()
        val = ctrl.GetValue()
        idx1, idx2 = ctrl.GetSelection()

        new_val = val[:idx1] + chr(key) + val[idx2:]

        # print "checking:", val

        if self._regex.match(new_val):
            event.Skip()
            return

        if not wx34.Validator_IsSilent():
            wx.Bell()

    def _is_value_in_range(self, value):
        min = self.min
        if min is not None:
            if self.incl_min:
                if value < min:
                    return False
            else:
                if value <= min:
                    return False

        max = self.max
        if max is not None:
            if self.incl_max:
                if value > max:
                    return False
            else:
                if value >= max:
                    return False

        return True


class FloatEditor(EscapableDialogNoCancelButton):
    """Popup dialog where user can fill out a float value. Usage:

    >>> dlg = FloatEditor(None, value=3.0)
    >>> flag = dlg.ShowModal()
    >>> dlg.Destroy()
    >>> if flag == wx.ID_OK:
    >>>     print "entered: ", dlg.GetValue()
    >>> else:
    >>>     print "canceled"

    >>> # Default background color if invalid is pink. One can change that
    >>> # either globally at class level:
    >>> FloatValidator.BACKGROUND_COLOR_ON_INVALID = "yellow"
    >>> # or locally on instance level
    >>> dlg = FloatEditor(None, value=3.0)
    >>> dlg.ctrl.Validator.BACKGROUND_COLOR_ON_INVALID = "orange"
    >>> # etc.

    :param wx.Window|None parent:
    :param float|None value: default value to show or None
    :param float|None min: lower bound for value or None
    :param float|None min: upper bound for value or None
    :param bool incl_min: if ``min``, consider this inclusive or not?
    :param bool incl_max: if ``max``, consider this inclusive or not?
    :param kwargs: other arguments for wx.Dialog
    """

    def __init__(self, parent, value=None, min=None, max=None,
                 incl_min=True, incl_max=True, **kwargs):
        super(FloatEditor, self).__init__(parent, style=0, **kwargs)

        wx34.SetSizeHints(self, wx.DefaultSize, wx.DefaultSize)

        bSizer1 = wx.BoxSizer(wx.VERTICAL)

        if value is None:
            value = wx.EmptyString
        else:
            value = str(value)

        validator = FloatValidator(
            min=min, max=max, incl_min=incl_min, incl_max=incl_max)
        self.ctrl = wx.TextCtrl(self, wx.ID_ANY, value,
                                wx.DefaultPosition, wx.DefaultSize,
                                validator=validator,
                                style=wx.TE_PROCESS_ENTER
                                )
        bSizer1.Add(self.ctrl, 0, 0, 5)

        self.SetSizer(bSizer1)
        self.Layout()
        bSizer1.Fit(self)

        self.ctrl.Bind(wx.EVT_TEXT_ENTER, self.OnEnter)

        self.Centre(wx.BOTH)

    def GetValue(self):
        return float(self.ctrl.GetValue())

    def OnEnter(self, event):
        if self.Validate() and self.TransferDataFromWindow():
            if self.IsModal():
                self.EndModal(wx.ID_OK)
            else:
                self.SetReturnCode(wx.ID_OK)
                self.Show(False)


def safe_convert_float(s):
    try:
        return float(s)
    except ValueError:
        return None


if __name__ == '__main__':
    app = wx.GetApp() or wx.App(False)

    def interact(dlg):
        flag = dlg.ShowModal()
        dlg.Destroy()

        if flag == wx.ID_OK:
            print("entered: ", dlg.GetValue())
        else:
            print("canceled")

    print("--- BASIC USE --- ")
    dlg = FloatEditor(None)
    interact(dlg)

    print("--- POSITIVE ONLY ---")
    dlg = FloatEditor(None, value=1.23, min=0, incl_min=False)
    interact(dlg)

    print("--- CUSTOM ---")
    dlg = FloatEditor(None, value=1.23, min=-2, max=2, incl_max=False)
    interact(dlg)

    app.MainLoop()
