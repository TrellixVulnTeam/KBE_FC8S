#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

import sys

from OCC.wrapper.Graphic3d import Graphic3d_Camera
from OCC.wrapper.gp import gp_Dir, gp_Pnt


class Camera(object):
    """
    Pickleable wrapper for the OCC camera object. Currently only supports
    settings for an orthogonal view.
    """

    def __init__(self, graphic3d_camera=None):
        if graphic3d_camera is None:
            graphic3d_camera = Graphic3d_Camera().handle

        #: :type: OCC.Graphic3d.Handle_Graphic3d_Camera
        self._camera = graphic3d_camera

    @property
    def aspect_ratio(self):
        """
        :rtype: float
        """
        return self._camera.Aspect()

    @aspect_ratio.setter
    def aspect_ratio(self, aspect):
        """
        :type aspect: float
        """
        self._camera.SetAspect(aspect)

    @property
    def scale(self):
        """
        :rtype: float
        """
        return self._camera.Scale()

    @scale.setter
    def scale(self, scale):
        """
        :type scale: float
        """
        self._camera.SetScale(scale)

    @property
    def eye_location(self):
        """
        :rtype: tuple[float, float, float]
        """
        eye = self._camera.Eye()
        return tuple(eye.Coord())

    @eye_location.setter
    def eye_location(self, loc):
        """
        :param tuple[float, float, float] loc: location of the camera eye.
        """
        self._camera.SetEye(gp_Pnt(*loc))

    @property
    def viewing_center(self):
        """
        :rtype: tuple[float, float, float]
        """
        center = self._camera.Center()
        return tuple(center.Coord())

    @viewing_center.setter
    def viewing_center(self, center):
        """
        :param tuple[float, float, float] center:
        """
        self._camera.SetCenter(gp_Pnt(*center))

    @property
    def up_direction(self):
        """
        :rtype: tuple[float, float, float]
        """
        direction = self._camera.Up()
        return tuple(direction.Coord())

    @up_direction.setter
    def up_direction(self, direction):
        """
        :param tuple[float, float, float] direction:
        """
        self._camera.SetUp(gp_Dir(*direction))

    @property
    def viewing_direction(self):
        """
        :rtype: tuple[float, float, float]
        """
        direction = self._camera.Direction()
        return tuple(direction.Coord())

    @viewing_direction.setter
    def viewing_direction(self, direction):
        """
        :param tuple[float, float, float] direction:
        """
        self._camera.SetDirection(gp_Dir(*direction))

    @property
    def distance(self):
        """The distance from the camera to the viewing center.

        :rtype: float
        """
        return self._camera.Distance()

    @distance.setter
    def distance(self, distance):
        """The distance from the camera to the viewing center.

        :type distance: float
        """
        #: :type: OCC.Graphic3d.Handle_Graphic3d_Camera
        camera = self._camera
        camera.SetDistance(distance)

    def copy_from_camera(self, camera):
        """Copy the information from ``camera`` to this Camera.

        :param OCC.Graphic3d.Handle_Graphic3d_Camera | Camera camera:
        """
        this_camera = self._camera
        if isinstance(camera, Camera):
            camera = camera._camera

        this_camera.CopyOrientationData(camera)
        this_camera.CopyMappingData(camera)

    def copy_to_camera(self, camera):
        """Copy the information from this Camera to ``camera``.

        :param OCC.Graphic3d.Handle_Graphic3d_Camera | Camera camera:
        """
        this_camera = self._camera
        if isinstance(camera, Camera):
            camera = camera._camera

        camera.CopyOrientationData(this_camera)
        camera.CopyMappingData(this_camera)

    def dump(self, stream=sys.stdout):
        """Dump this camera to ``stream``.

        :param stream: Stream to print the camera settings to (default:
            sys.stdout)
        """
        msg = ("Camera settings:\n"
               "\t'eye location': {},\n"
               "\t'viewing center': {},\n"
               "\t'scale': {},\n\t'camera up direction': {},\n"
               "\t'aspect ratio': {}\n")

        stream.write(msg.format(self.eye_location,
                         self.viewing_center,
                         self.scale,
                         self.up_direction,
                         self.aspect_ratio))

    _state_key_attr = {'eye': 'eye_location',
                       'center': 'viewing_center',
                       'scale': 'scale',
                       'up': 'up_direction',
                       'aspect': 'aspect_ratio'}

    def __getstate__(self):
        state = dict()

        cls = type(self)
        key_attr_iter = iter(cls._state_key_attr.items())
        for key, attr in key_attr_iter:
            state[key] = getattr(self, attr)

        return state

    def __setstate__(self, state):
        cls = type(self)
        key_attr_iter = iter(cls._state_key_attr.items())

        self._camera = Graphic3d_Camera().handle

        for key, attr in key_attr_iter:
            setattr(self, attr, state[key])


if __name__ == '__main__':
    import pickle

    camera = Camera()
    camera.viewing_center = (1, 1, 1)
    camera.eye_location = (3, 3, 3)
    camera.scale = 10
    camera.up_direction = (0, -1, 0)

    # pickle
    pickled_cam = pickle.dumps(camera)
    print("camera original:")
    camera.dump()

    # unpickle
    camera2 = pickle.loads(pickled_cam)
    print("camera unpickled:")
    camera2.dump()
