#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2021 ParaPy Holding B.V.
#
# This file is subject to the terms and conditions defined in
# the license agreement that you have received with this source code
#
# THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
# PURPOSE.

import typing
from warnings import warn

from OCC.wrapper.AIS import (
    AIS_Axis, AIS_ColoredShape, AIS_Line, AIS_TOAX_Unknown, AIS_TOAX_XAxis,
    AIS_TOAX_YAxis, AIS_TOAX_ZAxis, AIS_TextLabel, AIS_Trihedron)
from OCC.wrapper.Geom import Geom_Axis2Placement, Geom_Line
from OCC.wrapper.Graphic3d import (Graphic3d_TMF_ZoomPers, Graphic3d_ZLayerId_Topmost, Graphic3d_ZLayerId_Top)
from OCC.wrapper.Prs3d import (
    Prs3d_DM_Shaded, Prs3d_DP_XAxis, Prs3d_DP_YAxis, Prs3d_DP_ZAxis, Prs3d_DM_WireFrame)
from OCC.wrapper.Quantity import Quantity_Color
from OCC.wrapper.TCollection import TCollection_ExtendedString
from OCC.wrapper.gp import gp_Ax1, gp_Ax2, gp_Dir, gp_Pnt, gp__Origin

from OCC.utils.utilities import py_QuantityColor

py_AIS_TOAX = {
    None: AIS_TOAX_Unknown,
    "x": AIS_TOAX_XAxis,
    "y": AIS_TOAX_YAxis,
    "z": AIS_TOAX_ZAxis}


def make_ais_coloredshape(topods_shape):
    return AIS_ColoredShape(topods_shape).handle


def make_ais_text_label(text, pt, top_most=False, height=None):
    if not isinstance(pt, gp_Pnt):
        pt = gp_Pnt(*pt)
    obj = AIS_TextLabel().handle
    obj.SetText(TCollection_ExtendedString(text))
    obj.SetPosition(pt)
    if height is not None:
        obj.SetHeight(height)
    if top_most:
        obj.SetZLayer(Graphic3d_ZLayerId_Topmost)
    return obj


_RED = py_QuantityColor("red")
_GREEN = py_QuantityColor("green")
_BLUE1 = py_QuantityColor("blue1")
_YELLOW = py_QuantityColor("yellow")

POINT_LIKE = typing.Tuple[float, float, float]

_PRS_MODE_TO_Prs3d = {
    'wireframe': Prs3d_DM_WireFrame,
    'shaded': Prs3d_DM_Shaded
}

_COLOR = typing.Union[
    typing.Tuple[Quantity_Color, Quantity_Color, Quantity_Color],
    Quantity_Color]



def make_ais_trihedron(pt: POINT_LIKE,
                       vz: POINT_LIKE = (0, 0, 1),
                       vx: POINT_LIKE = (1, 0, 0),
                       size: int = 1,
                       zoom_persistent: bool = False,
                       keep_on_top: bool = False,
                       display_mode: str = 'wireframe',
                       text_color: Quantity_Color = _YELLOW,
                       arrowhead_color: typing.Optional[Quantity_Color] = None,
                       color: _COLOR = (_RED, _GREEN, _BLUE1)):
    """Create an AIS_Trihedron with colored axes

    :param pt: center of the trihedron.
    :param vz: z direction (vector)
    :param vx: x direction (vector)
    :param size: size of the trihedron (length of each ax).
        If zoom_persistent=True, the unit is pixels
        (between 50 and 100 is in most cases what you will want).
        If zoom_persistent=False, the unit is world units.
    :param zoom_persistent: if True, the trihedron will not scale when you
        zoom in/out, it will only rotate.
    :param keep_on_top: If True, the trihedron will remain visible
        even when 'behind' other shapes in the viewer.
    :param color: (default: x=R, y=G, z=B), 3-Tuple of Quantity
        colors, or one single Quantity instance.
    :param display_mode: options: 'wireframe' | 'shaded'
        if 'wireframe': the trihedron is displayed as lines
        if 'shaded': the trihedron' is displayed as 3d shapes
    """
    pt = gp_Pnt(*pt)
    ax = Geom_Axis2Placement(pt, gp_Dir(*vz), gp_Dir(*vx)).handle
    # Create the trihedron at origin always. Use the axis location only for
    # anchor point. See: https://old.opencascade.com/content/aistrihedron-settransformpersistence-problem
    if zoom_persistent:
        ax.SetLocation(gp__Origin())

    obj = AIS_Trihedron(ax).handle

    prs3d_mode = _PRS_MODE_TO_Prs3d[display_mode]

    obj.SetDatumDisplayMode(prs3d_mode)

    if not hasattr(color, '__iter__'):
        color = [color] * 3

    obj.SetDatumPartColor(Prs3d_DP_XAxis, color[0])
    obj.SetDatumPartColor(Prs3d_DP_YAxis, color[1])
    obj.SetDatumPartColor(Prs3d_DP_ZAxis, color[2])

    if arrowhead_color:
        if display_mode == 'wireframe':
            obj.SetArrowColor(arrowhead_color)
        else:
            warn("Setting arrowhead color in shaded mode is not supported.")

            # fixme: has no effect, could be a wrapper bug
            # if not hasattr(arrowhead_color, '__iter__'):
            #     arrowhead_color = [arrowhead_color] *3
            # obj.SetDatumPartColor(Prs3d_DP_XArrow, arrowhead_color[0])
            # obj.SetDatumPartColor(Prs3d_DP_YArrow, arrowhead_color[1])
            # obj.SetDatumPartColor(Prs3d_DP_ZArrow, arrowhead_color[2])

    if text_color:
        obj.SetTextColor(text_color)
    if size:
        obj.SetSize(size)
    if keep_on_top:
        obj.SetZLayer(Graphic3d_ZLayerId_Top)
    if zoom_persistent:
        obj.SetTransformPersistence(Graphic3d_TMF_ZoomPers, pt)
    return obj



def make_ais_axis(pt, n, vx, component='x'):
    axis = py_AIS_TOAX[component]
    obj = Geom_Axis2Placement(
        gp_Ax2(gp_Pnt(*pt), gp_Dir(*n), gp_Dir(*vx))).handle
    return AIS_Axis(obj, axis).handle


def make_ais_line(pt, v):
    obj = Geom_Line(gp_Ax1(gp_Pnt(*pt), gp_Dir(*v))).handle
    return AIS_Line(obj).handle


if __name__ == '__main__':
    from OCC.wrapper.BRepPrimAPI import BRepPrimAPI_MakeBox
    import wx
    from OCC.gui.viewer import ViewerWindow
    box = BRepPrimAPI_MakeBox(1, 2, 3).Shape()

    obj1 = make_ais_coloredshape(box)
    obj2 = make_ais_text_label("hello", (0, 0, 0))
    obj3 = make_ais_trihedron((0, 0, 0))
    obj3b = make_ais_trihedron((0, 0, 0),(0,1,0),(0,0,1),
                               # color=_RED,
                               text_color=_RED,
                               zoom_persistent=True,
                               size=80)
    obj4 = make_ais_axis((0, 0, 0), (0, 0, 1), (1, 0, 0))
    obj5 = make_ais_line((0, 0, 0), (1, 1, 1))

    app = wx.App()
    window = ViewerWindow()
    viewer=window.viewer
    for ais in [
        # obj1, obj2, obj3,
                obj3b,
                # obj4, obj5
    ]:
       viewer.display(ais)

    window.Show(True)
    app.MainLoop()