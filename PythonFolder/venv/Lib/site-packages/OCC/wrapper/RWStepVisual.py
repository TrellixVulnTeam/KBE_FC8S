# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_RWStepVisual')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_RWStepVisual')
    _RWStepVisual = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_RWStepVisual', [dirname(__file__)])
        except ImportError:
            import _RWStepVisual
            return _RWStepVisual
        try:
            _mod = imp.load_module('_RWStepVisual', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _RWStepVisual = swig_import_helper()
    del swig_import_helper
else:
    import _RWStepVisual
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RWStepVisual.delete_SwigPyIterator

    def value(self):
        return _RWStepVisual.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _RWStepVisual.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _RWStepVisual.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _RWStepVisual.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _RWStepVisual.SwigPyIterator_equal(self, x)

    def copy(self):
        return _RWStepVisual.SwigPyIterator_copy(self)

    def next(self):
        return _RWStepVisual.SwigPyIterator_next(self)

    def __next__(self):
        return _RWStepVisual.SwigPyIterator___next__(self)

    def previous(self):
        return _RWStepVisual.SwigPyIterator_previous(self)

    def advance(self, n):
        return _RWStepVisual.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _RWStepVisual.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _RWStepVisual.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _RWStepVisual.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _RWStepVisual.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _RWStepVisual.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _RWStepVisual.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _RWStepVisual.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _RWStepVisual.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_RWStepVisual.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _RWStepVisual.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _RWStepVisual.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RWStepVisual.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _RWStepVisual.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _RWStepVisual.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _RWStepVisual.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _RWStepVisual.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_RWStepVisual.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _RWStepVisual.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _RWStepVisual.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RWStepVisual.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _RWStepVisual.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _RWStepVisual.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _RWStepVisual.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _RWStepVisual.ptr_to_number(item)
ptr_to_number = _RWStepVisual.ptr_to_number

def HashCode(*args):
    return _RWStepVisual.HashCode(*args)
HashCode = _RWStepVisual.HashCode

def ptr_equal(a, b):
    return _RWStepVisual.ptr_equal(a, b)
ptr_equal = _RWStepVisual.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepVisual
else:
    import StepVisual
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepBasic
else:
    import StepBasic
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepData
else:
    import StepData
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepShape
else:
    import StepShape
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepGeom
else:
    import StepGeom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepRepr
else:
    import StepRepr
del _swig_python_version_info
class RWStepVisual_RWCameraUsage(object):
    """Read & Write Module for CameraUsage"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWCameraUsage self) -> RWStepVisual_RWCameraUsage

        Read & Write Module for CameraUsage
        """
        this = _RWStepVisual.new_RWStepVisual_RWCameraUsage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWCameraUsage self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_CameraUsage ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CameraUsage

        """
        return _RWStepVisual.RWStepVisual_RWCameraUsage_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWCameraUsage self, StepData_StepWriter SW, Handle_StepVisual_CameraUsage ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CameraUsage

        """
        return _RWStepVisual.RWStepVisual_RWCameraUsage_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWCameraUsage self, Handle_StepVisual_CameraUsage ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CameraUsage
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWCameraUsage_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWCameraUsage
RWStepVisual_RWCameraUsage_swigregister = _RWStepVisual.RWStepVisual_RWCameraUsage_swigregister
RWStepVisual_RWCameraUsage_swigregister(RWStepVisual_RWCameraUsage)

class RWStepVisual_RWPlanarExtent(object):
    """Read & Write Module for PlanarExtent"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWPlanarExtent self) -> RWStepVisual_RWPlanarExtent

        Read & Write Module for PlanarExtent
        """
        this = _RWStepVisual.new_RWStepVisual_RWPlanarExtent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWPlanarExtent self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_PlanarExtent ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PlanarExtent

        """
        return _RWStepVisual.RWStepVisual_RWPlanarExtent_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWPlanarExtent self, StepData_StepWriter SW, Handle_StepVisual_PlanarExtent ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PlanarExtent

        """
        return _RWStepVisual.RWStepVisual_RWPlanarExtent_WriteStep(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWPlanarExtent
RWStepVisual_RWPlanarExtent_swigregister = _RWStepVisual.RWStepVisual_RWPlanarExtent_swigregister
RWStepVisual_RWPlanarExtent_swigregister(RWStepVisual_RWPlanarExtent)

class RWStepVisual_RWCompositeTextWithExtent(object):
    """Read & Write Module for CompositeTextWithExtent"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWCompositeTextWithExtent self) -> RWStepVisual_RWCompositeTextWithExtent

        Read & Write Module for CompositeTextWithExtent
        """
        this = _RWStepVisual.new_RWStepVisual_RWCompositeTextWithExtent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWCompositeTextWithExtent self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_CompositeTextWithExtent ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CompositeTextWithExtent

        """
        return _RWStepVisual.RWStepVisual_RWCompositeTextWithExtent_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWCompositeTextWithExtent self, StepData_StepWriter SW, Handle_StepVisual_CompositeTextWithExtent ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CompositeTextWithExtent

        """
        return _RWStepVisual.RWStepVisual_RWCompositeTextWithExtent_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWCompositeTextWithExtent self, Handle_StepVisual_CompositeTextWithExtent ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CompositeTextWithExtent
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWCompositeTextWithExtent_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWCompositeTextWithExtent
RWStepVisual_RWCompositeTextWithExtent_swigregister = _RWStepVisual.RWStepVisual_RWCompositeTextWithExtent_swigregister
RWStepVisual_RWCompositeTextWithExtent_swigregister(RWStepVisual_RWCompositeTextWithExtent)

class RWStepVisual_RWCameraImage(object):
    """Read & Write Module for CameraImage"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWCameraImage self) -> RWStepVisual_RWCameraImage

        Read & Write Module for CameraImage
        """
        this = _RWStepVisual.new_RWStepVisual_RWCameraImage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWCameraImage self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_CameraImage ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CameraImage

        """
        return _RWStepVisual.RWStepVisual_RWCameraImage_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWCameraImage self, StepData_StepWriter SW, Handle_StepVisual_CameraImage ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CameraImage

        """
        return _RWStepVisual.RWStepVisual_RWCameraImage_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWCameraImage self, Handle_StepVisual_CameraImage ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CameraImage
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWCameraImage_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWCameraImage
RWStepVisual_RWCameraImage_swigregister = _RWStepVisual.RWStepVisual_RWCameraImage_swigregister
RWStepVisual_RWCameraImage_swigregister(RWStepVisual_RWCameraImage)

class RWStepVisual_RWCurveStyleFontPattern(object):
    """Read & Write Module for CurveStyleFontPattern"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWCurveStyleFontPattern self) -> RWStepVisual_RWCurveStyleFontPattern

        Read & Write Module for CurveStyleFontPattern
        """
        this = _RWStepVisual.new_RWStepVisual_RWCurveStyleFontPattern(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWCurveStyleFontPattern self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_CurveStyleFontPattern ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CurveStyleFontPattern

        """
        return _RWStepVisual.RWStepVisual_RWCurveStyleFontPattern_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWCurveStyleFontPattern self, StepData_StepWriter SW, Handle_StepVisual_CurveStyleFontPattern ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CurveStyleFontPattern

        """
        return _RWStepVisual.RWStepVisual_RWCurveStyleFontPattern_WriteStep(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWCurveStyleFontPattern
RWStepVisual_RWCurveStyleFontPattern_swigregister = _RWStepVisual.RWStepVisual_RWCurveStyleFontPattern_swigregister
RWStepVisual_RWCurveStyleFontPattern_swigregister(RWStepVisual_RWCurveStyleFontPattern)

class RWStepVisual_RWPresentationLayerUsage(object):
    """Read & Write Module for PresentationLayerUsage"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWPresentationLayerUsage self) -> RWStepVisual_RWPresentationLayerUsage

        Read & Write Module for PresentationLayerUsage
        """
        this = _RWStepVisual.new_RWStepVisual_RWPresentationLayerUsage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWPresentationLayerUsage self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_PresentationLayerUsage ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PresentationLayerUsage

        """
        return _RWStepVisual.RWStepVisual_RWPresentationLayerUsage_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWPresentationLayerUsage self, StepData_StepWriter SW, Handle_StepVisual_PresentationLayerUsage ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PresentationLayerUsage

        """
        return _RWStepVisual.RWStepVisual_RWPresentationLayerUsage_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWPresentationLayerUsage self, Handle_StepVisual_PresentationLayerUsage ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PresentationLayerUsage
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWPresentationLayerUsage_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWPresentationLayerUsage
RWStepVisual_RWPresentationLayerUsage_swigregister = _RWStepVisual.RWStepVisual_RWPresentationLayerUsage_swigregister
RWStepVisual_RWPresentationLayerUsage_swigregister(RWStepVisual_RWPresentationLayerUsage)

class RWStepVisual_RWBackgroundColour(object):
    """Read & Write Module for BackgroundColour"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWBackgroundColour self) -> RWStepVisual_RWBackgroundColour

        Read & Write Module for BackgroundColour
        """
        this = _RWStepVisual.new_RWStepVisual_RWBackgroundColour(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWBackgroundColour self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_BackgroundColour ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_BackgroundColour

        """
        return _RWStepVisual.RWStepVisual_RWBackgroundColour_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWBackgroundColour self, StepData_StepWriter SW, Handle_StepVisual_BackgroundColour ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_BackgroundColour

        """
        return _RWStepVisual.RWStepVisual_RWBackgroundColour_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWBackgroundColour self, Handle_StepVisual_BackgroundColour ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_BackgroundColour
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWBackgroundColour_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWBackgroundColour
RWStepVisual_RWBackgroundColour_swigregister = _RWStepVisual.RWStepVisual_RWBackgroundColour_swigregister
RWStepVisual_RWBackgroundColour_swigregister(RWStepVisual_RWBackgroundColour)

class RWStepVisual_RWCameraModelD3MultiClippingUnion(object):
    """Read & Write Module for CameraModelD3MultiClippingUnion"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWCameraModelD3MultiClippingUnion self) -> RWStepVisual_RWCameraModelD3MultiClippingUnion

        Read & Write Module for CameraModelD3MultiClippingUnion
        """
        this = _RWStepVisual.new_RWStepVisual_RWCameraModelD3MultiClippingUnion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWCameraModelD3MultiClippingUnion self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_CameraModelD3MultiClippingUnion ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CameraModelD3MultiClippingUnion

        """
        return _RWStepVisual.RWStepVisual_RWCameraModelD3MultiClippingUnion_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWCameraModelD3MultiClippingUnion self, StepData_StepWriter SW, Handle_StepVisual_CameraModelD3MultiClippingUnion ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CameraModelD3MultiClippingUnion

        """
        return _RWStepVisual.RWStepVisual_RWCameraModelD3MultiClippingUnion_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWCameraModelD3MultiClippingUnion self, Handle_StepVisual_CameraModelD3MultiClippingUnion ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CameraModelD3MultiClippingUnion
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWCameraModelD3MultiClippingUnion_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWCameraModelD3MultiClippingUnion
RWStepVisual_RWCameraModelD3MultiClippingUnion_swigregister = _RWStepVisual.RWStepVisual_RWCameraModelD3MultiClippingUnion_swigregister
RWStepVisual_RWCameraModelD3MultiClippingUnion_swigregister(RWStepVisual_RWCameraModelD3MultiClippingUnion)

class RWStepVisual_RWSurfaceStyleParameterLine(object):
    """Read & Write Module for SurfaceStyleParameterLine"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWSurfaceStyleParameterLine self) -> RWStepVisual_RWSurfaceStyleParameterLine

        Read & Write Module for SurfaceStyleParameterLine
        """
        this = _RWStepVisual.new_RWStepVisual_RWSurfaceStyleParameterLine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWSurfaceStyleParameterLine self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_SurfaceStyleParameterLine ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_SurfaceStyleParameterLine

        """
        return _RWStepVisual.RWStepVisual_RWSurfaceStyleParameterLine_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWSurfaceStyleParameterLine self, StepData_StepWriter SW, Handle_StepVisual_SurfaceStyleParameterLine ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_SurfaceStyleParameterLine

        """
        return _RWStepVisual.RWStepVisual_RWSurfaceStyleParameterLine_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWSurfaceStyleParameterLine self, Handle_StepVisual_SurfaceStyleParameterLine ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_SurfaceStyleParameterLine
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWSurfaceStyleParameterLine_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWSurfaceStyleParameterLine
RWStepVisual_RWSurfaceStyleParameterLine_swigregister = _RWStepVisual.RWStepVisual_RWSurfaceStyleParameterLine_swigregister
RWStepVisual_RWSurfaceStyleParameterLine_swigregister(RWStepVisual_RWSurfaceStyleParameterLine)

class RWStepVisual_RWTextStyle(object):
    """Read & Write Module for TextStyle"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWTextStyle self) -> RWStepVisual_RWTextStyle

        Read & Write Module for TextStyle
        """
        this = _RWStepVisual.new_RWStepVisual_RWTextStyle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWTextStyle self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_TextStyle ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_TextStyle

        """
        return _RWStepVisual.RWStepVisual_RWTextStyle_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWTextStyle self, StepData_StepWriter SW, Handle_StepVisual_TextStyle ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_TextStyle

        """
        return _RWStepVisual.RWStepVisual_RWTextStyle_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWTextStyle self, Handle_StepVisual_TextStyle ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_TextStyle
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWTextStyle_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWTextStyle
RWStepVisual_RWTextStyle_swigregister = _RWStepVisual.RWStepVisual_RWTextStyle_swigregister
RWStepVisual_RWTextStyle_swigregister(RWStepVisual_RWTextStyle)

class RWStepVisual_RWCurveStyle(object):
    """Read & Write Module for CurveStyle"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWCurveStyle self) -> RWStepVisual_RWCurveStyle

        Read & Write Module for CurveStyle
        """
        this = _RWStepVisual.new_RWStepVisual_RWCurveStyle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWCurveStyle self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_CurveStyle ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CurveStyle

        """
        return _RWStepVisual.RWStepVisual_RWCurveStyle_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWCurveStyle self, StepData_StepWriter SW, Handle_StepVisual_CurveStyle ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CurveStyle

        """
        return _RWStepVisual.RWStepVisual_RWCurveStyle_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWCurveStyle self, Handle_StepVisual_CurveStyle ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CurveStyle
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWCurveStyle_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWCurveStyle
RWStepVisual_RWCurveStyle_swigregister = _RWStepVisual.RWStepVisual_RWCurveStyle_swigregister
RWStepVisual_RWCurveStyle_swigregister(RWStepVisual_RWCurveStyle)

class RWStepVisual_RWViewVolume(object):
    """Read & Write Module for ViewVolume"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWViewVolume self) -> RWStepVisual_RWViewVolume

        Read & Write Module for ViewVolume
        """
        this = _RWStepVisual.new_RWStepVisual_RWViewVolume(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWViewVolume self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_ViewVolume ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_ViewVolume

        """
        return _RWStepVisual.RWStepVisual_RWViewVolume_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWViewVolume self, StepData_StepWriter SW, Handle_StepVisual_ViewVolume ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_ViewVolume

        """
        return _RWStepVisual.RWStepVisual_RWViewVolume_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWViewVolume self, Handle_StepVisual_ViewVolume ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_ViewVolume
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWViewVolume_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWViewVolume
RWStepVisual_RWViewVolume_swigregister = _RWStepVisual.RWStepVisual_RWViewVolume_swigregister
RWStepVisual_RWViewVolume_swigregister(RWStepVisual_RWViewVolume)

class RWStepVisual_RWSurfaceSideStyle(object):
    """Read & Write Module for SurfaceSideStyle"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWSurfaceSideStyle self) -> RWStepVisual_RWSurfaceSideStyle

        Read & Write Module for SurfaceSideStyle
        """
        this = _RWStepVisual.new_RWStepVisual_RWSurfaceSideStyle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWSurfaceSideStyle self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_SurfaceSideStyle ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_SurfaceSideStyle

        """
        return _RWStepVisual.RWStepVisual_RWSurfaceSideStyle_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWSurfaceSideStyle self, StepData_StepWriter SW, Handle_StepVisual_SurfaceSideStyle ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_SurfaceSideStyle

        """
        return _RWStepVisual.RWStepVisual_RWSurfaceSideStyle_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWSurfaceSideStyle self, Handle_StepVisual_SurfaceSideStyle ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_SurfaceSideStyle
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWSurfaceSideStyle_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWSurfaceSideStyle
RWStepVisual_RWSurfaceSideStyle_swigregister = _RWStepVisual.RWStepVisual_RWSurfaceSideStyle_swigregister
RWStepVisual_RWSurfaceSideStyle_swigregister(RWStepVisual_RWSurfaceSideStyle)

class RWStepVisual_RWSurfaceStyleSegmentationCurve(object):
    """Read & Write Module for SurfaceStyleSegmentationCurve"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWSurfaceStyleSegmentationCurve self) -> RWStepVisual_RWSurfaceStyleSegmentationCurve

        Read & Write Module for SurfaceStyleSegmentationCurve
        """
        this = _RWStepVisual.new_RWStepVisual_RWSurfaceStyleSegmentationCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWSurfaceStyleSegmentationCurve self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_SurfaceStyleSegmentationCurve ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_SurfaceStyleSegmentationCurve

        """
        return _RWStepVisual.RWStepVisual_RWSurfaceStyleSegmentationCurve_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWSurfaceStyleSegmentationCurve self, StepData_StepWriter SW, Handle_StepVisual_SurfaceStyleSegmentationCurve ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_SurfaceStyleSegmentationCurve

        """
        return _RWStepVisual.RWStepVisual_RWSurfaceStyleSegmentationCurve_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWSurfaceStyleSegmentationCurve self, Handle_StepVisual_SurfaceStyleSegmentationCurve ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_SurfaceStyleSegmentationCurve
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWSurfaceStyleSegmentationCurve_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWSurfaceStyleSegmentationCurve
RWStepVisual_RWSurfaceStyleSegmentationCurve_swigregister = _RWStepVisual.RWStepVisual_RWSurfaceStyleSegmentationCurve_swigregister
RWStepVisual_RWSurfaceStyleSegmentationCurve_swigregister(RWStepVisual_RWSurfaceStyleSegmentationCurve)

class RWStepVisual_RWSurfaceStyleUsage(object):
    """Read & Write Module for SurfaceStyleUsage"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWSurfaceStyleUsage self) -> RWStepVisual_RWSurfaceStyleUsage

        Read & Write Module for SurfaceStyleUsage
        """
        this = _RWStepVisual.new_RWStepVisual_RWSurfaceStyleUsage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWSurfaceStyleUsage self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_SurfaceStyleUsage ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_SurfaceStyleUsage

        """
        return _RWStepVisual.RWStepVisual_RWSurfaceStyleUsage_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWSurfaceStyleUsage self, StepData_StepWriter SW, Handle_StepVisual_SurfaceStyleUsage ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_SurfaceStyleUsage

        """
        return _RWStepVisual.RWStepVisual_RWSurfaceStyleUsage_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWSurfaceStyleUsage self, Handle_StepVisual_SurfaceStyleUsage ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_SurfaceStyleUsage
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWSurfaceStyleUsage_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWSurfaceStyleUsage
RWStepVisual_RWSurfaceStyleUsage_swigregister = _RWStepVisual.RWStepVisual_RWSurfaceStyleUsage_swigregister
RWStepVisual_RWSurfaceStyleUsage_swigregister(RWStepVisual_RWSurfaceStyleUsage)

class RWStepVisual_RWPreDefinedItem(object):
    """Read & Write Module for PreDefinedItem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWPreDefinedItem self) -> RWStepVisual_RWPreDefinedItem

        Read & Write Module for PreDefinedItem
        """
        this = _RWStepVisual.new_RWStepVisual_RWPreDefinedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWPreDefinedItem self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_PreDefinedItem ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PreDefinedItem

        """
        return _RWStepVisual.RWStepVisual_RWPreDefinedItem_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWPreDefinedItem self, StepData_StepWriter SW, Handle_StepVisual_PreDefinedItem ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PreDefinedItem

        """
        return _RWStepVisual.RWStepVisual_RWPreDefinedItem_WriteStep(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWPreDefinedItem
RWStepVisual_RWPreDefinedItem_swigregister = _RWStepVisual.RWStepVisual_RWPreDefinedItem_swigregister
RWStepVisual_RWPreDefinedItem_swigregister(RWStepVisual_RWPreDefinedItem)

class RWStepVisual_RWSurfaceStyleControlGrid(object):
    """Read & Write Module for SurfaceStyleControlGrid"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWSurfaceStyleControlGrid self) -> RWStepVisual_RWSurfaceStyleControlGrid

        Read & Write Module for SurfaceStyleControlGrid
        """
        this = _RWStepVisual.new_RWStepVisual_RWSurfaceStyleControlGrid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWSurfaceStyleControlGrid self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_SurfaceStyleControlGrid ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_SurfaceStyleControlGrid

        """
        return _RWStepVisual.RWStepVisual_RWSurfaceStyleControlGrid_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWSurfaceStyleControlGrid self, StepData_StepWriter SW, Handle_StepVisual_SurfaceStyleControlGrid ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_SurfaceStyleControlGrid

        """
        return _RWStepVisual.RWStepVisual_RWSurfaceStyleControlGrid_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWSurfaceStyleControlGrid self, Handle_StepVisual_SurfaceStyleControlGrid ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_SurfaceStyleControlGrid
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWSurfaceStyleControlGrid_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWSurfaceStyleControlGrid
RWStepVisual_RWSurfaceStyleControlGrid_swigregister = _RWStepVisual.RWStepVisual_RWSurfaceStyleControlGrid_swigregister
RWStepVisual_RWSurfaceStyleControlGrid_swigregister(RWStepVisual_RWSurfaceStyleControlGrid)

class RWStepVisual_RWPresentationSet(object):
    """Read & Write Module for PresentationSet"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWPresentationSet self) -> RWStepVisual_RWPresentationSet

        Read & Write Module for PresentationSet
        """
        this = _RWStepVisual.new_RWStepVisual_RWPresentationSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWPresentationSet self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_PresentationSet ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PresentationSet

        """
        return _RWStepVisual.RWStepVisual_RWPresentationSet_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWPresentationSet self, StepData_StepWriter SW, Handle_StepVisual_PresentationSet ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PresentationSet

        """
        return _RWStepVisual.RWStepVisual_RWPresentationSet_WriteStep(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWPresentationSet
RWStepVisual_RWPresentationSet_swigregister = _RWStepVisual.RWStepVisual_RWPresentationSet_swigregister
RWStepVisual_RWPresentationSet_swigregister(RWStepVisual_RWPresentationSet)

class RWStepVisual_RWCameraModelD3(object):
    """Read & Write Module for CameraModelD3"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWCameraModelD3 self) -> RWStepVisual_RWCameraModelD3

        Read & Write Module for CameraModelD3
        """
        this = _RWStepVisual.new_RWStepVisual_RWCameraModelD3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWCameraModelD3 self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_CameraModelD3 ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CameraModelD3

        """
        return _RWStepVisual.RWStepVisual_RWCameraModelD3_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWCameraModelD3 self, StepData_StepWriter SW, Handle_StepVisual_CameraModelD3 ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CameraModelD3

        """
        return _RWStepVisual.RWStepVisual_RWCameraModelD3_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWCameraModelD3 self, Handle_StepVisual_CameraModelD3 ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CameraModelD3
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWCameraModelD3_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWCameraModelD3
RWStepVisual_RWCameraModelD3_swigregister = _RWStepVisual.RWStepVisual_RWCameraModelD3_swigregister
RWStepVisual_RWCameraModelD3_swigregister(RWStepVisual_RWCameraModelD3)

class RWStepVisual_RWCameraModel(object):
    """Read & Write Module for CameraModel"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWCameraModel self) -> RWStepVisual_RWCameraModel

        Read & Write Module for CameraModel
        """
        this = _RWStepVisual.new_RWStepVisual_RWCameraModel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWCameraModel self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_CameraModel ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CameraModel

        """
        return _RWStepVisual.RWStepVisual_RWCameraModel_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWCameraModel self, StepData_StepWriter SW, Handle_StepVisual_CameraModel ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CameraModel

        """
        return _RWStepVisual.RWStepVisual_RWCameraModel_WriteStep(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWCameraModel
RWStepVisual_RWCameraModel_swigregister = _RWStepVisual.RWStepVisual_RWCameraModel_swigregister
RWStepVisual_RWCameraModel_swigregister(RWStepVisual_RWCameraModel)

class RWStepVisual_RWDraughtingPreDefinedColour(object):
    """Read & Write Module for DraughtingPreDefinedColour"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWDraughtingPreDefinedColour self) -> RWStepVisual_RWDraughtingPreDefinedColour

        Read & Write Module for DraughtingPreDefinedColour
        """
        this = _RWStepVisual.new_RWStepVisual_RWDraughtingPreDefinedColour(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWDraughtingPreDefinedColour self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_DraughtingPreDefinedColour ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_DraughtingPreDefinedColour

        """
        return _RWStepVisual.RWStepVisual_RWDraughtingPreDefinedColour_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWDraughtingPreDefinedColour self, StepData_StepWriter SW, Handle_StepVisual_DraughtingPreDefinedColour ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_DraughtingPreDefinedColour

        """
        return _RWStepVisual.RWStepVisual_RWDraughtingPreDefinedColour_WriteStep(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWDraughtingPreDefinedColour
RWStepVisual_RWDraughtingPreDefinedColour_swigregister = _RWStepVisual.RWStepVisual_RWDraughtingPreDefinedColour_swigregister
RWStepVisual_RWDraughtingPreDefinedColour_swigregister(RWStepVisual_RWDraughtingPreDefinedColour)

class RWStepVisual_RWColour(object):
    """Read & Write Module for Colour"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWColour self) -> RWStepVisual_RWColour

        Read & Write Module for Colour
        """
        this = _RWStepVisual.new_RWStepVisual_RWColour(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWColour self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_Colour ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_Colour

        """
        return _RWStepVisual.RWStepVisual_RWColour_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWColour self, StepData_StepWriter SW, Handle_StepVisual_Colour ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_Colour

        """
        return _RWStepVisual.RWStepVisual_RWColour_WriteStep(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWColour
RWStepVisual_RWColour_swigregister = _RWStepVisual.RWStepVisual_RWColour_swigregister
RWStepVisual_RWColour_swigregister(RWStepVisual_RWColour)

class RWStepVisual_RWColourSpecification(object):
    """Read & Write Module for ColourSpecification"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWColourSpecification self) -> RWStepVisual_RWColourSpecification

        Read & Write Module for ColourSpecification
        """
        this = _RWStepVisual.new_RWStepVisual_RWColourSpecification(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWColourSpecification self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_ColourSpecification ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_ColourSpecification

        """
        return _RWStepVisual.RWStepVisual_RWColourSpecification_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWColourSpecification self, StepData_StepWriter SW, Handle_StepVisual_ColourSpecification ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_ColourSpecification

        """
        return _RWStepVisual.RWStepVisual_RWColourSpecification_WriteStep(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWColourSpecification
RWStepVisual_RWColourSpecification_swigregister = _RWStepVisual.RWStepVisual_RWColourSpecification_swigregister
RWStepVisual_RWColourSpecification_swigregister(RWStepVisual_RWColourSpecification)

class RWStepVisual_RWTextLiteral(object):
    """Read & Write Module for TextLiteral"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWTextLiteral self) -> RWStepVisual_RWTextLiteral

        Read & Write Module for TextLiteral
        """
        this = _RWStepVisual.new_RWStepVisual_RWTextLiteral(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWTextLiteral self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_TextLiteral ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_TextLiteral

        """
        return _RWStepVisual.RWStepVisual_RWTextLiteral_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWTextLiteral self, StepData_StepWriter SW, Handle_StepVisual_TextLiteral ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_TextLiteral

        """
        return _RWStepVisual.RWStepVisual_RWTextLiteral_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWTextLiteral self, Handle_StepVisual_TextLiteral ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_TextLiteral
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWTextLiteral_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWTextLiteral
RWStepVisual_RWTextLiteral_swigregister = _RWStepVisual.RWStepVisual_RWTextLiteral_swigregister
RWStepVisual_RWTextLiteral_swigregister(RWStepVisual_RWTextLiteral)

class RWStepVisual_RWAreaInSet(object):
    """Read & Write Module for AreaInSet"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWAreaInSet self) -> RWStepVisual_RWAreaInSet

        Read & Write Module for AreaInSet
        """
        this = _RWStepVisual.new_RWStepVisual_RWAreaInSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWAreaInSet self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_AreaInSet ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_AreaInSet

        """
        return _RWStepVisual.RWStepVisual_RWAreaInSet_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWAreaInSet self, StepData_StepWriter SW, Handle_StepVisual_AreaInSet ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_AreaInSet

        """
        return _RWStepVisual.RWStepVisual_RWAreaInSet_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWAreaInSet self, Handle_StepVisual_AreaInSet ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_AreaInSet
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWAreaInSet_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWAreaInSet
RWStepVisual_RWAreaInSet_swigregister = _RWStepVisual.RWStepVisual_RWAreaInSet_swigregister
RWStepVisual_RWAreaInSet_swigregister(RWStepVisual_RWAreaInSet)

class RWStepVisual_RWMechanicalDesignGeometricPresentationArea(object):
    """Read & Write Module for MechanicalDesignGeometricPresentationArea"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWMechanicalDesignGeometricPresentationArea self) -> RWStepVisual_RWMechanicalDesignGeometricPresentationArea

        Read & Write Module for MechanicalDesignGeometricPresentationArea
        """
        this = _RWStepVisual.new_RWStepVisual_RWMechanicalDesignGeometricPresentationArea(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWMechanicalDesignGeometricPresentationArea self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_MechanicalDesignGeometricPresentationArea ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_MechanicalDesignGeometricPresentationArea

        """
        return _RWStepVisual.RWStepVisual_RWMechanicalDesignGeometricPresentationArea_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWMechanicalDesignGeometricPresentationArea self, StepData_StepWriter SW, Handle_StepVisual_MechanicalDesignGeometricPresentationArea ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_MechanicalDesignGeometricPresentationArea

        """
        return _RWStepVisual.RWStepVisual_RWMechanicalDesignGeometricPresentationArea_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWMechanicalDesignGeometricPresentationArea self, Handle_StepVisual_MechanicalDesignGeometricPresentationArea ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_MechanicalDesignGeometricPresentationArea
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWMechanicalDesignGeometricPresentationArea_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWMechanicalDesignGeometricPresentationArea
RWStepVisual_RWMechanicalDesignGeometricPresentationArea_swigregister = _RWStepVisual.RWStepVisual_RWMechanicalDesignGeometricPresentationArea_swigregister
RWStepVisual_RWMechanicalDesignGeometricPresentationArea_swigregister(RWStepVisual_RWMechanicalDesignGeometricPresentationArea)

class RWStepVisual_RWContextDependentOverRidingStyledItem(object):
    """Read & Write Module for ContextDependentOverRidingStyledItem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWContextDependentOverRidingStyledItem self) -> RWStepVisual_RWContextDependentOverRidingStyledItem

        Read & Write Module for ContextDependentOverRidingStyledItem
        """
        this = _RWStepVisual.new_RWStepVisual_RWContextDependentOverRidingStyledItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWContextDependentOverRidingStyledItem self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_ContextDependentOverRidingStyledItem ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_ContextDependentOverRidingStyledItem

        """
        return _RWStepVisual.RWStepVisual_RWContextDependentOverRidingStyledItem_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWContextDependentOverRidingStyledItem self, StepData_StepWriter SW, Handle_StepVisual_ContextDependentOverRidingStyledItem ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_ContextDependentOverRidingStyledItem

        """
        return _RWStepVisual.RWStepVisual_RWContextDependentOverRidingStyledItem_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWContextDependentOverRidingStyledItem self, Handle_StepVisual_ContextDependentOverRidingStyledItem ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_ContextDependentOverRidingStyledItem
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWContextDependentOverRidingStyledItem_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWContextDependentOverRidingStyledItem
RWStepVisual_RWContextDependentOverRidingStyledItem_swigregister = _RWStepVisual.RWStepVisual_RWContextDependentOverRidingStyledItem_swigregister
RWStepVisual_RWContextDependentOverRidingStyledItem_swigregister(RWStepVisual_RWContextDependentOverRidingStyledItem)

class RWStepVisual_RWCoordinatesList(object):
    """Read & Write Module for AnnotationOccurrence"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWCoordinatesList self) -> RWStepVisual_RWCoordinatesList

        Read & Write Module for AnnotationOccurrence
        """
        this = _RWStepVisual.new_RWStepVisual_RWCoordinatesList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWCoordinatesList self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_CoordinatesList ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CoordinatesList

        """
        return _RWStepVisual.RWStepVisual_RWCoordinatesList_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWCoordinatesList self, StepData_StepWriter SW, Handle_StepVisual_CoordinatesList ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CoordinatesList

        """
        return _RWStepVisual.RWStepVisual_RWCoordinatesList_WriteStep(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWCoordinatesList
RWStepVisual_RWCoordinatesList_swigregister = _RWStepVisual.RWStepVisual_RWCoordinatesList_swigregister
RWStepVisual_RWCoordinatesList_swigregister(RWStepVisual_RWCoordinatesList)

class RWStepVisual_RWSurfaceStyleSilhouette(object):
    """Read & Write Module for SurfaceStyleSilhouette"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWSurfaceStyleSilhouette self) -> RWStepVisual_RWSurfaceStyleSilhouette

        Read & Write Module for SurfaceStyleSilhouette
        """
        this = _RWStepVisual.new_RWStepVisual_RWSurfaceStyleSilhouette(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWSurfaceStyleSilhouette self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_SurfaceStyleSilhouette ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_SurfaceStyleSilhouette

        """
        return _RWStepVisual.RWStepVisual_RWSurfaceStyleSilhouette_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWSurfaceStyleSilhouette self, StepData_StepWriter SW, Handle_StepVisual_SurfaceStyleSilhouette ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_SurfaceStyleSilhouette

        """
        return _RWStepVisual.RWStepVisual_RWSurfaceStyleSilhouette_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWSurfaceStyleSilhouette self, Handle_StepVisual_SurfaceStyleSilhouette ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_SurfaceStyleSilhouette
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWSurfaceStyleSilhouette_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWSurfaceStyleSilhouette
RWStepVisual_RWSurfaceStyleSilhouette_swigregister = _RWStepVisual.RWStepVisual_RWSurfaceStyleSilhouette_swigregister
RWStepVisual_RWSurfaceStyleSilhouette_swigregister(RWStepVisual_RWSurfaceStyleSilhouette)

class RWStepVisual_RWInvisibility(object):
    """Read & Write Module for Invisibility"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWInvisibility self) -> RWStepVisual_RWInvisibility

        Read & Write Module for Invisibility
        """
        this = _RWStepVisual.new_RWStepVisual_RWInvisibility(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWInvisibility self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_Invisibility ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_Invisibility

        """
        return _RWStepVisual.RWStepVisual_RWInvisibility_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWInvisibility self, StepData_StepWriter SW, Handle_StepVisual_Invisibility ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_Invisibility

        """
        return _RWStepVisual.RWStepVisual_RWInvisibility_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWInvisibility self, Handle_StepVisual_Invisibility ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_Invisibility
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWInvisibility_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWInvisibility
RWStepVisual_RWInvisibility_swigregister = _RWStepVisual.RWStepVisual_RWInvisibility_swigregister
RWStepVisual_RWInvisibility_swigregister(RWStepVisual_RWInvisibility)

class RWStepVisual_RWMechanicalDesignGeometricPresentationRepresentation(object):
    """Read & Write Module for MechanicalDesignGeometricPresentationRepresentation"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWMechanicalDesignGeometricPresentationRepresentation self) -> RWStepVisual_RWMechanicalDesignGeometricPresentationRepresentation

        Read & Write Module for MechanicalDesignGeometricPresentationRepresentation
        """
        this = _RWStepVisual.new_RWStepVisual_RWMechanicalDesignGeometricPresentationRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWMechanicalDesignGeometricPresentationRepresentation self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_MechanicalDesignGeometricPresentationRepresentation ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_MechanicalDesignGeometricPresentationRepresentation

        """
        return _RWStepVisual.RWStepVisual_RWMechanicalDesignGeometricPresentationRepresentation_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWMechanicalDesignGeometricPresentationRepresentation self, StepData_StepWriter SW, Handle_StepVisual_MechanicalDesignGeometricPresentationRepresentation ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_MechanicalDesignGeometricPresentationRepresentation

        """
        return _RWStepVisual.RWStepVisual_RWMechanicalDesignGeometricPresentationRepresentation_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWMechanicalDesignGeometricPresentationRepresentation self, Handle_StepVisual_MechanicalDesignGeometricPresentationRepresentation ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_MechanicalDesignGeometricPresentationRepresentation
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWMechanicalDesignGeometricPresentationRepresentation_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWMechanicalDesignGeometricPresentationRepresentation
RWStepVisual_RWMechanicalDesignGeometricPresentationRepresentation_swigregister = _RWStepVisual.RWStepVisual_RWMechanicalDesignGeometricPresentationRepresentation_swigregister
RWStepVisual_RWMechanicalDesignGeometricPresentationRepresentation_swigregister(RWStepVisual_RWMechanicalDesignGeometricPresentationRepresentation)

class RWStepVisual_RWAnnotationCurveOccurrenceAndAnnotationOccurrenceAndGeomReprItemAndReprItemAndStyledItem(object):
    """Read & Write Module for AnnotationCurveOccurrenceAndAnnotationOccurrenceAndGeomReprItemAndReprItemAndStyledItem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWAnnotationCurveOccurrenceAndAnnotationOccurrenceAndGeomReprItemAndReprItemAndStyledItem self) -> RWStepVisual_RWAnnotationCurveOccurrenceAndAnnotationOccurrenceAndGeomReprItemAndReprItemAndStyledItem

        Read & Write Module for AnnotationCurveOccurrenceAndAnnotationOccurrenceAndGeomReprItemAndReprItemAndStyledItem
        """
        this = _RWStepVisual.new_RWStepVisual_RWAnnotationCurveOccurrenceAndAnnotationOccurrenceAndGeomReprItemAndReprItemAndStyledItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWAnnotationCurveOccurrenceAndAnnotationOccurrenceAndGeomReprItemAndReprItemAndStyledItem self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_AnnotationCurveOccurrenceAndAnnotationOccurrenceAndGeomReprItemAndReprItemAndStyledItem ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_AnnotationCurveOccurrenceAndAnnotationOccurrenceAndGeomReprItemAndReprItemAndStyledItem

        """
        return _RWStepVisual.RWStepVisual_RWAnnotationCurveOccurrenceAndAnnotationOccurrenceAndGeomReprItemAndReprItemAndStyledItem_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWAnnotationCurveOccurrenceAndAnnotationOccurrenceAndGeomReprItemAndReprItemAndStyledItem self, StepData_StepWriter SW, Handle_StepVisual_AnnotationCurveOccurrenceAndAnnotationOccurrenceAndGeomReprItemAndReprItemAndStyledItem ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_AnnotationCurveOccurrenceAndAnnotationOccurrenceAndGeomReprItemAndReprItemAndStyledItem

        """
        return _RWStepVisual.RWStepVisual_RWAnnotationCurveOccurrenceAndAnnotationOccurrenceAndGeomReprItemAndReprItemAndStyledItem_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWAnnotationCurveOccurrenceAndAnnotationOccurrenceAndGeomReprItemAndReprItemAndStyledItem self, Handle_StepVisual_AnnotationCurveOccurrenceAndAnnotationOccurrenceAndGeomReprItemAndReprItemAndStyledItem ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_AnnotationCurveOccurrenceAndAnnotationOccurrenceAndGeomReprItemAndReprItemAndStyledItem
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWAnnotationCurveOccurrenceAndAnnotationOccurrenceAndGeomReprItemAndReprItemAndStyledItem_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWAnnotationCurveOccurrenceAndAnnotationOccurrenceAndGeomReprItemAndReprItemAndStyledItem
RWStepVisual_RWAnnotationCurveOccurrenceAndAnnotationOccurrenceAndGeomReprItemAndReprItemAndStyledItem_swigregister = _RWStepVisual.RWStepVisual_RWAnnotationCurveOccurrenceAndAnnotationOccurrenceAndGeomReprItemAndReprItemAndStyledItem_swigregister
RWStepVisual_RWAnnotationCurveOccurrenceAndAnnotationOccurrenceAndGeomReprItemAndReprItemAndStyledItem_swigregister(RWStepVisual_RWAnnotationCurveOccurrenceAndAnnotationOccurrenceAndGeomReprItemAndReprItemAndStyledItem)

class RWStepVisual_RWFillAreaStyle(object):
    """Read & Write Module for FillAreaStyle"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWFillAreaStyle self) -> RWStepVisual_RWFillAreaStyle

        Read & Write Module for FillAreaStyle
        """
        this = _RWStepVisual.new_RWStepVisual_RWFillAreaStyle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWFillAreaStyle self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_FillAreaStyle ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_FillAreaStyle

        """
        return _RWStepVisual.RWStepVisual_RWFillAreaStyle_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWFillAreaStyle self, StepData_StepWriter SW, Handle_StepVisual_FillAreaStyle ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_FillAreaStyle

        """
        return _RWStepVisual.RWStepVisual_RWFillAreaStyle_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWFillAreaStyle self, Handle_StepVisual_FillAreaStyle ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_FillAreaStyle
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWFillAreaStyle_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWFillAreaStyle
RWStepVisual_RWFillAreaStyle_swigregister = _RWStepVisual.RWStepVisual_RWFillAreaStyle_swigregister
RWStepVisual_RWFillAreaStyle_swigregister(RWStepVisual_RWFillAreaStyle)

class RWStepVisual_RWTextStyleWithBoxCharacteristics(object):
    """Read & Write Module for TextStyleWithBoxCharacteristics"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWTextStyleWithBoxCharacteristics self) -> RWStepVisual_RWTextStyleWithBoxCharacteristics

        Read & Write Module for TextStyleWithBoxCharacteristics
        """
        this = _RWStepVisual.new_RWStepVisual_RWTextStyleWithBoxCharacteristics(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWTextStyleWithBoxCharacteristics self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_TextStyleWithBoxCharacteristics ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_TextStyleWithBoxCharacteristics

        """
        return _RWStepVisual.RWStepVisual_RWTextStyleWithBoxCharacteristics_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWTextStyleWithBoxCharacteristics self, StepData_StepWriter SW, Handle_StepVisual_TextStyleWithBoxCharacteristics ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_TextStyleWithBoxCharacteristics

        """
        return _RWStepVisual.RWStepVisual_RWTextStyleWithBoxCharacteristics_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWTextStyleWithBoxCharacteristics self, Handle_StepVisual_TextStyleWithBoxCharacteristics ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_TextStyleWithBoxCharacteristics
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWTextStyleWithBoxCharacteristics_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWTextStyleWithBoxCharacteristics
RWStepVisual_RWTextStyleWithBoxCharacteristics_swigregister = _RWStepVisual.RWStepVisual_RWTextStyleWithBoxCharacteristics_swigregister
RWStepVisual_RWTextStyleWithBoxCharacteristics_swigregister(RWStepVisual_RWTextStyleWithBoxCharacteristics)

class RWStepVisual_RWExternallyDefinedCurveFont(object):
    """Read & Write tool for ExternallyDefinedCurveFont"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWExternallyDefinedCurveFont self) -> RWStepVisual_RWExternallyDefinedCurveFont

        Empty constructor


        """
        this = _RWStepVisual.new_RWStepVisual_RWExternallyDefinedCurveFont(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWExternallyDefinedCurveFont self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_ExternallyDefinedCurveFont ent)

        Reads ExternallyDefinedCurveFont

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_ExternallyDefinedCurveFont

        """
        return _RWStepVisual.RWStepVisual_RWExternallyDefinedCurveFont_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWExternallyDefinedCurveFont self, StepData_StepWriter SW, Handle_StepVisual_ExternallyDefinedCurveFont ent)

        Writes ExternallyDefinedCurveFont

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_ExternallyDefinedCurveFont

        """
        return _RWStepVisual.RWStepVisual_RWExternallyDefinedCurveFont_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWExternallyDefinedCurveFont self, Handle_StepVisual_ExternallyDefinedCurveFont ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_ExternallyDefinedCurveFont
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWExternallyDefinedCurveFont_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWExternallyDefinedCurveFont
RWStepVisual_RWExternallyDefinedCurveFont_swigregister = _RWStepVisual.RWStepVisual_RWExternallyDefinedCurveFont_swigregister
RWStepVisual_RWExternallyDefinedCurveFont_swigregister(RWStepVisual_RWExternallyDefinedCurveFont)

class RWStepVisual_RWPresentationArea(object):
    """Read & Write Module for PresentationArea"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWPresentationArea self) -> RWStepVisual_RWPresentationArea

        Read & Write Module for PresentationArea
        """
        this = _RWStepVisual.new_RWStepVisual_RWPresentationArea(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWPresentationArea self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_PresentationArea ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PresentationArea

        """
        return _RWStepVisual.RWStepVisual_RWPresentationArea_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWPresentationArea self, StepData_StepWriter SW, Handle_StepVisual_PresentationArea ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PresentationArea

        """
        return _RWStepVisual.RWStepVisual_RWPresentationArea_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWPresentationArea self, Handle_StepVisual_PresentationArea ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PresentationArea
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWPresentationArea_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWPresentationArea
RWStepVisual_RWPresentationArea_swigregister = _RWStepVisual.RWStepVisual_RWPresentationArea_swigregister
RWStepVisual_RWPresentationArea_swigregister(RWStepVisual_RWPresentationArea)

class RWStepVisual_RWPresentationStyleAssignment(object):
    """Read & Write Module for PresentationStyleAssignment"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWPresentationStyleAssignment self) -> RWStepVisual_RWPresentationStyleAssignment

        Read & Write Module for PresentationStyleAssignment
        """
        this = _RWStepVisual.new_RWStepVisual_RWPresentationStyleAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWPresentationStyleAssignment self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_PresentationStyleAssignment ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PresentationStyleAssignment

        """
        return _RWStepVisual.RWStepVisual_RWPresentationStyleAssignment_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWPresentationStyleAssignment self, StepData_StepWriter SW, Handle_StepVisual_PresentationStyleAssignment ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PresentationStyleAssignment

        """
        return _RWStepVisual.RWStepVisual_RWPresentationStyleAssignment_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWPresentationStyleAssignment self, Handle_StepVisual_PresentationStyleAssignment ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PresentationStyleAssignment
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWPresentationStyleAssignment_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWPresentationStyleAssignment
RWStepVisual_RWPresentationStyleAssignment_swigregister = _RWStepVisual.RWStepVisual_RWPresentationStyleAssignment_swigregister
RWStepVisual_RWPresentationStyleAssignment_swigregister(RWStepVisual_RWPresentationStyleAssignment)

class RWStepVisual_RWCameraModelD3MultiClipping(object):
    """Read & Write Module for CameraModelD3MultiClipping"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWCameraModelD3MultiClipping self) -> RWStepVisual_RWCameraModelD3MultiClipping

        Read & Write Module for CameraModelD3MultiClipping
        """
        this = _RWStepVisual.new_RWStepVisual_RWCameraModelD3MultiClipping(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWCameraModelD3MultiClipping self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_CameraModelD3MultiClipping ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CameraModelD3MultiClipping

        """
        return _RWStepVisual.RWStepVisual_RWCameraModelD3MultiClipping_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWCameraModelD3MultiClipping self, StepData_StepWriter SW, Handle_StepVisual_CameraModelD3MultiClipping ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CameraModelD3MultiClipping

        """
        return _RWStepVisual.RWStepVisual_RWCameraModelD3MultiClipping_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWCameraModelD3MultiClipping self, Handle_StepVisual_CameraModelD3MultiClipping ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CameraModelD3MultiClipping
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWCameraModelD3MultiClipping_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWCameraModelD3MultiClipping
RWStepVisual_RWCameraModelD3MultiClipping_swigregister = _RWStepVisual.RWStepVisual_RWCameraModelD3MultiClipping_swigregister
RWStepVisual_RWCameraModelD3MultiClipping_swigregister(RWStepVisual_RWCameraModelD3MultiClipping)

class RWStepVisual_RWTessellatedItem(object):
    """Read & Write Module for AnnotationOccurrence"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWTessellatedItem self) -> RWStepVisual_RWTessellatedItem

        Read & Write Module for AnnotationOccurrence
        """
        this = _RWStepVisual.new_RWStepVisual_RWTessellatedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWTessellatedItem self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_TessellatedItem ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_TessellatedItem

        """
        return _RWStepVisual.RWStepVisual_RWTessellatedItem_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWTessellatedItem self, StepData_StepWriter SW, Handle_StepVisual_TessellatedItem ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_TessellatedItem

        """
        return _RWStepVisual.RWStepVisual_RWTessellatedItem_WriteStep(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWTessellatedItem
RWStepVisual_RWTessellatedItem_swigregister = _RWStepVisual.RWStepVisual_RWTessellatedItem_swigregister
RWStepVisual_RWTessellatedItem_swigregister(RWStepVisual_RWTessellatedItem)

class RWStepVisual_RWCameraModelD2(object):
    """Read & Write Module for CameraModelD2"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWCameraModelD2 self) -> RWStepVisual_RWCameraModelD2

        Read & Write Module for CameraModelD2
        """
        this = _RWStepVisual.new_RWStepVisual_RWCameraModelD2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWCameraModelD2 self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_CameraModelD2 ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CameraModelD2

        """
        return _RWStepVisual.RWStepVisual_RWCameraModelD2_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWCameraModelD2 self, StepData_StepWriter SW, Handle_StepVisual_CameraModelD2 ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CameraModelD2

        """
        return _RWStepVisual.RWStepVisual_RWCameraModelD2_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWCameraModelD2 self, Handle_StepVisual_CameraModelD2 ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CameraModelD2
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWCameraModelD2_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWCameraModelD2
RWStepVisual_RWCameraModelD2_swigregister = _RWStepVisual.RWStepVisual_RWCameraModelD2_swigregister
RWStepVisual_RWCameraModelD2_swigregister(RWStepVisual_RWCameraModelD2)

class RWStepVisual_RWCurveStyleFont(object):
    """Read & Write Module for CurveStyleFont"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWCurveStyleFont self) -> RWStepVisual_RWCurveStyleFont

        Read & Write Module for CurveStyleFont
        """
        this = _RWStepVisual.new_RWStepVisual_RWCurveStyleFont(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWCurveStyleFont self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_CurveStyleFont ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CurveStyleFont

        """
        return _RWStepVisual.RWStepVisual_RWCurveStyleFont_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWCurveStyleFont self, StepData_StepWriter SW, Handle_StepVisual_CurveStyleFont ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CurveStyleFont

        """
        return _RWStepVisual.RWStepVisual_RWCurveStyleFont_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWCurveStyleFont self, Handle_StepVisual_CurveStyleFont ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CurveStyleFont
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWCurveStyleFont_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWCurveStyleFont
RWStepVisual_RWCurveStyleFont_swigregister = _RWStepVisual.RWStepVisual_RWCurveStyleFont_swigregister
RWStepVisual_RWCurveStyleFont_swigregister(RWStepVisual_RWCurveStyleFont)

class RWStepVisual_RWCharacterizedObjectAndCharacterizedRepresentationAndDraughtingModelAndRepresentation(object):
    """Read & Write Module for complex STEP entity Characterized_Object & Characterized_Representation & Draughting_Model & Representation"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWCharacterizedObjectAndCharacterizedRepresentationAndDraughtingModelAndRepresentation self) -> RWStepVisual_RWCharacterizedObjectAndCharacterizedRepresentationAndDraughtingModelAndRepresentation

        Read & Write Module for complex STEP entity Characterized_Object & Characterized_Representation & Draughting_Model & Representation
        """
        this = _RWStepVisual.new_RWStepVisual_RWCharacterizedObjectAndCharacterizedRepresentationAndDraughtingModelAndRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWCharacterizedObjectAndCharacterizedRepresentationAndDraughtingModelAndRepresentation self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_CharacterizedObjectAndCharacterizedRepresentationAndDraughtingModelAndRepresentation ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CharacterizedObjectAndCharacterizedRepresentationAndDraughtingModelAndRepresentation

        """
        return _RWStepVisual.RWStepVisual_RWCharacterizedObjectAndCharacterizedRepresentationAndDraughtingModelAndRepresentation_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWCharacterizedObjectAndCharacterizedRepresentationAndDraughtingModelAndRepresentation self, StepData_StepWriter SW, Handle_StepVisual_CharacterizedObjectAndCharacterizedRepresentationAndDraughtingModelAndRepresentation ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CharacterizedObjectAndCharacterizedRepresentationAndDraughtingModelAndRepresentation

        """
        return _RWStepVisual.RWStepVisual_RWCharacterizedObjectAndCharacterizedRepresentationAndDraughtingModelAndRepresentation_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWCharacterizedObjectAndCharacterizedRepresentationAndDraughtingModelAndRepresentation self, Handle_StepVisual_CharacterizedObjectAndCharacterizedRepresentationAndDraughtingModelAndRepresentation ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CharacterizedObjectAndCharacterizedRepresentationAndDraughtingModelAndRepresentation
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWCharacterizedObjectAndCharacterizedRepresentationAndDraughtingModelAndRepresentation_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWCharacterizedObjectAndCharacterizedRepresentationAndDraughtingModelAndRepresentation
RWStepVisual_RWCharacterizedObjectAndCharacterizedRepresentationAndDraughtingModelAndRepresentation_swigregister = _RWStepVisual.RWStepVisual_RWCharacterizedObjectAndCharacterizedRepresentationAndDraughtingModelAndRepresentation_swigregister
RWStepVisual_RWCharacterizedObjectAndCharacterizedRepresentationAndDraughtingModelAndRepresentation_swigregister(RWStepVisual_RWCharacterizedObjectAndCharacterizedRepresentationAndDraughtingModelAndRepresentation)

class RWStepVisual_RWDraughtingModel(object):
    """Read & Write tool for DraughtingModel"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWDraughtingModel self) -> RWStepVisual_RWDraughtingModel

        Empty constructor


        """
        this = _RWStepVisual.new_RWStepVisual_RWDraughtingModel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWDraughtingModel self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_DraughtingModel ent)

        Reads DraughtingModel

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_DraughtingModel

        """
        return _RWStepVisual.RWStepVisual_RWDraughtingModel_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWDraughtingModel self, StepData_StepWriter SW, Handle_StepVisual_DraughtingModel ent)

        Writes DraughtingModel

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_DraughtingModel

        """
        return _RWStepVisual.RWStepVisual_RWDraughtingModel_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWDraughtingModel self, Handle_StepVisual_DraughtingModel ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_DraughtingModel
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWDraughtingModel_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWDraughtingModel
RWStepVisual_RWDraughtingModel_swigregister = _RWStepVisual.RWStepVisual_RWDraughtingModel_swigregister
RWStepVisual_RWDraughtingModel_swigregister(RWStepVisual_RWDraughtingModel)

class RWStepVisual_RWStyledItem(object):
    """Read & Write Module for StyledItem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWStyledItem self) -> RWStepVisual_RWStyledItem

        Read & Write Module for StyledItem
        """
        this = _RWStepVisual.new_RWStepVisual_RWStyledItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWStyledItem self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_StyledItem ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_StyledItem

        """
        return _RWStepVisual.RWStepVisual_RWStyledItem_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWStyledItem self, StepData_StepWriter SW, Handle_StepVisual_StyledItem ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_StyledItem

        """
        return _RWStepVisual.RWStepVisual_RWStyledItem_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWStyledItem self, Handle_StepVisual_StyledItem ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_StyledItem
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWStyledItem_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWStyledItem
RWStepVisual_RWStyledItem_swigregister = _RWStepVisual.RWStepVisual_RWStyledItem_swigregister
RWStepVisual_RWStyledItem_swigregister(RWStepVisual_RWStyledItem)

class RWStepVisual_RWPresentationStyleByContext(object):
    """Read & Write Module for PresentationStyleByContext"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWPresentationStyleByContext self) -> RWStepVisual_RWPresentationStyleByContext

        Read & Write Module for PresentationStyleByContext
        """
        this = _RWStepVisual.new_RWStepVisual_RWPresentationStyleByContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWPresentationStyleByContext self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_PresentationStyleByContext ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PresentationStyleByContext

        """
        return _RWStepVisual.RWStepVisual_RWPresentationStyleByContext_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWPresentationStyleByContext self, StepData_StepWriter SW, Handle_StepVisual_PresentationStyleByContext ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PresentationStyleByContext

        """
        return _RWStepVisual.RWStepVisual_RWPresentationStyleByContext_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWPresentationStyleByContext self, Handle_StepVisual_PresentationStyleByContext ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PresentationStyleByContext
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWPresentationStyleByContext_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWPresentationStyleByContext
RWStepVisual_RWPresentationStyleByContext_swigregister = _RWStepVisual.RWStepVisual_RWPresentationStyleByContext_swigregister
RWStepVisual_RWPresentationStyleByContext_swigregister(RWStepVisual_RWPresentationStyleByContext)

class RWStepVisual_RWPresentationLayerAssignment(object):
    """Read & Write Module for PresentationLayerAssignment"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWPresentationLayerAssignment self) -> RWStepVisual_RWPresentationLayerAssignment

        Read & Write Module for PresentationLayerAssignment
        """
        this = _RWStepVisual.new_RWStepVisual_RWPresentationLayerAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWPresentationLayerAssignment self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_PresentationLayerAssignment ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PresentationLayerAssignment

        """
        return _RWStepVisual.RWStepVisual_RWPresentationLayerAssignment_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWPresentationLayerAssignment self, StepData_StepWriter SW, Handle_StepVisual_PresentationLayerAssignment ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PresentationLayerAssignment

        """
        return _RWStepVisual.RWStepVisual_RWPresentationLayerAssignment_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWPresentationLayerAssignment self, Handle_StepVisual_PresentationLayerAssignment ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PresentationLayerAssignment
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWPresentationLayerAssignment_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWPresentationLayerAssignment
RWStepVisual_RWPresentationLayerAssignment_swigregister = _RWStepVisual.RWStepVisual_RWPresentationLayerAssignment_swigregister
RWStepVisual_RWPresentationLayerAssignment_swigregister(RWStepVisual_RWPresentationLayerAssignment)

class RWStepVisual_RWOverRidingStyledItem(object):
    """Read & Write Module for OverRidingStyledItem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWOverRidingStyledItem self) -> RWStepVisual_RWOverRidingStyledItem

        Read & Write Module for OverRidingStyledItem
        """
        this = _RWStepVisual.new_RWStepVisual_RWOverRidingStyledItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWOverRidingStyledItem self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_OverRidingStyledItem ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_OverRidingStyledItem

        """
        return _RWStepVisual.RWStepVisual_RWOverRidingStyledItem_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWOverRidingStyledItem self, StepData_StepWriter SW, Handle_StepVisual_OverRidingStyledItem ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_OverRidingStyledItem

        """
        return _RWStepVisual.RWStepVisual_RWOverRidingStyledItem_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWOverRidingStyledItem self, Handle_StepVisual_OverRidingStyledItem ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_OverRidingStyledItem
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWOverRidingStyledItem_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWOverRidingStyledItem
RWStepVisual_RWOverRidingStyledItem_swigregister = _RWStepVisual.RWStepVisual_RWOverRidingStyledItem_swigregister
RWStepVisual_RWOverRidingStyledItem_swigregister(RWStepVisual_RWOverRidingStyledItem)

class RWStepVisual_RWTessellatedCurveSet(object):
    """Read & Write Module for AnnotationOccurrence"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWTessellatedCurveSet self) -> RWStepVisual_RWTessellatedCurveSet

        Read & Write Module for AnnotationOccurrence
        """
        this = _RWStepVisual.new_RWStepVisual_RWTessellatedCurveSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWTessellatedCurveSet self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_TessellatedCurveSet ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_TessellatedCurveSet

        """
        return _RWStepVisual.RWStepVisual_RWTessellatedCurveSet_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWTessellatedCurveSet self, StepData_StepWriter SW, Handle_StepVisual_TessellatedCurveSet ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_TessellatedCurveSet

        """
        return _RWStepVisual.RWStepVisual_RWTessellatedCurveSet_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWTessellatedCurveSet self, Handle_StepVisual_TessellatedCurveSet ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_TessellatedCurveSet
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWTessellatedCurveSet_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWTessellatedCurveSet
RWStepVisual_RWTessellatedCurveSet_swigregister = _RWStepVisual.RWStepVisual_RWTessellatedCurveSet_swigregister
RWStepVisual_RWTessellatedCurveSet_swigregister(RWStepVisual_RWTessellatedCurveSet)

class RWStepVisual_RWContextDependentInvisibility(object):
    """Read & Write Module for ContextDependentInvisibility"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWContextDependentInvisibility self) -> RWStepVisual_RWContextDependentInvisibility

        Read & Write Module for ContextDependentInvisibility
        """
        this = _RWStepVisual.new_RWStepVisual_RWContextDependentInvisibility(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWContextDependentInvisibility self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_ContextDependentInvisibility ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_ContextDependentInvisibility

        """
        return _RWStepVisual.RWStepVisual_RWContextDependentInvisibility_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWContextDependentInvisibility self, StepData_StepWriter SW, Handle_StepVisual_ContextDependentInvisibility ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_ContextDependentInvisibility

        """
        return _RWStepVisual.RWStepVisual_RWContextDependentInvisibility_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWContextDependentInvisibility self, Handle_StepVisual_ContextDependentInvisibility ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_ContextDependentInvisibility
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWContextDependentInvisibility_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWContextDependentInvisibility
RWStepVisual_RWContextDependentInvisibility_swigregister = _RWStepVisual.RWStepVisual_RWContextDependentInvisibility_swigregister
RWStepVisual_RWContextDependentInvisibility_swigregister(RWStepVisual_RWContextDependentInvisibility)

class RWStepVisual_RWCompositeText(object):
    """Read & Write Module for CompositeText"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWCompositeText self) -> RWStepVisual_RWCompositeText

        Read & Write Module for CompositeText
        """
        this = _RWStepVisual.new_RWStepVisual_RWCompositeText(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWCompositeText self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_CompositeText ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CompositeText

        """
        return _RWStepVisual.RWStepVisual_RWCompositeText_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWCompositeText self, StepData_StepWriter SW, Handle_StepVisual_CompositeText ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CompositeText

        """
        return _RWStepVisual.RWStepVisual_RWCompositeText_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWCompositeText self, Handle_StepVisual_CompositeText ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CompositeText
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWCompositeText_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWCompositeText
RWStepVisual_RWCompositeText_swigregister = _RWStepVisual.RWStepVisual_RWCompositeText_swigregister
RWStepVisual_RWCompositeText_swigregister(RWStepVisual_RWCompositeText)

class RWStepVisual_RWSurfaceStyleFillArea(object):
    """Read & Write Module for SurfaceStyleFillArea"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWSurfaceStyleFillArea self) -> RWStepVisual_RWSurfaceStyleFillArea

        Read & Write Module for SurfaceStyleFillArea
        """
        this = _RWStepVisual.new_RWStepVisual_RWSurfaceStyleFillArea(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWSurfaceStyleFillArea self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_SurfaceStyleFillArea ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_SurfaceStyleFillArea

        """
        return _RWStepVisual.RWStepVisual_RWSurfaceStyleFillArea_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWSurfaceStyleFillArea self, StepData_StepWriter SW, Handle_StepVisual_SurfaceStyleFillArea ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_SurfaceStyleFillArea

        """
        return _RWStepVisual.RWStepVisual_RWSurfaceStyleFillArea_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWSurfaceStyleFillArea self, Handle_StepVisual_SurfaceStyleFillArea ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_SurfaceStyleFillArea
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWSurfaceStyleFillArea_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWSurfaceStyleFillArea
RWStepVisual_RWSurfaceStyleFillArea_swigregister = _RWStepVisual.RWStepVisual_RWSurfaceStyleFillArea_swigregister
RWStepVisual_RWSurfaceStyleFillArea_swigregister(RWStepVisual_RWSurfaceStyleFillArea)

class RWStepVisual_RWSurfaceStyleBoundary(object):
    """Read & Write Module for SurfaceStyleBoundary"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWSurfaceStyleBoundary self) -> RWStepVisual_RWSurfaceStyleBoundary

        Read & Write Module for SurfaceStyleBoundary
        """
        this = _RWStepVisual.new_RWStepVisual_RWSurfaceStyleBoundary(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWSurfaceStyleBoundary self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_SurfaceStyleBoundary ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_SurfaceStyleBoundary

        """
        return _RWStepVisual.RWStepVisual_RWSurfaceStyleBoundary_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWSurfaceStyleBoundary self, StepData_StepWriter SW, Handle_StepVisual_SurfaceStyleBoundary ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_SurfaceStyleBoundary

        """
        return _RWStepVisual.RWStepVisual_RWSurfaceStyleBoundary_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWSurfaceStyleBoundary self, Handle_StepVisual_SurfaceStyleBoundary ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_SurfaceStyleBoundary
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWSurfaceStyleBoundary_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWSurfaceStyleBoundary
RWStepVisual_RWSurfaceStyleBoundary_swigregister = _RWStepVisual.RWStepVisual_RWSurfaceStyleBoundary_swigregister
RWStepVisual_RWSurfaceStyleBoundary_swigregister(RWStepVisual_RWSurfaceStyleBoundary)

class RWStepVisual_RWTessellatedGeometricSet(object):
    """Read & Write Module for AnnotationOccurrence"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWTessellatedGeometricSet self) -> RWStepVisual_RWTessellatedGeometricSet

        Read & Write Module for AnnotationOccurrence
        """
        this = _RWStepVisual.new_RWStepVisual_RWTessellatedGeometricSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWTessellatedGeometricSet self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_TessellatedGeometricSet ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_TessellatedGeometricSet

        """
        return _RWStepVisual.RWStepVisual_RWTessellatedGeometricSet_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWTessellatedGeometricSet self, StepData_StepWriter SW, Handle_StepVisual_TessellatedGeometricSet ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_TessellatedGeometricSet

        """
        return _RWStepVisual.RWStepVisual_RWTessellatedGeometricSet_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWTessellatedGeometricSet self, Handle_StepVisual_TessellatedGeometricSet ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_TessellatedGeometricSet
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWTessellatedGeometricSet_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWTessellatedGeometricSet
RWStepVisual_RWTessellatedGeometricSet_swigregister = _RWStepVisual.RWStepVisual_RWTessellatedGeometricSet_swigregister
RWStepVisual_RWTessellatedGeometricSet_swigregister(RWStepVisual_RWTessellatedGeometricSet)

class RWStepVisual_RWAnnotationOccurrence(object):
    """Read & Write Module for AnnotationOccurrence"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWAnnotationOccurrence self) -> RWStepVisual_RWAnnotationOccurrence

        Read & Write Module for AnnotationOccurrence
        """
        this = _RWStepVisual.new_RWStepVisual_RWAnnotationOccurrence(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWAnnotationOccurrence self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_AnnotationOccurrence ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_AnnotationOccurrence

        """
        return _RWStepVisual.RWStepVisual_RWAnnotationOccurrence_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWAnnotationOccurrence self, StepData_StepWriter SW, Handle_StepVisual_AnnotationOccurrence ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_AnnotationOccurrence

        """
        return _RWStepVisual.RWStepVisual_RWAnnotationOccurrence_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWAnnotationOccurrence self, Handle_StepVisual_AnnotationOccurrence ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_AnnotationOccurrence
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWAnnotationOccurrence_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWAnnotationOccurrence
RWStepVisual_RWAnnotationOccurrence_swigregister = _RWStepVisual.RWStepVisual_RWAnnotationOccurrence_swigregister
RWStepVisual_RWAnnotationOccurrence_swigregister(RWStepVisual_RWAnnotationOccurrence)

class RWStepVisual_RWDraughtingPreDefinedCurveFont(object):
    """Read & Write Module for DraughtingPreDefinedCurveFont"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWDraughtingPreDefinedCurveFont self) -> RWStepVisual_RWDraughtingPreDefinedCurveFont

        Read & Write Module for DraughtingPreDefinedCurveFont
        """
        this = _RWStepVisual.new_RWStepVisual_RWDraughtingPreDefinedCurveFont(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWDraughtingPreDefinedCurveFont self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_DraughtingPreDefinedCurveFont ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_DraughtingPreDefinedCurveFont

        """
        return _RWStepVisual.RWStepVisual_RWDraughtingPreDefinedCurveFont_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWDraughtingPreDefinedCurveFont self, StepData_StepWriter SW, Handle_StepVisual_DraughtingPreDefinedCurveFont ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_DraughtingPreDefinedCurveFont

        """
        return _RWStepVisual.RWStepVisual_RWDraughtingPreDefinedCurveFont_WriteStep(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWDraughtingPreDefinedCurveFont
RWStepVisual_RWDraughtingPreDefinedCurveFont_swigregister = _RWStepVisual.RWStepVisual_RWDraughtingPreDefinedCurveFont_swigregister
RWStepVisual_RWDraughtingPreDefinedCurveFont_swigregister(RWStepVisual_RWDraughtingPreDefinedCurveFont)

class RWStepVisual_RWTessellatedAnnotationOccurrence(object):
    """Read & Write Module for AnnotationOccurrence"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWTessellatedAnnotationOccurrence self) -> RWStepVisual_RWTessellatedAnnotationOccurrence

        Read & Write Module for AnnotationOccurrence
        """
        this = _RWStepVisual.new_RWStepVisual_RWTessellatedAnnotationOccurrence(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWTessellatedAnnotationOccurrence self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_TessellatedAnnotationOccurrence ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_TessellatedAnnotationOccurrence

        """
        return _RWStepVisual.RWStepVisual_RWTessellatedAnnotationOccurrence_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWTessellatedAnnotationOccurrence self, StepData_StepWriter SW, Handle_StepVisual_TessellatedAnnotationOccurrence ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_TessellatedAnnotationOccurrence

        """
        return _RWStepVisual.RWStepVisual_RWTessellatedAnnotationOccurrence_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWTessellatedAnnotationOccurrence self, Handle_StepVisual_TessellatedAnnotationOccurrence ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_TessellatedAnnotationOccurrence
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWTessellatedAnnotationOccurrence_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWTessellatedAnnotationOccurrence
RWStepVisual_RWTessellatedAnnotationOccurrence_swigregister = _RWStepVisual.RWStepVisual_RWTessellatedAnnotationOccurrence_swigregister
RWStepVisual_RWTessellatedAnnotationOccurrence_swigregister(RWStepVisual_RWTessellatedAnnotationOccurrence)

class RWStepVisual_RWColourRgb(object):
    """Read & Write Module for ColourRgb"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWColourRgb self) -> RWStepVisual_RWColourRgb

        Read & Write Module for ColourRgb
        """
        this = _RWStepVisual.new_RWStepVisual_RWColourRgb(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWColourRgb self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_ColourRgb ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_ColourRgb

        """
        return _RWStepVisual.RWStepVisual_RWColourRgb_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWColourRgb self, StepData_StepWriter SW, Handle_StepVisual_ColourRgb ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_ColourRgb

        """
        return _RWStepVisual.RWStepVisual_RWColourRgb_WriteStep(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWColourRgb
RWStepVisual_RWColourRgb_swigregister = _RWStepVisual.RWStepVisual_RWColourRgb_swigregister
RWStepVisual_RWColourRgb_swigregister(RWStepVisual_RWColourRgb)

class RWStepVisual_RWPresentedItemRepresentation(object):
    """Read & Write Module for PresentedItemRepresentation"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWPresentedItemRepresentation self) -> RWStepVisual_RWPresentedItemRepresentation

        Read & Write Module for PresentedItemRepresentation
        """
        this = _RWStepVisual.new_RWStepVisual_RWPresentedItemRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWPresentedItemRepresentation self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_PresentedItemRepresentation ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PresentedItemRepresentation

        """
        return _RWStepVisual.RWStepVisual_RWPresentedItemRepresentation_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWPresentedItemRepresentation self, StepData_StepWriter SW, Handle_StepVisual_PresentedItemRepresentation ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PresentedItemRepresentation

        """
        return _RWStepVisual.RWStepVisual_RWPresentedItemRepresentation_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWPresentedItemRepresentation self, Handle_StepVisual_PresentedItemRepresentation ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PresentedItemRepresentation
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWPresentedItemRepresentation_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWPresentedItemRepresentation
RWStepVisual_RWPresentedItemRepresentation_swigregister = _RWStepVisual.RWStepVisual_RWPresentedItemRepresentation_swigregister
RWStepVisual_RWPresentedItemRepresentation_swigregister(RWStepVisual_RWPresentedItemRepresentation)

class RWStepVisual_RWPreDefinedColour(object):
    """Read & Write Module for PreDefinedColour"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWPreDefinedColour self) -> RWStepVisual_RWPreDefinedColour

        Read & Write Module for PreDefinedColour
        """
        this = _RWStepVisual.new_RWStepVisual_RWPreDefinedColour(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWPreDefinedColour self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_PreDefinedColour ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PreDefinedColour

        """
        return _RWStepVisual.RWStepVisual_RWPreDefinedColour_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWPreDefinedColour self, StepData_StepWriter SW, Handle_StepVisual_PreDefinedColour ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PreDefinedColour

        """
        return _RWStepVisual.RWStepVisual_RWPreDefinedColour_WriteStep(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWPreDefinedColour
RWStepVisual_RWPreDefinedColour_swigregister = _RWStepVisual.RWStepVisual_RWPreDefinedColour_swigregister
RWStepVisual_RWPreDefinedColour_swigregister(RWStepVisual_RWPreDefinedColour)

class RWStepVisual_RWPointStyle(object):
    """Read & Write Module for PointStyle"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWPointStyle self) -> RWStepVisual_RWPointStyle

        Read & Write Module for PointStyle
        """
        this = _RWStepVisual.new_RWStepVisual_RWPointStyle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWPointStyle self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_PointStyle ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PointStyle

        """
        return _RWStepVisual.RWStepVisual_RWPointStyle_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWPointStyle self, StepData_StepWriter SW, Handle_StepVisual_PointStyle ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PointStyle

        """
        return _RWStepVisual.RWStepVisual_RWPointStyle_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWPointStyle self, Handle_StepVisual_PointStyle ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PointStyle
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWPointStyle_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWPointStyle
RWStepVisual_RWPointStyle_swigregister = _RWStepVisual.RWStepVisual_RWPointStyle_swigregister
RWStepVisual_RWPointStyle_swigregister(RWStepVisual_RWPointStyle)

class RWStepVisual_RWFillAreaStyleColour(object):
    """Read & Write Module for FillAreaStyleColour"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWFillAreaStyleColour self) -> RWStepVisual_RWFillAreaStyleColour

        Read & Write Module for FillAreaStyleColour
        """
        this = _RWStepVisual.new_RWStepVisual_RWFillAreaStyleColour(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWFillAreaStyleColour self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_FillAreaStyleColour ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_FillAreaStyleColour

        """
        return _RWStepVisual.RWStepVisual_RWFillAreaStyleColour_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWFillAreaStyleColour self, StepData_StepWriter SW, Handle_StepVisual_FillAreaStyleColour ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_FillAreaStyleColour

        """
        return _RWStepVisual.RWStepVisual_RWFillAreaStyleColour_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWFillAreaStyleColour self, Handle_StepVisual_FillAreaStyleColour ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_FillAreaStyleColour
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWFillAreaStyleColour_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWFillAreaStyleColour
RWStepVisual_RWFillAreaStyleColour_swigregister = _RWStepVisual.RWStepVisual_RWFillAreaStyleColour_swigregister
RWStepVisual_RWFillAreaStyleColour_swigregister(RWStepVisual_RWFillAreaStyleColour)

class RWStepVisual_RWPresentationView(object):
    """Read & Write Module for PresentationView"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWPresentationView self) -> RWStepVisual_RWPresentationView

        Read & Write Module for PresentationView
        """
        this = _RWStepVisual.new_RWStepVisual_RWPresentationView(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWPresentationView self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_PresentationView ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PresentationView

        """
        return _RWStepVisual.RWStepVisual_RWPresentationView_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWPresentationView self, StepData_StepWriter SW, Handle_StepVisual_PresentationView ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PresentationView

        """
        return _RWStepVisual.RWStepVisual_RWPresentationView_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWPresentationView self, Handle_StepVisual_PresentationView ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PresentationView
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWPresentationView_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWPresentationView
RWStepVisual_RWPresentationView_swigregister = _RWStepVisual.RWStepVisual_RWPresentationView_swigregister
RWStepVisual_RWPresentationView_swigregister(RWStepVisual_RWPresentationView)

class RWStepVisual_RWTemplate(object):
    """Read & Write Module for Template"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWTemplate self) -> RWStepVisual_RWTemplate

        Read & Write Module for Template
        """
        this = _RWStepVisual.new_RWStepVisual_RWTemplate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWTemplate self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_Template ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_Template

        """
        return _RWStepVisual.RWStepVisual_RWTemplate_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWTemplate self, StepData_StepWriter SW, Handle_StepVisual_Template ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_Template

        """
        return _RWStepVisual.RWStepVisual_RWTemplate_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWTemplate self, Handle_StepVisual_Template ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_Template
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWTemplate_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWTemplate
RWStepVisual_RWTemplate_swigregister = _RWStepVisual.RWStepVisual_RWTemplate_swigregister
RWStepVisual_RWTemplate_swigregister(RWStepVisual_RWTemplate)

class RWStepVisual_RWDraughtingCallout(object):
    """Read & Write Module for DraughtingCallout"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWDraughtingCallout self) -> RWStepVisual_RWDraughtingCallout

        Read & Write Module for DraughtingCallout
        """
        this = _RWStepVisual.new_RWStepVisual_RWDraughtingCallout(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWDraughtingCallout self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_DraughtingCallout ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_DraughtingCallout

        """
        return _RWStepVisual.RWStepVisual_RWDraughtingCallout_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWDraughtingCallout self, StepData_StepWriter SW, Handle_StepVisual_DraughtingCallout ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_DraughtingCallout

        """
        return _RWStepVisual.RWStepVisual_RWDraughtingCallout_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWDraughtingCallout self, Handle_StepVisual_DraughtingCallout ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_DraughtingCallout
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWDraughtingCallout_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWDraughtingCallout
RWStepVisual_RWDraughtingCallout_swigregister = _RWStepVisual.RWStepVisual_RWDraughtingCallout_swigregister
RWStepVisual_RWDraughtingCallout_swigregister(RWStepVisual_RWDraughtingCallout)

class RWStepVisual_RWAnnotationCurveOccurrence(object):
    """Read & Write Module for AnnotationCurveOccurrence"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWAnnotationCurveOccurrence self) -> RWStepVisual_RWAnnotationCurveOccurrence

        Read & Write Module for AnnotationCurveOccurrence
        """
        this = _RWStepVisual.new_RWStepVisual_RWAnnotationCurveOccurrence(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWAnnotationCurveOccurrence self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_AnnotationCurveOccurrence ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_AnnotationCurveOccurrence

        """
        return _RWStepVisual.RWStepVisual_RWAnnotationCurveOccurrence_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWAnnotationCurveOccurrence self, StepData_StepWriter SW, Handle_StepVisual_AnnotationCurveOccurrence ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_AnnotationCurveOccurrence

        """
        return _RWStepVisual.RWStepVisual_RWAnnotationCurveOccurrence_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWAnnotationCurveOccurrence self, Handle_StepVisual_AnnotationCurveOccurrence ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_AnnotationCurveOccurrence
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWAnnotationCurveOccurrence_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWAnnotationCurveOccurrence
RWStepVisual_RWAnnotationCurveOccurrence_swigregister = _RWStepVisual.RWStepVisual_RWAnnotationCurveOccurrence_swigregister
RWStepVisual_RWAnnotationCurveOccurrence_swigregister(RWStepVisual_RWAnnotationCurveOccurrence)

class RWStepVisual_RWCameraModelD3MultiClippingIntersection(object):
    """Read & Write Module for CameraModelD3MultiClippingIntersection"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWCameraModelD3MultiClippingIntersection self) -> RWStepVisual_RWCameraModelD3MultiClippingIntersection

        Read & Write Module for CameraModelD3MultiClippingIntersection
        """
        this = _RWStepVisual.new_RWStepVisual_RWCameraModelD3MultiClippingIntersection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWCameraModelD3MultiClippingIntersection self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_CameraModelD3MultiClippingIntersection ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CameraModelD3MultiClippingIntersection

        """
        return _RWStepVisual.RWStepVisual_RWCameraModelD3MultiClippingIntersection_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWCameraModelD3MultiClippingIntersection self, StepData_StepWriter SW, Handle_StepVisual_CameraModelD3MultiClippingIntersection ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CameraModelD3MultiClippingIntersection

        """
        return _RWStepVisual.RWStepVisual_RWCameraModelD3MultiClippingIntersection_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWCameraModelD3MultiClippingIntersection self, Handle_StepVisual_CameraModelD3MultiClippingIntersection ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_CameraModelD3MultiClippingIntersection
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWCameraModelD3MultiClippingIntersection_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWCameraModelD3MultiClippingIntersection
RWStepVisual_RWCameraModelD3MultiClippingIntersection_swigregister = _RWStepVisual.RWStepVisual_RWCameraModelD3MultiClippingIntersection_swigregister
RWStepVisual_RWCameraModelD3MultiClippingIntersection_swigregister(RWStepVisual_RWCameraModelD3MultiClippingIntersection)

class RWStepVisual_RWPresentationSize(object):
    """Read & Write Module for PresentationSize"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWPresentationSize self) -> RWStepVisual_RWPresentationSize

        Read & Write Module for PresentationSize
        """
        this = _RWStepVisual.new_RWStepVisual_RWPresentationSize(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWPresentationSize self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_PresentationSize ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PresentationSize

        """
        return _RWStepVisual.RWStepVisual_RWPresentationSize_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWPresentationSize self, StepData_StepWriter SW, Handle_StepVisual_PresentationSize ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PresentationSize

        """
        return _RWStepVisual.RWStepVisual_RWPresentationSize_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWPresentationSize self, Handle_StepVisual_PresentationSize ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PresentationSize
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWPresentationSize_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWPresentationSize
RWStepVisual_RWPresentationSize_swigregister = _RWStepVisual.RWStepVisual_RWPresentationSize_swigregister
RWStepVisual_RWPresentationSize_swigregister(RWStepVisual_RWPresentationSize)

class RWStepVisual_RWAnnotationFillAreaOccurrence(object):
    """Read & Write Module for AnnotationFillAreaOccurrence"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWAnnotationFillAreaOccurrence self) -> RWStepVisual_RWAnnotationFillAreaOccurrence

        Read & Write Module for AnnotationFillAreaOccurrence
        """
        this = _RWStepVisual.new_RWStepVisual_RWAnnotationFillAreaOccurrence(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWAnnotationFillAreaOccurrence self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_AnnotationFillAreaOccurrence ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_AnnotationFillAreaOccurrence

        """
        return _RWStepVisual.RWStepVisual_RWAnnotationFillAreaOccurrence_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWAnnotationFillAreaOccurrence self, StepData_StepWriter SW, Handle_StepVisual_AnnotationFillAreaOccurrence ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_AnnotationFillAreaOccurrence

        """
        return _RWStepVisual.RWStepVisual_RWAnnotationFillAreaOccurrence_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWAnnotationFillAreaOccurrence self, Handle_StepVisual_AnnotationFillAreaOccurrence ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_AnnotationFillAreaOccurrence
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWAnnotationFillAreaOccurrence_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWAnnotationFillAreaOccurrence
RWStepVisual_RWAnnotationFillAreaOccurrence_swigregister = _RWStepVisual.RWStepVisual_RWAnnotationFillAreaOccurrence_swigregister
RWStepVisual_RWAnnotationFillAreaOccurrence_swigregister(RWStepVisual_RWAnnotationFillAreaOccurrence)

class RWStepVisual_RWPlanarBox(object):
    """Read & Write Module for PlanarBox"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWPlanarBox self) -> RWStepVisual_RWPlanarBox

        Read & Write Module for PlanarBox
        """
        this = _RWStepVisual.new_RWStepVisual_RWPlanarBox(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWPlanarBox self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_PlanarBox ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PlanarBox

        """
        return _RWStepVisual.RWStepVisual_RWPlanarBox_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWPlanarBox self, StepData_StepWriter SW, Handle_StepVisual_PlanarBox ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PlanarBox

        """
        return _RWStepVisual.RWStepVisual_RWPlanarBox_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWPlanarBox self, Handle_StepVisual_PlanarBox ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PlanarBox
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWPlanarBox_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWPlanarBox
RWStepVisual_RWPlanarBox_swigregister = _RWStepVisual.RWStepVisual_RWPlanarBox_swigregister
RWStepVisual_RWPlanarBox_swigregister(RWStepVisual_RWPlanarBox)

class RWStepVisual_RWPreDefinedCurveFont(object):
    """Read & Write Module for PreDefinedCurveFont"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWPreDefinedCurveFont self) -> RWStepVisual_RWPreDefinedCurveFont

        Read & Write Module for PreDefinedCurveFont
        """
        this = _RWStepVisual.new_RWStepVisual_RWPreDefinedCurveFont(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWPreDefinedCurveFont self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_PreDefinedCurveFont ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PreDefinedCurveFont

        """
        return _RWStepVisual.RWStepVisual_RWPreDefinedCurveFont_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWPreDefinedCurveFont self, StepData_StepWriter SW, Handle_StepVisual_PreDefinedCurveFont ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PreDefinedCurveFont

        """
        return _RWStepVisual.RWStepVisual_RWPreDefinedCurveFont_WriteStep(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWPreDefinedCurveFont
RWStepVisual_RWPreDefinedCurveFont_swigregister = _RWStepVisual.RWStepVisual_RWPreDefinedCurveFont_swigregister
RWStepVisual_RWPreDefinedCurveFont_swigregister(RWStepVisual_RWPreDefinedCurveFont)

class RWStepVisual_RWAnnotationPlane(object):
    """Read & Write Module for AnnotationPlane"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWAnnotationPlane self) -> RWStepVisual_RWAnnotationPlane

        Read & Write Module for AnnotationPlane
        """
        this = _RWStepVisual.new_RWStepVisual_RWAnnotationPlane(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWAnnotationPlane self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_AnnotationPlane ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_AnnotationPlane

        """
        return _RWStepVisual.RWStepVisual_RWAnnotationPlane_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWAnnotationPlane self, StepData_StepWriter SW, Handle_StepVisual_AnnotationPlane ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_AnnotationPlane

        """
        return _RWStepVisual.RWStepVisual_RWAnnotationPlane_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWAnnotationPlane self, Handle_StepVisual_AnnotationPlane ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_AnnotationPlane
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWAnnotationPlane_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWAnnotationPlane
RWStepVisual_RWAnnotationPlane_swigregister = _RWStepVisual.RWStepVisual_RWAnnotationPlane_swigregister
RWStepVisual_RWAnnotationPlane_swigregister(RWStepVisual_RWAnnotationPlane)

class RWStepVisual_RWPresentationRepresentation(object):
    """Read & Write Module for PresentationRepresentation"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWPresentationRepresentation self) -> RWStepVisual_RWPresentationRepresentation

        Read & Write Module for PresentationRepresentation
        """
        this = _RWStepVisual.new_RWStepVisual_RWPresentationRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWPresentationRepresentation self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_PresentationRepresentation ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PresentationRepresentation

        """
        return _RWStepVisual.RWStepVisual_RWPresentationRepresentation_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWPresentationRepresentation self, StepData_StepWriter SW, Handle_StepVisual_PresentationRepresentation ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PresentationRepresentation

        """
        return _RWStepVisual.RWStepVisual_RWPresentationRepresentation_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWPresentationRepresentation self, Handle_StepVisual_PresentationRepresentation ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_PresentationRepresentation
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWPresentationRepresentation_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWPresentationRepresentation
RWStepVisual_RWPresentationRepresentation_swigregister = _RWStepVisual.RWStepVisual_RWPresentationRepresentation_swigregister
RWStepVisual_RWPresentationRepresentation_swigregister(RWStepVisual_RWPresentationRepresentation)

class RWStepVisual_RWTextStyleForDefinedFont(object):
    """Read & Write Module for TextStyleForDefinedFont"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWTextStyleForDefinedFont self) -> RWStepVisual_RWTextStyleForDefinedFont

        Read & Write Module for TextStyleForDefinedFont
        """
        this = _RWStepVisual.new_RWStepVisual_RWTextStyleForDefinedFont(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWTextStyleForDefinedFont self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_TextStyleForDefinedFont ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_TextStyleForDefinedFont

        """
        return _RWStepVisual.RWStepVisual_RWTextStyleForDefinedFont_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWTextStyleForDefinedFont self, StepData_StepWriter SW, Handle_StepVisual_TextStyleForDefinedFont ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_TextStyleForDefinedFont

        """
        return _RWStepVisual.RWStepVisual_RWTextStyleForDefinedFont_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWTextStyleForDefinedFont self, Handle_StepVisual_TextStyleForDefinedFont ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_TextStyleForDefinedFont
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWTextStyleForDefinedFont_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWTextStyleForDefinedFont
RWStepVisual_RWTextStyleForDefinedFont_swigregister = _RWStepVisual.RWStepVisual_RWTextStyleForDefinedFont_swigregister
RWStepVisual_RWTextStyleForDefinedFont_swigregister(RWStepVisual_RWTextStyleForDefinedFont)

class RWStepVisual_RWTemplateInstance(object):
    """Read & Write Module for TemplateInstance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWTemplateInstance self) -> RWStepVisual_RWTemplateInstance

        Read & Write Module for TemplateInstance
        """
        this = _RWStepVisual.new_RWStepVisual_RWTemplateInstance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWTemplateInstance self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_TemplateInstance ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_TemplateInstance

        """
        return _RWStepVisual.RWStepVisual_RWTemplateInstance_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWTemplateInstance self, StepData_StepWriter SW, Handle_StepVisual_TemplateInstance ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_TemplateInstance

        """
        return _RWStepVisual.RWStepVisual_RWTemplateInstance_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWTemplateInstance self, Handle_StepVisual_TemplateInstance ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_TemplateInstance
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWTemplateInstance_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWTemplateInstance
RWStepVisual_RWTemplateInstance_swigregister = _RWStepVisual.RWStepVisual_RWTemplateInstance_swigregister
RWStepVisual_RWTemplateInstance_swigregister(RWStepVisual_RWTemplateInstance)

class RWStepVisual_RWAnnotationFillArea(object):
    """Read & Write Module for AnnotationFillArea"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepVisual_RWAnnotationFillArea self) -> RWStepVisual_RWAnnotationFillArea

        Read & Write Module for AnnotationFillArea
        """
        this = _RWStepVisual.new_RWStepVisual_RWAnnotationFillArea(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepVisual_RWAnnotationFillArea self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepVisual_AnnotationFillArea ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_AnnotationFillArea

        """
        return _RWStepVisual.RWStepVisual_RWAnnotationFillArea_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepVisual_RWAnnotationFillArea self, StepData_StepWriter SW, Handle_StepVisual_AnnotationFillArea ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_AnnotationFillArea

        """
        return _RWStepVisual.RWStepVisual_RWAnnotationFillArea_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepVisual_RWAnnotationFillArea self, Handle_StepVisual_AnnotationFillArea ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepVisual.Handle_StepVisual_AnnotationFillArea
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepVisual.RWStepVisual_RWAnnotationFillArea_Share(self, *args)

    __swig_destroy__ = _RWStepVisual.delete_RWStepVisual_RWAnnotationFillArea
RWStepVisual_RWAnnotationFillArea_swigregister = _RWStepVisual.RWStepVisual_RWAnnotationFillArea_swigregister
RWStepVisual_RWAnnotationFillArea_swigregister(RWStepVisual_RWAnnotationFillArea)



