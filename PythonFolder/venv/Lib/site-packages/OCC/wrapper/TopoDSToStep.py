# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TopoDSToStep')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TopoDSToStep')
    _TopoDSToStep = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TopoDSToStep', [dirname(__file__)])
        except ImportError:
            import _TopoDSToStep
            return _TopoDSToStep
        try:
            _mod = imp.load_module('_TopoDSToStep', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TopoDSToStep = swig_import_helper()
    del swig_import_helper
else:
    import _TopoDSToStep
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TopoDSToStep.delete_SwigPyIterator

    def value(self):
        return _TopoDSToStep.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _TopoDSToStep.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _TopoDSToStep.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _TopoDSToStep.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _TopoDSToStep.SwigPyIterator_equal(self, x)

    def copy(self):
        return _TopoDSToStep.SwigPyIterator_copy(self)

    def next(self):
        return _TopoDSToStep.SwigPyIterator_next(self)

    def __next__(self):
        return _TopoDSToStep.SwigPyIterator___next__(self)

    def previous(self):
        return _TopoDSToStep.SwigPyIterator_previous(self)

    def advance(self, n):
        return _TopoDSToStep.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _TopoDSToStep.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _TopoDSToStep.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _TopoDSToStep.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _TopoDSToStep.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _TopoDSToStep.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _TopoDSToStep.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _TopoDSToStep.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _TopoDSToStep.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_TopoDSToStep.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _TopoDSToStep.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _TopoDSToStep.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TopoDSToStep.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _TopoDSToStep.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _TopoDSToStep.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _TopoDSToStep.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _TopoDSToStep.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_TopoDSToStep.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _TopoDSToStep.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _TopoDSToStep.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TopoDSToStep.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _TopoDSToStep.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _TopoDSToStep.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _TopoDSToStep.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _TopoDSToStep.ptr_to_number(item)
ptr_to_number = _TopoDSToStep.ptr_to_number

def HashCode(*args):
    return _TopoDSToStep.HashCode(*args)
HashCode = _TopoDSToStep.HashCode

def ptr_equal(a, b):
    return _TopoDSToStep.ptr_equal(a, b)
ptr_equal = _TopoDSToStep.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Transfer
else:
    import Transfer
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepShape
else:
    import StepShape
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepBasic
else:
    import StepBasic
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepData
else:
    import StepData
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepGeom
else:
    import StepGeom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepRepr
else:
    import StepRepr
del _swig_python_version_info
TopoDSToStep_BuilderDone = _TopoDSToStep.TopoDSToStep_BuilderDone
TopoDSToStep_NoFaceMapped = _TopoDSToStep.TopoDSToStep_NoFaceMapped
TopoDSToStep_BuilderOther = _TopoDSToStep.TopoDSToStep_BuilderOther
TopoDSToStep_FaceDone = _TopoDSToStep.TopoDSToStep_FaceDone
TopoDSToStep_InfiniteFace = _TopoDSToStep.TopoDSToStep_InfiniteFace
TopoDSToStep_NonManifoldFace = _TopoDSToStep.TopoDSToStep_NonManifoldFace
TopoDSToStep_NoWireMapped = _TopoDSToStep.TopoDSToStep_NoWireMapped
TopoDSToStep_FaceOther = _TopoDSToStep.TopoDSToStep_FaceOther
TopoDSToStep_WireDone = _TopoDSToStep.TopoDSToStep_WireDone
TopoDSToStep_NonManifoldWire = _TopoDSToStep.TopoDSToStep_NonManifoldWire
TopoDSToStep_WireOther = _TopoDSToStep.TopoDSToStep_WireOther
TopoDSToStep_EdgeDone = _TopoDSToStep.TopoDSToStep_EdgeDone
TopoDSToStep_NonManifoldEdge = _TopoDSToStep.TopoDSToStep_NonManifoldEdge
TopoDSToStep_EdgeOther = _TopoDSToStep.TopoDSToStep_EdgeOther
TopoDSToStep_VertexDone = _TopoDSToStep.TopoDSToStep_VertexDone
TopoDSToStep_VertexOther = _TopoDSToStep.TopoDSToStep_VertexOther
TopoDSToStep_FacetedDone = _TopoDSToStep.TopoDSToStep_FacetedDone
TopoDSToStep_SurfaceNotPlane = _TopoDSToStep.TopoDSToStep_SurfaceNotPlane
TopoDSToStep_PCurveNotLinear = _TopoDSToStep.TopoDSToStep_PCurveNotLinear
class TopoDSToStep_Root(object):
    """
    This class implements the common services for
    all classes of TopoDSToStep which report error.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Tolerance(self, *args):
        """
        Tolerance(TopoDSToStep_Root self) -> Standard_Real &

        Returns (modifiable) the tolerance to be used for writing
        If not set, starts at 0.0001

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _TopoDSToStep.TopoDSToStep_Root_Tolerance(self, *args)


    def IsDone(self, *args):
        """
        IsDone(TopoDSToStep_Root self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopoDSToStep.TopoDSToStep_Root_IsDone(self, *args)

    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_Root
TopoDSToStep_Root_swigregister = _TopoDSToStep.TopoDSToStep_Root_swigregister
TopoDSToStep_Root_swigregister(TopoDSToStep_Root)

class TopoDSToStep_(object):
    """
    This package implements the mapping between CAS.CAD
    Shape representation and AP214 Shape Representation.
    The target schema is pms_c4 (a subset of AP214)

    How to use this Package :

    Entry point are context dependent. It can be :
    MakeManifoldSolidBrep
    MakeBrepWithVoids
    MakeFacetedBrep
    MakeFacetedBrepAndBrepWithVoids
    MakeShellBasedSurfaceModel
    Each of these classes call the Builder
    The class tool centralizes some common informations.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def DecodeBuilderError(*args):
        """
        DecodeBuilderError(TopoDSToStep_BuilderError const E) -> Handle_TCollection_HAsciiString

        :type E: OCC.wrapper.TopoDSToStep.TopoDSToStep_BuilderError
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _TopoDSToStep.TopoDSToStep__DecodeBuilderError(*args)

    DecodeBuilderError = staticmethod(DecodeBuilderError)

    def DecodeFaceError(*args):
        """
        DecodeFaceError(TopoDSToStep_MakeFaceError const E) -> Handle_TCollection_HAsciiString

        :type E: OCC.wrapper.TopoDSToStep.TopoDSToStep_MakeFaceError
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _TopoDSToStep.TopoDSToStep__DecodeFaceError(*args)

    DecodeFaceError = staticmethod(DecodeFaceError)

    def DecodeWireError(*args):
        """
        DecodeWireError(TopoDSToStep_MakeWireError const E) -> Handle_TCollection_HAsciiString

        :type E: OCC.wrapper.TopoDSToStep.TopoDSToStep_MakeWireError
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _TopoDSToStep.TopoDSToStep__DecodeWireError(*args)

    DecodeWireError = staticmethod(DecodeWireError)

    def DecodeEdgeError(*args):
        """
        DecodeEdgeError(TopoDSToStep_MakeEdgeError const E) -> Handle_TCollection_HAsciiString

        :type E: OCC.wrapper.TopoDSToStep.TopoDSToStep_MakeEdgeError
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _TopoDSToStep.TopoDSToStep__DecodeEdgeError(*args)

    DecodeEdgeError = staticmethod(DecodeEdgeError)

    def DecodeVertexError(*args):
        """
        DecodeVertexError(TopoDSToStep_MakeVertexError const E) -> Handle_TCollection_HAsciiString

        Returns a new shape without undirect surfaces.

        :type E: OCC.wrapper.TopoDSToStep.TopoDSToStep_MakeVertexError
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _TopoDSToStep.TopoDSToStep__DecodeVertexError(*args)

    DecodeVertexError = staticmethod(DecodeVertexError)

    def AddResult(*args):
        """
        AddResult(Handle_Transfer_FinderProcess FP, TopoDS_Shape Shape, Handle_Standard_Transient entity)
        AddResult(Handle_Transfer_FinderProcess FP, TopoDSToStep_Tool Tool)

        Adds all entities recorded in Tool into the map of results
        (binders) stored in FinderProcess

        :type FP: OCC.wrapper.Transfer.Handle_Transfer_FinderProcess
        :type Tool: OCC.wrapper.TopoDSToStep.TopoDSToStep_Tool

        """
        return _TopoDSToStep.TopoDSToStep__AddResult(*args)

    AddResult = staticmethod(AddResult)

    def __init__(self):
        """
        This package implements the mapping between CAS.CAD
        Shape representation and AP214 Shape Representation.
        The target schema is pms_c4 (a subset of AP214)

        How to use this Package :

        Entry point are context dependent. It can be :
        MakeManifoldSolidBrep
        MakeBrepWithVoids
        MakeFacetedBrep
        MakeFacetedBrepAndBrepWithVoids
        MakeShellBasedSurfaceModel
        Each of these classes call the Builder
        The class tool centralizes some common informations.
        """
        this = _TopoDSToStep.new_TopoDSToStep_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_
TopoDSToStep__swigregister = _TopoDSToStep.TopoDSToStep__swigregister
TopoDSToStep__swigregister(TopoDSToStep_)

def TopoDSToStep__DecodeBuilderError(*args):
    """
    TopoDSToStep__DecodeBuilderError(TopoDSToStep_BuilderError const E) -> Handle_TCollection_HAsciiString

    :type E: OCC.wrapper.TopoDSToStep.TopoDSToStep_BuilderError
    :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

    """
    return _TopoDSToStep.TopoDSToStep__DecodeBuilderError(*args)

def TopoDSToStep__DecodeFaceError(*args):
    """
    TopoDSToStep__DecodeFaceError(TopoDSToStep_MakeFaceError const E) -> Handle_TCollection_HAsciiString

    :type E: OCC.wrapper.TopoDSToStep.TopoDSToStep_MakeFaceError
    :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

    """
    return _TopoDSToStep.TopoDSToStep__DecodeFaceError(*args)

def TopoDSToStep__DecodeWireError(*args):
    """
    TopoDSToStep__DecodeWireError(TopoDSToStep_MakeWireError const E) -> Handle_TCollection_HAsciiString

    :type E: OCC.wrapper.TopoDSToStep.TopoDSToStep_MakeWireError
    :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

    """
    return _TopoDSToStep.TopoDSToStep__DecodeWireError(*args)

def TopoDSToStep__DecodeEdgeError(*args):
    """
    TopoDSToStep__DecodeEdgeError(TopoDSToStep_MakeEdgeError const E) -> Handle_TCollection_HAsciiString

    :type E: OCC.wrapper.TopoDSToStep.TopoDSToStep_MakeEdgeError
    :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

    """
    return _TopoDSToStep.TopoDSToStep__DecodeEdgeError(*args)

def TopoDSToStep__DecodeVertexError(*args):
    """
    TopoDSToStep__DecodeVertexError(TopoDSToStep_MakeVertexError const E) -> Handle_TCollection_HAsciiString

    Returns a new shape without undirect surfaces.

    :type E: OCC.wrapper.TopoDSToStep.TopoDSToStep_MakeVertexError
    :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

    """
    return _TopoDSToStep.TopoDSToStep__DecodeVertexError(*args)

def TopoDSToStep__AddResult(*args):
    """
    AddResult(Handle_Transfer_FinderProcess FP, TopoDS_Shape Shape, Handle_Standard_Transient entity)
    TopoDSToStep__AddResult(Handle_Transfer_FinderProcess FP, TopoDSToStep_Tool Tool)

    Adds all entities recorded in Tool into the map of results
    (binders) stored in FinderProcess

    :type FP: OCC.wrapper.Transfer.Handle_Transfer_FinderProcess
    :type Tool: OCC.wrapper.TopoDSToStep.TopoDSToStep_Tool

    """
    return _TopoDSToStep.TopoDSToStep__AddResult(*args)

class TopoDSToStep_FacetedTool(object):
    """
    This Tool Class provides Information about Faceted Shapes
    to be mapped to STEP.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CheckTopoDSShape(*args):
        """
        CheckTopoDSShape(TopoDS_Shape SH) -> TopoDSToStep_FacetedError

        :type SH: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TopoDSToStep.TopoDSToStep_FacetedError

        """
        return _TopoDSToStep.TopoDSToStep_FacetedTool_CheckTopoDSShape(*args)

    CheckTopoDSShape = staticmethod(CheckTopoDSShape)

    def __init__(self):
        """
        This Tool Class provides Information about Faceted Shapes
        to be mapped to STEP.
        """
        this = _TopoDSToStep.new_TopoDSToStep_FacetedTool()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_FacetedTool
TopoDSToStep_FacetedTool_swigregister = _TopoDSToStep.TopoDSToStep_FacetedTool_swigregister
TopoDSToStep_FacetedTool_swigregister(TopoDSToStep_FacetedTool)

def TopoDSToStep_FacetedTool_CheckTopoDSShape(*args):
    """
    TopoDSToStep_FacetedTool_CheckTopoDSShape(TopoDS_Shape SH) -> TopoDSToStep_FacetedError

    :type SH: OCC.wrapper.TopoDS.TopoDS_Shape
    :rtype: OCC.wrapper.TopoDSToStep.TopoDSToStep_FacetedError

    """
    return _TopoDSToStep.TopoDSToStep_FacetedTool_CheckTopoDSShape(*args)

class TopoDSToStep_MakeBrepWithVoids(TopoDSToStep_Root):
    """
    This class implements the mapping between classes
    Solid from TopoDS and BrepWithVoids from
    StepShape. All the topology and geometry comprised
    into the shell or the solid are taken into account and
    translated.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopoDSToStep_MakeBrepWithVoids self, TopoDS_Solid S, Handle_Transfer_FinderProcess FP) -> TopoDSToStep_MakeBrepWithVoids

        :type S: OCC.wrapper.TopoDS.TopoDS_Solid
        :type FP: OCC.wrapper.Transfer.Handle_Transfer_FinderProcess

        """
        this = _TopoDSToStep.new_TopoDSToStep_MakeBrepWithVoids(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        :rtype: OCC.wrapper.StepShape.Handle_StepShape_BrepWithVoids

        """
        res = _TopoDSToStep.TopoDSToStep_MakeBrepWithVoids_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_MakeBrepWithVoids
TopoDSToStep_MakeBrepWithVoids_swigregister = _TopoDSToStep.TopoDSToStep_MakeBrepWithVoids_swigregister
TopoDSToStep_MakeBrepWithVoids_swigregister(TopoDSToStep_MakeBrepWithVoids)

class TopoDSToStep_Tool(object):
    """
    This Tool Class provides Information to build
    a ProSTEP Shape model from a Cas.Cad BRep.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopoDSToStep_Tool self) -> TopoDSToStep_Tool
        __init__(TopoDSToStep_Tool self, NCollection_DataMap_TopoDS_Shape_Handle_Standard_Transient_TopTools_ShapeMapHasher M, Standard_Boolean const FacetedContext) -> TopoDSToStep_Tool

        :type M: OCC.wrapper.MoniTool.MoniTool_DataMapOfShapeTransient
        :type FacetedContext: bool

        """
        this = _TopoDSToStep.new_TopoDSToStep_Tool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(TopoDSToStep_Tool self, NCollection_DataMap_TopoDS_Shape_Handle_Standard_Transient_TopTools_ShapeMapHasher M, Standard_Boolean const FacetedContext)

        :type M: OCC.wrapper.MoniTool.MoniTool_DataMapOfShapeTransient
        :type FacetedContext: bool

        """
        return _TopoDSToStep.TopoDSToStep_Tool_Init(self, *args)


    def IsBound(self, *args):
        """
        IsBound(TopoDSToStep_Tool self, TopoDS_Shape S) -> Standard_Boolean

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopoDSToStep.TopoDSToStep_Tool_IsBound(self, *args)


    def Bind(self, *args):
        """
        Bind(TopoDSToStep_Tool self, TopoDS_Shape S, Handle_StepShape_TopologicalRepresentationItem T)

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type T: OCC.wrapper.StepShape.Handle_StepShape_TopologicalRepresentationItem

        """
        return _TopoDSToStep.TopoDSToStep_Tool_Bind(self, *args)


    def Find(self, *args):
        """
        Find(TopoDSToStep_Tool self, TopoDS_Shape S) -> Handle_StepShape_TopologicalRepresentationItem

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.StepShape.Handle_StepShape_TopologicalRepresentationItem

        """
        return _TopoDSToStep.TopoDSToStep_Tool_Find(self, *args)


    def Faceted(self, *args):
        """
        Faceted(TopoDSToStep_Tool self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopoDSToStep.TopoDSToStep_Tool_Faceted(self, *args)


    def SetCurrentShell(self, *args):
        """
        SetCurrentShell(TopoDSToStep_Tool self, TopoDS_Shell S)

        :type S: OCC.wrapper.TopoDS.TopoDS_Shell

        """
        return _TopoDSToStep.TopoDSToStep_Tool_SetCurrentShell(self, *args)


    def CurrentShell(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shell

        """
        res = _TopoDSToStep.TopoDSToStep_Tool_CurrentShell(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetCurrentFace(self, *args):
        """
        SetCurrentFace(TopoDSToStep_Tool self, TopoDS_Face F)

        :type F: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _TopoDSToStep.TopoDSToStep_Tool_SetCurrentFace(self, *args)


    def CurrentFace(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        res = _TopoDSToStep.TopoDSToStep_Tool_CurrentFace(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetCurrentWire(self, *args):
        """
        SetCurrentWire(TopoDSToStep_Tool self, TopoDS_Wire W)

        :type W: OCC.wrapper.TopoDS.TopoDS_Wire

        """
        return _TopoDSToStep.TopoDSToStep_Tool_SetCurrentWire(self, *args)


    def CurrentWire(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Wire

        """
        res = _TopoDSToStep.TopoDSToStep_Tool_CurrentWire(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetCurrentEdge(self, *args):
        """
        SetCurrentEdge(TopoDSToStep_Tool self, TopoDS_Edge E)

        :type E: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _TopoDSToStep.TopoDSToStep_Tool_SetCurrentEdge(self, *args)


    def CurrentEdge(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        res = _TopoDSToStep.TopoDSToStep_Tool_CurrentEdge(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetCurrentVertex(self, *args):
        """
        SetCurrentVertex(TopoDSToStep_Tool self, TopoDS_Vertex V)

        :type V: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _TopoDSToStep.TopoDSToStep_Tool_SetCurrentVertex(self, *args)


    def CurrentVertex(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        res = _TopoDSToStep.TopoDSToStep_Tool_CurrentVertex(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Lowest3DTolerance(self, *args):
        """
        Lowest3DTolerance(TopoDSToStep_Tool self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _TopoDSToStep.TopoDSToStep_Tool_Lowest3DTolerance(self, *args)


    def SetSurfaceReversed(self, *args):
        """
        SetSurfaceReversed(TopoDSToStep_Tool self, Standard_Boolean const B)

        :type B: bool

        """
        return _TopoDSToStep.TopoDSToStep_Tool_SetSurfaceReversed(self, *args)


    def SurfaceReversed(self, *args):
        """
        SurfaceReversed(TopoDSToStep_Tool self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopoDSToStep.TopoDSToStep_Tool_SurfaceReversed(self, *args)


    def Map(self, *args):
        """
        :rtype: OCC.wrapper.MoniTool.MoniTool_DataMapOfShapeTransient

        """
        res = _TopoDSToStep.TopoDSToStep_Tool_Map(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PCurveMode(self, *args):
        """
        PCurveMode(TopoDSToStep_Tool self) -> Standard_Integer

        Returns mode for writing pcurves
        (initialized by parameter write.surfacecurve.mode)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopoDSToStep.TopoDSToStep_Tool_PCurveMode(self, *args)

    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_Tool
TopoDSToStep_Tool_swigregister = _TopoDSToStep.TopoDSToStep_Tool_swigregister
TopoDSToStep_Tool_swigregister(TopoDSToStep_Tool)

class TopoDSToStep_MakeManifoldSolidBrep(TopoDSToStep_Root):
    """
    This class implements the mapping between classes
    Shell or Solid from TopoDS and ManifoldSolidBrep from
    StepShape. All the topology and geometry comprised
    into the shell or the solid are taken into account and
    translated.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopoDSToStep_MakeManifoldSolidBrep self, TopoDS_Shell S, Handle_Transfer_FinderProcess FP) -> TopoDSToStep_MakeManifoldSolidBrep
        __init__(TopoDSToStep_MakeManifoldSolidBrep self, TopoDS_Solid S, Handle_Transfer_FinderProcess FP) -> TopoDSToStep_MakeManifoldSolidBrep

        :type S: OCC.wrapper.TopoDS.TopoDS_Solid
        :type FP: OCC.wrapper.Transfer.Handle_Transfer_FinderProcess

        """
        this = _TopoDSToStep.new_TopoDSToStep_MakeManifoldSolidBrep(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        :rtype: OCC.wrapper.StepShape.Handle_StepShape_ManifoldSolidBrep

        """
        res = _TopoDSToStep.TopoDSToStep_MakeManifoldSolidBrep_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_MakeManifoldSolidBrep
TopoDSToStep_MakeManifoldSolidBrep_swigregister = _TopoDSToStep.TopoDSToStep_MakeManifoldSolidBrep_swigregister
TopoDSToStep_MakeManifoldSolidBrep_swigregister(TopoDSToStep_MakeManifoldSolidBrep)

class TopoDSToStep_Builder(TopoDSToStep_Root):
    """
    This builder Class provides services to build
    a ProSTEP Shape model from a Cas.Cad BRep.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopoDSToStep_Builder self) -> TopoDSToStep_Builder
        __init__(TopoDSToStep_Builder self, TopoDS_Shape S, TopoDSToStep_Tool T, Handle_Transfer_FinderProcess FP) -> TopoDSToStep_Builder

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type T: OCC.wrapper.TopoDSToStep.TopoDSToStep_Tool
        :type FP: OCC.wrapper.Transfer.Handle_Transfer_FinderProcess

        """
        this = _TopoDSToStep.new_TopoDSToStep_Builder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(TopoDSToStep_Builder self, TopoDS_Shape S, TopoDSToStep_Tool T, Handle_Transfer_FinderProcess FP)

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type T: OCC.wrapper.TopoDSToStep.TopoDSToStep_Tool
        :type FP: OCC.wrapper.Transfer.Handle_Transfer_FinderProcess

        """
        return _TopoDSToStep.TopoDSToStep_Builder_Init(self, *args)


    def Error(self, *args):
        """
        Error(TopoDSToStep_Builder self) -> TopoDSToStep_BuilderError

        :rtype: OCC.wrapper.TopoDSToStep.TopoDSToStep_BuilderError

        """
        return _TopoDSToStep.TopoDSToStep_Builder_Error(self, *args)


    def Value(self, *args):
        """
        :rtype: OCC.wrapper.StepShape.Handle_StepShape_TopologicalRepresentationItem

        """
        res = _TopoDSToStep.TopoDSToStep_Builder_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_Builder
TopoDSToStep_Builder_swigregister = _TopoDSToStep.TopoDSToStep_Builder_swigregister
TopoDSToStep_Builder_swigregister(TopoDSToStep_Builder)

class TopoDSToStep_MakeFacetedBrepAndBrepWithVoids(TopoDSToStep_Root):
    """
    This class implements the mapping between classes
    Solid from TopoDS and FacetedBrepAndBrepWithVoids from
    StepShape. All the topology and geometry comprised
    into the shell or the solid are taken into account and
    translated.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopoDSToStep_MakeFacetedBrepAndBrepWithVoids self, TopoDS_Solid S, Handle_Transfer_FinderProcess FP) -> TopoDSToStep_MakeFacetedBrepAndBrepWithVoids

        :type S: OCC.wrapper.TopoDS.TopoDS_Solid
        :type FP: OCC.wrapper.Transfer.Handle_Transfer_FinderProcess

        """
        this = _TopoDSToStep.new_TopoDSToStep_MakeFacetedBrepAndBrepWithVoids(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        :rtype: OCC.wrapper.StepShape.Handle_StepShape_FacetedBrepAndBrepWithVoids

        """
        res = _TopoDSToStep.TopoDSToStep_MakeFacetedBrepAndBrepWithVoids_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_MakeFacetedBrepAndBrepWithVoids
TopoDSToStep_MakeFacetedBrepAndBrepWithVoids_swigregister = _TopoDSToStep.TopoDSToStep_MakeFacetedBrepAndBrepWithVoids_swigregister
TopoDSToStep_MakeFacetedBrepAndBrepWithVoids_swigregister(TopoDSToStep_MakeFacetedBrepAndBrepWithVoids)

class TopoDSToStep_MakeStepEdge(TopoDSToStep_Root):
    """
    This class implements the mapping between classes
    Edge from TopoDS and TopologicalRepresentationItem from
    StepShape.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopoDSToStep_MakeStepEdge self) -> TopoDSToStep_MakeStepEdge
        __init__(TopoDSToStep_MakeStepEdge self, TopoDS_Edge E, TopoDSToStep_Tool T, Handle_Transfer_FinderProcess FP) -> TopoDSToStep_MakeStepEdge

        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :type T: OCC.wrapper.TopoDSToStep.TopoDSToStep_Tool
        :type FP: OCC.wrapper.Transfer.Handle_Transfer_FinderProcess

        """
        this = _TopoDSToStep.new_TopoDSToStep_MakeStepEdge(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(TopoDSToStep_MakeStepEdge self, TopoDS_Edge E, TopoDSToStep_Tool T, Handle_Transfer_FinderProcess FP)

        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :type T: OCC.wrapper.TopoDSToStep.TopoDSToStep_Tool
        :type FP: OCC.wrapper.Transfer.Handle_Transfer_FinderProcess

        """
        return _TopoDSToStep.TopoDSToStep_MakeStepEdge_Init(self, *args)


    def Value(self, *args):
        """
        :rtype: OCC.wrapper.StepShape.Handle_StepShape_TopologicalRepresentationItem

        """
        res = _TopoDSToStep.TopoDSToStep_MakeStepEdge_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Error(self, *args):
        """
        Error(TopoDSToStep_MakeStepEdge self) -> TopoDSToStep_MakeEdgeError

        :rtype: OCC.wrapper.TopoDSToStep.TopoDSToStep_MakeEdgeError

        """
        return _TopoDSToStep.TopoDSToStep_MakeStepEdge_Error(self, *args)

    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_MakeStepEdge
TopoDSToStep_MakeStepEdge_swigregister = _TopoDSToStep.TopoDSToStep_MakeStepEdge_swigregister
TopoDSToStep_MakeStepEdge_swigregister(TopoDSToStep_MakeStepEdge)

class TopoDSToStep_MakeFacetedBrep(TopoDSToStep_Root):
    """
    This class implements the mapping between classes
    Shell or Solid from TopoDS and FacetedBrep from
    StepShape. All the topology and geometry comprised
    into the shell or the solid are taken into account and
    translated.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopoDSToStep_MakeFacetedBrep self, TopoDS_Shell S, Handle_Transfer_FinderProcess FP) -> TopoDSToStep_MakeFacetedBrep
        __init__(TopoDSToStep_MakeFacetedBrep self, TopoDS_Solid S, Handle_Transfer_FinderProcess FP) -> TopoDSToStep_MakeFacetedBrep

        :type S: OCC.wrapper.TopoDS.TopoDS_Solid
        :type FP: OCC.wrapper.Transfer.Handle_Transfer_FinderProcess

        """
        this = _TopoDSToStep.new_TopoDSToStep_MakeFacetedBrep(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        :rtype: OCC.wrapper.StepShape.Handle_StepShape_FacetedBrep

        """
        res = _TopoDSToStep.TopoDSToStep_MakeFacetedBrep_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_MakeFacetedBrep
TopoDSToStep_MakeFacetedBrep_swigregister = _TopoDSToStep.TopoDSToStep_MakeFacetedBrep_swigregister
TopoDSToStep_MakeFacetedBrep_swigregister(TopoDSToStep_MakeFacetedBrep)

class TopoDSToStep_MakeGeometricCurveSet(TopoDSToStep_Root):
    """
    This class implements the mapping between a Shape
    from TopoDS and a GeometricCurveSet from StepShape in order
    to create a GeometricallyBoundedWireframeRepresentation.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopoDSToStep_MakeGeometricCurveSet self, TopoDS_Shape SH, Handle_Transfer_FinderProcess FP) -> TopoDSToStep_MakeGeometricCurveSet

        :type SH: OCC.wrapper.TopoDS.TopoDS_Shape
        :type FP: OCC.wrapper.Transfer.Handle_Transfer_FinderProcess

        """
        this = _TopoDSToStep.new_TopoDSToStep_MakeGeometricCurveSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        :rtype: OCC.wrapper.StepShape.Handle_StepShape_GeometricCurveSet

        """
        res = _TopoDSToStep.TopoDSToStep_MakeGeometricCurveSet_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_MakeGeometricCurveSet
TopoDSToStep_MakeGeometricCurveSet_swigregister = _TopoDSToStep.TopoDSToStep_MakeGeometricCurveSet_swigregister
TopoDSToStep_MakeGeometricCurveSet_swigregister(TopoDSToStep_MakeGeometricCurveSet)

class TopoDSToStep_MakeShellBasedSurfaceModel(TopoDSToStep_Root):
    """
    This class implements the mapping between classes
    Face, Shell or Solid from TopoDS and ShellBasedSurfaceModel
    from StepShape. All the topology and geometry comprised
    into the shape are taken into account and translated.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopoDSToStep_MakeShellBasedSurfaceModel self, TopoDS_Face F, Handle_Transfer_FinderProcess FP) -> TopoDSToStep_MakeShellBasedSurfaceModel
        __init__(TopoDSToStep_MakeShellBasedSurfaceModel self, TopoDS_Shell S, Handle_Transfer_FinderProcess FP) -> TopoDSToStep_MakeShellBasedSurfaceModel
        __init__(TopoDSToStep_MakeShellBasedSurfaceModel self, TopoDS_Solid S, Handle_Transfer_FinderProcess FP) -> TopoDSToStep_MakeShellBasedSurfaceModel

        :type S: OCC.wrapper.TopoDS.TopoDS_Solid
        :type FP: OCC.wrapper.Transfer.Handle_Transfer_FinderProcess

        """
        this = _TopoDSToStep.new_TopoDSToStep_MakeShellBasedSurfaceModel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        :rtype: OCC.wrapper.StepShape.Handle_StepShape_ShellBasedSurfaceModel

        """
        res = _TopoDSToStep.TopoDSToStep_MakeShellBasedSurfaceModel_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_MakeShellBasedSurfaceModel
TopoDSToStep_MakeShellBasedSurfaceModel_swigregister = _TopoDSToStep.TopoDSToStep_MakeShellBasedSurfaceModel_swigregister
TopoDSToStep_MakeShellBasedSurfaceModel_swigregister(TopoDSToStep_MakeShellBasedSurfaceModel)

class TopoDSToStep_MakeStepFace(TopoDSToStep_Root):
    """
    This class implements the mapping between classes
    Face from TopoDS and TopologicalRepresentationItem from
    StepShape.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopoDSToStep_MakeStepFace self) -> TopoDSToStep_MakeStepFace
        __init__(TopoDSToStep_MakeStepFace self, TopoDS_Face F, TopoDSToStep_Tool T, Handle_Transfer_FinderProcess FP) -> TopoDSToStep_MakeStepFace

        :type F: OCC.wrapper.TopoDS.TopoDS_Face
        :type T: OCC.wrapper.TopoDSToStep.TopoDSToStep_Tool
        :type FP: OCC.wrapper.Transfer.Handle_Transfer_FinderProcess

        """
        this = _TopoDSToStep.new_TopoDSToStep_MakeStepFace(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(TopoDSToStep_MakeStepFace self, TopoDS_Face F, TopoDSToStep_Tool T, Handle_Transfer_FinderProcess FP)

        :type F: OCC.wrapper.TopoDS.TopoDS_Face
        :type T: OCC.wrapper.TopoDSToStep.TopoDSToStep_Tool
        :type FP: OCC.wrapper.Transfer.Handle_Transfer_FinderProcess

        """
        return _TopoDSToStep.TopoDSToStep_MakeStepFace_Init(self, *args)


    def Value(self, *args):
        """
        :rtype: OCC.wrapper.StepShape.Handle_StepShape_TopologicalRepresentationItem

        """
        res = _TopoDSToStep.TopoDSToStep_MakeStepFace_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Error(self, *args):
        """
        Error(TopoDSToStep_MakeStepFace self) -> TopoDSToStep_MakeFaceError

        :rtype: OCC.wrapper.TopoDSToStep.TopoDSToStep_MakeFaceError

        """
        return _TopoDSToStep.TopoDSToStep_MakeStepFace_Error(self, *args)

    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_MakeStepFace
TopoDSToStep_MakeStepFace_swigregister = _TopoDSToStep.TopoDSToStep_MakeStepFace_swigregister
TopoDSToStep_MakeStepFace_swigregister(TopoDSToStep_MakeStepFace)

class TopoDSToStep_WireframeBuilder(TopoDSToStep_Root):
    """
    This builder Class provides services to build
    a ProSTEP Wireframemodel from a Cas.Cad BRep.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopoDSToStep_WireframeBuilder self) -> TopoDSToStep_WireframeBuilder
        __init__(TopoDSToStep_WireframeBuilder self, TopoDS_Shape S, TopoDSToStep_Tool T, Handle_Transfer_FinderProcess FP) -> TopoDSToStep_WireframeBuilder

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type T: OCC.wrapper.TopoDSToStep.TopoDSToStep_Tool
        :type FP: OCC.wrapper.Transfer.Handle_Transfer_FinderProcess

        """
        this = _TopoDSToStep.new_TopoDSToStep_WireframeBuilder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(TopoDSToStep_WireframeBuilder self, TopoDS_Shape S, TopoDSToStep_Tool T, Handle_Transfer_FinderProcess FP)

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type T: OCC.wrapper.TopoDSToStep.TopoDSToStep_Tool
        :type FP: OCC.wrapper.Transfer.Handle_Transfer_FinderProcess

        """
        return _TopoDSToStep.TopoDSToStep_WireframeBuilder_Init(self, *args)


    def Error(self, *args):
        """
        Error(TopoDSToStep_WireframeBuilder self) -> TopoDSToStep_BuilderError

        :rtype: OCC.wrapper.TopoDSToStep.TopoDSToStep_BuilderError

        """
        return _TopoDSToStep.TopoDSToStep_WireframeBuilder_Error(self, *args)


    def Value(self, *args):
        """
        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfTransient

        """
        res = _TopoDSToStep.TopoDSToStep_WireframeBuilder_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetTrimmedCurveFromEdge(self, *args):
        """
        GetTrimmedCurveFromEdge(TopoDSToStep_WireframeBuilder self, TopoDS_Edge E, TopoDS_Face F, NCollection_DataMap_TopoDS_Shape_Handle_Standard_Transient_TopTools_ShapeMapHasher M, Handle_TColStd_HSequenceOfTransient L) -> Standard_Boolean

        Extraction of Trimmed Curves from TopoDS_Edge for the
        Creation of a GeometricallyBoundedWireframeRepresentation

        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :type F: OCC.wrapper.TopoDS.TopoDS_Face
        :type M: OCC.wrapper.MoniTool.MoniTool_DataMapOfShapeTransient
        :type L: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfTransient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopoDSToStep.TopoDSToStep_WireframeBuilder_GetTrimmedCurveFromEdge(self, *args)


    def GetTrimmedCurveFromFace(self, *args):
        """
        GetTrimmedCurveFromFace(TopoDSToStep_WireframeBuilder self, TopoDS_Face F, NCollection_DataMap_TopoDS_Shape_Handle_Standard_Transient_TopTools_ShapeMapHasher M, Handle_TColStd_HSequenceOfTransient L) -> Standard_Boolean

        Extraction of Trimmed Curves from TopoDS_Face for the
        Creation of a GeometricallyBoundedWireframeRepresentation

        :type F: OCC.wrapper.TopoDS.TopoDS_Face
        :type M: OCC.wrapper.MoniTool.MoniTool_DataMapOfShapeTransient
        :type L: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfTransient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopoDSToStep.TopoDSToStep_WireframeBuilder_GetTrimmedCurveFromFace(self, *args)


    def GetTrimmedCurveFromShape(self, *args):
        """
        GetTrimmedCurveFromShape(TopoDSToStep_WireframeBuilder self, TopoDS_Shape S, NCollection_DataMap_TopoDS_Shape_Handle_Standard_Transient_TopTools_ShapeMapHasher M, Handle_TColStd_HSequenceOfTransient L) -> Standard_Boolean

        Extraction of Trimmed Curves from any TopoDS_Shape for the
        Creation of a GeometricallyBoundedWireframeRepresentation

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type M: OCC.wrapper.MoniTool.MoniTool_DataMapOfShapeTransient
        :type L: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfTransient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopoDSToStep.TopoDSToStep_WireframeBuilder_GetTrimmedCurveFromShape(self, *args)

    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_WireframeBuilder
TopoDSToStep_WireframeBuilder_swigregister = _TopoDSToStep.TopoDSToStep_WireframeBuilder_swigregister
TopoDSToStep_WireframeBuilder_swigregister(TopoDSToStep_WireframeBuilder)

class TopoDSToStep_MakeStepWire(TopoDSToStep_Root):
    """
    This class implements the mapping between classes
    Wire from TopoDS and TopologicalRepresentationItem from
    StepShape.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopoDSToStep_MakeStepWire self) -> TopoDSToStep_MakeStepWire
        __init__(TopoDSToStep_MakeStepWire self, TopoDS_Wire W, TopoDSToStep_Tool T, Handle_Transfer_FinderProcess FP) -> TopoDSToStep_MakeStepWire

        :type W: OCC.wrapper.TopoDS.TopoDS_Wire
        :type T: OCC.wrapper.TopoDSToStep.TopoDSToStep_Tool
        :type FP: OCC.wrapper.Transfer.Handle_Transfer_FinderProcess

        """
        this = _TopoDSToStep.new_TopoDSToStep_MakeStepWire(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(TopoDSToStep_MakeStepWire self, TopoDS_Wire W, TopoDSToStep_Tool T, Handle_Transfer_FinderProcess FP)

        :type W: OCC.wrapper.TopoDS.TopoDS_Wire
        :type T: OCC.wrapper.TopoDSToStep.TopoDSToStep_Tool
        :type FP: OCC.wrapper.Transfer.Handle_Transfer_FinderProcess

        """
        return _TopoDSToStep.TopoDSToStep_MakeStepWire_Init(self, *args)


    def Value(self, *args):
        """
        :rtype: OCC.wrapper.StepShape.Handle_StepShape_TopologicalRepresentationItem

        """
        res = _TopoDSToStep.TopoDSToStep_MakeStepWire_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Error(self, *args):
        """
        Error(TopoDSToStep_MakeStepWire self) -> TopoDSToStep_MakeWireError

        :rtype: OCC.wrapper.TopoDSToStep.TopoDSToStep_MakeWireError

        """
        return _TopoDSToStep.TopoDSToStep_MakeStepWire_Error(self, *args)

    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_MakeStepWire
TopoDSToStep_MakeStepWire_swigregister = _TopoDSToStep.TopoDSToStep_MakeStepWire_swigregister
TopoDSToStep_MakeStepWire_swigregister(TopoDSToStep_MakeStepWire)

class TopoDSToStep_MakeStepVertex(TopoDSToStep_Root):
    """
    This class implements the mapping between classes
    Vertex from TopoDS and TopologicalRepresentationItem from
    StepShape.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopoDSToStep_MakeStepVertex self) -> TopoDSToStep_MakeStepVertex
        __init__(TopoDSToStep_MakeStepVertex self, TopoDS_Vertex V, TopoDSToStep_Tool T, Handle_Transfer_FinderProcess FP) -> TopoDSToStep_MakeStepVertex

        :type V: OCC.wrapper.TopoDS.TopoDS_Vertex
        :type T: OCC.wrapper.TopoDSToStep.TopoDSToStep_Tool
        :type FP: OCC.wrapper.Transfer.Handle_Transfer_FinderProcess

        """
        this = _TopoDSToStep.new_TopoDSToStep_MakeStepVertex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(TopoDSToStep_MakeStepVertex self, TopoDS_Vertex V, TopoDSToStep_Tool T, Handle_Transfer_FinderProcess FP)

        :type V: OCC.wrapper.TopoDS.TopoDS_Vertex
        :type T: OCC.wrapper.TopoDSToStep.TopoDSToStep_Tool
        :type FP: OCC.wrapper.Transfer.Handle_Transfer_FinderProcess

        """
        return _TopoDSToStep.TopoDSToStep_MakeStepVertex_Init(self, *args)


    def Value(self, *args):
        """
        :rtype: OCC.wrapper.StepShape.Handle_StepShape_TopologicalRepresentationItem

        """
        res = _TopoDSToStep.TopoDSToStep_MakeStepVertex_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Error(self, *args):
        """
        Error(TopoDSToStep_MakeStepVertex self) -> TopoDSToStep_MakeVertexError

        :rtype: OCC.wrapper.TopoDSToStep.TopoDSToStep_MakeVertexError

        """
        return _TopoDSToStep.TopoDSToStep_MakeStepVertex_Error(self, *args)

    __swig_destroy__ = _TopoDSToStep.delete_TopoDSToStep_MakeStepVertex
TopoDSToStep_MakeStepVertex_swigregister = _TopoDSToStep.TopoDSToStep_MakeStepVertex_swigregister
TopoDSToStep_MakeStepVertex_swigregister(TopoDSToStep_MakeStepVertex)



