# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_GccInt')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_GccInt')
    _GccInt = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GccInt', [dirname(__file__)])
        except ImportError:
            import _GccInt
            return _GccInt
        try:
            _mod = imp.load_module('_GccInt', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _GccInt = swig_import_helper()
    del swig_import_helper
else:
    import _GccInt
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GccInt.delete_SwigPyIterator

    def value(self):
        return _GccInt.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _GccInt.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _GccInt.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _GccInt.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _GccInt.SwigPyIterator_equal(self, x)

    def copy(self):
        return _GccInt.SwigPyIterator_copy(self)

    def next(self):
        return _GccInt.SwigPyIterator_next(self)

    def __next__(self):
        return _GccInt.SwigPyIterator___next__(self)

    def previous(self):
        return _GccInt.SwigPyIterator_previous(self)

    def advance(self, n):
        return _GccInt.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _GccInt.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _GccInt.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _GccInt.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _GccInt.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _GccInt.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _GccInt.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _GccInt.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _GccInt.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_GccInt.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _GccInt.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _GccInt.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GccInt.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _GccInt.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _GccInt.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _GccInt.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _GccInt.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_GccInt.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _GccInt.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _GccInt.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GccInt.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _GccInt.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _GccInt.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _GccInt.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _GccInt.ptr_to_number(item)
ptr_to_number = _GccInt.ptr_to_number

def HashCode(*args):
    return _GccInt.HashCode(*args)
HashCode = _GccInt.HashCode

def ptr_equal(a, b):
    return _GccInt.ptr_equal(a, b)
ptr_equal = _GccInt.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
GccInt_Lin = _GccInt.GccInt_Lin
GccInt_Cir = _GccInt.GccInt_Cir
GccInt_Ell = _GccInt.GccInt_Ell
GccInt_Par = _GccInt.GccInt_Par
GccInt_Hpr = _GccInt.GccInt_Hpr
GccInt_Pnt = _GccInt.GccInt_Pnt
class GccInt_Bisec(Standard.Standard_Transient):
    """
    The deferred class GccInt_Bisec is the root class for
    elementary bisecting loci between two simple geometric
    objects (i.e. circles, lines or points).
    Bisecting loci between two geometric objects are such
    that each of their points is at the same distance from the
    two geometric objects. It is typically a curve, such as a
    line, circle or conic.
    Generally there is more than one elementary object
    which is the solution to a bisecting loci problem: each
    solution is described with one elementary bisecting
    locus. For example, the bisectors of two secant straight
    lines are two perpendicular straight lines.
    The GccInt package provides concrete implementations
    of the following elementary derived bisecting loci:
    -   lines, circles, ellipses, hyperbolas and parabolas, and
    -   points (not used in this context).
    The GccAna package provides numerous algorithms for
    computing the bisecting loci between circles, lines or
    points, whose solutions are these types of elementary bisecting locus.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_GccInt_Bisec
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_GccInt_Bisec(self) 
            return h


    def ArcType(self, *args):
        """
        ArcType(GccInt_Bisec self) -> GccInt_IType

        Returns the type of bisecting object (line, circle,
        parabola, hyperbola, ellipse, point).

        :rtype: OCC.wrapper.GccInt.GccInt_IType

        """
        return _GccInt.GccInt_Bisec_ArcType(self, *args)


    def Point(self, *args):
        """
        Point(GccInt_Bisec self) -> gp_Pnt2d

        Returns the bisecting line when ArcType returns Pnt.
        An exception DomainError is raised if ArcType is not a Pnt.

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _GccInt.GccInt_Bisec_Point(self, *args)


    def Line(self, *args):
        """
        Line(GccInt_Bisec self) -> gp_Lin2d

        Returns the bisecting line when ArcType returns Lin.
        An exception DomainError is raised if ArcType is not a Lin.

        :rtype: OCC.wrapper.gp.gp_Lin2d

        """
        return _GccInt.GccInt_Bisec_Line(self, *args)


    def Circle(self, *args):
        """
        Circle(GccInt_Bisec self) -> gp_Circ2d

        Returns the bisecting line when ArcType returns Cir.
        An exception DomainError is raised if ArcType is not a Cir.

        :rtype: OCC.wrapper.gp.gp_Circ2d

        """
        return _GccInt.GccInt_Bisec_Circle(self, *args)


    def Hyperbola(self, *args):
        """
        Hyperbola(GccInt_Bisec self) -> gp_Hypr2d

        Returns the bisecting line when ArcType returns Hpr.
        An exception DomainError is raised if ArcType is not a Hpr.

        :rtype: OCC.wrapper.gp.gp_Hypr2d

        """
        return _GccInt.GccInt_Bisec_Hyperbola(self, *args)


    def Parabola(self, *args):
        """
        Parabola(GccInt_Bisec self) -> gp_Parab2d

        Returns the bisecting line when ArcType returns Par.
        An exception DomainError is raised if ArcType is not a Par.

        :rtype: OCC.wrapper.gp.gp_Parab2d

        """
        return _GccInt.GccInt_Bisec_Parabola(self, *args)


    def Ellipse(self, *args):
        """
        Ellipse(GccInt_Bisec self) -> gp_Elips2d

        Returns the bisecting line when ArcType returns Ell.
        An exception DomainError is raised if ArcType is not an Ell.

        :rtype: OCC.wrapper.gp.gp_Elips2d

        """
        return _GccInt.GccInt_Bisec_Ellipse(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _GccInt.GccInt_Bisec_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _GccInt.GccInt_Bisec_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GccInt.GccInt_Bisec_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GccInt.delete_GccInt_Bisec
GccInt_Bisec_swigregister = _GccInt.GccInt_Bisec_swigregister
GccInt_Bisec_swigregister(GccInt_Bisec)

def GccInt_Bisec_get_type_name(*args):
    """
    GccInt_Bisec_get_type_name() -> char const *

    :rtype: const char *

    """
    return _GccInt.GccInt_Bisec_get_type_name(*args)

def GccInt_Bisec_get_type_descriptor(*args):
    """
    GccInt_Bisec_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _GccInt.GccInt_Bisec_get_type_descriptor(*args)

class GccInt_BHyper(GccInt_Bisec):
    """
    Describes a hyperbola as a bisecting curve between two
    2D geometric objects (such as circles or points).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_GccInt_BHyper
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_GccInt_BHyper(self) 
            return h


    def __init__(self, *args):
        """
        __init__(GccInt_BHyper self, gp_Hypr2d Hyper) -> GccInt_BHyper

        Constructs a bisecting curve whose geometry is the 2D hyperbola Hyper.

        :type Hyper: OCC.wrapper.gp.gp_Hypr2d

        """
        this = _GccInt.new_GccInt_BHyper(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Hyperbola(self, *args):
        """
        Hyperbola(GccInt_BHyper self) -> gp_Hypr2d

        Returns a 2D hyperbola which is the geometry of this bisecting curve.

        :rtype: OCC.wrapper.gp.gp_Hypr2d

        """
        return _GccInt.GccInt_BHyper_Hyperbola(self, *args)


    def ArcType(self, *args):
        """
        ArcType(GccInt_BHyper self) -> GccInt_IType

        Returns GccInt_Hpr, which is the type of any GccInt_BHyper bisecting curve.

        :rtype: OCC.wrapper.GccInt.GccInt_IType

        """
        return _GccInt.GccInt_BHyper_ArcType(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _GccInt.GccInt_BHyper_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _GccInt.GccInt_BHyper_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GccInt.GccInt_BHyper_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GccInt.delete_GccInt_BHyper
GccInt_BHyper_swigregister = _GccInt.GccInt_BHyper_swigregister
GccInt_BHyper_swigregister(GccInt_BHyper)

def GccInt_BHyper_get_type_name(*args):
    """
    GccInt_BHyper_get_type_name() -> char const *

    :rtype: const char *

    """
    return _GccInt.GccInt_BHyper_get_type_name(*args)

def GccInt_BHyper_get_type_descriptor(*args):
    """
    GccInt_BHyper_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _GccInt.GccInt_BHyper_get_type_descriptor(*args)

class GccInt_BParab(GccInt_Bisec):
    """
    Describes a parabola as a bisecting curve between two
    2D geometric objects (such as lines, circles or points).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_GccInt_BParab
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_GccInt_BParab(self) 
            return h


    def __init__(self, *args):
        """
        __init__(GccInt_BParab self, gp_Parab2d Parab) -> GccInt_BParab

        Constructs a bisecting curve whose geometry is the 2D parabola Parab.

        :type Parab: OCC.wrapper.gp.gp_Parab2d

        """
        this = _GccInt.new_GccInt_BParab(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Parabola(self, *args):
        """
        Parabola(GccInt_BParab self) -> gp_Parab2d

        Returns a 2D parabola which is the geometry of this bisecting curve.

        :rtype: OCC.wrapper.gp.gp_Parab2d

        """
        return _GccInt.GccInt_BParab_Parabola(self, *args)


    def ArcType(self, *args):
        """
        ArcType(GccInt_BParab self) -> GccInt_IType

        Returns GccInt_Par, which is the type of any GccInt_BParab bisecting curve.

        :rtype: OCC.wrapper.GccInt.GccInt_IType

        """
        return _GccInt.GccInt_BParab_ArcType(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _GccInt.GccInt_BParab_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _GccInt.GccInt_BParab_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GccInt.GccInt_BParab_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GccInt.delete_GccInt_BParab
GccInt_BParab_swigregister = _GccInt.GccInt_BParab_swigregister
GccInt_BParab_swigregister(GccInt_BParab)

def GccInt_BParab_get_type_name(*args):
    """
    GccInt_BParab_get_type_name() -> char const *

    :rtype: const char *

    """
    return _GccInt.GccInt_BParab_get_type_name(*args)

def GccInt_BParab_get_type_descriptor(*args):
    """
    GccInt_BParab_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _GccInt.GccInt_BParab_get_type_descriptor(*args)

class GccInt_BElips(GccInt_Bisec):
    """
    Describes an ellipse as a bisecting curve between two
    2D geometric objects (such as circles or points).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_GccInt_BElips
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_GccInt_BElips(self) 
            return h


    def __init__(self, *args):
        """
        __init__(GccInt_BElips self, gp_Elips2d Ellipse) -> GccInt_BElips

        Constructs a bisecting curve whose geometry is the 2D ellipse Ellipse.

        :type Ellipse: OCC.wrapper.gp.gp_Elips2d

        """
        this = _GccInt.new_GccInt_BElips(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Ellipse(self, *args):
        """
        Ellipse(GccInt_BElips self) -> gp_Elips2d

        Returns a 2D ellipse which is the geometry of this bisecting curve.

        :rtype: OCC.wrapper.gp.gp_Elips2d

        """
        return _GccInt.GccInt_BElips_Ellipse(self, *args)


    def ArcType(self, *args):
        """
        ArcType(GccInt_BElips self) -> GccInt_IType

        Returns GccInt_Ell, which is the type of any GccInt_BElips bisecting curve.

        :rtype: OCC.wrapper.GccInt.GccInt_IType

        """
        return _GccInt.GccInt_BElips_ArcType(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _GccInt.GccInt_BElips_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _GccInt.GccInt_BElips_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GccInt.GccInt_BElips_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GccInt.delete_GccInt_BElips
GccInt_BElips_swigregister = _GccInt.GccInt_BElips_swigregister
GccInt_BElips_swigregister(GccInt_BElips)

def GccInt_BElips_get_type_name(*args):
    """
    GccInt_BElips_get_type_name() -> char const *

    :rtype: const char *

    """
    return _GccInt.GccInt_BElips_get_type_name(*args)

def GccInt_BElips_get_type_descriptor(*args):
    """
    GccInt_BElips_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _GccInt.GccInt_BElips_get_type_descriptor(*args)

class Handle_GccInt_BHyper(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_GccInt_BHyper self)

        Nullify the handle


        """
        return _GccInt.Handle_GccInt_BHyper_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_GccInt_BHyper self) -> bool

        Check for being null

        :rtype: bool

        """
        return _GccInt.Handle_GccInt_BHyper_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_GccInt_BHyper self, GccInt_BHyper thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _GccInt.Handle_GccInt_BHyper_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_GccInt_BHyper self, Handle_GccInt_BHyper theHandle) -> Handle_GccInt_BHyper
        assign(Handle_GccInt_BHyper self, GccInt_BHyper thePtr) -> Handle_GccInt_BHyper
        assign(Handle_GccInt_BHyper self, Handle_GccInt_BHyper theHandle) -> Handle_GccInt_BHyper

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _GccInt.Handle_GccInt_BHyper_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_GccInt_BHyper self) -> GccInt_BHyper

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _GccInt.Handle_GccInt_BHyper_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_GccInt_BHyper self) -> GccInt_BHyper

        Member access operator (note non-const)

        :rtype: T *

        """
        return _GccInt.Handle_GccInt_BHyper___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_GccInt_BHyper self) -> GccInt_BHyper

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _GccInt.Handle_GccInt_BHyper___ref__(self, *args)


    def __hash__(self):
        return _GccInt.Handle_GccInt_BHyper___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _GccInt.Handle_GccInt_BHyper___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _GccInt.new_Handle_GccInt_BHyper(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_GccInt.Handle_GccInt_BHyper_DownCast)
    __swig_destroy__ = _GccInt.delete_Handle_GccInt_BHyper

    def Hyperbola(self, *args):
        """
        Hyperbola(Handle_GccInt_BHyper self) -> gp_Hypr2d

        Returns a 2D hyperbola which is the geometry of this bisecting curve.

        :rtype: OCC.wrapper.gp.gp_Hypr2d

        """
        return _GccInt.Handle_GccInt_BHyper_Hyperbola(self, *args)


    def ArcType(self, *args):
        """
        ArcType(Handle_GccInt_BHyper self) -> GccInt_IType

        Returns GccInt_Hpr, which is the type of any GccInt_BHyper bisecting curve.

        :rtype: OCC.wrapper.GccInt.GccInt_IType

        """
        return _GccInt.Handle_GccInt_BHyper_ArcType(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_GccInt_BHyper self) -> char const *

        :rtype: const char *

        """
        return _GccInt.Handle_GccInt_BHyper_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GccInt.Handle_GccInt_BHyper_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GccInt.Handle_GccInt_BHyper_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Point(self, *args):
        """
        Point(Handle_GccInt_BHyper self) -> gp_Pnt2d

        Returns the bisecting line when ArcType returns Pnt.
        An exception DomainError is raised if ArcType is not a Pnt.

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _GccInt.Handle_GccInt_BHyper_Point(self, *args)


    def Line(self, *args):
        """
        Line(Handle_GccInt_BHyper self) -> gp_Lin2d

        Returns the bisecting line when ArcType returns Lin.
        An exception DomainError is raised if ArcType is not a Lin.

        :rtype: OCC.wrapper.gp.gp_Lin2d

        """
        return _GccInt.Handle_GccInt_BHyper_Line(self, *args)


    def Circle(self, *args):
        """
        Circle(Handle_GccInt_BHyper self) -> gp_Circ2d

        Returns the bisecting line when ArcType returns Cir.
        An exception DomainError is raised if ArcType is not a Cir.

        :rtype: OCC.wrapper.gp.gp_Circ2d

        """
        return _GccInt.Handle_GccInt_BHyper_Circle(self, *args)


    def Parabola(self, *args):
        """
        Parabola(Handle_GccInt_BHyper self) -> gp_Parab2d

        Returns the bisecting line when ArcType returns Par.
        An exception DomainError is raised if ArcType is not a Par.

        :rtype: OCC.wrapper.gp.gp_Parab2d

        """
        return _GccInt.Handle_GccInt_BHyper_Parabola(self, *args)


    def Ellipse(self, *args):
        """
        Ellipse(Handle_GccInt_BHyper self) -> gp_Elips2d

        Returns the bisecting line when ArcType returns Ell.
        An exception DomainError is raised if ArcType is not an Ell.

        :rtype: OCC.wrapper.gp.gp_Elips2d

        """
        return _GccInt.Handle_GccInt_BHyper_Ellipse(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_GccInt_BHyper self)

        Memory deallocator for transient classes


        """
        return _GccInt.Handle_GccInt_BHyper_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_GccInt_BHyper self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_GccInt_BHyper self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GccInt.Handle_GccInt_BHyper_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_GccInt_BHyper self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_GccInt_BHyper self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GccInt.Handle_GccInt_BHyper_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_GccInt_BHyper self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _GccInt.Handle_GccInt_BHyper_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_GccInt_BHyper self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GccInt.Handle_GccInt_BHyper_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_GccInt_BHyper self)

        Increments the reference counter of this object


        """
        return _GccInt.Handle_GccInt_BHyper_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_GccInt_BHyper self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GccInt.Handle_GccInt_BHyper_DecrementRefCounter(self, *args)

Handle_GccInt_BHyper_swigregister = _GccInt.Handle_GccInt_BHyper_swigregister
Handle_GccInt_BHyper_swigregister(Handle_GccInt_BHyper)

def Handle_GccInt_BHyper_DownCast(thing):
    return _GccInt.Handle_GccInt_BHyper_DownCast(thing)
Handle_GccInt_BHyper_DownCast = _GccInt.Handle_GccInt_BHyper_DownCast

class GccInt_BPoint(GccInt_Bisec):
    """Describes a point as a bisecting object between two 2D geometric objects."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_GccInt_BPoint
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_GccInt_BPoint(self) 
            return h


    def __init__(self, *args):
        """
        __init__(GccInt_BPoint self, gp_Pnt2d Point) -> GccInt_BPoint

        Constructs a bisecting object whose geometry is the 2D point Point.

        :type Point: OCC.wrapper.gp.gp_Pnt2d

        """
        this = _GccInt.new_GccInt_BPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Point(self, *args):
        """
        Point(GccInt_BPoint self) -> gp_Pnt2d

        Returns a 2D point which is the geometry of this bisecting object.

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _GccInt.GccInt_BPoint_Point(self, *args)


    def ArcType(self, *args):
        """
        ArcType(GccInt_BPoint self) -> GccInt_IType

        Returns GccInt_Pnt, which is the type of any GccInt_BPoint bisecting object.

        :rtype: OCC.wrapper.GccInt.GccInt_IType

        """
        return _GccInt.GccInt_BPoint_ArcType(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _GccInt.GccInt_BPoint_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _GccInt.GccInt_BPoint_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GccInt.GccInt_BPoint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GccInt.delete_GccInt_BPoint
GccInt_BPoint_swigregister = _GccInt.GccInt_BPoint_swigregister
GccInt_BPoint_swigregister(GccInt_BPoint)

def GccInt_BPoint_get_type_name(*args):
    """
    GccInt_BPoint_get_type_name() -> char const *

    :rtype: const char *

    """
    return _GccInt.GccInt_BPoint_get_type_name(*args)

def GccInt_BPoint_get_type_descriptor(*args):
    """
    GccInt_BPoint_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _GccInt.GccInt_BPoint_get_type_descriptor(*args)

class Handle_GccInt_Bisec(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_GccInt_Bisec self)

        Nullify the handle


        """
        return _GccInt.Handle_GccInt_Bisec_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_GccInt_Bisec self) -> bool

        Check for being null

        :rtype: bool

        """
        return _GccInt.Handle_GccInt_Bisec_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_GccInt_Bisec self, GccInt_Bisec thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _GccInt.Handle_GccInt_Bisec_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_GccInt_Bisec self, Handle_GccInt_Bisec theHandle) -> Handle_GccInt_Bisec
        assign(Handle_GccInt_Bisec self, GccInt_Bisec thePtr) -> Handle_GccInt_Bisec
        assign(Handle_GccInt_Bisec self, Handle_GccInt_Bisec theHandle) -> Handle_GccInt_Bisec

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _GccInt.Handle_GccInt_Bisec_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_GccInt_Bisec self) -> GccInt_Bisec

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _GccInt.Handle_GccInt_Bisec_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_GccInt_Bisec self) -> GccInt_Bisec

        Member access operator (note non-const)

        :rtype: T *

        """
        return _GccInt.Handle_GccInt_Bisec___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_GccInt_Bisec self) -> GccInt_Bisec

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _GccInt.Handle_GccInt_Bisec___ref__(self, *args)


    def __hash__(self):
        return _GccInt.Handle_GccInt_Bisec___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _GccInt.Handle_GccInt_Bisec___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _GccInt.new_Handle_GccInt_Bisec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_GccInt.Handle_GccInt_Bisec_DownCast)
    __swig_destroy__ = _GccInt.delete_Handle_GccInt_Bisec

    def ArcType(self, *args):
        """
        ArcType(Handle_GccInt_Bisec self) -> GccInt_IType

        Returns the type of bisecting object (line, circle,
        parabola, hyperbola, ellipse, point).

        :rtype: OCC.wrapper.GccInt.GccInt_IType

        """
        return _GccInt.Handle_GccInt_Bisec_ArcType(self, *args)


    def Point(self, *args):
        """
        Point(Handle_GccInt_Bisec self) -> gp_Pnt2d

        Returns the bisecting line when ArcType returns Pnt.
        An exception DomainError is raised if ArcType is not a Pnt.

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _GccInt.Handle_GccInt_Bisec_Point(self, *args)


    def Line(self, *args):
        """
        Line(Handle_GccInt_Bisec self) -> gp_Lin2d

        Returns the bisecting line when ArcType returns Lin.
        An exception DomainError is raised if ArcType is not a Lin.

        :rtype: OCC.wrapper.gp.gp_Lin2d

        """
        return _GccInt.Handle_GccInt_Bisec_Line(self, *args)


    def Circle(self, *args):
        """
        Circle(Handle_GccInt_Bisec self) -> gp_Circ2d

        Returns the bisecting line when ArcType returns Cir.
        An exception DomainError is raised if ArcType is not a Cir.

        :rtype: OCC.wrapper.gp.gp_Circ2d

        """
        return _GccInt.Handle_GccInt_Bisec_Circle(self, *args)


    def Hyperbola(self, *args):
        """
        Hyperbola(Handle_GccInt_Bisec self) -> gp_Hypr2d

        Returns the bisecting line when ArcType returns Hpr.
        An exception DomainError is raised if ArcType is not a Hpr.

        :rtype: OCC.wrapper.gp.gp_Hypr2d

        """
        return _GccInt.Handle_GccInt_Bisec_Hyperbola(self, *args)


    def Parabola(self, *args):
        """
        Parabola(Handle_GccInt_Bisec self) -> gp_Parab2d

        Returns the bisecting line when ArcType returns Par.
        An exception DomainError is raised if ArcType is not a Par.

        :rtype: OCC.wrapper.gp.gp_Parab2d

        """
        return _GccInt.Handle_GccInt_Bisec_Parabola(self, *args)


    def Ellipse(self, *args):
        """
        Ellipse(Handle_GccInt_Bisec self) -> gp_Elips2d

        Returns the bisecting line when ArcType returns Ell.
        An exception DomainError is raised if ArcType is not an Ell.

        :rtype: OCC.wrapper.gp.gp_Elips2d

        """
        return _GccInt.Handle_GccInt_Bisec_Ellipse(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_GccInt_Bisec self) -> char const *

        :rtype: const char *

        """
        return _GccInt.Handle_GccInt_Bisec_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GccInt.Handle_GccInt_Bisec_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GccInt.Handle_GccInt_Bisec_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_GccInt_Bisec self)

        Memory deallocator for transient classes


        """
        return _GccInt.Handle_GccInt_Bisec_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_GccInt_Bisec self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_GccInt_Bisec self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GccInt.Handle_GccInt_Bisec_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_GccInt_Bisec self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_GccInt_Bisec self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GccInt.Handle_GccInt_Bisec_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_GccInt_Bisec self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _GccInt.Handle_GccInt_Bisec_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_GccInt_Bisec self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GccInt.Handle_GccInt_Bisec_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_GccInt_Bisec self)

        Increments the reference counter of this object


        """
        return _GccInt.Handle_GccInt_Bisec_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_GccInt_Bisec self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GccInt.Handle_GccInt_Bisec_DecrementRefCounter(self, *args)

Handle_GccInt_Bisec_swigregister = _GccInt.Handle_GccInt_Bisec_swigregister
Handle_GccInt_Bisec_swigregister(Handle_GccInt_Bisec)

def Handle_GccInt_Bisec_DownCast(thing):
    return _GccInt.Handle_GccInt_Bisec_DownCast(thing)
Handle_GccInt_Bisec_DownCast = _GccInt.Handle_GccInt_Bisec_DownCast

class GccInt_BLine(GccInt_Bisec):
    """
    Describes a line as a bisecting curve between two 2D
    geometric objects (such as lines, circles or points).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_GccInt_BLine
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_GccInt_BLine(self) 
            return h


    def __init__(self, *args):
        """
        __init__(GccInt_BLine self, gp_Lin2d Line) -> GccInt_BLine

        Constructs a bisecting line whose geometry is the 2D line Line.

        :type Line: OCC.wrapper.gp.gp_Lin2d

        """
        this = _GccInt.new_GccInt_BLine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Line(self, *args):
        """
        Line(GccInt_BLine self) -> gp_Lin2d

        Returns a 2D line which is the geometry of this bisecting line.

        :rtype: OCC.wrapper.gp.gp_Lin2d

        """
        return _GccInt.GccInt_BLine_Line(self, *args)


    def ArcType(self, *args):
        """
        ArcType(GccInt_BLine self) -> GccInt_IType

        Returns GccInt_Lin, which is the type of any GccInt_BLine bisecting line.

        :rtype: OCC.wrapper.GccInt.GccInt_IType

        """
        return _GccInt.GccInt_BLine_ArcType(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _GccInt.GccInt_BLine_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _GccInt.GccInt_BLine_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GccInt.GccInt_BLine_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GccInt.delete_GccInt_BLine
GccInt_BLine_swigregister = _GccInt.GccInt_BLine_swigregister
GccInt_BLine_swigregister(GccInt_BLine)

def GccInt_BLine_get_type_name(*args):
    """
    GccInt_BLine_get_type_name() -> char const *

    :rtype: const char *

    """
    return _GccInt.GccInt_BLine_get_type_name(*args)

def GccInt_BLine_get_type_descriptor(*args):
    """
    GccInt_BLine_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _GccInt.GccInt_BLine_get_type_descriptor(*args)

class Handle_GccInt_BElips(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_GccInt_BElips self)

        Nullify the handle


        """
        return _GccInt.Handle_GccInt_BElips_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_GccInt_BElips self) -> bool

        Check for being null

        :rtype: bool

        """
        return _GccInt.Handle_GccInt_BElips_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_GccInt_BElips self, GccInt_BElips thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _GccInt.Handle_GccInt_BElips_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_GccInt_BElips self, Handle_GccInt_BElips theHandle) -> Handle_GccInt_BElips
        assign(Handle_GccInt_BElips self, GccInt_BElips thePtr) -> Handle_GccInt_BElips
        assign(Handle_GccInt_BElips self, Handle_GccInt_BElips theHandle) -> Handle_GccInt_BElips

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _GccInt.Handle_GccInt_BElips_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_GccInt_BElips self) -> GccInt_BElips

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _GccInt.Handle_GccInt_BElips_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_GccInt_BElips self) -> GccInt_BElips

        Member access operator (note non-const)

        :rtype: T *

        """
        return _GccInt.Handle_GccInt_BElips___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_GccInt_BElips self) -> GccInt_BElips

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _GccInt.Handle_GccInt_BElips___ref__(self, *args)


    def __hash__(self):
        return _GccInt.Handle_GccInt_BElips___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _GccInt.Handle_GccInt_BElips___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _GccInt.new_Handle_GccInt_BElips(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_GccInt.Handle_GccInt_BElips_DownCast)
    __swig_destroy__ = _GccInt.delete_Handle_GccInt_BElips

    def Ellipse(self, *args):
        """
        Ellipse(Handle_GccInt_BElips self) -> gp_Elips2d

        Returns a 2D ellipse which is the geometry of this bisecting curve.

        :rtype: OCC.wrapper.gp.gp_Elips2d

        """
        return _GccInt.Handle_GccInt_BElips_Ellipse(self, *args)


    def ArcType(self, *args):
        """
        ArcType(Handle_GccInt_BElips self) -> GccInt_IType

        Returns GccInt_Ell, which is the type of any GccInt_BElips bisecting curve.

        :rtype: OCC.wrapper.GccInt.GccInt_IType

        """
        return _GccInt.Handle_GccInt_BElips_ArcType(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_GccInt_BElips self) -> char const *

        :rtype: const char *

        """
        return _GccInt.Handle_GccInt_BElips_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GccInt.Handle_GccInt_BElips_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GccInt.Handle_GccInt_BElips_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Point(self, *args):
        """
        Point(Handle_GccInt_BElips self) -> gp_Pnt2d

        Returns the bisecting line when ArcType returns Pnt.
        An exception DomainError is raised if ArcType is not a Pnt.

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _GccInt.Handle_GccInt_BElips_Point(self, *args)


    def Line(self, *args):
        """
        Line(Handle_GccInt_BElips self) -> gp_Lin2d

        Returns the bisecting line when ArcType returns Lin.
        An exception DomainError is raised if ArcType is not a Lin.

        :rtype: OCC.wrapper.gp.gp_Lin2d

        """
        return _GccInt.Handle_GccInt_BElips_Line(self, *args)


    def Circle(self, *args):
        """
        Circle(Handle_GccInt_BElips self) -> gp_Circ2d

        Returns the bisecting line when ArcType returns Cir.
        An exception DomainError is raised if ArcType is not a Cir.

        :rtype: OCC.wrapper.gp.gp_Circ2d

        """
        return _GccInt.Handle_GccInt_BElips_Circle(self, *args)


    def Hyperbola(self, *args):
        """
        Hyperbola(Handle_GccInt_BElips self) -> gp_Hypr2d

        Returns the bisecting line when ArcType returns Hpr.
        An exception DomainError is raised if ArcType is not a Hpr.

        :rtype: OCC.wrapper.gp.gp_Hypr2d

        """
        return _GccInt.Handle_GccInt_BElips_Hyperbola(self, *args)


    def Parabola(self, *args):
        """
        Parabola(Handle_GccInt_BElips self) -> gp_Parab2d

        Returns the bisecting line when ArcType returns Par.
        An exception DomainError is raised if ArcType is not a Par.

        :rtype: OCC.wrapper.gp.gp_Parab2d

        """
        return _GccInt.Handle_GccInt_BElips_Parabola(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_GccInt_BElips self)

        Memory deallocator for transient classes


        """
        return _GccInt.Handle_GccInt_BElips_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_GccInt_BElips self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_GccInt_BElips self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GccInt.Handle_GccInt_BElips_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_GccInt_BElips self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_GccInt_BElips self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GccInt.Handle_GccInt_BElips_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_GccInt_BElips self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _GccInt.Handle_GccInt_BElips_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_GccInt_BElips self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GccInt.Handle_GccInt_BElips_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_GccInt_BElips self)

        Increments the reference counter of this object


        """
        return _GccInt.Handle_GccInt_BElips_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_GccInt_BElips self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GccInt.Handle_GccInt_BElips_DecrementRefCounter(self, *args)

Handle_GccInt_BElips_swigregister = _GccInt.Handle_GccInt_BElips_swigregister
Handle_GccInt_BElips_swigregister(Handle_GccInt_BElips)

def Handle_GccInt_BElips_DownCast(thing):
    return _GccInt.Handle_GccInt_BElips_DownCast(thing)
Handle_GccInt_BElips_DownCast = _GccInt.Handle_GccInt_BElips_DownCast

class Handle_GccInt_BParab(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_GccInt_BParab self)

        Nullify the handle


        """
        return _GccInt.Handle_GccInt_BParab_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_GccInt_BParab self) -> bool

        Check for being null

        :rtype: bool

        """
        return _GccInt.Handle_GccInt_BParab_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_GccInt_BParab self, GccInt_BParab thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _GccInt.Handle_GccInt_BParab_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_GccInt_BParab self, Handle_GccInt_BParab theHandle) -> Handle_GccInt_BParab
        assign(Handle_GccInt_BParab self, GccInt_BParab thePtr) -> Handle_GccInt_BParab
        assign(Handle_GccInt_BParab self, Handle_GccInt_BParab theHandle) -> Handle_GccInt_BParab

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _GccInt.Handle_GccInt_BParab_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_GccInt_BParab self) -> GccInt_BParab

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _GccInt.Handle_GccInt_BParab_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_GccInt_BParab self) -> GccInt_BParab

        Member access operator (note non-const)

        :rtype: T *

        """
        return _GccInt.Handle_GccInt_BParab___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_GccInt_BParab self) -> GccInt_BParab

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _GccInt.Handle_GccInt_BParab___ref__(self, *args)


    def __hash__(self):
        return _GccInt.Handle_GccInt_BParab___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _GccInt.Handle_GccInt_BParab___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _GccInt.new_Handle_GccInt_BParab(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_GccInt.Handle_GccInt_BParab_DownCast)
    __swig_destroy__ = _GccInt.delete_Handle_GccInt_BParab

    def Parabola(self, *args):
        """
        Parabola(Handle_GccInt_BParab self) -> gp_Parab2d

        Returns a 2D parabola which is the geometry of this bisecting curve.

        :rtype: OCC.wrapper.gp.gp_Parab2d

        """
        return _GccInt.Handle_GccInt_BParab_Parabola(self, *args)


    def ArcType(self, *args):
        """
        ArcType(Handle_GccInt_BParab self) -> GccInt_IType

        Returns GccInt_Par, which is the type of any GccInt_BParab bisecting curve.

        :rtype: OCC.wrapper.GccInt.GccInt_IType

        """
        return _GccInt.Handle_GccInt_BParab_ArcType(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_GccInt_BParab self) -> char const *

        :rtype: const char *

        """
        return _GccInt.Handle_GccInt_BParab_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GccInt.Handle_GccInt_BParab_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GccInt.Handle_GccInt_BParab_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Point(self, *args):
        """
        Point(Handle_GccInt_BParab self) -> gp_Pnt2d

        Returns the bisecting line when ArcType returns Pnt.
        An exception DomainError is raised if ArcType is not a Pnt.

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _GccInt.Handle_GccInt_BParab_Point(self, *args)


    def Line(self, *args):
        """
        Line(Handle_GccInt_BParab self) -> gp_Lin2d

        Returns the bisecting line when ArcType returns Lin.
        An exception DomainError is raised if ArcType is not a Lin.

        :rtype: OCC.wrapper.gp.gp_Lin2d

        """
        return _GccInt.Handle_GccInt_BParab_Line(self, *args)


    def Circle(self, *args):
        """
        Circle(Handle_GccInt_BParab self) -> gp_Circ2d

        Returns the bisecting line when ArcType returns Cir.
        An exception DomainError is raised if ArcType is not a Cir.

        :rtype: OCC.wrapper.gp.gp_Circ2d

        """
        return _GccInt.Handle_GccInt_BParab_Circle(self, *args)


    def Hyperbola(self, *args):
        """
        Hyperbola(Handle_GccInt_BParab self) -> gp_Hypr2d

        Returns the bisecting line when ArcType returns Hpr.
        An exception DomainError is raised if ArcType is not a Hpr.

        :rtype: OCC.wrapper.gp.gp_Hypr2d

        """
        return _GccInt.Handle_GccInt_BParab_Hyperbola(self, *args)


    def Ellipse(self, *args):
        """
        Ellipse(Handle_GccInt_BParab self) -> gp_Elips2d

        Returns the bisecting line when ArcType returns Ell.
        An exception DomainError is raised if ArcType is not an Ell.

        :rtype: OCC.wrapper.gp.gp_Elips2d

        """
        return _GccInt.Handle_GccInt_BParab_Ellipse(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_GccInt_BParab self)

        Memory deallocator for transient classes


        """
        return _GccInt.Handle_GccInt_BParab_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_GccInt_BParab self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_GccInt_BParab self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GccInt.Handle_GccInt_BParab_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_GccInt_BParab self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_GccInt_BParab self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GccInt.Handle_GccInt_BParab_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_GccInt_BParab self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _GccInt.Handle_GccInt_BParab_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_GccInt_BParab self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GccInt.Handle_GccInt_BParab_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_GccInt_BParab self)

        Increments the reference counter of this object


        """
        return _GccInt.Handle_GccInt_BParab_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_GccInt_BParab self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GccInt.Handle_GccInt_BParab_DecrementRefCounter(self, *args)

Handle_GccInt_BParab_swigregister = _GccInt.Handle_GccInt_BParab_swigregister
Handle_GccInt_BParab_swigregister(Handle_GccInt_BParab)

def Handle_GccInt_BParab_DownCast(thing):
    return _GccInt.Handle_GccInt_BParab_DownCast(thing)
Handle_GccInt_BParab_DownCast = _GccInt.Handle_GccInt_BParab_DownCast

class GccInt_BCirc(GccInt_Bisec):
    """
    Describes a circle as a bisecting curve between two 2D
    geometric objects (such as circles or points).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_GccInt_BCirc
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_GccInt_BCirc(self) 
            return h


    def __init__(self, *args):
        """
        __init__(GccInt_BCirc self, gp_Circ2d Circ) -> GccInt_BCirc

        Constructs a bisecting curve whose geometry is the 2D circle Circ.

        :type Circ: OCC.wrapper.gp.gp_Circ2d

        """
        this = _GccInt.new_GccInt_BCirc(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Circle(self, *args):
        """
        Circle(GccInt_BCirc self) -> gp_Circ2d

        Returns a 2D circle which is the geometry of this bisecting curve.

        :rtype: OCC.wrapper.gp.gp_Circ2d

        """
        return _GccInt.GccInt_BCirc_Circle(self, *args)


    def ArcType(self, *args):
        """
        ArcType(GccInt_BCirc self) -> GccInt_IType

        Returns GccInt_Cir, which is the type of any GccInt_BCirc bisecting curve.

        :rtype: OCC.wrapper.GccInt.GccInt_IType

        """
        return _GccInt.GccInt_BCirc_ArcType(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _GccInt.GccInt_BCirc_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _GccInt.GccInt_BCirc_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GccInt.GccInt_BCirc_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GccInt.delete_GccInt_BCirc
GccInt_BCirc_swigregister = _GccInt.GccInt_BCirc_swigregister
GccInt_BCirc_swigregister(GccInt_BCirc)

def GccInt_BCirc_get_type_name(*args):
    """
    GccInt_BCirc_get_type_name() -> char const *

    :rtype: const char *

    """
    return _GccInt.GccInt_BCirc_get_type_name(*args)

def GccInt_BCirc_get_type_descriptor(*args):
    """
    GccInt_BCirc_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _GccInt.GccInt_BCirc_get_type_descriptor(*args)

class Handle_GccInt_BLine(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_GccInt_BLine self)

        Nullify the handle


        """
        return _GccInt.Handle_GccInt_BLine_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_GccInt_BLine self) -> bool

        Check for being null

        :rtype: bool

        """
        return _GccInt.Handle_GccInt_BLine_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_GccInt_BLine self, GccInt_BLine thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _GccInt.Handle_GccInt_BLine_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_GccInt_BLine self, Handle_GccInt_BLine theHandle) -> Handle_GccInt_BLine
        assign(Handle_GccInt_BLine self, GccInt_BLine thePtr) -> Handle_GccInt_BLine
        assign(Handle_GccInt_BLine self, Handle_GccInt_BLine theHandle) -> Handle_GccInt_BLine

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _GccInt.Handle_GccInt_BLine_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_GccInt_BLine self) -> GccInt_BLine

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _GccInt.Handle_GccInt_BLine_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_GccInt_BLine self) -> GccInt_BLine

        Member access operator (note non-const)

        :rtype: T *

        """
        return _GccInt.Handle_GccInt_BLine___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_GccInt_BLine self) -> GccInt_BLine

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _GccInt.Handle_GccInt_BLine___ref__(self, *args)


    def __hash__(self):
        return _GccInt.Handle_GccInt_BLine___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _GccInt.Handle_GccInt_BLine___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _GccInt.new_Handle_GccInt_BLine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_GccInt.Handle_GccInt_BLine_DownCast)
    __swig_destroy__ = _GccInt.delete_Handle_GccInt_BLine

    def Line(self, *args):
        """
        Line(Handle_GccInt_BLine self) -> gp_Lin2d

        Returns a 2D line which is the geometry of this bisecting line.

        :rtype: OCC.wrapper.gp.gp_Lin2d

        """
        return _GccInt.Handle_GccInt_BLine_Line(self, *args)


    def ArcType(self, *args):
        """
        ArcType(Handle_GccInt_BLine self) -> GccInt_IType

        Returns GccInt_Lin, which is the type of any GccInt_BLine bisecting line.

        :rtype: OCC.wrapper.GccInt.GccInt_IType

        """
        return _GccInt.Handle_GccInt_BLine_ArcType(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_GccInt_BLine self) -> char const *

        :rtype: const char *

        """
        return _GccInt.Handle_GccInt_BLine_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GccInt.Handle_GccInt_BLine_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GccInt.Handle_GccInt_BLine_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Point(self, *args):
        """
        Point(Handle_GccInt_BLine self) -> gp_Pnt2d

        Returns the bisecting line when ArcType returns Pnt.
        An exception DomainError is raised if ArcType is not a Pnt.

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _GccInt.Handle_GccInt_BLine_Point(self, *args)


    def Circle(self, *args):
        """
        Circle(Handle_GccInt_BLine self) -> gp_Circ2d

        Returns the bisecting line when ArcType returns Cir.
        An exception DomainError is raised if ArcType is not a Cir.

        :rtype: OCC.wrapper.gp.gp_Circ2d

        """
        return _GccInt.Handle_GccInt_BLine_Circle(self, *args)


    def Hyperbola(self, *args):
        """
        Hyperbola(Handle_GccInt_BLine self) -> gp_Hypr2d

        Returns the bisecting line when ArcType returns Hpr.
        An exception DomainError is raised if ArcType is not a Hpr.

        :rtype: OCC.wrapper.gp.gp_Hypr2d

        """
        return _GccInt.Handle_GccInt_BLine_Hyperbola(self, *args)


    def Parabola(self, *args):
        """
        Parabola(Handle_GccInt_BLine self) -> gp_Parab2d

        Returns the bisecting line when ArcType returns Par.
        An exception DomainError is raised if ArcType is not a Par.

        :rtype: OCC.wrapper.gp.gp_Parab2d

        """
        return _GccInt.Handle_GccInt_BLine_Parabola(self, *args)


    def Ellipse(self, *args):
        """
        Ellipse(Handle_GccInt_BLine self) -> gp_Elips2d

        Returns the bisecting line when ArcType returns Ell.
        An exception DomainError is raised if ArcType is not an Ell.

        :rtype: OCC.wrapper.gp.gp_Elips2d

        """
        return _GccInt.Handle_GccInt_BLine_Ellipse(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_GccInt_BLine self)

        Memory deallocator for transient classes


        """
        return _GccInt.Handle_GccInt_BLine_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_GccInt_BLine self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_GccInt_BLine self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GccInt.Handle_GccInt_BLine_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_GccInt_BLine self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_GccInt_BLine self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GccInt.Handle_GccInt_BLine_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_GccInt_BLine self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _GccInt.Handle_GccInt_BLine_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_GccInt_BLine self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GccInt.Handle_GccInt_BLine_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_GccInt_BLine self)

        Increments the reference counter of this object


        """
        return _GccInt.Handle_GccInt_BLine_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_GccInt_BLine self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GccInt.Handle_GccInt_BLine_DecrementRefCounter(self, *args)

Handle_GccInt_BLine_swigregister = _GccInt.Handle_GccInt_BLine_swigregister
Handle_GccInt_BLine_swigregister(Handle_GccInt_BLine)

def Handle_GccInt_BLine_DownCast(thing):
    return _GccInt.Handle_GccInt_BLine_DownCast(thing)
Handle_GccInt_BLine_DownCast = _GccInt.Handle_GccInt_BLine_DownCast

class Handle_GccInt_BPoint(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_GccInt_BPoint self)

        Nullify the handle


        """
        return _GccInt.Handle_GccInt_BPoint_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_GccInt_BPoint self) -> bool

        Check for being null

        :rtype: bool

        """
        return _GccInt.Handle_GccInt_BPoint_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_GccInt_BPoint self, GccInt_BPoint thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _GccInt.Handle_GccInt_BPoint_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_GccInt_BPoint self, Handle_GccInt_BPoint theHandle) -> Handle_GccInt_BPoint
        assign(Handle_GccInt_BPoint self, GccInt_BPoint thePtr) -> Handle_GccInt_BPoint
        assign(Handle_GccInt_BPoint self, Handle_GccInt_BPoint theHandle) -> Handle_GccInt_BPoint

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _GccInt.Handle_GccInt_BPoint_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_GccInt_BPoint self) -> GccInt_BPoint

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _GccInt.Handle_GccInt_BPoint_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_GccInt_BPoint self) -> GccInt_BPoint

        Member access operator (note non-const)

        :rtype: T *

        """
        return _GccInt.Handle_GccInt_BPoint___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_GccInt_BPoint self) -> GccInt_BPoint

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _GccInt.Handle_GccInt_BPoint___ref__(self, *args)


    def __hash__(self):
        return _GccInt.Handle_GccInt_BPoint___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _GccInt.Handle_GccInt_BPoint___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _GccInt.new_Handle_GccInt_BPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_GccInt.Handle_GccInt_BPoint_DownCast)
    __swig_destroy__ = _GccInt.delete_Handle_GccInt_BPoint

    def Point(self, *args):
        """
        Point(Handle_GccInt_BPoint self) -> gp_Pnt2d

        Returns a 2D point which is the geometry of this bisecting object.

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _GccInt.Handle_GccInt_BPoint_Point(self, *args)


    def ArcType(self, *args):
        """
        ArcType(Handle_GccInt_BPoint self) -> GccInt_IType

        Returns GccInt_Pnt, which is the type of any GccInt_BPoint bisecting object.

        :rtype: OCC.wrapper.GccInt.GccInt_IType

        """
        return _GccInt.Handle_GccInt_BPoint_ArcType(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_GccInt_BPoint self) -> char const *

        :rtype: const char *

        """
        return _GccInt.Handle_GccInt_BPoint_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GccInt.Handle_GccInt_BPoint_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GccInt.Handle_GccInt_BPoint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Line(self, *args):
        """
        Line(Handle_GccInt_BPoint self) -> gp_Lin2d

        Returns the bisecting line when ArcType returns Lin.
        An exception DomainError is raised if ArcType is not a Lin.

        :rtype: OCC.wrapper.gp.gp_Lin2d

        """
        return _GccInt.Handle_GccInt_BPoint_Line(self, *args)


    def Circle(self, *args):
        """
        Circle(Handle_GccInt_BPoint self) -> gp_Circ2d

        Returns the bisecting line when ArcType returns Cir.
        An exception DomainError is raised if ArcType is not a Cir.

        :rtype: OCC.wrapper.gp.gp_Circ2d

        """
        return _GccInt.Handle_GccInt_BPoint_Circle(self, *args)


    def Hyperbola(self, *args):
        """
        Hyperbola(Handle_GccInt_BPoint self) -> gp_Hypr2d

        Returns the bisecting line when ArcType returns Hpr.
        An exception DomainError is raised if ArcType is not a Hpr.

        :rtype: OCC.wrapper.gp.gp_Hypr2d

        """
        return _GccInt.Handle_GccInt_BPoint_Hyperbola(self, *args)


    def Parabola(self, *args):
        """
        Parabola(Handle_GccInt_BPoint self) -> gp_Parab2d

        Returns the bisecting line when ArcType returns Par.
        An exception DomainError is raised if ArcType is not a Par.

        :rtype: OCC.wrapper.gp.gp_Parab2d

        """
        return _GccInt.Handle_GccInt_BPoint_Parabola(self, *args)


    def Ellipse(self, *args):
        """
        Ellipse(Handle_GccInt_BPoint self) -> gp_Elips2d

        Returns the bisecting line when ArcType returns Ell.
        An exception DomainError is raised if ArcType is not an Ell.

        :rtype: OCC.wrapper.gp.gp_Elips2d

        """
        return _GccInt.Handle_GccInt_BPoint_Ellipse(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_GccInt_BPoint self)

        Memory deallocator for transient classes


        """
        return _GccInt.Handle_GccInt_BPoint_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_GccInt_BPoint self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_GccInt_BPoint self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GccInt.Handle_GccInt_BPoint_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_GccInt_BPoint self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_GccInt_BPoint self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GccInt.Handle_GccInt_BPoint_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_GccInt_BPoint self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _GccInt.Handle_GccInt_BPoint_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_GccInt_BPoint self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GccInt.Handle_GccInt_BPoint_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_GccInt_BPoint self)

        Increments the reference counter of this object


        """
        return _GccInt.Handle_GccInt_BPoint_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_GccInt_BPoint self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GccInt.Handle_GccInt_BPoint_DecrementRefCounter(self, *args)

Handle_GccInt_BPoint_swigregister = _GccInt.Handle_GccInt_BPoint_swigregister
Handle_GccInt_BPoint_swigregister(Handle_GccInt_BPoint)

def Handle_GccInt_BPoint_DownCast(thing):
    return _GccInt.Handle_GccInt_BPoint_DownCast(thing)
Handle_GccInt_BPoint_DownCast = _GccInt.Handle_GccInt_BPoint_DownCast

class Handle_GccInt_BCirc(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_GccInt_BCirc self)

        Nullify the handle


        """
        return _GccInt.Handle_GccInt_BCirc_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_GccInt_BCirc self) -> bool

        Check for being null

        :rtype: bool

        """
        return _GccInt.Handle_GccInt_BCirc_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_GccInt_BCirc self, GccInt_BCirc thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _GccInt.Handle_GccInt_BCirc_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_GccInt_BCirc self, Handle_GccInt_BCirc theHandle) -> Handle_GccInt_BCirc
        assign(Handle_GccInt_BCirc self, GccInt_BCirc thePtr) -> Handle_GccInt_BCirc
        assign(Handle_GccInt_BCirc self, Handle_GccInt_BCirc theHandle) -> Handle_GccInt_BCirc

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _GccInt.Handle_GccInt_BCirc_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_GccInt_BCirc self) -> GccInt_BCirc

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _GccInt.Handle_GccInt_BCirc_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_GccInt_BCirc self) -> GccInt_BCirc

        Member access operator (note non-const)

        :rtype: T *

        """
        return _GccInt.Handle_GccInt_BCirc___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_GccInt_BCirc self) -> GccInt_BCirc

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _GccInt.Handle_GccInt_BCirc___ref__(self, *args)


    def __hash__(self):
        return _GccInt.Handle_GccInt_BCirc___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _GccInt.Handle_GccInt_BCirc___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _GccInt.new_Handle_GccInt_BCirc(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_GccInt.Handle_GccInt_BCirc_DownCast)
    __swig_destroy__ = _GccInt.delete_Handle_GccInt_BCirc

    def Circle(self, *args):
        """
        Circle(Handle_GccInt_BCirc self) -> gp_Circ2d

        Returns a 2D circle which is the geometry of this bisecting curve.

        :rtype: OCC.wrapper.gp.gp_Circ2d

        """
        return _GccInt.Handle_GccInt_BCirc_Circle(self, *args)


    def ArcType(self, *args):
        """
        ArcType(Handle_GccInt_BCirc self) -> GccInt_IType

        Returns GccInt_Cir, which is the type of any GccInt_BCirc bisecting curve.

        :rtype: OCC.wrapper.GccInt.GccInt_IType

        """
        return _GccInt.Handle_GccInt_BCirc_ArcType(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_GccInt_BCirc self) -> char const *

        :rtype: const char *

        """
        return _GccInt.Handle_GccInt_BCirc_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GccInt.Handle_GccInt_BCirc_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GccInt.Handle_GccInt_BCirc_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Point(self, *args):
        """
        Point(Handle_GccInt_BCirc self) -> gp_Pnt2d

        Returns the bisecting line when ArcType returns Pnt.
        An exception DomainError is raised if ArcType is not a Pnt.

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _GccInt.Handle_GccInt_BCirc_Point(self, *args)


    def Line(self, *args):
        """
        Line(Handle_GccInt_BCirc self) -> gp_Lin2d

        Returns the bisecting line when ArcType returns Lin.
        An exception DomainError is raised if ArcType is not a Lin.

        :rtype: OCC.wrapper.gp.gp_Lin2d

        """
        return _GccInt.Handle_GccInt_BCirc_Line(self, *args)


    def Hyperbola(self, *args):
        """
        Hyperbola(Handle_GccInt_BCirc self) -> gp_Hypr2d

        Returns the bisecting line when ArcType returns Hpr.
        An exception DomainError is raised if ArcType is not a Hpr.

        :rtype: OCC.wrapper.gp.gp_Hypr2d

        """
        return _GccInt.Handle_GccInt_BCirc_Hyperbola(self, *args)


    def Parabola(self, *args):
        """
        Parabola(Handle_GccInt_BCirc self) -> gp_Parab2d

        Returns the bisecting line when ArcType returns Par.
        An exception DomainError is raised if ArcType is not a Par.

        :rtype: OCC.wrapper.gp.gp_Parab2d

        """
        return _GccInt.Handle_GccInt_BCirc_Parabola(self, *args)


    def Ellipse(self, *args):
        """
        Ellipse(Handle_GccInt_BCirc self) -> gp_Elips2d

        Returns the bisecting line when ArcType returns Ell.
        An exception DomainError is raised if ArcType is not an Ell.

        :rtype: OCC.wrapper.gp.gp_Elips2d

        """
        return _GccInt.Handle_GccInt_BCirc_Ellipse(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_GccInt_BCirc self)

        Memory deallocator for transient classes


        """
        return _GccInt.Handle_GccInt_BCirc_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_GccInt_BCirc self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_GccInt_BCirc self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GccInt.Handle_GccInt_BCirc_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_GccInt_BCirc self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_GccInt_BCirc self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GccInt.Handle_GccInt_BCirc_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_GccInt_BCirc self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _GccInt.Handle_GccInt_BCirc_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_GccInt_BCirc self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GccInt.Handle_GccInt_BCirc_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_GccInt_BCirc self)

        Increments the reference counter of this object


        """
        return _GccInt.Handle_GccInt_BCirc_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_GccInt_BCirc self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GccInt.Handle_GccInt_BCirc_DecrementRefCounter(self, *args)

Handle_GccInt_BCirc_swigregister = _GccInt.Handle_GccInt_BCirc_swigregister
Handle_GccInt_BCirc_swigregister(Handle_GccInt_BCirc)

def Handle_GccInt_BCirc_DownCast(thing):
    return _GccInt.Handle_GccInt_BCirc_DownCast(thing)
Handle_GccInt_BCirc_DownCast = _GccInt.Handle_GccInt_BCirc_DownCast



