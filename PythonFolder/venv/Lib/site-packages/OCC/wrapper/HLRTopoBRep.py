# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_HLRTopoBRep')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_HLRTopoBRep')
    _HLRTopoBRep = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_HLRTopoBRep', [dirname(__file__)])
        except ImportError:
            import _HLRTopoBRep
            return _HLRTopoBRep
        try:
            _mod = imp.load_module('_HLRTopoBRep', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _HLRTopoBRep = swig_import_helper()
    del swig_import_helper
else:
    import _HLRTopoBRep
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _HLRTopoBRep.delete_SwigPyIterator

    def value(self):
        return _HLRTopoBRep.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _HLRTopoBRep.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _HLRTopoBRep.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _HLRTopoBRep.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _HLRTopoBRep.SwigPyIterator_equal(self, x)

    def copy(self):
        return _HLRTopoBRep.SwigPyIterator_copy(self)

    def next(self):
        return _HLRTopoBRep.SwigPyIterator_next(self)

    def __next__(self):
        return _HLRTopoBRep.SwigPyIterator___next__(self)

    def previous(self):
        return _HLRTopoBRep.SwigPyIterator_previous(self)

    def advance(self, n):
        return _HLRTopoBRep.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _HLRTopoBRep.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _HLRTopoBRep.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _HLRTopoBRep.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _HLRTopoBRep.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _HLRTopoBRep.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _HLRTopoBRep.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _HLRTopoBRep.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _HLRTopoBRep.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_HLRTopoBRep.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _HLRTopoBRep.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _HLRTopoBRep.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _HLRTopoBRep.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _HLRTopoBRep.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _HLRTopoBRep.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _HLRTopoBRep.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _HLRTopoBRep.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_HLRTopoBRep.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _HLRTopoBRep.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _HLRTopoBRep.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _HLRTopoBRep.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _HLRTopoBRep.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _HLRTopoBRep.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _HLRTopoBRep.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _HLRTopoBRep.ptr_to_number(item)
ptr_to_number = _HLRTopoBRep.ptr_to_number

def HashCode(*args):
    return _HLRTopoBRep.HashCode(*args)
HashCode = _HLRTopoBRep.HashCode

def ptr_equal(a, b):
    return _HLRTopoBRep.ptr_equal(a, b)
ptr_equal = _HLRTopoBRep.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import HLRAlgo
else:
    import HLRAlgo
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepTopAdaptor
else:
    import BRepTopAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor2d
else:
    import Adaptor2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor3d
else:
    import Adaptor3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import math
else:
    import math
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepAdaptor
else:
    import BRepAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2dAdaptor
else:
    import Geom2dAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAdaptor
else:
    import GeomAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Contap
else:
    import Contap
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntWalk
else:
    import IntWalk
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntImp
else:
    import IntImp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntSurf
else:
    import IntSurf
del _swig_python_version_info
class HLRTopoBRep_OutLiner(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_HLRTopoBRep_OutLiner
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_HLRTopoBRep_OutLiner(self) 
            return h


    def __init__(self, *args):
        """
        __init__(HLRTopoBRep_OutLiner self) -> HLRTopoBRep_OutLiner
        __init__(HLRTopoBRep_OutLiner self, TopoDS_Shape OriSh) -> HLRTopoBRep_OutLiner
        __init__(HLRTopoBRep_OutLiner self, TopoDS_Shape OriS, TopoDS_Shape OutS) -> HLRTopoBRep_OutLiner

        :type OriS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type OutS: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        this = _HLRTopoBRep.new_HLRTopoBRep_OutLiner(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def OriginalShape(self, *args):
        """
        OriginalShape(HLRTopoBRep_OutLiner self, TopoDS_Shape OriS)
        OriginalShape(HLRTopoBRep_OutLiner self) -> TopoDS_Shape

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _HLRTopoBRep.HLRTopoBRep_OutLiner_OriginalShape(self, *args)


    def OutLinedShape(self, *args):
        """
        OutLinedShape(HLRTopoBRep_OutLiner self, TopoDS_Shape OutS)
        OutLinedShape(HLRTopoBRep_OutLiner self) -> TopoDS_Shape

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _HLRTopoBRep.HLRTopoBRep_OutLiner_OutLinedShape(self, *args)


    def DataStructure(self, *args):
        """
        DataStructure(HLRTopoBRep_OutLiner self) -> HLRTopoBRep_Data

        :rtype: OCC.wrapper.HLRTopoBRep.HLRTopoBRep_Data

        """
        return _HLRTopoBRep.HLRTopoBRep_OutLiner_DataStructure(self, *args)


    def Fill(self, *args):
        """
        Fill(HLRTopoBRep_OutLiner self, HLRAlgo_Projector P, NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher MST, Standard_Integer const nbIso)

        :type P: OCC.wrapper.HLRAlgo.HLRAlgo_Projector
        :type MST: OCC.wrapper.BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool
        :type nbIso: int

        """
        return _HLRTopoBRep.HLRTopoBRep_OutLiner_Fill(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _HLRTopoBRep.HLRTopoBRep_OutLiner_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _HLRTopoBRep.HLRTopoBRep_OutLiner_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRTopoBRep.HLRTopoBRep_OutLiner_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _HLRTopoBRep.delete_HLRTopoBRep_OutLiner
HLRTopoBRep_OutLiner_swigregister = _HLRTopoBRep.HLRTopoBRep_OutLiner_swigregister
HLRTopoBRep_OutLiner_swigregister(HLRTopoBRep_OutLiner)

def HLRTopoBRep_OutLiner_get_type_name(*args):
    """
    HLRTopoBRep_OutLiner_get_type_name() -> char const *

    :rtype: const char *

    """
    return _HLRTopoBRep.HLRTopoBRep_OutLiner_get_type_name(*args)

def HLRTopoBRep_OutLiner_get_type_descriptor(*args):
    """
    HLRTopoBRep_OutLiner_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _HLRTopoBRep.HLRTopoBRep_OutLiner_get_type_descriptor(*args)

class HLRTopoBRep_FaceData(object):
    """
    Contains the  3 ListOfShape of  a Face  ( Internal
    OutLines, OutLines on restriction and IsoLines ).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(HLRTopoBRep_FaceData self) -> HLRTopoBRep_FaceData

        Contains the  3 ListOfShape of  a Face  ( Internal
        OutLines, OutLines on restriction and IsoLines ).
        """
        this = _HLRTopoBRep.new_HLRTopoBRep_FaceData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FaceIntL(self, *args):
        """
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _HLRTopoBRep.HLRTopoBRep_FaceData_FaceIntL(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FaceOutL(self, *args):
        """
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _HLRTopoBRep.HLRTopoBRep_FaceData_FaceOutL(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FaceIsoL(self, *args):
        """
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _HLRTopoBRep.HLRTopoBRep_FaceData_FaceIsoL(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def AddIntL(self, *args):
        """
        AddIntL(HLRTopoBRep_FaceData self) -> NCollection_List_TopoDS_Shape

        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _HLRTopoBRep.HLRTopoBRep_FaceData_AddIntL(self, *args)


    def AddOutL(self, *args):
        """
        AddOutL(HLRTopoBRep_FaceData self) -> NCollection_List_TopoDS_Shape

        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _HLRTopoBRep.HLRTopoBRep_FaceData_AddOutL(self, *args)


    def AddIsoL(self, *args):
        """
        AddIsoL(HLRTopoBRep_FaceData self) -> NCollection_List_TopoDS_Shape

        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _HLRTopoBRep.HLRTopoBRep_FaceData_AddIsoL(self, *args)

    __swig_destroy__ = _HLRTopoBRep.delete_HLRTopoBRep_FaceData
HLRTopoBRep_FaceData_swigregister = _HLRTopoBRep.HLRTopoBRep_FaceData_swigregister
HLRTopoBRep_FaceData_swigregister(HLRTopoBRep_FaceData)

class HLRTopoBRep_VData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(HLRTopoBRep_VData self) -> HLRTopoBRep_VData
        __init__(HLRTopoBRep_VData self, Standard_Real const P, TopoDS_Shape V) -> HLRTopoBRep_VData

        :type P: float
        :type V: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        this = _HLRTopoBRep.new_HLRTopoBRep_VData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Parameter(self, *args):
        """
        Parameter(HLRTopoBRep_VData self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _HLRTopoBRep.HLRTopoBRep_VData_Parameter(self, *args)


    def Vertex(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _HLRTopoBRep.HLRTopoBRep_VData_Vertex(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _HLRTopoBRep.delete_HLRTopoBRep_VData
HLRTopoBRep_VData_swigregister = _HLRTopoBRep.HLRTopoBRep_VData_swigregister
HLRTopoBRep_VData_swigregister(HLRTopoBRep_VData)

class Handle_HLRTopoBRep_OutLiner(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_HLRTopoBRep_OutLiner self)

        Nullify the handle


        """
        return _HLRTopoBRep.Handle_HLRTopoBRep_OutLiner_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_HLRTopoBRep_OutLiner self) -> bool

        Check for being null

        :rtype: bool

        """
        return _HLRTopoBRep.Handle_HLRTopoBRep_OutLiner_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_HLRTopoBRep_OutLiner self, HLRTopoBRep_OutLiner thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _HLRTopoBRep.Handle_HLRTopoBRep_OutLiner_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_HLRTopoBRep_OutLiner self, Handle_HLRTopoBRep_OutLiner theHandle) -> Handle_HLRTopoBRep_OutLiner
        assign(Handle_HLRTopoBRep_OutLiner self, HLRTopoBRep_OutLiner thePtr) -> Handle_HLRTopoBRep_OutLiner
        assign(Handle_HLRTopoBRep_OutLiner self, Handle_HLRTopoBRep_OutLiner theHandle) -> Handle_HLRTopoBRep_OutLiner

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _HLRTopoBRep.Handle_HLRTopoBRep_OutLiner_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_HLRTopoBRep_OutLiner self) -> HLRTopoBRep_OutLiner

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _HLRTopoBRep.Handle_HLRTopoBRep_OutLiner_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_HLRTopoBRep_OutLiner self) -> HLRTopoBRep_OutLiner

        Member access operator (note non-const)

        :rtype: T *

        """
        return _HLRTopoBRep.Handle_HLRTopoBRep_OutLiner___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_HLRTopoBRep_OutLiner self) -> HLRTopoBRep_OutLiner

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _HLRTopoBRep.Handle_HLRTopoBRep_OutLiner___ref__(self, *args)


    def __hash__(self):
        return _HLRTopoBRep.Handle_HLRTopoBRep_OutLiner___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _HLRTopoBRep.Handle_HLRTopoBRep_OutLiner___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _HLRTopoBRep.new_Handle_HLRTopoBRep_OutLiner(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_HLRTopoBRep.Handle_HLRTopoBRep_OutLiner_DownCast)
    __swig_destroy__ = _HLRTopoBRep.delete_Handle_HLRTopoBRep_OutLiner

    def OriginalShape(self, *args):
        """
        OriginalShape(Handle_HLRTopoBRep_OutLiner self, TopoDS_Shape OriS)
        OriginalShape(Handle_HLRTopoBRep_OutLiner self) -> TopoDS_Shape

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _HLRTopoBRep.Handle_HLRTopoBRep_OutLiner_OriginalShape(self, *args)


    def OutLinedShape(self, *args):
        """
        OutLinedShape(Handle_HLRTopoBRep_OutLiner self, TopoDS_Shape OutS)
        OutLinedShape(Handle_HLRTopoBRep_OutLiner self) -> TopoDS_Shape

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _HLRTopoBRep.Handle_HLRTopoBRep_OutLiner_OutLinedShape(self, *args)


    def DataStructure(self, *args):
        """
        DataStructure(Handle_HLRTopoBRep_OutLiner self) -> HLRTopoBRep_Data

        :rtype: OCC.wrapper.HLRTopoBRep.HLRTopoBRep_Data

        """
        return _HLRTopoBRep.Handle_HLRTopoBRep_OutLiner_DataStructure(self, *args)


    def Fill(self, *args):
        """
        Fill(Handle_HLRTopoBRep_OutLiner self, HLRAlgo_Projector P, NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher MST, Standard_Integer const nbIso)

        :type P: OCC.wrapper.HLRAlgo.HLRAlgo_Projector
        :type MST: OCC.wrapper.BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool
        :type nbIso: int

        """
        return _HLRTopoBRep.Handle_HLRTopoBRep_OutLiner_Fill(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_HLRTopoBRep_OutLiner self) -> char const *

        :rtype: const char *

        """
        return _HLRTopoBRep.Handle_HLRTopoBRep_OutLiner_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRTopoBRep.Handle_HLRTopoBRep_OutLiner_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRTopoBRep.Handle_HLRTopoBRep_OutLiner_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_HLRTopoBRep_OutLiner self)

        Memory deallocator for transient classes


        """
        return _HLRTopoBRep.Handle_HLRTopoBRep_OutLiner_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_HLRTopoBRep_OutLiner self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_HLRTopoBRep_OutLiner self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTopoBRep.Handle_HLRTopoBRep_OutLiner_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_HLRTopoBRep_OutLiner self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_HLRTopoBRep_OutLiner self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTopoBRep.Handle_HLRTopoBRep_OutLiner_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_HLRTopoBRep_OutLiner self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _HLRTopoBRep.Handle_HLRTopoBRep_OutLiner_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_HLRTopoBRep_OutLiner self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRTopoBRep.Handle_HLRTopoBRep_OutLiner_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_HLRTopoBRep_OutLiner self)

        Increments the reference counter of this object


        """
        return _HLRTopoBRep.Handle_HLRTopoBRep_OutLiner_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_HLRTopoBRep_OutLiner self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRTopoBRep.Handle_HLRTopoBRep_OutLiner_DecrementRefCounter(self, *args)

Handle_HLRTopoBRep_OutLiner_swigregister = _HLRTopoBRep.Handle_HLRTopoBRep_OutLiner_swigregister
Handle_HLRTopoBRep_OutLiner_swigregister(Handle_HLRTopoBRep_OutLiner)

def Handle_HLRTopoBRep_OutLiner_DownCast(thing):
    return _HLRTopoBRep.Handle_HLRTopoBRep_OutLiner_DownCast(thing)
Handle_HLRTopoBRep_OutLiner_DownCast = _HLRTopoBRep.Handle_HLRTopoBRep_OutLiner_DownCast

class HLRTopoBRep_DSFiller(object):
    """Provides methods  to  fill a HLRTopoBRep_Data."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Insert(*args):
        """
        Insert(TopoDS_Shape S, Contap_Contour FO, HLRTopoBRep_Data DS, NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher MST, Standard_Integer const nbIso)

        Stores in <DS> the outlines of  <S> using the current
        outliner and stores the isolines in <DS> using a Hatcher.

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type FO: OCC.wrapper.Contap.Contap_Contour
        :type DS: OCC.wrapper.HLRTopoBRep.HLRTopoBRep_Data
        :type MST: OCC.wrapper.BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool
        :type nbIso: int

        """
        return _HLRTopoBRep.HLRTopoBRep_DSFiller_Insert(*args)

    Insert = staticmethod(Insert)

    def __init__(self):
        """Provides methods  to  fill a HLRTopoBRep_Data."""
        this = _HLRTopoBRep.new_HLRTopoBRep_DSFiller()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _HLRTopoBRep.delete_HLRTopoBRep_DSFiller
HLRTopoBRep_DSFiller_swigregister = _HLRTopoBRep.HLRTopoBRep_DSFiller_swigregister
HLRTopoBRep_DSFiller_swigregister(HLRTopoBRep_DSFiller)

def HLRTopoBRep_DSFiller_Insert(*args):
    """
    HLRTopoBRep_DSFiller_Insert(TopoDS_Shape S, Contap_Contour FO, HLRTopoBRep_Data DS, NCollection_DataMap_TopoDS_Shape_BRepTopAdaptor_Tool_TopTools_ShapeMapHasher MST, Standard_Integer const nbIso)

    Stores in <DS> the outlines of  <S> using the current
    outliner and stores the isolines in <DS> using a Hatcher.

    :type S: OCC.wrapper.TopoDS.TopoDS_Shape
    :type FO: OCC.wrapper.Contap.Contap_Contour
    :type DS: OCC.wrapper.HLRTopoBRep.HLRTopoBRep_Data
    :type MST: OCC.wrapper.BRepTopAdaptor.BRepTopAdaptor_MapOfShapeTool
    :type nbIso: int

    """
    return _HLRTopoBRep.HLRTopoBRep_DSFiller_Insert(*args)

class HLRTopoBRep_FaceIsoLiner(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Perform(*args):
        """
        Perform(Standard_Integer const FI, TopoDS_Face F, HLRTopoBRep_Data DS, Standard_Integer const nbIsos)

        :type FI: int
        :type F: OCC.wrapper.TopoDS.TopoDS_Face
        :type DS: OCC.wrapper.HLRTopoBRep.HLRTopoBRep_Data
        :type nbIsos: int

        """
        return _HLRTopoBRep.HLRTopoBRep_FaceIsoLiner_Perform(*args)

    Perform = staticmethod(Perform)

    def MakeVertex(*args):
        """
        MakeVertex(TopoDS_Edge E, gp_Pnt P, Standard_Real const Par, Standard_Real const Tol, HLRTopoBRep_Data DS) -> TopoDS_Vertex

        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :type P: OCC.wrapper.gp.gp_Pnt
        :type Par: float
        :type Tol: float
        :type DS: OCC.wrapper.HLRTopoBRep.HLRTopoBRep_Data
        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _HLRTopoBRep.HLRTopoBRep_FaceIsoLiner_MakeVertex(*args)

    MakeVertex = staticmethod(MakeVertex)

    def MakeIsoLine(*args):
        """
        MakeIsoLine(TopoDS_Face F, Handle_Geom2d_Line Iso, TopoDS_Vertex V1, TopoDS_Vertex V2, Standard_Real const U1, Standard_Real const U2, Standard_Real const Tol, HLRTopoBRep_Data DS)

        :type F: OCC.wrapper.TopoDS.TopoDS_Face
        :type Iso: OCC.wrapper.Geom2d.Handle_Geom2d_Line
        :type V1: OCC.wrapper.TopoDS.TopoDS_Vertex
        :type V2: OCC.wrapper.TopoDS.TopoDS_Vertex
        :type U1: float
        :type U2: float
        :type Tol: float
        :type DS: OCC.wrapper.HLRTopoBRep.HLRTopoBRep_Data

        """
        return _HLRTopoBRep.HLRTopoBRep_FaceIsoLiner_MakeIsoLine(*args)

    MakeIsoLine = staticmethod(MakeIsoLine)

    def __init__(self):
        this = _HLRTopoBRep.new_HLRTopoBRep_FaceIsoLiner()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _HLRTopoBRep.delete_HLRTopoBRep_FaceIsoLiner
HLRTopoBRep_FaceIsoLiner_swigregister = _HLRTopoBRep.HLRTopoBRep_FaceIsoLiner_swigregister
HLRTopoBRep_FaceIsoLiner_swigregister(HLRTopoBRep_FaceIsoLiner)

def HLRTopoBRep_FaceIsoLiner_Perform(*args):
    """
    HLRTopoBRep_FaceIsoLiner_Perform(Standard_Integer const FI, TopoDS_Face F, HLRTopoBRep_Data DS, Standard_Integer const nbIsos)

    :type FI: int
    :type F: OCC.wrapper.TopoDS.TopoDS_Face
    :type DS: OCC.wrapper.HLRTopoBRep.HLRTopoBRep_Data
    :type nbIsos: int

    """
    return _HLRTopoBRep.HLRTopoBRep_FaceIsoLiner_Perform(*args)

def HLRTopoBRep_FaceIsoLiner_MakeVertex(*args):
    """
    HLRTopoBRep_FaceIsoLiner_MakeVertex(TopoDS_Edge E, gp_Pnt P, Standard_Real const Par, Standard_Real const Tol, HLRTopoBRep_Data DS) -> TopoDS_Vertex

    :type E: OCC.wrapper.TopoDS.TopoDS_Edge
    :type P: OCC.wrapper.gp.gp_Pnt
    :type Par: float
    :type Tol: float
    :type DS: OCC.wrapper.HLRTopoBRep.HLRTopoBRep_Data
    :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

    """
    return _HLRTopoBRep.HLRTopoBRep_FaceIsoLiner_MakeVertex(*args)

def HLRTopoBRep_FaceIsoLiner_MakeIsoLine(*args):
    """
    HLRTopoBRep_FaceIsoLiner_MakeIsoLine(TopoDS_Face F, Handle_Geom2d_Line Iso, TopoDS_Vertex V1, TopoDS_Vertex V2, Standard_Real const U1, Standard_Real const U2, Standard_Real const Tol, HLRTopoBRep_Data DS)

    :type F: OCC.wrapper.TopoDS.TopoDS_Face
    :type Iso: OCC.wrapper.Geom2d.Handle_Geom2d_Line
    :type V1: OCC.wrapper.TopoDS.TopoDS_Vertex
    :type V2: OCC.wrapper.TopoDS.TopoDS_Vertex
    :type U1: float
    :type U2: float
    :type Tol: float
    :type DS: OCC.wrapper.HLRTopoBRep.HLRTopoBRep_Data

    """
    return _HLRTopoBRep.HLRTopoBRep_FaceIsoLiner_MakeIsoLine(*args)

class NCollection_List_HLRTopoBRep_VData_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _HLRTopoBRep.new_NCollection_List_HLRTopoBRep_VData_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _HLRTopoBRep.delete_NCollection_List_HLRTopoBRep_VData_IteratorHelper

    def __next__(self):
        return _HLRTopoBRep.NCollection_List_HLRTopoBRep_VData_IteratorHelper___next__(self)
NCollection_List_HLRTopoBRep_VData_IteratorHelper_swigregister = _HLRTopoBRep.NCollection_List_HLRTopoBRep_VData_IteratorHelper_swigregister
NCollection_List_HLRTopoBRep_VData_IteratorHelper_swigregister(NCollection_List_HLRTopoBRep_VData_IteratorHelper)


try:
	HLRTopoBRep_ListOfVData = NCollection_List_HLRTopoBRep_VData
except NameError:
	pass # does not exist, probably ignored

class NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher(NCollection.NCollection_BaseMap):
    """
    Purpose:     The DataMap is a Map to store keys with associated
    Items. See Map  from NCollection for  a discussion
    about the number of buckets.

    The DataMap can be seen as an extended array where
    the Keys  are the   indices.  For this reason  the
    operator () is defined on DataMap to fetch an Item
    from a Key. So the following syntax can be used :

    anItem = aMap(aKey);
    aMap(aKey) = anItem;

    This analogy has its  limit.   aMap(aKey) = anItem
    can  be done only  if aKey was previously bound to
    an item in the map.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher self) -> NCollection_DataMap< TopoDS_Shape,HLRTopoBRep_FaceData,TopTools_ShapeMapHasher >::iterator

        Returns an iterator pointing to the first element in the map.

        :rtype: iterator

        """
        return _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher self) -> NCollection_DataMap< TopoDS_Shape,HLRTopoBRep_FaceData,TopTools_ShapeMapHasher >::iterator

        Returns an iterator referring to the past-the-end element in the map.

        :rtype: iterator

        """
        return _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher self) -> NCollection_DataMap< TopoDS_Shape,HLRTopoBRep_FaceData,TopTools_ShapeMapHasher >::const_iterator

        Returns a const iterator pointing to the first element in the map.

        :rtype: const_iterator

        """
        return _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher self) -> NCollection_DataMap< TopoDS_Shape,HLRTopoBRep_FaceData,TopTools_ShapeMapHasher >::const_iterator

        Returns a const iterator referring to the past-the-end element in the map.

        :rtype: const_iterator

        """
        return _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The DataMap is a Map to store keys with associated
        Items. See Map  from NCollection for  a discussion
        about the number of buckets.

        The DataMap can be seen as an extended array where
        the Keys  are the   indices.  For this reason  the
        operator () is defined on DataMap to fetch an Item
        from a Key. So the following syntax can be used :

        anItem = aMap(aKey);
        aMap(aKey) = anItem;

        This analogy has its  limit.   aMap(aKey) = anItem
        can  be done only  if aKey was previously bound to
        an item in the map.
        """
        this = _HLRTopoBRep.new_NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, *args):
        """
        Exchange(NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher self, NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher theOther)

        Exchange the content of two maps without re-allocations.
        Notice that allocators will be swapped as well!

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher_Exchange(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher self, NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher theOther) -> NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher

        Assignment.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher self, NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher theOther) -> NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher_assign(self, *args)


    def ReSize(self, *args):
        """
        ReSize(NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher self, Standard_Integer const N)

        ReSize

        :type N: int

        """
        return _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher_ReSize(self, *args)


    def Bind(self, *args):
        """
        Bind(NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher self, TopoDS_Shape theKey, HLRTopoBRep_FaceData theItem) -> Standard_Boolean

        Bind binds Item to Key in map.
        @param theKey  key to add/update
        @param theItem new item; overrides value previously bound to the key, if any
        @return Standard_True if Key was not bound already

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher_Bind(self, *args)


    def Bound(self, *args):
        """
        Bound(NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher self, TopoDS_Shape theKey, HLRTopoBRep_FaceData theItem) -> HLRTopoBRep_FaceData

        Bound binds Item to Key in map. Returns modifiable Item 

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: TheItemType *

        """
        return _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher_Bound(self, *args)


    def IsBound(self, *args):
        """
        IsBound(NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher self, TopoDS_Shape theKey) -> Standard_Boolean

        IsBound

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher_IsBound(self, *args)


    def UnBind(self, *args):
        """
        UnBind(NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher self, TopoDS_Shape theKey) -> Standard_Boolean

        UnBind removes Item Key pair from map

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher_UnBind(self, *args)


    def Seek(self, *args):
        """
        Seek(NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher self, TopoDS_Shape theKey) -> HLRTopoBRep_FaceData

        Seek returns pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: const TheItemType *

        """
        return _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher_Seek(self, *args)


    def Find(self, *args):
        """
        Find returns the Item for Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher_Find(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeSeek(self, *args):
        """
        ChangeSeek(NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher self, TopoDS_Shape theKey) -> HLRTopoBRep_FaceData

        ChangeSeek returns modifiable pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: TheItemType *

        """
        return _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher_ChangeSeek(self, *args)


    def ChangeFind(self, *args):
        """
        ChangeFind(NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher self, TopoDS_Shape theKey) -> HLRTopoBRep_FaceData

        ChangeFind returns mofifiable Item by Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: TheItemType &

        """
        return _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher_ChangeFind(self, *args)


    def __call__(self, *args):
        """
        operator ()

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Clear(self, *args):
        """
        Clear(NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher self, Standard_Boolean const doReleaseMemory)
        Clear(NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher self, Handle_NCollection_BaseAllocator theAllocator)

        Clear data and reset allocator

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher_Clear(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher self) -> Standard_Integer

        Size

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher_Size(self, *args)


    def __iter__(self):
        return _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher___iter__(self)
    __swig_destroy__ = _HLRTopoBRep.delete_NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher
NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher_swigregister = _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher_swigregister
NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher_swigregister(NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher)

class NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _HLRTopoBRep.new_NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _HLRTopoBRep.delete_NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher_IteratorHelper

    def __next__(self):
        return _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher_IteratorHelper___next__(self)
NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher_IteratorHelper_swigregister = _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher_IteratorHelper_swigregister
NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher_IteratorHelper_swigregister(NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher_IteratorHelper)


try:
	HLRTopoBRep_DataMapOfShapeFaceData = NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_FaceData_TopTools_ShapeMapHasher
except NameError:
	pass # does not exist, probably ignored

class HLRTopoBRep_Data(object):
    """
    Stores  the results  of  the  OutLine and  IsoLine
    processes.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(HLRTopoBRep_Data self) -> HLRTopoBRep_Data

        Stores  the results  of  the  OutLine and  IsoLine
        processes.
        """
        this = _HLRTopoBRep.new_HLRTopoBRep_Data(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Clear(self, *args):
        """
        Clear(HLRTopoBRep_Data self)

        Clear of all the maps.


        """
        return _HLRTopoBRep.HLRTopoBRep_Data_Clear(self, *args)


    def Clean(self, *args):
        """
        Clean(HLRTopoBRep_Data self)

        Clear of all the data  not needed during and after
        the hiding process.


        """
        return _HLRTopoBRep.HLRTopoBRep_Data_Clean(self, *args)


    def EdgeHasSplE(self, *args):
        """
        EdgeHasSplE(HLRTopoBRep_Data self, TopoDS_Edge E) -> Standard_Boolean

        Returns True if the Edge is split.

        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_EdgeHasSplE(self, *args)


    def FaceHasIntL(self, *args):
        """
        FaceHasIntL(HLRTopoBRep_Data self, TopoDS_Face F) -> Standard_Boolean

        Returns True if the Face has internal outline.

        :type F: OCC.wrapper.TopoDS.TopoDS_Face
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_FaceHasIntL(self, *args)


    def FaceHasOutL(self, *args):
        """
        FaceHasOutL(HLRTopoBRep_Data self, TopoDS_Face F) -> Standard_Boolean

        Returns True if the Face has outlines on restriction.

        :type F: OCC.wrapper.TopoDS.TopoDS_Face
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_FaceHasOutL(self, *args)


    def FaceHasIsoL(self, *args):
        """
        FaceHasIsoL(HLRTopoBRep_Data self, TopoDS_Face F) -> Standard_Boolean

        Returns True if the Face has isolines.

        :type F: OCC.wrapper.TopoDS.TopoDS_Face
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_FaceHasIsoL(self, *args)


    def IsSplEEdgeEdge(self, *args):
        """
        IsSplEEdgeEdge(HLRTopoBRep_Data self, TopoDS_Edge E1, TopoDS_Edge E2) -> Standard_Boolean

        :type E1: OCC.wrapper.TopoDS.TopoDS_Edge
        :type E2: OCC.wrapper.TopoDS.TopoDS_Edge
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_IsSplEEdgeEdge(self, *args)


    def IsIntLFaceEdge(self, *args):
        """
        IsIntLFaceEdge(HLRTopoBRep_Data self, TopoDS_Face F, TopoDS_Edge E) -> Standard_Boolean

        :type F: OCC.wrapper.TopoDS.TopoDS_Face
        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_IsIntLFaceEdge(self, *args)


    def IsOutLFaceEdge(self, *args):
        """
        IsOutLFaceEdge(HLRTopoBRep_Data self, TopoDS_Face F, TopoDS_Edge E) -> Standard_Boolean

        :type F: OCC.wrapper.TopoDS.TopoDS_Face
        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_IsOutLFaceEdge(self, *args)


    def IsIsoLFaceEdge(self, *args):
        """
        IsIsoLFaceEdge(HLRTopoBRep_Data self, TopoDS_Face F, TopoDS_Edge E) -> Standard_Boolean

        :type F: OCC.wrapper.TopoDS.TopoDS_Face
        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_IsIsoLFaceEdge(self, *args)


    def NewSOldS(self, *args):
        """
        NewSOldS(HLRTopoBRep_Data self, TopoDS_Shape New) -> TopoDS_Shape

        :type New: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_NewSOldS(self, *args)


    def EdgeSplE(self, *args):
        """
        Returns the list of the edges.

        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _HLRTopoBRep.HLRTopoBRep_Data_EdgeSplE(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FaceIntL(self, *args):
        """
        Returns the list of the internal OutLines.

        :type F: OCC.wrapper.TopoDS.TopoDS_Face
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _HLRTopoBRep.HLRTopoBRep_Data_FaceIntL(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FaceOutL(self, *args):
        """
        Returns the list of the OutLines on restriction.

        :type F: OCC.wrapper.TopoDS.TopoDS_Face
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _HLRTopoBRep.HLRTopoBRep_Data_FaceOutL(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FaceIsoL(self, *args):
        """
        Returns the list of the IsoLines.

        :type F: OCC.wrapper.TopoDS.TopoDS_Face
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _HLRTopoBRep.HLRTopoBRep_Data_FaceIsoL(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsOutV(self, *args):
        """
        IsOutV(HLRTopoBRep_Data self, TopoDS_Vertex V) -> Standard_Boolean

        Returns  True   if V is  an   outline vertex  on a
        restriction.

        :type V: OCC.wrapper.TopoDS.TopoDS_Vertex
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_IsOutV(self, *args)


    def IsIntV(self, *args):
        """
        IsIntV(HLRTopoBRep_Data self, TopoDS_Vertex V) -> Standard_Boolean

        Returns True if V is an internal outline vertex.

        :type V: OCC.wrapper.TopoDS.TopoDS_Vertex
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_IsIntV(self, *args)


    def AddOldS(self, *args):
        """
        AddOldS(HLRTopoBRep_Data self, TopoDS_Shape NewS, TopoDS_Shape OldS)

        :type NewS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type OldS: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_AddOldS(self, *args)


    def AddSplE(self, *args):
        """
        AddSplE(HLRTopoBRep_Data self, TopoDS_Edge E) -> NCollection_List_TopoDS_Shape

        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_AddSplE(self, *args)


    def AddIntL(self, *args):
        """
        AddIntL(HLRTopoBRep_Data self, TopoDS_Face F) -> NCollection_List_TopoDS_Shape

        :type F: OCC.wrapper.TopoDS.TopoDS_Face
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_AddIntL(self, *args)


    def AddOutL(self, *args):
        """
        AddOutL(HLRTopoBRep_Data self, TopoDS_Face F) -> NCollection_List_TopoDS_Shape

        :type F: OCC.wrapper.TopoDS.TopoDS_Face
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_AddOutL(self, *args)


    def AddIsoL(self, *args):
        """
        AddIsoL(HLRTopoBRep_Data self, TopoDS_Face F) -> NCollection_List_TopoDS_Shape

        :type F: OCC.wrapper.TopoDS.TopoDS_Face
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_AddIsoL(self, *args)


    def AddOutV(self, *args):
        """
        AddOutV(HLRTopoBRep_Data self, TopoDS_Vertex V)

        :type V: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_AddOutV(self, *args)


    def AddIntV(self, *args):
        """
        AddIntV(HLRTopoBRep_Data self, TopoDS_Vertex V)

        :type V: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_AddIntV(self, *args)


    def InitEdge(self, *args):
        """InitEdge(HLRTopoBRep_Data self)"""
        return _HLRTopoBRep.HLRTopoBRep_Data_InitEdge(self, *args)


    def MoreEdge(self, *args):
        """
        MoreEdge(HLRTopoBRep_Data self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_MoreEdge(self, *args)


    def NextEdge(self, *args):
        """NextEdge(HLRTopoBRep_Data self)"""
        return _HLRTopoBRep.HLRTopoBRep_Data_NextEdge(self, *args)


    def Edge(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        res = _HLRTopoBRep.HLRTopoBRep_Data_Edge(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def InitVertex(self, *args):
        """
        InitVertex(HLRTopoBRep_Data self, TopoDS_Edge E)

        Start an iteration on the vertices of E.

        :type E: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_InitVertex(self, *args)


    def MoreVertex(self, *args):
        """
        MoreVertex(HLRTopoBRep_Data self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_MoreVertex(self, *args)


    def NextVertex(self, *args):
        """NextVertex(HLRTopoBRep_Data self)"""
        return _HLRTopoBRep.HLRTopoBRep_Data_NextVertex(self, *args)


    def Vertex(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        res = _HLRTopoBRep.HLRTopoBRep_Data_Vertex(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Parameter(self, *args):
        """
        Parameter(HLRTopoBRep_Data self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_Parameter(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(HLRTopoBRep_Data self, TopoDS_Vertex V, Standard_Real const P)

        Insert before the current position.

        :type V: OCC.wrapper.TopoDS.TopoDS_Vertex
        :type P: float

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_InsertBefore(self, *args)


    def Append(self, *args):
        """
        Append(HLRTopoBRep_Data self, TopoDS_Vertex V, Standard_Real const P)

        :type V: OCC.wrapper.TopoDS.TopoDS_Vertex
        :type P: float

        """
        return _HLRTopoBRep.HLRTopoBRep_Data_Append(self, *args)

    __swig_destroy__ = _HLRTopoBRep.delete_HLRTopoBRep_Data
HLRTopoBRep_Data_swigregister = _HLRTopoBRep.HLRTopoBRep_Data_swigregister
HLRTopoBRep_Data_swigregister(HLRTopoBRep_Data)

class NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher(NCollection.NCollection_BaseMap):
    """
    Purpose:     The DataMap is a Map to store keys with associated
    Items. See Map  from NCollection for  a discussion
    about the number of buckets.

    The DataMap can be seen as an extended array where
    the Keys  are the   indices.  For this reason  the
    operator () is defined on DataMap to fetch an Item
    from a Key. So the following syntax can be used :

    anItem = aMap(aKey);
    aMap(aKey) = anItem;

    This analogy has its  limit.   aMap(aKey) = anItem
    can  be done only  if aKey was previously bound to
    an item in the map.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher self) -> NCollection_DataMap< TopoDS_Shape,HLRTopoBRep_ListOfVData,TopTools_ShapeMapHasher >::iterator

        Returns an iterator pointing to the first element in the map.

        :rtype: iterator

        """
        return _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher self) -> NCollection_DataMap< TopoDS_Shape,HLRTopoBRep_ListOfVData,TopTools_ShapeMapHasher >::iterator

        Returns an iterator referring to the past-the-end element in the map.

        :rtype: iterator

        """
        return _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher self) -> NCollection_DataMap< TopoDS_Shape,HLRTopoBRep_ListOfVData,TopTools_ShapeMapHasher >::const_iterator

        Returns a const iterator pointing to the first element in the map.

        :rtype: const_iterator

        """
        return _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher self) -> NCollection_DataMap< TopoDS_Shape,HLRTopoBRep_ListOfVData,TopTools_ShapeMapHasher >::const_iterator

        Returns a const iterator referring to the past-the-end element in the map.

        :rtype: const_iterator

        """
        return _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The DataMap is a Map to store keys with associated
        Items. See Map  from NCollection for  a discussion
        about the number of buckets.

        The DataMap can be seen as an extended array where
        the Keys  are the   indices.  For this reason  the
        operator () is defined on DataMap to fetch an Item
        from a Key. So the following syntax can be used :

        anItem = aMap(aKey);
        aMap(aKey) = anItem;

        This analogy has its  limit.   aMap(aKey) = anItem
        can  be done only  if aKey was previously bound to
        an item in the map.
        """
        this = _HLRTopoBRep.new_NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, *args):
        """
        Exchange(NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher self, NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher theOther)

        Exchange the content of two maps without re-allocations.
        Notice that allocators will be swapped as well!

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher_Exchange(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher self, NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher theOther) -> NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher

        Assignment.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher self, NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher theOther) -> NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher_assign(self, *args)


    def ReSize(self, *args):
        """
        ReSize(NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher self, Standard_Integer const N)

        ReSize

        :type N: int

        """
        return _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher_ReSize(self, *args)


    def Bind(self, *args):
        """
        Bind(NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher self, TopoDS_Shape theKey, NCollection_List< HLRTopoBRep_VData > const & theItem) -> Standard_Boolean

        Bind binds Item to Key in map.
        @param theKey  key to add/update
        @param theItem new item; overrides value previously bound to the key, if any
        @return Standard_True if Key was not bound already

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher_Bind(self, *args)


    def Bound(self, *args):
        """
        Bound(NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher self, TopoDS_Shape theKey, NCollection_List< HLRTopoBRep_VData > const & theItem) -> NCollection_List< HLRTopoBRep_VData > *

        Bound binds Item to Key in map. Returns modifiable Item 

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: TheItemType *

        """
        return _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher_Bound(self, *args)


    def IsBound(self, *args):
        """
        IsBound(NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher self, TopoDS_Shape theKey) -> Standard_Boolean

        IsBound

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher_IsBound(self, *args)


    def UnBind(self, *args):
        """
        UnBind(NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher self, TopoDS_Shape theKey) -> Standard_Boolean

        UnBind removes Item Key pair from map

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher_UnBind(self, *args)


    def Seek(self, *args):
        """
        Seek(NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher self, TopoDS_Shape theKey) -> NCollection_List< HLRTopoBRep_VData > const *

        Seek returns pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: const TheItemType *

        """
        return _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher_Seek(self, *args)


    def Find(self, *args):
        """
        Find returns the Item for Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher_Find(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeSeek(self, *args):
        """
        ChangeSeek(NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher self, TopoDS_Shape theKey) -> NCollection_List< HLRTopoBRep_VData > *

        ChangeSeek returns modifiable pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: TheItemType *

        """
        return _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher_ChangeSeek(self, *args)


    def ChangeFind(self, *args):
        """
        ChangeFind(NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher self, TopoDS_Shape theKey) -> NCollection_List< HLRTopoBRep_VData > &

        ChangeFind returns mofifiable Item by Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: TheItemType &

        """
        return _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher_ChangeFind(self, *args)


    def __call__(self, *args):
        """
        operator ()

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Clear(self, *args):
        """
        Clear(NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher self, Standard_Boolean const doReleaseMemory)
        Clear(NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher self, Handle_NCollection_BaseAllocator theAllocator)

        Clear data and reset allocator

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher_Clear(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher self) -> Standard_Integer

        Size

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher_Size(self, *args)


    def __iter__(self):
        return _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher___iter__(self)
    __swig_destroy__ = _HLRTopoBRep.delete_NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher
NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher_swigregister = _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher_swigregister
NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher_swigregister(NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher)

class NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _HLRTopoBRep.new_NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _HLRTopoBRep.delete_NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher_IteratorHelper

    def __next__(self):
        return _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher_IteratorHelper___next__(self)
NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher_IteratorHelper_swigregister = _HLRTopoBRep.NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher_IteratorHelper_swigregister
NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher_IteratorHelper_swigregister(NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher_IteratorHelper)


try:
	HLRTopoBRep_MapOfShapeListOfVData = NCollection_DataMap_TopoDS_Shape_HLRTopoBRep_ListOfVData_TopTools_ShapeMapHasher
except NameError:
	pass # does not exist, probably ignored



