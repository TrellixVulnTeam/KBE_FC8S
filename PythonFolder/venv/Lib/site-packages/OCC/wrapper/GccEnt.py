# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_GccEnt')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_GccEnt')
    _GccEnt = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GccEnt', [dirname(__file__)])
        except ImportError:
            import _GccEnt
            return _GccEnt
        try:
            _mod = imp.load_module('_GccEnt', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _GccEnt = swig_import_helper()
    del swig_import_helper
else:
    import _GccEnt
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GccEnt.delete_SwigPyIterator

    def value(self):
        return _GccEnt.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _GccEnt.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _GccEnt.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _GccEnt.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _GccEnt.SwigPyIterator_equal(self, x)

    def copy(self):
        return _GccEnt.SwigPyIterator_copy(self)

    def next(self):
        return _GccEnt.SwigPyIterator_next(self)

    def __next__(self):
        return _GccEnt.SwigPyIterator___next__(self)

    def previous(self):
        return _GccEnt.SwigPyIterator_previous(self)

    def advance(self, n):
        return _GccEnt.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _GccEnt.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _GccEnt.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _GccEnt.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _GccEnt.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _GccEnt.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _GccEnt.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _GccEnt.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _GccEnt.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_GccEnt.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _GccEnt.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _GccEnt.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GccEnt.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _GccEnt.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _GccEnt.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _GccEnt.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _GccEnt.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_GccEnt.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _GccEnt.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _GccEnt.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GccEnt.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _GccEnt.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _GccEnt.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _GccEnt.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _GccEnt.ptr_to_number(item)
ptr_to_number = _GccEnt.ptr_to_number

def HashCode(*args):
    return _GccEnt.HashCode(*args)
HashCode = _GccEnt.HashCode

def ptr_equal(a, b):
    return _GccEnt.ptr_equal(a, b)
ptr_equal = _GccEnt.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
GccEnt_unqualified = _GccEnt.GccEnt_unqualified
GccEnt_enclosing = _GccEnt.GccEnt_enclosing
GccEnt_enclosed = _GccEnt.GccEnt_enclosed
GccEnt_outside = _GccEnt.GccEnt_outside
GccEnt_noqualifier = _GccEnt.GccEnt_noqualifier
class GccEnt_BadQualifier(Standard.Standard_DomainError):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_GccEnt_BadQualifier
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_GccEnt_BadQualifier(self) 
            return h


    def __init__(self, *args):
        """
        __init__(GccEnt_BadQualifier self) -> GccEnt_BadQualifier
        __init__(GccEnt_BadQualifier self, Standard_CString const theMessage) -> GccEnt_BadQualifier

        :type theMessage: OCC.wrapper.Standard.Standard_CString

        """
        this = _GccEnt.new_GccEnt_BadQualifier(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewInstance(*args):
        """
        NewInstance(Standard_CString const theMessage) -> Handle_GccEnt_BadQualifier

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.GccEnt.Handle_GccEnt_BadQualifier

        """
        return _GccEnt.GccEnt_BadQualifier_NewInstance(*args)

    NewInstance = staticmethod(NewInstance)

    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _GccEnt.GccEnt_BadQualifier_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _GccEnt.GccEnt_BadQualifier_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GccEnt.GccEnt_BadQualifier_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GccEnt.delete_GccEnt_BadQualifier
GccEnt_BadQualifier_swigregister = _GccEnt.GccEnt_BadQualifier_swigregister
GccEnt_BadQualifier_swigregister(GccEnt_BadQualifier)

def GccEnt_BadQualifier_NewInstance(*args):
    """
    GccEnt_BadQualifier_NewInstance(Standard_CString const theMessage) -> Handle_GccEnt_BadQualifier

    :type theMessage: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.GccEnt.Handle_GccEnt_BadQualifier

    """
    return _GccEnt.GccEnt_BadQualifier_NewInstance(*args)

def GccEnt_BadQualifier_get_type_name(*args):
    """
    GccEnt_BadQualifier_get_type_name() -> char const *

    :rtype: const char *

    """
    return _GccEnt.GccEnt_BadQualifier_get_type_name(*args)

def GccEnt_BadQualifier_get_type_descriptor(*args):
    """
    GccEnt_BadQualifier_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _GccEnt.GccEnt_BadQualifier_get_type_descriptor(*args)

class GccEnt_QualifiedCirc(object):
    """
    Creates a qualified 2d Circle.
    A qualified 2D circle is a circle (gp_Circ2d circle) with a
    qualifier which specifies whether the solution of a
    construction algorithm using the qualified circle (as an argument):
    -   encloses the circle, or
    -   is enclosed by the circle, or
    -   is built so that both the circle and it are external to   one another, or
    -   is undefined (all solutions apply).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GccEnt_QualifiedCirc self, gp_Circ2d Qualified, GccEnt_Position const Qualifier) -> GccEnt_QualifiedCirc

        Constructs a qualified circle by assigning the qualifier
        Qualifier to the circle Qualified. Qualifier may be:
        -   GccEnt_enclosing if the solution computed by a
        construction algorithm using the qualified circle
        encloses the circle, or
        -   GccEnt_enclosed if the solution is enclosed by the circle, or
        -   GccEnt_outside if both the solution and the circle
        are external to one another, or
        -   GccEnt_unqualified if all solutions apply.

        :type Qualified: OCC.wrapper.gp.gp_Circ2d
        :type Qualifier: OCC.wrapper.GccEnt.GccEnt_Position

        """
        this = _GccEnt.new_GccEnt_QualifiedCirc(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Qualified(self, *args):
        """
        Qualified(GccEnt_QualifiedCirc self) -> gp_Circ2d

        Returns a 2D circle to which the qualifier is assigned.

        :rtype: OCC.wrapper.gp.gp_Circ2d

        """
        return _GccEnt.GccEnt_QualifiedCirc_Qualified(self, *args)


    def Qualifier(self, *args):
        """
        Qualifier(GccEnt_QualifiedCirc self) -> GccEnt_Position

        Returns
        -   the qualifier of this qualified circle, if it is enclosing,
        enclosed or outside, or
        -   GccEnt_noqualifier if it is unqualified.

        :rtype: OCC.wrapper.GccEnt.GccEnt_Position

        """
        return _GccEnt.GccEnt_QualifiedCirc_Qualifier(self, *args)


    def IsUnqualified(self, *args):
        """
        IsUnqualified(GccEnt_QualifiedCirc self) -> Standard_Boolean

        Returns true if the Circ2d is Unqualified and false in
        the other cases.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GccEnt.GccEnt_QualifiedCirc_IsUnqualified(self, *args)


    def IsEnclosing(self, *args):
        """
        IsEnclosing(GccEnt_QualifiedCirc self) -> Standard_Boolean

        Returns true if the solution computed by a construction
        algorithm using this qualified circle encloses the circle.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GccEnt.GccEnt_QualifiedCirc_IsEnclosing(self, *args)


    def IsEnclosed(self, *args):
        """
        IsEnclosed(GccEnt_QualifiedCirc self) -> Standard_Boolean

        Returns true if the solution computed by a construction
        algorithm using this qualified circle is enclosed by the circle.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GccEnt.GccEnt_QualifiedCirc_IsEnclosed(self, *args)


    def IsOutside(self, *args):
        """
        IsOutside(GccEnt_QualifiedCirc self) -> Standard_Boolean

        Returns true if both the solution computed by a
        construction algorithm using this qualified circle and the
        circle are external to one another.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GccEnt.GccEnt_QualifiedCirc_IsOutside(self, *args)

    __swig_destroy__ = _GccEnt.delete_GccEnt_QualifiedCirc
GccEnt_QualifiedCirc_swigregister = _GccEnt.GccEnt_QualifiedCirc_swigregister
GccEnt_QualifiedCirc_swigregister(GccEnt_QualifiedCirc)

class Handle_GccEnt_BadQualifier(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_GccEnt_BadQualifier self)

        Nullify the handle


        """
        return _GccEnt.Handle_GccEnt_BadQualifier_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_GccEnt_BadQualifier self) -> bool

        Check for being null

        :rtype: bool

        """
        return _GccEnt.Handle_GccEnt_BadQualifier_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_GccEnt_BadQualifier self, GccEnt_BadQualifier thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _GccEnt.Handle_GccEnt_BadQualifier_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_GccEnt_BadQualifier self, Handle_GccEnt_BadQualifier theHandle) -> Handle_GccEnt_BadQualifier
        assign(Handle_GccEnt_BadQualifier self, GccEnt_BadQualifier thePtr) -> Handle_GccEnt_BadQualifier
        assign(Handle_GccEnt_BadQualifier self, Handle_GccEnt_BadQualifier theHandle) -> Handle_GccEnt_BadQualifier

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _GccEnt.Handle_GccEnt_BadQualifier_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_GccEnt_BadQualifier self) -> GccEnt_BadQualifier

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _GccEnt.Handle_GccEnt_BadQualifier_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_GccEnt_BadQualifier self) -> GccEnt_BadQualifier

        Member access operator (note non-const)

        :rtype: T *

        """
        return _GccEnt.Handle_GccEnt_BadQualifier___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_GccEnt_BadQualifier self) -> GccEnt_BadQualifier

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _GccEnt.Handle_GccEnt_BadQualifier___ref__(self, *args)


    def __hash__(self):
        return _GccEnt.Handle_GccEnt_BadQualifier___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _GccEnt.Handle_GccEnt_BadQualifier___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _GccEnt.new_Handle_GccEnt_BadQualifier(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_GccEnt.Handle_GccEnt_BadQualifier_DownCast)
    __swig_destroy__ = _GccEnt.delete_Handle_GccEnt_BadQualifier

    def NewInstance(self, *args):
        """
        NewInstance(Handle_GccEnt_BadQualifier self, Standard_CString const theMessage) -> Handle_GccEnt_BadQualifier

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.GccEnt.Handle_GccEnt_BadQualifier

        """
        return _GccEnt.Handle_GccEnt_BadQualifier_NewInstance(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_GccEnt_BadQualifier self) -> char const *

        :rtype: const char *

        """
        return _GccEnt.Handle_GccEnt_BadQualifier_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GccEnt.Handle_GccEnt_BadQualifier_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GccEnt.Handle_GccEnt_BadQualifier_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Print(self, *args):
        """
        Print(Handle_GccEnt_BadQualifier self, Standard_OStream & s)

        Prints on the stream <s> the exception name followed by
        the error message.
        Level: Advanced
        Warning:
        The operator "OStream& operator<< (Standard_OStream&,
        Handle(Standard_Failure)&)"
        is implemented. (This operator uses the method Print)

        :type s: OCC.wrapper.Standard.Standard_OStream

        """
        return _GccEnt.Handle_GccEnt_BadQualifier_Print(self, *args)


    def GetMessageString(self, *args):
        """
        GetMessageString(Handle_GccEnt_BadQualifier self) -> Standard_CString

        Returns error message

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _GccEnt.Handle_GccEnt_BadQualifier_GetMessageString(self, *args)


    def SetMessageString(self, *args):
        """
        SetMessageString(Handle_GccEnt_BadQualifier self, Standard_CString const aMessage)

        Sets error message

        :type aMessage: OCC.wrapper.Standard.Standard_CString

        """
        return _GccEnt.Handle_GccEnt_BadQualifier_SetMessageString(self, *args)


    def Reraise(self, *args):
        """
        Reraise(Handle_GccEnt_BadQualifier self)
        Reraise(Handle_GccEnt_BadQualifier self, Standard_CString const aMessage)
        Reraise(Handle_GccEnt_BadQualifier self, Standard_SStream const & aReason)

        Reraises a caught exception and changes its error message.

        :type aReason: OCC.wrapper.Standard.Standard_SStream

        """
        return _GccEnt.Handle_GccEnt_BadQualifier_Reraise(self, *args)


    def Jump(self, *args):
        """
        Jump(Handle_GccEnt_BadQualifier self)

        Used to throw CASCADE exception from C signal handler.
        On platforms that do not allow throwing C++ exceptions
        from this handler (e.g. Linux), uses longjump to get to
        the current active signal handler, and only then is
        converted to C++ exception.


        """
        return _GccEnt.Handle_GccEnt_BadQualifier_Jump(self, *args)


    def Caught(self, *args):
        """
        Caught(Handle_GccEnt_BadQualifier self) -> Handle_Standard_Failure

        Returns the last caught exception.
        Needed when exceptions are emulated by C longjumps,
        in other cases is also provided for compatibility.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Failure

        """
        return _GccEnt.Handle_GccEnt_BadQualifier_Caught(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_GccEnt_BadQualifier self)

        Memory deallocator for transient classes


        """
        return _GccEnt.Handle_GccEnt_BadQualifier_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_GccEnt_BadQualifier self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_GccEnt_BadQualifier self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GccEnt.Handle_GccEnt_BadQualifier_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_GccEnt_BadQualifier self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_GccEnt_BadQualifier self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GccEnt.Handle_GccEnt_BadQualifier_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_GccEnt_BadQualifier self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _GccEnt.Handle_GccEnt_BadQualifier_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_GccEnt_BadQualifier self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GccEnt.Handle_GccEnt_BadQualifier_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_GccEnt_BadQualifier self)

        Increments the reference counter of this object


        """
        return _GccEnt.Handle_GccEnt_BadQualifier_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_GccEnt_BadQualifier self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GccEnt.Handle_GccEnt_BadQualifier_DecrementRefCounter(self, *args)

Handle_GccEnt_BadQualifier_swigregister = _GccEnt.Handle_GccEnt_BadQualifier_swigregister
Handle_GccEnt_BadQualifier_swigregister(Handle_GccEnt_BadQualifier)

def Handle_GccEnt_BadQualifier_DownCast(thing):
    return _GccEnt.Handle_GccEnt_BadQualifier_DownCast(thing)
Handle_GccEnt_BadQualifier_DownCast = _GccEnt.Handle_GccEnt_BadQualifier_DownCast

class NCollection_Array1_GccEnt_Position(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_GccEnt_Position self) -> NCollection_Array1< GccEnt_Position >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _GccEnt.NCollection_Array1_GccEnt_Position_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_GccEnt_Position self) -> NCollection_Array1< GccEnt_Position >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _GccEnt.NCollection_Array1_GccEnt_Position_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_GccEnt_Position self) -> NCollection_Array1< GccEnt_Position >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _GccEnt.NCollection_Array1_GccEnt_Position_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_GccEnt_Position self) -> NCollection_Array1< GccEnt_Position >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _GccEnt.NCollection_Array1_GccEnt_Position_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _GccEnt.new_NCollection_Array1_GccEnt_Position(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_GccEnt_Position self, GccEnt_Position const & theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _GccEnt.NCollection_Array1_GccEnt_Position_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_GccEnt_Position self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GccEnt.NCollection_Array1_GccEnt_Position_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_GccEnt_Position self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GccEnt.NCollection_Array1_GccEnt_Position_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_GccEnt_Position self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GccEnt.NCollection_Array1_GccEnt_Position_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_GccEnt_Position self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GccEnt.NCollection_Array1_GccEnt_Position_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_GccEnt_Position self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GccEnt.NCollection_Array1_GccEnt_Position_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_GccEnt_Position self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GccEnt.NCollection_Array1_GccEnt_Position_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_GccEnt_Position self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GccEnt.NCollection_Array1_GccEnt_Position_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_GccEnt_Position self, NCollection_Array1_GccEnt_Position theOther) -> NCollection_Array1_GccEnt_Position

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _GccEnt.NCollection_Array1_GccEnt_Position_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_GccEnt_Position self, NCollection_Array1_GccEnt_Position theOther) -> NCollection_Array1_GccEnt_Position

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _GccEnt.NCollection_Array1_GccEnt_Position_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_GccEnt_Position self, NCollection_Array1_GccEnt_Position theOther) -> NCollection_Array1_GccEnt_Position
        assign(NCollection_Array1_GccEnt_Position self, NCollection_Array1_GccEnt_Position theOther) -> NCollection_Array1_GccEnt_Position

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _GccEnt.NCollection_Array1_GccEnt_Position_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _GccEnt.NCollection_Array1_GccEnt_Position_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_GccEnt_Position self) -> GccEnt_Position &

        @return first element

        :rtype: TheItemType &

        """
        return _GccEnt.NCollection_Array1_GccEnt_Position_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _GccEnt.NCollection_Array1_GccEnt_Position_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_GccEnt_Position self) -> GccEnt_Position &

        @return last element

        :rtype: TheItemType &

        """
        return _GccEnt.NCollection_Array1_GccEnt_Position_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _GccEnt.NCollection_Array1_GccEnt_Position_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_GccEnt_Position self, Standard_Integer const theIndex) -> GccEnt_Position &

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _GccEnt.NCollection_Array1_GccEnt_Position_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _GccEnt.NCollection_Array1_GccEnt_Position___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _GccEnt.NCollection_Array1_GccEnt_Position_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_GccEnt_Position self, Standard_Integer const theIndex, GccEnt_Position const & theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _GccEnt.NCollection_Array1_GccEnt_Position_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_GccEnt_Position self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _GccEnt.NCollection_Array1_GccEnt_Position_Resize(self, *args)

    __swig_destroy__ = _GccEnt.delete_NCollection_Array1_GccEnt_Position
NCollection_Array1_GccEnt_Position_swigregister = _GccEnt.NCollection_Array1_GccEnt_Position_swigregister
NCollection_Array1_GccEnt_Position_swigregister(NCollection_Array1_GccEnt_Position)


try:
	GccEnt_Array1OfPosition = NCollection_Array1_GccEnt_Position
except NameError:
	pass # does not exist, probably ignored

class GccEnt_(object):
    """
    This package provides an implementation of the qualified
    entities useful to create 2d entities with geometric
    constraints. The qualifier explains which subfamily of
    solutions we want to obtain. It uses the following law: the
    matter/the interior side is at the left of the line, if we go
    from the beginning to the end.
    The qualifiers are:
    Enclosing   : the solution(s) must enclose the argument.
    Enclosed    : the solution(s) must be enclosed in the
    argument.
    Outside     : both the solution(s) and the argument must be
    outside to each other.
    Unqualified : the position is undefined, so give all the
    solutions.
    The use of a qualifier is always required if such
    subfamilies exist. For example, it is not used for a point.
    Note:    the interior of a curve is defined as the left-hand
    side of the curve in relation to its orientation.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Print(*args):
        """
        Print(GccEnt_Position const thePosition, Standard_OStream & theStream) -> Standard_OStream &

        Prints the name of Position type as a String on the Stream.

        :type thePosition: OCC.wrapper.GccEnt.GccEnt_Position
        :type theStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _GccEnt.GccEnt__Print(*args)

    Print = staticmethod(Print)

    def PositionToString(*args):
        """
        PositionToString(GccEnt_Position thePosition) -> Standard_CString

        Returns the string name for a given position.
        @param thePosition position type
        @return string identifier from the list UNQUALIFIED ENCLOSING ENCLOSED OUTSIDE NOQUALIFIER

        :type thePosition: OCC.wrapper.GccEnt.GccEnt_Position
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _GccEnt.GccEnt__PositionToString(*args)

    PositionToString = staticmethod(PositionToString)

    def PositionFromString(*args):
        """
        PositionFromString(Standard_CString thePositionString) -> GccEnt_Position
        PositionFromString(Standard_CString thePositionString) -> Standard_Boolean

        Determines the position from the given string identifier (using case-insensitive comparison).
        @param thePositionString string identifier
        @param thePosition detected shape type
        @return TRUE if string identifier is known

        :type thePositionString: OCC.wrapper.Standard.Standard_CString
        :type thePosition: OCC.wrapper.GccEnt.GccEnt_Position
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GccEnt.GccEnt__PositionFromString(*args)

    PositionFromString = staticmethod(PositionFromString)

    def Unqualified(*args):
        """
        Unqualified(gp_Lin2d Obj) -> GccEnt_QualifiedLin
        Unqualified(gp_Circ2d Obj) -> GccEnt_QualifiedCirc

        Constructs a qualified circle
        so that the relative position to the circle or line of the
        solution computed by a construction algorithm using the
        qualified circle or line is not qualified, i.e. all solutions apply.

        :type Obj: OCC.wrapper.gp.gp_Circ2d
        :rtype: OCC.wrapper.GccEnt.GccEnt_QualifiedCirc

        """
        return _GccEnt.GccEnt__Unqualified(*args)

    Unqualified = staticmethod(Unqualified)

    def Enclosing(*args):
        """
        Enclosing(gp_Circ2d Obj) -> GccEnt_QualifiedCirc

        Constructs such a qualified circle that the solution
        computed by a construction algorithm using the qualified
        circle encloses the circle.

        :type Obj: OCC.wrapper.gp.gp_Circ2d
        :rtype: OCC.wrapper.GccEnt.GccEnt_QualifiedCirc

        """
        return _GccEnt.GccEnt__Enclosing(*args)

    Enclosing = staticmethod(Enclosing)

    def Enclosed(*args):
        """
        Enclosed(gp_Lin2d Obj) -> GccEnt_QualifiedLin
        Enclosed(gp_Circ2d Obj) -> GccEnt_QualifiedCirc

        Constructs a qualified circle
        so that the solution computed by a construction
        algorithm using the qualified circle or line is enclosed by
        the circle or line.

        :type Obj: OCC.wrapper.gp.gp_Circ2d
        :rtype: OCC.wrapper.GccEnt.GccEnt_QualifiedCirc

        """
        return _GccEnt.GccEnt__Enclosed(*args)

    Enclosed = staticmethod(Enclosed)

    def Outside(*args):
        """
        Outside(gp_Lin2d Obj) -> GccEnt_QualifiedLin
        Outside(gp_Circ2d Obj) -> GccEnt_QualifiedCirc

        Constructs a qualified circle
        so that the solution computed by a construction
        algorithm using the qualified circle or line and the circle
        or line are external to one another.

        :type Obj: OCC.wrapper.gp.gp_Circ2d
        :rtype: OCC.wrapper.GccEnt.GccEnt_QualifiedCirc

        """
        return _GccEnt.GccEnt__Outside(*args)

    Outside = staticmethod(Outside)

    def __init__(self):
        """
        This package provides an implementation of the qualified
        entities useful to create 2d entities with geometric
        constraints. The qualifier explains which subfamily of
        solutions we want to obtain. It uses the following law: the
        matter/the interior side is at the left of the line, if we go
        from the beginning to the end.
        The qualifiers are:
        Enclosing   : the solution(s) must enclose the argument.
        Enclosed    : the solution(s) must be enclosed in the
        argument.
        Outside     : both the solution(s) and the argument must be
        outside to each other.
        Unqualified : the position is undefined, so give all the
        solutions.
        The use of a qualifier is always required if such
        subfamilies exist. For example, it is not used for a point.
        Note:    the interior of a curve is defined as the left-hand
        side of the curve in relation to its orientation.
        """
        this = _GccEnt.new_GccEnt_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GccEnt.delete_GccEnt_
GccEnt__swigregister = _GccEnt.GccEnt__swigregister
GccEnt__swigregister(GccEnt_)

def GccEnt__Print(*args):
    """
    GccEnt__Print(GccEnt_Position const thePosition, Standard_OStream & theStream) -> Standard_OStream &

    Prints the name of Position type as a String on the Stream.

    :type thePosition: OCC.wrapper.GccEnt.GccEnt_Position
    :type theStream: OCC.wrapper.Standard.Standard_OStream
    :rtype: OCC.wrapper.Standard.Standard_OStream

    """
    return _GccEnt.GccEnt__Print(*args)

def GccEnt__PositionToString(*args):
    """
    GccEnt__PositionToString(GccEnt_Position thePosition) -> Standard_CString

    Returns the string name for a given position.
    @param thePosition position type
    @return string identifier from the list UNQUALIFIED ENCLOSING ENCLOSED OUTSIDE NOQUALIFIER

    :type thePosition: OCC.wrapper.GccEnt.GccEnt_Position
    :rtype: OCC.wrapper.Standard.Standard_CString

    """
    return _GccEnt.GccEnt__PositionToString(*args)

def GccEnt__PositionFromString(*args):
    """
    PositionFromString(Standard_CString thePositionString) -> GccEnt_Position
    GccEnt__PositionFromString(Standard_CString thePositionString) -> Standard_Boolean

    Determines the position from the given string identifier (using case-insensitive comparison).
    @param thePositionString string identifier
    @param thePosition detected shape type
    @return TRUE if string identifier is known

    :type thePositionString: OCC.wrapper.Standard.Standard_CString
    :type thePosition: OCC.wrapper.GccEnt.GccEnt_Position
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _GccEnt.GccEnt__PositionFromString(*args)

def GccEnt__Unqualified(*args):
    """
    Unqualified(gp_Lin2d Obj) -> GccEnt_QualifiedLin
    GccEnt__Unqualified(gp_Circ2d Obj) -> GccEnt_QualifiedCirc

    Constructs a qualified circle
    so that the relative position to the circle or line of the
    solution computed by a construction algorithm using the
    qualified circle or line is not qualified, i.e. all solutions apply.

    :type Obj: OCC.wrapper.gp.gp_Circ2d
    :rtype: OCC.wrapper.GccEnt.GccEnt_QualifiedCirc

    """
    return _GccEnt.GccEnt__Unqualified(*args)

def GccEnt__Enclosing(*args):
    """
    GccEnt__Enclosing(gp_Circ2d Obj) -> GccEnt_QualifiedCirc

    Constructs such a qualified circle that the solution
    computed by a construction algorithm using the qualified
    circle encloses the circle.

    :type Obj: OCC.wrapper.gp.gp_Circ2d
    :rtype: OCC.wrapper.GccEnt.GccEnt_QualifiedCirc

    """
    return _GccEnt.GccEnt__Enclosing(*args)

def GccEnt__Enclosed(*args):
    """
    Enclosed(gp_Lin2d Obj) -> GccEnt_QualifiedLin
    GccEnt__Enclosed(gp_Circ2d Obj) -> GccEnt_QualifiedCirc

    Constructs a qualified circle
    so that the solution computed by a construction
    algorithm using the qualified circle or line is enclosed by
    the circle or line.

    :type Obj: OCC.wrapper.gp.gp_Circ2d
    :rtype: OCC.wrapper.GccEnt.GccEnt_QualifiedCirc

    """
    return _GccEnt.GccEnt__Enclosed(*args)

def GccEnt__Outside(*args):
    """
    Outside(gp_Lin2d Obj) -> GccEnt_QualifiedLin
    GccEnt__Outside(gp_Circ2d Obj) -> GccEnt_QualifiedCirc

    Constructs a qualified circle
    so that the solution computed by a construction
    algorithm using the qualified circle or line and the circle
    or line are external to one another.

    :type Obj: OCC.wrapper.gp.gp_Circ2d
    :rtype: OCC.wrapper.GccEnt.GccEnt_QualifiedCirc

    """
    return _GccEnt.GccEnt__Outside(*args)

class GccEnt_QualifiedLin(object):
    """
    Describes a qualified 2D line.
    A qualified 2D line is a line (gp_Lin2d line) with a
    qualifier which specifies whether the solution of a
    construction algorithm using the qualified line (as an argument):
    -   is 'enclosed' by the line, or
    -   is built so that both the line and it are external to one another, or
    -   is undefined (all solutions apply).
    Note: the interior of a line is defined as the left-hand
    side of the line in relation to its orientation (i.e. when
    moving from the start to the end of the curve).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GccEnt_QualifiedLin self, gp_Lin2d Qualified, GccEnt_Position const Qualifier) -> GccEnt_QualifiedLin

        Constructs a qualified line by assigning the qualifier
        Qualifier to the line Qualified.
        Qualifier may be:
        -   GccEnt_enclosed if the solution is enclosed by the line, or
        -   GccEnt_outside if both the solution and the line are external to one another, or
        -   GccEnt_unqualified if all solutions apply.
        Note : the interior of a line is defined as the left-hand
        side of the line in relation to its orientation.

        :type Qualified: OCC.wrapper.gp.gp_Lin2d
        :type Qualifier: OCC.wrapper.GccEnt.GccEnt_Position

        """
        this = _GccEnt.new_GccEnt_QualifiedLin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Qualified(self, *args):
        """
        Qualified(GccEnt_QualifiedLin self) -> gp_Lin2d

        Returns a 2D line to which the qualifier is assigned.

        :rtype: OCC.wrapper.gp.gp_Lin2d

        """
        return _GccEnt.GccEnt_QualifiedLin_Qualified(self, *args)


    def Qualifier(self, *args):
        """
        Qualifier(GccEnt_QualifiedLin self) -> GccEnt_Position

        Returns the qualifier of this qualified line, if it is "enclosed" or
        "outside", or
        -   GccEnt_noqualifier if it is unqualified.

        :rtype: OCC.wrapper.GccEnt.GccEnt_Position

        """
        return _GccEnt.GccEnt_QualifiedLin_Qualifier(self, *args)


    def IsUnqualified(self, *args):
        """
        IsUnqualified(GccEnt_QualifiedLin self) -> Standard_Boolean

        Returns true if the solution is unqualified and false in
        the other cases.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GccEnt.GccEnt_QualifiedLin_IsUnqualified(self, *args)


    def IsEnclosed(self, *args):
        """
        IsEnclosed(GccEnt_QualifiedLin self) -> Standard_Boolean

        Returns true if the solution is Enclosed in the Lin2d and false in
        the other cases.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GccEnt.GccEnt_QualifiedLin_IsEnclosed(self, *args)


    def IsOutside(self, *args):
        """
        IsOutside(GccEnt_QualifiedLin self) -> Standard_Boolean

        Returns true if the solution is Outside the Lin2d and false in
        the other cases.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GccEnt.GccEnt_QualifiedLin_IsOutside(self, *args)

    __swig_destroy__ = _GccEnt.delete_GccEnt_QualifiedLin
GccEnt_QualifiedLin_swigregister = _GccEnt.GccEnt_QualifiedLin_swigregister
GccEnt_QualifiedLin_swigregister(GccEnt_QualifiedLin)



