# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ApproxInt')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ApproxInt')
    _ApproxInt = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ApproxInt', [dirname(__file__)])
        except ImportError:
            import _ApproxInt
            return _ApproxInt
        try:
            _mod = imp.load_module('_ApproxInt', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ApproxInt = swig_import_helper()
    del swig_import_helper
else:
    import _ApproxInt
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ApproxInt.delete_SwigPyIterator

    def value(self):
        return _ApproxInt.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ApproxInt.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ApproxInt.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ApproxInt.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ApproxInt.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ApproxInt.SwigPyIterator_copy(self)

    def next(self):
        return _ApproxInt.SwigPyIterator_next(self)

    def __next__(self):
        return _ApproxInt.SwigPyIterator___next__(self)

    def previous(self):
        return _ApproxInt.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ApproxInt.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ApproxInt.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ApproxInt.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ApproxInt.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ApproxInt.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ApproxInt.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ApproxInt.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _ApproxInt.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _ApproxInt.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_ApproxInt.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _ApproxInt.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _ApproxInt.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ApproxInt.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _ApproxInt.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _ApproxInt.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _ApproxInt.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _ApproxInt.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_ApproxInt.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _ApproxInt.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _ApproxInt.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ApproxInt.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _ApproxInt.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _ApproxInt.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _ApproxInt.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _ApproxInt.ptr_to_number(item)
ptr_to_number = _ApproxInt.ptr_to_number

def HashCode(*args):
    return _ApproxInt.HashCode(*args)
HashCode = _ApproxInt.HashCode

def ptr_equal(a, b):
    return _ApproxInt.ptr_equal(a, b)
ptr_equal = _ApproxInt.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntSurf
else:
    import IntSurf
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor3d
else:
    import Adaptor3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor2d
else:
    import Adaptor2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import math
else:
    import math
del _swig_python_version_info
class ApproxInt_KnotTools(object):
    """
    This class intended to build knots sequence on discrete set of points for further approximation into bspline curve.

    Short description of algorithm:
    1) Build discrete curvature on points set.
    2) According to special rules build draft knots sequence.
    3) Filter draft sequence to build output sequence.

    For more details look at:
    Anshuman Razdan - Knot Placement for B-Spline curve Approximation.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def BuildKnots(*args):
        """
        BuildKnots(NCollection_Array1_gp_Pnt thePntsXYZ, NCollection_Array1_gp_Pnt2d thePntsU1V1, NCollection_Array1_gp_Pnt2d thePntsU2V2, math_Vector thePars, Standard_Boolean const theApproxXYZ, Standard_Boolean const theApproxU1V1, Standard_Boolean const theApproxU2V2, Standard_Integer const theMinNbPnts, NCollection_Vector< Standard_Integer > & theKnots)

        Main function to build optimal knot sequence.
        At least one set from (thePntsXYZ, thePntsU1V1, thePntsU2V2) should exist.
        @param thePntsXYZ - Set of 3d points.
        @param thePntsU1V1 - Set of 2d points.
        @param thePntsU2V2 - Set of 2d points.
        @param thePars - Expected parameters assoiated with set.
        @param theApproxXYZ - Flag, existence of 3d set.
        @param theApproxU1V1 - Flag existence of first 2d set.
        @param theApproxU2V2 - Flag existence of second 2d set.
        @param theMinNbPnts - Minimal number of points per knot interval.
        @param theKnots - output knots sequence.

        :type thePntsXYZ: OCC.wrapper.TColgp.TColgp_Array1OfPnt
        :type thePntsU1V1: OCC.wrapper.TColgp.TColgp_Array1OfPnt2d
        :type thePntsU2V2: OCC.wrapper.TColgp.TColgp_Array1OfPnt2d
        :type thePars: OCC.wrapper.math.math_Vector
        :type theApproxXYZ: bool
        :type theApproxU1V1: bool
        :type theApproxU2V2: bool
        :type theMinNbPnts: int
        :type theKnots: OCC.wrapper.ApproxInt.NCollection_Vector_Standard_Integer

        """
        return _ApproxInt.ApproxInt_KnotTools_BuildKnots(*args)

    BuildKnots = staticmethod(BuildKnots)

    def __init__(self):
        """
        This class intended to build knots sequence on discrete set of points for further approximation into bspline curve.

        Short description of algorithm:
        1) Build discrete curvature on points set.
        2) According to special rules build draft knots sequence.
        3) Filter draft sequence to build output sequence.

        For more details look at:
        Anshuman Razdan - Knot Placement for B-Spline curve Approximation.
        """
        this = _ApproxInt.new_ApproxInt_KnotTools()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ApproxInt.delete_ApproxInt_KnotTools
ApproxInt_KnotTools_swigregister = _ApproxInt.ApproxInt_KnotTools_swigregister
ApproxInt_KnotTools_swigregister(ApproxInt_KnotTools)

def ApproxInt_KnotTools_BuildKnots(*args):
    """
    ApproxInt_KnotTools_BuildKnots(NCollection_Array1_gp_Pnt thePntsXYZ, NCollection_Array1_gp_Pnt2d thePntsU1V1, NCollection_Array1_gp_Pnt2d thePntsU2V2, math_Vector thePars, Standard_Boolean const theApproxXYZ, Standard_Boolean const theApproxU1V1, Standard_Boolean const theApproxU2V2, Standard_Integer const theMinNbPnts, NCollection_Vector< Standard_Integer > & theKnots)

    Main function to build optimal knot sequence.
    At least one set from (thePntsXYZ, thePntsU1V1, thePntsU2V2) should exist.
    @param thePntsXYZ - Set of 3d points.
    @param thePntsU1V1 - Set of 2d points.
    @param thePntsU2V2 - Set of 2d points.
    @param thePars - Expected parameters assoiated with set.
    @param theApproxXYZ - Flag, existence of 3d set.
    @param theApproxU1V1 - Flag existence of first 2d set.
    @param theApproxU2V2 - Flag existence of second 2d set.
    @param theMinNbPnts - Minimal number of points per knot interval.
    @param theKnots - output knots sequence.

    :type thePntsXYZ: OCC.wrapper.TColgp.TColgp_Array1OfPnt
    :type thePntsU1V1: OCC.wrapper.TColgp.TColgp_Array1OfPnt2d
    :type thePntsU2V2: OCC.wrapper.TColgp.TColgp_Array1OfPnt2d
    :type thePars: OCC.wrapper.math.math_Vector
    :type theApproxXYZ: bool
    :type theApproxU1V1: bool
    :type theApproxU2V2: bool
    :type theMinNbPnts: int
    :type theKnots: OCC.wrapper.ApproxInt.NCollection_Vector_Standard_Integer

    """
    return _ApproxInt.ApproxInt_KnotTools_BuildKnots(*args)

class ApproxInt_SvSurfaces(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Compute(self, *args):
        """
        Compute(ApproxInt_SvSurfaces self, gp_Pnt Pt, gp_Vec Tg, gp_Vec2d Tguv1, gp_Vec2d Tguv2) -> Standard_Boolean

        returns True if Tg,Tguv1 Tguv2 can be computed.

        :type u1: float
        :type v1: float
        :type u2: float
        :type v2: float
        :type Pt: OCC.wrapper.gp.gp_Pnt
        :type Tg: OCC.wrapper.gp.gp_Vec
        :type Tguv1: OCC.wrapper.gp.gp_Vec2d
        :type Tguv2: OCC.wrapper.gp.gp_Vec2d
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ApproxInt.ApproxInt_SvSurfaces_Compute(self, *args)


    def Pnt(self, *args):
        """
        Pnt(ApproxInt_SvSurfaces self, Standard_Real const u1, Standard_Real const v1, Standard_Real const u2, Standard_Real const v2, gp_Pnt P)

        :type u1: float
        :type v1: float
        :type u2: float
        :type v2: float
        :type P: OCC.wrapper.gp.gp_Pnt

        """
        return _ApproxInt.ApproxInt_SvSurfaces_Pnt(self, *args)


    def SeekPoint(self, *args):
        """
        SeekPoint(ApproxInt_SvSurfaces self, Standard_Real const u1, Standard_Real const v1, Standard_Real const u2, Standard_Real const v2, IntSurf_PntOn2S Point) -> Standard_Boolean

        computes point on curve and parameters on the surfaces

        :type u1: float
        :type v1: float
        :type u2: float
        :type v2: float
        :type Point: OCC.wrapper.IntSurf.IntSurf_PntOn2S
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ApproxInt.ApproxInt_SvSurfaces_SeekPoint(self, *args)


    def Tangency(self, *args):
        """
        Tangency(ApproxInt_SvSurfaces self, Standard_Real const u1, Standard_Real const v1, Standard_Real const u2, Standard_Real const v2, gp_Vec Tg) -> Standard_Boolean

        :type u1: float
        :type v1: float
        :type u2: float
        :type v2: float
        :type Tg: OCC.wrapper.gp.gp_Vec
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ApproxInt.ApproxInt_SvSurfaces_Tangency(self, *args)


    def TangencyOnSurf1(self, *args):
        """
        TangencyOnSurf1(ApproxInt_SvSurfaces self, Standard_Real const u1, Standard_Real const v1, Standard_Real const u2, Standard_Real const v2, gp_Vec2d Tg) -> Standard_Boolean

        :type u1: float
        :type v1: float
        :type u2: float
        :type v2: float
        :type Tg: OCC.wrapper.gp.gp_Vec2d
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ApproxInt.ApproxInt_SvSurfaces_TangencyOnSurf1(self, *args)


    def TangencyOnSurf2(self, *args):
        """
        TangencyOnSurf2(ApproxInt_SvSurfaces self, Standard_Real const u1, Standard_Real const v1, Standard_Real const u2, Standard_Real const v2, gp_Vec2d Tg) -> Standard_Boolean

        :type u1: float
        :type v1: float
        :type u2: float
        :type v2: float
        :type Tg: OCC.wrapper.gp.gp_Vec2d
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ApproxInt.ApproxInt_SvSurfaces_TangencyOnSurf2(self, *args)

    __swig_destroy__ = _ApproxInt.delete_ApproxInt_SvSurfaces
ApproxInt_SvSurfaces_swigregister = _ApproxInt.ApproxInt_SvSurfaces_swigregister
ApproxInt_SvSurfaces_swigregister(ApproxInt_SvSurfaces)



