# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BRepAdaptor')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BRepAdaptor')
    _BRepAdaptor = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepAdaptor', [dirname(__file__)])
        except ImportError:
            import _BRepAdaptor
            return _BRepAdaptor
        try:
            _mod = imp.load_module('_BRepAdaptor', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BRepAdaptor = swig_import_helper()
    del swig_import_helper
else:
    import _BRepAdaptor
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepAdaptor.delete_SwigPyIterator

    def value(self):
        return _BRepAdaptor.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _BRepAdaptor.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _BRepAdaptor.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _BRepAdaptor.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _BRepAdaptor.SwigPyIterator_equal(self, x)

    def copy(self):
        return _BRepAdaptor.SwigPyIterator_copy(self)

    def next(self):
        return _BRepAdaptor.SwigPyIterator_next(self)

    def __next__(self):
        return _BRepAdaptor.SwigPyIterator___next__(self)

    def previous(self):
        return _BRepAdaptor.SwigPyIterator_previous(self)

    def advance(self, n):
        return _BRepAdaptor.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _BRepAdaptor.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _BRepAdaptor.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _BRepAdaptor.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _BRepAdaptor.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _BRepAdaptor.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _BRepAdaptor.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _BRepAdaptor.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BRepAdaptor.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_BRepAdaptor.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _BRepAdaptor.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BRepAdaptor.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BRepAdaptor.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _BRepAdaptor.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _BRepAdaptor.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _BRepAdaptor.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BRepAdaptor.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_BRepAdaptor.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _BRepAdaptor.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BRepAdaptor.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BRepAdaptor.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _BRepAdaptor.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _BRepAdaptor.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _BRepAdaptor.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _BRepAdaptor.ptr_to_number(item)
ptr_to_number = _BRepAdaptor.ptr_to_number

def HashCode(*args):
    return _BRepAdaptor.HashCode(*args)
HashCode = _BRepAdaptor.HashCode

def ptr_equal(a, b):
    return _BRepAdaptor.ptr_equal(a, b)
ptr_equal = _BRepAdaptor.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2dAdaptor
else:
    import Geom2dAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor2d
else:
    import Adaptor2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAdaptor
else:
    import GeomAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor3d
else:
    import Adaptor3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import math
else:
    import math
del _swig_python_version_info
class BRepAdaptor_HCompCurve(Adaptor3d.Adaptor3d_HCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BRepAdaptor_HCompCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BRepAdaptor_HCompCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BRepAdaptor_HCompCurve self) -> BRepAdaptor_HCompCurve
        __init__(BRepAdaptor_HCompCurve self, BRepAdaptor_CompCurve C) -> BRepAdaptor_HCompCurve

        Creates a GenHCurve from a Curve

        :type C: OCC.wrapper.BRepAdaptor.BRepAdaptor_CompCurve

        """
        this = _BRepAdaptor.new_BRepAdaptor_HCompCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Set(self, *args):
        """
        Set(BRepAdaptor_HCompCurve self, BRepAdaptor_CompCurve C)

        Sets the field of the GenHCurve.

        :type C: OCC.wrapper.BRepAdaptor.BRepAdaptor_CompCurve

        """
        return _BRepAdaptor.BRepAdaptor_HCompCurve_Set(self, *args)


    def Curve(self, *args):
        """
        Returns the curve used to create the GenHCurve.
        This is redefined from HCurve, cannot be inline.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Curve

        """
        res = _BRepAdaptor.BRepAdaptor_HCompCurve_Curve(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetCurve(self, *args):
        """
        GetCurve(BRepAdaptor_HCompCurve self) -> Adaptor3d_Curve

        Returns the curve used to create the GenHCurve.
        This is redefined from HCurve, cannot be inline.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Curve

        """
        return _BRepAdaptor.BRepAdaptor_HCompCurve_GetCurve(self, *args)


    def ChangeCurve(self, *args):
        """
        ChangeCurve(BRepAdaptor_HCompCurve self) -> BRepAdaptor_CompCurve

        Returns the curve used to create the GenHCurve.

        :rtype: OCC.wrapper.BRepAdaptor.BRepAdaptor_CompCurve

        """
        return _BRepAdaptor.BRepAdaptor_HCompCurve_ChangeCurve(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BRepAdaptor.BRepAdaptor_HCompCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BRepAdaptor.BRepAdaptor_HCompCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BRepAdaptor.BRepAdaptor_HCompCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BRepAdaptor.delete_BRepAdaptor_HCompCurve
BRepAdaptor_HCompCurve_swigregister = _BRepAdaptor.BRepAdaptor_HCompCurve_swigregister
BRepAdaptor_HCompCurve_swigregister(BRepAdaptor_HCompCurve)

def BRepAdaptor_HCompCurve_get_type_name(*args):
    """
    BRepAdaptor_HCompCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BRepAdaptor.BRepAdaptor_HCompCurve_get_type_name(*args)

def BRepAdaptor_HCompCurve_get_type_descriptor(*args):
    """
    BRepAdaptor_HCompCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BRepAdaptor.BRepAdaptor_HCompCurve_get_type_descriptor(*args)

class BRepAdaptor_HSurface(Adaptor3d.Adaptor3d_HSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BRepAdaptor_HSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BRepAdaptor_HSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BRepAdaptor_HSurface self) -> BRepAdaptor_HSurface
        __init__(BRepAdaptor_HSurface self, BRepAdaptor_Surface S) -> BRepAdaptor_HSurface

        Creates a GenHSurface from a Surface.

        :type S: OCC.wrapper.BRepAdaptor.BRepAdaptor_Surface

        """
        this = _BRepAdaptor.new_BRepAdaptor_HSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Set(self, *args):
        """
        Set(BRepAdaptor_HSurface self, BRepAdaptor_Surface S)

        Sets the field of the GenHSurface.

        :type S: OCC.wrapper.BRepAdaptor.BRepAdaptor_Surface

        """
        return _BRepAdaptor.BRepAdaptor_HSurface_Set(self, *args)


    def Surface(self, *args):
        """
        Returns a reference to the Surface inside the HSurface.
        This is redefined from HSurface, cannot be inline.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Surface

        """
        res = _BRepAdaptor.BRepAdaptor_HSurface_Surface(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeSurface(self, *args):
        """
        ChangeSurface(BRepAdaptor_HSurface self) -> BRepAdaptor_Surface

        Returns the surface used to create the GenHSurface.

        :rtype: OCC.wrapper.BRepAdaptor.BRepAdaptor_Surface

        """
        return _BRepAdaptor.BRepAdaptor_HSurface_ChangeSurface(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BRepAdaptor.BRepAdaptor_HSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BRepAdaptor.BRepAdaptor_HSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BRepAdaptor.BRepAdaptor_HSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BRepAdaptor.delete_BRepAdaptor_HSurface
BRepAdaptor_HSurface_swigregister = _BRepAdaptor.BRepAdaptor_HSurface_swigregister
BRepAdaptor_HSurface_swigregister(BRepAdaptor_HSurface)

def BRepAdaptor_HSurface_get_type_name(*args):
    """
    BRepAdaptor_HSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BRepAdaptor.BRepAdaptor_HSurface_get_type_name(*args)

def BRepAdaptor_HSurface_get_type_descriptor(*args):
    """
    BRepAdaptor_HSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BRepAdaptor.BRepAdaptor_HSurface_get_type_descriptor(*args)

class BRepAdaptor_HCurve(Adaptor3d.Adaptor3d_HCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BRepAdaptor_HCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BRepAdaptor_HCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BRepAdaptor_HCurve self) -> BRepAdaptor_HCurve
        __init__(BRepAdaptor_HCurve self, BRepAdaptor_Curve C) -> BRepAdaptor_HCurve

        Creates a GenHCurve from a Curve

        :type C: OCC.wrapper.BRepAdaptor.BRepAdaptor_Curve

        """
        this = _BRepAdaptor.new_BRepAdaptor_HCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Set(self, *args):
        """
        Set(BRepAdaptor_HCurve self, BRepAdaptor_Curve C)

        Sets the field of the GenHCurve.

        :type C: OCC.wrapper.BRepAdaptor.BRepAdaptor_Curve

        """
        return _BRepAdaptor.BRepAdaptor_HCurve_Set(self, *args)


    def Curve(self, *args):
        """
        Returns the curve used to create the GenHCurve.
        This is redefined from HCurve, cannot be inline.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Curve

        """
        res = _BRepAdaptor.BRepAdaptor_HCurve_Curve(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetCurve(self, *args):
        """
        GetCurve(BRepAdaptor_HCurve self) -> Adaptor3d_Curve

        Returns the curve used to create the GenHCurve.
        This is redefined from HCurve, cannot be inline.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Curve

        """
        return _BRepAdaptor.BRepAdaptor_HCurve_GetCurve(self, *args)


    def ChangeCurve(self, *args):
        """
        ChangeCurve(BRepAdaptor_HCurve self) -> BRepAdaptor_Curve

        Returns the curve used to create the GenHCurve.

        :rtype: OCC.wrapper.BRepAdaptor.BRepAdaptor_Curve

        """
        return _BRepAdaptor.BRepAdaptor_HCurve_ChangeCurve(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BRepAdaptor.BRepAdaptor_HCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BRepAdaptor.BRepAdaptor_HCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BRepAdaptor.BRepAdaptor_HCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BRepAdaptor.delete_BRepAdaptor_HCurve
BRepAdaptor_HCurve_swigregister = _BRepAdaptor.BRepAdaptor_HCurve_swigregister
BRepAdaptor_HCurve_swigregister(BRepAdaptor_HCurve)

def BRepAdaptor_HCurve_get_type_name(*args):
    """
    BRepAdaptor_HCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BRepAdaptor.BRepAdaptor_HCurve_get_type_name(*args)

def BRepAdaptor_HCurve_get_type_descriptor(*args):
    """
    BRepAdaptor_HCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BRepAdaptor.BRepAdaptor_HCurve_get_type_descriptor(*args)

class BRepAdaptor_HCurve2d(Adaptor2d.Adaptor2d_HCurve2d):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BRepAdaptor_HCurve2d
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BRepAdaptor_HCurve2d(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BRepAdaptor_HCurve2d self) -> BRepAdaptor_HCurve2d
        __init__(BRepAdaptor_HCurve2d self, BRepAdaptor_Curve2d C) -> BRepAdaptor_HCurve2d

        Creates a GenHCurve2d from a Curve

        :type C: OCC.wrapper.BRepAdaptor.BRepAdaptor_Curve2d

        """
        this = _BRepAdaptor.new_BRepAdaptor_HCurve2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Set(self, *args):
        """
        Set(BRepAdaptor_HCurve2d self, BRepAdaptor_Curve2d C)

        Sets the field of the GenHCurve2d.

        :type C: OCC.wrapper.BRepAdaptor.BRepAdaptor_Curve2d

        """
        return _BRepAdaptor.BRepAdaptor_HCurve2d_Set(self, *args)


    def Curve2d(self, *args):
        """
        Returns the curve used to create the GenHCurve2d.
        This is redefined from HCurve2d, cannot be inline.

        :rtype: OCC.wrapper.Adaptor2d.Adaptor2d_Curve2d

        """
        res = _BRepAdaptor.BRepAdaptor_HCurve2d_Curve2d(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeCurve2d(self, *args):
        """
        ChangeCurve2d(BRepAdaptor_HCurve2d self) -> BRepAdaptor_Curve2d

        Returns the curve used to create the GenHCurve.

        :rtype: OCC.wrapper.BRepAdaptor.BRepAdaptor_Curve2d

        """
        return _BRepAdaptor.BRepAdaptor_HCurve2d_ChangeCurve2d(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BRepAdaptor.BRepAdaptor_HCurve2d_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BRepAdaptor.BRepAdaptor_HCurve2d_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BRepAdaptor.BRepAdaptor_HCurve2d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BRepAdaptor.delete_BRepAdaptor_HCurve2d
BRepAdaptor_HCurve2d_swigregister = _BRepAdaptor.BRepAdaptor_HCurve2d_swigregister
BRepAdaptor_HCurve2d_swigregister(BRepAdaptor_HCurve2d)

def BRepAdaptor_HCurve2d_get_type_name(*args):
    """
    BRepAdaptor_HCurve2d_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BRepAdaptor.BRepAdaptor_HCurve2d_get_type_name(*args)

def BRepAdaptor_HCurve2d_get_type_descriptor(*args):
    """
    BRepAdaptor_HCurve2d_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BRepAdaptor.BRepAdaptor_HCurve2d_get_type_descriptor(*args)

class Handle_BRepAdaptor_HCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BRepAdaptor_HCurve self)

        Nullify the handle


        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BRepAdaptor_HCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BRepAdaptor_HCurve self, BRepAdaptor_HCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BRepAdaptor_HCurve self, Handle_BRepAdaptor_HCurve theHandle) -> Handle_BRepAdaptor_HCurve
        assign(Handle_BRepAdaptor_HCurve self, BRepAdaptor_HCurve thePtr) -> Handle_BRepAdaptor_HCurve
        assign(Handle_BRepAdaptor_HCurve self, Handle_BRepAdaptor_HCurve theHandle) -> Handle_BRepAdaptor_HCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BRepAdaptor_HCurve self) -> BRepAdaptor_HCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BRepAdaptor_HCurve self) -> BRepAdaptor_HCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BRepAdaptor_HCurve self) -> BRepAdaptor_HCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve___ref__(self, *args)


    def __hash__(self):
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BRepAdaptor.Handle_BRepAdaptor_HCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BRepAdaptor.new_Handle_BRepAdaptor_HCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BRepAdaptor.Handle_BRepAdaptor_HCurve_DownCast)
    __swig_destroy__ = _BRepAdaptor.delete_Handle_BRepAdaptor_HCurve

    def Set(self, *args):
        """
        Set(Handle_BRepAdaptor_HCurve self, BRepAdaptor_Curve C)

        Sets the field of the GenHCurve.

        :type C: OCC.wrapper.BRepAdaptor.BRepAdaptor_Curve

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_Set(self, *args)


    def Curve(self, *args):
        """
        Returns the curve used to create the GenHCurve.
        This is redefined from HCurve, cannot be inline.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Curve

        """
        res = _BRepAdaptor.Handle_BRepAdaptor_HCurve_Curve(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetCurve(self, *args):
        """
        GetCurve(Handle_BRepAdaptor_HCurve self) -> Adaptor3d_Curve

        Returns the curve used to create the GenHCurve.
        This is redefined from HCurve, cannot be inline.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Curve

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_GetCurve(self, *args)


    def ChangeCurve(self, *args):
        """
        ChangeCurve(Handle_BRepAdaptor_HCurve self) -> BRepAdaptor_Curve

        Returns the curve used to create the GenHCurve.

        :rtype: OCC.wrapper.BRepAdaptor.BRepAdaptor_Curve

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_ChangeCurve(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BRepAdaptor_HCurve self) -> char const *

        :rtype: const char *

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BRepAdaptor.Handle_BRepAdaptor_HCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BRepAdaptor.Handle_BRepAdaptor_HCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FirstParameter(self, *args):
        """
        FirstParameter(Handle_BRepAdaptor_HCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_FirstParameter(self, *args)


    def LastParameter(self, *args):
        """
        LastParameter(Handle_BRepAdaptor_HCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_LastParameter(self, *args)


    def Continuity(self, *args):
        """
        Continuity(Handle_BRepAdaptor_HCurve self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_Continuity(self, *args)


    def NbIntervals(self, *args):
        """
        NbIntervals(Handle_BRepAdaptor_HCurve self, GeomAbs_Shape const S) -> Standard_Integer

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_NbIntervals(self, *args)


    def Intervals(self, *args):
        """
        Intervals(Handle_BRepAdaptor_HCurve self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        Stores in <T> the  parameters bounding the intervals
        of continuity <S>.

        The array must provide  enough room to  accomodate
        for the parameters. i.e. T.Length() > NbIntervals()

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_Intervals(self, *args)


    def Trim(self, *args):
        """
        Trim(Handle_BRepAdaptor_HCurve self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HCurve

        Returns    a  curve equivalent   of  <me>  between
        parameters <First>  and <Last>. <Tol>  is used  to
        test for 3d points confusion.

        If <First> >= <Last>

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_Trim(self, *args)


    def IsClosed(self, *args):
        """
        IsClosed(Handle_BRepAdaptor_HCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_IsClosed(self, *args)


    def IsPeriodic(self, *args):
        """
        IsPeriodic(Handle_BRepAdaptor_HCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_IsPeriodic(self, *args)


    def Period(self, *args):
        """
        Period(Handle_BRepAdaptor_HCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_Period(self, *args)


    def Value(self, *args):
        """
        Value(Handle_BRepAdaptor_HCurve self, Standard_Real const U) -> gp_Pnt

        :type U: float
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_Value(self, *args)


    def D0(self, *args):
        """
        D0(Handle_BRepAdaptor_HCurve self, Standard_Real const U, gp_Pnt P)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_D0(self, *args)


    def D1(self, *args):
        """
        D1(Handle_BRepAdaptor_HCurve self, Standard_Real const U, gp_Pnt P, gp_Vec V)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V: OCC.wrapper.gp.gp_Vec

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_D1(self, *args)


    def D2(self, *args):
        """
        D2(Handle_BRepAdaptor_HCurve self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_D2(self, *args)


    def D3(self, *args):
        """
        D3(Handle_BRepAdaptor_HCurve self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2, gp_Vec V3)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec
        :type V3: OCC.wrapper.gp.gp_Vec

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_D3(self, *args)


    def DN(self, *args):
        """
        DN(Handle_BRepAdaptor_HCurve self, Standard_Real const U, Standard_Integer const N) -> gp_Vec

        :type U: float
        :type N: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_DN(self, *args)


    def Resolution(self, *args):
        """
        Resolution(Handle_BRepAdaptor_HCurve self, Standard_Real const R3d) -> Standard_Real

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_Resolution(self, *args)


    def GetType(self, *args):
        """
        GetType(Handle_BRepAdaptor_HCurve self) -> GeomAbs_CurveType

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_CurveType

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_GetType(self, *args)


    def Line(self, *args):
        """
        Line(Handle_BRepAdaptor_HCurve self) -> gp_Lin

        :rtype: OCC.wrapper.gp.gp_Lin

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_Line(self, *args)


    def Circle(self, *args):
        """
        Circle(Handle_BRepAdaptor_HCurve self) -> gp_Circ

        :rtype: OCC.wrapper.gp.gp_Circ

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_Circle(self, *args)


    def Ellipse(self, *args):
        """
        Ellipse(Handle_BRepAdaptor_HCurve self) -> gp_Elips

        :rtype: OCC.wrapper.gp.gp_Elips

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_Ellipse(self, *args)


    def Hyperbola(self, *args):
        """
        Hyperbola(Handle_BRepAdaptor_HCurve self) -> gp_Hypr

        :rtype: OCC.wrapper.gp.gp_Hypr

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_Hyperbola(self, *args)


    def Parabola(self, *args):
        """
        Parabola(Handle_BRepAdaptor_HCurve self) -> gp_Parab

        :rtype: OCC.wrapper.gp.gp_Parab

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_Parabola(self, *args)


    def Degree(self, *args):
        """
        Degree(Handle_BRepAdaptor_HCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_Degree(self, *args)


    def IsRational(self, *args):
        """
        IsRational(Handle_BRepAdaptor_HCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_IsRational(self, *args)


    def NbPoles(self, *args):
        """
        NbPoles(Handle_BRepAdaptor_HCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_NbPoles(self, *args)


    def NbKnots(self, *args):
        """
        NbKnots(Handle_BRepAdaptor_HCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_NbKnots(self, *args)


    def Bezier(self, *args):
        """
        Bezier(Handle_BRepAdaptor_HCurve self) -> Handle_Geom_BezierCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_BezierCurve

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_Bezier(self, *args)


    def BSpline(self, *args):
        """
        BSpline(Handle_BRepAdaptor_HCurve self) -> Handle_Geom_BSplineCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineCurve

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_BSpline(self, *args)


    def OffsetCurve(self, *args):
        """
        OffsetCurve(Handle_BRepAdaptor_HCurve self) -> Handle_Geom_OffsetCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_OffsetCurve

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_OffsetCurve(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_BRepAdaptor_HCurve self)

        Memory deallocator for transient classes


        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BRepAdaptor_HCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BRepAdaptor_HCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BRepAdaptor_HCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BRepAdaptor_HCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BRepAdaptor_HCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BRepAdaptor_HCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BRepAdaptor_HCurve self)

        Increments the reference counter of this object


        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BRepAdaptor_HCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve_DecrementRefCounter(self, *args)

Handle_BRepAdaptor_HCurve_swigregister = _BRepAdaptor.Handle_BRepAdaptor_HCurve_swigregister
Handle_BRepAdaptor_HCurve_swigregister(Handle_BRepAdaptor_HCurve)

def Handle_BRepAdaptor_HCurve_DownCast(thing):
    return _BRepAdaptor.Handle_BRepAdaptor_HCurve_DownCast(thing)
Handle_BRepAdaptor_HCurve_DownCast = _BRepAdaptor.Handle_BRepAdaptor_HCurve_DownCast

class BRepAdaptor_Curve(Adaptor3d.Adaptor3d_Curve):
    """
    The Curve from BRepAdaptor  allows to use  an Edge
    of the BRep topology like a 3D curve.

    It has the methods the class Curve from Adaptor3d.

    It  is created or  Initialized  with  an Edge.  It
    takes  into account local  coordinate systems.  If
    the Edge has a 3D curve it is  use  with priority.
    If the edge  has no 3D curve one  of the curves on
    surface is used. It is possible to enforce using a
    curve on surface by creating  or initialising with
    an Edge and a Face.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BRepAdaptor_Curve self) -> BRepAdaptor_Curve
        __init__(BRepAdaptor_Curve self, TopoDS_Edge E) -> BRepAdaptor_Curve
        __init__(BRepAdaptor_Curve self, TopoDS_Edge E, TopoDS_Face F) -> BRepAdaptor_Curve

        Creates a Curve to acces to  the geometry  of edge
        <E>.   The geometry  will   be  computed using the
        parametric curve of <E> on the face  <F>. An Error
        is  raised if  the edge does  not have a pcurve on
        the face.

        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :type F: OCC.wrapper.TopoDS.TopoDS_Face

        """
        this = _BRepAdaptor.new_BRepAdaptor_Curve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Initialize(self, *args):
        """
        Initialize(BRepAdaptor_Curve self, TopoDS_Edge E)
        Initialize(BRepAdaptor_Curve self, TopoDS_Edge E, TopoDS_Face F)

        Sets the Curve <me>  to acces to  the  geometry of
        edge <E>.  The geometry will be computed using the
        parametric curve of <E>  on the face <F>. An Error
        is raised if the edge  does not  have a pcurve  on
        the face.

        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :type F: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Initialize(self, *args)


    def Trsf(self, *args):
        """
        Returns the coordinate system of the curve.

        :rtype: OCC.wrapper.gp.gp_Trsf

        """
        res = _BRepAdaptor.BRepAdaptor_Curve_Trsf(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Is3DCurve(self, *args):
        """
        Is3DCurve(BRepAdaptor_Curve self) -> Standard_Boolean

        Returns True if the edge geometry is computed from
        a 3D curve.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Is3DCurve(self, *args)


    def IsCurveOnSurface(self, *args):
        """
        IsCurveOnSurface(BRepAdaptor_Curve self) -> Standard_Boolean

        Returns True if the edge geometry is computed from
        a pcurve on a surface.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.BRepAdaptor_Curve_IsCurveOnSurface(self, *args)


    def Curve(self, *args):
        """
        Returns the Curve of  the  edge.

        :rtype: OCC.wrapper.GeomAdaptor.GeomAdaptor_Curve

        """
        res = _BRepAdaptor.BRepAdaptor_Curve_Curve(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def CurveOnSurface(self, *args):
        """
        CurveOnSurface(BRepAdaptor_Curve self) -> Adaptor3d_CurveOnSurface

        Returns the CurveOnSurface of the edge.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_CurveOnSurface

        """
        return _BRepAdaptor.BRepAdaptor_Curve_CurveOnSurface(self, *args)


    def Edge(self, *args):
        """
        Returns the edge.

        :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        res = _BRepAdaptor.BRepAdaptor_Curve_Edge(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Tolerance(self, *args):
        """
        Tolerance(BRepAdaptor_Curve self) -> Standard_Real

        Returns the edge tolerance.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Tolerance(self, *args)


    def FirstParameter(self, *args):
        """
        FirstParameter(BRepAdaptor_Curve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepAdaptor.BRepAdaptor_Curve_FirstParameter(self, *args)


    def LastParameter(self, *args):
        """
        LastParameter(BRepAdaptor_Curve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepAdaptor.BRepAdaptor_Curve_LastParameter(self, *args)


    def Continuity(self, *args):
        """
        Continuity(BRepAdaptor_Curve self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Continuity(self, *args)


    def NbIntervals(self, *args):
        """
        NbIntervals(BRepAdaptor_Curve self, GeomAbs_Shape const S) -> Standard_Integer

        Returns  the number  of  intervals for  continuity
        <S>. May be one if Continuity(me) >= <S>

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.BRepAdaptor_Curve_NbIntervals(self, *args)


    def Intervals(self, *args):
        """
        Intervals(BRepAdaptor_Curve self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        Stores in <T> the  parameters bounding the intervals
        of continuity <S>.

        The array must provide  enough room to  accomodate
        for the parameters. i.e. T.Length() > NbIntervals()

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Intervals(self, *args)


    def Trim(self, *args):
        """
        Trim(BRepAdaptor_Curve self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HCurve

        Returns    a  curve equivalent   of  <me>  between
        parameters <First>  and <Last>. <Tol>  is used  to
        test for 3d points confusion.
        If <First> >= <Last>

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Trim(self, *args)


    def IsClosed(self, *args):
        """
        IsClosed(BRepAdaptor_Curve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.BRepAdaptor_Curve_IsClosed(self, *args)


    def IsPeriodic(self, *args):
        """
        IsPeriodic(BRepAdaptor_Curve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.BRepAdaptor_Curve_IsPeriodic(self, *args)


    def Period(self, *args):
        """
        Period(BRepAdaptor_Curve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Period(self, *args)


    def Value(self, *args):
        """
        Value(BRepAdaptor_Curve self, Standard_Real const U) -> gp_Pnt

        Computes the point of parameter U on the curve

        :type U: float
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Value(self, *args)


    def D0(self, *args):
        """
        D0(BRepAdaptor_Curve self, Standard_Real const U, gp_Pnt P)

        Computes the point of parameter U.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt

        """
        return _BRepAdaptor.BRepAdaptor_Curve_D0(self, *args)


    def D1(self, *args):
        """
        D1(BRepAdaptor_Curve self, Standard_Real const U, gp_Pnt P, gp_Vec V)

        Computes the point of parameter U on the curve
        with its first derivative.
        Raised if the continuity of the current interval
        is not C1.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V: OCC.wrapper.gp.gp_Vec

        """
        return _BRepAdaptor.BRepAdaptor_Curve_D1(self, *args)


    def D2(self, *args):
        """
        D2(BRepAdaptor_Curve self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2)

        Returns the point P of parameter U, the first and second
        derivatives V1 and V2.
        Raised if the continuity of the current interval
        is not C2.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec

        """
        return _BRepAdaptor.BRepAdaptor_Curve_D2(self, *args)


    def D3(self, *args):
        """
        D3(BRepAdaptor_Curve self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2, gp_Vec V3)

        Returns the point P of parameter U, the first, the second
        and the third derivative.
        Raised if the continuity of the current interval
        is not C3.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec
        :type V3: OCC.wrapper.gp.gp_Vec

        """
        return _BRepAdaptor.BRepAdaptor_Curve_D3(self, *args)


    def DN(self, *args):
        """
        DN(BRepAdaptor_Curve self, Standard_Real const U, Standard_Integer const N) -> gp_Vec

        The returned vector gives the value of the derivative for the
        order of derivation N.
        Raised if the continuity of the current interval
        is not CN.
        Raised if N < 1.

        :type U: float
        :type N: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _BRepAdaptor.BRepAdaptor_Curve_DN(self, *args)


    def Resolution(self, *args):
        """
        Resolution(BRepAdaptor_Curve self, Standard_Real const R3d) -> Standard_Real

        returns the parametric resolution

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Resolution(self, *args)


    def GetType(self, *args):
        """
        GetType(BRepAdaptor_Curve self) -> GeomAbs_CurveType

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_CurveType

        """
        return _BRepAdaptor.BRepAdaptor_Curve_GetType(self, *args)


    def Line(self, *args):
        """
        Line(BRepAdaptor_Curve self) -> gp_Lin

        :rtype: OCC.wrapper.gp.gp_Lin

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Line(self, *args)


    def Circle(self, *args):
        """
        Circle(BRepAdaptor_Curve self) -> gp_Circ

        :rtype: OCC.wrapper.gp.gp_Circ

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Circle(self, *args)


    def Ellipse(self, *args):
        """
        Ellipse(BRepAdaptor_Curve self) -> gp_Elips

        :rtype: OCC.wrapper.gp.gp_Elips

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Ellipse(self, *args)


    def Hyperbola(self, *args):
        """
        Hyperbola(BRepAdaptor_Curve self) -> gp_Hypr

        :rtype: OCC.wrapper.gp.gp_Hypr

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Hyperbola(self, *args)


    def Parabola(self, *args):
        """
        Parabola(BRepAdaptor_Curve self) -> gp_Parab

        :rtype: OCC.wrapper.gp.gp_Parab

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Parabola(self, *args)


    def Degree(self, *args):
        """
        Degree(BRepAdaptor_Curve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Degree(self, *args)


    def IsRational(self, *args):
        """
        IsRational(BRepAdaptor_Curve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.BRepAdaptor_Curve_IsRational(self, *args)


    def NbPoles(self, *args):
        """
        NbPoles(BRepAdaptor_Curve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.BRepAdaptor_Curve_NbPoles(self, *args)


    def NbKnots(self, *args):
        """
        NbKnots(BRepAdaptor_Curve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.BRepAdaptor_Curve_NbKnots(self, *args)


    def Bezier(self, *args):
        """
        Bezier(BRepAdaptor_Curve self) -> Handle_Geom_BezierCurve

        Warning :
        This  will    make a copy of the Bezier Curve
        since it applies to it myTsrf . Be carefull when
        using this method

        :rtype: OCC.wrapper.Geom.Handle_Geom_BezierCurve

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Bezier(self, *args)


    def BSpline(self, *args):
        """
        BSpline(BRepAdaptor_Curve self) -> Handle_Geom_BSplineCurve

        Warning :
        This will   make a copy of the BSpline Curve
        since it applies to it myTsrf . Be carefull when
        using this method

        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineCurve

        """
        return _BRepAdaptor.BRepAdaptor_Curve_BSpline(self, *args)


    def OffsetCurve(self, *args):
        """
        OffsetCurve(BRepAdaptor_Curve self) -> Handle_Geom_OffsetCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_OffsetCurve

        """
        return _BRepAdaptor.BRepAdaptor_Curve_OffsetCurve(self, *args)

    __swig_destroy__ = _BRepAdaptor.delete_BRepAdaptor_Curve
BRepAdaptor_Curve_swigregister = _BRepAdaptor.BRepAdaptor_Curve_swigregister
BRepAdaptor_Curve_swigregister(BRepAdaptor_Curve)

class BRepAdaptor_Surface(Adaptor3d.Adaptor3d_Surface):
    """
    The Surface from BRepAdaptor allows to  use a Face
    of the BRep topology look like a 3D surface.

    It  has  the methods  of  the class   Surface from
    Adaptor3d.

    It is created or initialized with a Face. It takes
    into account the local coordinates system.

    The  u,v parameter range is   the minmax value for
    the  restriction,  unless  the flag restriction is
    set to false.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BRepAdaptor_Surface self) -> BRepAdaptor_Surface
        __init__(BRepAdaptor_Surface self, TopoDS_Face F, Standard_Boolean const R) -> BRepAdaptor_Surface

        Creates a surface to  access the geometry  of <F>.
        If  <Restriction> is  true  the parameter range is
        the  parameter  range  in   the  UV space  of  the
        restriction.

        :type F: OCC.wrapper.TopoDS.TopoDS_Face
        :type R: bool

        """
        this = _BRepAdaptor.new_BRepAdaptor_Surface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Initialize(self, *args):
        """
        Initialize(BRepAdaptor_Surface self, TopoDS_Face F, Standard_Boolean const Restriction)

        Sets the surface to the geometry of <F>.

        :type F: OCC.wrapper.TopoDS.TopoDS_Face
        :type Restriction: bool

        """
        return _BRepAdaptor.BRepAdaptor_Surface_Initialize(self, *args)


    def Surface(self, *args):
        """
        Returns the surface.

        :rtype: OCC.wrapper.GeomAdaptor.GeomAdaptor_Surface

        """
        res = _BRepAdaptor.BRepAdaptor_Surface_Surface(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeSurface(self, *args):
        """
        ChangeSurface(BRepAdaptor_Surface self) -> GeomAdaptor_Surface

        Returns the surface.

        :rtype: OCC.wrapper.GeomAdaptor.GeomAdaptor_Surface

        """
        return _BRepAdaptor.BRepAdaptor_Surface_ChangeSurface(self, *args)


    def Trsf(self, *args):
        """
        Returns the surface coordinate system.

        :rtype: OCC.wrapper.gp.gp_Trsf

        """
        res = _BRepAdaptor.BRepAdaptor_Surface_Trsf(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Face(self, *args):
        """
        Returns the face.

        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        res = _BRepAdaptor.BRepAdaptor_Surface_Face(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Tolerance(self, *args):
        """
        Tolerance(BRepAdaptor_Surface self) -> Standard_Real

        Returns the face tolerance.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepAdaptor.BRepAdaptor_Surface_Tolerance(self, *args)


    def FirstUParameter(self, *args):
        """
        FirstUParameter(BRepAdaptor_Surface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepAdaptor.BRepAdaptor_Surface_FirstUParameter(self, *args)


    def LastUParameter(self, *args):
        """
        LastUParameter(BRepAdaptor_Surface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepAdaptor.BRepAdaptor_Surface_LastUParameter(self, *args)


    def FirstVParameter(self, *args):
        """
        FirstVParameter(BRepAdaptor_Surface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepAdaptor.BRepAdaptor_Surface_FirstVParameter(self, *args)


    def LastVParameter(self, *args):
        """
        LastVParameter(BRepAdaptor_Surface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepAdaptor.BRepAdaptor_Surface_LastVParameter(self, *args)


    def UContinuity(self, *args):
        """
        UContinuity(BRepAdaptor_Surface self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _BRepAdaptor.BRepAdaptor_Surface_UContinuity(self, *args)


    def VContinuity(self, *args):
        """
        VContinuity(BRepAdaptor_Surface self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _BRepAdaptor.BRepAdaptor_Surface_VContinuity(self, *args)


    def NbUIntervals(self, *args):
        """
        NbUIntervals(BRepAdaptor_Surface self, GeomAbs_Shape const S) -> Standard_Integer

        If necessary, breaks the surface in U intervals of
        continuity    <S>.  And   returns  the  number  of
        intervals.

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.BRepAdaptor_Surface_NbUIntervals(self, *args)


    def NbVIntervals(self, *args):
        """
        NbVIntervals(BRepAdaptor_Surface self, GeomAbs_Shape const S) -> Standard_Integer

        If necessary, breaks the surface in V intervals of
        continuity    <S>.  And   returns  the  number  of
        intervals.

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.BRepAdaptor_Surface_NbVIntervals(self, *args)


    def UIntervals(self, *args):
        """
        UIntervals(BRepAdaptor_Surface self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        Returns the  intervals with the requested continuity
        in the U direction.

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _BRepAdaptor.BRepAdaptor_Surface_UIntervals(self, *args)


    def VIntervals(self, *args):
        """
        VIntervals(BRepAdaptor_Surface self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        Returns the  intervals with the requested continuity
        in the V direction.

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _BRepAdaptor.BRepAdaptor_Surface_VIntervals(self, *args)


    def UTrim(self, *args):
        """
        UTrim(BRepAdaptor_Surface self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HSurface

        Returns    a  surface trimmed in the U direction
        equivalent   of  <me>  between
        parameters <First>  and <Last>. <Tol>  is used  to
        test for 3d points confusion.
        If <First> >= <Last>

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _BRepAdaptor.BRepAdaptor_Surface_UTrim(self, *args)


    def VTrim(self, *args):
        """
        VTrim(BRepAdaptor_Surface self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HSurface

        Returns    a  surface trimmed in the V direction  between
        parameters <First>  and <Last>. <Tol>  is used  to
        test for 3d points confusion.
        If <First> >= <Last>

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _BRepAdaptor.BRepAdaptor_Surface_VTrim(self, *args)


    def IsUClosed(self, *args):
        """
        IsUClosed(BRepAdaptor_Surface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.BRepAdaptor_Surface_IsUClosed(self, *args)


    def IsVClosed(self, *args):
        """
        IsVClosed(BRepAdaptor_Surface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.BRepAdaptor_Surface_IsVClosed(self, *args)


    def IsUPeriodic(self, *args):
        """
        IsUPeriodic(BRepAdaptor_Surface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.BRepAdaptor_Surface_IsUPeriodic(self, *args)


    def UPeriod(self, *args):
        """
        UPeriod(BRepAdaptor_Surface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepAdaptor.BRepAdaptor_Surface_UPeriod(self, *args)


    def IsVPeriodic(self, *args):
        """
        IsVPeriodic(BRepAdaptor_Surface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.BRepAdaptor_Surface_IsVPeriodic(self, *args)


    def VPeriod(self, *args):
        """
        VPeriod(BRepAdaptor_Surface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepAdaptor.BRepAdaptor_Surface_VPeriod(self, *args)


    def Value(self, *args):
        """
        Value(BRepAdaptor_Surface self, Standard_Real const U, Standard_Real const V) -> gp_Pnt

        Computes the point of parameters U,V on the surface.

        :type U: float
        :type V: float
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _BRepAdaptor.BRepAdaptor_Surface_Value(self, *args)


    def D0(self, *args):
        """
        D0(BRepAdaptor_Surface self, Standard_Real const U, Standard_Real const V, gp_Pnt P)

        Computes the point of parameters U,V on the surface.

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt

        """
        return _BRepAdaptor.BRepAdaptor_Surface_D0(self, *args)


    def D1(self, *args):
        """
        D1(BRepAdaptor_Surface self, Standard_Real const U, Standard_Real const V, gp_Pnt P, gp_Vec D1U, gp_Vec D1V)

        Computes the point  and the first derivatives on
        the surface.
        Raised   if  the continuity  of   the  current
        intervals is not C1.

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type D1U: OCC.wrapper.gp.gp_Vec
        :type D1V: OCC.wrapper.gp.gp_Vec

        """
        return _BRepAdaptor.BRepAdaptor_Surface_D1(self, *args)


    def D2(self, *args):
        """
        D2(BRepAdaptor_Surface self, Standard_Real const U, Standard_Real const V, gp_Pnt P, gp_Vec D1U, gp_Vec D1V, gp_Vec D2U, gp_Vec D2V, gp_Vec D2UV)

        Computes   the point,  the  first  and  second
        derivatives on the surface.
        Raised  if   the   continuity   of the current
        intervals is not C2.

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type D1U: OCC.wrapper.gp.gp_Vec
        :type D1V: OCC.wrapper.gp.gp_Vec
        :type D2U: OCC.wrapper.gp.gp_Vec
        :type D2V: OCC.wrapper.gp.gp_Vec
        :type D2UV: OCC.wrapper.gp.gp_Vec

        """
        return _BRepAdaptor.BRepAdaptor_Surface_D2(self, *args)


    def D3(self, *args):
        """
        D3(BRepAdaptor_Surface self, Standard_Real const U, Standard_Real const V, gp_Pnt P, gp_Vec D1U, gp_Vec D1V, gp_Vec D2U, gp_Vec D2V, gp_Vec D2UV, gp_Vec D3U, gp_Vec D3V, gp_Vec D3UUV, gp_Vec D3UVV)

        Computes the point,  the first, second and third
        derivatives on the surface.
        Raised  if   the   continuity   of the current
        intervals is not C3.

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type D1U: OCC.wrapper.gp.gp_Vec
        :type D1V: OCC.wrapper.gp.gp_Vec
        :type D2U: OCC.wrapper.gp.gp_Vec
        :type D2V: OCC.wrapper.gp.gp_Vec
        :type D2UV: OCC.wrapper.gp.gp_Vec
        :type D3U: OCC.wrapper.gp.gp_Vec
        :type D3V: OCC.wrapper.gp.gp_Vec
        :type D3UUV: OCC.wrapper.gp.gp_Vec
        :type D3UVV: OCC.wrapper.gp.gp_Vec

        """
        return _BRepAdaptor.BRepAdaptor_Surface_D3(self, *args)


    def DN(self, *args):
        """
        DN(BRepAdaptor_Surface self, Standard_Real const U, Standard_Real const V, Standard_Integer const Nu, Standard_Integer const Nv) -> gp_Vec

        Computes the derivative of order Nu in the direction
        U and Nv in the direction V at the point P(U, V).
        Raised if the current U  interval is not not CNu
        and the current V interval is not CNv.
        Raised if Nu + Nv < 1 or Nu < 0 or Nv < 0.

        :type U: float
        :type V: float
        :type Nu: int
        :type Nv: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _BRepAdaptor.BRepAdaptor_Surface_DN(self, *args)


    def UResolution(self, *args):
        """
        UResolution(BRepAdaptor_Surface self, Standard_Real const R3d) -> Standard_Real

        Returns the parametric U  resolution corresponding
        to the real space resolution <R3d>.

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepAdaptor.BRepAdaptor_Surface_UResolution(self, *args)


    def VResolution(self, *args):
        """
        VResolution(BRepAdaptor_Surface self, Standard_Real const R3d) -> Standard_Real

        Returns the parametric V  resolution corresponding
        to the real space resolution <R3d>.

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepAdaptor.BRepAdaptor_Surface_VResolution(self, *args)


    def GetType(self, *args):
        """
        GetType(BRepAdaptor_Surface self) -> GeomAbs_SurfaceType

        Returns the type of the surface : Plane, Cylinder,
        Cone,      Sphere,        Torus,    BezierSurface,
        BSplineSurface,               SurfaceOfRevolution,
        SurfaceOfExtrusion, OtherSurface

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_SurfaceType

        """
        return _BRepAdaptor.BRepAdaptor_Surface_GetType(self, *args)


    def Plane(self, *args):
        """
        Plane(BRepAdaptor_Surface self) -> gp_Pln

        :rtype: OCC.wrapper.gp.gp_Pln

        """
        return _BRepAdaptor.BRepAdaptor_Surface_Plane(self, *args)


    def Cylinder(self, *args):
        """
        Cylinder(BRepAdaptor_Surface self) -> gp_Cylinder

        :rtype: OCC.wrapper.gp.gp_Cylinder

        """
        return _BRepAdaptor.BRepAdaptor_Surface_Cylinder(self, *args)


    def Cone(self, *args):
        """
        Cone(BRepAdaptor_Surface self) -> gp_Cone

        :rtype: OCC.wrapper.gp.gp_Cone

        """
        return _BRepAdaptor.BRepAdaptor_Surface_Cone(self, *args)


    def Sphere(self, *args):
        """
        Sphere(BRepAdaptor_Surface self) -> gp_Sphere

        :rtype: OCC.wrapper.gp.gp_Sphere

        """
        return _BRepAdaptor.BRepAdaptor_Surface_Sphere(self, *args)


    def Torus(self, *args):
        """
        Torus(BRepAdaptor_Surface self) -> gp_Torus

        :rtype: OCC.wrapper.gp.gp_Torus

        """
        return _BRepAdaptor.BRepAdaptor_Surface_Torus(self, *args)


    def UDegree(self, *args):
        """
        UDegree(BRepAdaptor_Surface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.BRepAdaptor_Surface_UDegree(self, *args)


    def NbUPoles(self, *args):
        """
        NbUPoles(BRepAdaptor_Surface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.BRepAdaptor_Surface_NbUPoles(self, *args)


    def VDegree(self, *args):
        """
        VDegree(BRepAdaptor_Surface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.BRepAdaptor_Surface_VDegree(self, *args)


    def NbVPoles(self, *args):
        """
        NbVPoles(BRepAdaptor_Surface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.BRepAdaptor_Surface_NbVPoles(self, *args)


    def NbUKnots(self, *args):
        """
        NbUKnots(BRepAdaptor_Surface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.BRepAdaptor_Surface_NbUKnots(self, *args)


    def NbVKnots(self, *args):
        """
        NbVKnots(BRepAdaptor_Surface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.BRepAdaptor_Surface_NbVKnots(self, *args)


    def IsURational(self, *args):
        """
        IsURational(BRepAdaptor_Surface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.BRepAdaptor_Surface_IsURational(self, *args)


    def IsVRational(self, *args):
        """
        IsVRational(BRepAdaptor_Surface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.BRepAdaptor_Surface_IsVRational(self, *args)


    def Bezier(self, *args):
        """
        Bezier(BRepAdaptor_Surface self) -> Handle_Geom_BezierSurface

        :rtype: OCC.wrapper.Geom.Handle_Geom_BezierSurface

        """
        return _BRepAdaptor.BRepAdaptor_Surface_Bezier(self, *args)


    def BSpline(self, *args):
        """
        BSpline(BRepAdaptor_Surface self) -> Handle_Geom_BSplineSurface

        Warning : this will make a copy of the
        BSpline Surface since it applies
        to it the myTsrf transformation
        Be Carefull when using this method

        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineSurface

        """
        return _BRepAdaptor.BRepAdaptor_Surface_BSpline(self, *args)


    def AxeOfRevolution(self, *args):
        """
        AxeOfRevolution(BRepAdaptor_Surface self) -> gp_Ax1

        :rtype: OCC.wrapper.gp.gp_Ax1

        """
        return _BRepAdaptor.BRepAdaptor_Surface_AxeOfRevolution(self, *args)


    def Direction(self, *args):
        """
        Direction(BRepAdaptor_Surface self) -> gp_Dir

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _BRepAdaptor.BRepAdaptor_Surface_Direction(self, *args)


    def BasisCurve(self, *args):
        """
        BasisCurve(BRepAdaptor_Surface self) -> Handle_Adaptor3d_HCurve

        only for SurfaceOfExtrusion and SurfaceOfRevolution
        Warning: this will make a copy of the underlying curve
        since it applies to it the transformation
        myTrsf. Be carefull when using this method.

        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve

        """
        return _BRepAdaptor.BRepAdaptor_Surface_BasisCurve(self, *args)


    def BasisSurface(self, *args):
        """
        BasisSurface(BRepAdaptor_Surface self) -> Handle_Adaptor3d_HSurface

        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _BRepAdaptor.BRepAdaptor_Surface_BasisSurface(self, *args)


    def OffsetValue(self, *args):
        """
        OffsetValue(BRepAdaptor_Surface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepAdaptor.BRepAdaptor_Surface_OffsetValue(self, *args)

    __swig_destroy__ = _BRepAdaptor.delete_BRepAdaptor_Surface
BRepAdaptor_Surface_swigregister = _BRepAdaptor.BRepAdaptor_Surface_swigregister
BRepAdaptor_Surface_swigregister(BRepAdaptor_Surface)

class Handle_BRepAdaptor_HCompCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BRepAdaptor_HCompCurve self)

        Nullify the handle


        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BRepAdaptor_HCompCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BRepAdaptor_HCompCurve self, BRepAdaptor_HCompCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BRepAdaptor_HCompCurve self, Handle_BRepAdaptor_HCompCurve theHandle) -> Handle_BRepAdaptor_HCompCurve
        assign(Handle_BRepAdaptor_HCompCurve self, BRepAdaptor_HCompCurve thePtr) -> Handle_BRepAdaptor_HCompCurve
        assign(Handle_BRepAdaptor_HCompCurve self, Handle_BRepAdaptor_HCompCurve theHandle) -> Handle_BRepAdaptor_HCompCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BRepAdaptor_HCompCurve self) -> BRepAdaptor_HCompCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BRepAdaptor_HCompCurve self) -> BRepAdaptor_HCompCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BRepAdaptor_HCompCurve self) -> BRepAdaptor_HCompCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve___ref__(self, *args)


    def __hash__(self):
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BRepAdaptor.new_Handle_BRepAdaptor_HCompCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BRepAdaptor.Handle_BRepAdaptor_HCompCurve_DownCast)
    __swig_destroy__ = _BRepAdaptor.delete_Handle_BRepAdaptor_HCompCurve

    def Set(self, *args):
        """
        Set(Handle_BRepAdaptor_HCompCurve self, BRepAdaptor_CompCurve C)

        Sets the field of the GenHCurve.

        :type C: OCC.wrapper.BRepAdaptor.BRepAdaptor_CompCurve

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_Set(self, *args)


    def Curve(self, *args):
        """
        Returns the curve used to create the GenHCurve.
        This is redefined from HCurve, cannot be inline.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Curve

        """
        res = _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_Curve(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetCurve(self, *args):
        """
        GetCurve(Handle_BRepAdaptor_HCompCurve self) -> Adaptor3d_Curve

        Returns the curve used to create the GenHCurve.
        This is redefined from HCurve, cannot be inline.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Curve

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_GetCurve(self, *args)


    def ChangeCurve(self, *args):
        """
        ChangeCurve(Handle_BRepAdaptor_HCompCurve self) -> BRepAdaptor_CompCurve

        Returns the curve used to create the GenHCurve.

        :rtype: OCC.wrapper.BRepAdaptor.BRepAdaptor_CompCurve

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_ChangeCurve(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BRepAdaptor_HCompCurve self) -> char const *

        :rtype: const char *

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FirstParameter(self, *args):
        """
        FirstParameter(Handle_BRepAdaptor_HCompCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_FirstParameter(self, *args)


    def LastParameter(self, *args):
        """
        LastParameter(Handle_BRepAdaptor_HCompCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_LastParameter(self, *args)


    def Continuity(self, *args):
        """
        Continuity(Handle_BRepAdaptor_HCompCurve self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_Continuity(self, *args)


    def NbIntervals(self, *args):
        """
        NbIntervals(Handle_BRepAdaptor_HCompCurve self, GeomAbs_Shape const S) -> Standard_Integer

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_NbIntervals(self, *args)


    def Intervals(self, *args):
        """
        Intervals(Handle_BRepAdaptor_HCompCurve self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        Stores in <T> the  parameters bounding the intervals
        of continuity <S>.

        The array must provide  enough room to  accomodate
        for the parameters. i.e. T.Length() > NbIntervals()

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_Intervals(self, *args)


    def Trim(self, *args):
        """
        Trim(Handle_BRepAdaptor_HCompCurve self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HCurve

        Returns    a  curve equivalent   of  <me>  between
        parameters <First>  and <Last>. <Tol>  is used  to
        test for 3d points confusion.

        If <First> >= <Last>

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_Trim(self, *args)


    def IsClosed(self, *args):
        """
        IsClosed(Handle_BRepAdaptor_HCompCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_IsClosed(self, *args)


    def IsPeriodic(self, *args):
        """
        IsPeriodic(Handle_BRepAdaptor_HCompCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_IsPeriodic(self, *args)


    def Period(self, *args):
        """
        Period(Handle_BRepAdaptor_HCompCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_Period(self, *args)


    def Value(self, *args):
        """
        Value(Handle_BRepAdaptor_HCompCurve self, Standard_Real const U) -> gp_Pnt

        :type U: float
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_Value(self, *args)


    def D0(self, *args):
        """
        D0(Handle_BRepAdaptor_HCompCurve self, Standard_Real const U, gp_Pnt P)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_D0(self, *args)


    def D1(self, *args):
        """
        D1(Handle_BRepAdaptor_HCompCurve self, Standard_Real const U, gp_Pnt P, gp_Vec V)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V: OCC.wrapper.gp.gp_Vec

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_D1(self, *args)


    def D2(self, *args):
        """
        D2(Handle_BRepAdaptor_HCompCurve self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_D2(self, *args)


    def D3(self, *args):
        """
        D3(Handle_BRepAdaptor_HCompCurve self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2, gp_Vec V3)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec
        :type V3: OCC.wrapper.gp.gp_Vec

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_D3(self, *args)


    def DN(self, *args):
        """
        DN(Handle_BRepAdaptor_HCompCurve self, Standard_Real const U, Standard_Integer const N) -> gp_Vec

        :type U: float
        :type N: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_DN(self, *args)


    def Resolution(self, *args):
        """
        Resolution(Handle_BRepAdaptor_HCompCurve self, Standard_Real const R3d) -> Standard_Real

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_Resolution(self, *args)


    def GetType(self, *args):
        """
        GetType(Handle_BRepAdaptor_HCompCurve self) -> GeomAbs_CurveType

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_CurveType

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_GetType(self, *args)


    def Line(self, *args):
        """
        Line(Handle_BRepAdaptor_HCompCurve self) -> gp_Lin

        :rtype: OCC.wrapper.gp.gp_Lin

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_Line(self, *args)


    def Circle(self, *args):
        """
        Circle(Handle_BRepAdaptor_HCompCurve self) -> gp_Circ

        :rtype: OCC.wrapper.gp.gp_Circ

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_Circle(self, *args)


    def Ellipse(self, *args):
        """
        Ellipse(Handle_BRepAdaptor_HCompCurve self) -> gp_Elips

        :rtype: OCC.wrapper.gp.gp_Elips

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_Ellipse(self, *args)


    def Hyperbola(self, *args):
        """
        Hyperbola(Handle_BRepAdaptor_HCompCurve self) -> gp_Hypr

        :rtype: OCC.wrapper.gp.gp_Hypr

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_Hyperbola(self, *args)


    def Parabola(self, *args):
        """
        Parabola(Handle_BRepAdaptor_HCompCurve self) -> gp_Parab

        :rtype: OCC.wrapper.gp.gp_Parab

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_Parabola(self, *args)


    def Degree(self, *args):
        """
        Degree(Handle_BRepAdaptor_HCompCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_Degree(self, *args)


    def IsRational(self, *args):
        """
        IsRational(Handle_BRepAdaptor_HCompCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_IsRational(self, *args)


    def NbPoles(self, *args):
        """
        NbPoles(Handle_BRepAdaptor_HCompCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_NbPoles(self, *args)


    def NbKnots(self, *args):
        """
        NbKnots(Handle_BRepAdaptor_HCompCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_NbKnots(self, *args)


    def Bezier(self, *args):
        """
        Bezier(Handle_BRepAdaptor_HCompCurve self) -> Handle_Geom_BezierCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_BezierCurve

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_Bezier(self, *args)


    def BSpline(self, *args):
        """
        BSpline(Handle_BRepAdaptor_HCompCurve self) -> Handle_Geom_BSplineCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineCurve

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_BSpline(self, *args)


    def OffsetCurve(self, *args):
        """
        OffsetCurve(Handle_BRepAdaptor_HCompCurve self) -> Handle_Geom_OffsetCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_OffsetCurve

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_OffsetCurve(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_BRepAdaptor_HCompCurve self)

        Memory deallocator for transient classes


        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BRepAdaptor_HCompCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BRepAdaptor_HCompCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BRepAdaptor_HCompCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BRepAdaptor_HCompCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BRepAdaptor_HCompCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BRepAdaptor_HCompCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BRepAdaptor_HCompCurve self)

        Increments the reference counter of this object


        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BRepAdaptor_HCompCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_DecrementRefCounter(self, *args)

Handle_BRepAdaptor_HCompCurve_swigregister = _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_swigregister
Handle_BRepAdaptor_HCompCurve_swigregister(Handle_BRepAdaptor_HCompCurve)

def Handle_BRepAdaptor_HCompCurve_DownCast(thing):
    return _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_DownCast(thing)
Handle_BRepAdaptor_HCompCurve_DownCast = _BRepAdaptor.Handle_BRepAdaptor_HCompCurve_DownCast

class BRepAdaptor_HArray1OfCurve(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BRepAdaptor_HArray1OfCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BRepAdaptor_HArray1OfCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BRepAdaptor_HArray1OfCurve self, Standard_Integer const theLower, Standard_Integer const theUpper) -> BRepAdaptor_HArray1OfCurve
        __init__(BRepAdaptor_HArray1OfCurve self, Standard_Integer const theLower, Standard_Integer const theUpper, BRepAdaptor_Curve theValue) -> BRepAdaptor_HArray1OfCurve
        __init__(BRepAdaptor_HArray1OfCurve self, NCollection_Array1_BRepAdaptor_Curve theOther) -> BRepAdaptor_HArray1OfCurve

        :type theOther: OCC.wrapper.BRepAdaptor.BRepAdaptor_Array1OfCurve

        """
        this = _BRepAdaptor.new_BRepAdaptor_HArray1OfCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.BRepAdaptor.BRepAdaptor_Array1OfCurve

        """
        res = _BRepAdaptor.BRepAdaptor_HArray1OfCurve_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(BRepAdaptor_HArray1OfCurve self) -> NCollection_Array1_BRepAdaptor_Curve

        :rtype: OCC.wrapper.BRepAdaptor.BRepAdaptor_Array1OfCurve

        """
        return _BRepAdaptor.BRepAdaptor_HArray1OfCurve_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BRepAdaptor.BRepAdaptor_HArray1OfCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BRepAdaptor.BRepAdaptor_HArray1OfCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BRepAdaptor.BRepAdaptor_HArray1OfCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BRepAdaptor.delete_BRepAdaptor_HArray1OfCurve
BRepAdaptor_HArray1OfCurve_swigregister = _BRepAdaptor.BRepAdaptor_HArray1OfCurve_swigregister
BRepAdaptor_HArray1OfCurve_swigregister(BRepAdaptor_HArray1OfCurve)

def BRepAdaptor_HArray1OfCurve_get_type_name(*args):
    """
    BRepAdaptor_HArray1OfCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BRepAdaptor.BRepAdaptor_HArray1OfCurve_get_type_name(*args)

def BRepAdaptor_HArray1OfCurve_get_type_descriptor(*args):
    """
    BRepAdaptor_HArray1OfCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BRepAdaptor.BRepAdaptor_HArray1OfCurve_get_type_descriptor(*args)

class Handle_BRepAdaptor_HCurve2d(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BRepAdaptor_HCurve2d self)

        Nullify the handle


        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BRepAdaptor_HCurve2d self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BRepAdaptor_HCurve2d self, BRepAdaptor_HCurve2d thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BRepAdaptor_HCurve2d self, Handle_BRepAdaptor_HCurve2d theHandle) -> Handle_BRepAdaptor_HCurve2d
        assign(Handle_BRepAdaptor_HCurve2d self, BRepAdaptor_HCurve2d thePtr) -> Handle_BRepAdaptor_HCurve2d
        assign(Handle_BRepAdaptor_HCurve2d self, Handle_BRepAdaptor_HCurve2d theHandle) -> Handle_BRepAdaptor_HCurve2d

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BRepAdaptor_HCurve2d self) -> BRepAdaptor_HCurve2d

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BRepAdaptor_HCurve2d self) -> BRepAdaptor_HCurve2d

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BRepAdaptor_HCurve2d self) -> BRepAdaptor_HCurve2d

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d___ref__(self, *args)


    def __hash__(self):
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BRepAdaptor.new_Handle_BRepAdaptor_HCurve2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BRepAdaptor.Handle_BRepAdaptor_HCurve2d_DownCast)
    __swig_destroy__ = _BRepAdaptor.delete_Handle_BRepAdaptor_HCurve2d

    def Set(self, *args):
        """
        Set(Handle_BRepAdaptor_HCurve2d self, BRepAdaptor_Curve2d C)

        Sets the field of the GenHCurve2d.

        :type C: OCC.wrapper.BRepAdaptor.BRepAdaptor_Curve2d

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_Set(self, *args)


    def Curve2d(self, *args):
        """
        Returns the curve used to create the GenHCurve2d.
        This is redefined from HCurve2d, cannot be inline.

        :rtype: OCC.wrapper.Adaptor2d.Adaptor2d_Curve2d

        """
        res = _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_Curve2d(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeCurve2d(self, *args):
        """
        ChangeCurve2d(Handle_BRepAdaptor_HCurve2d self) -> BRepAdaptor_Curve2d

        Returns the curve used to create the GenHCurve.

        :rtype: OCC.wrapper.BRepAdaptor.BRepAdaptor_Curve2d

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_ChangeCurve2d(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BRepAdaptor_HCurve2d self) -> char const *

        :rtype: const char *

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FirstParameter(self, *args):
        """
        FirstParameter(Handle_BRepAdaptor_HCurve2d self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_FirstParameter(self, *args)


    def LastParameter(self, *args):
        """
        LastParameter(Handle_BRepAdaptor_HCurve2d self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_LastParameter(self, *args)


    def Continuity(self, *args):
        """
        Continuity(Handle_BRepAdaptor_HCurve2d self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_Continuity(self, *args)


    def NbIntervals(self, *args):
        """
        NbIntervals(Handle_BRepAdaptor_HCurve2d self, GeomAbs_Shape const S) -> Standard_Integer

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_NbIntervals(self, *args)


    def Intervals(self, *args):
        """
        Intervals(Handle_BRepAdaptor_HCurve2d self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_Intervals(self, *args)


    def Trim(self, *args):
        """
        Trim(Handle_BRepAdaptor_HCurve2d self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor2d_HCurve2d

        If <First> >= <Last>

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor2d.Handle_Adaptor2d_HCurve2d

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_Trim(self, *args)


    def IsClosed(self, *args):
        """
        IsClosed(Handle_BRepAdaptor_HCurve2d self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_IsClosed(self, *args)


    def IsPeriodic(self, *args):
        """
        IsPeriodic(Handle_BRepAdaptor_HCurve2d self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_IsPeriodic(self, *args)


    def Period(self, *args):
        """
        Period(Handle_BRepAdaptor_HCurve2d self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_Period(self, *args)


    def Value(self, *args):
        """
        Value(Handle_BRepAdaptor_HCurve2d self, Standard_Real const U) -> gp_Pnt2d

        :type U: float
        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_Value(self, *args)


    def D0(self, *args):
        """
        D0(Handle_BRepAdaptor_HCurve2d self, Standard_Real const U, gp_Pnt2d P)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt2d

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_D0(self, *args)


    def D1(self, *args):
        """
        D1(Handle_BRepAdaptor_HCurve2d self, Standard_Real const U, gp_Pnt2d P, gp_Vec2d V)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt2d
        :type V: OCC.wrapper.gp.gp_Vec2d

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_D1(self, *args)


    def D2(self, *args):
        """
        D2(Handle_BRepAdaptor_HCurve2d self, Standard_Real const U, gp_Pnt2d P, gp_Vec2d V1, gp_Vec2d V2)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt2d
        :type V1: OCC.wrapper.gp.gp_Vec2d
        :type V2: OCC.wrapper.gp.gp_Vec2d

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_D2(self, *args)


    def D3(self, *args):
        """
        D3(Handle_BRepAdaptor_HCurve2d self, Standard_Real const U, gp_Pnt2d P, gp_Vec2d V1, gp_Vec2d V2, gp_Vec2d V3)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt2d
        :type V1: OCC.wrapper.gp.gp_Vec2d
        :type V2: OCC.wrapper.gp.gp_Vec2d
        :type V3: OCC.wrapper.gp.gp_Vec2d

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_D3(self, *args)


    def DN(self, *args):
        """
        DN(Handle_BRepAdaptor_HCurve2d self, Standard_Real const U, Standard_Integer const N) -> gp_Vec2d

        :type U: float
        :type N: int
        :rtype: OCC.wrapper.gp.gp_Vec2d

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_DN(self, *args)


    def Resolution(self, *args):
        """
        Resolution(Handle_BRepAdaptor_HCurve2d self, Standard_Real const R3d) -> Standard_Real

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_Resolution(self, *args)


    def GetType(self, *args):
        """
        GetType(Handle_BRepAdaptor_HCurve2d self) -> GeomAbs_CurveType

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_CurveType

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_GetType(self, *args)


    def Line(self, *args):
        """
        Line(Handle_BRepAdaptor_HCurve2d self) -> gp_Lin2d

        :rtype: OCC.wrapper.gp.gp_Lin2d

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_Line(self, *args)


    def Circle(self, *args):
        """
        Circle(Handle_BRepAdaptor_HCurve2d self) -> gp_Circ2d

        :rtype: OCC.wrapper.gp.gp_Circ2d

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_Circle(self, *args)


    def Ellipse(self, *args):
        """
        Ellipse(Handle_BRepAdaptor_HCurve2d self) -> gp_Elips2d

        :rtype: OCC.wrapper.gp.gp_Elips2d

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_Ellipse(self, *args)


    def Hyperbola(self, *args):
        """
        Hyperbola(Handle_BRepAdaptor_HCurve2d self) -> gp_Hypr2d

        :rtype: OCC.wrapper.gp.gp_Hypr2d

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_Hyperbola(self, *args)


    def Parabola(self, *args):
        """
        Parabola(Handle_BRepAdaptor_HCurve2d self) -> gp_Parab2d

        :rtype: OCC.wrapper.gp.gp_Parab2d

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_Parabola(self, *args)


    def Degree(self, *args):
        """
        Degree(Handle_BRepAdaptor_HCurve2d self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_Degree(self, *args)


    def IsRational(self, *args):
        """
        IsRational(Handle_BRepAdaptor_HCurve2d self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_IsRational(self, *args)


    def NbPoles(self, *args):
        """
        NbPoles(Handle_BRepAdaptor_HCurve2d self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_NbPoles(self, *args)


    def NbKnots(self, *args):
        """
        NbKnots(Handle_BRepAdaptor_HCurve2d self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_NbKnots(self, *args)


    def Bezier(self, *args):
        """
        Bezier(Handle_BRepAdaptor_HCurve2d self) -> Handle_Geom2d_BezierCurve

        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_BezierCurve

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_Bezier(self, *args)


    def BSpline(self, *args):
        """
        BSpline(Handle_BRepAdaptor_HCurve2d self) -> Handle_Geom2d_BSplineCurve

        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_BSplineCurve

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_BSpline(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_BRepAdaptor_HCurve2d self)

        Memory deallocator for transient classes


        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BRepAdaptor_HCurve2d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BRepAdaptor_HCurve2d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BRepAdaptor_HCurve2d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BRepAdaptor_HCurve2d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BRepAdaptor_HCurve2d self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BRepAdaptor_HCurve2d self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BRepAdaptor_HCurve2d self)

        Increments the reference counter of this object


        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BRepAdaptor_HCurve2d self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_DecrementRefCounter(self, *args)

Handle_BRepAdaptor_HCurve2d_swigregister = _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_swigregister
Handle_BRepAdaptor_HCurve2d_swigregister(Handle_BRepAdaptor_HCurve2d)

def Handle_BRepAdaptor_HCurve2d_DownCast(thing):
    return _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_DownCast(thing)
Handle_BRepAdaptor_HCurve2d_DownCast = _BRepAdaptor.Handle_BRepAdaptor_HCurve2d_DownCast

class Handle_BRepAdaptor_HSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BRepAdaptor_HSurface self)

        Nullify the handle


        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BRepAdaptor_HSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BRepAdaptor_HSurface self, BRepAdaptor_HSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BRepAdaptor_HSurface self, Handle_BRepAdaptor_HSurface theHandle) -> Handle_BRepAdaptor_HSurface
        assign(Handle_BRepAdaptor_HSurface self, BRepAdaptor_HSurface thePtr) -> Handle_BRepAdaptor_HSurface
        assign(Handle_BRepAdaptor_HSurface self, Handle_BRepAdaptor_HSurface theHandle) -> Handle_BRepAdaptor_HSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BRepAdaptor_HSurface self) -> BRepAdaptor_HSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BRepAdaptor_HSurface self) -> BRepAdaptor_HSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BRepAdaptor_HSurface self) -> BRepAdaptor_HSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface___ref__(self, *args)


    def __hash__(self):
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BRepAdaptor.Handle_BRepAdaptor_HSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BRepAdaptor.new_Handle_BRepAdaptor_HSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BRepAdaptor.Handle_BRepAdaptor_HSurface_DownCast)
    __swig_destroy__ = _BRepAdaptor.delete_Handle_BRepAdaptor_HSurface

    def Set(self, *args):
        """
        Set(Handle_BRepAdaptor_HSurface self, BRepAdaptor_Surface S)

        Sets the field of the GenHSurface.

        :type S: OCC.wrapper.BRepAdaptor.BRepAdaptor_Surface

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_Set(self, *args)


    def Surface(self, *args):
        """
        Returns a reference to the Surface inside the HSurface.
        This is redefined from HSurface, cannot be inline.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Surface

        """
        res = _BRepAdaptor.Handle_BRepAdaptor_HSurface_Surface(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeSurface(self, *args):
        """
        ChangeSurface(Handle_BRepAdaptor_HSurface self) -> BRepAdaptor_Surface

        Returns the surface used to create the GenHSurface.

        :rtype: OCC.wrapper.BRepAdaptor.BRepAdaptor_Surface

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_ChangeSurface(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BRepAdaptor_HSurface self) -> char const *

        :rtype: const char *

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BRepAdaptor.Handle_BRepAdaptor_HSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BRepAdaptor.Handle_BRepAdaptor_HSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FirstUParameter(self, *args):
        """
        FirstUParameter(Handle_BRepAdaptor_HSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_FirstUParameter(self, *args)


    def LastUParameter(self, *args):
        """
        LastUParameter(Handle_BRepAdaptor_HSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_LastUParameter(self, *args)


    def FirstVParameter(self, *args):
        """
        FirstVParameter(Handle_BRepAdaptor_HSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_FirstVParameter(self, *args)


    def LastVParameter(self, *args):
        """
        LastVParameter(Handle_BRepAdaptor_HSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_LastVParameter(self, *args)


    def UContinuity(self, *args):
        """
        UContinuity(Handle_BRepAdaptor_HSurface self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_UContinuity(self, *args)


    def VContinuity(self, *args):
        """
        VContinuity(Handle_BRepAdaptor_HSurface self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_VContinuity(self, *args)


    def NbUIntervals(self, *args):
        """
        NbUIntervals(Handle_BRepAdaptor_HSurface self, GeomAbs_Shape const S) -> Standard_Integer

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_NbUIntervals(self, *args)


    def NbVIntervals(self, *args):
        """
        NbVIntervals(Handle_BRepAdaptor_HSurface self, GeomAbs_Shape const S) -> Standard_Integer

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_NbVIntervals(self, *args)


    def UIntervals(self, *args):
        """
        UIntervals(Handle_BRepAdaptor_HSurface self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_UIntervals(self, *args)


    def VIntervals(self, *args):
        """
        VIntervals(Handle_BRepAdaptor_HSurface self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_VIntervals(self, *args)


    def UTrim(self, *args):
        """
        UTrim(Handle_BRepAdaptor_HSurface self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HSurface

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_UTrim(self, *args)


    def VTrim(self, *args):
        """
        VTrim(Handle_BRepAdaptor_HSurface self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HSurface

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_VTrim(self, *args)


    def IsUClosed(self, *args):
        """
        IsUClosed(Handle_BRepAdaptor_HSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_IsUClosed(self, *args)


    def IsVClosed(self, *args):
        """
        IsVClosed(Handle_BRepAdaptor_HSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_IsVClosed(self, *args)


    def IsUPeriodic(self, *args):
        """
        IsUPeriodic(Handle_BRepAdaptor_HSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_IsUPeriodic(self, *args)


    def UPeriod(self, *args):
        """
        UPeriod(Handle_BRepAdaptor_HSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_UPeriod(self, *args)


    def IsVPeriodic(self, *args):
        """
        IsVPeriodic(Handle_BRepAdaptor_HSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_IsVPeriodic(self, *args)


    def VPeriod(self, *args):
        """
        VPeriod(Handle_BRepAdaptor_HSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_VPeriod(self, *args)


    def Value(self, *args):
        """
        Value(Handle_BRepAdaptor_HSurface self, Standard_Real const U, Standard_Real const V) -> gp_Pnt

        :type U: float
        :type V: float
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_Value(self, *args)


    def D0(self, *args):
        """
        D0(Handle_BRepAdaptor_HSurface self, Standard_Real const U, Standard_Real const V, gp_Pnt P)

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_D0(self, *args)


    def D1(self, *args):
        """
        D1(Handle_BRepAdaptor_HSurface self, Standard_Real const U, Standard_Real const V, gp_Pnt P, gp_Vec D1U, gp_Vec D1V)

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type D1U: OCC.wrapper.gp.gp_Vec
        :type D1V: OCC.wrapper.gp.gp_Vec

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_D1(self, *args)


    def D2(self, *args):
        """
        D2(Handle_BRepAdaptor_HSurface self, Standard_Real const U, Standard_Real const V, gp_Pnt P, gp_Vec D1U, gp_Vec D1V, gp_Vec D2U, gp_Vec D2V, gp_Vec D2UV)

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type D1U: OCC.wrapper.gp.gp_Vec
        :type D1V: OCC.wrapper.gp.gp_Vec
        :type D2U: OCC.wrapper.gp.gp_Vec
        :type D2V: OCC.wrapper.gp.gp_Vec
        :type D2UV: OCC.wrapper.gp.gp_Vec

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_D2(self, *args)


    def D3(self, *args):
        """
        D3(Handle_BRepAdaptor_HSurface self, Standard_Real const U, Standard_Real const V, gp_Pnt P, gp_Vec D1U, gp_Vec D1V, gp_Vec D2U, gp_Vec D2V, gp_Vec D2UV, gp_Vec D3U, gp_Vec D3V, gp_Vec D3UUV, gp_Vec D3UVV)

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type D1U: OCC.wrapper.gp.gp_Vec
        :type D1V: OCC.wrapper.gp.gp_Vec
        :type D2U: OCC.wrapper.gp.gp_Vec
        :type D2V: OCC.wrapper.gp.gp_Vec
        :type D2UV: OCC.wrapper.gp.gp_Vec
        :type D3U: OCC.wrapper.gp.gp_Vec
        :type D3V: OCC.wrapper.gp.gp_Vec
        :type D3UUV: OCC.wrapper.gp.gp_Vec
        :type D3UVV: OCC.wrapper.gp.gp_Vec

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_D3(self, *args)


    def DN(self, *args):
        """
        DN(Handle_BRepAdaptor_HSurface self, Standard_Real const U, Standard_Real const V, Standard_Integer const Nu, Standard_Integer const Nv) -> gp_Vec

        :type U: float
        :type V: float
        :type Nu: int
        :type Nv: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_DN(self, *args)


    def UResolution(self, *args):
        """
        UResolution(Handle_BRepAdaptor_HSurface self, Standard_Real const R3d) -> Standard_Real

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_UResolution(self, *args)


    def VResolution(self, *args):
        """
        VResolution(Handle_BRepAdaptor_HSurface self, Standard_Real const R3d) -> Standard_Real

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_VResolution(self, *args)


    def GetType(self, *args):
        """
        GetType(Handle_BRepAdaptor_HSurface self) -> GeomAbs_SurfaceType

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_SurfaceType

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_GetType(self, *args)


    def Plane(self, *args):
        """
        Plane(Handle_BRepAdaptor_HSurface self) -> gp_Pln

        :rtype: OCC.wrapper.gp.gp_Pln

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_Plane(self, *args)


    def Cylinder(self, *args):
        """
        Cylinder(Handle_BRepAdaptor_HSurface self) -> gp_Cylinder

        :rtype: OCC.wrapper.gp.gp_Cylinder

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_Cylinder(self, *args)


    def Cone(self, *args):
        """
        Cone(Handle_BRepAdaptor_HSurface self) -> gp_Cone

        :rtype: OCC.wrapper.gp.gp_Cone

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_Cone(self, *args)


    def Sphere(self, *args):
        """
        Sphere(Handle_BRepAdaptor_HSurface self) -> gp_Sphere

        :rtype: OCC.wrapper.gp.gp_Sphere

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_Sphere(self, *args)


    def Torus(self, *args):
        """
        Torus(Handle_BRepAdaptor_HSurface self) -> gp_Torus

        :rtype: OCC.wrapper.gp.gp_Torus

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_Torus(self, *args)


    def UDegree(self, *args):
        """
        UDegree(Handle_BRepAdaptor_HSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_UDegree(self, *args)


    def NbUPoles(self, *args):
        """
        NbUPoles(Handle_BRepAdaptor_HSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_NbUPoles(self, *args)


    def VDegree(self, *args):
        """
        VDegree(Handle_BRepAdaptor_HSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_VDegree(self, *args)


    def NbVPoles(self, *args):
        """
        NbVPoles(Handle_BRepAdaptor_HSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_NbVPoles(self, *args)


    def NbUKnots(self, *args):
        """
        NbUKnots(Handle_BRepAdaptor_HSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_NbUKnots(self, *args)


    def NbVKnots(self, *args):
        """
        NbVKnots(Handle_BRepAdaptor_HSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_NbVKnots(self, *args)


    def IsURational(self, *args):
        """
        IsURational(Handle_BRepAdaptor_HSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_IsURational(self, *args)


    def IsVRational(self, *args):
        """
        IsVRational(Handle_BRepAdaptor_HSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_IsVRational(self, *args)


    def Bezier(self, *args):
        """
        Bezier(Handle_BRepAdaptor_HSurface self) -> Handle_Geom_BezierSurface

        :rtype: OCC.wrapper.Geom.Handle_Geom_BezierSurface

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_Bezier(self, *args)


    def BSpline(self, *args):
        """
        BSpline(Handle_BRepAdaptor_HSurface self) -> Handle_Geom_BSplineSurface

        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineSurface

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_BSpline(self, *args)


    def AxeOfRevolution(self, *args):
        """
        AxeOfRevolution(Handle_BRepAdaptor_HSurface self) -> gp_Ax1

        :rtype: OCC.wrapper.gp.gp_Ax1

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_AxeOfRevolution(self, *args)


    def Direction(self, *args):
        """
        Direction(Handle_BRepAdaptor_HSurface self) -> gp_Dir

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_Direction(self, *args)


    def BasisCurve(self, *args):
        """
        BasisCurve(Handle_BRepAdaptor_HSurface self) -> Handle_Adaptor3d_HCurve

        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_BasisCurve(self, *args)


    def BasisSurface(self, *args):
        """
        BasisSurface(Handle_BRepAdaptor_HSurface self) -> Handle_Adaptor3d_HSurface

        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_BasisSurface(self, *args)


    def OffsetValue(self, *args):
        """
        OffsetValue(Handle_BRepAdaptor_HSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_OffsetValue(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_BRepAdaptor_HSurface self)

        Memory deallocator for transient classes


        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BRepAdaptor_HSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BRepAdaptor_HSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BRepAdaptor_HSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BRepAdaptor_HSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BRepAdaptor_HSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BRepAdaptor_HSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BRepAdaptor_HSurface self)

        Increments the reference counter of this object


        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BRepAdaptor_HSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HSurface_DecrementRefCounter(self, *args)

Handle_BRepAdaptor_HSurface_swigregister = _BRepAdaptor.Handle_BRepAdaptor_HSurface_swigregister
Handle_BRepAdaptor_HSurface_swigregister(Handle_BRepAdaptor_HSurface)

def Handle_BRepAdaptor_HSurface_DownCast(thing):
    return _BRepAdaptor.Handle_BRepAdaptor_HSurface_DownCast(thing)
Handle_BRepAdaptor_HSurface_DownCast = _BRepAdaptor.Handle_BRepAdaptor_HSurface_DownCast

class Handle_BRepAdaptor_HArray1OfCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BRepAdaptor_HArray1OfCurve self)

        Nullify the handle


        """
        return _BRepAdaptor.Handle_BRepAdaptor_HArray1OfCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BRepAdaptor_HArray1OfCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HArray1OfCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BRepAdaptor_HArray1OfCurve self, BRepAdaptor_HArray1OfCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HArray1OfCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BRepAdaptor_HArray1OfCurve self, Handle_BRepAdaptor_HArray1OfCurve theHandle) -> Handle_BRepAdaptor_HArray1OfCurve
        assign(Handle_BRepAdaptor_HArray1OfCurve self, BRepAdaptor_HArray1OfCurve thePtr) -> Handle_BRepAdaptor_HArray1OfCurve
        assign(Handle_BRepAdaptor_HArray1OfCurve self, Handle_BRepAdaptor_HArray1OfCurve theHandle) -> Handle_BRepAdaptor_HArray1OfCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HArray1OfCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BRepAdaptor_HArray1OfCurve self) -> BRepAdaptor_HArray1OfCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HArray1OfCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BRepAdaptor_HArray1OfCurve self) -> BRepAdaptor_HArray1OfCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HArray1OfCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BRepAdaptor_HArray1OfCurve self) -> BRepAdaptor_HArray1OfCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HArray1OfCurve___ref__(self, *args)


    def __hash__(self):
        return _BRepAdaptor.Handle_BRepAdaptor_HArray1OfCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BRepAdaptor.Handle_BRepAdaptor_HArray1OfCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BRepAdaptor.new_Handle_BRepAdaptor_HArray1OfCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BRepAdaptor.Handle_BRepAdaptor_HArray1OfCurve_DownCast)
    __swig_destroy__ = _BRepAdaptor.delete_Handle_BRepAdaptor_HArray1OfCurve

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.BRepAdaptor.BRepAdaptor_Array1OfCurve

        """
        res = _BRepAdaptor.Handle_BRepAdaptor_HArray1OfCurve_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_BRepAdaptor_HArray1OfCurve self) -> NCollection_Array1_BRepAdaptor_Curve

        :rtype: OCC.wrapper.BRepAdaptor.BRepAdaptor_Array1OfCurve

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HArray1OfCurve_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BRepAdaptor_HArray1OfCurve self) -> char const *

        :rtype: const char *

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HArray1OfCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BRepAdaptor.Handle_BRepAdaptor_HArray1OfCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BRepAdaptor.Handle_BRepAdaptor_HArray1OfCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BRepAdaptor_HArray1OfCurve self)

        Memory deallocator for transient classes


        """
        return _BRepAdaptor.Handle_BRepAdaptor_HArray1OfCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BRepAdaptor_HArray1OfCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BRepAdaptor_HArray1OfCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HArray1OfCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BRepAdaptor_HArray1OfCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BRepAdaptor_HArray1OfCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HArray1OfCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BRepAdaptor_HArray1OfCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HArray1OfCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BRepAdaptor_HArray1OfCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HArray1OfCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BRepAdaptor_HArray1OfCurve self)

        Increments the reference counter of this object


        """
        return _BRepAdaptor.Handle_BRepAdaptor_HArray1OfCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BRepAdaptor_HArray1OfCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.Handle_BRepAdaptor_HArray1OfCurve_DecrementRefCounter(self, *args)

Handle_BRepAdaptor_HArray1OfCurve_swigregister = _BRepAdaptor.Handle_BRepAdaptor_HArray1OfCurve_swigregister
Handle_BRepAdaptor_HArray1OfCurve_swigregister(Handle_BRepAdaptor_HArray1OfCurve)

def Handle_BRepAdaptor_HArray1OfCurve_DownCast(thing):
    return _BRepAdaptor.Handle_BRepAdaptor_HArray1OfCurve_DownCast(thing)
Handle_BRepAdaptor_HArray1OfCurve_DownCast = _BRepAdaptor.Handle_BRepAdaptor_HArray1OfCurve_DownCast

class BRepAdaptor_Curve2d(Geom2dAdaptor.Geom2dAdaptor_Curve):
    """
    The Curve2d from BRepAdaptor allows to use an Edge
    on   a Face like   a  2d   curve. (curve  in   the
    parametric space).

    It  has  the methods    of the class Curve2d  from
    Adpator.

    It  is created or  initialized with a  Face and an
    Edge.  The methods are  inherited from  Curve from
    Geom2dAdaptor.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BRepAdaptor_Curve2d self) -> BRepAdaptor_Curve2d
        __init__(BRepAdaptor_Curve2d self, TopoDS_Edge E, TopoDS_Face F) -> BRepAdaptor_Curve2d

        Creates with the pcurve of <E> on <F>.

        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :type F: OCC.wrapper.TopoDS.TopoDS_Face

        """
        this = _BRepAdaptor.new_BRepAdaptor_Curve2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Initialize(self, *args):
        """
        Initialize(BRepAdaptor_Curve2d self, TopoDS_Edge E, TopoDS_Face F)

        Initialize with the pcurve of <E> on <F>.

        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :type F: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _BRepAdaptor.BRepAdaptor_Curve2d_Initialize(self, *args)


    def Edge(self, *args):
        """
        Returns the Edge.

        :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        res = _BRepAdaptor.BRepAdaptor_Curve2d_Edge(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Face(self, *args):
        """
        Returns the Face.

        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        res = _BRepAdaptor.BRepAdaptor_Curve2d_Face(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BRepAdaptor.delete_BRepAdaptor_Curve2d
BRepAdaptor_Curve2d_swigregister = _BRepAdaptor.BRepAdaptor_Curve2d_swigregister
BRepAdaptor_Curve2d_swigregister(BRepAdaptor_Curve2d)

class NCollection_Array1_BRepAdaptor_Curve(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_BRepAdaptor_Curve self) -> NCollection_Array1< BRepAdaptor_Curve >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _BRepAdaptor.NCollection_Array1_BRepAdaptor_Curve_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_BRepAdaptor_Curve self) -> NCollection_Array1< BRepAdaptor_Curve >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _BRepAdaptor.NCollection_Array1_BRepAdaptor_Curve_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_BRepAdaptor_Curve self) -> NCollection_Array1< BRepAdaptor_Curve >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _BRepAdaptor.NCollection_Array1_BRepAdaptor_Curve_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_BRepAdaptor_Curve self) -> NCollection_Array1< BRepAdaptor_Curve >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _BRepAdaptor.NCollection_Array1_BRepAdaptor_Curve_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _BRepAdaptor.new_NCollection_Array1_BRepAdaptor_Curve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_BRepAdaptor_Curve self, BRepAdaptor_Curve theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _BRepAdaptor.NCollection_Array1_BRepAdaptor_Curve_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_BRepAdaptor_Curve self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.NCollection_Array1_BRepAdaptor_Curve_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_BRepAdaptor_Curve self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.NCollection_Array1_BRepAdaptor_Curve_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_BRepAdaptor_Curve self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.NCollection_Array1_BRepAdaptor_Curve_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_BRepAdaptor_Curve self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.NCollection_Array1_BRepAdaptor_Curve_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_BRepAdaptor_Curve self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.NCollection_Array1_BRepAdaptor_Curve_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_BRepAdaptor_Curve self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.NCollection_Array1_BRepAdaptor_Curve_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_BRepAdaptor_Curve self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.NCollection_Array1_BRepAdaptor_Curve_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_BRepAdaptor_Curve self, NCollection_Array1_BRepAdaptor_Curve theOther) -> NCollection_Array1_BRepAdaptor_Curve

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _BRepAdaptor.NCollection_Array1_BRepAdaptor_Curve_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_BRepAdaptor_Curve self, NCollection_Array1_BRepAdaptor_Curve theOther) -> NCollection_Array1_BRepAdaptor_Curve

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _BRepAdaptor.NCollection_Array1_BRepAdaptor_Curve_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_BRepAdaptor_Curve self, NCollection_Array1_BRepAdaptor_Curve theOther) -> NCollection_Array1_BRepAdaptor_Curve
        assign(NCollection_Array1_BRepAdaptor_Curve self, NCollection_Array1_BRepAdaptor_Curve theOther) -> NCollection_Array1_BRepAdaptor_Curve

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _BRepAdaptor.NCollection_Array1_BRepAdaptor_Curve_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _BRepAdaptor.NCollection_Array1_BRepAdaptor_Curve_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_BRepAdaptor_Curve self) -> BRepAdaptor_Curve

        @return first element

        :rtype: TheItemType &

        """
        return _BRepAdaptor.NCollection_Array1_BRepAdaptor_Curve_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _BRepAdaptor.NCollection_Array1_BRepAdaptor_Curve_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_BRepAdaptor_Curve self) -> BRepAdaptor_Curve

        @return last element

        :rtype: TheItemType &

        """
        return _BRepAdaptor.NCollection_Array1_BRepAdaptor_Curve_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _BRepAdaptor.NCollection_Array1_BRepAdaptor_Curve_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_BRepAdaptor_Curve self, Standard_Integer const theIndex) -> BRepAdaptor_Curve

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _BRepAdaptor.NCollection_Array1_BRepAdaptor_Curve_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _BRepAdaptor.NCollection_Array1_BRepAdaptor_Curve___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _BRepAdaptor.NCollection_Array1_BRepAdaptor_Curve_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_BRepAdaptor_Curve self, Standard_Integer const theIndex, BRepAdaptor_Curve theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _BRepAdaptor.NCollection_Array1_BRepAdaptor_Curve_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_BRepAdaptor_Curve self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _BRepAdaptor.NCollection_Array1_BRepAdaptor_Curve_Resize(self, *args)

    __swig_destroy__ = _BRepAdaptor.delete_NCollection_Array1_BRepAdaptor_Curve
NCollection_Array1_BRepAdaptor_Curve_swigregister = _BRepAdaptor.NCollection_Array1_BRepAdaptor_Curve_swigregister
NCollection_Array1_BRepAdaptor_Curve_swigregister(NCollection_Array1_BRepAdaptor_Curve)


try:
	BRepAdaptor_Array1OfCurve = NCollection_Array1_BRepAdaptor_Curve
except NameError:
	pass # does not exist, probably ignored

class BRepAdaptor_CompCurve(Adaptor3d.Adaptor3d_Curve):
    """
    The Curve from BRepAdaptor allows to use a Wire
    of the BRep topology like a 3D curve.
    Warning: With this  class of curve,  C0 and C1 continuities
    are not assumed. So be careful with some algorithm!
    Please note that BRepAdaptor_CompCurve cannot be
    periodic curve at all (even if it contains single 
    periodic edge).

    BRepAdaptor_CompCurve can only work on valid wires where all edges are
    connected to each other to make a chain.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BRepAdaptor_CompCurve self) -> BRepAdaptor_CompCurve
        __init__(BRepAdaptor_CompCurve self, TopoDS_Wire W, Standard_Boolean const KnotByCurvilinearAbcissa) -> BRepAdaptor_CompCurve
        __init__(BRepAdaptor_CompCurve self, TopoDS_Wire W, Standard_Boolean const KnotByCurvilinearAbcissa, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> BRepAdaptor_CompCurve

        Creates a Curve  to  acces to the geometry of edge
        <W>.

        :type W: OCC.wrapper.TopoDS.TopoDS_Wire
        :type KnotByCurvilinearAbcissa: bool
        :type First: float
        :type Last: float
        :type Tol: float

        """
        this = _BRepAdaptor.new_BRepAdaptor_CompCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Initialize(self, *args):
        """
        Initialize(BRepAdaptor_CompCurve self, TopoDS_Wire W, Standard_Boolean const KnotByCurvilinearAbcissa)
        Initialize(BRepAdaptor_CompCurve self, TopoDS_Wire W, Standard_Boolean const KnotByCurvilinearAbcissa, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol)

        Sets wire <W> and trimmed  parameter.

        :type W: OCC.wrapper.TopoDS.TopoDS_Wire
        :type KnotByCurvilinearAbcissa: bool
        :type First: float
        :type Last: float
        :type Tol: float

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_Initialize(self, *args)


    def Wire(self, *args):
        """
        Returns the wire.

        :rtype: OCC.wrapper.TopoDS.TopoDS_Wire

        """
        res = _BRepAdaptor.BRepAdaptor_CompCurve_Wire(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Edge(self, *args):
        """
        Edge(BRepAdaptor_CompCurve self, Standard_Real const U, TopoDS_Edge E)

        returns an  edge  and   one  parameter on them
        corresponding to the parameter U.

        :type U: float
        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :type UonE: float

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_Edge(self, *args)


    def FirstParameter(self, *args):
        """
        FirstParameter(BRepAdaptor_CompCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_FirstParameter(self, *args)


    def LastParameter(self, *args):
        """
        LastParameter(BRepAdaptor_CompCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_LastParameter(self, *args)


    def Continuity(self, *args):
        """
        Continuity(BRepAdaptor_CompCurve self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_Continuity(self, *args)


    def NbIntervals(self, *args):
        """
        NbIntervals(BRepAdaptor_CompCurve self, GeomAbs_Shape const S) -> Standard_Integer

        Returns  the number  of  intervals for  continuity
        <S>. May be one if Continuity(me) >= <S>

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_NbIntervals(self, *args)


    def Intervals(self, *args):
        """
        Intervals(BRepAdaptor_CompCurve self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        Stores in <T> the  parameters bounding the intervals
        of continuity <S>.

        The array must provide  enough room to  accomodate
        for the parameters. i.e. T.Length() > NbIntervals()

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_Intervals(self, *args)


    def Trim(self, *args):
        """
        Trim(BRepAdaptor_CompCurve self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HCurve

        Returns    a  curve equivalent   of  <me>  between
        parameters <First>  and <Last>. <Tol>  is used  to
        test for 3d points confusion.
        If <First> >= <Last>

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_Trim(self, *args)


    def IsClosed(self, *args):
        """
        IsClosed(BRepAdaptor_CompCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_IsClosed(self, *args)


    def IsPeriodic(self, *args):
        """
        IsPeriodic(BRepAdaptor_CompCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_IsPeriodic(self, *args)


    def Period(self, *args):
        """
        Period(BRepAdaptor_CompCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_Period(self, *args)


    def Value(self, *args):
        """
        Value(BRepAdaptor_CompCurve self, Standard_Real const U) -> gp_Pnt

        Computes the point of parameter U on the curve

        :type U: float
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_Value(self, *args)


    def D0(self, *args):
        """
        D0(BRepAdaptor_CompCurve self, Standard_Real const U, gp_Pnt P)

        Computes the point of parameter U.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_D0(self, *args)


    def D1(self, *args):
        """
        D1(BRepAdaptor_CompCurve self, Standard_Real const U, gp_Pnt P, gp_Vec V)

        Computes the point of parameter U on the curve
        with its first derivative.
        Raised if the continuity of the current interval
        is not C1.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V: OCC.wrapper.gp.gp_Vec

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_D1(self, *args)


    def D2(self, *args):
        """
        D2(BRepAdaptor_CompCurve self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2)

        Returns the point P of parameter U, the first and second
        derivatives V1 and V2.
        Raised if the continuity of the current interval
        is not C2.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_D2(self, *args)


    def D3(self, *args):
        """
        D3(BRepAdaptor_CompCurve self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2, gp_Vec V3)

        Returns the point P of parameter U, the first, the second
        and the third derivative.
        Raised if the continuity of the current interval
        is not C3.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec
        :type V3: OCC.wrapper.gp.gp_Vec

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_D3(self, *args)


    def DN(self, *args):
        """
        DN(BRepAdaptor_CompCurve self, Standard_Real const U, Standard_Integer const N) -> gp_Vec

        The returned vector gives the value of the derivative for the
        order of derivation N.
        Raised if the continuity of the current interval
        is not CN.
        Raised if N < 1.

        :type U: float
        :type N: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_DN(self, *args)


    def Resolution(self, *args):
        """
        Resolution(BRepAdaptor_CompCurve self, Standard_Real const R3d) -> Standard_Real

        returns the parametric resolution

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_Resolution(self, *args)


    def GetType(self, *args):
        """
        GetType(BRepAdaptor_CompCurve self) -> GeomAbs_CurveType

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_CurveType

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_GetType(self, *args)


    def Line(self, *args):
        """
        Line(BRepAdaptor_CompCurve self) -> gp_Lin

        :rtype: OCC.wrapper.gp.gp_Lin

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_Line(self, *args)


    def Circle(self, *args):
        """
        Circle(BRepAdaptor_CompCurve self) -> gp_Circ

        :rtype: OCC.wrapper.gp.gp_Circ

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_Circle(self, *args)


    def Ellipse(self, *args):
        """
        Ellipse(BRepAdaptor_CompCurve self) -> gp_Elips

        :rtype: OCC.wrapper.gp.gp_Elips

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_Ellipse(self, *args)


    def Hyperbola(self, *args):
        """
        Hyperbola(BRepAdaptor_CompCurve self) -> gp_Hypr

        :rtype: OCC.wrapper.gp.gp_Hypr

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_Hyperbola(self, *args)


    def Parabola(self, *args):
        """
        Parabola(BRepAdaptor_CompCurve self) -> gp_Parab

        :rtype: OCC.wrapper.gp.gp_Parab

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_Parabola(self, *args)


    def Degree(self, *args):
        """
        Degree(BRepAdaptor_CompCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_Degree(self, *args)


    def IsRational(self, *args):
        """
        IsRational(BRepAdaptor_CompCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_IsRational(self, *args)


    def NbPoles(self, *args):
        """
        NbPoles(BRepAdaptor_CompCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_NbPoles(self, *args)


    def NbKnots(self, *args):
        """
        NbKnots(BRepAdaptor_CompCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_NbKnots(self, *args)


    def Bezier(self, *args):
        """
        Bezier(BRepAdaptor_CompCurve self) -> Handle_Geom_BezierCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_BezierCurve

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_Bezier(self, *args)


    def BSpline(self, *args):
        """
        BSpline(BRepAdaptor_CompCurve self) -> Handle_Geom_BSplineCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineCurve

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_BSpline(self, *args)

    __swig_destroy__ = _BRepAdaptor.delete_BRepAdaptor_CompCurve
BRepAdaptor_CompCurve_swigregister = _BRepAdaptor.BRepAdaptor_CompCurve_swigregister
BRepAdaptor_CompCurve_swigregister(BRepAdaptor_CompCurve)



