# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BVH')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BVH')
    _BVH = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BVH', [dirname(__file__)])
        except ImportError:
            import _BVH
            return _BVH
        try:
            _mod = imp.load_module('_BVH', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BVH = swig_import_helper()
    del swig_import_helper
else:
    import _BVH
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BVH.delete_SwigPyIterator

    def value(self):
        return _BVH.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _BVH.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _BVH.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _BVH.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _BVH.SwigPyIterator_equal(self, x)

    def copy(self):
        return _BVH.SwigPyIterator_copy(self)

    def next(self):
        return _BVH.SwigPyIterator_next(self)

    def __next__(self):
        return _BVH.SwigPyIterator___next__(self)

    def previous(self):
        return _BVH.SwigPyIterator_previous(self)

    def advance(self, n):
        return _BVH.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _BVH.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _BVH.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _BVH.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _BVH.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _BVH.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _BVH.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _BVH.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BVH.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_BVH.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _BVH.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BVH.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BVH.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _BVH.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _BVH.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _BVH.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BVH.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_BVH.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _BVH.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BVH.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BVH.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _BVH.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _BVH.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _BVH.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _BVH.ptr_to_number(item)
ptr_to_number = _BVH.ptr_to_number

def HashCode(*args):
    return _BVH.HashCode(*args)
HashCode = _BVH.HashCode

def ptr_equal(a, b):
    return _BVH.ptr_equal(a, b)
ptr_equal = _BVH.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
BVH_Constants_MaxTreeDepth = _BVH.BVH_Constants_MaxTreeDepth
BVH_Constants_LeafNodeSizeSingle = _BVH.BVH_Constants_LeafNodeSizeSingle
BVH_Constants_LeafNodeSizeAverage = _BVH.BVH_Constants_LeafNodeSizeAverage
BVH_Constants_LeafNodeSizeDefault = _BVH.BVH_Constants_LeafNodeSizeDefault
BVH_Constants_LeafNodeSizeSmall = _BVH.BVH_Constants_LeafNodeSizeSmall
BVH_Constants_NbBinsOptimal = _BVH.BVH_Constants_NbBinsOptimal
BVH_Constants_NbBinsBest = _BVH.BVH_Constants_NbBinsBest
class BVH_ObjectTransient(Standard.Standard_Transient):
    """
    A non-template class for using as base for BVH_Object
    (just to have a named base class).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BVH_ObjectTransient
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BVH_ObjectTransient(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BVH.BVH_ObjectTransient_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BVH.BVH_ObjectTransient_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BVH.BVH_ObjectTransient_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Properties(self, *args):
        """
        Returns properties of the geometric object.

        :rtype: OCC.wrapper.BVH.Handle_BVH_Properties

        """
        res = _BVH.BVH_ObjectTransient_Properties(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetProperties(self, *args):
        """
        SetProperties(BVH_ObjectTransient self, Handle_BVH_Properties theProperties)

        Sets properties of the geometric object.

        :type theProperties: OCC.wrapper.BVH.Handle_BVH_Properties

        """
        return _BVH.BVH_ObjectTransient_SetProperties(self, *args)


    def IsDirty(self, *args):
        """
        IsDirty(BVH_ObjectTransient self) -> Standard_Boolean

        Returns TRUE if object state should be updated.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BVH.BVH_ObjectTransient_IsDirty(self, *args)


    def MarkDirty(self, *args):
        """
        MarkDirty(BVH_ObjectTransient self)

        Marks object state as outdated (needs BVH rebuilding).


        """
        return _BVH.BVH_ObjectTransient_MarkDirty(self, *args)

    __swig_destroy__ = _BVH.delete_BVH_ObjectTransient
BVH_ObjectTransient_swigregister = _BVH.BVH_ObjectTransient_swigregister
BVH_ObjectTransient_swigregister(BVH_ObjectTransient)

def BVH_ObjectTransient_get_type_name(*args):
    """
    BVH_ObjectTransient_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BVH.BVH_ObjectTransient_get_type_name(*args)

def BVH_ObjectTransient_get_type_descriptor(*args):
    """
    BVH_ObjectTransient_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BVH.BVH_ObjectTransient_get_type_descriptor(*args)

class BVH_BuilderTransient(Standard.Standard_Transient):
    """
    A non-template class for using as base for BVH_Builder
    (just to have a named base class).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BVH_BuilderTransient
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BVH_BuilderTransient(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BVH.BVH_BuilderTransient_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BVH.BVH_BuilderTransient_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BVH.BVH_BuilderTransient_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def MaxTreeDepth(self, *args):
        """
        MaxTreeDepth(BVH_BuilderTransient self) -> Standard_Integer

        Returns the maximum depth of constructed BVH.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BVH.BVH_BuilderTransient_MaxTreeDepth(self, *args)


    def LeafNodeSize(self, *args):
        """
        LeafNodeSize(BVH_BuilderTransient self) -> Standard_Integer

        Returns the maximum number of sub-elements in the leaf.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BVH.BVH_BuilderTransient_LeafNodeSize(self, *args)

    __swig_destroy__ = _BVH.delete_BVH_BuilderTransient
BVH_BuilderTransient_swigregister = _BVH.BVH_BuilderTransient_swigregister
BVH_BuilderTransient_swigregister(BVH_BuilderTransient)

def BVH_BuilderTransient_get_type_name(*args):
    """
    BVH_BuilderTransient_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BVH.BVH_BuilderTransient_get_type_name(*args)

def BVH_BuilderTransient_get_type_descriptor(*args):
    """
    BVH_BuilderTransient_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BVH.BVH_BuilderTransient_get_type_descriptor(*args)

class BVH_TreeBaseTransient(Standard.Standard_Transient):
    """
    A non-template class for using as base for BVH_TreeBase
    (just to have a named base class).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BVH_TreeBaseTransient
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BVH_TreeBaseTransient(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BVH.BVH_TreeBaseTransient_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BVH.BVH_TreeBaseTransient_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BVH.BVH_TreeBaseTransient_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BVH.delete_BVH_TreeBaseTransient
BVH_TreeBaseTransient_swigregister = _BVH.BVH_TreeBaseTransient_swigregister
BVH_TreeBaseTransient_swigregister(BVH_TreeBaseTransient)

def BVH_TreeBaseTransient_get_type_name(*args):
    """
    BVH_TreeBaseTransient_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BVH.BVH_TreeBaseTransient_get_type_name(*args)

def BVH_TreeBaseTransient_get_type_descriptor(*args):
    """
    BVH_TreeBaseTransient_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BVH.BVH_TreeBaseTransient_get_type_descriptor(*args)

class BVH_BuildThread(Standard.Standard_Transient):
    """Wrapper for BVH build thread."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BVH_BuildThread
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BVH_BuildThread(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BVH_BuildThread self, BVH_BuildTool & theBuildTool, BVH_BuildQueue theBuildQueue) -> BVH_BuildThread

        Creates new BVH build thread.

        :type theBuildTool: OCC.wrapper.BVH.BVH_BuildTool
        :type theBuildQueue: OCC.wrapper.BVH.BVH_BuildQueue

        """
        this = _BVH.new_BVH_BuildThread(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Run(self, *args):
        """
        Run(BVH_BuildThread self)

        Starts execution of BVH build thread.


        """
        return _BVH.BVH_BuildThread_Run(self, *args)


    def Wait(self, *args):
        """
        Wait(BVH_BuildThread self)

        Waits till the thread finishes execution.


        """
        return _BVH.BVH_BuildThread_Wait(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BVH.BVH_BuildThread_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BVH.BVH_BuildThread_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BVH.BVH_BuildThread_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BVH.delete_BVH_BuildThread
BVH_BuildThread_swigregister = _BVH.BVH_BuildThread_swigregister
BVH_BuildThread_swigregister(BVH_BuildThread)

def BVH_BuildThread_get_type_name(*args):
    """
    BVH_BuildThread_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BVH.BVH_BuildThread_get_type_name(*args)

def BVH_BuildThread_get_type_descriptor(*args):
    """
    BVH_BuildThread_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BVH.BVH_BuildThread_get_type_descriptor(*args)

class pair_Standard_Integer_Standard_Integer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _BVH.new_pair_Standard_Integer_Standard_Integer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    first = _swig_property(_BVH.pair_Standard_Integer_Standard_Integer_first_get, _BVH.pair_Standard_Integer_Standard_Integer_first_set)
    second = _swig_property(_BVH.pair_Standard_Integer_Standard_Integer_second_get, _BVH.pair_Standard_Integer_Standard_Integer_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _BVH.delete_pair_Standard_Integer_Standard_Integer
pair_Standard_Integer_Standard_Integer_swigregister = _BVH.pair_Standard_Integer_Standard_Integer_swigregister
pair_Standard_Integer_Standard_Integer_swigregister(pair_Standard_Integer_Standard_Integer)


try:
	BVH_EncodedLink = pair_Standard_Integer_Standard_Integer
except NameError:
	pass # does not exist, probably ignored

class Handle_BVH_BuildThread(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BVH_BuildThread self)

        Nullify the handle


        """
        return _BVH.Handle_BVH_BuildThread_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BVH_BuildThread self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BVH.Handle_BVH_BuildThread_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BVH_BuildThread self, BVH_BuildThread thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BVH.Handle_BVH_BuildThread_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BVH_BuildThread self, Handle_BVH_BuildThread theHandle) -> Handle_BVH_BuildThread
        assign(Handle_BVH_BuildThread self, BVH_BuildThread thePtr) -> Handle_BVH_BuildThread
        assign(Handle_BVH_BuildThread self, Handle_BVH_BuildThread theHandle) -> Handle_BVH_BuildThread

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BVH.Handle_BVH_BuildThread_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BVH_BuildThread self) -> BVH_BuildThread

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BVH.Handle_BVH_BuildThread_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BVH_BuildThread self) -> BVH_BuildThread

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BVH.Handle_BVH_BuildThread___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BVH_BuildThread self) -> BVH_BuildThread

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BVH.Handle_BVH_BuildThread___ref__(self, *args)


    def __hash__(self):
        return _BVH.Handle_BVH_BuildThread___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BVH.Handle_BVH_BuildThread___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BVH.new_Handle_BVH_BuildThread(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BVH.Handle_BVH_BuildThread_DownCast)
    __swig_destroy__ = _BVH.delete_Handle_BVH_BuildThread

    def Run(self, *args):
        """
        Run(Handle_BVH_BuildThread self)

        Starts execution of BVH build thread.


        """
        return _BVH.Handle_BVH_BuildThread_Run(self, *args)


    def Wait(self, *args):
        """
        Wait(Handle_BVH_BuildThread self)

        Waits till the thread finishes execution.


        """
        return _BVH.Handle_BVH_BuildThread_Wait(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BVH_BuildThread self) -> char const *

        :rtype: const char *

        """
        return _BVH.Handle_BVH_BuildThread_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BVH.Handle_BVH_BuildThread_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BVH.Handle_BVH_BuildThread_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BVH_BuildThread self)

        Memory deallocator for transient classes


        """
        return _BVH.Handle_BVH_BuildThread_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BVH_BuildThread self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BVH_BuildThread self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BVH.Handle_BVH_BuildThread_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BVH_BuildThread self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BVH_BuildThread self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BVH.Handle_BVH_BuildThread_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BVH_BuildThread self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BVH.Handle_BVH_BuildThread_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BVH_BuildThread self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BVH.Handle_BVH_BuildThread_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BVH_BuildThread self)

        Increments the reference counter of this object


        """
        return _BVH.Handle_BVH_BuildThread_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BVH_BuildThread self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BVH.Handle_BVH_BuildThread_DecrementRefCounter(self, *args)

Handle_BVH_BuildThread_swigregister = _BVH.Handle_BVH_BuildThread_swigregister
Handle_BVH_BuildThread_swigregister(Handle_BVH_BuildThread)

def Handle_BVH_BuildThread_DownCast(thing):
    return _BVH.Handle_BVH_BuildThread_DownCast(thing)
Handle_BVH_BuildThread_DownCast = _BVH.Handle_BVH_BuildThread_DownCast

class Handle_BVH_Properties(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BVH_Properties self)

        Nullify the handle


        """
        return _BVH.Handle_BVH_Properties_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BVH_Properties self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BVH.Handle_BVH_Properties_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BVH_Properties self, BVH_Properties * thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BVH.Handle_BVH_Properties_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BVH_Properties self, Handle_BVH_Properties theHandle) -> Handle_BVH_Properties
        assign(Handle_BVH_Properties self, BVH_Properties const * thePtr) -> Handle_BVH_Properties
        assign(Handle_BVH_Properties self, Handle_BVH_Properties theHandle) -> Handle_BVH_Properties

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BVH.Handle_BVH_Properties_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BVH_Properties self) -> BVH_Properties *

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BVH.Handle_BVH_Properties_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BVH_Properties self) -> BVH_Properties *

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BVH.Handle_BVH_Properties___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BVH_Properties self) -> BVH_Properties &

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BVH.Handle_BVH_Properties___ref__(self, *args)


    def __hash__(self):
        return _BVH.Handle_BVH_Properties___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BVH.Handle_BVH_Properties___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BVH.new_Handle_BVH_Properties(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BVH.Handle_BVH_Properties_DownCast)
    __swig_destroy__ = _BVH.delete_Handle_BVH_Properties

    def get_type_name(self, *args):
        """
        get_type_name(Handle_BVH_Properties self) -> char const *

        :rtype: const char *

        """
        return _BVH.Handle_BVH_Properties_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BVH.Handle_BVH_Properties_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BVH.Handle_BVH_Properties_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BVH_Properties self)

        Memory deallocator for transient classes


        """
        return _BVH.Handle_BVH_Properties_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BVH_Properties self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BVH_Properties self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BVH.Handle_BVH_Properties_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BVH_Properties self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BVH_Properties self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BVH.Handle_BVH_Properties_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BVH_Properties self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BVH.Handle_BVH_Properties_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BVH_Properties self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BVH.Handle_BVH_Properties_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BVH_Properties self)

        Increments the reference counter of this object


        """
        return _BVH.Handle_BVH_Properties_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BVH_Properties self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BVH.Handle_BVH_Properties_DecrementRefCounter(self, *args)

Handle_BVH_Properties_swigregister = _BVH.Handle_BVH_Properties_swigregister
Handle_BVH_Properties_swigregister(Handle_BVH_Properties)

def Handle_BVH_Properties_DownCast(thing):
    return _BVH.Handle_BVH_Properties_DownCast(thing)
Handle_BVH_Properties_DownCast = _BVH.Handle_BVH_Properties_DownCast


try:
	BVH_PrimitiveSet3d = BVH_PrimitiveSet_Standard_Real_
except NameError:
	pass # does not exist, probably ignored

class BVH_BuildQueue(object):
    """Command-queue for parallel building of BVH nodes."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BVH_BuildQueue self) -> BVH_BuildQueue

        Creates new BVH build queue.


        """
        this = _BVH.new_BVH_BuildQueue(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(BVH_BuildQueue self) -> Standard_Integer

        Returns current size of BVH build queue.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BVH.BVH_BuildQueue_Size(self, *args)


    def Enqueue(self, *args):
        """
        Enqueue(BVH_BuildQueue self, Standard_Integer const & theNode)

        Enqueues new work-item onto BVH build queue.

        :type theNode: int

        """
        return _BVH.BVH_BuildQueue_Enqueue(self, *args)


    def Fetch(self, *args):
        """
        Fetch(BVH_BuildQueue self) -> Standard_Integer

        Fetches first work-item from BVH build queue.

        :type wasBusy: bool
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BVH.BVH_BuildQueue_Fetch(self, *args)


    def HasBusyThreads(self, *args):
        """
        HasBusyThreads(BVH_BuildQueue self) -> Standard_Boolean

        Checks if there are active build threads.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BVH.BVH_BuildQueue_HasBusyThreads(self, *args)

    __swig_destroy__ = _BVH.delete_BVH_BuildQueue
BVH_BuildQueue_swigregister = _BVH.BVH_BuildQueue_swigregister
BVH_BuildQueue_swigregister(BVH_BuildQueue)



