# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_XCAFView')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_XCAFView')
    _XCAFView = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_XCAFView', [dirname(__file__)])
        except ImportError:
            import _XCAFView
            return _XCAFView
        try:
            _mod = imp.load_module('_XCAFView', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _XCAFView = swig_import_helper()
    del swig_import_helper
else:
    import _XCAFView
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XCAFView.delete_SwigPyIterator

    def value(self):
        return _XCAFView.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _XCAFView.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _XCAFView.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _XCAFView.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _XCAFView.SwigPyIterator_equal(self, x)

    def copy(self):
        return _XCAFView.SwigPyIterator_copy(self)

    def next(self):
        return _XCAFView.SwigPyIterator_next(self)

    def __next__(self):
        return _XCAFView.SwigPyIterator___next__(self)

    def previous(self):
        return _XCAFView.SwigPyIterator_previous(self)

    def advance(self, n):
        return _XCAFView.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _XCAFView.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _XCAFView.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _XCAFView.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _XCAFView.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _XCAFView.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _XCAFView.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _XCAFView.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _XCAFView.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_XCAFView.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _XCAFView.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _XCAFView.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XCAFView.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _XCAFView.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _XCAFView.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _XCAFView.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _XCAFView.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_XCAFView.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _XCAFView.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _XCAFView.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XCAFView.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _XCAFView.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _XCAFView.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _XCAFView.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _XCAFView.ptr_to_number(item)
ptr_to_number = _XCAFView.ptr_to_number

def HashCode(*args):
    return _XCAFView.HashCode(*args)
HashCode = _XCAFView.HashCode

def ptr_equal(a, b):
    return _XCAFView.ptr_equal(a, b)
ptr_equal = _XCAFView.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
XCAFView_ProjectionType_NoCamera = _XCAFView.XCAFView_ProjectionType_NoCamera
XCAFView_ProjectionType_Parallel = _XCAFView.XCAFView_ProjectionType_Parallel
XCAFView_ProjectionType_Central = _XCAFView.XCAFView_ProjectionType_Central
class XCAFView_Object(Standard.Standard_Transient):
    """Access object for saved view"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XCAFView_Object
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XCAFView_Object(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XCAFView_Object self) -> XCAFView_Object
        __init__(XCAFView_Object self, Handle_XCAFView_Object theObj) -> XCAFView_Object

        :type theObj: OCC.wrapper.XCAFView.Handle_XCAFView_Object

        """
        this = _XCAFView.new_XCAFView_Object(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetName(self, *args):
        """
        SetName(XCAFView_Object self, Handle_TCollection_HAsciiString theName)

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFView.XCAFView_Object_SetName(self, *args)


    def Name(self, *args):
        """
        Name(XCAFView_Object self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFView.XCAFView_Object_Name(self, *args)


    def SetType(self, *args):
        """
        SetType(XCAFView_Object self, XCAFView_ProjectionType theType)

        :type theType: OCC.wrapper.XCAFView.XCAFView_ProjectionType

        """
        return _XCAFView.XCAFView_Object_SetType(self, *args)


    def Type(self, *args):
        """
        Type(XCAFView_Object self) -> XCAFView_ProjectionType

        :rtype: OCC.wrapper.XCAFView.XCAFView_ProjectionType

        """
        return _XCAFView.XCAFView_Object_Type(self, *args)


    def SetProjectionPoint(self, *args):
        """
        SetProjectionPoint(XCAFView_Object self, gp_Pnt thePoint)

        :type thePoint: OCC.wrapper.gp.gp_Pnt

        """
        return _XCAFView.XCAFView_Object_SetProjectionPoint(self, *args)


    def ProjectionPoint(self, *args):
        """
        ProjectionPoint(XCAFView_Object self) -> gp_Pnt

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _XCAFView.XCAFView_Object_ProjectionPoint(self, *args)


    def SetViewDirection(self, *args):
        """
        SetViewDirection(XCAFView_Object self, gp_Dir theDirection)

        :type theDirection: OCC.wrapper.gp.gp_Dir

        """
        return _XCAFView.XCAFView_Object_SetViewDirection(self, *args)


    def ViewDirection(self, *args):
        """
        ViewDirection(XCAFView_Object self) -> gp_Dir

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _XCAFView.XCAFView_Object_ViewDirection(self, *args)


    def SetUpDirection(self, *args):
        """
        SetUpDirection(XCAFView_Object self, gp_Dir theDirection)

        :type theDirection: OCC.wrapper.gp.gp_Dir

        """
        return _XCAFView.XCAFView_Object_SetUpDirection(self, *args)


    def UpDirection(self, *args):
        """
        UpDirection(XCAFView_Object self) -> gp_Dir

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _XCAFView.XCAFView_Object_UpDirection(self, *args)


    def SetZoomFactor(self, *args):
        """
        SetZoomFactor(XCAFView_Object self, Standard_Real theZoomFactor)

        :type theZoomFactor: float

        """
        return _XCAFView.XCAFView_Object_SetZoomFactor(self, *args)


    def ZoomFactor(self, *args):
        """
        ZoomFactor(XCAFView_Object self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _XCAFView.XCAFView_Object_ZoomFactor(self, *args)


    def SetWindowHorizontalSize(self, *args):
        """
        SetWindowHorizontalSize(XCAFView_Object self, Standard_Real theSize)

        :type theSize: float

        """
        return _XCAFView.XCAFView_Object_SetWindowHorizontalSize(self, *args)


    def WindowHorizontalSize(self, *args):
        """
        WindowHorizontalSize(XCAFView_Object self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _XCAFView.XCAFView_Object_WindowHorizontalSize(self, *args)


    def SetWindowVerticalSize(self, *args):
        """
        SetWindowVerticalSize(XCAFView_Object self, Standard_Real theSize)

        :type theSize: float

        """
        return _XCAFView.XCAFView_Object_SetWindowVerticalSize(self, *args)


    def WindowVerticalSize(self, *args):
        """
        WindowVerticalSize(XCAFView_Object self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _XCAFView.XCAFView_Object_WindowVerticalSize(self, *args)


    def SetClippingExpression(self, *args):
        """
        SetClippingExpression(XCAFView_Object self, Handle_TCollection_HAsciiString theExpression)

        :type theExpression: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFView.XCAFView_Object_SetClippingExpression(self, *args)


    def ClippingExpression(self, *args):
        """
        ClippingExpression(XCAFView_Object self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFView.XCAFView_Object_ClippingExpression(self, *args)


    def UnsetFrontPlaneClipping(self, *args):
        """UnsetFrontPlaneClipping(XCAFView_Object self)"""
        return _XCAFView.XCAFView_Object_UnsetFrontPlaneClipping(self, *args)


    def HasFrontPlaneClipping(self, *args):
        """
        HasFrontPlaneClipping(XCAFView_Object self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFView.XCAFView_Object_HasFrontPlaneClipping(self, *args)


    def SetFrontPlaneDistance(self, *args):
        """
        SetFrontPlaneDistance(XCAFView_Object self, Standard_Real theDistance)

        :type theDistance: float

        """
        return _XCAFView.XCAFView_Object_SetFrontPlaneDistance(self, *args)


    def FrontPlaneDistance(self, *args):
        """
        FrontPlaneDistance(XCAFView_Object self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _XCAFView.XCAFView_Object_FrontPlaneDistance(self, *args)


    def UnsetBackPlaneClipping(self, *args):
        """UnsetBackPlaneClipping(XCAFView_Object self)"""
        return _XCAFView.XCAFView_Object_UnsetBackPlaneClipping(self, *args)


    def HasBackPlaneClipping(self, *args):
        """
        HasBackPlaneClipping(XCAFView_Object self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFView.XCAFView_Object_HasBackPlaneClipping(self, *args)


    def SetBackPlaneDistance(self, *args):
        """
        SetBackPlaneDistance(XCAFView_Object self, Standard_Real theDistance)

        :type theDistance: float

        """
        return _XCAFView.XCAFView_Object_SetBackPlaneDistance(self, *args)


    def BackPlaneDistance(self, *args):
        """
        BackPlaneDistance(XCAFView_Object self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _XCAFView.XCAFView_Object_BackPlaneDistance(self, *args)


    def SetViewVolumeSidesClipping(self, *args):
        """
        SetViewVolumeSidesClipping(XCAFView_Object self, Standard_Boolean theViewVolumeSidesClipping)

        :type theViewVolumeSidesClipping: bool

        """
        return _XCAFView.XCAFView_Object_SetViewVolumeSidesClipping(self, *args)


    def HasViewVolumeSidesClipping(self, *args):
        """
        HasViewVolumeSidesClipping(XCAFView_Object self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFView.XCAFView_Object_HasViewVolumeSidesClipping(self, *args)


    def CreateGDTPoints(self, *args):
        """
        CreateGDTPoints(XCAFView_Object self, Standard_Integer const theLenght)

        :type theLenght: int

        """
        return _XCAFView.XCAFView_Object_CreateGDTPoints(self, *args)


    def HasGDTPoints(self, *args):
        """
        HasGDTPoints(XCAFView_Object self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFView.XCAFView_Object_HasGDTPoints(self, *args)


    def NbGDTPoints(self, *args):
        """
        NbGDTPoints(XCAFView_Object self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFView.XCAFView_Object_NbGDTPoints(self, *args)


    def SetGDTPoint(self, *args):
        """
        SetGDTPoint(XCAFView_Object self, Standard_Integer const theIndex, gp_Pnt thePoint)

        :type theIndex: int
        :type thePoint: OCC.wrapper.gp.gp_Pnt

        """
        return _XCAFView.XCAFView_Object_SetGDTPoint(self, *args)


    def GDTPoint(self, *args):
        """
        GDTPoint(XCAFView_Object self, Standard_Integer const theIndex) -> gp_Pnt

        :type theIndex: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _XCAFView.XCAFView_Object_GDTPoint(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XCAFView.XCAFView_Object_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XCAFView.XCAFView_Object_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFView.XCAFView_Object_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XCAFView.delete_XCAFView_Object
XCAFView_Object_swigregister = _XCAFView.XCAFView_Object_swigregister
XCAFView_Object_swigregister(XCAFView_Object)

def XCAFView_Object_get_type_name(*args):
    """
    XCAFView_Object_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XCAFView.XCAFView_Object_get_type_name(*args)

def XCAFView_Object_get_type_descriptor(*args):
    """
    XCAFView_Object_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XCAFView.XCAFView_Object_get_type_descriptor(*args)

class Handle_XCAFView_Object(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XCAFView_Object self)

        Nullify the handle


        """
        return _XCAFView.Handle_XCAFView_Object_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XCAFView_Object self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XCAFView.Handle_XCAFView_Object_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XCAFView_Object self, XCAFView_Object thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XCAFView.Handle_XCAFView_Object_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XCAFView_Object self, Handle_XCAFView_Object theHandle) -> Handle_XCAFView_Object
        assign(Handle_XCAFView_Object self, XCAFView_Object thePtr) -> Handle_XCAFView_Object
        assign(Handle_XCAFView_Object self, Handle_XCAFView_Object theHandle) -> Handle_XCAFView_Object

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XCAFView.Handle_XCAFView_Object_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XCAFView_Object self) -> XCAFView_Object

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XCAFView.Handle_XCAFView_Object_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XCAFView_Object self) -> XCAFView_Object

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XCAFView.Handle_XCAFView_Object___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XCAFView_Object self) -> XCAFView_Object

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XCAFView.Handle_XCAFView_Object___ref__(self, *args)


    def __hash__(self):
        return _XCAFView.Handle_XCAFView_Object___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XCAFView.Handle_XCAFView_Object___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XCAFView.new_Handle_XCAFView_Object(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XCAFView.Handle_XCAFView_Object_DownCast)
    __swig_destroy__ = _XCAFView.delete_Handle_XCAFView_Object

    def SetName(self, *args):
        """
        SetName(Handle_XCAFView_Object self, Handle_TCollection_HAsciiString theName)

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFView.Handle_XCAFView_Object_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_XCAFView_Object self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFView.Handle_XCAFView_Object_Name(self, *args)


    def SetType(self, *args):
        """
        SetType(Handle_XCAFView_Object self, XCAFView_ProjectionType theType)

        :type theType: OCC.wrapper.XCAFView.XCAFView_ProjectionType

        """
        return _XCAFView.Handle_XCAFView_Object_SetType(self, *args)


    def Type(self, *args):
        """
        Type(Handle_XCAFView_Object self) -> XCAFView_ProjectionType

        :rtype: OCC.wrapper.XCAFView.XCAFView_ProjectionType

        """
        return _XCAFView.Handle_XCAFView_Object_Type(self, *args)


    def SetProjectionPoint(self, *args):
        """
        SetProjectionPoint(Handle_XCAFView_Object self, gp_Pnt thePoint)

        :type thePoint: OCC.wrapper.gp.gp_Pnt

        """
        return _XCAFView.Handle_XCAFView_Object_SetProjectionPoint(self, *args)


    def ProjectionPoint(self, *args):
        """
        ProjectionPoint(Handle_XCAFView_Object self) -> gp_Pnt

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _XCAFView.Handle_XCAFView_Object_ProjectionPoint(self, *args)


    def SetViewDirection(self, *args):
        """
        SetViewDirection(Handle_XCAFView_Object self, gp_Dir theDirection)

        :type theDirection: OCC.wrapper.gp.gp_Dir

        """
        return _XCAFView.Handle_XCAFView_Object_SetViewDirection(self, *args)


    def ViewDirection(self, *args):
        """
        ViewDirection(Handle_XCAFView_Object self) -> gp_Dir

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _XCAFView.Handle_XCAFView_Object_ViewDirection(self, *args)


    def SetUpDirection(self, *args):
        """
        SetUpDirection(Handle_XCAFView_Object self, gp_Dir theDirection)

        :type theDirection: OCC.wrapper.gp.gp_Dir

        """
        return _XCAFView.Handle_XCAFView_Object_SetUpDirection(self, *args)


    def UpDirection(self, *args):
        """
        UpDirection(Handle_XCAFView_Object self) -> gp_Dir

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _XCAFView.Handle_XCAFView_Object_UpDirection(self, *args)


    def SetZoomFactor(self, *args):
        """
        SetZoomFactor(Handle_XCAFView_Object self, Standard_Real theZoomFactor)

        :type theZoomFactor: float

        """
        return _XCAFView.Handle_XCAFView_Object_SetZoomFactor(self, *args)


    def ZoomFactor(self, *args):
        """
        ZoomFactor(Handle_XCAFView_Object self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _XCAFView.Handle_XCAFView_Object_ZoomFactor(self, *args)


    def SetWindowHorizontalSize(self, *args):
        """
        SetWindowHorizontalSize(Handle_XCAFView_Object self, Standard_Real theSize)

        :type theSize: float

        """
        return _XCAFView.Handle_XCAFView_Object_SetWindowHorizontalSize(self, *args)


    def WindowHorizontalSize(self, *args):
        """
        WindowHorizontalSize(Handle_XCAFView_Object self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _XCAFView.Handle_XCAFView_Object_WindowHorizontalSize(self, *args)


    def SetWindowVerticalSize(self, *args):
        """
        SetWindowVerticalSize(Handle_XCAFView_Object self, Standard_Real theSize)

        :type theSize: float

        """
        return _XCAFView.Handle_XCAFView_Object_SetWindowVerticalSize(self, *args)


    def WindowVerticalSize(self, *args):
        """
        WindowVerticalSize(Handle_XCAFView_Object self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _XCAFView.Handle_XCAFView_Object_WindowVerticalSize(self, *args)


    def SetClippingExpression(self, *args):
        """
        SetClippingExpression(Handle_XCAFView_Object self, Handle_TCollection_HAsciiString theExpression)

        :type theExpression: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFView.Handle_XCAFView_Object_SetClippingExpression(self, *args)


    def ClippingExpression(self, *args):
        """
        ClippingExpression(Handle_XCAFView_Object self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFView.Handle_XCAFView_Object_ClippingExpression(self, *args)


    def UnsetFrontPlaneClipping(self, *args):
        """UnsetFrontPlaneClipping(Handle_XCAFView_Object self)"""
        return _XCAFView.Handle_XCAFView_Object_UnsetFrontPlaneClipping(self, *args)


    def HasFrontPlaneClipping(self, *args):
        """
        HasFrontPlaneClipping(Handle_XCAFView_Object self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFView.Handle_XCAFView_Object_HasFrontPlaneClipping(self, *args)


    def SetFrontPlaneDistance(self, *args):
        """
        SetFrontPlaneDistance(Handle_XCAFView_Object self, Standard_Real theDistance)

        :type theDistance: float

        """
        return _XCAFView.Handle_XCAFView_Object_SetFrontPlaneDistance(self, *args)


    def FrontPlaneDistance(self, *args):
        """
        FrontPlaneDistance(Handle_XCAFView_Object self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _XCAFView.Handle_XCAFView_Object_FrontPlaneDistance(self, *args)


    def UnsetBackPlaneClipping(self, *args):
        """UnsetBackPlaneClipping(Handle_XCAFView_Object self)"""
        return _XCAFView.Handle_XCAFView_Object_UnsetBackPlaneClipping(self, *args)


    def HasBackPlaneClipping(self, *args):
        """
        HasBackPlaneClipping(Handle_XCAFView_Object self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFView.Handle_XCAFView_Object_HasBackPlaneClipping(self, *args)


    def SetBackPlaneDistance(self, *args):
        """
        SetBackPlaneDistance(Handle_XCAFView_Object self, Standard_Real theDistance)

        :type theDistance: float

        """
        return _XCAFView.Handle_XCAFView_Object_SetBackPlaneDistance(self, *args)


    def BackPlaneDistance(self, *args):
        """
        BackPlaneDistance(Handle_XCAFView_Object self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _XCAFView.Handle_XCAFView_Object_BackPlaneDistance(self, *args)


    def SetViewVolumeSidesClipping(self, *args):
        """
        SetViewVolumeSidesClipping(Handle_XCAFView_Object self, Standard_Boolean theViewVolumeSidesClipping)

        :type theViewVolumeSidesClipping: bool

        """
        return _XCAFView.Handle_XCAFView_Object_SetViewVolumeSidesClipping(self, *args)


    def HasViewVolumeSidesClipping(self, *args):
        """
        HasViewVolumeSidesClipping(Handle_XCAFView_Object self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFView.Handle_XCAFView_Object_HasViewVolumeSidesClipping(self, *args)


    def CreateGDTPoints(self, *args):
        """
        CreateGDTPoints(Handle_XCAFView_Object self, Standard_Integer const theLenght)

        :type theLenght: int

        """
        return _XCAFView.Handle_XCAFView_Object_CreateGDTPoints(self, *args)


    def HasGDTPoints(self, *args):
        """
        HasGDTPoints(Handle_XCAFView_Object self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFView.Handle_XCAFView_Object_HasGDTPoints(self, *args)


    def NbGDTPoints(self, *args):
        """
        NbGDTPoints(Handle_XCAFView_Object self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFView.Handle_XCAFView_Object_NbGDTPoints(self, *args)


    def SetGDTPoint(self, *args):
        """
        SetGDTPoint(Handle_XCAFView_Object self, Standard_Integer const theIndex, gp_Pnt thePoint)

        :type theIndex: int
        :type thePoint: OCC.wrapper.gp.gp_Pnt

        """
        return _XCAFView.Handle_XCAFView_Object_SetGDTPoint(self, *args)


    def GDTPoint(self, *args):
        """
        GDTPoint(Handle_XCAFView_Object self, Standard_Integer const theIndex) -> gp_Pnt

        :type theIndex: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _XCAFView.Handle_XCAFView_Object_GDTPoint(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XCAFView_Object self) -> char const *

        :rtype: const char *

        """
        return _XCAFView.Handle_XCAFView_Object_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFView.Handle_XCAFView_Object_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFView.Handle_XCAFView_Object_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XCAFView_Object self)

        Memory deallocator for transient classes


        """
        return _XCAFView.Handle_XCAFView_Object_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XCAFView_Object self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XCAFView_Object self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFView.Handle_XCAFView_Object_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XCAFView_Object self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XCAFView_Object self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFView.Handle_XCAFView_Object_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XCAFView_Object self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XCAFView.Handle_XCAFView_Object_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XCAFView_Object self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFView.Handle_XCAFView_Object_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XCAFView_Object self)

        Increments the reference counter of this object


        """
        return _XCAFView.Handle_XCAFView_Object_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XCAFView_Object self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFView.Handle_XCAFView_Object_DecrementRefCounter(self, *args)

Handle_XCAFView_Object_swigregister = _XCAFView.Handle_XCAFView_Object_swigregister
Handle_XCAFView_Object_swigregister(Handle_XCAFView_Object)

def Handle_XCAFView_Object_DownCast(thing):
    return _XCAFView.Handle_XCAFView_Object_DownCast(thing)
Handle_XCAFView_Object_DownCast = _XCAFView.Handle_XCAFView_Object_DownCast



