# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ProjLib')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ProjLib')
    _ProjLib = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ProjLib', [dirname(__file__)])
        except ImportError:
            import _ProjLib
            return _ProjLib
        try:
            _mod = imp.load_module('_ProjLib', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ProjLib = swig_import_helper()
    del swig_import_helper
else:
    import _ProjLib
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ProjLib.delete_SwigPyIterator

    def value(self):
        return _ProjLib.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ProjLib.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ProjLib.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ProjLib.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ProjLib.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ProjLib.SwigPyIterator_copy(self)

    def next(self):
        return _ProjLib.SwigPyIterator_next(self)

    def __next__(self):
        return _ProjLib.SwigPyIterator___next__(self)

    def previous(self):
        return _ProjLib.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ProjLib.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ProjLib.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ProjLib.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ProjLib.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ProjLib.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ProjLib.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ProjLib.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _ProjLib.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _ProjLib.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_ProjLib.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _ProjLib.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _ProjLib.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ProjLib.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _ProjLib.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _ProjLib.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _ProjLib.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _ProjLib.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_ProjLib.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _ProjLib.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _ProjLib.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ProjLib.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _ProjLib.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _ProjLib.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _ProjLib.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _ProjLib.ptr_to_number(item)
ptr_to_number = _ProjLib.ptr_to_number

def HashCode(*args):
    return _ProjLib.HashCode(*args)
HashCode = _ProjLib.HashCode

def ptr_equal(a, b):
    return _ProjLib.ptr_equal(a, b)
ptr_equal = _ProjLib.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import AppParCurves
else:
    import AppParCurves
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import math
else:
    import math
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor2d
else:
    import Adaptor2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor3d
else:
    import Adaptor3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAdaptor
else:
    import GeomAdaptor
del _swig_python_version_info
class ProjLib_Projector(object):
    """Root class for projection algorithms, stores the result."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ProjLib_Projector self) -> ProjLib_Projector

        Sets the type to OtherCurve


        """
        this = _ProjLib.new_ProjLib_Projector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def IsDone(self, *args):
        """
        IsDone(ProjLib_Projector self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ProjLib.ProjLib_Projector_IsDone(self, *args)


    def Done(self, *args):
        """
        Done(ProjLib_Projector self)

        Set isDone = Standard_True;


        """
        return _ProjLib.ProjLib_Projector_Done(self, *args)


    def GetType(self, *args):
        """
        GetType(ProjLib_Projector self) -> GeomAbs_CurveType

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_CurveType

        """
        return _ProjLib.ProjLib_Projector_GetType(self, *args)


    def SetBSpline(self, *args):
        """
        SetBSpline(ProjLib_Projector self, Handle_Geom2d_BSplineCurve C)

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_BSplineCurve

        """
        return _ProjLib.ProjLib_Projector_SetBSpline(self, *args)


    def SetBezier(self, *args):
        """
        SetBezier(ProjLib_Projector self, Handle_Geom2d_BezierCurve C)

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_BezierCurve

        """
        return _ProjLib.ProjLib_Projector_SetBezier(self, *args)


    def SetType(self, *args):
        """
        SetType(ProjLib_Projector self, GeomAbs_CurveType const Type)

        :type Type: OCC.wrapper.GeomAbs.GeomAbs_CurveType

        """
        return _ProjLib.ProjLib_Projector_SetType(self, *args)


    def IsPeriodic(self, *args):
        """
        IsPeriodic(ProjLib_Projector self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ProjLib.ProjLib_Projector_IsPeriodic(self, *args)


    def SetPeriodic(self, *args):
        """SetPeriodic(ProjLib_Projector self)"""
        return _ProjLib.ProjLib_Projector_SetPeriodic(self, *args)


    def Line(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_Lin2d

        """
        res = _ProjLib.ProjLib_Projector_Line(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Circle(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_Circ2d

        """
        res = _ProjLib.ProjLib_Projector_Circle(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Ellipse(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_Elips2d

        """
        res = _ProjLib.ProjLib_Projector_Ellipse(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Hyperbola(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_Hypr2d

        """
        res = _ProjLib.ProjLib_Projector_Hyperbola(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Parabola(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_Parab2d

        """
        res = _ProjLib.ProjLib_Projector_Parabola(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Bezier(self, *args):
        """
        Bezier(ProjLib_Projector self) -> Handle_Geom2d_BezierCurve

        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_BezierCurve

        """
        return _ProjLib.ProjLib_Projector_Bezier(self, *args)


    def BSpline(self, *args):
        """
        BSpline(ProjLib_Projector self) -> Handle_Geom2d_BSplineCurve

        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_BSplineCurve

        """
        return _ProjLib.ProjLib_Projector_BSpline(self, *args)


    def Project(self, *args):
        """
        Project(ProjLib_Projector self, gp_Lin L)
        Project(ProjLib_Projector self, gp_Circ C)
        Project(ProjLib_Projector self, gp_Elips E)
        Project(ProjLib_Projector self, gp_Parab P)
        Project(ProjLib_Projector self, gp_Hypr H)

        :type H: OCC.wrapper.gp.gp_Hypr

        """
        return _ProjLib.ProjLib_Projector_Project(self, *args)


    def UFrame(self, *args):
        """
        UFrame(ProjLib_Projector self, Standard_Real const CFirst, Standard_Real const CLast, Standard_Real const UFirst, Standard_Real const Period)

        Translates the 2d curve
        to set the part of the curve [CFirst, CLast]
        in the range [ UFirst, UFirst + Period [

        :type CFirst: float
        :type CLast: float
        :type UFirst: float
        :type Period: float

        """
        return _ProjLib.ProjLib_Projector_UFrame(self, *args)


    def VFrame(self, *args):
        """
        VFrame(ProjLib_Projector self, Standard_Real const CFirst, Standard_Real const CLast, Standard_Real const VFirst, Standard_Real const Period)

        Translates the 2d curve
        to set the part of the curve [CFirst, CLast]
        in the range [ VFirst, VFirst + Period [

        :type CFirst: float
        :type CLast: float
        :type VFirst: float
        :type Period: float

        """
        return _ProjLib.ProjLib_Projector_VFrame(self, *args)

    __swig_destroy__ = _ProjLib.delete_ProjLib_Projector
ProjLib_Projector_swigregister = _ProjLib.ProjLib_Projector_swigregister
ProjLib_Projector_swigregister(ProjLib_Projector)

class ProjLib_HSequenceOfHSequenceOfPnt(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_ProjLib_HSequenceOfHSequenceOfPnt
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_ProjLib_HSequenceOfHSequenceOfPnt(self) 
            return h


    def __init__(self, *args):
        """
        __init__(ProjLib_HSequenceOfHSequenceOfPnt self) -> ProjLib_HSequenceOfHSequenceOfPnt
        __init__(ProjLib_HSequenceOfHSequenceOfPnt self, NCollection_Sequence_Handle_TColgp_HSequenceOfPnt theOther) -> ProjLib_HSequenceOfHSequenceOfPnt

        :type theOther: OCC.wrapper.ProjLib.ProjLib_SequenceOfHSequenceOfPnt

        """
        this = _ProjLib.new_ProjLib_HSequenceOfHSequenceOfPnt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.ProjLib.ProjLib_SequenceOfHSequenceOfPnt

        """
        res = _ProjLib.ProjLib_HSequenceOfHSequenceOfPnt_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(ProjLib_HSequenceOfHSequenceOfPnt self, Handle_TColgp_HSequenceOfPnt theItem)
        Append(ProjLib_HSequenceOfHSequenceOfPnt self, NCollection_Sequence_Handle_TColgp_HSequenceOfPnt theSequence)

        :type theSequence: OCC.wrapper.ProjLib.ProjLib_SequenceOfHSequenceOfPnt

        """
        return _ProjLib.ProjLib_HSequenceOfHSequenceOfPnt_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(ProjLib_HSequenceOfHSequenceOfPnt self) -> NCollection_Sequence_Handle_TColgp_HSequenceOfPnt

        :rtype: OCC.wrapper.ProjLib.ProjLib_SequenceOfHSequenceOfPnt

        """
        return _ProjLib.ProjLib_HSequenceOfHSequenceOfPnt_ChangeSequence(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _ProjLib.ProjLib_HSequenceOfHSequenceOfPnt_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _ProjLib.ProjLib_HSequenceOfHSequenceOfPnt_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _ProjLib.ProjLib_HSequenceOfHSequenceOfPnt_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _ProjLib.delete_ProjLib_HSequenceOfHSequenceOfPnt
ProjLib_HSequenceOfHSequenceOfPnt_swigregister = _ProjLib.ProjLib_HSequenceOfHSequenceOfPnt_swigregister
ProjLib_HSequenceOfHSequenceOfPnt_swigregister(ProjLib_HSequenceOfHSequenceOfPnt)

def ProjLib_HSequenceOfHSequenceOfPnt_get_type_name(*args):
    """
    ProjLib_HSequenceOfHSequenceOfPnt_get_type_name() -> char const *

    :rtype: const char *

    """
    return _ProjLib.ProjLib_HSequenceOfHSequenceOfPnt_get_type_name(*args)

def ProjLib_HSequenceOfHSequenceOfPnt_get_type_descriptor(*args):
    """
    ProjLib_HSequenceOfHSequenceOfPnt_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _ProjLib.ProjLib_HSequenceOfHSequenceOfPnt_get_type_descriptor(*args)

class ProjLib_ComputeApproxOnPolarSurface(object):
    """
    Approximate the  projection  of a  3d curve  on an
    polar  surface  and  stores the result  in  Approx.
    The result is a  2d curve.  The evaluation of  the
    current  point of the  2d  curve is done with  the
    evaluation of the extrema  P3d - Surface.
    For approximation some parameters are used, including 
    required tolerance of approximation.
    Tolerance is maximal possible value of 3d deviation of 3d projection of projected curve from
    "exact" 3d projection. Since algorithm searches 2d curve on surface, required 2d tolerance is computed
    from 3d tolerance with help of U,V resolutions of surface.
    3d and 2d tolerances have sence only for curves on surface, it defines precision of projecting and approximation
    and have nothing to do with distance between the projected curve and the surface.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ProjLib_ComputeApproxOnPolarSurface self) -> ProjLib_ComputeApproxOnPolarSurface
        __init__(ProjLib_ComputeApproxOnPolarSurface self, Handle_Adaptor3d_HCurve C, Handle_Adaptor3d_HSurface S, Standard_Real const Tol=1.0e-4) -> ProjLib_ComputeApproxOnPolarSurface
        __init__(ProjLib_ComputeApproxOnPolarSurface self, Handle_Adaptor2d_HCurve2d InitCurve2d, Handle_Adaptor3d_HCurve C, Handle_Adaptor3d_HSurface S, Standard_Real const Tol) -> ProjLib_ComputeApproxOnPolarSurface
        __init__(ProjLib_ComputeApproxOnPolarSurface self, Handle_Adaptor2d_HCurve2d InitCurve2d, Handle_Adaptor2d_HCurve2d InitCurve2dBis, Handle_Adaptor3d_HCurve C, Handle_Adaptor3d_HSurface S, Standard_Real const Tol) -> ProjLib_ComputeApproxOnPolarSurface

        Constructor, which performs projecting, using two initial curves 2d: InitCurve2d and InitCurve2dBis that are any rough approximations of result curves.
        This constructor is used to get two pcurves for seem edge.
        Parameter Tol is 3d tolerance of approximation.

        :type InitCurve2d: OCC.wrapper.Adaptor2d.Handle_Adaptor2d_HCurve2d
        :type InitCurve2dBis: OCC.wrapper.Adaptor2d.Handle_Adaptor2d_HCurve2d
        :type C: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve
        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :type Tol: float

        """
        this = _ProjLib.new_ProjLib_ComputeApproxOnPolarSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetDegree(self, *args):
        """
        SetDegree(ProjLib_ComputeApproxOnPolarSurface self, Standard_Integer const theDegMin, Standard_Integer const theDegMax)

        Set min and max possible degree of result BSpline curve2d, which is got by approximation.
        If theDegMin/Max < 0, algorithm uses values min = 2, max = 8.

        :type theDegMin: int
        :type theDegMax: int

        """
        return _ProjLib.ProjLib_ComputeApproxOnPolarSurface_SetDegree(self, *args)


    def SetMaxSegments(self, *args):
        """
        SetMaxSegments(ProjLib_ComputeApproxOnPolarSurface self, Standard_Integer const theMaxSegments)

        Set the parameter, which defines maximal value of parametric intervals the projected
        curve can be cut for approximation. If theMaxSegments < 0, algorithm uses default 
        value = 1000.

        :type theMaxSegments: int

        """
        return _ProjLib.ProjLib_ComputeApproxOnPolarSurface_SetMaxSegments(self, *args)


    def SetBndPnt(self, *args):
        """
        SetBndPnt(ProjLib_ComputeApproxOnPolarSurface self, AppParCurves_Constraint const theBndPnt)

        Set the parameter, which defines type of boundary condition between segments during approximation.
        It can be AppParCurves_PassPoint or AppParCurves_TangencyPoint.
        Default value is AppParCurves_TangencyPoint.

        :type theBndPnt: OCC.wrapper.AppParCurves.AppParCurves_Constraint

        """
        return _ProjLib.ProjLib_ComputeApproxOnPolarSurface_SetBndPnt(self, *args)


    def SetMaxDist(self, *args):
        """
        SetMaxDist(ProjLib_ComputeApproxOnPolarSurface self, Standard_Real const theMaxDist)

        Set the parameter, which defines maximal possible distance between projected curve and surface.
        It is used only for projecting on not analytical surfaces.
        If theMaxDist < 0, algoritm uses default value 100.*Tolerance. 
        If real distance between curve and surface more then theMaxDist, algorithm stops working.

        :type theMaxDist: float

        """
        return _ProjLib.ProjLib_ComputeApproxOnPolarSurface_SetMaxDist(self, *args)


    def SetTolerance(self, *args):
        """
        SetTolerance(ProjLib_ComputeApproxOnPolarSurface self, Standard_Real const theTolerance)

        Set the tolerance used to project
        the curve on the surface.
        Default value is Precision::Approximation().

        :type theTolerance: float

        """
        return _ProjLib.ProjLib_ComputeApproxOnPolarSurface_SetTolerance(self, *args)


    def Perform(self, *args):
        """
        Perform(ProjLib_ComputeApproxOnPolarSurface self, Handle_Adaptor3d_HCurve C, Handle_Adaptor3d_HSurface S)
        Perform(ProjLib_ComputeApproxOnPolarSurface self, Handle_Adaptor2d_HCurve2d InitCurve2d, Handle_Adaptor3d_HCurve C, Handle_Adaptor3d_HSurface S) -> Handle_Geom2d_BSplineCurve

        Method, which performs projecting, using default values of parameters or
        they must be set by corresponding methods before using.
        Parameter InitCurve2d is any rough estimation of 2d result curve.

        :type InitCurve2d: OCC.wrapper.Adaptor2d.Handle_Adaptor2d_HCurve2d
        :type C: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve
        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_BSplineCurve

        """
        return _ProjLib.ProjLib_ComputeApproxOnPolarSurface_Perform(self, *args)


    def BuildInitialCurve2d(self, *args):
        """
        BuildInitialCurve2d(ProjLib_ComputeApproxOnPolarSurface self, Handle_Adaptor3d_HCurve Curve, Handle_Adaptor3d_HSurface S) -> Handle_Adaptor2d_HCurve2d

        Builds initial 2d curve as BSpline with degree = 1 using Extrema algoritm.
        Method is used in method Perform(...).

        :type Curve: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve
        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :rtype: OCC.wrapper.Adaptor2d.Handle_Adaptor2d_HCurve2d

        """
        return _ProjLib.ProjLib_ComputeApproxOnPolarSurface_BuildInitialCurve2d(self, *args)


    def ProjectUsingInitialCurve2d(self, *args):
        """
        ProjectUsingInitialCurve2d(ProjLib_ComputeApproxOnPolarSurface self, Handle_Adaptor3d_HCurve Curve, Handle_Adaptor3d_HSurface S, Handle_Adaptor2d_HCurve2d InitCurve2d) -> Handle_Geom2d_BSplineCurve

        Method, which performs projecting.
        Method is used in method Perform(...).

        :type Curve: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve
        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :type InitCurve2d: OCC.wrapper.Adaptor2d.Handle_Adaptor2d_HCurve2d
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_BSplineCurve

        """
        return _ProjLib.ProjLib_ComputeApproxOnPolarSurface_ProjectUsingInitialCurve2d(self, *args)


    def BSpline(self, *args):
        """
        BSpline(ProjLib_ComputeApproxOnPolarSurface self) -> Handle_Geom2d_BSplineCurve

        Returns result curve 2d.

        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_BSplineCurve

        """
        return _ProjLib.ProjLib_ComputeApproxOnPolarSurface_BSpline(self, *args)


    def Curve2d(self, *args):
        """
        Curve2d(ProjLib_ComputeApproxOnPolarSurface self) -> Handle_Geom2d_Curve

        Returns second 2d curve.

        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _ProjLib.ProjLib_ComputeApproxOnPolarSurface_Curve2d(self, *args)


    def IsDone(self, *args):
        """
        IsDone(ProjLib_ComputeApproxOnPolarSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ProjLib.ProjLib_ComputeApproxOnPolarSurface_IsDone(self, *args)


    def Tolerance(self, *args):
        """
        Tolerance(ProjLib_ComputeApproxOnPolarSurface self) -> Standard_Real

        returns the reached Tolerance.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _ProjLib.ProjLib_ComputeApproxOnPolarSurface_Tolerance(self, *args)

    __swig_destroy__ = _ProjLib.delete_ProjLib_ComputeApproxOnPolarSurface
ProjLib_ComputeApproxOnPolarSurface_swigregister = _ProjLib.ProjLib_ComputeApproxOnPolarSurface_swigregister
ProjLib_ComputeApproxOnPolarSurface_swigregister(ProjLib_ComputeApproxOnPolarSurface)

class ProjLib_Cylinder(ProjLib_Projector):
    """Projects elementary curves on a cylinder."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ProjLib_Cylinder self) -> ProjLib_Cylinder
        __init__(ProjLib_Cylinder self, gp_Cylinder Cyl) -> ProjLib_Cylinder
        __init__(ProjLib_Cylinder self, gp_Cylinder Cyl, gp_Lin L) -> ProjLib_Cylinder
        __init__(ProjLib_Cylinder self, gp_Cylinder Cyl, gp_Circ C) -> ProjLib_Cylinder
        __init__(ProjLib_Cylinder self, gp_Cylinder Cyl, gp_Elips E) -> ProjLib_Cylinder

        Projection of the ellipse <E> on the cylinder <Cyl>.

        :type Cyl: OCC.wrapper.gp.gp_Cylinder
        :type E: OCC.wrapper.gp.gp_Elips

        """
        this = _ProjLib.new_ProjLib_Cylinder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(ProjLib_Cylinder self, gp_Cylinder Cyl)

        :type Cyl: OCC.wrapper.gp.gp_Cylinder

        """
        return _ProjLib.ProjLib_Cylinder_Init(self, *args)


    def Project(self, *args):
        """
        Project(ProjLib_Cylinder self, gp_Lin L)
        Project(ProjLib_Cylinder self, gp_Circ C)
        Project(ProjLib_Cylinder self, gp_Elips E)
        Project(ProjLib_Cylinder self, gp_Parab P)
        Project(ProjLib_Cylinder self, gp_Hypr H)

        :type H: OCC.wrapper.gp.gp_Hypr

        """
        return _ProjLib.ProjLib_Cylinder_Project(self, *args)

    __swig_destroy__ = _ProjLib.delete_ProjLib_Cylinder
ProjLib_Cylinder_swigregister = _ProjLib.ProjLib_Cylinder_swigregister
ProjLib_Cylinder_swigregister(ProjLib_Cylinder)

class ProjLib_Sphere(ProjLib_Projector):
    """Projects elementary curves on a sphere."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ProjLib_Sphere self) -> ProjLib_Sphere
        __init__(ProjLib_Sphere self, gp_Sphere Sp) -> ProjLib_Sphere
        __init__(ProjLib_Sphere self, gp_Sphere Sp, gp_Circ C) -> ProjLib_Sphere

        Projection of the circle <C> on the sphere <Sp>.

        :type Sp: OCC.wrapper.gp.gp_Sphere
        :type C: OCC.wrapper.gp.gp_Circ

        """
        this = _ProjLib.new_ProjLib_Sphere(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(ProjLib_Sphere self, gp_Sphere Sp)

        :type Sp: OCC.wrapper.gp.gp_Sphere

        """
        return _ProjLib.ProjLib_Sphere_Init(self, *args)


    def Project(self, *args):
        """
        Project(ProjLib_Sphere self, gp_Lin L)
        Project(ProjLib_Sphere self, gp_Circ C)
        Project(ProjLib_Sphere self, gp_Elips E)
        Project(ProjLib_Sphere self, gp_Parab P)
        Project(ProjLib_Sphere self, gp_Hypr H)

        :type H: OCC.wrapper.gp.gp_Hypr

        """
        return _ProjLib.ProjLib_Sphere_Project(self, *args)


    def SetInBounds(self, *args):
        """
        SetInBounds(ProjLib_Sphere self, Standard_Real const U)

        Set the point of parameter U on C in the natural
        restrictions of the sphere.

        :type U: float

        """
        return _ProjLib.ProjLib_Sphere_SetInBounds(self, *args)

    __swig_destroy__ = _ProjLib.delete_ProjLib_Sphere
ProjLib_Sphere_swigregister = _ProjLib.ProjLib_Sphere_swigregister
ProjLib_Sphere_swigregister(ProjLib_Sphere)

class ProjLib_Torus(ProjLib_Projector):
    """Projects elementary curves on a torus."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ProjLib_Torus self) -> ProjLib_Torus
        __init__(ProjLib_Torus self, gp_Torus To) -> ProjLib_Torus
        __init__(ProjLib_Torus self, gp_Torus To, gp_Circ C) -> ProjLib_Torus

        Projection of the circle <C> on the torus <To>.

        :type To: OCC.wrapper.gp.gp_Torus
        :type C: OCC.wrapper.gp.gp_Circ

        """
        this = _ProjLib.new_ProjLib_Torus(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(ProjLib_Torus self, gp_Torus To)

        :type To: OCC.wrapper.gp.gp_Torus

        """
        return _ProjLib.ProjLib_Torus_Init(self, *args)


    def Project(self, *args):
        """
        Project(ProjLib_Torus self, gp_Lin L)
        Project(ProjLib_Torus self, gp_Circ C)
        Project(ProjLib_Torus self, gp_Elips E)
        Project(ProjLib_Torus self, gp_Parab P)
        Project(ProjLib_Torus self, gp_Hypr H)

        :type H: OCC.wrapper.gp.gp_Hypr

        """
        return _ProjLib.ProjLib_Torus_Project(self, *args)

    __swig_destroy__ = _ProjLib.delete_ProjLib_Torus
ProjLib_Torus_swigregister = _ProjLib.ProjLib_Torus_swigregister
ProjLib_Torus_swigregister(ProjLib_Torus)

class ProjLib_Plane(ProjLib_Projector):
    """Projects elementary curves on a plane."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ProjLib_Plane self) -> ProjLib_Plane
        __init__(ProjLib_Plane self, gp_Pln Pl) -> ProjLib_Plane
        __init__(ProjLib_Plane self, gp_Pln Pl, gp_Lin L) -> ProjLib_Plane
        __init__(ProjLib_Plane self, gp_Pln Pl, gp_Circ C) -> ProjLib_Plane
        __init__(ProjLib_Plane self, gp_Pln Pl, gp_Elips E) -> ProjLib_Plane
        __init__(ProjLib_Plane self, gp_Pln Pl, gp_Parab P) -> ProjLib_Plane
        __init__(ProjLib_Plane self, gp_Pln Pl, gp_Hypr H) -> ProjLib_Plane

        Projection of the hyperbola <H> on the plane <Pl>.

        :type Pl: OCC.wrapper.gp.gp_Pln
        :type H: OCC.wrapper.gp.gp_Hypr

        """
        this = _ProjLib.new_ProjLib_Plane(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(ProjLib_Plane self, gp_Pln Pl)

        :type Pl: OCC.wrapper.gp.gp_Pln

        """
        return _ProjLib.ProjLib_Plane_Init(self, *args)


    def Project(self, *args):
        """
        Project(ProjLib_Plane self, gp_Lin L)
        Project(ProjLib_Plane self, gp_Circ C)
        Project(ProjLib_Plane self, gp_Elips E)
        Project(ProjLib_Plane self, gp_Parab P)
        Project(ProjLib_Plane self, gp_Hypr H)

        :type H: OCC.wrapper.gp.gp_Hypr

        """
        return _ProjLib.ProjLib_Plane_Project(self, *args)

    __swig_destroy__ = _ProjLib.delete_ProjLib_Plane
ProjLib_Plane_swigregister = _ProjLib.ProjLib_Plane_swigregister
ProjLib_Plane_swigregister(ProjLib_Plane)

class ProjLib_PrjFunc(math.math_FunctionSetWithDerivatives):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ProjLib_PrjFunc self, Adaptor3d_Curve C, Standard_Real const FixVal, Adaptor3d_Surface S, Standard_Integer const Fix) -> ProjLib_PrjFunc

        :type C: OCC.wrapper.Adaptor3d.Adaptor3d_CurvePtr
        :type FixVal: float
        :type S: OCC.wrapper.Adaptor3d.Adaptor3d_SurfacePtr
        :type Fix: int

        """
        this = _ProjLib.new_ProjLib_PrjFunc(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def NbVariables(self, *args):
        """
        NbVariables(ProjLib_PrjFunc self) -> Standard_Integer

        returns the number of variables of the function.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ProjLib.ProjLib_PrjFunc_NbVariables(self, *args)


    def NbEquations(self, *args):
        """
        NbEquations(ProjLib_PrjFunc self) -> Standard_Integer

        returns the number of equations of the function.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ProjLib.ProjLib_PrjFunc_NbEquations(self, *args)


    def Value(self, *args):
        """
        Value(ProjLib_PrjFunc self, math_Vector X, math_Vector F) -> Standard_Boolean

        computes the values <F> of the Functions for the
        variable <X>.
        Returns True if the computation was done successfully,
        False otherwise.

        :type X: OCC.wrapper.math.math_Vector
        :type F: OCC.wrapper.math.math_Vector
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ProjLib.ProjLib_PrjFunc_Value(self, *args)


    def Derivatives(self, *args):
        """
        Derivatives(ProjLib_PrjFunc self, math_Vector X, math_Matrix D) -> Standard_Boolean

        returns the values <D> of the derivatives for the
        variable <X>.
        Returns True if the computation was done successfully,
        False otherwise.

        :type X: OCC.wrapper.math.math_Vector
        :type D: OCC.wrapper.math.math_Matrix
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ProjLib.ProjLib_PrjFunc_Derivatives(self, *args)


    def Values(self, *args):
        """
        Values(ProjLib_PrjFunc self, math_Vector X, math_Vector F, math_Matrix D) -> Standard_Boolean

        returns the values <F> of the functions and the derivatives
        <D> for the variable <X>.
        Returns True if the computation was done successfully,
        False otherwise.

        :type X: OCC.wrapper.math.math_Vector
        :type F: OCC.wrapper.math.math_Vector
        :type D: OCC.wrapper.math.math_Matrix
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ProjLib.ProjLib_PrjFunc_Values(self, *args)


    def Solution(self, *args):
        """
        Solution(ProjLib_PrjFunc self) -> gp_Pnt2d

        returns  point  on  surface

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _ProjLib.ProjLib_PrjFunc_Solution(self, *args)

    __swig_destroy__ = _ProjLib.delete_ProjLib_PrjFunc
ProjLib_PrjFunc_swigregister = _ProjLib.ProjLib_PrjFunc_swigregister
ProjLib_PrjFunc_swigregister(ProjLib_PrjFunc)

class ProjLib_HCompProjectedCurve(Adaptor2d.Adaptor2d_HCurve2d):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_ProjLib_HCompProjectedCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_ProjLib_HCompProjectedCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(ProjLib_HCompProjectedCurve self) -> ProjLib_HCompProjectedCurve
        __init__(ProjLib_HCompProjectedCurve self, ProjLib_CompProjectedCurve C) -> ProjLib_HCompProjectedCurve

        Creates a GenHCurve2d from a Curve

        :type C: OCC.wrapper.ProjLib.ProjLib_CompProjectedCurve

        """
        this = _ProjLib.new_ProjLib_HCompProjectedCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Set(self, *args):
        """
        Set(ProjLib_HCompProjectedCurve self, ProjLib_CompProjectedCurve C)

        Sets the field of the GenHCurve2d.

        :type C: OCC.wrapper.ProjLib.ProjLib_CompProjectedCurve

        """
        return _ProjLib.ProjLib_HCompProjectedCurve_Set(self, *args)


    def Curve2d(self, *args):
        """
        Returns the curve used to create the GenHCurve2d.
        This is redefined from HCurve2d, cannot be inline.

        :rtype: OCC.wrapper.Adaptor2d.Adaptor2d_Curve2d

        """
        res = _ProjLib.ProjLib_HCompProjectedCurve_Curve2d(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeCurve2d(self, *args):
        """
        ChangeCurve2d(ProjLib_HCompProjectedCurve self) -> ProjLib_CompProjectedCurve

        Returns the curve used to create the GenHCurve.

        :rtype: OCC.wrapper.ProjLib.ProjLib_CompProjectedCurve

        """
        return _ProjLib.ProjLib_HCompProjectedCurve_ChangeCurve2d(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _ProjLib.ProjLib_HCompProjectedCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _ProjLib.ProjLib_HCompProjectedCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _ProjLib.ProjLib_HCompProjectedCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _ProjLib.delete_ProjLib_HCompProjectedCurve
ProjLib_HCompProjectedCurve_swigregister = _ProjLib.ProjLib_HCompProjectedCurve_swigregister
ProjLib_HCompProjectedCurve_swigregister(ProjLib_HCompProjectedCurve)

def ProjLib_HCompProjectedCurve_get_type_name(*args):
    """
    ProjLib_HCompProjectedCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _ProjLib.ProjLib_HCompProjectedCurve_get_type_name(*args)

def ProjLib_HCompProjectedCurve_get_type_descriptor(*args):
    """
    ProjLib_HCompProjectedCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _ProjLib.ProjLib_HCompProjectedCurve_get_type_descriptor(*args)

class Handle_ProjLib_HSequenceOfHSequenceOfPnt(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_ProjLib_HSequenceOfHSequenceOfPnt self)

        Nullify the handle


        """
        return _ProjLib.Handle_ProjLib_HSequenceOfHSequenceOfPnt_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_ProjLib_HSequenceOfHSequenceOfPnt self) -> bool

        Check for being null

        :rtype: bool

        """
        return _ProjLib.Handle_ProjLib_HSequenceOfHSequenceOfPnt_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_ProjLib_HSequenceOfHSequenceOfPnt self, ProjLib_HSequenceOfHSequenceOfPnt thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _ProjLib.Handle_ProjLib_HSequenceOfHSequenceOfPnt_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_ProjLib_HSequenceOfHSequenceOfPnt self, Handle_ProjLib_HSequenceOfHSequenceOfPnt theHandle) -> Handle_ProjLib_HSequenceOfHSequenceOfPnt
        assign(Handle_ProjLib_HSequenceOfHSequenceOfPnt self, ProjLib_HSequenceOfHSequenceOfPnt thePtr) -> Handle_ProjLib_HSequenceOfHSequenceOfPnt
        assign(Handle_ProjLib_HSequenceOfHSequenceOfPnt self, Handle_ProjLib_HSequenceOfHSequenceOfPnt theHandle) -> Handle_ProjLib_HSequenceOfHSequenceOfPnt

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _ProjLib.Handle_ProjLib_HSequenceOfHSequenceOfPnt_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_ProjLib_HSequenceOfHSequenceOfPnt self) -> ProjLib_HSequenceOfHSequenceOfPnt

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _ProjLib.Handle_ProjLib_HSequenceOfHSequenceOfPnt_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_ProjLib_HSequenceOfHSequenceOfPnt self) -> ProjLib_HSequenceOfHSequenceOfPnt

        Member access operator (note non-const)

        :rtype: T *

        """
        return _ProjLib.Handle_ProjLib_HSequenceOfHSequenceOfPnt___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_ProjLib_HSequenceOfHSequenceOfPnt self) -> ProjLib_HSequenceOfHSequenceOfPnt

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _ProjLib.Handle_ProjLib_HSequenceOfHSequenceOfPnt___ref__(self, *args)


    def __hash__(self):
        return _ProjLib.Handle_ProjLib_HSequenceOfHSequenceOfPnt___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _ProjLib.Handle_ProjLib_HSequenceOfHSequenceOfPnt___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _ProjLib.new_Handle_ProjLib_HSequenceOfHSequenceOfPnt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_ProjLib.Handle_ProjLib_HSequenceOfHSequenceOfPnt_DownCast)
    __swig_destroy__ = _ProjLib.delete_Handle_ProjLib_HSequenceOfHSequenceOfPnt

    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.ProjLib.ProjLib_SequenceOfHSequenceOfPnt

        """
        res = _ProjLib.Handle_ProjLib_HSequenceOfHSequenceOfPnt_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(Handle_ProjLib_HSequenceOfHSequenceOfPnt self, Handle_TColgp_HSequenceOfPnt theItem)
        Append(Handle_ProjLib_HSequenceOfHSequenceOfPnt self, NCollection_Sequence_Handle_TColgp_HSequenceOfPnt theSequence)

        :type theSequence: OCC.wrapper.ProjLib.ProjLib_SequenceOfHSequenceOfPnt

        """
        return _ProjLib.Handle_ProjLib_HSequenceOfHSequenceOfPnt_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(Handle_ProjLib_HSequenceOfHSequenceOfPnt self) -> NCollection_Sequence_Handle_TColgp_HSequenceOfPnt

        :rtype: OCC.wrapper.ProjLib.ProjLib_SequenceOfHSequenceOfPnt

        """
        return _ProjLib.Handle_ProjLib_HSequenceOfHSequenceOfPnt_ChangeSequence(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_ProjLib_HSequenceOfHSequenceOfPnt self) -> char const *

        :rtype: const char *

        """
        return _ProjLib.Handle_ProjLib_HSequenceOfHSequenceOfPnt_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _ProjLib.Handle_ProjLib_HSequenceOfHSequenceOfPnt_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _ProjLib.Handle_ProjLib_HSequenceOfHSequenceOfPnt_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_ProjLib_HSequenceOfHSequenceOfPnt self)

        Memory deallocator for transient classes


        """
        return _ProjLib.Handle_ProjLib_HSequenceOfHSequenceOfPnt_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_ProjLib_HSequenceOfHSequenceOfPnt self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_ProjLib_HSequenceOfHSequenceOfPnt self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ProjLib.Handle_ProjLib_HSequenceOfHSequenceOfPnt_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_ProjLib_HSequenceOfHSequenceOfPnt self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_ProjLib_HSequenceOfHSequenceOfPnt self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ProjLib.Handle_ProjLib_HSequenceOfHSequenceOfPnt_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_ProjLib_HSequenceOfHSequenceOfPnt self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _ProjLib.Handle_ProjLib_HSequenceOfHSequenceOfPnt_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_ProjLib_HSequenceOfHSequenceOfPnt self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ProjLib.Handle_ProjLib_HSequenceOfHSequenceOfPnt_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_ProjLib_HSequenceOfHSequenceOfPnt self)

        Increments the reference counter of this object


        """
        return _ProjLib.Handle_ProjLib_HSequenceOfHSequenceOfPnt_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_ProjLib_HSequenceOfHSequenceOfPnt self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ProjLib.Handle_ProjLib_HSequenceOfHSequenceOfPnt_DecrementRefCounter(self, *args)

Handle_ProjLib_HSequenceOfHSequenceOfPnt_swigregister = _ProjLib.Handle_ProjLib_HSequenceOfHSequenceOfPnt_swigregister
Handle_ProjLib_HSequenceOfHSequenceOfPnt_swigregister(Handle_ProjLib_HSequenceOfHSequenceOfPnt)

def Handle_ProjLib_HSequenceOfHSequenceOfPnt_DownCast(thing):
    return _ProjLib.Handle_ProjLib_HSequenceOfHSequenceOfPnt_DownCast(thing)
Handle_ProjLib_HSequenceOfHSequenceOfPnt_DownCast = _ProjLib.Handle_ProjLib_HSequenceOfHSequenceOfPnt_DownCast

class ProjLib_ProjectedCurve(Adaptor2d.Adaptor2d_Curve2d):
    """
    Compute the 2d-curve.  Try to solve the particular
    case if possible.  Otherwize, an approximation  is
    done. For approximation some parameters are used, including 
    required tolerance of approximation.
    Tolerance is maximal possible value of 3d deviation of 3d projection of projected curve from
    "exact" 3d projection. Since algorithm searches 2d curve on surface, required 2d tolerance is computed
    from 3d tolerance with help of U,V resolutions of surface.
    3d and 2d tolerances have sence only for curves on surface, it defines precision of projecting and approximation
    and have nothing to do with distance between the projected curve and the surface.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ProjLib_ProjectedCurve self) -> ProjLib_ProjectedCurve
        __init__(ProjLib_ProjectedCurve self, Handle_Adaptor3d_HSurface S) -> ProjLib_ProjectedCurve
        __init__(ProjLib_ProjectedCurve self, Handle_Adaptor3d_HSurface S, Handle_Adaptor3d_HCurve C) -> ProjLib_ProjectedCurve
        __init__(ProjLib_ProjectedCurve self, Handle_Adaptor3d_HSurface S, Handle_Adaptor3d_HCurve C, Standard_Real const Tol) -> ProjLib_ProjectedCurve

        Constructor, which performs projecting.
        If projecting uses approximation, 3d tolerance is Tol, default parameters are used, 

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :type C: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve
        :type Tol: float

        """
        this = _ProjLib.new_ProjLib_ProjectedCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Load(self, *args):
        """
        Load(ProjLib_ProjectedCurve self, Handle_Adaptor3d_HSurface S)

        Changes the Surface.

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _ProjLib.ProjLib_ProjectedCurve_Load(self, *args)


    def Perform(self, *args):
        """
        Perform(ProjLib_ProjectedCurve self, Handle_Adaptor3d_HCurve C)

        Performs projecting for given curve.
        If projecting uses approximation, 
        approximation parameters can be set before by corresponding methods 
        SetDegree(...), SetMaxSegmets(...), SetBndPnt(...), SetMaxDist(...)

        :type C: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve

        """
        return _ProjLib.ProjLib_ProjectedCurve_Perform(self, *args)


    def SetDegree(self, *args):
        """
        SetDegree(ProjLib_ProjectedCurve self, Standard_Integer const theDegMin, Standard_Integer const theDegMax)

        Set min and max possible degree of result BSpline curve2d, which is got by approximation.
        If theDegMin/Max < 0, algorithm uses values that are chosen depending of types curve 3d
        and surface.

        :type theDegMin: int
        :type theDegMax: int

        """
        return _ProjLib.ProjLib_ProjectedCurve_SetDegree(self, *args)


    def SetMaxSegments(self, *args):
        """
        SetMaxSegments(ProjLib_ProjectedCurve self, Standard_Integer const theMaxSegments)

        Set the parameter, which defines maximal value of parametric intervals the projected
        curve can be cut for approximation. If theMaxSegments < 0, algorithm uses default 
        value = 1000.

        :type theMaxSegments: int

        """
        return _ProjLib.ProjLib_ProjectedCurve_SetMaxSegments(self, *args)


    def SetBndPnt(self, *args):
        """
        SetBndPnt(ProjLib_ProjectedCurve self, AppParCurves_Constraint const theBndPnt)

        Set the parameter, which defines type of boundary condition between segments during approximation.
        It can be AppParCurves_PassPoint or AppParCurves_TangencyPoint.
        Default value is AppParCurves_TangencyPoint;

        :type theBndPnt: OCC.wrapper.AppParCurves.AppParCurves_Constraint

        """
        return _ProjLib.ProjLib_ProjectedCurve_SetBndPnt(self, *args)


    def SetMaxDist(self, *args):
        """
        SetMaxDist(ProjLib_ProjectedCurve self, Standard_Real const theMaxDist)

        Set the parameter, which degines maximal possible distance between projected curve and surface.
        It uses only for projecting on not analytical surfaces.
        If theMaxDist < 0, algoritm uses default value 100.*Tolerance. 
        If real distance between curve and surface more then theMaxDist, algorithm stops working.

        :type theMaxDist: float

        """
        return _ProjLib.ProjLib_ProjectedCurve_SetMaxDist(self, *args)


    def GetSurface(self, *args):
        """
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        res = _ProjLib.ProjLib_ProjectedCurve_GetSurface(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetCurve(self, *args):
        """
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve

        """
        res = _ProjLib.ProjLib_ProjectedCurve_GetCurve(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetTolerance(self, *args):
        """
        GetTolerance(ProjLib_ProjectedCurve self) -> Standard_Real

        returns the tolerance reached if an approximation
        is Done.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _ProjLib.ProjLib_ProjectedCurve_GetTolerance(self, *args)


    def FirstParameter(self, *args):
        """
        FirstParameter(ProjLib_ProjectedCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _ProjLib.ProjLib_ProjectedCurve_FirstParameter(self, *args)


    def LastParameter(self, *args):
        """
        LastParameter(ProjLib_ProjectedCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _ProjLib.ProjLib_ProjectedCurve_LastParameter(self, *args)


    def Continuity(self, *args):
        """
        Continuity(ProjLib_ProjectedCurve self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _ProjLib.ProjLib_ProjectedCurve_Continuity(self, *args)


    def NbIntervals(self, *args):
        """
        NbIntervals(ProjLib_ProjectedCurve self, GeomAbs_Shape const S) -> Standard_Integer

        If necessary,  breaks the  curve in  intervals  of
        continuity  <S>.    And  returns   the number   of
        intervals.

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ProjLib.ProjLib_ProjectedCurve_NbIntervals(self, *args)


    def Intervals(self, *args):
        """
        Intervals(ProjLib_ProjectedCurve self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        Stores in <T> the  parameters bounding the intervals
        of continuity <S>.

        The array must provide  enough room to  accomodate
        for the parameters. i.e. T.Length() > NbIntervals()

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _ProjLib.ProjLib_ProjectedCurve_Intervals(self, *args)


    def Trim(self, *args):
        """
        Trim(ProjLib_ProjectedCurve self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor2d_HCurve2d

        Returns    a  curve equivalent   of  <me>  between
        parameters <First>  and <Last>. <Tol>  is used  to
        test for 3d points confusion.
        If <First> >= <Last>

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor2d.Handle_Adaptor2d_HCurve2d

        """
        return _ProjLib.ProjLib_ProjectedCurve_Trim(self, *args)


    def IsClosed(self, *args):
        """
        IsClosed(ProjLib_ProjectedCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ProjLib.ProjLib_ProjectedCurve_IsClosed(self, *args)


    def IsPeriodic(self, *args):
        """
        IsPeriodic(ProjLib_ProjectedCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ProjLib.ProjLib_ProjectedCurve_IsPeriodic(self, *args)


    def Period(self, *args):
        """
        Period(ProjLib_ProjectedCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _ProjLib.ProjLib_ProjectedCurve_Period(self, *args)


    def Value(self, *args):
        """
        Value(ProjLib_ProjectedCurve self, Standard_Real const U) -> gp_Pnt2d

        Computes the point of parameter U on the curve.

        :type U: float
        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _ProjLib.ProjLib_ProjectedCurve_Value(self, *args)


    def D0(self, *args):
        """
        D0(ProjLib_ProjectedCurve self, Standard_Real const U, gp_Pnt2d P)

        Computes the point of parameter U on the curve.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt2d

        """
        return _ProjLib.ProjLib_ProjectedCurve_D0(self, *args)


    def D1(self, *args):
        """
        D1(ProjLib_ProjectedCurve self, Standard_Real const U, gp_Pnt2d P, gp_Vec2d V)

        Computes the point of parameter U on the curve with its
        first derivative.
        Raised if the continuity of the current interval
        is not C1.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt2d
        :type V: OCC.wrapper.gp.gp_Vec2d

        """
        return _ProjLib.ProjLib_ProjectedCurve_D1(self, *args)


    def D2(self, *args):
        """
        D2(ProjLib_ProjectedCurve self, Standard_Real const U, gp_Pnt2d P, gp_Vec2d V1, gp_Vec2d V2)

        Returns the point P of parameter U, the first and second
        derivatives V1 and V2.
        Raised if the continuity of the current interval
        is not C2.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt2d
        :type V1: OCC.wrapper.gp.gp_Vec2d
        :type V2: OCC.wrapper.gp.gp_Vec2d

        """
        return _ProjLib.ProjLib_ProjectedCurve_D2(self, *args)


    def D3(self, *args):
        """
        D3(ProjLib_ProjectedCurve self, Standard_Real const U, gp_Pnt2d P, gp_Vec2d V1, gp_Vec2d V2, gp_Vec2d V3)

        Returns the point P of parameter U, the first, the second
        and the third derivative.
        Raised if the continuity of the current interval
        is not C3.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt2d
        :type V1: OCC.wrapper.gp.gp_Vec2d
        :type V2: OCC.wrapper.gp.gp_Vec2d
        :type V3: OCC.wrapper.gp.gp_Vec2d

        """
        return _ProjLib.ProjLib_ProjectedCurve_D3(self, *args)


    def DN(self, *args):
        """
        DN(ProjLib_ProjectedCurve self, Standard_Real const U, Standard_Integer const N) -> gp_Vec2d

        The returned vector gives the value of the derivative for the
        order of derivation N.
        Raised if the continuity of the current interval
        is not CN.
        Raised if N < 1.

        :type U: float
        :type N: int
        :rtype: OCC.wrapper.gp.gp_Vec2d

        """
        return _ProjLib.ProjLib_ProjectedCurve_DN(self, *args)


    def Resolution(self, *args):
        """
        Resolution(ProjLib_ProjectedCurve self, Standard_Real const R3d) -> Standard_Real

        Returns the parametric  resolution corresponding
        to the real space resolution <R3d>.

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _ProjLib.ProjLib_ProjectedCurve_Resolution(self, *args)


    def GetType(self, *args):
        """
        GetType(ProjLib_ProjectedCurve self) -> GeomAbs_CurveType

        Returns  the  type of the   curve  in the  current
        interval :   Line,   Circle,   Ellipse, Hyperbola,
        Parabola, BezierCurve, BSplineCurve, OtherCurve.

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_CurveType

        """
        return _ProjLib.ProjLib_ProjectedCurve_GetType(self, *args)


    def Line(self, *args):
        """
        Line(ProjLib_ProjectedCurve self) -> gp_Lin2d

        :rtype: OCC.wrapper.gp.gp_Lin2d

        """
        return _ProjLib.ProjLib_ProjectedCurve_Line(self, *args)


    def Circle(self, *args):
        """
        Circle(ProjLib_ProjectedCurve self) -> gp_Circ2d

        :rtype: OCC.wrapper.gp.gp_Circ2d

        """
        return _ProjLib.ProjLib_ProjectedCurve_Circle(self, *args)


    def Ellipse(self, *args):
        """
        Ellipse(ProjLib_ProjectedCurve self) -> gp_Elips2d

        :rtype: OCC.wrapper.gp.gp_Elips2d

        """
        return _ProjLib.ProjLib_ProjectedCurve_Ellipse(self, *args)


    def Hyperbola(self, *args):
        """
        Hyperbola(ProjLib_ProjectedCurve self) -> gp_Hypr2d

        :rtype: OCC.wrapper.gp.gp_Hypr2d

        """
        return _ProjLib.ProjLib_ProjectedCurve_Hyperbola(self, *args)


    def Parabola(self, *args):
        """
        Parabola(ProjLib_ProjectedCurve self) -> gp_Parab2d

        :rtype: OCC.wrapper.gp.gp_Parab2d

        """
        return _ProjLib.ProjLib_ProjectedCurve_Parabola(self, *args)


    def Degree(self, *args):
        """
        Degree(ProjLib_ProjectedCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ProjLib.ProjLib_ProjectedCurve_Degree(self, *args)


    def IsRational(self, *args):
        """
        IsRational(ProjLib_ProjectedCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ProjLib.ProjLib_ProjectedCurve_IsRational(self, *args)


    def NbPoles(self, *args):
        """
        NbPoles(ProjLib_ProjectedCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ProjLib.ProjLib_ProjectedCurve_NbPoles(self, *args)


    def NbKnots(self, *args):
        """
        NbKnots(ProjLib_ProjectedCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ProjLib.ProjLib_ProjectedCurve_NbKnots(self, *args)


    def Bezier(self, *args):
        """
        Bezier(ProjLib_ProjectedCurve self) -> Handle_Geom2d_BezierCurve

        Warning ! This will  NOT make a copy  of the -- Bezier Curve -
        If you want to modify -- the Curve  please make a copy
        yourself --  Also it will  NOT trim the surface  to --
        myFirst/Last.

        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_BezierCurve

        """
        return _ProjLib.ProjLib_ProjectedCurve_Bezier(self, *args)


    def BSpline(self, *args):
        """
        BSpline(ProjLib_ProjectedCurve self) -> Handle_Geom2d_BSplineCurve

        Warning ! This will NOT make a copy of the BSpline Curve - If
        you want to  modify the   Curve  please make a   copy
        yourself Also it   will  NOT  trim   the surface   to
        myFirst/Last.

        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_BSplineCurve

        """
        return _ProjLib.ProjLib_ProjectedCurve_BSpline(self, *args)

    __swig_destroy__ = _ProjLib.delete_ProjLib_ProjectedCurve
ProjLib_ProjectedCurve_swigregister = _ProjLib.ProjLib_ProjectedCurve_swigregister
ProjLib_ProjectedCurve_swigregister(ProjLib_ProjectedCurve)

class ProjLib_PrjResolve(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ProjLib_PrjResolve self, Adaptor3d_Curve C, Adaptor3d_Surface S, Standard_Integer const Fix) -> ProjLib_PrjResolve

        :type C: OCC.wrapper.Adaptor3d.Adaptor3d_Curve
        :type S: OCC.wrapper.Adaptor3d.Adaptor3d_Surface
        :type Fix: int

        """
        this = _ProjLib.new_ProjLib_PrjResolve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Perform(self, *args):
        """
        Perform(ProjLib_PrjResolve self, Standard_Real const t, Standard_Real const U, Standard_Real const V, gp_Pnt2d Tol, gp_Pnt2d Inf, gp_Pnt2d Sup, Standard_Real const FTol=-1, Standard_Boolean const StrictInside)

        Calculates the ort from  C(t)  to  S  with a close point.
        The close point is defined by the parameter values
        U0 and V0.
        The function F(u,v)=distance(S(u,v),C(t)) has an
        extremum when gradient(F)=0. The algorithm searchs
        a zero near the close point.

        :type t: float
        :type U: float
        :type V: float
        :type Tol: OCC.wrapper.gp.gp_Pnt2d
        :type Inf: OCC.wrapper.gp.gp_Pnt2d
        :type Sup: OCC.wrapper.gp.gp_Pnt2d
        :type FTol: float
        :type StrictInside: bool

        """
        return _ProjLib.ProjLib_PrjResolve_Perform(self, *args)


    def IsDone(self, *args):
        """
        IsDone(ProjLib_PrjResolve self) -> Standard_Boolean

        Returns True if the distance is found.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ProjLib.ProjLib_PrjResolve_IsDone(self, *args)


    def Solution(self, *args):
        """
        Solution(ProjLib_PrjResolve self) -> gp_Pnt2d

        Returns the point of the extremum distance.

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _ProjLib.ProjLib_PrjResolve_Solution(self, *args)

    __swig_destroy__ = _ProjLib.delete_ProjLib_PrjResolve
ProjLib_PrjResolve_swigregister = _ProjLib.ProjLib_PrjResolve_swigregister
ProjLib_PrjResolve_swigregister(ProjLib_PrjResolve)

class ProjLib_HProjectedCurve(Adaptor2d.Adaptor2d_HCurve2d):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_ProjLib_HProjectedCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_ProjLib_HProjectedCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(ProjLib_HProjectedCurve self) -> ProjLib_HProjectedCurve
        __init__(ProjLib_HProjectedCurve self, ProjLib_ProjectedCurve C) -> ProjLib_HProjectedCurve

        Creates a GenHCurve2d from a Curve

        :type C: OCC.wrapper.ProjLib.ProjLib_ProjectedCurve

        """
        this = _ProjLib.new_ProjLib_HProjectedCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Set(self, *args):
        """
        Set(ProjLib_HProjectedCurve self, ProjLib_ProjectedCurve C)

        Sets the field of the GenHCurve2d.

        :type C: OCC.wrapper.ProjLib.ProjLib_ProjectedCurve

        """
        return _ProjLib.ProjLib_HProjectedCurve_Set(self, *args)


    def Curve2d(self, *args):
        """
        Returns the curve used to create the GenHCurve2d.
        This is redefined from HCurve2d, cannot be inline.

        :rtype: OCC.wrapper.Adaptor2d.Adaptor2d_Curve2d

        """
        res = _ProjLib.ProjLib_HProjectedCurve_Curve2d(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeCurve2d(self, *args):
        """
        ChangeCurve2d(ProjLib_HProjectedCurve self) -> ProjLib_ProjectedCurve

        Returns the curve used to create the GenHCurve.

        :rtype: OCC.wrapper.ProjLib.ProjLib_ProjectedCurve

        """
        return _ProjLib.ProjLib_HProjectedCurve_ChangeCurve2d(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _ProjLib.ProjLib_HProjectedCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _ProjLib.ProjLib_HProjectedCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _ProjLib.ProjLib_HProjectedCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _ProjLib.delete_ProjLib_HProjectedCurve
ProjLib_HProjectedCurve_swigregister = _ProjLib.ProjLib_HProjectedCurve_swigregister
ProjLib_HProjectedCurve_swigregister(ProjLib_HProjectedCurve)

def ProjLib_HProjectedCurve_get_type_name(*args):
    """
    ProjLib_HProjectedCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _ProjLib.ProjLib_HProjectedCurve_get_type_name(*args)

def ProjLib_HProjectedCurve_get_type_descriptor(*args):
    """
    ProjLib_HProjectedCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _ProjLib.ProjLib_HProjectedCurve_get_type_descriptor(*args)

class ProjLib_(object):
    """
    The  projLib package  first provides projection of
    curves on a   plane along a  given Direction.  The
    result will be a 3D curve.
    The ProjLib package  provides projection of curves
    on surfaces to compute the curve in the parametric
    space.

    It is assumed that the curve is on the surface.

    It provides :

    * Package methods to handle the easiest cases :

    - Line, Circle, Ellipse, Parabola, Hyperbola on plane.

    - Line, Circle on cylinder.

    - Line, Circle on cone.

    * Classes to handle the general cases :

    - Plane.

    - Cylinder.

    - Cone.

    - Sphere.

    - Torus.

    * A generic  class to handle  a Curve from Adaptor3d
    on a Surface from Adaptor3d.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Project(*args):
        """
        Project(gp_Pln Pl, gp_Pnt P) -> gp_Pnt2d
        Project(gp_Pln Pl, gp_Lin L) -> gp_Lin2d
        Project(gp_Pln Pl, gp_Circ C) -> gp_Circ2d
        Project(gp_Pln Pl, gp_Elips E) -> gp_Elips2d
        Project(gp_Pln Pl, gp_Parab P) -> gp_Parab2d
        Project(gp_Pln Pl, gp_Hypr H) -> gp_Hypr2d
        Project(gp_Cylinder Cy, gp_Pnt P) -> gp_Pnt2d
        Project(gp_Cylinder Cy, gp_Lin L) -> gp_Lin2d
        Project(gp_Cylinder Cy, gp_Circ Ci) -> gp_Lin2d
        Project(gp_Cone Co, gp_Pnt P) -> gp_Pnt2d
        Project(gp_Cone Co, gp_Lin L) -> gp_Lin2d
        Project(gp_Cone Co, gp_Circ Ci) -> gp_Lin2d
        Project(gp_Sphere Sp, gp_Pnt P) -> gp_Pnt2d
        Project(gp_Sphere Sp, gp_Circ Ci) -> gp_Lin2d
        Project(gp_Torus To, gp_Pnt P) -> gp_Pnt2d
        Project(gp_Torus To, gp_Circ Ci) -> gp_Lin2d

        :type To: OCC.wrapper.gp.gp_Torus
        :type Ci: OCC.wrapper.gp.gp_Circ
        :rtype: OCC.wrapper.gp.gp_Lin2d

        """
        return _ProjLib.ProjLib__Project(*args)

    Project = staticmethod(Project)

    def MakePCurveOfType(*args):
        """
        MakePCurveOfType(ProjLib_ProjectedCurve PC, Handle_Geom2d_Curve aC)

        Make empty  P-Curve <aC> of relevant to <PC> type

        :type PC: OCC.wrapper.ProjLib.ProjLib_ProjectedCurve
        :type aC: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _ProjLib.ProjLib__MakePCurveOfType(*args)

    MakePCurveOfType = staticmethod(MakePCurveOfType)

    def IsAnaSurf(*args):
        """
        IsAnaSurf(Handle_Adaptor3d_HSurface theAS) -> Standard_Boolean

        Returns "true" if surface is analytical, that is it can be
        Plane, Cylinder, Cone, Sphere, Torus.
        For all other types of surface method returns "false".

        :type theAS: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ProjLib.ProjLib__IsAnaSurf(*args)

    IsAnaSurf = staticmethod(IsAnaSurf)

    def __init__(self):
        """
        The  projLib package  first provides projection of
        curves on a   plane along a  given Direction.  The
        result will be a 3D curve.
        The ProjLib package  provides projection of curves
        on surfaces to compute the curve in the parametric
        space.

        It is assumed that the curve is on the surface.

        It provides :

        * Package methods to handle the easiest cases :

        - Line, Circle, Ellipse, Parabola, Hyperbola on plane.

        - Line, Circle on cylinder.

        - Line, Circle on cone.

        * Classes to handle the general cases :

        - Plane.

        - Cylinder.

        - Cone.

        - Sphere.

        - Torus.

        * A generic  class to handle  a Curve from Adaptor3d
        on a Surface from Adaptor3d.
        """
        this = _ProjLib.new_ProjLib_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ProjLib.delete_ProjLib_
ProjLib__swigregister = _ProjLib.ProjLib__swigregister
ProjLib__swigregister(ProjLib_)

def ProjLib__Project(*args):
    """
    Project(gp_Pln Pl, gp_Pnt P) -> gp_Pnt2d
    Project(gp_Pln Pl, gp_Lin L) -> gp_Lin2d
    Project(gp_Pln Pl, gp_Circ C) -> gp_Circ2d
    Project(gp_Pln Pl, gp_Elips E) -> gp_Elips2d
    Project(gp_Pln Pl, gp_Parab P) -> gp_Parab2d
    Project(gp_Pln Pl, gp_Hypr H) -> gp_Hypr2d
    Project(gp_Cylinder Cy, gp_Pnt P) -> gp_Pnt2d
    Project(gp_Cylinder Cy, gp_Lin L) -> gp_Lin2d
    Project(gp_Cylinder Cy, gp_Circ Ci) -> gp_Lin2d
    Project(gp_Cone Co, gp_Pnt P) -> gp_Pnt2d
    Project(gp_Cone Co, gp_Lin L) -> gp_Lin2d
    Project(gp_Cone Co, gp_Circ Ci) -> gp_Lin2d
    Project(gp_Sphere Sp, gp_Pnt P) -> gp_Pnt2d
    Project(gp_Sphere Sp, gp_Circ Ci) -> gp_Lin2d
    Project(gp_Torus To, gp_Pnt P) -> gp_Pnt2d
    ProjLib__Project(gp_Torus To, gp_Circ Ci) -> gp_Lin2d

    :type To: OCC.wrapper.gp.gp_Torus
    :type Ci: OCC.wrapper.gp.gp_Circ
    :rtype: OCC.wrapper.gp.gp_Lin2d

    """
    return _ProjLib.ProjLib__Project(*args)

def ProjLib__MakePCurveOfType(*args):
    """
    ProjLib__MakePCurveOfType(ProjLib_ProjectedCurve PC, Handle_Geom2d_Curve aC)

    Make empty  P-Curve <aC> of relevant to <PC> type

    :type PC: OCC.wrapper.ProjLib.ProjLib_ProjectedCurve
    :type aC: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

    """
    return _ProjLib.ProjLib__MakePCurveOfType(*args)

def ProjLib__IsAnaSurf(*args):
    """
    ProjLib__IsAnaSurf(Handle_Adaptor3d_HSurface theAS) -> Standard_Boolean

    Returns "true" if surface is analytical, that is it can be
    Plane, Cylinder, Cone, Sphere, Torus.
    For all other types of surface method returns "false".

    :type theAS: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _ProjLib.ProjLib__IsAnaSurf(*args)

class ProjLib_Cone(ProjLib_Projector):
    """Projects elementary curves on a cone."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ProjLib_Cone self) -> ProjLib_Cone
        __init__(ProjLib_Cone self, gp_Cone Co) -> ProjLib_Cone
        __init__(ProjLib_Cone self, gp_Cone Co, gp_Lin L) -> ProjLib_Cone
        __init__(ProjLib_Cone self, gp_Cone Co, gp_Circ C) -> ProjLib_Cone

        Projection of the circle <C> on the cone <Co>.

        :type Co: OCC.wrapper.gp.gp_Cone
        :type C: OCC.wrapper.gp.gp_Circ

        """
        this = _ProjLib.new_ProjLib_Cone(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(ProjLib_Cone self, gp_Cone Co)

        :type Co: OCC.wrapper.gp.gp_Cone

        """
        return _ProjLib.ProjLib_Cone_Init(self, *args)


    def Project(self, *args):
        """
        Project(ProjLib_Cone self, gp_Lin L)
        Project(ProjLib_Cone self, gp_Circ C)
        Project(ProjLib_Cone self, gp_Elips E)
        Project(ProjLib_Cone self, gp_Parab P)
        Project(ProjLib_Cone self, gp_Hypr H)

        :type H: OCC.wrapper.gp.gp_Hypr

        """
        return _ProjLib.ProjLib_Cone_Project(self, *args)

    __swig_destroy__ = _ProjLib.delete_ProjLib_Cone
ProjLib_Cone_swigregister = _ProjLib.ProjLib_Cone_swigregister
ProjLib_Cone_swigregister(ProjLib_Cone)

class ProjLib_ProjectOnPlane(Adaptor3d.Adaptor3d_Curve):
    """
    Class  used  to project  a 3d curve   on a plane.  The
    result will be a 3d curve.

    You  can ask   the projected curve  to  have  the same
    parametrization as the original curve.

    The projection can be done  along every direction  not
    parallel to the plane.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ProjLib_ProjectOnPlane self) -> ProjLib_ProjectOnPlane
        __init__(ProjLib_ProjectOnPlane self, gp_Ax3 Pl) -> ProjLib_ProjectOnPlane
        __init__(ProjLib_ProjectOnPlane self, gp_Ax3 Pl, gp_Dir D) -> ProjLib_ProjectOnPlane

        The projection will be  along the direction <D> on
        the plane defined by the Ax3 <Pl>.
        raises  if the direction  <D>  is parallel  to the
        plane <Pl>.

        :type Pl: OCC.wrapper.gp.gp_Ax3
        :type D: OCC.wrapper.gp.gp_Dir

        """
        this = _ProjLib.new_ProjLib_ProjectOnPlane(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Load(self, *args):
        """
        Load(ProjLib_ProjectOnPlane self, Handle_Adaptor3d_HCurve C, Standard_Real const Tolerance, Standard_Boolean const KeepParametrization)

        Sets the  Curve  and perform  the projection.   if
        <KeepParametrization> is true, the parametrization
        of the Projected Curve <PC>  will  be the same  as
        the parametrization of the initial  curve <C>.  It
        meens: proj(C(u)) = PC(u) for  each u.  Otherwize,
        the parametrization may change.

        :type C: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve
        :type Tolerance: float
        :type KeepParametrization: bool

        """
        return _ProjLib.ProjLib_ProjectOnPlane_Load(self, *args)


    def GetPlane(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_Ax3

        """
        res = _ProjLib.ProjLib_ProjectOnPlane_GetPlane(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetDirection(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_Dir

        """
        res = _ProjLib.ProjLib_ProjectOnPlane_GetDirection(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetCurve(self, *args):
        """
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve

        """
        res = _ProjLib.ProjLib_ProjectOnPlane_GetCurve(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetResult(self, *args):
        """
        :rtype: OCC.wrapper.GeomAdaptor.Handle_GeomAdaptor_HCurve

        """
        res = _ProjLib.ProjLib_ProjectOnPlane_GetResult(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FirstParameter(self, *args):
        """
        FirstParameter(ProjLib_ProjectOnPlane self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _ProjLib.ProjLib_ProjectOnPlane_FirstParameter(self, *args)


    def LastParameter(self, *args):
        """
        LastParameter(ProjLib_ProjectOnPlane self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _ProjLib.ProjLib_ProjectOnPlane_LastParameter(self, *args)


    def Continuity(self, *args):
        """
        Continuity(ProjLib_ProjectOnPlane self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _ProjLib.ProjLib_ProjectOnPlane_Continuity(self, *args)


    def NbIntervals(self, *args):
        """
        NbIntervals(ProjLib_ProjectOnPlane self, GeomAbs_Shape const S) -> Standard_Integer

        If necessary,  breaks the  curve in  intervals  of
        continuity  <S>.    And  returns   the number   of
        intervals.

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ProjLib.ProjLib_ProjectOnPlane_NbIntervals(self, *args)


    def Intervals(self, *args):
        """
        Intervals(ProjLib_ProjectOnPlane self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        Stores in <T> the  parameters bounding the intervals
        of continuity <S>.

        The array must provide  enough room to  accomodate
        for the parameters. i.e. T.Length() > NbIntervals()

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _ProjLib.ProjLib_ProjectOnPlane_Intervals(self, *args)


    def Trim(self, *args):
        """
        Trim(ProjLib_ProjectOnPlane self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HCurve

        Returns    a  curve equivalent   of  <me>  between
        parameters <First>  and <Last>. <Tol>  is used  to
        test for 3d points confusion.
        If <First> >= <Last>

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve

        """
        return _ProjLib.ProjLib_ProjectOnPlane_Trim(self, *args)


    def IsClosed(self, *args):
        """
        IsClosed(ProjLib_ProjectOnPlane self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ProjLib.ProjLib_ProjectOnPlane_IsClosed(self, *args)


    def IsPeriodic(self, *args):
        """
        IsPeriodic(ProjLib_ProjectOnPlane self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ProjLib.ProjLib_ProjectOnPlane_IsPeriodic(self, *args)


    def Period(self, *args):
        """
        Period(ProjLib_ProjectOnPlane self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _ProjLib.ProjLib_ProjectOnPlane_Period(self, *args)


    def Value(self, *args):
        """
        Value(ProjLib_ProjectOnPlane self, Standard_Real const U) -> gp_Pnt

        Computes the point of parameter U on the curve.

        :type U: float
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _ProjLib.ProjLib_ProjectOnPlane_Value(self, *args)


    def D0(self, *args):
        """
        D0(ProjLib_ProjectOnPlane self, Standard_Real const U, gp_Pnt P)

        Computes the point of parameter U on the curve.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt

        """
        return _ProjLib.ProjLib_ProjectOnPlane_D0(self, *args)


    def D1(self, *args):
        """
        D1(ProjLib_ProjectOnPlane self, Standard_Real const U, gp_Pnt P, gp_Vec V)

        Computes the point of parameter U on the curve with its
        first derivative.
        Raised if the continuity of the current interval
        is not C1.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V: OCC.wrapper.gp.gp_Vec

        """
        return _ProjLib.ProjLib_ProjectOnPlane_D1(self, *args)


    def D2(self, *args):
        """
        D2(ProjLib_ProjectOnPlane self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2)

        Returns the point P of parameter U, the first and second
        derivatives V1 and V2.
        Raised if the continuity of the current interval
        is not C2.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec

        """
        return _ProjLib.ProjLib_ProjectOnPlane_D2(self, *args)


    def D3(self, *args):
        """
        D3(ProjLib_ProjectOnPlane self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2, gp_Vec V3)

        Returns the point P of parameter U, the first, the second
        and the third derivative.
        Raised if the continuity of the current interval
        is not C3.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec
        :type V3: OCC.wrapper.gp.gp_Vec

        """
        return _ProjLib.ProjLib_ProjectOnPlane_D3(self, *args)


    def DN(self, *args):
        """
        DN(ProjLib_ProjectOnPlane self, Standard_Real const U, Standard_Integer const N) -> gp_Vec

        The returned vector gives the value of the derivative for the
        order of derivation N.
        Raised if the continuity of the current interval
        is not CN.
        Raised if N < 1.

        :type U: float
        :type N: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _ProjLib.ProjLib_ProjectOnPlane_DN(self, *args)


    def Resolution(self, *args):
        """
        Resolution(ProjLib_ProjectOnPlane self, Standard_Real const R3d) -> Standard_Real

        Returns the parametric  resolution corresponding
        to the real space resolution <R3d>.

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _ProjLib.ProjLib_ProjectOnPlane_Resolution(self, *args)


    def GetType(self, *args):
        """
        GetType(ProjLib_ProjectOnPlane self) -> GeomAbs_CurveType

        Returns  the  type of the   curve  in the  current
        interval :   Line,   Circle,   Ellipse, Hyperbola,
        Parabola, BezierCurve, BSplineCurve, OtherCurve.

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_CurveType

        """
        return _ProjLib.ProjLib_ProjectOnPlane_GetType(self, *args)


    def Line(self, *args):
        """
        Line(ProjLib_ProjectOnPlane self) -> gp_Lin

        :rtype: OCC.wrapper.gp.gp_Lin

        """
        return _ProjLib.ProjLib_ProjectOnPlane_Line(self, *args)


    def Circle(self, *args):
        """
        Circle(ProjLib_ProjectOnPlane self) -> gp_Circ

        :rtype: OCC.wrapper.gp.gp_Circ

        """
        return _ProjLib.ProjLib_ProjectOnPlane_Circle(self, *args)


    def Ellipse(self, *args):
        """
        Ellipse(ProjLib_ProjectOnPlane self) -> gp_Elips

        :rtype: OCC.wrapper.gp.gp_Elips

        """
        return _ProjLib.ProjLib_ProjectOnPlane_Ellipse(self, *args)


    def Hyperbola(self, *args):
        """
        Hyperbola(ProjLib_ProjectOnPlane self) -> gp_Hypr

        :rtype: OCC.wrapper.gp.gp_Hypr

        """
        return _ProjLib.ProjLib_ProjectOnPlane_Hyperbola(self, *args)


    def Parabola(self, *args):
        """
        Parabola(ProjLib_ProjectOnPlane self) -> gp_Parab

        :rtype: OCC.wrapper.gp.gp_Parab

        """
        return _ProjLib.ProjLib_ProjectOnPlane_Parabola(self, *args)


    def Degree(self, *args):
        """
        Degree(ProjLib_ProjectOnPlane self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ProjLib.ProjLib_ProjectOnPlane_Degree(self, *args)


    def IsRational(self, *args):
        """
        IsRational(ProjLib_ProjectOnPlane self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ProjLib.ProjLib_ProjectOnPlane_IsRational(self, *args)


    def NbPoles(self, *args):
        """
        NbPoles(ProjLib_ProjectOnPlane self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ProjLib.ProjLib_ProjectOnPlane_NbPoles(self, *args)


    def NbKnots(self, *args):
        """
        NbKnots(ProjLib_ProjectOnPlane self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ProjLib.ProjLib_ProjectOnPlane_NbKnots(self, *args)


    def Bezier(self, *args):
        """
        Bezier(ProjLib_ProjectOnPlane self) -> Handle_Geom_BezierCurve

        Warning ! this will NOT make a copy of the
        Bezier Curve : If you want to modify
        the Curve please make a copy yourself
        Also it will NOT trim the surface to
        myFirst/Last.

        :rtype: OCC.wrapper.Geom.Handle_Geom_BezierCurve

        """
        return _ProjLib.ProjLib_ProjectOnPlane_Bezier(self, *args)


    def BSpline(self, *args):
        """
        BSpline(ProjLib_ProjectOnPlane self) -> Handle_Geom_BSplineCurve

        Warning ! this will NOT make a copy of the
        BSpline Curve : If you want to modify
        the Curve please make a copy yourself
        Also it will NOT trim the surface to
        myFirst/Last.

        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineCurve

        """
        return _ProjLib.ProjLib_ProjectOnPlane_BSpline(self, *args)

    __swig_destroy__ = _ProjLib.delete_ProjLib_ProjectOnPlane
ProjLib_ProjectOnPlane_swigregister = _ProjLib.ProjLib_ProjectOnPlane_swigregister
ProjLib_ProjectOnPlane_swigregister(ProjLib_ProjectOnPlane)

class ProjLib_ProjectOnSurface(object):
    """
    Project a curve on a  surface.  The result ( a  3D
    Curve)  will be an approximation
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ProjLib_ProjectOnSurface self) -> ProjLib_ProjectOnSurface
        __init__(ProjLib_ProjectOnSurface self, Handle_Adaptor3d_HSurface S) -> ProjLib_ProjectOnSurface

        Create a projector normaly to the surface <S>.

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        this = _ProjLib.new_ProjLib_ProjectOnSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Load(self, *args):
        """
        Load(ProjLib_ProjectOnSurface self, Handle_Adaptor3d_HCurve C, Standard_Real const Tolerance)

        Compute the projection of the curve <C> on the Surface.

        :type C: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve
        :type Tolerance: float

        """
        return _ProjLib.ProjLib_ProjectOnSurface_Load(self, *args)


    def IsDone(self, *args):
        """
        IsDone(ProjLib_ProjectOnSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ProjLib.ProjLib_ProjectOnSurface_IsDone(self, *args)


    def BSpline(self, *args):
        """
        BSpline(ProjLib_ProjectOnSurface self) -> Handle_Geom_BSplineCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineCurve

        """
        return _ProjLib.ProjLib_ProjectOnSurface_BSpline(self, *args)

    __swig_destroy__ = _ProjLib.delete_ProjLib_ProjectOnSurface
ProjLib_ProjectOnSurface_swigregister = _ProjLib.ProjLib_ProjectOnSurface_swigregister
ProjLib_ProjectOnSurface_swigregister(ProjLib_ProjectOnSurface)

class Handle_ProjLib_HProjectedCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_ProjLib_HProjectedCurve self)

        Nullify the handle


        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_ProjLib_HProjectedCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_ProjLib_HProjectedCurve self, ProjLib_HProjectedCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_ProjLib_HProjectedCurve self, Handle_ProjLib_HProjectedCurve theHandle) -> Handle_ProjLib_HProjectedCurve
        assign(Handle_ProjLib_HProjectedCurve self, ProjLib_HProjectedCurve thePtr) -> Handle_ProjLib_HProjectedCurve
        assign(Handle_ProjLib_HProjectedCurve self, Handle_ProjLib_HProjectedCurve theHandle) -> Handle_ProjLib_HProjectedCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_ProjLib_HProjectedCurve self) -> ProjLib_HProjectedCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_ProjLib_HProjectedCurve self) -> ProjLib_HProjectedCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_ProjLib_HProjectedCurve self) -> ProjLib_HProjectedCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve___ref__(self, *args)


    def __hash__(self):
        return _ProjLib.Handle_ProjLib_HProjectedCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _ProjLib.Handle_ProjLib_HProjectedCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _ProjLib.new_Handle_ProjLib_HProjectedCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_ProjLib.Handle_ProjLib_HProjectedCurve_DownCast)
    __swig_destroy__ = _ProjLib.delete_Handle_ProjLib_HProjectedCurve

    def Set(self, *args):
        """
        Set(Handle_ProjLib_HProjectedCurve self, ProjLib_ProjectedCurve C)

        Sets the field of the GenHCurve2d.

        :type C: OCC.wrapper.ProjLib.ProjLib_ProjectedCurve

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_Set(self, *args)


    def Curve2d(self, *args):
        """
        Returns the curve used to create the GenHCurve2d.
        This is redefined from HCurve2d, cannot be inline.

        :rtype: OCC.wrapper.Adaptor2d.Adaptor2d_Curve2d

        """
        res = _ProjLib.Handle_ProjLib_HProjectedCurve_Curve2d(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeCurve2d(self, *args):
        """
        ChangeCurve2d(Handle_ProjLib_HProjectedCurve self) -> ProjLib_ProjectedCurve

        Returns the curve used to create the GenHCurve.

        :rtype: OCC.wrapper.ProjLib.ProjLib_ProjectedCurve

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_ChangeCurve2d(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_ProjLib_HProjectedCurve self) -> char const *

        :rtype: const char *

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _ProjLib.Handle_ProjLib_HProjectedCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _ProjLib.Handle_ProjLib_HProjectedCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FirstParameter(self, *args):
        """
        FirstParameter(Handle_ProjLib_HProjectedCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_FirstParameter(self, *args)


    def LastParameter(self, *args):
        """
        LastParameter(Handle_ProjLib_HProjectedCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_LastParameter(self, *args)


    def Continuity(self, *args):
        """
        Continuity(Handle_ProjLib_HProjectedCurve self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_Continuity(self, *args)


    def NbIntervals(self, *args):
        """
        NbIntervals(Handle_ProjLib_HProjectedCurve self, GeomAbs_Shape const S) -> Standard_Integer

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_NbIntervals(self, *args)


    def Intervals(self, *args):
        """
        Intervals(Handle_ProjLib_HProjectedCurve self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_Intervals(self, *args)


    def Trim(self, *args):
        """
        Trim(Handle_ProjLib_HProjectedCurve self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor2d_HCurve2d

        If <First> >= <Last>

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor2d.Handle_Adaptor2d_HCurve2d

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_Trim(self, *args)


    def IsClosed(self, *args):
        """
        IsClosed(Handle_ProjLib_HProjectedCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_IsClosed(self, *args)


    def IsPeriodic(self, *args):
        """
        IsPeriodic(Handle_ProjLib_HProjectedCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_IsPeriodic(self, *args)


    def Period(self, *args):
        """
        Period(Handle_ProjLib_HProjectedCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_Period(self, *args)


    def Value(self, *args):
        """
        Value(Handle_ProjLib_HProjectedCurve self, Standard_Real const U) -> gp_Pnt2d

        :type U: float
        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_Value(self, *args)


    def D0(self, *args):
        """
        D0(Handle_ProjLib_HProjectedCurve self, Standard_Real const U, gp_Pnt2d P)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt2d

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_D0(self, *args)


    def D1(self, *args):
        """
        D1(Handle_ProjLib_HProjectedCurve self, Standard_Real const U, gp_Pnt2d P, gp_Vec2d V)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt2d
        :type V: OCC.wrapper.gp.gp_Vec2d

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_D1(self, *args)


    def D2(self, *args):
        """
        D2(Handle_ProjLib_HProjectedCurve self, Standard_Real const U, gp_Pnt2d P, gp_Vec2d V1, gp_Vec2d V2)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt2d
        :type V1: OCC.wrapper.gp.gp_Vec2d
        :type V2: OCC.wrapper.gp.gp_Vec2d

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_D2(self, *args)


    def D3(self, *args):
        """
        D3(Handle_ProjLib_HProjectedCurve self, Standard_Real const U, gp_Pnt2d P, gp_Vec2d V1, gp_Vec2d V2, gp_Vec2d V3)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt2d
        :type V1: OCC.wrapper.gp.gp_Vec2d
        :type V2: OCC.wrapper.gp.gp_Vec2d
        :type V3: OCC.wrapper.gp.gp_Vec2d

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_D3(self, *args)


    def DN(self, *args):
        """
        DN(Handle_ProjLib_HProjectedCurve self, Standard_Real const U, Standard_Integer const N) -> gp_Vec2d

        :type U: float
        :type N: int
        :rtype: OCC.wrapper.gp.gp_Vec2d

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_DN(self, *args)


    def Resolution(self, *args):
        """
        Resolution(Handle_ProjLib_HProjectedCurve self, Standard_Real const R3d) -> Standard_Real

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_Resolution(self, *args)


    def GetType(self, *args):
        """
        GetType(Handle_ProjLib_HProjectedCurve self) -> GeomAbs_CurveType

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_CurveType

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_GetType(self, *args)


    def Line(self, *args):
        """
        Line(Handle_ProjLib_HProjectedCurve self) -> gp_Lin2d

        :rtype: OCC.wrapper.gp.gp_Lin2d

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_Line(self, *args)


    def Circle(self, *args):
        """
        Circle(Handle_ProjLib_HProjectedCurve self) -> gp_Circ2d

        :rtype: OCC.wrapper.gp.gp_Circ2d

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_Circle(self, *args)


    def Ellipse(self, *args):
        """
        Ellipse(Handle_ProjLib_HProjectedCurve self) -> gp_Elips2d

        :rtype: OCC.wrapper.gp.gp_Elips2d

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_Ellipse(self, *args)


    def Hyperbola(self, *args):
        """
        Hyperbola(Handle_ProjLib_HProjectedCurve self) -> gp_Hypr2d

        :rtype: OCC.wrapper.gp.gp_Hypr2d

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_Hyperbola(self, *args)


    def Parabola(self, *args):
        """
        Parabola(Handle_ProjLib_HProjectedCurve self) -> gp_Parab2d

        :rtype: OCC.wrapper.gp.gp_Parab2d

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_Parabola(self, *args)


    def Degree(self, *args):
        """
        Degree(Handle_ProjLib_HProjectedCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_Degree(self, *args)


    def IsRational(self, *args):
        """
        IsRational(Handle_ProjLib_HProjectedCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_IsRational(self, *args)


    def NbPoles(self, *args):
        """
        NbPoles(Handle_ProjLib_HProjectedCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_NbPoles(self, *args)


    def NbKnots(self, *args):
        """
        NbKnots(Handle_ProjLib_HProjectedCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_NbKnots(self, *args)


    def Bezier(self, *args):
        """
        Bezier(Handle_ProjLib_HProjectedCurve self) -> Handle_Geom2d_BezierCurve

        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_BezierCurve

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_Bezier(self, *args)


    def BSpline(self, *args):
        """
        BSpline(Handle_ProjLib_HProjectedCurve self) -> Handle_Geom2d_BSplineCurve

        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_BSplineCurve

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_BSpline(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_ProjLib_HProjectedCurve self)

        Memory deallocator for transient classes


        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_ProjLib_HProjectedCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_ProjLib_HProjectedCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_ProjLib_HProjectedCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_ProjLib_HProjectedCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_ProjLib_HProjectedCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_ProjLib_HProjectedCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_ProjLib_HProjectedCurve self)

        Increments the reference counter of this object


        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_ProjLib_HProjectedCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ProjLib.Handle_ProjLib_HProjectedCurve_DecrementRefCounter(self, *args)

Handle_ProjLib_HProjectedCurve_swigregister = _ProjLib.Handle_ProjLib_HProjectedCurve_swigregister
Handle_ProjLib_HProjectedCurve_swigregister(Handle_ProjLib_HProjectedCurve)

def Handle_ProjLib_HProjectedCurve_DownCast(thing):
    return _ProjLib.Handle_ProjLib_HProjectedCurve_DownCast(thing)
Handle_ProjLib_HProjectedCurve_DownCast = _ProjLib.Handle_ProjLib_HProjectedCurve_DownCast

class Handle_ProjLib_HCompProjectedCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_ProjLib_HCompProjectedCurve self)

        Nullify the handle


        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_ProjLib_HCompProjectedCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_ProjLib_HCompProjectedCurve self, ProjLib_HCompProjectedCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_ProjLib_HCompProjectedCurve self, Handle_ProjLib_HCompProjectedCurve theHandle) -> Handle_ProjLib_HCompProjectedCurve
        assign(Handle_ProjLib_HCompProjectedCurve self, ProjLib_HCompProjectedCurve thePtr) -> Handle_ProjLib_HCompProjectedCurve
        assign(Handle_ProjLib_HCompProjectedCurve self, Handle_ProjLib_HCompProjectedCurve theHandle) -> Handle_ProjLib_HCompProjectedCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_ProjLib_HCompProjectedCurve self) -> ProjLib_HCompProjectedCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_ProjLib_HCompProjectedCurve self) -> ProjLib_HCompProjectedCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_ProjLib_HCompProjectedCurve self) -> ProjLib_HCompProjectedCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve___ref__(self, *args)


    def __hash__(self):
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _ProjLib.Handle_ProjLib_HCompProjectedCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _ProjLib.new_Handle_ProjLib_HCompProjectedCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_ProjLib.Handle_ProjLib_HCompProjectedCurve_DownCast)
    __swig_destroy__ = _ProjLib.delete_Handle_ProjLib_HCompProjectedCurve

    def Set(self, *args):
        """
        Set(Handle_ProjLib_HCompProjectedCurve self, ProjLib_CompProjectedCurve C)

        Sets the field of the GenHCurve2d.

        :type C: OCC.wrapper.ProjLib.ProjLib_CompProjectedCurve

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_Set(self, *args)


    def Curve2d(self, *args):
        """
        Returns the curve used to create the GenHCurve2d.
        This is redefined from HCurve2d, cannot be inline.

        :rtype: OCC.wrapper.Adaptor2d.Adaptor2d_Curve2d

        """
        res = _ProjLib.Handle_ProjLib_HCompProjectedCurve_Curve2d(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeCurve2d(self, *args):
        """
        ChangeCurve2d(Handle_ProjLib_HCompProjectedCurve self) -> ProjLib_CompProjectedCurve

        Returns the curve used to create the GenHCurve.

        :rtype: OCC.wrapper.ProjLib.ProjLib_CompProjectedCurve

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_ChangeCurve2d(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_ProjLib_HCompProjectedCurve self) -> char const *

        :rtype: const char *

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _ProjLib.Handle_ProjLib_HCompProjectedCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _ProjLib.Handle_ProjLib_HCompProjectedCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FirstParameter(self, *args):
        """
        FirstParameter(Handle_ProjLib_HCompProjectedCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_FirstParameter(self, *args)


    def LastParameter(self, *args):
        """
        LastParameter(Handle_ProjLib_HCompProjectedCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_LastParameter(self, *args)


    def Continuity(self, *args):
        """
        Continuity(Handle_ProjLib_HCompProjectedCurve self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_Continuity(self, *args)


    def NbIntervals(self, *args):
        """
        NbIntervals(Handle_ProjLib_HCompProjectedCurve self, GeomAbs_Shape const S) -> Standard_Integer

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_NbIntervals(self, *args)


    def Intervals(self, *args):
        """
        Intervals(Handle_ProjLib_HCompProjectedCurve self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_Intervals(self, *args)


    def Trim(self, *args):
        """
        Trim(Handle_ProjLib_HCompProjectedCurve self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor2d_HCurve2d

        If <First> >= <Last>

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor2d.Handle_Adaptor2d_HCurve2d

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_Trim(self, *args)


    def IsClosed(self, *args):
        """
        IsClosed(Handle_ProjLib_HCompProjectedCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_IsClosed(self, *args)


    def IsPeriodic(self, *args):
        """
        IsPeriodic(Handle_ProjLib_HCompProjectedCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_IsPeriodic(self, *args)


    def Period(self, *args):
        """
        Period(Handle_ProjLib_HCompProjectedCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_Period(self, *args)


    def Value(self, *args):
        """
        Value(Handle_ProjLib_HCompProjectedCurve self, Standard_Real const U) -> gp_Pnt2d

        :type U: float
        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_Value(self, *args)


    def D0(self, *args):
        """
        D0(Handle_ProjLib_HCompProjectedCurve self, Standard_Real const U, gp_Pnt2d P)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt2d

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_D0(self, *args)


    def D1(self, *args):
        """
        D1(Handle_ProjLib_HCompProjectedCurve self, Standard_Real const U, gp_Pnt2d P, gp_Vec2d V)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt2d
        :type V: OCC.wrapper.gp.gp_Vec2d

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_D1(self, *args)


    def D2(self, *args):
        """
        D2(Handle_ProjLib_HCompProjectedCurve self, Standard_Real const U, gp_Pnt2d P, gp_Vec2d V1, gp_Vec2d V2)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt2d
        :type V1: OCC.wrapper.gp.gp_Vec2d
        :type V2: OCC.wrapper.gp.gp_Vec2d

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_D2(self, *args)


    def D3(self, *args):
        """
        D3(Handle_ProjLib_HCompProjectedCurve self, Standard_Real const U, gp_Pnt2d P, gp_Vec2d V1, gp_Vec2d V2, gp_Vec2d V3)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt2d
        :type V1: OCC.wrapper.gp.gp_Vec2d
        :type V2: OCC.wrapper.gp.gp_Vec2d
        :type V3: OCC.wrapper.gp.gp_Vec2d

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_D3(self, *args)


    def DN(self, *args):
        """
        DN(Handle_ProjLib_HCompProjectedCurve self, Standard_Real const U, Standard_Integer const N) -> gp_Vec2d

        :type U: float
        :type N: int
        :rtype: OCC.wrapper.gp.gp_Vec2d

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_DN(self, *args)


    def Resolution(self, *args):
        """
        Resolution(Handle_ProjLib_HCompProjectedCurve self, Standard_Real const R3d) -> Standard_Real

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_Resolution(self, *args)


    def GetType(self, *args):
        """
        GetType(Handle_ProjLib_HCompProjectedCurve self) -> GeomAbs_CurveType

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_CurveType

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_GetType(self, *args)


    def Line(self, *args):
        """
        Line(Handle_ProjLib_HCompProjectedCurve self) -> gp_Lin2d

        :rtype: OCC.wrapper.gp.gp_Lin2d

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_Line(self, *args)


    def Circle(self, *args):
        """
        Circle(Handle_ProjLib_HCompProjectedCurve self) -> gp_Circ2d

        :rtype: OCC.wrapper.gp.gp_Circ2d

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_Circle(self, *args)


    def Ellipse(self, *args):
        """
        Ellipse(Handle_ProjLib_HCompProjectedCurve self) -> gp_Elips2d

        :rtype: OCC.wrapper.gp.gp_Elips2d

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_Ellipse(self, *args)


    def Hyperbola(self, *args):
        """
        Hyperbola(Handle_ProjLib_HCompProjectedCurve self) -> gp_Hypr2d

        :rtype: OCC.wrapper.gp.gp_Hypr2d

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_Hyperbola(self, *args)


    def Parabola(self, *args):
        """
        Parabola(Handle_ProjLib_HCompProjectedCurve self) -> gp_Parab2d

        :rtype: OCC.wrapper.gp.gp_Parab2d

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_Parabola(self, *args)


    def Degree(self, *args):
        """
        Degree(Handle_ProjLib_HCompProjectedCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_Degree(self, *args)


    def IsRational(self, *args):
        """
        IsRational(Handle_ProjLib_HCompProjectedCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_IsRational(self, *args)


    def NbPoles(self, *args):
        """
        NbPoles(Handle_ProjLib_HCompProjectedCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_NbPoles(self, *args)


    def NbKnots(self, *args):
        """
        NbKnots(Handle_ProjLib_HCompProjectedCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_NbKnots(self, *args)


    def Bezier(self, *args):
        """
        Bezier(Handle_ProjLib_HCompProjectedCurve self) -> Handle_Geom2d_BezierCurve

        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_BezierCurve

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_Bezier(self, *args)


    def BSpline(self, *args):
        """
        BSpline(Handle_ProjLib_HCompProjectedCurve self) -> Handle_Geom2d_BSplineCurve

        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_BSplineCurve

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_BSpline(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_ProjLib_HCompProjectedCurve self)

        Memory deallocator for transient classes


        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_ProjLib_HCompProjectedCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_ProjLib_HCompProjectedCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_ProjLib_HCompProjectedCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_ProjLib_HCompProjectedCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_ProjLib_HCompProjectedCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_ProjLib_HCompProjectedCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_ProjLib_HCompProjectedCurve self)

        Increments the reference counter of this object


        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_ProjLib_HCompProjectedCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ProjLib.Handle_ProjLib_HCompProjectedCurve_DecrementRefCounter(self, *args)

Handle_ProjLib_HCompProjectedCurve_swigregister = _ProjLib.Handle_ProjLib_HCompProjectedCurve_swigregister
Handle_ProjLib_HCompProjectedCurve_swigregister(Handle_ProjLib_HCompProjectedCurve)

def Handle_ProjLib_HCompProjectedCurve_DownCast(thing):
    return _ProjLib.Handle_ProjLib_HCompProjectedCurve_DownCast(thing)
Handle_ProjLib_HCompProjectedCurve_DownCast = _ProjLib.Handle_ProjLib_HCompProjectedCurve_DownCast

class NCollection_Sequence_Handle_TColgp_HSequenceOfPnt(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_Handle_TColgp_HSequenceOfPnt self) -> NCollection_Sequence< opencascade::handle< TColgp_HSequenceOfPnt > >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _ProjLib.NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_Handle_TColgp_HSequenceOfPnt self) -> NCollection_Sequence< opencascade::handle< TColgp_HSequenceOfPnt > >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _ProjLib.NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_Handle_TColgp_HSequenceOfPnt self) -> NCollection_Sequence< opencascade::handle< TColgp_HSequenceOfPnt > >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _ProjLib.NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_Handle_TColgp_HSequenceOfPnt self) -> NCollection_Sequence< opencascade::handle< TColgp_HSequenceOfPnt > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _ProjLib.NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _ProjLib.new_NCollection_Sequence_Handle_TColgp_HSequenceOfPnt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_Handle_TColgp_HSequenceOfPnt self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ProjLib.NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_Handle_TColgp_HSequenceOfPnt self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ProjLib.NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_Handle_TColgp_HSequenceOfPnt self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ProjLib.NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_Handle_TColgp_HSequenceOfPnt self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ProjLib.NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_Handle_TColgp_HSequenceOfPnt self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ProjLib.NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_Handle_TColgp_HSequenceOfPnt self)

        Reverse sequence


        """
        return _ProjLib.NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_Handle_TColgp_HSequenceOfPnt self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _ProjLib.NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _ProjLib.NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_Handle_TColgp_HSequenceOfPnt self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _ProjLib.NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_Handle_TColgp_HSequenceOfPnt self, NCollection_Sequence_Handle_TColgp_HSequenceOfPnt theOther) -> NCollection_Sequence_Handle_TColgp_HSequenceOfPnt

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _ProjLib.NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_Handle_TColgp_HSequenceOfPnt self, NCollection_Sequence_Handle_TColgp_HSequenceOfPnt theOther) -> NCollection_Sequence_Handle_TColgp_HSequenceOfPnt

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _ProjLib.NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_Handle_TColgp_HSequenceOfPnt self, NCollection_Sequence< opencascade::handle< TColgp_HSequenceOfPnt > >::Iterator & thePosition)
        Remove(NCollection_Sequence_Handle_TColgp_HSequenceOfPnt self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_Handle_TColgp_HSequenceOfPnt self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _ProjLib.NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_Handle_TColgp_HSequenceOfPnt self, Handle_TColgp_HSequenceOfPnt theItem)
        Append(NCollection_Sequence_Handle_TColgp_HSequenceOfPnt self, NCollection_Sequence_Handle_TColgp_HSequenceOfPnt theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _ProjLib.NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_Handle_TColgp_HSequenceOfPnt self, Handle_TColgp_HSequenceOfPnt theItem)
        Prepend(NCollection_Sequence_Handle_TColgp_HSequenceOfPnt self, NCollection_Sequence_Handle_TColgp_HSequenceOfPnt theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _ProjLib.NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_Handle_TColgp_HSequenceOfPnt self, Standard_Integer const theIndex, Handle_TColgp_HSequenceOfPnt theItem)
        InsertBefore(NCollection_Sequence_Handle_TColgp_HSequenceOfPnt self, Standard_Integer const theIndex, NCollection_Sequence_Handle_TColgp_HSequenceOfPnt theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _ProjLib.NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_Handle_TColgp_HSequenceOfPnt self, NCollection_Sequence< opencascade::handle< TColgp_HSequenceOfPnt > >::Iterator & thePosition, Handle_TColgp_HSequenceOfPnt theItem)
        InsertAfter(NCollection_Sequence_Handle_TColgp_HSequenceOfPnt self, Standard_Integer const theIndex, NCollection_Sequence_Handle_TColgp_HSequenceOfPnt theSeq)
        InsertAfter(NCollection_Sequence_Handle_TColgp_HSequenceOfPnt self, Standard_Integer const theIndex, Handle_TColgp_HSequenceOfPnt theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _ProjLib.NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_Handle_TColgp_HSequenceOfPnt self, Standard_Integer const theIndex, NCollection_Sequence_Handle_TColgp_HSequenceOfPnt theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _ProjLib.NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _ProjLib.NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_Handle_TColgp_HSequenceOfPnt self) -> Handle_TColgp_HSequenceOfPnt

        First item access

        :rtype: TheItemType &

        """
        return _ProjLib.NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _ProjLib.NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_Handle_TColgp_HSequenceOfPnt self) -> Handle_TColgp_HSequenceOfPnt

        Last item access

        :rtype: TheItemType &

        """
        return _ProjLib.NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _ProjLib.NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_Handle_TColgp_HSequenceOfPnt self, Standard_Integer const theIndex) -> Handle_TColgp_HSequenceOfPnt

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _ProjLib.NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _ProjLib.NCollection_Sequence_Handle_TColgp_HSequenceOfPnt___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_Handle_TColgp_HSequenceOfPnt self, Standard_Integer const theIndex, Handle_TColgp_HSequenceOfPnt theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _ProjLib.NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_SetValue(self, *args)


    def __iter__(self):
        return _ProjLib.NCollection_Sequence_Handle_TColgp_HSequenceOfPnt___iter__(self)
    __swig_destroy__ = _ProjLib.delete_NCollection_Sequence_Handle_TColgp_HSequenceOfPnt
NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_swigregister = _ProjLib.NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_swigregister
NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_swigregister(NCollection_Sequence_Handle_TColgp_HSequenceOfPnt)

def NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_delNode(*args):
    """
    NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _ProjLib.NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_delNode(*args)

class NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _ProjLib.new_NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ProjLib.delete_NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_IteratorHelper

    def __next__(self):
        return _ProjLib.NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_IteratorHelper___next__(self)
NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_IteratorHelper_swigregister = _ProjLib.NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_IteratorHelper_swigregister
NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_IteratorHelper_swigregister(NCollection_Sequence_Handle_TColgp_HSequenceOfPnt_IteratorHelper)


try:
	ProjLib_SequenceOfHSequenceOfPnt = NCollection_Sequence_Handle_TColgp_HSequenceOfPnt
except NameError:
	pass # does not exist, probably ignored

class ProjLib_ComputeApprox(object):
    """
    Approximate the  projection of  a 3d curve   on an
    analytic surface and stores the result in Approx.
    The result is a 2d curve.
    For approximation some parameters are used, including 
    required tolerance of approximation.
    Tolerance is maximal possible value of 3d deviation of 3d projection of projected curve from
    "exact" 3d projection. Since algorithm searches 2d curve on surface, required 2d tolerance is computed
    from 3d tolerance with help of U,V resolutions of surface.
    3d and 2d tolerances have sence only for curves on surface, it defines precision of projecting and approximation
    and have nothing to do with distance between the projected curve and the surface.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ProjLib_ComputeApprox self) -> ProjLib_ComputeApprox
        __init__(ProjLib_ComputeApprox self, Handle_Adaptor3d_HCurve C, Handle_Adaptor3d_HSurface S, Standard_Real const Tol) -> ProjLib_ComputeApprox

        <Tol>    is   the   tolerance   with  which    the
        approximation is performed.
        Other parameters for approximation have default values.

        :type C: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve
        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :type Tol: float

        """
        this = _ProjLib.new_ProjLib_ComputeApprox(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Perform(self, *args):
        """
        Perform(ProjLib_ComputeApprox self, Handle_Adaptor3d_HCurve C, Handle_Adaptor3d_HSurface S)

        Performs projecting.
        In case of approximation current values of parameters are used:
        default values or set by corresponding methods Set...

        :type C: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve
        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _ProjLib.ProjLib_ComputeApprox_Perform(self, *args)


    def SetTolerance(self, *args):
        """
        SetTolerance(ProjLib_ComputeApprox self, Standard_Real const theTolerance)

        Set tolerance of approximation.
        Default value is Precision::Confusion().

        :type theTolerance: float

        """
        return _ProjLib.ProjLib_ComputeApprox_SetTolerance(self, *args)


    def SetDegree(self, *args):
        """
        SetDegree(ProjLib_ComputeApprox self, Standard_Integer const theDegMin, Standard_Integer const theDegMax)

        Set min and max possible degree of result BSpline curve2d, which is got by approximation.
        If theDegMin/Max < 0, algorithm uses values that are chosen depending of types curve 3d
        and surface.

        :type theDegMin: int
        :type theDegMax: int

        """
        return _ProjLib.ProjLib_ComputeApprox_SetDegree(self, *args)


    def SetMaxSegments(self, *args):
        """
        SetMaxSegments(ProjLib_ComputeApprox self, Standard_Integer const theMaxSegments)

        Set the parameter, which defines maximal value of parametric intervals the projected
        curve can be cut for approximation. If theMaxSegments < 0, algorithm uses default 
        value = 1000.

        :type theMaxSegments: int

        """
        return _ProjLib.ProjLib_ComputeApprox_SetMaxSegments(self, *args)


    def SetBndPnt(self, *args):
        """
        SetBndPnt(ProjLib_ComputeApprox self, AppParCurves_Constraint const theBndPnt)

        Set the parameter, which defines type of boundary condition between segments during approximation.
        It can be AppParCurves_PassPoint or AppParCurves_TangencyPoint.
        Default value is AppParCurves_TangencyPoint;

        :type theBndPnt: OCC.wrapper.AppParCurves.AppParCurves_Constraint

        """
        return _ProjLib.ProjLib_ComputeApprox_SetBndPnt(self, *args)


    def BSpline(self, *args):
        """
        BSpline(ProjLib_ComputeApprox self) -> Handle_Geom2d_BSplineCurve

        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_BSplineCurve

        """
        return _ProjLib.ProjLib_ComputeApprox_BSpline(self, *args)


    def Bezier(self, *args):
        """
        Bezier(ProjLib_ComputeApprox self) -> Handle_Geom2d_BezierCurve

        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_BezierCurve

        """
        return _ProjLib.ProjLib_ComputeApprox_Bezier(self, *args)


    def Tolerance(self, *args):
        """
        Tolerance(ProjLib_ComputeApprox self) -> Standard_Real

        returns the reached Tolerance.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _ProjLib.ProjLib_ComputeApprox_Tolerance(self, *args)

    __swig_destroy__ = _ProjLib.delete_ProjLib_ComputeApprox
ProjLib_ComputeApprox_swigregister = _ProjLib.ProjLib_ComputeApprox_swigregister
ProjLib_ComputeApprox_swigregister(ProjLib_ComputeApprox)

class ProjLib_CompProjectedCurve(Adaptor2d.Adaptor2d_Curve2d):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ProjLib_CompProjectedCurve self) -> ProjLib_CompProjectedCurve
        __init__(ProjLib_CompProjectedCurve self, Handle_Adaptor3d_HSurface S, Handle_Adaptor3d_HCurve C, Standard_Real const TolU, Standard_Real const TolV) -> ProjLib_CompProjectedCurve
        __init__(ProjLib_CompProjectedCurve self, Handle_Adaptor3d_HSurface S, Handle_Adaptor3d_HCurve C, Standard_Real const TolU, Standard_Real const TolV, Standard_Real const MaxDist) -> ProjLib_CompProjectedCurve

        this constructor tries to optimize the search using the
        assumption that maximum distance between surface and curve less or
        equal then MaxDist.
        if MaxDist < 0 then algorithm works as above.

        :type S: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :type C: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve
        :type TolU: float
        :type TolV: float
        :type MaxDist: float

        """
        this = _ProjLib.new_ProjLib_CompProjectedCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(ProjLib_CompProjectedCurve self)

        computes a set of projected point and determine the
        continuous parts of the projected  curves. The  points
        corresponding to a projection on the bounds of the surface are
        included  in this set of points.


        """
        return _ProjLib.ProjLib_CompProjectedCurve_Init(self, *args)


    def Load(self, *args):
        """
        Load(ProjLib_CompProjectedCurve self, Handle_Adaptor3d_HSurface S)
        Load(ProjLib_CompProjectedCurve self, Handle_Adaptor3d_HCurve C)

        Changes the  curve.

        :type C: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve

        """
        return _ProjLib.ProjLib_CompProjectedCurve_Load(self, *args)


    def GetSurface(self, *args):
        """
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        res = _ProjLib.ProjLib_CompProjectedCurve_GetSurface(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetCurve(self, *args):
        """
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve

        """
        res = _ProjLib.ProjLib_CompProjectedCurve_GetCurve(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetTolerance(self, *args):
        """
        GetTolerance(ProjLib_CompProjectedCurve self)

        :type TolU: float
        :type TolV: float

        """
        return _ProjLib.ProjLib_CompProjectedCurve_GetTolerance(self, *args)


    def NbCurves(self, *args):
        """
        NbCurves(ProjLib_CompProjectedCurve self) -> Standard_Integer

        returns the number of continuous part of the projected curve

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ProjLib.ProjLib_CompProjectedCurve_NbCurves(self, *args)


    def Bounds(self, *args):
        """
        Bounds(ProjLib_CompProjectedCurve self, Standard_Integer const Index)

        returns the bounds of the continuous part corresponding to Index

        :type Index: int
        :type Udeb: float
        :type Ufin: float

        """
        return _ProjLib.ProjLib_CompProjectedCurve_Bounds(self, *args)


    def IsSinglePnt(self, *args):
        """
        IsSinglePnt(ProjLib_CompProjectedCurve self, Standard_Integer const Index, gp_Pnt2d P) -> Standard_Boolean

        returns  True  if  part  of  projection with  number  Index is  a  single  point  and  writes  its  coordinates in  P

        :type Index: int
        :type P: OCC.wrapper.gp.gp_Pnt2d
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ProjLib.ProjLib_CompProjectedCurve_IsSinglePnt(self, *args)


    def IsUIso(self, *args):
        """
        IsUIso(ProjLib_CompProjectedCurve self, Standard_Integer const Index) -> Standard_Boolean

        returns  True  if  part  of  projection with  number  Index is  an  u-isoparametric curve  of  input  surface

        :type Index: int
        :type U: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ProjLib.ProjLib_CompProjectedCurve_IsUIso(self, *args)


    def IsVIso(self, *args):
        """
        IsVIso(ProjLib_CompProjectedCurve self, Standard_Integer const Index) -> Standard_Boolean

        returns  True  if  part  of  projection with  number  Index is  an  v-isoparametric curve  of  input  surface

        :type Index: int
        :type V: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ProjLib.ProjLib_CompProjectedCurve_IsVIso(self, *args)


    def Value(self, *args):
        """
        Value(ProjLib_CompProjectedCurve self, Standard_Real const U) -> gp_Pnt2d

        Computes the point of parameter U on the curve.

        :type U: float
        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _ProjLib.ProjLib_CompProjectedCurve_Value(self, *args)


    def D0(self, *args):
        """
        D0(ProjLib_CompProjectedCurve self, Standard_Real const U, gp_Pnt2d P)

        Computes the point of parameter U on the curve.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt2d

        """
        return _ProjLib.ProjLib_CompProjectedCurve_D0(self, *args)


    def D1(self, *args):
        """
        D1(ProjLib_CompProjectedCurve self, Standard_Real const U, gp_Pnt2d P, gp_Vec2d V)

        Computes the point of parameter U on the curve with its
        first derivative.
        Raised if the continuity of the current interval
        is not C1.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt2d
        :type V: OCC.wrapper.gp.gp_Vec2d

        """
        return _ProjLib.ProjLib_CompProjectedCurve_D1(self, *args)


    def D2(self, *args):
        """
        D2(ProjLib_CompProjectedCurve self, Standard_Real const U, gp_Pnt2d P, gp_Vec2d V1, gp_Vec2d V2)

        Returns the point P of parameter U, the first and second
        derivatives V1 and V2.
        Raised if the continuity of the current interval
        is not C2.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt2d
        :type V1: OCC.wrapper.gp.gp_Vec2d
        :type V2: OCC.wrapper.gp.gp_Vec2d

        """
        return _ProjLib.ProjLib_CompProjectedCurve_D2(self, *args)


    def DN(self, *args):
        """
        DN(ProjLib_CompProjectedCurve self, Standard_Real const U, Standard_Integer const N) -> gp_Vec2d

        The returned vector gives the value of the derivative for the
        order of derivation N.
        Raised if N < 1.
        Raised if N > 2.

        :type U: float
        :type N: int
        :rtype: OCC.wrapper.gp.gp_Vec2d

        """
        return _ProjLib.ProjLib_CompProjectedCurve_DN(self, *args)


    def FirstParameter(self, *args):
        """
        FirstParameter(ProjLib_CompProjectedCurve self) -> Standard_Real

        Returns  the  first  parameter of  the  curve  C
        which  has  a  projection  on  S.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _ProjLib.ProjLib_CompProjectedCurve_FirstParameter(self, *args)


    def LastParameter(self, *args):
        """
        LastParameter(ProjLib_CompProjectedCurve self) -> Standard_Real

        Returns  the  last  parameter of  the  curve  C
        which  has  a  projection  on  S.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _ProjLib.ProjLib_CompProjectedCurve_LastParameter(self, *args)


    def NbIntervals(self, *args):
        """
        NbIntervals(ProjLib_CompProjectedCurve self, GeomAbs_Shape const S) -> Standard_Integer

        Returns  the number  of  intervals which  define
        an  S  continuous  part  of  the  projected  curve

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ProjLib.ProjLib_CompProjectedCurve_NbIntervals(self, *args)


    def Trim(self, *args):
        """
        Trim(ProjLib_CompProjectedCurve self, Standard_Real const FirstParam, Standard_Real const LastParam, Standard_Real const Tol) -> Handle_Adaptor2d_HCurve2d

        Returns    a  curve equivalent   of  <me>  between
        parameters <First>  and <Last>. <Tol>  is used  to
        test for 2d points confusion.
        If <First> >= <Last>

        :type FirstParam: float
        :type LastParam: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor2d.Handle_Adaptor2d_HCurve2d

        """
        return _ProjLib.ProjLib_CompProjectedCurve_Trim(self, *args)


    def Intervals(self, *args):
        """
        Intervals(ProjLib_CompProjectedCurve self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        Returns  the  parameters  corresponding  to
        S  discontinuities.

        The array must provide  enough room to  accommodate
        for the parameters. i.e. T.Length() > NbIntervals()

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _ProjLib.ProjLib_CompProjectedCurve_Intervals(self, *args)


    def MaxDistance(self, *args):
        """
        MaxDistance(ProjLib_CompProjectedCurve self, Standard_Integer const Index) -> Standard_Real

        returns  the  maximum  distance  between
        curve  to  project  and  surface

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _ProjLib.ProjLib_CompProjectedCurve_MaxDistance(self, *args)


    def GetSequence(self, *args):
        """
        :rtype: OCC.wrapper.ProjLib.Handle_ProjLib_HSequenceOfHSequenceOfPnt

        """
        res = _ProjLib.ProjLib_CompProjectedCurve_GetSequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetType(self, *args):
        """
        GetType(ProjLib_CompProjectedCurve self) -> GeomAbs_CurveType

        Returns  the  type of the   curve  in the  current
        interval :   Line,   Circle,   Ellipse, Hyperbola,
        Parabola, BezierCurve, BSplineCurve, OtherCurve.

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_CurveType

        """
        return _ProjLib.ProjLib_CompProjectedCurve_GetType(self, *args)

    __swig_destroy__ = _ProjLib.delete_ProjLib_CompProjectedCurve
ProjLib_CompProjectedCurve_swigregister = _ProjLib.ProjLib_CompProjectedCurve_swigregister
ProjLib_CompProjectedCurve_swigregister(ProjLib_CompProjectedCurve)



