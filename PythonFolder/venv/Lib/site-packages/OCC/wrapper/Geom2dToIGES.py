# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Geom2dToIGES')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Geom2dToIGES')
    _Geom2dToIGES = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Geom2dToIGES', [dirname(__file__)])
        except ImportError:
            import _Geom2dToIGES
            return _Geom2dToIGES
        try:
            _mod = imp.load_module('_Geom2dToIGES', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Geom2dToIGES = swig_import_helper()
    del swig_import_helper
else:
    import _Geom2dToIGES
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Geom2dToIGES.delete_SwigPyIterator

    def value(self):
        return _Geom2dToIGES.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Geom2dToIGES.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Geom2dToIGES.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Geom2dToIGES.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Geom2dToIGES.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Geom2dToIGES.SwigPyIterator_copy(self)

    def next(self):
        return _Geom2dToIGES.SwigPyIterator_next(self)

    def __next__(self):
        return _Geom2dToIGES.SwigPyIterator___next__(self)

    def previous(self):
        return _Geom2dToIGES.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Geom2dToIGES.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Geom2dToIGES.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Geom2dToIGES.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Geom2dToIGES.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Geom2dToIGES.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Geom2dToIGES.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Geom2dToIGES.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Geom2dToIGES.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _Geom2dToIGES.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_Geom2dToIGES.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _Geom2dToIGES.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _Geom2dToIGES.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Geom2dToIGES.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _Geom2dToIGES.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _Geom2dToIGES.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _Geom2dToIGES.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _Geom2dToIGES.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_Geom2dToIGES.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _Geom2dToIGES.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _Geom2dToIGES.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Geom2dToIGES.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _Geom2dToIGES.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _Geom2dToIGES.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _Geom2dToIGES.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _Geom2dToIGES.ptr_to_number(item)
ptr_to_number = _Geom2dToIGES.ptr_to_number

def HashCode(*args):
    return _Geom2dToIGES.HashCode(*args)
HashCode = _Geom2dToIGES.HashCode

def ptr_equal(a, b):
    return _Geom2dToIGES.ptr_equal(a, b)
ptr_equal = _Geom2dToIGES.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESData
else:
    import IGESData
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESGeom
else:
    import IGESGeom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESBasic
else:
    import IGESBasic
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
class Geom2dToIGES_Geom2dEntity(object):
    """provides methods to transfer Geom2d entity from CASCADE to IGES."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Geom2dToIGES_Geom2dEntity self) -> Geom2dToIGES_Geom2dEntity
        __init__(Geom2dToIGES_Geom2dEntity self, Geom2dToIGES_Geom2dEntity GE) -> Geom2dToIGES_Geom2dEntity

        Creates a tool ready to run and sets its
        fields as GE's.

        :type GE: OCC.wrapper.Geom2dToIGES.Geom2dToIGES_Geom2dEntity

        """
        this = _Geom2dToIGES.new_Geom2dToIGES_Geom2dEntity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetModel(self, *args):
        """
        SetModel(Geom2dToIGES_Geom2dEntity self, Handle_IGESData_IGESModel model)

        Set the value of "TheModel"

        :type model: OCC.wrapper.IGESData.Handle_IGESData_IGESModel

        """
        return _Geom2dToIGES.Geom2dToIGES_Geom2dEntity_SetModel(self, *args)


    def GetModel(self, *args):
        """
        GetModel(Geom2dToIGES_Geom2dEntity self) -> Handle_IGESData_IGESModel

        Returns the value of "TheModel"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESModel

        """
        return _Geom2dToIGES.Geom2dToIGES_Geom2dEntity_GetModel(self, *args)


    def SetUnit(self, *args):
        """
        SetUnit(Geom2dToIGES_Geom2dEntity self, Standard_Real const unit)

        Sets the value of the UnitFlag

        :type unit: float

        """
        return _Geom2dToIGES.Geom2dToIGES_Geom2dEntity_SetUnit(self, *args)


    def GetUnit(self, *args):
        """
        GetUnit(Geom2dToIGES_Geom2dEntity self) -> Standard_Real

        Returns the value of the UnitFlag of the header of the model
        in millimeters.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Geom2dToIGES.Geom2dToIGES_Geom2dEntity_GetUnit(self, *args)

    __swig_destroy__ = _Geom2dToIGES.delete_Geom2dToIGES_Geom2dEntity
Geom2dToIGES_Geom2dEntity_swigregister = _Geom2dToIGES.Geom2dToIGES_Geom2dEntity_swigregister
Geom2dToIGES_Geom2dEntity_swigregister(Geom2dToIGES_Geom2dEntity)

class Geom2dToIGES_Geom2dCurve(Geom2dToIGES_Geom2dEntity):
    """
    This class implements the transfer of the Curve Entity from Geom2d
    To IGES. These can be :
    Curve
    . BoundedCurve
    * BSplineCurve
    * BezierCurve
    * TrimmedCurve
    . Conic
    * Circle
    * Ellipse
    * Hyperbloa
    * Line
    * Parabola
    . OffsetCurve
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Geom2dToIGES_Geom2dCurve self) -> Geom2dToIGES_Geom2dCurve
        __init__(Geom2dToIGES_Geom2dCurve self, Geom2dToIGES_Geom2dEntity G2dE) -> Geom2dToIGES_Geom2dCurve

        Creates a tool Geom2dCurve ready to run and sets its
        fields as G2dE's.

        :type G2dE: OCC.wrapper.Geom2dToIGES.Geom2dToIGES_Geom2dEntity

        """
        this = _Geom2dToIGES.new_Geom2dToIGES_Geom2dCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Transfer2dCurve(self, *args):
        """
        Transfer2dCurve(Geom2dToIGES_Geom2dCurve self, Handle_Geom2d_Curve start, Standard_Real const Udeb, Standard_Real const Ufin) -> Handle_IGESData_IGESEntity

        Transfert  an Entity from Geom2d to IGES. If this
        Entity could not be converted, this member returns a NullEntity.

        :type start: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
        :type Udeb: float
        :type Ufin: float
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _Geom2dToIGES.Geom2dToIGES_Geom2dCurve_Transfer2dCurve(self, *args)

    __swig_destroy__ = _Geom2dToIGES.delete_Geom2dToIGES_Geom2dCurve
Geom2dToIGES_Geom2dCurve_swigregister = _Geom2dToIGES.Geom2dToIGES_Geom2dCurve_swigregister
Geom2dToIGES_Geom2dCurve_swigregister(Geom2dToIGES_Geom2dCurve)

class Geom2dToIGES_Geom2dPoint(Geom2dToIGES_Geom2dEntity):
    """
    This class implements the transfer of the Point Entity from Geom2d
    to IGES . These are :
    . 2dPoint
    * 2dCartesianPoint
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Geom2dToIGES_Geom2dPoint self) -> Geom2dToIGES_Geom2dPoint
        __init__(Geom2dToIGES_Geom2dPoint self, Geom2dToIGES_Geom2dEntity G2dE) -> Geom2dToIGES_Geom2dPoint

        Creates a tool Geom2dPoint ready to run and sets its
        fields as G2dE's.

        :type G2dE: OCC.wrapper.Geom2dToIGES.Geom2dToIGES_Geom2dEntity

        """
        this = _Geom2dToIGES.new_Geom2dToIGES_Geom2dPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Transfer2dPoint(self, *args):
        """
        Transfer2dPoint(Geom2dToIGES_Geom2dPoint self, Handle_Geom2d_Point start) -> Handle_IGESGeom_Point
        Transfer2dPoint(Geom2dToIGES_Geom2dPoint self, Handle_Geom2d_CartesianPoint start) -> Handle_IGESGeom_Point

        Transfert  a  CartesianPoint from Geom to IGES. If this
        Entity could not be converted, this member returns a NullEntity.

        :type start: OCC.wrapper.Geom2d.Handle_Geom2d_CartesianPoint
        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Point

        """
        return _Geom2dToIGES.Geom2dToIGES_Geom2dPoint_Transfer2dPoint(self, *args)

    __swig_destroy__ = _Geom2dToIGES.delete_Geom2dToIGES_Geom2dPoint
Geom2dToIGES_Geom2dPoint_swigregister = _Geom2dToIGES.Geom2dToIGES_Geom2dPoint_swigregister
Geom2dToIGES_Geom2dPoint_swigregister(Geom2dToIGES_Geom2dPoint)

class Geom2dToIGES_Geom2dVector(Geom2dToIGES_Geom2dEntity):
    """
    This class implements the transfer of the Vector from Geom2d
    to IGES . These can be :
    . Vector
    * Direction
    * VectorWithMagnitude
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Geom2dToIGES_Geom2dVector self) -> Geom2dToIGES_Geom2dVector
        __init__(Geom2dToIGES_Geom2dVector self, Geom2dToIGES_Geom2dEntity G2dE) -> Geom2dToIGES_Geom2dVector

        Creates a tool Geom2dVector ready to run and sets its
        fields as G2dE's.

        :type G2dE: OCC.wrapper.Geom2dToIGES.Geom2dToIGES_Geom2dEntity

        """
        this = _Geom2dToIGES.new_Geom2dToIGES_Geom2dVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Transfer2dVector(self, *args):
        """
        Transfer2dVector(Geom2dToIGES_Geom2dVector self, Handle_Geom2d_Vector start) -> Handle_IGESGeom_Direction
        Transfer2dVector(Geom2dToIGES_Geom2dVector self, Handle_Geom2d_VectorWithMagnitude start) -> Handle_IGESGeom_Direction
        Transfer2dVector(Geom2dToIGES_Geom2dVector self, Handle_Geom2d_Direction start) -> Handle_IGESGeom_Direction

        :type start: OCC.wrapper.Geom2d.Handle_Geom2d_Direction
        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction

        """
        return _Geom2dToIGES.Geom2dToIGES_Geom2dVector_Transfer2dVector(self, *args)

    __swig_destroy__ = _Geom2dToIGES.delete_Geom2dToIGES_Geom2dVector
Geom2dToIGES_Geom2dVector_swigregister = _Geom2dToIGES.Geom2dToIGES_Geom2dVector_swigregister
Geom2dToIGES_Geom2dVector_swigregister(Geom2dToIGES_Geom2dVector)



