# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_DrawTrSurf')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_DrawTrSurf')
    _DrawTrSurf = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_DrawTrSurf', [dirname(__file__)])
        except ImportError:
            import _DrawTrSurf
            return _DrawTrSurf
        try:
            _mod = imp.load_module('_DrawTrSurf', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _DrawTrSurf = swig_import_helper()
    del swig_import_helper
else:
    import _DrawTrSurf
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _DrawTrSurf.delete_SwigPyIterator

    def value(self):
        return _DrawTrSurf.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _DrawTrSurf.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _DrawTrSurf.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _DrawTrSurf.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _DrawTrSurf.SwigPyIterator_equal(self, x)

    def copy(self):
        return _DrawTrSurf.SwigPyIterator_copy(self)

    def next(self):
        return _DrawTrSurf.SwigPyIterator_next(self)

    def __next__(self):
        return _DrawTrSurf.SwigPyIterator___next__(self)

    def previous(self):
        return _DrawTrSurf.SwigPyIterator_previous(self)

    def advance(self, n):
        return _DrawTrSurf.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _DrawTrSurf.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _DrawTrSurf.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _DrawTrSurf.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _DrawTrSurf.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _DrawTrSurf.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _DrawTrSurf.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _DrawTrSurf.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _DrawTrSurf.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_DrawTrSurf.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _DrawTrSurf.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _DrawTrSurf.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DrawTrSurf.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _DrawTrSurf.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _DrawTrSurf.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _DrawTrSurf.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _DrawTrSurf.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_DrawTrSurf.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _DrawTrSurf.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _DrawTrSurf.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DrawTrSurf.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _DrawTrSurf.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _DrawTrSurf.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _DrawTrSurf.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _DrawTrSurf.ptr_to_number(item)
ptr_to_number = _DrawTrSurf.ptr_to_number

def HashCode(*args):
    return _DrawTrSurf.HashCode(*args)
HashCode = _DrawTrSurf.HashCode

def ptr_equal(a, b):
    return _DrawTrSurf.ptr_equal(a, b)
ptr_equal = _DrawTrSurf.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Draw
else:
    import Draw
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Poly
else:
    import Poly
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TShort
else:
    import TShort
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor2d
else:
    import Adaptor2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor3d
else:
    import Adaptor3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import math
else:
    import math
del _swig_python_version_info
class DrawTrSurf_Drawable(Draw.Draw_Drawable3D):
    """
    this  class adds   to   the Drawable3D methods  to
    display Curves and Curves on Surface.

    The discretisation,  number  of points on a Curve,
    is stored in this class.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_DrawTrSurf_Drawable
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_DrawTrSurf_Drawable(self) 
            return h


    def DrawCurve2dOn(self, *args):
        """
        DrawCurve2dOn(DrawTrSurf_Drawable self, Adaptor2d_Curve2d C, Draw_Display D)

        Draw a polygon of the curve on the Display

        :type C: OCC.wrapper.Adaptor2d.Adaptor2d_Curve2d
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.DrawTrSurf_Drawable_DrawCurve2dOn(self, *args)


    def DrawCurveOn(self, *args):
        """
        DrawCurveOn(DrawTrSurf_Drawable self, Adaptor3d_Curve C, Draw_Display D)

        Draw a polygon of the curve on the Display

        :type C: OCC.wrapper.Adaptor3d.Adaptor3d_Curve
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.DrawTrSurf_Drawable_DrawCurveOn(self, *args)


    def DrawIsoCurveOn(self, *args):
        """
        DrawIsoCurveOn(DrawTrSurf_Drawable self, Adaptor3d_IsoCurve C, GeomAbs_IsoType const T, Standard_Real const P, Standard_Real const F, Standard_Real const L, Draw_Display D)

        Load C  with the specified iso  and Draw a polygon
        of the curve on the Display

        :type C: OCC.wrapper.Adaptor3d.Adaptor3d_IsoCurve
        :type T: OCC.wrapper.GeomAbs.GeomAbs_IsoType
        :type P: float
        :type F: float
        :type L: float
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.DrawTrSurf_Drawable_DrawIsoCurveOn(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(DrawTrSurf_Drawable self, Draw_Display dis)

        this is defined only to tell C++ not to complain
        about inheriting a pure virtual method.

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.DrawTrSurf_Drawable_DrawOn(self, *args)


    def SetDiscretisation(self, *args):
        """
        SetDiscretisation(DrawTrSurf_Drawable self, Standard_Integer const Discret)

        :type Discret: int

        """
        return _DrawTrSurf.DrawTrSurf_Drawable_SetDiscretisation(self, *args)


    def GetDiscretisation(self, *args):
        """
        GetDiscretisation(DrawTrSurf_Drawable self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.DrawTrSurf_Drawable_GetDiscretisation(self, *args)


    def SetDeflection(self, *args):
        """
        SetDeflection(DrawTrSurf_Drawable self, Standard_Real const Deflection)

        :type Deflection: float

        """
        return _DrawTrSurf.DrawTrSurf_Drawable_SetDeflection(self, *args)


    def GetDeflection(self, *args):
        """
        GetDeflection(DrawTrSurf_Drawable self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawTrSurf.DrawTrSurf_Drawable_GetDeflection(self, *args)


    def SetDrawMode(self, *args):
        """
        SetDrawMode(DrawTrSurf_Drawable self, Standard_Integer const DrawMode)

        :type DrawMode: int

        """
        return _DrawTrSurf.DrawTrSurf_Drawable_SetDrawMode(self, *args)


    def GetDrawMode(self, *args):
        """
        GetDrawMode(DrawTrSurf_Drawable self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.DrawTrSurf_Drawable_GetDrawMode(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _DrawTrSurf.DrawTrSurf_Drawable_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _DrawTrSurf.DrawTrSurf_Drawable_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.DrawTrSurf_Drawable_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _DrawTrSurf.delete_DrawTrSurf_Drawable
DrawTrSurf_Drawable_swigregister = _DrawTrSurf.DrawTrSurf_Drawable_swigregister
DrawTrSurf_Drawable_swigregister(DrawTrSurf_Drawable)

def DrawTrSurf_Drawable_get_type_name(*args):
    """
    DrawTrSurf_Drawable_get_type_name() -> char const *

    :rtype: const char *

    """
    return _DrawTrSurf.DrawTrSurf_Drawable_get_type_name(*args)

def DrawTrSurf_Drawable_get_type_descriptor(*args):
    """
    DrawTrSurf_Drawable_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _DrawTrSurf.DrawTrSurf_Drawable_get_type_descriptor(*args)

class DrawTrSurf_Curve(DrawTrSurf_Drawable):
    """This class defines a drawable curve in 3d space."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_DrawTrSurf_Curve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_DrawTrSurf_Curve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(DrawTrSurf_Curve self, Handle_Geom_Curve C, Standard_Boolean const DispOrigin) -> DrawTrSurf_Curve
        __init__(DrawTrSurf_Curve self, Handle_Geom_Curve C, Draw_Color aColor, Standard_Integer const Discret, Standard_Real const Deflection, Standard_Integer const DrawMode, Standard_Boolean const DispOrigin, Standard_Boolean const DispCurvRadius, Standard_Real const RadiusMax=1.0e3, Standard_Real const RatioOfRadius=0.1) -> DrawTrSurf_Curve

        :type C: OCC.wrapper.Geom.Handle_Geom_Curve
        :type aColor: OCC.wrapper.Draw.Draw_Color
        :type Discret: int
        :type Deflection: float
        :type DrawMode: int
        :type DispOrigin: bool
        :type DispCurvRadius: bool
        :type RadiusMax: float
        :type RatioOfRadius: float

        """
        this = _DrawTrSurf.new_DrawTrSurf_Curve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def DrawOn(self, *args):
        """
        DrawOn(DrawTrSurf_Curve self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.DrawTrSurf_Curve_DrawOn(self, *args)


    def GetCurve(self, *args):
        """
        GetCurve(DrawTrSurf_Curve self) -> Handle_Geom_Curve

        :rtype: OCC.wrapper.Geom.Handle_Geom_Curve

        """
        return _DrawTrSurf.DrawTrSurf_Curve_GetCurve(self, *args)


    def SetColor(self, *args):
        """
        SetColor(DrawTrSurf_Curve self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.DrawTrSurf_Curve_SetColor(self, *args)


    def DisplayOrigin(self, *args):
        """
        DisplayOrigin(DrawTrSurf_Curve self) -> Standard_Boolean
        DisplayOrigin(DrawTrSurf_Curve self, Standard_Boolean const V)

        :type V: bool

        """
        return _DrawTrSurf.DrawTrSurf_Curve_DisplayOrigin(self, *args)


    def ShowCurvature(self, *args):
        """ShowCurvature(DrawTrSurf_Curve self)"""
        return _DrawTrSurf.DrawTrSurf_Curve_ShowCurvature(self, *args)


    def ClearCurvature(self, *args):
        """ClearCurvature(DrawTrSurf_Curve self)"""
        return _DrawTrSurf.DrawTrSurf_Curve_ClearCurvature(self, *args)


    def SetRadiusMax(self, *args):
        """
        SetRadiusMax(DrawTrSurf_Curve self, Standard_Real const Radius)

        :type Radius: float

        """
        return _DrawTrSurf.DrawTrSurf_Curve_SetRadiusMax(self, *args)


    def SetRadiusRatio(self, *args):
        """
        SetRadiusRatio(DrawTrSurf_Curve self, Standard_Real const Ratio)

        :type Ratio: float

        """
        return _DrawTrSurf.DrawTrSurf_Curve_SetRadiusRatio(self, *args)


    def Color(self, *args):
        """
        Color(DrawTrSurf_Curve self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.DrawTrSurf_Curve_Color(self, *args)


    def RadiusMax(self, *args):
        """
        RadiusMax(DrawTrSurf_Curve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawTrSurf.DrawTrSurf_Curve_RadiusMax(self, *args)


    def RadiusRatio(self, *args):
        """
        RadiusRatio(DrawTrSurf_Curve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawTrSurf.DrawTrSurf_Curve_RadiusRatio(self, *args)


    def Copy(self, *args):
        """
        Copy(DrawTrSurf_Curve self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DrawTrSurf.DrawTrSurf_Curve_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(DrawTrSurf_Curve self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DrawTrSurf.DrawTrSurf_Curve_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(DrawTrSurf_Curve self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DrawTrSurf.DrawTrSurf_Curve_Whatis(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _DrawTrSurf.DrawTrSurf_Curve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _DrawTrSurf.DrawTrSurf_Curve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.DrawTrSurf_Curve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _DrawTrSurf.delete_DrawTrSurf_Curve
DrawTrSurf_Curve_swigregister = _DrawTrSurf.DrawTrSurf_Curve_swigregister
DrawTrSurf_Curve_swigregister(DrawTrSurf_Curve)

def DrawTrSurf_Curve_get_type_name(*args):
    """
    DrawTrSurf_Curve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _DrawTrSurf.DrawTrSurf_Curve_get_type_name(*args)

def DrawTrSurf_Curve_get_type_descriptor(*args):
    """
    DrawTrSurf_Curve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _DrawTrSurf.DrawTrSurf_Curve_get_type_descriptor(*args)

class DrawTrSurf_Curve2d(DrawTrSurf_Drawable):
    """
    This class defines a drawable curve in 2d space.
    The curve is drawned in the plane XOY.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_DrawTrSurf_Curve2d
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_DrawTrSurf_Curve2d(self) 
            return h


    def __init__(self, *args):
        """
        __init__(DrawTrSurf_Curve2d self, Handle_Geom2d_Curve C, Standard_Boolean const DispOrigin) -> DrawTrSurf_Curve2d
        __init__(DrawTrSurf_Curve2d self, Handle_Geom2d_Curve C, Draw_Color aColor, Standard_Integer const Discret, Standard_Boolean const DispOrigin, Standard_Boolean const DispCurvRadius, Standard_Real const RadiusMax=1.0e3, Standard_Real const RatioOfRadius=0.1) -> DrawTrSurf_Curve2d

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
        :type aColor: OCC.wrapper.Draw.Draw_Color
        :type Discret: int
        :type DispOrigin: bool
        :type DispCurvRadius: bool
        :type RadiusMax: float
        :type RatioOfRadius: float

        """
        this = _DrawTrSurf.new_DrawTrSurf_Curve2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def DrawOn(self, *args):
        """
        DrawOn(DrawTrSurf_Curve2d self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.DrawTrSurf_Curve2d_DrawOn(self, *args)


    def GetCurve(self, *args):
        """
        GetCurve(DrawTrSurf_Curve2d self) -> Handle_Geom2d_Curve

        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _DrawTrSurf.DrawTrSurf_Curve2d_GetCurve(self, *args)


    def SetColor(self, *args):
        """
        SetColor(DrawTrSurf_Curve2d self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.DrawTrSurf_Curve2d_SetColor(self, *args)


    def ShowCurvature(self, *args):
        """ShowCurvature(DrawTrSurf_Curve2d self)"""
        return _DrawTrSurf.DrawTrSurf_Curve2d_ShowCurvature(self, *args)


    def ClearCurvature(self, *args):
        """ClearCurvature(DrawTrSurf_Curve2d self)"""
        return _DrawTrSurf.DrawTrSurf_Curve2d_ClearCurvature(self, *args)


    def SetRadiusMax(self, *args):
        """
        SetRadiusMax(DrawTrSurf_Curve2d self, Standard_Real const Radius)

        :type Radius: float

        """
        return _DrawTrSurf.DrawTrSurf_Curve2d_SetRadiusMax(self, *args)


    def SetRadiusRatio(self, *args):
        """
        SetRadiusRatio(DrawTrSurf_Curve2d self, Standard_Real const Ratio)

        :type Ratio: float

        """
        return _DrawTrSurf.DrawTrSurf_Curve2d_SetRadiusRatio(self, *args)


    def Color(self, *args):
        """
        Color(DrawTrSurf_Curve2d self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.DrawTrSurf_Curve2d_Color(self, *args)


    def RadiusMax(self, *args):
        """
        RadiusMax(DrawTrSurf_Curve2d self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawTrSurf.DrawTrSurf_Curve2d_RadiusMax(self, *args)


    def RadiusRatio(self, *args):
        """
        RadiusRatio(DrawTrSurf_Curve2d self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawTrSurf.DrawTrSurf_Curve2d_RadiusRatio(self, *args)


    def Copy(self, *args):
        """
        Copy(DrawTrSurf_Curve2d self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DrawTrSurf.DrawTrSurf_Curve2d_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(DrawTrSurf_Curve2d self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DrawTrSurf.DrawTrSurf_Curve2d_Dump(self, *args)


    def Is3D(self, *args):
        """
        Is3D(DrawTrSurf_Curve2d self) -> Standard_Boolean

        Returns False.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.DrawTrSurf_Curve2d_Is3D(self, *args)


    def Whatis(self, *args):
        """
        Whatis(DrawTrSurf_Curve2d self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DrawTrSurf.DrawTrSurf_Curve2d_Whatis(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _DrawTrSurf.DrawTrSurf_Curve2d_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _DrawTrSurf.DrawTrSurf_Curve2d_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.DrawTrSurf_Curve2d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _DrawTrSurf.delete_DrawTrSurf_Curve2d
DrawTrSurf_Curve2d_swigregister = _DrawTrSurf.DrawTrSurf_Curve2d_swigregister
DrawTrSurf_Curve2d_swigregister(DrawTrSurf_Curve2d)

def DrawTrSurf_Curve2d_get_type_name(*args):
    """
    DrawTrSurf_Curve2d_get_type_name() -> char const *

    :rtype: const char *

    """
    return _DrawTrSurf.DrawTrSurf_Curve2d_get_type_name(*args)

def DrawTrSurf_Curve2d_get_type_descriptor(*args):
    """
    DrawTrSurf_Curve2d_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _DrawTrSurf.DrawTrSurf_Curve2d_get_type_descriptor(*args)

class DrawTrSurf_BezierCurve(DrawTrSurf_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_DrawTrSurf_BezierCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_DrawTrSurf_BezierCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(DrawTrSurf_BezierCurve self, Handle_Geom_BezierCurve C) -> DrawTrSurf_BezierCurve
        __init__(DrawTrSurf_BezierCurve self, Handle_Geom_BezierCurve C, Draw_Color CurvColor, Draw_Color PolesColor, Standard_Boolean const ShowPoles, Standard_Integer const Discret, Standard_Real const Deflection, Standard_Integer const DrawMode) -> DrawTrSurf_BezierCurve

        :type C: OCC.wrapper.Geom.Handle_Geom_BezierCurve
        :type CurvColor: OCC.wrapper.Draw.Draw_Color
        :type PolesColor: OCC.wrapper.Draw.Draw_Color
        :type ShowPoles: bool
        :type Discret: int
        :type Deflection: float
        :type DrawMode: int

        """
        this = _DrawTrSurf.new_DrawTrSurf_BezierCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def DrawOn(self, *args):
        """
        DrawOn(DrawTrSurf_BezierCurve self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.DrawTrSurf_BezierCurve_DrawOn(self, *args)


    def ShowPoles(self, *args):
        """ShowPoles(DrawTrSurf_BezierCurve self)"""
        return _DrawTrSurf.DrawTrSurf_BezierCurve_ShowPoles(self, *args)


    def ClearPoles(self, *args):
        """ClearPoles(DrawTrSurf_BezierCurve self)"""
        return _DrawTrSurf.DrawTrSurf_BezierCurve_ClearPoles(self, *args)


    def FindPole(self, *args):
        """
        FindPole(DrawTrSurf_BezierCurve self, Standard_Real const X, Standard_Real const Y, Draw_Display D, Standard_Real const Prec)

        Returns in <Index> the index of the first pole  of the
        curve projected by the Display <D> at a distance lower
        than <Prec> from <X,Y>. If no pole  is found  index is
        set to 0, else index is always  greater than the input
        value of index.

        :type X: float
        :type Y: float
        :type D: OCC.wrapper.Draw.Draw_Display
        :type Prec: float
        :type Index: int

        """
        return _DrawTrSurf.DrawTrSurf_BezierCurve_FindPole(self, *args)


    def SetPolesColor(self, *args):
        """
        SetPolesColor(DrawTrSurf_BezierCurve self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.DrawTrSurf_BezierCurve_SetPolesColor(self, *args)


    def PolesColor(self, *args):
        """
        PolesColor(DrawTrSurf_BezierCurve self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.DrawTrSurf_BezierCurve_PolesColor(self, *args)


    def Copy(self, *args):
        """
        Copy(DrawTrSurf_BezierCurve self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DrawTrSurf.DrawTrSurf_BezierCurve_Copy(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _DrawTrSurf.DrawTrSurf_BezierCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _DrawTrSurf.DrawTrSurf_BezierCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.DrawTrSurf_BezierCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _DrawTrSurf.delete_DrawTrSurf_BezierCurve
DrawTrSurf_BezierCurve_swigregister = _DrawTrSurf.DrawTrSurf_BezierCurve_swigregister
DrawTrSurf_BezierCurve_swigregister(DrawTrSurf_BezierCurve)

def DrawTrSurf_BezierCurve_get_type_name(*args):
    """
    DrawTrSurf_BezierCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _DrawTrSurf.DrawTrSurf_BezierCurve_get_type_name(*args)

def DrawTrSurf_BezierCurve_get_type_descriptor(*args):
    """
    DrawTrSurf_BezierCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _DrawTrSurf.DrawTrSurf_BezierCurve_get_type_descriptor(*args)

class DrawTrSurf_Surface(DrawTrSurf_Drawable):
    """
    This class defines a drawable surface.
    With this class you can draw a general surface from
    package Geom.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_DrawTrSurf_Surface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_DrawTrSurf_Surface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(DrawTrSurf_Surface self, Handle_Geom_Surface S) -> DrawTrSurf_Surface
        __init__(DrawTrSurf_Surface self, Handle_Geom_Surface S, Standard_Integer const Nu, Standard_Integer const Nv, Draw_Color BoundsColor, Draw_Color IsosColor, Standard_Integer const Discret, Standard_Real const Deflection, Standard_Integer const DrawMode) -> DrawTrSurf_Surface

        :type S: OCC.wrapper.Geom.Handle_Geom_Surface
        :type Nu: int
        :type Nv: int
        :type BoundsColor: OCC.wrapper.Draw.Draw_Color
        :type IsosColor: OCC.wrapper.Draw.Draw_Color
        :type Discret: int
        :type Deflection: float
        :type DrawMode: int

        """
        this = _DrawTrSurf.new_DrawTrSurf_Surface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def BoundsColor(self, *args):
        """
        BoundsColor(DrawTrSurf_Surface self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.DrawTrSurf_Surface_BoundsColor(self, *args)


    def ClearIsos(self, *args):
        """
        ClearIsos(DrawTrSurf_Surface self)

        rub out all the isoparametric curves.


        """
        return _DrawTrSurf.DrawTrSurf_Surface_ClearIsos(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(DrawTrSurf_Surface self, Draw_Display dis)
        DrawOn(DrawTrSurf_Surface self, Draw_Display dis, Standard_Boolean const Iso)

        Iso = True : Draw the isos, the boundaries, the UVMarker.
        Iso = False: Only Draw the boundary and the UVMarker.

        :type dis: OCC.wrapper.Draw.Draw_Display
        :type Iso: bool

        """
        return _DrawTrSurf.DrawTrSurf_Surface_DrawOn(self, *args)


    def GetSurface(self, *args):
        """
        GetSurface(DrawTrSurf_Surface self) -> Handle_Geom_Surface

        :rtype: OCC.wrapper.Geom.Handle_Geom_Surface

        """
        return _DrawTrSurf.DrawTrSurf_Surface_GetSurface(self, *args)


    def IsosColor(self, *args):
        """
        IsosColor(DrawTrSurf_Surface self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.DrawTrSurf_Surface_IsosColor(self, *args)


    def NbIsos(self, *args):
        """
        NbIsos(DrawTrSurf_Surface self)

        :type Nu: int
        :type Nb: int

        """
        return _DrawTrSurf.DrawTrSurf_Surface_NbIsos(self, *args)


    def SetBoundsColor(self, *args):
        """
        SetBoundsColor(DrawTrSurf_Surface self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.DrawTrSurf_Surface_SetBoundsColor(self, *args)


    def SetIsosColor(self, *args):
        """
        SetIsosColor(DrawTrSurf_Surface self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.DrawTrSurf_Surface_SetIsosColor(self, *args)


    def ShowIsos(self, *args):
        """
        ShowIsos(DrawTrSurf_Surface self, Standard_Integer const Nu, Standard_Integer const Nv)

        change the number of isoparametric curves to be drawn.

        :type Nu: int
        :type Nv: int

        """
        return _DrawTrSurf.DrawTrSurf_Surface_ShowIsos(self, *args)


    def Copy(self, *args):
        """
        Copy(DrawTrSurf_Surface self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DrawTrSurf.DrawTrSurf_Surface_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(DrawTrSurf_Surface self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DrawTrSurf.DrawTrSurf_Surface_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(DrawTrSurf_Surface self, Draw_Interpretor I)

        For variable whatis command.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DrawTrSurf.DrawTrSurf_Surface_Whatis(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _DrawTrSurf.DrawTrSurf_Surface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _DrawTrSurf.DrawTrSurf_Surface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.DrawTrSurf_Surface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _DrawTrSurf.delete_DrawTrSurf_Surface
DrawTrSurf_Surface_swigregister = _DrawTrSurf.DrawTrSurf_Surface_swigregister
DrawTrSurf_Surface_swigregister(DrawTrSurf_Surface)

def DrawTrSurf_Surface_get_type_name(*args):
    """
    DrawTrSurf_Surface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _DrawTrSurf.DrawTrSurf_Surface_get_type_name(*args)

def DrawTrSurf_Surface_get_type_descriptor(*args):
    """
    DrawTrSurf_Surface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _DrawTrSurf.DrawTrSurf_Surface_get_type_descriptor(*args)

class DrawTrSurf_BezierSurface(DrawTrSurf_Surface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_DrawTrSurf_BezierSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_DrawTrSurf_BezierSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(DrawTrSurf_BezierSurface self, Handle_Geom_BezierSurface S) -> DrawTrSurf_BezierSurface
        __init__(DrawTrSurf_BezierSurface self, Handle_Geom_BezierSurface S, Standard_Integer const NbUIsos, Standard_Integer const NbVIsos, Draw_Color BoundsColor, Draw_Color IsosColor, Draw_Color PolesColor, Standard_Boolean const ShowPoles, Standard_Integer const Discret, Standard_Real const Deflection, Standard_Integer const DrawMode) -> DrawTrSurf_BezierSurface

        :type S: OCC.wrapper.Geom.Handle_Geom_BezierSurface
        :type NbUIsos: int
        :type NbVIsos: int
        :type BoundsColor: OCC.wrapper.Draw.Draw_Color
        :type IsosColor: OCC.wrapper.Draw.Draw_Color
        :type PolesColor: OCC.wrapper.Draw.Draw_Color
        :type ShowPoles: bool
        :type Discret: int
        :type Deflection: float
        :type DrawMode: int

        """
        this = _DrawTrSurf.new_DrawTrSurf_BezierSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def DrawOn(self, *args):
        """
        DrawOn(DrawTrSurf_BezierSurface self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.DrawTrSurf_BezierSurface_DrawOn(self, *args)


    def ShowPoles(self, *args):
        """ShowPoles(DrawTrSurf_BezierSurface self)"""
        return _DrawTrSurf.DrawTrSurf_BezierSurface_ShowPoles(self, *args)


    def ClearPoles(self, *args):
        """ClearPoles(DrawTrSurf_BezierSurface self)"""
        return _DrawTrSurf.DrawTrSurf_BezierSurface_ClearPoles(self, *args)


    def FindPole(self, *args):
        """
        FindPole(DrawTrSurf_BezierSurface self, Standard_Real const X, Standard_Real const Y, Draw_Display D, Standard_Real const Prec)

        :type X: float
        :type Y: float
        :type D: OCC.wrapper.Draw.Draw_Display
        :type Prec: float
        :type UIndex: int
        :type VIndex: int

        """
        return _DrawTrSurf.DrawTrSurf_BezierSurface_FindPole(self, *args)


    def SetPolesColor(self, *args):
        """
        SetPolesColor(DrawTrSurf_BezierSurface self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.DrawTrSurf_BezierSurface_SetPolesColor(self, *args)


    def PolesColor(self, *args):
        """
        PolesColor(DrawTrSurf_BezierSurface self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.DrawTrSurf_BezierSurface_PolesColor(self, *args)


    def Copy(self, *args):
        """
        Copy(DrawTrSurf_BezierSurface self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DrawTrSurf.DrawTrSurf_BezierSurface_Copy(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _DrawTrSurf.DrawTrSurf_BezierSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _DrawTrSurf.DrawTrSurf_BezierSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.DrawTrSurf_BezierSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _DrawTrSurf.delete_DrawTrSurf_BezierSurface
DrawTrSurf_BezierSurface_swigregister = _DrawTrSurf.DrawTrSurf_BezierSurface_swigregister
DrawTrSurf_BezierSurface_swigregister(DrawTrSurf_BezierSurface)

def DrawTrSurf_BezierSurface_get_type_name(*args):
    """
    DrawTrSurf_BezierSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _DrawTrSurf.DrawTrSurf_BezierSurface_get_type_name(*args)

def DrawTrSurf_BezierSurface_get_type_descriptor(*args):
    """
    DrawTrSurf_BezierSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _DrawTrSurf.DrawTrSurf_BezierSurface_get_type_descriptor(*args)

class DrawTrSurf_BSplineSurface(DrawTrSurf_Surface):
    """
    This class defines a drawable BSplineSurface.
    With this class you can draw the control points and the knots
    of the surface.
    You can use the general class Surface from DrawTrSurf too,
    if you just want to sea boundaries and isoparametric curves.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_DrawTrSurf_BSplineSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_DrawTrSurf_BSplineSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(DrawTrSurf_BSplineSurface self, Handle_Geom_BSplineSurface S) -> DrawTrSurf_BSplineSurface
        __init__(DrawTrSurf_BSplineSurface self, Handle_Geom_BSplineSurface S, Draw_Color BoundsColor, Draw_Color IsosColor, Draw_Color PolesColor, Draw_Color KnotsColor, Draw_MarkerShape const KnotsShape, Standard_Integer const KnotsSize, Standard_Boolean const ShowPoles, Standard_Boolean const ShowKnots, Standard_Integer const Discret, Standard_Real const Deflection, Standard_Integer const DrawMode) -> DrawTrSurf_BSplineSurface
        __init__(DrawTrSurf_BSplineSurface self, Handle_Geom_BSplineSurface S, Standard_Integer const NbUIsos, Standard_Integer const NbVIsos, Draw_Color BoundsColor, Draw_Color IsosColor, Draw_Color PolesColor, Draw_Color KnotsColor, Draw_MarkerShape const KnotsShape, Standard_Integer const KnotsSize, Standard_Boolean const ShowPoles, Standard_Boolean const ShowKnots, Standard_Integer const Discret, Standard_Real const Deflection, Standard_Integer const DrawMode) -> DrawTrSurf_BSplineSurface

        Parametric equidistant iso curves are drawn.

        :type S: OCC.wrapper.Geom.Handle_Geom_BSplineSurface
        :type NbUIsos: int
        :type NbVIsos: int
        :type BoundsColor: OCC.wrapper.Draw.Draw_Color
        :type IsosColor: OCC.wrapper.Draw.Draw_Color
        :type PolesColor: OCC.wrapper.Draw.Draw_Color
        :type KnotsColor: OCC.wrapper.Draw.Draw_Color
        :type KnotsShape: OCC.wrapper.Draw.Draw_MarkerShape
        :type KnotsSize: int
        :type ShowPoles: bool
        :type ShowKnots: bool
        :type Discret: int
        :type Deflection: float
        :type DrawMode: int

        """
        this = _DrawTrSurf.new_DrawTrSurf_BSplineSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def DrawOn(self, *args):
        """
        DrawOn(DrawTrSurf_BSplineSurface self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.DrawTrSurf_BSplineSurface_DrawOn(self, *args)


    def ShowPoles(self, *args):
        """ShowPoles(DrawTrSurf_BSplineSurface self)"""
        return _DrawTrSurf.DrawTrSurf_BSplineSurface_ShowPoles(self, *args)


    def ShowKnots(self, *args):
        """ShowKnots(DrawTrSurf_BSplineSurface self)"""
        return _DrawTrSurf.DrawTrSurf_BSplineSurface_ShowKnots(self, *args)


    def ShowIsos(self, *args):
        """
        ShowIsos(DrawTrSurf_BSplineSurface self, Standard_Integer const Nu, Standard_Integer const Nv)

        change the number of isoparametric curves to be drawn.

        :type Nu: int
        :type Nv: int

        """
        return _DrawTrSurf.DrawTrSurf_BSplineSurface_ShowIsos(self, *args)


    def ShowKnotsIsos(self, *args):
        """
        ShowKnotsIsos(DrawTrSurf_BSplineSurface self)

        change the number of isoparametric curves to be drawn.


        """
        return _DrawTrSurf.DrawTrSurf_BSplineSurface_ShowKnotsIsos(self, *args)


    def ClearIsos(self, *args):
        """
        ClearIsos(DrawTrSurf_BSplineSurface self)

        rub out all the isoparametric curves.


        """
        return _DrawTrSurf.DrawTrSurf_BSplineSurface_ClearIsos(self, *args)


    def ClearPoles(self, *args):
        """ClearPoles(DrawTrSurf_BSplineSurface self)"""
        return _DrawTrSurf.DrawTrSurf_BSplineSurface_ClearPoles(self, *args)


    def ClearKnots(self, *args):
        """ClearKnots(DrawTrSurf_BSplineSurface self)"""
        return _DrawTrSurf.DrawTrSurf_BSplineSurface_ClearKnots(self, *args)


    def FindPole(self, *args):
        """
        FindPole(DrawTrSurf_BSplineSurface self, Standard_Real const X, Standard_Real const Y, Draw_Display D, Standard_Real const Prec)

        :type X: float
        :type Y: float
        :type D: OCC.wrapper.Draw.Draw_Display
        :type Prec: float
        :type UIndex: int
        :type VIndex: int

        """
        return _DrawTrSurf.DrawTrSurf_BSplineSurface_FindPole(self, *args)


    def FindUKnot(self, *args):
        """
        FindUKnot(DrawTrSurf_BSplineSurface self, Standard_Real const X, Standard_Real const Y, Draw_Display D, Standard_Real const Prec)

        :type X: float
        :type Y: float
        :type D: OCC.wrapper.Draw.Draw_Display
        :type Prec: float
        :type UIndex: int

        """
        return _DrawTrSurf.DrawTrSurf_BSplineSurface_FindUKnot(self, *args)


    def FindVKnot(self, *args):
        """
        FindVKnot(DrawTrSurf_BSplineSurface self, Standard_Real const X, Standard_Real const Y, Draw_Display D, Standard_Real const Prec)

        :type X: float
        :type Y: float
        :type D: OCC.wrapper.Draw.Draw_Display
        :type Prec: float
        :type VIndex: int

        """
        return _DrawTrSurf.DrawTrSurf_BSplineSurface_FindVKnot(self, *args)


    def SetPolesColor(self, *args):
        """
        SetPolesColor(DrawTrSurf_BSplineSurface self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.DrawTrSurf_BSplineSurface_SetPolesColor(self, *args)


    def SetKnotsColor(self, *args):
        """
        SetKnotsColor(DrawTrSurf_BSplineSurface self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.DrawTrSurf_BSplineSurface_SetKnotsColor(self, *args)


    def SetKnotsShape(self, *args):
        """
        SetKnotsShape(DrawTrSurf_BSplineSurface self, Draw_MarkerShape const Shape)

        :type Shape: OCC.wrapper.Draw.Draw_MarkerShape

        """
        return _DrawTrSurf.DrawTrSurf_BSplineSurface_SetKnotsShape(self, *args)


    def KnotsShape(self, *args):
        """
        KnotsShape(DrawTrSurf_BSplineSurface self) -> Draw_MarkerShape

        :rtype: OCC.wrapper.Draw.Draw_MarkerShape

        """
        return _DrawTrSurf.DrawTrSurf_BSplineSurface_KnotsShape(self, *args)


    def KnotsColor(self, *args):
        """
        KnotsColor(DrawTrSurf_BSplineSurface self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.DrawTrSurf_BSplineSurface_KnotsColor(self, *args)


    def PolesColor(self, *args):
        """
        PolesColor(DrawTrSurf_BSplineSurface self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.DrawTrSurf_BSplineSurface_PolesColor(self, *args)


    def Copy(self, *args):
        """
        Copy(DrawTrSurf_BSplineSurface self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DrawTrSurf.DrawTrSurf_BSplineSurface_Copy(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _DrawTrSurf.DrawTrSurf_BSplineSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _DrawTrSurf.DrawTrSurf_BSplineSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.DrawTrSurf_BSplineSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _DrawTrSurf.delete_DrawTrSurf_BSplineSurface
DrawTrSurf_BSplineSurface_swigregister = _DrawTrSurf.DrawTrSurf_BSplineSurface_swigregister
DrawTrSurf_BSplineSurface_swigregister(DrawTrSurf_BSplineSurface)

def DrawTrSurf_BSplineSurface_get_type_name(*args):
    """
    DrawTrSurf_BSplineSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _DrawTrSurf.DrawTrSurf_BSplineSurface_get_type_name(*args)

def DrawTrSurf_BSplineSurface_get_type_descriptor(*args):
    """
    DrawTrSurf_BSplineSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _DrawTrSurf.DrawTrSurf_BSplineSurface_get_type_descriptor(*args)

class DrawTrSurf_BezierCurve2d(DrawTrSurf_Curve2d):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_DrawTrSurf_BezierCurve2d
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_DrawTrSurf_BezierCurve2d(self) 
            return h


    def __init__(self, *args):
        """
        __init__(DrawTrSurf_BezierCurve2d self, Handle_Geom2d_BezierCurve C) -> DrawTrSurf_BezierCurve2d
        __init__(DrawTrSurf_BezierCurve2d self, Handle_Geom2d_BezierCurve C, Draw_Color CurvColor, Draw_Color PolesColor, Standard_Boolean const ShowPoles, Standard_Integer const Discret) -> DrawTrSurf_BezierCurve2d

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_BezierCurve
        :type CurvColor: OCC.wrapper.Draw.Draw_Color
        :type PolesColor: OCC.wrapper.Draw.Draw_Color
        :type ShowPoles: bool
        :type Discret: int

        """
        this = _DrawTrSurf.new_DrawTrSurf_BezierCurve2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def DrawOn(self, *args):
        """
        DrawOn(DrawTrSurf_BezierCurve2d self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.DrawTrSurf_BezierCurve2d_DrawOn(self, *args)


    def ShowPoles(self, *args):
        """ShowPoles(DrawTrSurf_BezierCurve2d self)"""
        return _DrawTrSurf.DrawTrSurf_BezierCurve2d_ShowPoles(self, *args)


    def ClearPoles(self, *args):
        """ClearPoles(DrawTrSurf_BezierCurve2d self)"""
        return _DrawTrSurf.DrawTrSurf_BezierCurve2d_ClearPoles(self, *args)


    def FindPole(self, *args):
        """
        FindPole(DrawTrSurf_BezierCurve2d self, Standard_Real const X, Standard_Real const Y, Draw_Display D, Standard_Real const Prec)

        Returns in <Index> the index of the first pole  of the
        curve projected by the Display <D> at a distance lower
        than <Prec> from <X,Y>. If no pole  is found  index is
        set to 0, else index is always  greater than the input
        value of index.

        :type X: float
        :type Y: float
        :type D: OCC.wrapper.Draw.Draw_Display
        :type Prec: float
        :type Index: int

        """
        return _DrawTrSurf.DrawTrSurf_BezierCurve2d_FindPole(self, *args)


    def SetPolesColor(self, *args):
        """
        SetPolesColor(DrawTrSurf_BezierCurve2d self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.DrawTrSurf_BezierCurve2d_SetPolesColor(self, *args)


    def PolesColor(self, *args):
        """
        PolesColor(DrawTrSurf_BezierCurve2d self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.DrawTrSurf_BezierCurve2d_PolesColor(self, *args)


    def Copy(self, *args):
        """
        Copy(DrawTrSurf_BezierCurve2d self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DrawTrSurf.DrawTrSurf_BezierCurve2d_Copy(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _DrawTrSurf.DrawTrSurf_BezierCurve2d_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _DrawTrSurf.DrawTrSurf_BezierCurve2d_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.DrawTrSurf_BezierCurve2d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _DrawTrSurf.delete_DrawTrSurf_BezierCurve2d
DrawTrSurf_BezierCurve2d_swigregister = _DrawTrSurf.DrawTrSurf_BezierCurve2d_swigregister
DrawTrSurf_BezierCurve2d_swigregister(DrawTrSurf_BezierCurve2d)

def DrawTrSurf_BezierCurve2d_get_type_name(*args):
    """
    DrawTrSurf_BezierCurve2d_get_type_name() -> char const *

    :rtype: const char *

    """
    return _DrawTrSurf.DrawTrSurf_BezierCurve2d_get_type_name(*args)

def DrawTrSurf_BezierCurve2d_get_type_descriptor(*args):
    """
    DrawTrSurf_BezierCurve2d_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _DrawTrSurf.DrawTrSurf_BezierCurve2d_get_type_descriptor(*args)

class DrawTrSurf_BSplineCurve2d(DrawTrSurf_Curve2d):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_DrawTrSurf_BSplineCurve2d
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_DrawTrSurf_BSplineCurve2d(self) 
            return h


    def __init__(self, *args):
        """
        __init__(DrawTrSurf_BSplineCurve2d self, Handle_Geom2d_BSplineCurve C) -> DrawTrSurf_BSplineCurve2d
        __init__(DrawTrSurf_BSplineCurve2d self, Handle_Geom2d_BSplineCurve C, Draw_Color CurvColor, Draw_Color PolesColor, Draw_Color KnotsColor, Draw_MarkerShape const KnotsShape, Standard_Integer const KnotsSize, Standard_Boolean const ShowPoles, Standard_Boolean const ShowKnots, Standard_Integer const Discret) -> DrawTrSurf_BSplineCurve2d

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_BSplineCurve
        :type CurvColor: OCC.wrapper.Draw.Draw_Color
        :type PolesColor: OCC.wrapper.Draw.Draw_Color
        :type KnotsColor: OCC.wrapper.Draw.Draw_Color
        :type KnotsShape: OCC.wrapper.Draw.Draw_MarkerShape
        :type KnotsSize: int
        :type ShowPoles: bool
        :type ShowKnots: bool
        :type Discret: int

        """
        this = _DrawTrSurf.new_DrawTrSurf_BSplineCurve2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def DrawOn(self, *args):
        """
        DrawOn(DrawTrSurf_BSplineCurve2d self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.DrawTrSurf_BSplineCurve2d_DrawOn(self, *args)


    def ShowPoles(self, *args):
        """ShowPoles(DrawTrSurf_BSplineCurve2d self)"""
        return _DrawTrSurf.DrawTrSurf_BSplineCurve2d_ShowPoles(self, *args)


    def ShowKnots(self, *args):
        """ShowKnots(DrawTrSurf_BSplineCurve2d self)"""
        return _DrawTrSurf.DrawTrSurf_BSplineCurve2d_ShowKnots(self, *args)


    def ClearPoles(self, *args):
        """ClearPoles(DrawTrSurf_BSplineCurve2d self)"""
        return _DrawTrSurf.DrawTrSurf_BSplineCurve2d_ClearPoles(self, *args)


    def ClearKnots(self, *args):
        """ClearKnots(DrawTrSurf_BSplineCurve2d self)"""
        return _DrawTrSurf.DrawTrSurf_BSplineCurve2d_ClearKnots(self, *args)


    def FindPole(self, *args):
        """
        FindPole(DrawTrSurf_BSplineCurve2d self, Standard_Real const X, Standard_Real const Y, Draw_Display D, Standard_Real const Prec)

        Returns in <Index> the index of the first pole  of the
        curve projected by the Display <D> at a distance lower
        than <Prec> from <X,Y>. If no pole  is found  index is
        set to 0, else index is always  greater than the input
        value of index.

        :type X: float
        :type Y: float
        :type D: OCC.wrapper.Draw.Draw_Display
        :type Prec: float
        :type Index: int

        """
        return _DrawTrSurf.DrawTrSurf_BSplineCurve2d_FindPole(self, *args)


    def FindKnot(self, *args):
        """
        FindKnot(DrawTrSurf_BSplineCurve2d self, Standard_Real const X, Standard_Real const Y, Draw_Display D, Standard_Real const Prec)

        :type X: float
        :type Y: float
        :type D: OCC.wrapper.Draw.Draw_Display
        :type Prec: float
        :type Index: int

        """
        return _DrawTrSurf.DrawTrSurf_BSplineCurve2d_FindKnot(self, *args)


    def SetPolesColor(self, *args):
        """
        SetPolesColor(DrawTrSurf_BSplineCurve2d self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.DrawTrSurf_BSplineCurve2d_SetPolesColor(self, *args)


    def SetKnotsColor(self, *args):
        """
        SetKnotsColor(DrawTrSurf_BSplineCurve2d self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.DrawTrSurf_BSplineCurve2d_SetKnotsColor(self, *args)


    def SetKnotsShape(self, *args):
        """
        SetKnotsShape(DrawTrSurf_BSplineCurve2d self, Draw_MarkerShape const Shape)

        :type Shape: OCC.wrapper.Draw.Draw_MarkerShape

        """
        return _DrawTrSurf.DrawTrSurf_BSplineCurve2d_SetKnotsShape(self, *args)


    def KnotsShape(self, *args):
        """
        KnotsShape(DrawTrSurf_BSplineCurve2d self) -> Draw_MarkerShape

        :rtype: OCC.wrapper.Draw.Draw_MarkerShape

        """
        return _DrawTrSurf.DrawTrSurf_BSplineCurve2d_KnotsShape(self, *args)


    def KnotsColor(self, *args):
        """
        KnotsColor(DrawTrSurf_BSplineCurve2d self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.DrawTrSurf_BSplineCurve2d_KnotsColor(self, *args)


    def PolesColor(self, *args):
        """
        PolesColor(DrawTrSurf_BSplineCurve2d self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.DrawTrSurf_BSplineCurve2d_PolesColor(self, *args)


    def Copy(self, *args):
        """
        Copy(DrawTrSurf_BSplineCurve2d self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DrawTrSurf.DrawTrSurf_BSplineCurve2d_Copy(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _DrawTrSurf.DrawTrSurf_BSplineCurve2d_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _DrawTrSurf.DrawTrSurf_BSplineCurve2d_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.DrawTrSurf_BSplineCurve2d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _DrawTrSurf.delete_DrawTrSurf_BSplineCurve2d
DrawTrSurf_BSplineCurve2d_swigregister = _DrawTrSurf.DrawTrSurf_BSplineCurve2d_swigregister
DrawTrSurf_BSplineCurve2d_swigregister(DrawTrSurf_BSplineCurve2d)

def DrawTrSurf_BSplineCurve2d_get_type_name(*args):
    """
    DrawTrSurf_BSplineCurve2d_get_type_name() -> char const *

    :rtype: const char *

    """
    return _DrawTrSurf.DrawTrSurf_BSplineCurve2d_get_type_name(*args)

def DrawTrSurf_BSplineCurve2d_get_type_descriptor(*args):
    """
    DrawTrSurf_BSplineCurve2d_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _DrawTrSurf.DrawTrSurf_BSplineCurve2d_get_type_descriptor(*args)

class DrawTrSurf_Polygon2D(Draw.Draw_Drawable2D):
    """
    Used to display a 2d polygon.

    Optional display of nodes.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_DrawTrSurf_Polygon2D
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_DrawTrSurf_Polygon2D(self) 
            return h


    def __init__(self, *args):
        """
        __init__(DrawTrSurf_Polygon2D self, Handle_Poly_Polygon2D P) -> DrawTrSurf_Polygon2D

        :type P: OCC.wrapper.Poly.Handle_Poly_Polygon2D

        """
        this = _DrawTrSurf.new_DrawTrSurf_Polygon2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Polygon2D(self, *args):
        """
        Polygon2D(DrawTrSurf_Polygon2D self) -> Handle_Poly_Polygon2D

        :rtype: OCC.wrapper.Poly.Handle_Poly_Polygon2D

        """
        return _DrawTrSurf.DrawTrSurf_Polygon2D_Polygon2D(self, *args)


    def ShowNodes(self, *args):
        """
        ShowNodes(DrawTrSurf_Polygon2D self, Standard_Boolean const B)
        ShowNodes(DrawTrSurf_Polygon2D self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.DrawTrSurf_Polygon2D_ShowNodes(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(DrawTrSurf_Polygon2D self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.DrawTrSurf_Polygon2D_DrawOn(self, *args)


    def Copy(self, *args):
        """
        Copy(DrawTrSurf_Polygon2D self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DrawTrSurf.DrawTrSurf_Polygon2D_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(DrawTrSurf_Polygon2D self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DrawTrSurf.DrawTrSurf_Polygon2D_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(DrawTrSurf_Polygon2D self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DrawTrSurf.DrawTrSurf_Polygon2D_Whatis(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _DrawTrSurf.DrawTrSurf_Polygon2D_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _DrawTrSurf.DrawTrSurf_Polygon2D_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.DrawTrSurf_Polygon2D_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _DrawTrSurf.delete_DrawTrSurf_Polygon2D
DrawTrSurf_Polygon2D_swigregister = _DrawTrSurf.DrawTrSurf_Polygon2D_swigregister
DrawTrSurf_Polygon2D_swigregister(DrawTrSurf_Polygon2D)

def DrawTrSurf_Polygon2D_get_type_name(*args):
    """
    DrawTrSurf_Polygon2D_get_type_name() -> char const *

    :rtype: const char *

    """
    return _DrawTrSurf.DrawTrSurf_Polygon2D_get_type_name(*args)

def DrawTrSurf_Polygon2D_get_type_descriptor(*args):
    """
    DrawTrSurf_Polygon2D_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _DrawTrSurf.DrawTrSurf_Polygon2D_get_type_descriptor(*args)

class Handle_DrawTrSurf_BezierCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_DrawTrSurf_BezierCurve self)

        Nullify the handle


        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_DrawTrSurf_BezierCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_DrawTrSurf_BezierCurve self, DrawTrSurf_BezierCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_DrawTrSurf_BezierCurve self, Handle_DrawTrSurf_BezierCurve theHandle) -> Handle_DrawTrSurf_BezierCurve
        assign(Handle_DrawTrSurf_BezierCurve self, DrawTrSurf_BezierCurve thePtr) -> Handle_DrawTrSurf_BezierCurve
        assign(Handle_DrawTrSurf_BezierCurve self, Handle_DrawTrSurf_BezierCurve theHandle) -> Handle_DrawTrSurf_BezierCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_DrawTrSurf_BezierCurve self) -> DrawTrSurf_BezierCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_DrawTrSurf_BezierCurve self) -> DrawTrSurf_BezierCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_DrawTrSurf_BezierCurve self) -> DrawTrSurf_BezierCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve___ref__(self, *args)


    def __hash__(self):
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _DrawTrSurf.new_Handle_DrawTrSurf_BezierCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_DrawTrSurf.Handle_DrawTrSurf_BezierCurve_DownCast)
    __swig_destroy__ = _DrawTrSurf.delete_Handle_DrawTrSurf_BezierCurve

    def DrawOn(self, *args):
        """
        DrawOn(Handle_DrawTrSurf_BezierCurve self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_DrawOn(self, *args)


    def ShowPoles(self, *args):
        """ShowPoles(Handle_DrawTrSurf_BezierCurve self)"""
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_ShowPoles(self, *args)


    def ClearPoles(self, *args):
        """ClearPoles(Handle_DrawTrSurf_BezierCurve self)"""
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_ClearPoles(self, *args)


    def FindPole(self, *args):
        """
        FindPole(Handle_DrawTrSurf_BezierCurve self, Standard_Real const X, Standard_Real const Y, Draw_Display D, Standard_Real const Prec)

        Returns in <Index> the index of the first pole  of the
        curve projected by the Display <D> at a distance lower
        than <Prec> from <X,Y>. If no pole  is found  index is
        set to 0, else index is always  greater than the input
        value of index.

        :type X: float
        :type Y: float
        :type D: OCC.wrapper.Draw.Draw_Display
        :type Prec: float
        :type Index: int

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_FindPole(self, *args)


    def SetPolesColor(self, *args):
        """
        SetPolesColor(Handle_DrawTrSurf_BezierCurve self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_SetPolesColor(self, *args)


    def PolesColor(self, *args):
        """
        PolesColor(Handle_DrawTrSurf_BezierCurve self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_PolesColor(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_DrawTrSurf_BezierCurve self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_Copy(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_DrawTrSurf_BezierCurve self) -> char const *

        :rtype: const char *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetCurve(self, *args):
        """
        GetCurve(Handle_DrawTrSurf_BezierCurve self) -> Handle_Geom_Curve

        :rtype: OCC.wrapper.Geom.Handle_Geom_Curve

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_GetCurve(self, *args)


    def SetColor(self, *args):
        """
        SetColor(Handle_DrawTrSurf_BezierCurve self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_SetColor(self, *args)


    def DisplayOrigin(self, *args):
        """
        DisplayOrigin(Handle_DrawTrSurf_BezierCurve self) -> Standard_Boolean
        DisplayOrigin(Handle_DrawTrSurf_BezierCurve self, Standard_Boolean const V)

        :type V: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_DisplayOrigin(self, *args)


    def ShowCurvature(self, *args):
        """ShowCurvature(Handle_DrawTrSurf_BezierCurve self)"""
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_ShowCurvature(self, *args)


    def ClearCurvature(self, *args):
        """ClearCurvature(Handle_DrawTrSurf_BezierCurve self)"""
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_ClearCurvature(self, *args)


    def SetRadiusMax(self, *args):
        """
        SetRadiusMax(Handle_DrawTrSurf_BezierCurve self, Standard_Real const Radius)

        :type Radius: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_SetRadiusMax(self, *args)


    def SetRadiusRatio(self, *args):
        """
        SetRadiusRatio(Handle_DrawTrSurf_BezierCurve self, Standard_Real const Ratio)

        :type Ratio: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_SetRadiusRatio(self, *args)


    def Color(self, *args):
        """
        Color(Handle_DrawTrSurf_BezierCurve self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_Color(self, *args)


    def RadiusMax(self, *args):
        """
        RadiusMax(Handle_DrawTrSurf_BezierCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_RadiusMax(self, *args)


    def RadiusRatio(self, *args):
        """
        RadiusRatio(Handle_DrawTrSurf_BezierCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_RadiusRatio(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_DrawTrSurf_BezierCurve self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_DrawTrSurf_BezierCurve self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_Whatis(self, *args)


    def DrawCurve2dOn(self, *args):
        """
        DrawCurve2dOn(Handle_DrawTrSurf_BezierCurve self, Adaptor2d_Curve2d C, Draw_Display D)

        Draw a polygon of the curve on the Display

        :type C: OCC.wrapper.Adaptor2d.Adaptor2d_Curve2d
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_DrawCurve2dOn(self, *args)


    def DrawCurveOn(self, *args):
        """
        DrawCurveOn(Handle_DrawTrSurf_BezierCurve self, Adaptor3d_Curve C, Draw_Display D)

        Draw a polygon of the curve on the Display

        :type C: OCC.wrapper.Adaptor3d.Adaptor3d_Curve
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_DrawCurveOn(self, *args)


    def DrawIsoCurveOn(self, *args):
        """
        DrawIsoCurveOn(Handle_DrawTrSurf_BezierCurve self, Adaptor3d_IsoCurve C, GeomAbs_IsoType const T, Standard_Real const P, Standard_Real const F, Standard_Real const L, Draw_Display D)

        Load C  with the specified iso  and Draw a polygon
        of the curve on the Display

        :type C: OCC.wrapper.Adaptor3d.Adaptor3d_IsoCurve
        :type T: OCC.wrapper.GeomAbs.GeomAbs_IsoType
        :type P: float
        :type F: float
        :type L: float
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_DrawIsoCurveOn(self, *args)


    def SetDiscretisation(self, *args):
        """
        SetDiscretisation(Handle_DrawTrSurf_BezierCurve self, Standard_Integer const Discret)

        :type Discret: int

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_SetDiscretisation(self, *args)


    def GetDiscretisation(self, *args):
        """
        GetDiscretisation(Handle_DrawTrSurf_BezierCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_GetDiscretisation(self, *args)


    def SetDeflection(self, *args):
        """
        SetDeflection(Handle_DrawTrSurf_BezierCurve self, Standard_Real const Deflection)

        :type Deflection: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_SetDeflection(self, *args)


    def GetDeflection(self, *args):
        """
        GetDeflection(Handle_DrawTrSurf_BezierCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_GetDeflection(self, *args)


    def SetDrawMode(self, *args):
        """
        SetDrawMode(Handle_DrawTrSurf_BezierCurve self, Standard_Integer const DrawMode)

        :type DrawMode: int

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_SetDrawMode(self, *args)


    def GetDrawMode(self, *args):
        """
        GetDrawMode(Handle_DrawTrSurf_BezierCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_GetDrawMode(self, *args)


    def PickReject(self, *args):
        """
        PickReject(Handle_DrawTrSurf_BezierCurve self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_PickReject(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_DrawTrSurf_BezierCurve self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_DrawTrSurf_BezierCurve self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_DrawTrSurf_BezierCurve self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_DrawTrSurf_BezierCurve self) -> Standard_Boolean
        Visible(Handle_DrawTrSurf_BezierCurve self, Standard_Boolean const V)

        :type V: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_DrawTrSurf_BezierCurve self) -> Standard_Boolean
        Protected(Handle_DrawTrSurf_BezierCurve self, Standard_Boolean const P)

        :type P: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_DrawTrSurf_BezierCurve self) -> Standard_CString
        Name(Handle_DrawTrSurf_BezierCurve self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_DrawTrSurf_BezierCurve self)

        Memory deallocator for transient classes


        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_DrawTrSurf_BezierCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_DrawTrSurf_BezierCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_DrawTrSurf_BezierCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_DrawTrSurf_BezierCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_DrawTrSurf_BezierCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_DrawTrSurf_BezierCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_DrawTrSurf_BezierCurve self)

        Increments the reference counter of this object


        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_DrawTrSurf_BezierCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_DecrementRefCounter(self, *args)

Handle_DrawTrSurf_BezierCurve_swigregister = _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_swigregister
Handle_DrawTrSurf_BezierCurve_swigregister(Handle_DrawTrSurf_BezierCurve)

def Handle_DrawTrSurf_BezierCurve_DownCast(thing):
    return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_DownCast(thing)
Handle_DrawTrSurf_BezierCurve_DownCast = _DrawTrSurf.Handle_DrawTrSurf_BezierCurve_DownCast

class DrawTrSurf_Triangulation2D(Draw.Draw_Drawable2D):
    """
    Used to display a 2d triangulation.

    Display internal edges in blue
    Display boundary edges in red
    Optional display of triangles and nodes indices.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_DrawTrSurf_Triangulation2D
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_DrawTrSurf_Triangulation2D(self) 
            return h


    def __init__(self, *args):
        """
        __init__(DrawTrSurf_Triangulation2D self, Handle_Poly_Triangulation T) -> DrawTrSurf_Triangulation2D

        :type T: OCC.wrapper.Poly.Handle_Poly_Triangulation

        """
        this = _DrawTrSurf.new_DrawTrSurf_Triangulation2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Triangulation(self, *args):
        """
        Triangulation(DrawTrSurf_Triangulation2D self) -> Handle_Poly_Triangulation

        :rtype: OCC.wrapper.Poly.Handle_Poly_Triangulation

        """
        return _DrawTrSurf.DrawTrSurf_Triangulation2D_Triangulation(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(DrawTrSurf_Triangulation2D self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.DrawTrSurf_Triangulation2D_DrawOn(self, *args)


    def Copy(self, *args):
        """
        Copy(DrawTrSurf_Triangulation2D self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DrawTrSurf.DrawTrSurf_Triangulation2D_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(DrawTrSurf_Triangulation2D self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DrawTrSurf.DrawTrSurf_Triangulation2D_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(DrawTrSurf_Triangulation2D self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DrawTrSurf.DrawTrSurf_Triangulation2D_Whatis(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _DrawTrSurf.DrawTrSurf_Triangulation2D_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _DrawTrSurf.DrawTrSurf_Triangulation2D_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.DrawTrSurf_Triangulation2D_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _DrawTrSurf.delete_DrawTrSurf_Triangulation2D
DrawTrSurf_Triangulation2D_swigregister = _DrawTrSurf.DrawTrSurf_Triangulation2D_swigregister
DrawTrSurf_Triangulation2D_swigregister(DrawTrSurf_Triangulation2D)

def DrawTrSurf_Triangulation2D_get_type_name(*args):
    """
    DrawTrSurf_Triangulation2D_get_type_name() -> char const *

    :rtype: const char *

    """
    return _DrawTrSurf.DrawTrSurf_Triangulation2D_get_type_name(*args)

def DrawTrSurf_Triangulation2D_get_type_descriptor(*args):
    """
    DrawTrSurf_Triangulation2D_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _DrawTrSurf.DrawTrSurf_Triangulation2D_get_type_descriptor(*args)

class Handle_DrawTrSurf_Surface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_DrawTrSurf_Surface self)

        Nullify the handle


        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_DrawTrSurf_Surface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_DrawTrSurf_Surface self, DrawTrSurf_Surface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_DrawTrSurf_Surface self, Handle_DrawTrSurf_Surface theHandle) -> Handle_DrawTrSurf_Surface
        assign(Handle_DrawTrSurf_Surface self, DrawTrSurf_Surface thePtr) -> Handle_DrawTrSurf_Surface
        assign(Handle_DrawTrSurf_Surface self, Handle_DrawTrSurf_Surface theHandle) -> Handle_DrawTrSurf_Surface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_DrawTrSurf_Surface self) -> DrawTrSurf_Surface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_DrawTrSurf_Surface self) -> DrawTrSurf_Surface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_DrawTrSurf_Surface self) -> DrawTrSurf_Surface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface___ref__(self, *args)


    def __hash__(self):
        return _DrawTrSurf.Handle_DrawTrSurf_Surface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _DrawTrSurf.Handle_DrawTrSurf_Surface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _DrawTrSurf.new_Handle_DrawTrSurf_Surface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_DrawTrSurf.Handle_DrawTrSurf_Surface_DownCast)
    __swig_destroy__ = _DrawTrSurf.delete_Handle_DrawTrSurf_Surface

    def BoundsColor(self, *args):
        """
        BoundsColor(Handle_DrawTrSurf_Surface self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_BoundsColor(self, *args)


    def ClearIsos(self, *args):
        """
        ClearIsos(Handle_DrawTrSurf_Surface self)

        rub out all the isoparametric curves.


        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_ClearIsos(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(Handle_DrawTrSurf_Surface self, Draw_Display dis)
        DrawOn(Handle_DrawTrSurf_Surface self, Draw_Display dis, Standard_Boolean const Iso)

        Iso = True : Draw the isos, the boundaries, the UVMarker.
        Iso = False: Only Draw the boundary and the UVMarker.

        :type dis: OCC.wrapper.Draw.Draw_Display
        :type Iso: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_DrawOn(self, *args)


    def GetSurface(self, *args):
        """
        GetSurface(Handle_DrawTrSurf_Surface self) -> Handle_Geom_Surface

        :rtype: OCC.wrapper.Geom.Handle_Geom_Surface

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_GetSurface(self, *args)


    def IsosColor(self, *args):
        """
        IsosColor(Handle_DrawTrSurf_Surface self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_IsosColor(self, *args)


    def NbIsos(self, *args):
        """
        NbIsos(Handle_DrawTrSurf_Surface self)

        :type Nu: int
        :type Nb: int

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_NbIsos(self, *args)


    def SetBoundsColor(self, *args):
        """
        SetBoundsColor(Handle_DrawTrSurf_Surface self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_SetBoundsColor(self, *args)


    def SetIsosColor(self, *args):
        """
        SetIsosColor(Handle_DrawTrSurf_Surface self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_SetIsosColor(self, *args)


    def ShowIsos(self, *args):
        """
        ShowIsos(Handle_DrawTrSurf_Surface self, Standard_Integer const Nu, Standard_Integer const Nv)

        change the number of isoparametric curves to be drawn.

        :type Nu: int
        :type Nv: int

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_ShowIsos(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_DrawTrSurf_Surface self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_DrawTrSurf_Surface self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_DrawTrSurf_Surface self, Draw_Interpretor I)

        For variable whatis command.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_Whatis(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_DrawTrSurf_Surface self) -> char const *

        :rtype: const char *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.Handle_DrawTrSurf_Surface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.Handle_DrawTrSurf_Surface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DrawCurve2dOn(self, *args):
        """
        DrawCurve2dOn(Handle_DrawTrSurf_Surface self, Adaptor2d_Curve2d C, Draw_Display D)

        Draw a polygon of the curve on the Display

        :type C: OCC.wrapper.Adaptor2d.Adaptor2d_Curve2d
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_DrawCurve2dOn(self, *args)


    def DrawCurveOn(self, *args):
        """
        DrawCurveOn(Handle_DrawTrSurf_Surface self, Adaptor3d_Curve C, Draw_Display D)

        Draw a polygon of the curve on the Display

        :type C: OCC.wrapper.Adaptor3d.Adaptor3d_Curve
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_DrawCurveOn(self, *args)


    def DrawIsoCurveOn(self, *args):
        """
        DrawIsoCurveOn(Handle_DrawTrSurf_Surface self, Adaptor3d_IsoCurve C, GeomAbs_IsoType const T, Standard_Real const P, Standard_Real const F, Standard_Real const L, Draw_Display D)

        Load C  with the specified iso  and Draw a polygon
        of the curve on the Display

        :type C: OCC.wrapper.Adaptor3d.Adaptor3d_IsoCurve
        :type T: OCC.wrapper.GeomAbs.GeomAbs_IsoType
        :type P: float
        :type F: float
        :type L: float
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_DrawIsoCurveOn(self, *args)


    def SetDiscretisation(self, *args):
        """
        SetDiscretisation(Handle_DrawTrSurf_Surface self, Standard_Integer const Discret)

        :type Discret: int

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_SetDiscretisation(self, *args)


    def GetDiscretisation(self, *args):
        """
        GetDiscretisation(Handle_DrawTrSurf_Surface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_GetDiscretisation(self, *args)


    def SetDeflection(self, *args):
        """
        SetDeflection(Handle_DrawTrSurf_Surface self, Standard_Real const Deflection)

        :type Deflection: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_SetDeflection(self, *args)


    def GetDeflection(self, *args):
        """
        GetDeflection(Handle_DrawTrSurf_Surface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_GetDeflection(self, *args)


    def SetDrawMode(self, *args):
        """
        SetDrawMode(Handle_DrawTrSurf_Surface self, Standard_Integer const DrawMode)

        :type DrawMode: int

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_SetDrawMode(self, *args)


    def GetDrawMode(self, *args):
        """
        GetDrawMode(Handle_DrawTrSurf_Surface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_GetDrawMode(self, *args)


    def PickReject(self, *args):
        """
        PickReject(Handle_DrawTrSurf_Surface self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_PickReject(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_DrawTrSurf_Surface self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_DrawTrSurf_Surface self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_DrawTrSurf_Surface self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_DrawTrSurf_Surface self) -> Standard_Boolean
        Visible(Handle_DrawTrSurf_Surface self, Standard_Boolean const V)

        :type V: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_DrawTrSurf_Surface self) -> Standard_Boolean
        Protected(Handle_DrawTrSurf_Surface self, Standard_Boolean const P)

        :type P: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_DrawTrSurf_Surface self) -> Standard_CString
        Name(Handle_DrawTrSurf_Surface self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_DrawTrSurf_Surface self)

        Memory deallocator for transient classes


        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_DrawTrSurf_Surface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_DrawTrSurf_Surface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_DrawTrSurf_Surface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_DrawTrSurf_Surface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_DrawTrSurf_Surface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_DrawTrSurf_Surface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_DrawTrSurf_Surface self)

        Increments the reference counter of this object


        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_DrawTrSurf_Surface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Surface_DecrementRefCounter(self, *args)

Handle_DrawTrSurf_Surface_swigregister = _DrawTrSurf.Handle_DrawTrSurf_Surface_swigregister
Handle_DrawTrSurf_Surface_swigregister(Handle_DrawTrSurf_Surface)

def Handle_DrawTrSurf_Surface_DownCast(thing):
    return _DrawTrSurf.Handle_DrawTrSurf_Surface_DownCast(thing)
Handle_DrawTrSurf_Surface_DownCast = _DrawTrSurf.Handle_DrawTrSurf_Surface_DownCast

class DrawTrSurf_Triangulation(Draw.Draw_Drawable3D):
    """
    Used to display a triangulation.

    Display internal edges in blue
    Display boundary edges in red
    Optional display of triangles and nodes indices.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_DrawTrSurf_Triangulation
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_DrawTrSurf_Triangulation(self) 
            return h


    def __init__(self, *args):
        """
        __init__(DrawTrSurf_Triangulation self, Handle_Poly_Triangulation T) -> DrawTrSurf_Triangulation

        :type T: OCC.wrapper.Poly.Handle_Poly_Triangulation

        """
        this = _DrawTrSurf.new_DrawTrSurf_Triangulation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Triangulation(self, *args):
        """
        Triangulation(DrawTrSurf_Triangulation self) -> Handle_Poly_Triangulation

        :rtype: OCC.wrapper.Poly.Handle_Poly_Triangulation

        """
        return _DrawTrSurf.DrawTrSurf_Triangulation_Triangulation(self, *args)


    def ShowNodes(self, *args):
        """
        ShowNodes(DrawTrSurf_Triangulation self, Standard_Boolean const B)
        ShowNodes(DrawTrSurf_Triangulation self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.DrawTrSurf_Triangulation_ShowNodes(self, *args)


    def ShowTriangles(self, *args):
        """
        ShowTriangles(DrawTrSurf_Triangulation self, Standard_Boolean const B)
        ShowTriangles(DrawTrSurf_Triangulation self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.DrawTrSurf_Triangulation_ShowTriangles(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(DrawTrSurf_Triangulation self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.DrawTrSurf_Triangulation_DrawOn(self, *args)


    def Copy(self, *args):
        """
        Copy(DrawTrSurf_Triangulation self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DrawTrSurf.DrawTrSurf_Triangulation_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(DrawTrSurf_Triangulation self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DrawTrSurf.DrawTrSurf_Triangulation_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(DrawTrSurf_Triangulation self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DrawTrSurf.DrawTrSurf_Triangulation_Whatis(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _DrawTrSurf.DrawTrSurf_Triangulation_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _DrawTrSurf.DrawTrSurf_Triangulation_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.DrawTrSurf_Triangulation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _DrawTrSurf.delete_DrawTrSurf_Triangulation
DrawTrSurf_Triangulation_swigregister = _DrawTrSurf.DrawTrSurf_Triangulation_swigregister
DrawTrSurf_Triangulation_swigregister(DrawTrSurf_Triangulation)

def DrawTrSurf_Triangulation_get_type_name(*args):
    """
    DrawTrSurf_Triangulation_get_type_name() -> char const *

    :rtype: const char *

    """
    return _DrawTrSurf.DrawTrSurf_Triangulation_get_type_name(*args)

def DrawTrSurf_Triangulation_get_type_descriptor(*args):
    """
    DrawTrSurf_Triangulation_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _DrawTrSurf.DrawTrSurf_Triangulation_get_type_descriptor(*args)

class Handle_DrawTrSurf_Triangulation(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_DrawTrSurf_Triangulation self)

        Nullify the handle


        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_DrawTrSurf_Triangulation self) -> bool

        Check for being null

        :rtype: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_DrawTrSurf_Triangulation self, DrawTrSurf_Triangulation thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_DrawTrSurf_Triangulation self, Handle_DrawTrSurf_Triangulation theHandle) -> Handle_DrawTrSurf_Triangulation
        assign(Handle_DrawTrSurf_Triangulation self, DrawTrSurf_Triangulation thePtr) -> Handle_DrawTrSurf_Triangulation
        assign(Handle_DrawTrSurf_Triangulation self, Handle_DrawTrSurf_Triangulation theHandle) -> Handle_DrawTrSurf_Triangulation

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_DrawTrSurf_Triangulation self) -> DrawTrSurf_Triangulation

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_DrawTrSurf_Triangulation self) -> DrawTrSurf_Triangulation

        Member access operator (note non-const)

        :rtype: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_DrawTrSurf_Triangulation self) -> DrawTrSurf_Triangulation

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation___ref__(self, *args)


    def __hash__(self):
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _DrawTrSurf.Handle_DrawTrSurf_Triangulation___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _DrawTrSurf.new_Handle_DrawTrSurf_Triangulation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_DrawTrSurf.Handle_DrawTrSurf_Triangulation_DownCast)
    __swig_destroy__ = _DrawTrSurf.delete_Handle_DrawTrSurf_Triangulation

    def Triangulation(self, *args):
        """
        Triangulation(Handle_DrawTrSurf_Triangulation self) -> Handle_Poly_Triangulation

        :rtype: OCC.wrapper.Poly.Handle_Poly_Triangulation

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation_Triangulation(self, *args)


    def ShowNodes(self, *args):
        """
        ShowNodes(Handle_DrawTrSurf_Triangulation self, Standard_Boolean const B)
        ShowNodes(Handle_DrawTrSurf_Triangulation self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation_ShowNodes(self, *args)


    def ShowTriangles(self, *args):
        """
        ShowTriangles(Handle_DrawTrSurf_Triangulation self, Standard_Boolean const B)
        ShowTriangles(Handle_DrawTrSurf_Triangulation self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation_ShowTriangles(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(Handle_DrawTrSurf_Triangulation self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation_DrawOn(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_DrawTrSurf_Triangulation self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_DrawTrSurf_Triangulation self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_DrawTrSurf_Triangulation self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation_Whatis(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_DrawTrSurf_Triangulation self) -> char const *

        :rtype: const char *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.Handle_DrawTrSurf_Triangulation_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.Handle_DrawTrSurf_Triangulation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PickReject(self, *args):
        """
        PickReject(Handle_DrawTrSurf_Triangulation self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation_PickReject(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_DrawTrSurf_Triangulation self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_DrawTrSurf_Triangulation self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_DrawTrSurf_Triangulation self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_DrawTrSurf_Triangulation self) -> Standard_Boolean
        Visible(Handle_DrawTrSurf_Triangulation self, Standard_Boolean const V)

        :type V: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_DrawTrSurf_Triangulation self) -> Standard_Boolean
        Protected(Handle_DrawTrSurf_Triangulation self, Standard_Boolean const P)

        :type P: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_DrawTrSurf_Triangulation self) -> Standard_CString
        Name(Handle_DrawTrSurf_Triangulation self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_DrawTrSurf_Triangulation self)

        Memory deallocator for transient classes


        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_DrawTrSurf_Triangulation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_DrawTrSurf_Triangulation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_DrawTrSurf_Triangulation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_DrawTrSurf_Triangulation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_DrawTrSurf_Triangulation self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_DrawTrSurf_Triangulation self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_DrawTrSurf_Triangulation self)

        Increments the reference counter of this object


        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_DrawTrSurf_Triangulation self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation_DecrementRefCounter(self, *args)

Handle_DrawTrSurf_Triangulation_swigregister = _DrawTrSurf.Handle_DrawTrSurf_Triangulation_swigregister
Handle_DrawTrSurf_Triangulation_swigregister(Handle_DrawTrSurf_Triangulation)

def Handle_DrawTrSurf_Triangulation_DownCast(thing):
    return _DrawTrSurf.Handle_DrawTrSurf_Triangulation_DownCast(thing)
Handle_DrawTrSurf_Triangulation_DownCast = _DrawTrSurf.Handle_DrawTrSurf_Triangulation_DownCast

class Handle_DrawTrSurf_BezierSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_DrawTrSurf_BezierSurface self)

        Nullify the handle


        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_DrawTrSurf_BezierSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_DrawTrSurf_BezierSurface self, DrawTrSurf_BezierSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_DrawTrSurf_BezierSurface self, Handle_DrawTrSurf_BezierSurface theHandle) -> Handle_DrawTrSurf_BezierSurface
        assign(Handle_DrawTrSurf_BezierSurface self, DrawTrSurf_BezierSurface thePtr) -> Handle_DrawTrSurf_BezierSurface
        assign(Handle_DrawTrSurf_BezierSurface self, Handle_DrawTrSurf_BezierSurface theHandle) -> Handle_DrawTrSurf_BezierSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_DrawTrSurf_BezierSurface self) -> DrawTrSurf_BezierSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_DrawTrSurf_BezierSurface self) -> DrawTrSurf_BezierSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_DrawTrSurf_BezierSurface self) -> DrawTrSurf_BezierSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface___ref__(self, *args)


    def __hash__(self):
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _DrawTrSurf.new_Handle_DrawTrSurf_BezierSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_DrawTrSurf.Handle_DrawTrSurf_BezierSurface_DownCast)
    __swig_destroy__ = _DrawTrSurf.delete_Handle_DrawTrSurf_BezierSurface

    def DrawOn(self, *args):
        """
        DrawOn(Handle_DrawTrSurf_BezierSurface self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_DrawOn(self, *args)


    def ShowPoles(self, *args):
        """ShowPoles(Handle_DrawTrSurf_BezierSurface self)"""
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_ShowPoles(self, *args)


    def ClearPoles(self, *args):
        """ClearPoles(Handle_DrawTrSurf_BezierSurface self)"""
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_ClearPoles(self, *args)


    def FindPole(self, *args):
        """
        FindPole(Handle_DrawTrSurf_BezierSurface self, Standard_Real const X, Standard_Real const Y, Draw_Display D, Standard_Real const Prec)

        :type X: float
        :type Y: float
        :type D: OCC.wrapper.Draw.Draw_Display
        :type Prec: float
        :type UIndex: int
        :type VIndex: int

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_FindPole(self, *args)


    def SetPolesColor(self, *args):
        """
        SetPolesColor(Handle_DrawTrSurf_BezierSurface self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_SetPolesColor(self, *args)


    def PolesColor(self, *args):
        """
        PolesColor(Handle_DrawTrSurf_BezierSurface self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_PolesColor(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_DrawTrSurf_BezierSurface self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_Copy(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_DrawTrSurf_BezierSurface self) -> char const *

        :rtype: const char *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def BoundsColor(self, *args):
        """
        BoundsColor(Handle_DrawTrSurf_BezierSurface self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_BoundsColor(self, *args)


    def ClearIsos(self, *args):
        """
        ClearIsos(Handle_DrawTrSurf_BezierSurface self)

        rub out all the isoparametric curves.


        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_ClearIsos(self, *args)


    def GetSurface(self, *args):
        """
        GetSurface(Handle_DrawTrSurf_BezierSurface self) -> Handle_Geom_Surface

        :rtype: OCC.wrapper.Geom.Handle_Geom_Surface

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_GetSurface(self, *args)


    def IsosColor(self, *args):
        """
        IsosColor(Handle_DrawTrSurf_BezierSurface self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_IsosColor(self, *args)


    def NbIsos(self, *args):
        """
        NbIsos(Handle_DrawTrSurf_BezierSurface self)

        :type Nu: int
        :type Nb: int

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_NbIsos(self, *args)


    def SetBoundsColor(self, *args):
        """
        SetBoundsColor(Handle_DrawTrSurf_BezierSurface self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_SetBoundsColor(self, *args)


    def SetIsosColor(self, *args):
        """
        SetIsosColor(Handle_DrawTrSurf_BezierSurface self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_SetIsosColor(self, *args)


    def ShowIsos(self, *args):
        """
        ShowIsos(Handle_DrawTrSurf_BezierSurface self, Standard_Integer const Nu, Standard_Integer const Nv)

        change the number of isoparametric curves to be drawn.

        :type Nu: int
        :type Nv: int

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_ShowIsos(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_DrawTrSurf_BezierSurface self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_DrawTrSurf_BezierSurface self, Draw_Interpretor I)

        For variable whatis command.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_Whatis(self, *args)


    def DrawCurve2dOn(self, *args):
        """
        DrawCurve2dOn(Handle_DrawTrSurf_BezierSurface self, Adaptor2d_Curve2d C, Draw_Display D)

        Draw a polygon of the curve on the Display

        :type C: OCC.wrapper.Adaptor2d.Adaptor2d_Curve2d
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_DrawCurve2dOn(self, *args)


    def DrawCurveOn(self, *args):
        """
        DrawCurveOn(Handle_DrawTrSurf_BezierSurface self, Adaptor3d_Curve C, Draw_Display D)

        Draw a polygon of the curve on the Display

        :type C: OCC.wrapper.Adaptor3d.Adaptor3d_Curve
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_DrawCurveOn(self, *args)


    def DrawIsoCurveOn(self, *args):
        """
        DrawIsoCurveOn(Handle_DrawTrSurf_BezierSurface self, Adaptor3d_IsoCurve C, GeomAbs_IsoType const T, Standard_Real const P, Standard_Real const F, Standard_Real const L, Draw_Display D)

        Load C  with the specified iso  and Draw a polygon
        of the curve on the Display

        :type C: OCC.wrapper.Adaptor3d.Adaptor3d_IsoCurve
        :type T: OCC.wrapper.GeomAbs.GeomAbs_IsoType
        :type P: float
        :type F: float
        :type L: float
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_DrawIsoCurveOn(self, *args)


    def SetDiscretisation(self, *args):
        """
        SetDiscretisation(Handle_DrawTrSurf_BezierSurface self, Standard_Integer const Discret)

        :type Discret: int

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_SetDiscretisation(self, *args)


    def GetDiscretisation(self, *args):
        """
        GetDiscretisation(Handle_DrawTrSurf_BezierSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_GetDiscretisation(self, *args)


    def SetDeflection(self, *args):
        """
        SetDeflection(Handle_DrawTrSurf_BezierSurface self, Standard_Real const Deflection)

        :type Deflection: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_SetDeflection(self, *args)


    def GetDeflection(self, *args):
        """
        GetDeflection(Handle_DrawTrSurf_BezierSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_GetDeflection(self, *args)


    def SetDrawMode(self, *args):
        """
        SetDrawMode(Handle_DrawTrSurf_BezierSurface self, Standard_Integer const DrawMode)

        :type DrawMode: int

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_SetDrawMode(self, *args)


    def GetDrawMode(self, *args):
        """
        GetDrawMode(Handle_DrawTrSurf_BezierSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_GetDrawMode(self, *args)


    def PickReject(self, *args):
        """
        PickReject(Handle_DrawTrSurf_BezierSurface self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_PickReject(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_DrawTrSurf_BezierSurface self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_DrawTrSurf_BezierSurface self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_DrawTrSurf_BezierSurface self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_DrawTrSurf_BezierSurface self) -> Standard_Boolean
        Visible(Handle_DrawTrSurf_BezierSurface self, Standard_Boolean const V)

        :type V: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_DrawTrSurf_BezierSurface self) -> Standard_Boolean
        Protected(Handle_DrawTrSurf_BezierSurface self, Standard_Boolean const P)

        :type P: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_DrawTrSurf_BezierSurface self) -> Standard_CString
        Name(Handle_DrawTrSurf_BezierSurface self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_DrawTrSurf_BezierSurface self)

        Memory deallocator for transient classes


        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_DrawTrSurf_BezierSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_DrawTrSurf_BezierSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_DrawTrSurf_BezierSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_DrawTrSurf_BezierSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_DrawTrSurf_BezierSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_DrawTrSurf_BezierSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_DrawTrSurf_BezierSurface self)

        Increments the reference counter of this object


        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_DrawTrSurf_BezierSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_DecrementRefCounter(self, *args)

Handle_DrawTrSurf_BezierSurface_swigregister = _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_swigregister
Handle_DrawTrSurf_BezierSurface_swigregister(Handle_DrawTrSurf_BezierSurface)

def Handle_DrawTrSurf_BezierSurface_DownCast(thing):
    return _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_DownCast(thing)
Handle_DrawTrSurf_BezierSurface_DownCast = _DrawTrSurf.Handle_DrawTrSurf_BezierSurface_DownCast

class Handle_DrawTrSurf_BSplineSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_DrawTrSurf_BSplineSurface self)

        Nullify the handle


        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_DrawTrSurf_BSplineSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_DrawTrSurf_BSplineSurface self, DrawTrSurf_BSplineSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_DrawTrSurf_BSplineSurface self, Handle_DrawTrSurf_BSplineSurface theHandle) -> Handle_DrawTrSurf_BSplineSurface
        assign(Handle_DrawTrSurf_BSplineSurface self, DrawTrSurf_BSplineSurface thePtr) -> Handle_DrawTrSurf_BSplineSurface
        assign(Handle_DrawTrSurf_BSplineSurface self, Handle_DrawTrSurf_BSplineSurface theHandle) -> Handle_DrawTrSurf_BSplineSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_DrawTrSurf_BSplineSurface self) -> DrawTrSurf_BSplineSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_DrawTrSurf_BSplineSurface self) -> DrawTrSurf_BSplineSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_DrawTrSurf_BSplineSurface self) -> DrawTrSurf_BSplineSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface___ref__(self, *args)


    def __hash__(self):
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _DrawTrSurf.new_Handle_DrawTrSurf_BSplineSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_DownCast)
    __swig_destroy__ = _DrawTrSurf.delete_Handle_DrawTrSurf_BSplineSurface

    def DrawOn(self, *args):
        """
        DrawOn(Handle_DrawTrSurf_BSplineSurface self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_DrawOn(self, *args)


    def ShowPoles(self, *args):
        """ShowPoles(Handle_DrawTrSurf_BSplineSurface self)"""
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_ShowPoles(self, *args)


    def ShowKnots(self, *args):
        """ShowKnots(Handle_DrawTrSurf_BSplineSurface self)"""
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_ShowKnots(self, *args)


    def ShowIsos(self, *args):
        """
        ShowIsos(Handle_DrawTrSurf_BSplineSurface self, Standard_Integer const Nu, Standard_Integer const Nv)

        change the number of isoparametric curves to be drawn.

        :type Nu: int
        :type Nv: int

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_ShowIsos(self, *args)


    def ShowKnotsIsos(self, *args):
        """
        ShowKnotsIsos(Handle_DrawTrSurf_BSplineSurface self)

        change the number of isoparametric curves to be drawn.


        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_ShowKnotsIsos(self, *args)


    def ClearIsos(self, *args):
        """
        ClearIsos(Handle_DrawTrSurf_BSplineSurface self)

        rub out all the isoparametric curves.


        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_ClearIsos(self, *args)


    def ClearPoles(self, *args):
        """ClearPoles(Handle_DrawTrSurf_BSplineSurface self)"""
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_ClearPoles(self, *args)


    def ClearKnots(self, *args):
        """ClearKnots(Handle_DrawTrSurf_BSplineSurface self)"""
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_ClearKnots(self, *args)


    def FindPole(self, *args):
        """
        FindPole(Handle_DrawTrSurf_BSplineSurface self, Standard_Real const X, Standard_Real const Y, Draw_Display D, Standard_Real const Prec)

        :type X: float
        :type Y: float
        :type D: OCC.wrapper.Draw.Draw_Display
        :type Prec: float
        :type UIndex: int
        :type VIndex: int

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_FindPole(self, *args)


    def FindUKnot(self, *args):
        """
        FindUKnot(Handle_DrawTrSurf_BSplineSurface self, Standard_Real const X, Standard_Real const Y, Draw_Display D, Standard_Real const Prec)

        :type X: float
        :type Y: float
        :type D: OCC.wrapper.Draw.Draw_Display
        :type Prec: float
        :type UIndex: int

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_FindUKnot(self, *args)


    def FindVKnot(self, *args):
        """
        FindVKnot(Handle_DrawTrSurf_BSplineSurface self, Standard_Real const X, Standard_Real const Y, Draw_Display D, Standard_Real const Prec)

        :type X: float
        :type Y: float
        :type D: OCC.wrapper.Draw.Draw_Display
        :type Prec: float
        :type VIndex: int

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_FindVKnot(self, *args)


    def SetPolesColor(self, *args):
        """
        SetPolesColor(Handle_DrawTrSurf_BSplineSurface self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_SetPolesColor(self, *args)


    def SetKnotsColor(self, *args):
        """
        SetKnotsColor(Handle_DrawTrSurf_BSplineSurface self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_SetKnotsColor(self, *args)


    def SetKnotsShape(self, *args):
        """
        SetKnotsShape(Handle_DrawTrSurf_BSplineSurface self, Draw_MarkerShape const Shape)

        :type Shape: OCC.wrapper.Draw.Draw_MarkerShape

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_SetKnotsShape(self, *args)


    def KnotsShape(self, *args):
        """
        KnotsShape(Handle_DrawTrSurf_BSplineSurface self) -> Draw_MarkerShape

        :rtype: OCC.wrapper.Draw.Draw_MarkerShape

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_KnotsShape(self, *args)


    def KnotsColor(self, *args):
        """
        KnotsColor(Handle_DrawTrSurf_BSplineSurface self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_KnotsColor(self, *args)


    def PolesColor(self, *args):
        """
        PolesColor(Handle_DrawTrSurf_BSplineSurface self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_PolesColor(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_DrawTrSurf_BSplineSurface self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_Copy(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_DrawTrSurf_BSplineSurface self) -> char const *

        :rtype: const char *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def BoundsColor(self, *args):
        """
        BoundsColor(Handle_DrawTrSurf_BSplineSurface self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_BoundsColor(self, *args)


    def GetSurface(self, *args):
        """
        GetSurface(Handle_DrawTrSurf_BSplineSurface self) -> Handle_Geom_Surface

        :rtype: OCC.wrapper.Geom.Handle_Geom_Surface

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_GetSurface(self, *args)


    def IsosColor(self, *args):
        """
        IsosColor(Handle_DrawTrSurf_BSplineSurface self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_IsosColor(self, *args)


    def NbIsos(self, *args):
        """
        NbIsos(Handle_DrawTrSurf_BSplineSurface self)

        :type Nu: int
        :type Nb: int

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_NbIsos(self, *args)


    def SetBoundsColor(self, *args):
        """
        SetBoundsColor(Handle_DrawTrSurf_BSplineSurface self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_SetBoundsColor(self, *args)


    def SetIsosColor(self, *args):
        """
        SetIsosColor(Handle_DrawTrSurf_BSplineSurface self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_SetIsosColor(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_DrawTrSurf_BSplineSurface self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_DrawTrSurf_BSplineSurface self, Draw_Interpretor I)

        For variable whatis command.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_Whatis(self, *args)


    def DrawCurve2dOn(self, *args):
        """
        DrawCurve2dOn(Handle_DrawTrSurf_BSplineSurface self, Adaptor2d_Curve2d C, Draw_Display D)

        Draw a polygon of the curve on the Display

        :type C: OCC.wrapper.Adaptor2d.Adaptor2d_Curve2d
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_DrawCurve2dOn(self, *args)


    def DrawCurveOn(self, *args):
        """
        DrawCurveOn(Handle_DrawTrSurf_BSplineSurface self, Adaptor3d_Curve C, Draw_Display D)

        Draw a polygon of the curve on the Display

        :type C: OCC.wrapper.Adaptor3d.Adaptor3d_Curve
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_DrawCurveOn(self, *args)


    def DrawIsoCurveOn(self, *args):
        """
        DrawIsoCurveOn(Handle_DrawTrSurf_BSplineSurface self, Adaptor3d_IsoCurve C, GeomAbs_IsoType const T, Standard_Real const P, Standard_Real const F, Standard_Real const L, Draw_Display D)

        Load C  with the specified iso  and Draw a polygon
        of the curve on the Display

        :type C: OCC.wrapper.Adaptor3d.Adaptor3d_IsoCurve
        :type T: OCC.wrapper.GeomAbs.GeomAbs_IsoType
        :type P: float
        :type F: float
        :type L: float
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_DrawIsoCurveOn(self, *args)


    def SetDiscretisation(self, *args):
        """
        SetDiscretisation(Handle_DrawTrSurf_BSplineSurface self, Standard_Integer const Discret)

        :type Discret: int

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_SetDiscretisation(self, *args)


    def GetDiscretisation(self, *args):
        """
        GetDiscretisation(Handle_DrawTrSurf_BSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_GetDiscretisation(self, *args)


    def SetDeflection(self, *args):
        """
        SetDeflection(Handle_DrawTrSurf_BSplineSurface self, Standard_Real const Deflection)

        :type Deflection: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_SetDeflection(self, *args)


    def GetDeflection(self, *args):
        """
        GetDeflection(Handle_DrawTrSurf_BSplineSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_GetDeflection(self, *args)


    def SetDrawMode(self, *args):
        """
        SetDrawMode(Handle_DrawTrSurf_BSplineSurface self, Standard_Integer const DrawMode)

        :type DrawMode: int

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_SetDrawMode(self, *args)


    def GetDrawMode(self, *args):
        """
        GetDrawMode(Handle_DrawTrSurf_BSplineSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_GetDrawMode(self, *args)


    def PickReject(self, *args):
        """
        PickReject(Handle_DrawTrSurf_BSplineSurface self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_PickReject(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_DrawTrSurf_BSplineSurface self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_DrawTrSurf_BSplineSurface self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_DrawTrSurf_BSplineSurface self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_DrawTrSurf_BSplineSurface self) -> Standard_Boolean
        Visible(Handle_DrawTrSurf_BSplineSurface self, Standard_Boolean const V)

        :type V: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_DrawTrSurf_BSplineSurface self) -> Standard_Boolean
        Protected(Handle_DrawTrSurf_BSplineSurface self, Standard_Boolean const P)

        :type P: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_DrawTrSurf_BSplineSurface self) -> Standard_CString
        Name(Handle_DrawTrSurf_BSplineSurface self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_DrawTrSurf_BSplineSurface self)

        Memory deallocator for transient classes


        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_DrawTrSurf_BSplineSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_DrawTrSurf_BSplineSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_DrawTrSurf_BSplineSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_DrawTrSurf_BSplineSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_DrawTrSurf_BSplineSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_DrawTrSurf_BSplineSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_DrawTrSurf_BSplineSurface self)

        Increments the reference counter of this object


        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_DrawTrSurf_BSplineSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_DecrementRefCounter(self, *args)

Handle_DrawTrSurf_BSplineSurface_swigregister = _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_swigregister
Handle_DrawTrSurf_BSplineSurface_swigregister(Handle_DrawTrSurf_BSplineSurface)

def Handle_DrawTrSurf_BSplineSurface_DownCast(thing):
    return _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_DownCast(thing)
Handle_DrawTrSurf_BSplineSurface_DownCast = _DrawTrSurf.Handle_DrawTrSurf_BSplineSurface_DownCast

class DrawTrSurf_(object):
    """
    This  package supports the   display of parametric
    curves and surfaces.

    The  Drawable deferred  classes is  inherited from
    the Drawable3D  class  from  the package Draw,  it
    adds methods to  draw 3D Curves  and  Curves on 3D
    Surfaces.

    The classes Curve Curve2d and Surface are drawable
    and  can be  used  to  draw a   single  curve from
    packages Geom or Geom2d or a surface from Geom.

    The  Triangulation  and Polygon  from the  package
    Poly are also supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Set(*args):
        """
        Set(Standard_CString const Name, gp_Pnt G)
        Set(Standard_CString const Name, gp_Pnt2d G)
        Set(Standard_CString const Name, Handle_Geom_Geometry G, Standard_Boolean const isSenseMarker)
        Set(Standard_CString const Name, Handle_Geom2d_Curve C, Standard_Boolean const isSenseMarker)
        Set(Standard_CString const Name, Handle_Poly_Triangulation T)
        Set(Standard_CString const Name, Handle_Poly_Polygon3D P)
        Set(Standard_CString const Name, Handle_Poly_Polygon2D P)

        Sets <P> in the variable <Name>.  Overwrite the
        variable if already set.

        :type Name: OCC.wrapper.Standard.Standard_CString
        :type P: OCC.wrapper.Poly.Handle_Poly_Polygon2D

        """
        return _DrawTrSurf.DrawTrSurf__Set(*args)

    Set = staticmethod(Set)

    def Get(*args):
        """
        Get(Standard_CString & Name) -> Handle_Geom_Geometry

        Get  the variable <S>.  Returns a  null  handle if
        none, and print a warning message.

        :type Name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Geom.Handle_Geom_Geometry

        """
        return _DrawTrSurf.DrawTrSurf__Get(*args)

    Get = staticmethod(Get)

    def GetPoint(*args):
        """
        GetPoint(Standard_CString & Name, gp_Pnt P) -> Standard_Boolean

        Gets the variable. Returns False if none and print
        a warning message.

        :type Name: OCC.wrapper.Standard.Standard_CString
        :type P: OCC.wrapper.gp.gp_Pnt
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.DrawTrSurf__GetPoint(*args)

    GetPoint = staticmethod(GetPoint)

    def GetPoint2d(*args):
        """
        GetPoint2d(Standard_CString & Name, gp_Pnt2d P) -> Standard_Boolean

        Gets the variable. Returns False if none and print
        a warning message.

        :type Name: OCC.wrapper.Standard.Standard_CString
        :type P: OCC.wrapper.gp.gp_Pnt2d
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.DrawTrSurf__GetPoint2d(*args)

    GetPoint2d = staticmethod(GetPoint2d)

    def GetCurve(*args):
        """
        GetCurve(Standard_CString & Name) -> Handle_Geom_Curve

        Get  the variable <S>.  Returns a  null  handle if
        none, and print a warning message.

        :type Name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Geom.Handle_Geom_Curve

        """
        return _DrawTrSurf.DrawTrSurf__GetCurve(*args)

    GetCurve = staticmethod(GetCurve)

    def GetBezierCurve(*args):
        """
        GetBezierCurve(Standard_CString & Name) -> Handle_Geom_BezierCurve

        Get  the variable <S>.  Returns a  null  handle if
        none, and print a warning message.

        :type Name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Geom.Handle_Geom_BezierCurve

        """
        return _DrawTrSurf.DrawTrSurf__GetBezierCurve(*args)

    GetBezierCurve = staticmethod(GetBezierCurve)

    def GetBSplineCurve(*args):
        """
        GetBSplineCurve(Standard_CString & Name) -> Handle_Geom_BSplineCurve

        Get  the variable <S>.  Returns a  null  handle if
        none, and print a warning message.

        :type Name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineCurve

        """
        return _DrawTrSurf.DrawTrSurf__GetBSplineCurve(*args)

    GetBSplineCurve = staticmethod(GetBSplineCurve)

    def GetCurve2d(*args):
        """
        GetCurve2d(Standard_CString & Name) -> Handle_Geom2d_Curve

        Get  the variable <S>.  Returns a  null  handle if
        none, and print a warning message.

        :type Name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _DrawTrSurf.DrawTrSurf__GetCurve2d(*args)

    GetCurve2d = staticmethod(GetCurve2d)

    def GetBezierCurve2d(*args):
        """
        GetBezierCurve2d(Standard_CString & Name) -> Handle_Geom2d_BezierCurve

        Get  the variable <S>.  Returns a  null  handle if
        none, and print a warning message.

        :type Name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_BezierCurve

        """
        return _DrawTrSurf.DrawTrSurf__GetBezierCurve2d(*args)

    GetBezierCurve2d = staticmethod(GetBezierCurve2d)

    def GetBSplineCurve2d(*args):
        """
        GetBSplineCurve2d(Standard_CString & Name) -> Handle_Geom2d_BSplineCurve

        Get  the variable <S>.  Returns a  null  handle if
        none, and print a warning message.

        :type Name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_BSplineCurve

        """
        return _DrawTrSurf.DrawTrSurf__GetBSplineCurve2d(*args)

    GetBSplineCurve2d = staticmethod(GetBSplineCurve2d)

    def GetSurface(*args):
        """
        GetSurface(Standard_CString & Name) -> Handle_Geom_Surface

        Get  the variable <S>.  Returns a  null  handle if
        none, and print a warning message.

        :type Name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Geom.Handle_Geom_Surface

        """
        return _DrawTrSurf.DrawTrSurf__GetSurface(*args)

    GetSurface = staticmethod(GetSurface)

    def GetBezierSurface(*args):
        """
        GetBezierSurface(Standard_CString & Name) -> Handle_Geom_BezierSurface

        Get  the variable <S>.  Returns a  null  handle if
        none, and print a warning message.

        :type Name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Geom.Handle_Geom_BezierSurface

        """
        return _DrawTrSurf.DrawTrSurf__GetBezierSurface(*args)

    GetBezierSurface = staticmethod(GetBezierSurface)

    def GetBSplineSurface(*args):
        """
        GetBSplineSurface(Standard_CString & Name) -> Handle_Geom_BSplineSurface

        Get  the variable <S>.  Returns a  null  handle if
        none, and print a warning message.

        :type Name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineSurface

        """
        return _DrawTrSurf.DrawTrSurf__GetBSplineSurface(*args)

    GetBSplineSurface = staticmethod(GetBSplineSurface)

    def GetTriangulation(*args):
        """
        GetTriangulation(Standard_CString & Name) -> Handle_Poly_Triangulation

        Get  the variable <S>.  Returns a  null  handle if
        none, and print a warning message.

        :type Name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Poly.Handle_Poly_Triangulation

        """
        return _DrawTrSurf.DrawTrSurf__GetTriangulation(*args)

    GetTriangulation = staticmethod(GetTriangulation)

    def GetPolygon3D(*args):
        """
        GetPolygon3D(Standard_CString & Name) -> Handle_Poly_Polygon3D

        Get  the variable <S>.  Returns a  null  handle if
        none, and print a warning message.

        :type Name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Poly.Handle_Poly_Polygon3D

        """
        return _DrawTrSurf.DrawTrSurf__GetPolygon3D(*args)

    GetPolygon3D = staticmethod(GetPolygon3D)

    def GetPolygon2D(*args):
        """
        GetPolygon2D(Standard_CString & Name) -> Handle_Poly_Polygon2D

        Get  the variable <S>.  Returns a  null  handle if
        none, and print a warning message.

        :type Name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Poly.Handle_Poly_Polygon2D

        """
        return _DrawTrSurf.DrawTrSurf__GetPolygon2D(*args)

    GetPolygon2D = staticmethod(GetPolygon2D)

    def BasicCommands(*args):
        """
        BasicCommands(Draw_Interpretor I)

        defines display commands.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DrawTrSurf.DrawTrSurf__BasicCommands(*args)

    BasicCommands = staticmethod(BasicCommands)

    def __init__(self):
        """
        This  package supports the   display of parametric
        curves and surfaces.

        The  Drawable deferred  classes is  inherited from
        the Drawable3D  class  from  the package Draw,  it
        adds methods to  draw 3D Curves  and  Curves on 3D
        Surfaces.

        The classes Curve Curve2d and Surface are drawable
        and  can be  used  to  draw a   single  curve from
        packages Geom or Geom2d or a surface from Geom.

        The  Triangulation  and Polygon  from the  package
        Poly are also supported.
        """
        this = _DrawTrSurf.new_DrawTrSurf_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DrawTrSurf.delete_DrawTrSurf_
DrawTrSurf__swigregister = _DrawTrSurf.DrawTrSurf__swigregister
DrawTrSurf__swigregister(DrawTrSurf_)

def DrawTrSurf__Set(*args):
    """
    Set(Standard_CString const Name, gp_Pnt G)
    Set(Standard_CString const Name, gp_Pnt2d G)
    Set(Standard_CString const Name, Handle_Geom_Geometry G, Standard_Boolean const isSenseMarker)
    Set(Standard_CString const Name, Handle_Geom2d_Curve C, Standard_Boolean const isSenseMarker)
    Set(Standard_CString const Name, Handle_Poly_Triangulation T)
    Set(Standard_CString const Name, Handle_Poly_Polygon3D P)
    DrawTrSurf__Set(Standard_CString const Name, Handle_Poly_Polygon2D P)

    Sets <P> in the variable <Name>.  Overwrite the
    variable if already set.

    :type Name: OCC.wrapper.Standard.Standard_CString
    :type P: OCC.wrapper.Poly.Handle_Poly_Polygon2D

    """
    return _DrawTrSurf.DrawTrSurf__Set(*args)

def DrawTrSurf__Get(*args):
    """
    DrawTrSurf__Get(Standard_CString & Name) -> Handle_Geom_Geometry

    Get  the variable <S>.  Returns a  null  handle if
    none, and print a warning message.

    :type Name: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Geom.Handle_Geom_Geometry

    """
    return _DrawTrSurf.DrawTrSurf__Get(*args)

def DrawTrSurf__GetPoint(*args):
    """
    DrawTrSurf__GetPoint(Standard_CString & Name, gp_Pnt P) -> Standard_Boolean

    Gets the variable. Returns False if none and print
    a warning message.

    :type Name: OCC.wrapper.Standard.Standard_CString
    :type P: OCC.wrapper.gp.gp_Pnt
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _DrawTrSurf.DrawTrSurf__GetPoint(*args)

def DrawTrSurf__GetPoint2d(*args):
    """
    DrawTrSurf__GetPoint2d(Standard_CString & Name, gp_Pnt2d P) -> Standard_Boolean

    Gets the variable. Returns False if none and print
    a warning message.

    :type Name: OCC.wrapper.Standard.Standard_CString
    :type P: OCC.wrapper.gp.gp_Pnt2d
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _DrawTrSurf.DrawTrSurf__GetPoint2d(*args)

def DrawTrSurf__GetCurve(*args):
    """
    DrawTrSurf__GetCurve(Standard_CString & Name) -> Handle_Geom_Curve

    Get  the variable <S>.  Returns a  null  handle if
    none, and print a warning message.

    :type Name: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Geom.Handle_Geom_Curve

    """
    return _DrawTrSurf.DrawTrSurf__GetCurve(*args)

def DrawTrSurf__GetBezierCurve(*args):
    """
    DrawTrSurf__GetBezierCurve(Standard_CString & Name) -> Handle_Geom_BezierCurve

    Get  the variable <S>.  Returns a  null  handle if
    none, and print a warning message.

    :type Name: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Geom.Handle_Geom_BezierCurve

    """
    return _DrawTrSurf.DrawTrSurf__GetBezierCurve(*args)

def DrawTrSurf__GetBSplineCurve(*args):
    """
    DrawTrSurf__GetBSplineCurve(Standard_CString & Name) -> Handle_Geom_BSplineCurve

    Get  the variable <S>.  Returns a  null  handle if
    none, and print a warning message.

    :type Name: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineCurve

    """
    return _DrawTrSurf.DrawTrSurf__GetBSplineCurve(*args)

def DrawTrSurf__GetCurve2d(*args):
    """
    DrawTrSurf__GetCurve2d(Standard_CString & Name) -> Handle_Geom2d_Curve

    Get  the variable <S>.  Returns a  null  handle if
    none, and print a warning message.

    :type Name: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

    """
    return _DrawTrSurf.DrawTrSurf__GetCurve2d(*args)

def DrawTrSurf__GetBezierCurve2d(*args):
    """
    DrawTrSurf__GetBezierCurve2d(Standard_CString & Name) -> Handle_Geom2d_BezierCurve

    Get  the variable <S>.  Returns a  null  handle if
    none, and print a warning message.

    :type Name: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_BezierCurve

    """
    return _DrawTrSurf.DrawTrSurf__GetBezierCurve2d(*args)

def DrawTrSurf__GetBSplineCurve2d(*args):
    """
    DrawTrSurf__GetBSplineCurve2d(Standard_CString & Name) -> Handle_Geom2d_BSplineCurve

    Get  the variable <S>.  Returns a  null  handle if
    none, and print a warning message.

    :type Name: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_BSplineCurve

    """
    return _DrawTrSurf.DrawTrSurf__GetBSplineCurve2d(*args)

def DrawTrSurf__GetSurface(*args):
    """
    DrawTrSurf__GetSurface(Standard_CString & Name) -> Handle_Geom_Surface

    Get  the variable <S>.  Returns a  null  handle if
    none, and print a warning message.

    :type Name: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Geom.Handle_Geom_Surface

    """
    return _DrawTrSurf.DrawTrSurf__GetSurface(*args)

def DrawTrSurf__GetBezierSurface(*args):
    """
    DrawTrSurf__GetBezierSurface(Standard_CString & Name) -> Handle_Geom_BezierSurface

    Get  the variable <S>.  Returns a  null  handle if
    none, and print a warning message.

    :type Name: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Geom.Handle_Geom_BezierSurface

    """
    return _DrawTrSurf.DrawTrSurf__GetBezierSurface(*args)

def DrawTrSurf__GetBSplineSurface(*args):
    """
    DrawTrSurf__GetBSplineSurface(Standard_CString & Name) -> Handle_Geom_BSplineSurface

    Get  the variable <S>.  Returns a  null  handle if
    none, and print a warning message.

    :type Name: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineSurface

    """
    return _DrawTrSurf.DrawTrSurf__GetBSplineSurface(*args)

def DrawTrSurf__GetTriangulation(*args):
    """
    DrawTrSurf__GetTriangulation(Standard_CString & Name) -> Handle_Poly_Triangulation

    Get  the variable <S>.  Returns a  null  handle if
    none, and print a warning message.

    :type Name: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Poly.Handle_Poly_Triangulation

    """
    return _DrawTrSurf.DrawTrSurf__GetTriangulation(*args)

def DrawTrSurf__GetPolygon3D(*args):
    """
    DrawTrSurf__GetPolygon3D(Standard_CString & Name) -> Handle_Poly_Polygon3D

    Get  the variable <S>.  Returns a  null  handle if
    none, and print a warning message.

    :type Name: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Poly.Handle_Poly_Polygon3D

    """
    return _DrawTrSurf.DrawTrSurf__GetPolygon3D(*args)

def DrawTrSurf__GetPolygon2D(*args):
    """
    DrawTrSurf__GetPolygon2D(Standard_CString & Name) -> Handle_Poly_Polygon2D

    Get  the variable <S>.  Returns a  null  handle if
    none, and print a warning message.

    :type Name: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Poly.Handle_Poly_Polygon2D

    """
    return _DrawTrSurf.DrawTrSurf__GetPolygon2D(*args)

def DrawTrSurf__BasicCommands(*args):
    """
    DrawTrSurf__BasicCommands(Draw_Interpretor I)

    defines display commands.

    :type I: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _DrawTrSurf.DrawTrSurf__BasicCommands(*args)

class DrawTrSurf_Polygon3D(Draw.Draw_Drawable3D):
    """
    Used to display a 3d polygon.

    Optional display of nodes.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_DrawTrSurf_Polygon3D
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_DrawTrSurf_Polygon3D(self) 
            return h


    def __init__(self, *args):
        """
        __init__(DrawTrSurf_Polygon3D self, Handle_Poly_Polygon3D P) -> DrawTrSurf_Polygon3D

        :type P: OCC.wrapper.Poly.Handle_Poly_Polygon3D

        """
        this = _DrawTrSurf.new_DrawTrSurf_Polygon3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Polygon3D(self, *args):
        """
        Polygon3D(DrawTrSurf_Polygon3D self) -> Handle_Poly_Polygon3D

        :rtype: OCC.wrapper.Poly.Handle_Poly_Polygon3D

        """
        return _DrawTrSurf.DrawTrSurf_Polygon3D_Polygon3D(self, *args)


    def ShowNodes(self, *args):
        """
        ShowNodes(DrawTrSurf_Polygon3D self, Standard_Boolean const B)
        ShowNodes(DrawTrSurf_Polygon3D self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.DrawTrSurf_Polygon3D_ShowNodes(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(DrawTrSurf_Polygon3D self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.DrawTrSurf_Polygon3D_DrawOn(self, *args)


    def Copy(self, *args):
        """
        Copy(DrawTrSurf_Polygon3D self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DrawTrSurf.DrawTrSurf_Polygon3D_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(DrawTrSurf_Polygon3D self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DrawTrSurf.DrawTrSurf_Polygon3D_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(DrawTrSurf_Polygon3D self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DrawTrSurf.DrawTrSurf_Polygon3D_Whatis(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _DrawTrSurf.DrawTrSurf_Polygon3D_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _DrawTrSurf.DrawTrSurf_Polygon3D_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.DrawTrSurf_Polygon3D_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _DrawTrSurf.delete_DrawTrSurf_Polygon3D
DrawTrSurf_Polygon3D_swigregister = _DrawTrSurf.DrawTrSurf_Polygon3D_swigregister
DrawTrSurf_Polygon3D_swigregister(DrawTrSurf_Polygon3D)

def DrawTrSurf_Polygon3D_get_type_name(*args):
    """
    DrawTrSurf_Polygon3D_get_type_name() -> char const *

    :rtype: const char *

    """
    return _DrawTrSurf.DrawTrSurf_Polygon3D_get_type_name(*args)

def DrawTrSurf_Polygon3D_get_type_descriptor(*args):
    """
    DrawTrSurf_Polygon3D_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _DrawTrSurf.DrawTrSurf_Polygon3D_get_type_descriptor(*args)

class DrawTrSurf_Point(Draw.Draw_Drawable3D):
    """A drawable point."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_DrawTrSurf_Point
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_DrawTrSurf_Point(self) 
            return h


    def __init__(self, *args):
        """
        __init__(DrawTrSurf_Point self, gp_Pnt P, Draw_MarkerShape const Shape, Draw_Color Col) -> DrawTrSurf_Point
        __init__(DrawTrSurf_Point self, gp_Pnt2d P, Draw_MarkerShape const Shape, Draw_Color Col) -> DrawTrSurf_Point

        :type P: OCC.wrapper.gp.gp_Pnt2d
        :type Shape: OCC.wrapper.Draw.Draw_MarkerShape
        :type Col: OCC.wrapper.Draw.Draw_Color

        """
        this = _DrawTrSurf.new_DrawTrSurf_Point(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def DrawOn(self, *args):
        """
        DrawOn(DrawTrSurf_Point self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.DrawTrSurf_Point_DrawOn(self, *args)


    def Is3D(self, *args):
        """
        Is3D(DrawTrSurf_Point self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.DrawTrSurf_Point_Is3D(self, *args)


    def Point(self, *args):
        """
        Point(DrawTrSurf_Point self) -> gp_Pnt
        Point(DrawTrSurf_Point self, gp_Pnt P)

        :type P: OCC.wrapper.gp.gp_Pnt

        """
        return _DrawTrSurf.DrawTrSurf_Point_Point(self, *args)


    def Point2d(self, *args):
        """
        Point2d(DrawTrSurf_Point self) -> gp_Pnt2d
        Point2d(DrawTrSurf_Point self, gp_Pnt2d P)

        :type P: OCC.wrapper.gp.gp_Pnt2d

        """
        return _DrawTrSurf.DrawTrSurf_Point_Point2d(self, *args)


    def Color(self, *args):
        """
        Color(DrawTrSurf_Point self, Draw_Color aColor)
        Color(DrawTrSurf_Point self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.DrawTrSurf_Point_Color(self, *args)


    def Shape(self, *args):
        """
        Shape(DrawTrSurf_Point self, Draw_MarkerShape const S)
        Shape(DrawTrSurf_Point self) -> Draw_MarkerShape

        :rtype: OCC.wrapper.Draw.Draw_MarkerShape

        """
        return _DrawTrSurf.DrawTrSurf_Point_Shape(self, *args)


    def Copy(self, *args):
        """
        Copy(DrawTrSurf_Point self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DrawTrSurf.DrawTrSurf_Point_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(DrawTrSurf_Point self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DrawTrSurf.DrawTrSurf_Point_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(DrawTrSurf_Point self, Draw_Interpretor I)

        For variable whatis command.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DrawTrSurf.DrawTrSurf_Point_Whatis(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _DrawTrSurf.DrawTrSurf_Point_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _DrawTrSurf.DrawTrSurf_Point_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.DrawTrSurf_Point_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _DrawTrSurf.delete_DrawTrSurf_Point
DrawTrSurf_Point_swigregister = _DrawTrSurf.DrawTrSurf_Point_swigregister
DrawTrSurf_Point_swigregister(DrawTrSurf_Point)

def DrawTrSurf_Point_get_type_name(*args):
    """
    DrawTrSurf_Point_get_type_name() -> char const *

    :rtype: const char *

    """
    return _DrawTrSurf.DrawTrSurf_Point_get_type_name(*args)

def DrawTrSurf_Point_get_type_descriptor(*args):
    """
    DrawTrSurf_Point_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _DrawTrSurf.DrawTrSurf_Point_get_type_descriptor(*args)

class Handle_DrawTrSurf_BSplineCurve2d(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_DrawTrSurf_BSplineCurve2d self)

        Nullify the handle


        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_DrawTrSurf_BSplineCurve2d self) -> bool

        Check for being null

        :rtype: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_DrawTrSurf_BSplineCurve2d self, DrawTrSurf_BSplineCurve2d thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_DrawTrSurf_BSplineCurve2d self, Handle_DrawTrSurf_BSplineCurve2d theHandle) -> Handle_DrawTrSurf_BSplineCurve2d
        assign(Handle_DrawTrSurf_BSplineCurve2d self, DrawTrSurf_BSplineCurve2d thePtr) -> Handle_DrawTrSurf_BSplineCurve2d
        assign(Handle_DrawTrSurf_BSplineCurve2d self, Handle_DrawTrSurf_BSplineCurve2d theHandle) -> Handle_DrawTrSurf_BSplineCurve2d

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_DrawTrSurf_BSplineCurve2d self) -> DrawTrSurf_BSplineCurve2d

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_DrawTrSurf_BSplineCurve2d self) -> DrawTrSurf_BSplineCurve2d

        Member access operator (note non-const)

        :rtype: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_DrawTrSurf_BSplineCurve2d self) -> DrawTrSurf_BSplineCurve2d

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d___ref__(self, *args)


    def __hash__(self):
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _DrawTrSurf.new_Handle_DrawTrSurf_BSplineCurve2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_DownCast)
    __swig_destroy__ = _DrawTrSurf.delete_Handle_DrawTrSurf_BSplineCurve2d

    def DrawOn(self, *args):
        """
        DrawOn(Handle_DrawTrSurf_BSplineCurve2d self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_DrawOn(self, *args)


    def ShowPoles(self, *args):
        """ShowPoles(Handle_DrawTrSurf_BSplineCurve2d self)"""
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_ShowPoles(self, *args)


    def ShowKnots(self, *args):
        """ShowKnots(Handle_DrawTrSurf_BSplineCurve2d self)"""
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_ShowKnots(self, *args)


    def ClearPoles(self, *args):
        """ClearPoles(Handle_DrawTrSurf_BSplineCurve2d self)"""
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_ClearPoles(self, *args)


    def ClearKnots(self, *args):
        """ClearKnots(Handle_DrawTrSurf_BSplineCurve2d self)"""
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_ClearKnots(self, *args)


    def FindPole(self, *args):
        """
        FindPole(Handle_DrawTrSurf_BSplineCurve2d self, Standard_Real const X, Standard_Real const Y, Draw_Display D, Standard_Real const Prec)

        Returns in <Index> the index of the first pole  of the
        curve projected by the Display <D> at a distance lower
        than <Prec> from <X,Y>. If no pole  is found  index is
        set to 0, else index is always  greater than the input
        value of index.

        :type X: float
        :type Y: float
        :type D: OCC.wrapper.Draw.Draw_Display
        :type Prec: float
        :type Index: int

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_FindPole(self, *args)


    def FindKnot(self, *args):
        """
        FindKnot(Handle_DrawTrSurf_BSplineCurve2d self, Standard_Real const X, Standard_Real const Y, Draw_Display D, Standard_Real const Prec)

        :type X: float
        :type Y: float
        :type D: OCC.wrapper.Draw.Draw_Display
        :type Prec: float
        :type Index: int

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_FindKnot(self, *args)


    def SetPolesColor(self, *args):
        """
        SetPolesColor(Handle_DrawTrSurf_BSplineCurve2d self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_SetPolesColor(self, *args)


    def SetKnotsColor(self, *args):
        """
        SetKnotsColor(Handle_DrawTrSurf_BSplineCurve2d self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_SetKnotsColor(self, *args)


    def SetKnotsShape(self, *args):
        """
        SetKnotsShape(Handle_DrawTrSurf_BSplineCurve2d self, Draw_MarkerShape const Shape)

        :type Shape: OCC.wrapper.Draw.Draw_MarkerShape

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_SetKnotsShape(self, *args)


    def KnotsShape(self, *args):
        """
        KnotsShape(Handle_DrawTrSurf_BSplineCurve2d self) -> Draw_MarkerShape

        :rtype: OCC.wrapper.Draw.Draw_MarkerShape

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_KnotsShape(self, *args)


    def KnotsColor(self, *args):
        """
        KnotsColor(Handle_DrawTrSurf_BSplineCurve2d self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_KnotsColor(self, *args)


    def PolesColor(self, *args):
        """
        PolesColor(Handle_DrawTrSurf_BSplineCurve2d self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_PolesColor(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_DrawTrSurf_BSplineCurve2d self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_Copy(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_DrawTrSurf_BSplineCurve2d self) -> char const *

        :rtype: const char *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetCurve(self, *args):
        """
        GetCurve(Handle_DrawTrSurf_BSplineCurve2d self) -> Handle_Geom2d_Curve

        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_GetCurve(self, *args)


    def SetColor(self, *args):
        """
        SetColor(Handle_DrawTrSurf_BSplineCurve2d self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_SetColor(self, *args)


    def ShowCurvature(self, *args):
        """ShowCurvature(Handle_DrawTrSurf_BSplineCurve2d self)"""
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_ShowCurvature(self, *args)


    def ClearCurvature(self, *args):
        """ClearCurvature(Handle_DrawTrSurf_BSplineCurve2d self)"""
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_ClearCurvature(self, *args)


    def SetRadiusMax(self, *args):
        """
        SetRadiusMax(Handle_DrawTrSurf_BSplineCurve2d self, Standard_Real const Radius)

        :type Radius: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_SetRadiusMax(self, *args)


    def SetRadiusRatio(self, *args):
        """
        SetRadiusRatio(Handle_DrawTrSurf_BSplineCurve2d self, Standard_Real const Ratio)

        :type Ratio: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_SetRadiusRatio(self, *args)


    def Color(self, *args):
        """
        Color(Handle_DrawTrSurf_BSplineCurve2d self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_Color(self, *args)


    def RadiusMax(self, *args):
        """
        RadiusMax(Handle_DrawTrSurf_BSplineCurve2d self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_RadiusMax(self, *args)


    def RadiusRatio(self, *args):
        """
        RadiusRatio(Handle_DrawTrSurf_BSplineCurve2d self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_RadiusRatio(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_DrawTrSurf_BSplineCurve2d self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_Dump(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_DrawTrSurf_BSplineCurve2d self) -> Standard_Boolean

        Returns False.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_Is3D(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_DrawTrSurf_BSplineCurve2d self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_Whatis(self, *args)


    def DrawCurve2dOn(self, *args):
        """
        DrawCurve2dOn(Handle_DrawTrSurf_BSplineCurve2d self, Adaptor2d_Curve2d C, Draw_Display D)

        Draw a polygon of the curve on the Display

        :type C: OCC.wrapper.Adaptor2d.Adaptor2d_Curve2d
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_DrawCurve2dOn(self, *args)


    def DrawCurveOn(self, *args):
        """
        DrawCurveOn(Handle_DrawTrSurf_BSplineCurve2d self, Adaptor3d_Curve C, Draw_Display D)

        Draw a polygon of the curve on the Display

        :type C: OCC.wrapper.Adaptor3d.Adaptor3d_Curve
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_DrawCurveOn(self, *args)


    def DrawIsoCurveOn(self, *args):
        """
        DrawIsoCurveOn(Handle_DrawTrSurf_BSplineCurve2d self, Adaptor3d_IsoCurve C, GeomAbs_IsoType const T, Standard_Real const P, Standard_Real const F, Standard_Real const L, Draw_Display D)

        Load C  with the specified iso  and Draw a polygon
        of the curve on the Display

        :type C: OCC.wrapper.Adaptor3d.Adaptor3d_IsoCurve
        :type T: OCC.wrapper.GeomAbs.GeomAbs_IsoType
        :type P: float
        :type F: float
        :type L: float
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_DrawIsoCurveOn(self, *args)


    def SetDiscretisation(self, *args):
        """
        SetDiscretisation(Handle_DrawTrSurf_BSplineCurve2d self, Standard_Integer const Discret)

        :type Discret: int

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_SetDiscretisation(self, *args)


    def GetDiscretisation(self, *args):
        """
        GetDiscretisation(Handle_DrawTrSurf_BSplineCurve2d self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_GetDiscretisation(self, *args)


    def SetDeflection(self, *args):
        """
        SetDeflection(Handle_DrawTrSurf_BSplineCurve2d self, Standard_Real const Deflection)

        :type Deflection: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_SetDeflection(self, *args)


    def GetDeflection(self, *args):
        """
        GetDeflection(Handle_DrawTrSurf_BSplineCurve2d self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_GetDeflection(self, *args)


    def SetDrawMode(self, *args):
        """
        SetDrawMode(Handle_DrawTrSurf_BSplineCurve2d self, Standard_Integer const DrawMode)

        :type DrawMode: int

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_SetDrawMode(self, *args)


    def GetDrawMode(self, *args):
        """
        GetDrawMode(Handle_DrawTrSurf_BSplineCurve2d self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_GetDrawMode(self, *args)


    def PickReject(self, *args):
        """
        PickReject(Handle_DrawTrSurf_BSplineCurve2d self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_PickReject(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_DrawTrSurf_BSplineCurve2d self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_DrawTrSurf_BSplineCurve2d self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_DrawTrSurf_BSplineCurve2d self) -> Standard_Boolean
        Visible(Handle_DrawTrSurf_BSplineCurve2d self, Standard_Boolean const V)

        :type V: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_DrawTrSurf_BSplineCurve2d self) -> Standard_Boolean
        Protected(Handle_DrawTrSurf_BSplineCurve2d self, Standard_Boolean const P)

        :type P: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_DrawTrSurf_BSplineCurve2d self) -> Standard_CString
        Name(Handle_DrawTrSurf_BSplineCurve2d self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_DrawTrSurf_BSplineCurve2d self)

        Memory deallocator for transient classes


        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_DrawTrSurf_BSplineCurve2d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_DrawTrSurf_BSplineCurve2d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_DrawTrSurf_BSplineCurve2d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_DrawTrSurf_BSplineCurve2d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_DrawTrSurf_BSplineCurve2d self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_DrawTrSurf_BSplineCurve2d self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_DrawTrSurf_BSplineCurve2d self)

        Increments the reference counter of this object


        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_DrawTrSurf_BSplineCurve2d self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_DecrementRefCounter(self, *args)

Handle_DrawTrSurf_BSplineCurve2d_swigregister = _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_swigregister
Handle_DrawTrSurf_BSplineCurve2d_swigregister(Handle_DrawTrSurf_BSplineCurve2d)

def Handle_DrawTrSurf_BSplineCurve2d_DownCast(thing):
    return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_DownCast(thing)
Handle_DrawTrSurf_BSplineCurve2d_DownCast = _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve2d_DownCast

class Handle_DrawTrSurf_Curve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_DrawTrSurf_Curve self)

        Nullify the handle


        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_DrawTrSurf_Curve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_DrawTrSurf_Curve self, DrawTrSurf_Curve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_DrawTrSurf_Curve self, Handle_DrawTrSurf_Curve theHandle) -> Handle_DrawTrSurf_Curve
        assign(Handle_DrawTrSurf_Curve self, DrawTrSurf_Curve thePtr) -> Handle_DrawTrSurf_Curve
        assign(Handle_DrawTrSurf_Curve self, Handle_DrawTrSurf_Curve theHandle) -> Handle_DrawTrSurf_Curve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_DrawTrSurf_Curve self) -> DrawTrSurf_Curve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_DrawTrSurf_Curve self) -> DrawTrSurf_Curve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_DrawTrSurf_Curve self) -> DrawTrSurf_Curve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve___ref__(self, *args)


    def __hash__(self):
        return _DrawTrSurf.Handle_DrawTrSurf_Curve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _DrawTrSurf.Handle_DrawTrSurf_Curve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _DrawTrSurf.new_Handle_DrawTrSurf_Curve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_DrawTrSurf.Handle_DrawTrSurf_Curve_DownCast)
    __swig_destroy__ = _DrawTrSurf.delete_Handle_DrawTrSurf_Curve

    def DrawOn(self, *args):
        """
        DrawOn(Handle_DrawTrSurf_Curve self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_DrawOn(self, *args)


    def GetCurve(self, *args):
        """
        GetCurve(Handle_DrawTrSurf_Curve self) -> Handle_Geom_Curve

        :rtype: OCC.wrapper.Geom.Handle_Geom_Curve

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_GetCurve(self, *args)


    def SetColor(self, *args):
        """
        SetColor(Handle_DrawTrSurf_Curve self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_SetColor(self, *args)


    def DisplayOrigin(self, *args):
        """
        DisplayOrigin(Handle_DrawTrSurf_Curve self) -> Standard_Boolean
        DisplayOrigin(Handle_DrawTrSurf_Curve self, Standard_Boolean const V)

        :type V: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_DisplayOrigin(self, *args)


    def ShowCurvature(self, *args):
        """ShowCurvature(Handle_DrawTrSurf_Curve self)"""
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_ShowCurvature(self, *args)


    def ClearCurvature(self, *args):
        """ClearCurvature(Handle_DrawTrSurf_Curve self)"""
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_ClearCurvature(self, *args)


    def SetRadiusMax(self, *args):
        """
        SetRadiusMax(Handle_DrawTrSurf_Curve self, Standard_Real const Radius)

        :type Radius: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_SetRadiusMax(self, *args)


    def SetRadiusRatio(self, *args):
        """
        SetRadiusRatio(Handle_DrawTrSurf_Curve self, Standard_Real const Ratio)

        :type Ratio: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_SetRadiusRatio(self, *args)


    def Color(self, *args):
        """
        Color(Handle_DrawTrSurf_Curve self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_Color(self, *args)


    def RadiusMax(self, *args):
        """
        RadiusMax(Handle_DrawTrSurf_Curve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_RadiusMax(self, *args)


    def RadiusRatio(self, *args):
        """
        RadiusRatio(Handle_DrawTrSurf_Curve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_RadiusRatio(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_DrawTrSurf_Curve self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_DrawTrSurf_Curve self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_DrawTrSurf_Curve self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_Whatis(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_DrawTrSurf_Curve self) -> char const *

        :rtype: const char *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.Handle_DrawTrSurf_Curve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.Handle_DrawTrSurf_Curve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DrawCurve2dOn(self, *args):
        """
        DrawCurve2dOn(Handle_DrawTrSurf_Curve self, Adaptor2d_Curve2d C, Draw_Display D)

        Draw a polygon of the curve on the Display

        :type C: OCC.wrapper.Adaptor2d.Adaptor2d_Curve2d
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_DrawCurve2dOn(self, *args)


    def DrawCurveOn(self, *args):
        """
        DrawCurveOn(Handle_DrawTrSurf_Curve self, Adaptor3d_Curve C, Draw_Display D)

        Draw a polygon of the curve on the Display

        :type C: OCC.wrapper.Adaptor3d.Adaptor3d_Curve
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_DrawCurveOn(self, *args)


    def DrawIsoCurveOn(self, *args):
        """
        DrawIsoCurveOn(Handle_DrawTrSurf_Curve self, Adaptor3d_IsoCurve C, GeomAbs_IsoType const T, Standard_Real const P, Standard_Real const F, Standard_Real const L, Draw_Display D)

        Load C  with the specified iso  and Draw a polygon
        of the curve on the Display

        :type C: OCC.wrapper.Adaptor3d.Adaptor3d_IsoCurve
        :type T: OCC.wrapper.GeomAbs.GeomAbs_IsoType
        :type P: float
        :type F: float
        :type L: float
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_DrawIsoCurveOn(self, *args)


    def SetDiscretisation(self, *args):
        """
        SetDiscretisation(Handle_DrawTrSurf_Curve self, Standard_Integer const Discret)

        :type Discret: int

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_SetDiscretisation(self, *args)


    def GetDiscretisation(self, *args):
        """
        GetDiscretisation(Handle_DrawTrSurf_Curve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_GetDiscretisation(self, *args)


    def SetDeflection(self, *args):
        """
        SetDeflection(Handle_DrawTrSurf_Curve self, Standard_Real const Deflection)

        :type Deflection: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_SetDeflection(self, *args)


    def GetDeflection(self, *args):
        """
        GetDeflection(Handle_DrawTrSurf_Curve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_GetDeflection(self, *args)


    def SetDrawMode(self, *args):
        """
        SetDrawMode(Handle_DrawTrSurf_Curve self, Standard_Integer const DrawMode)

        :type DrawMode: int

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_SetDrawMode(self, *args)


    def GetDrawMode(self, *args):
        """
        GetDrawMode(Handle_DrawTrSurf_Curve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_GetDrawMode(self, *args)


    def PickReject(self, *args):
        """
        PickReject(Handle_DrawTrSurf_Curve self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_PickReject(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_DrawTrSurf_Curve self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_DrawTrSurf_Curve self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_DrawTrSurf_Curve self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_DrawTrSurf_Curve self) -> Standard_Boolean
        Visible(Handle_DrawTrSurf_Curve self, Standard_Boolean const V)

        :type V: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_DrawTrSurf_Curve self) -> Standard_Boolean
        Protected(Handle_DrawTrSurf_Curve self, Standard_Boolean const P)

        :type P: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_DrawTrSurf_Curve self) -> Standard_CString
        Name(Handle_DrawTrSurf_Curve self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_DrawTrSurf_Curve self)

        Memory deallocator for transient classes


        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_DrawTrSurf_Curve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_DrawTrSurf_Curve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_DrawTrSurf_Curve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_DrawTrSurf_Curve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_DrawTrSurf_Curve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_DrawTrSurf_Curve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_DrawTrSurf_Curve self)

        Increments the reference counter of this object


        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_DrawTrSurf_Curve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve_DecrementRefCounter(self, *args)

Handle_DrawTrSurf_Curve_swigregister = _DrawTrSurf.Handle_DrawTrSurf_Curve_swigregister
Handle_DrawTrSurf_Curve_swigregister(Handle_DrawTrSurf_Curve)

def Handle_DrawTrSurf_Curve_DownCast(thing):
    return _DrawTrSurf.Handle_DrawTrSurf_Curve_DownCast(thing)
Handle_DrawTrSurf_Curve_DownCast = _DrawTrSurf.Handle_DrawTrSurf_Curve_DownCast

class Handle_DrawTrSurf_Polygon2D(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_DrawTrSurf_Polygon2D self)

        Nullify the handle


        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon2D_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_DrawTrSurf_Polygon2D self) -> bool

        Check for being null

        :rtype: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon2D_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_DrawTrSurf_Polygon2D self, DrawTrSurf_Polygon2D thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon2D_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_DrawTrSurf_Polygon2D self, Handle_DrawTrSurf_Polygon2D theHandle) -> Handle_DrawTrSurf_Polygon2D
        assign(Handle_DrawTrSurf_Polygon2D self, DrawTrSurf_Polygon2D thePtr) -> Handle_DrawTrSurf_Polygon2D
        assign(Handle_DrawTrSurf_Polygon2D self, Handle_DrawTrSurf_Polygon2D theHandle) -> Handle_DrawTrSurf_Polygon2D

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon2D_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_DrawTrSurf_Polygon2D self) -> DrawTrSurf_Polygon2D

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon2D_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_DrawTrSurf_Polygon2D self) -> DrawTrSurf_Polygon2D

        Member access operator (note non-const)

        :rtype: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon2D___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_DrawTrSurf_Polygon2D self) -> DrawTrSurf_Polygon2D

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon2D___ref__(self, *args)


    def __hash__(self):
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon2D___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _DrawTrSurf.Handle_DrawTrSurf_Polygon2D___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _DrawTrSurf.new_Handle_DrawTrSurf_Polygon2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_DrawTrSurf.Handle_DrawTrSurf_Polygon2D_DownCast)
    __swig_destroy__ = _DrawTrSurf.delete_Handle_DrawTrSurf_Polygon2D

    def Polygon2D(self, *args):
        """
        Polygon2D(Handle_DrawTrSurf_Polygon2D self) -> Handle_Poly_Polygon2D

        :rtype: OCC.wrapper.Poly.Handle_Poly_Polygon2D

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon2D_Polygon2D(self, *args)


    def ShowNodes(self, *args):
        """
        ShowNodes(Handle_DrawTrSurf_Polygon2D self, Standard_Boolean const B)
        ShowNodes(Handle_DrawTrSurf_Polygon2D self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon2D_ShowNodes(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(Handle_DrawTrSurf_Polygon2D self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon2D_DrawOn(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_DrawTrSurf_Polygon2D self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon2D_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_DrawTrSurf_Polygon2D self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon2D_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_DrawTrSurf_Polygon2D self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon2D_Whatis(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_DrawTrSurf_Polygon2D self) -> char const *

        :rtype: const char *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon2D_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.Handle_DrawTrSurf_Polygon2D_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.Handle_DrawTrSurf_Polygon2D_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Is3D(self, *args):
        """
        Is3D(Handle_DrawTrSurf_Polygon2D self) -> Standard_Boolean

        Returns False.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon2D_Is3D(self, *args)


    def PickReject(self, *args):
        """
        PickReject(Handle_DrawTrSurf_Polygon2D self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon2D_PickReject(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_DrawTrSurf_Polygon2D self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon2D_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_DrawTrSurf_Polygon2D self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon2D_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_DrawTrSurf_Polygon2D self) -> Standard_Boolean
        Visible(Handle_DrawTrSurf_Polygon2D self, Standard_Boolean const V)

        :type V: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon2D_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_DrawTrSurf_Polygon2D self) -> Standard_Boolean
        Protected(Handle_DrawTrSurf_Polygon2D self, Standard_Boolean const P)

        :type P: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon2D_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_DrawTrSurf_Polygon2D self) -> Standard_CString
        Name(Handle_DrawTrSurf_Polygon2D self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon2D_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_DrawTrSurf_Polygon2D self)

        Memory deallocator for transient classes


        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon2D_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_DrawTrSurf_Polygon2D self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_DrawTrSurf_Polygon2D self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon2D_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_DrawTrSurf_Polygon2D self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_DrawTrSurf_Polygon2D self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon2D_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_DrawTrSurf_Polygon2D self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon2D_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_DrawTrSurf_Polygon2D self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon2D_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_DrawTrSurf_Polygon2D self)

        Increments the reference counter of this object


        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon2D_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_DrawTrSurf_Polygon2D self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon2D_DecrementRefCounter(self, *args)

Handle_DrawTrSurf_Polygon2D_swigregister = _DrawTrSurf.Handle_DrawTrSurf_Polygon2D_swigregister
Handle_DrawTrSurf_Polygon2D_swigregister(Handle_DrawTrSurf_Polygon2D)

def Handle_DrawTrSurf_Polygon2D_DownCast(thing):
    return _DrawTrSurf.Handle_DrawTrSurf_Polygon2D_DownCast(thing)
Handle_DrawTrSurf_Polygon2D_DownCast = _DrawTrSurf.Handle_DrawTrSurf_Polygon2D_DownCast

class Handle_DrawTrSurf_BezierCurve2d(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_DrawTrSurf_BezierCurve2d self)

        Nullify the handle


        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_DrawTrSurf_BezierCurve2d self) -> bool

        Check for being null

        :rtype: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_DrawTrSurf_BezierCurve2d self, DrawTrSurf_BezierCurve2d thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_DrawTrSurf_BezierCurve2d self, Handle_DrawTrSurf_BezierCurve2d theHandle) -> Handle_DrawTrSurf_BezierCurve2d
        assign(Handle_DrawTrSurf_BezierCurve2d self, DrawTrSurf_BezierCurve2d thePtr) -> Handle_DrawTrSurf_BezierCurve2d
        assign(Handle_DrawTrSurf_BezierCurve2d self, Handle_DrawTrSurf_BezierCurve2d theHandle) -> Handle_DrawTrSurf_BezierCurve2d

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_DrawTrSurf_BezierCurve2d self) -> DrawTrSurf_BezierCurve2d

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_DrawTrSurf_BezierCurve2d self) -> DrawTrSurf_BezierCurve2d

        Member access operator (note non-const)

        :rtype: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_DrawTrSurf_BezierCurve2d self) -> DrawTrSurf_BezierCurve2d

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d___ref__(self, *args)


    def __hash__(self):
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _DrawTrSurf.new_Handle_DrawTrSurf_BezierCurve2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_DownCast)
    __swig_destroy__ = _DrawTrSurf.delete_Handle_DrawTrSurf_BezierCurve2d

    def DrawOn(self, *args):
        """
        DrawOn(Handle_DrawTrSurf_BezierCurve2d self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_DrawOn(self, *args)


    def ShowPoles(self, *args):
        """ShowPoles(Handle_DrawTrSurf_BezierCurve2d self)"""
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_ShowPoles(self, *args)


    def ClearPoles(self, *args):
        """ClearPoles(Handle_DrawTrSurf_BezierCurve2d self)"""
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_ClearPoles(self, *args)


    def FindPole(self, *args):
        """
        FindPole(Handle_DrawTrSurf_BezierCurve2d self, Standard_Real const X, Standard_Real const Y, Draw_Display D, Standard_Real const Prec)

        Returns in <Index> the index of the first pole  of the
        curve projected by the Display <D> at a distance lower
        than <Prec> from <X,Y>. If no pole  is found  index is
        set to 0, else index is always  greater than the input
        value of index.

        :type X: float
        :type Y: float
        :type D: OCC.wrapper.Draw.Draw_Display
        :type Prec: float
        :type Index: int

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_FindPole(self, *args)


    def SetPolesColor(self, *args):
        """
        SetPolesColor(Handle_DrawTrSurf_BezierCurve2d self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_SetPolesColor(self, *args)


    def PolesColor(self, *args):
        """
        PolesColor(Handle_DrawTrSurf_BezierCurve2d self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_PolesColor(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_DrawTrSurf_BezierCurve2d self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_Copy(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_DrawTrSurf_BezierCurve2d self) -> char const *

        :rtype: const char *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetCurve(self, *args):
        """
        GetCurve(Handle_DrawTrSurf_BezierCurve2d self) -> Handle_Geom2d_Curve

        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_GetCurve(self, *args)


    def SetColor(self, *args):
        """
        SetColor(Handle_DrawTrSurf_BezierCurve2d self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_SetColor(self, *args)


    def ShowCurvature(self, *args):
        """ShowCurvature(Handle_DrawTrSurf_BezierCurve2d self)"""
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_ShowCurvature(self, *args)


    def ClearCurvature(self, *args):
        """ClearCurvature(Handle_DrawTrSurf_BezierCurve2d self)"""
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_ClearCurvature(self, *args)


    def SetRadiusMax(self, *args):
        """
        SetRadiusMax(Handle_DrawTrSurf_BezierCurve2d self, Standard_Real const Radius)

        :type Radius: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_SetRadiusMax(self, *args)


    def SetRadiusRatio(self, *args):
        """
        SetRadiusRatio(Handle_DrawTrSurf_BezierCurve2d self, Standard_Real const Ratio)

        :type Ratio: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_SetRadiusRatio(self, *args)


    def Color(self, *args):
        """
        Color(Handle_DrawTrSurf_BezierCurve2d self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_Color(self, *args)


    def RadiusMax(self, *args):
        """
        RadiusMax(Handle_DrawTrSurf_BezierCurve2d self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_RadiusMax(self, *args)


    def RadiusRatio(self, *args):
        """
        RadiusRatio(Handle_DrawTrSurf_BezierCurve2d self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_RadiusRatio(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_DrawTrSurf_BezierCurve2d self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_Dump(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_DrawTrSurf_BezierCurve2d self) -> Standard_Boolean

        Returns False.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_Is3D(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_DrawTrSurf_BezierCurve2d self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_Whatis(self, *args)


    def DrawCurve2dOn(self, *args):
        """
        DrawCurve2dOn(Handle_DrawTrSurf_BezierCurve2d self, Adaptor2d_Curve2d C, Draw_Display D)

        Draw a polygon of the curve on the Display

        :type C: OCC.wrapper.Adaptor2d.Adaptor2d_Curve2d
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_DrawCurve2dOn(self, *args)


    def DrawCurveOn(self, *args):
        """
        DrawCurveOn(Handle_DrawTrSurf_BezierCurve2d self, Adaptor3d_Curve C, Draw_Display D)

        Draw a polygon of the curve on the Display

        :type C: OCC.wrapper.Adaptor3d.Adaptor3d_Curve
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_DrawCurveOn(self, *args)


    def DrawIsoCurveOn(self, *args):
        """
        DrawIsoCurveOn(Handle_DrawTrSurf_BezierCurve2d self, Adaptor3d_IsoCurve C, GeomAbs_IsoType const T, Standard_Real const P, Standard_Real const F, Standard_Real const L, Draw_Display D)

        Load C  with the specified iso  and Draw a polygon
        of the curve on the Display

        :type C: OCC.wrapper.Adaptor3d.Adaptor3d_IsoCurve
        :type T: OCC.wrapper.GeomAbs.GeomAbs_IsoType
        :type P: float
        :type F: float
        :type L: float
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_DrawIsoCurveOn(self, *args)


    def SetDiscretisation(self, *args):
        """
        SetDiscretisation(Handle_DrawTrSurf_BezierCurve2d self, Standard_Integer const Discret)

        :type Discret: int

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_SetDiscretisation(self, *args)


    def GetDiscretisation(self, *args):
        """
        GetDiscretisation(Handle_DrawTrSurf_BezierCurve2d self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_GetDiscretisation(self, *args)


    def SetDeflection(self, *args):
        """
        SetDeflection(Handle_DrawTrSurf_BezierCurve2d self, Standard_Real const Deflection)

        :type Deflection: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_SetDeflection(self, *args)


    def GetDeflection(self, *args):
        """
        GetDeflection(Handle_DrawTrSurf_BezierCurve2d self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_GetDeflection(self, *args)


    def SetDrawMode(self, *args):
        """
        SetDrawMode(Handle_DrawTrSurf_BezierCurve2d self, Standard_Integer const DrawMode)

        :type DrawMode: int

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_SetDrawMode(self, *args)


    def GetDrawMode(self, *args):
        """
        GetDrawMode(Handle_DrawTrSurf_BezierCurve2d self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_GetDrawMode(self, *args)


    def PickReject(self, *args):
        """
        PickReject(Handle_DrawTrSurf_BezierCurve2d self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_PickReject(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_DrawTrSurf_BezierCurve2d self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_DrawTrSurf_BezierCurve2d self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_DrawTrSurf_BezierCurve2d self) -> Standard_Boolean
        Visible(Handle_DrawTrSurf_BezierCurve2d self, Standard_Boolean const V)

        :type V: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_DrawTrSurf_BezierCurve2d self) -> Standard_Boolean
        Protected(Handle_DrawTrSurf_BezierCurve2d self, Standard_Boolean const P)

        :type P: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_DrawTrSurf_BezierCurve2d self) -> Standard_CString
        Name(Handle_DrawTrSurf_BezierCurve2d self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_DrawTrSurf_BezierCurve2d self)

        Memory deallocator for transient classes


        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_DrawTrSurf_BezierCurve2d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_DrawTrSurf_BezierCurve2d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_DrawTrSurf_BezierCurve2d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_DrawTrSurf_BezierCurve2d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_DrawTrSurf_BezierCurve2d self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_DrawTrSurf_BezierCurve2d self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_DrawTrSurf_BezierCurve2d self)

        Increments the reference counter of this object


        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_DrawTrSurf_BezierCurve2d self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_DecrementRefCounter(self, *args)

Handle_DrawTrSurf_BezierCurve2d_swigregister = _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_swigregister
Handle_DrawTrSurf_BezierCurve2d_swigregister(Handle_DrawTrSurf_BezierCurve2d)

def Handle_DrawTrSurf_BezierCurve2d_DownCast(thing):
    return _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_DownCast(thing)
Handle_DrawTrSurf_BezierCurve2d_DownCast = _DrawTrSurf.Handle_DrawTrSurf_BezierCurve2d_DownCast

class DrawTrSurf_BSplineCurve(DrawTrSurf_Curve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_DrawTrSurf_BSplineCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_DrawTrSurf_BSplineCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(DrawTrSurf_BSplineCurve self, Handle_Geom_BSplineCurve C) -> DrawTrSurf_BSplineCurve
        __init__(DrawTrSurf_BSplineCurve self, Handle_Geom_BSplineCurve C, Draw_Color CurvColor, Draw_Color PolesColor, Draw_Color KnotsColor, Draw_MarkerShape const KnotsShape, Standard_Integer const KnotsSize, Standard_Boolean const ShowPoles, Standard_Boolean const ShowKnots, Standard_Integer const Discret, Standard_Real const Deflection, Standard_Integer const DrawMode) -> DrawTrSurf_BSplineCurve

        creates a drawable BSpline curve from a BSpline curve of
        package Geom.

        :type C: OCC.wrapper.Geom.Handle_Geom_BSplineCurve
        :type CurvColor: OCC.wrapper.Draw.Draw_Color
        :type PolesColor: OCC.wrapper.Draw.Draw_Color
        :type KnotsColor: OCC.wrapper.Draw.Draw_Color
        :type KnotsShape: OCC.wrapper.Draw.Draw_MarkerShape
        :type KnotsSize: int
        :type ShowPoles: bool
        :type ShowKnots: bool
        :type Discret: int
        :type Deflection: float
        :type DrawMode: int

        """
        this = _DrawTrSurf.new_DrawTrSurf_BSplineCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def DrawOn(self, *args):
        """
        DrawOn(DrawTrSurf_BSplineCurve self, Draw_Display dis)
        DrawOn(DrawTrSurf_BSplineCurve self, Draw_Display dis, Standard_Boolean const ShowPoles, Standard_Boolean const ShowKnots)
        DrawOn(DrawTrSurf_BSplineCurve self, Draw_Display dis, Standard_Real const U1, Standard_Real const U2, Standard_Integer const Pindex, Standard_Boolean const ShowPoles, Standard_Boolean const ShowKnots)

        :type dis: OCC.wrapper.Draw.Draw_Display
        :type U1: float
        :type U2: float
        :type Pindex: int
        :type ShowPoles: bool
        :type ShowKnots: bool

        """
        return _DrawTrSurf.DrawTrSurf_BSplineCurve_DrawOn(self, *args)


    def ShowPoles(self, *args):
        """ShowPoles(DrawTrSurf_BSplineCurve self)"""
        return _DrawTrSurf.DrawTrSurf_BSplineCurve_ShowPoles(self, *args)


    def ShowKnots(self, *args):
        """ShowKnots(DrawTrSurf_BSplineCurve self)"""
        return _DrawTrSurf.DrawTrSurf_BSplineCurve_ShowKnots(self, *args)


    def ClearPoles(self, *args):
        """ClearPoles(DrawTrSurf_BSplineCurve self)"""
        return _DrawTrSurf.DrawTrSurf_BSplineCurve_ClearPoles(self, *args)


    def ClearKnots(self, *args):
        """ClearKnots(DrawTrSurf_BSplineCurve self)"""
        return _DrawTrSurf.DrawTrSurf_BSplineCurve_ClearKnots(self, *args)


    def FindPole(self, *args):
        """
        FindPole(DrawTrSurf_BSplineCurve self, Standard_Real const X, Standard_Real const Y, Draw_Display D, Standard_Real const Prec)

        Returns in <Index> the index of the first pole  of the
        curve projected by the Display <D> at a distance lower
        than <Prec> from <X,Y>. If no pole  is found  index is
        set to 0, else index is always  greater than the input
        value of index.

        :type X: float
        :type Y: float
        :type D: OCC.wrapper.Draw.Draw_Display
        :type Prec: float
        :type Index: int

        """
        return _DrawTrSurf.DrawTrSurf_BSplineCurve_FindPole(self, *args)


    def FindKnot(self, *args):
        """
        FindKnot(DrawTrSurf_BSplineCurve self, Standard_Real const X, Standard_Real const Y, Draw_Display D, Standard_Real const Prec)

        :type X: float
        :type Y: float
        :type D: OCC.wrapper.Draw.Draw_Display
        :type Prec: float
        :type Index: int

        """
        return _DrawTrSurf.DrawTrSurf_BSplineCurve_FindKnot(self, *args)


    def SetPolesColor(self, *args):
        """
        SetPolesColor(DrawTrSurf_BSplineCurve self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.DrawTrSurf_BSplineCurve_SetPolesColor(self, *args)


    def SetKnotsColor(self, *args):
        """
        SetKnotsColor(DrawTrSurf_BSplineCurve self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.DrawTrSurf_BSplineCurve_SetKnotsColor(self, *args)


    def SetKnotsShape(self, *args):
        """
        SetKnotsShape(DrawTrSurf_BSplineCurve self, Draw_MarkerShape const Shape)

        :type Shape: OCC.wrapper.Draw.Draw_MarkerShape

        """
        return _DrawTrSurf.DrawTrSurf_BSplineCurve_SetKnotsShape(self, *args)


    def KnotsShape(self, *args):
        """
        KnotsShape(DrawTrSurf_BSplineCurve self) -> Draw_MarkerShape

        :rtype: OCC.wrapper.Draw.Draw_MarkerShape

        """
        return _DrawTrSurf.DrawTrSurf_BSplineCurve_KnotsShape(self, *args)


    def KnotsColor(self, *args):
        """
        KnotsColor(DrawTrSurf_BSplineCurve self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.DrawTrSurf_BSplineCurve_KnotsColor(self, *args)


    def PolesColor(self, *args):
        """
        PolesColor(DrawTrSurf_BSplineCurve self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.DrawTrSurf_BSplineCurve_PolesColor(self, *args)


    def Copy(self, *args):
        """
        Copy(DrawTrSurf_BSplineCurve self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DrawTrSurf.DrawTrSurf_BSplineCurve_Copy(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _DrawTrSurf.DrawTrSurf_BSplineCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _DrawTrSurf.DrawTrSurf_BSplineCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.DrawTrSurf_BSplineCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _DrawTrSurf.delete_DrawTrSurf_BSplineCurve
DrawTrSurf_BSplineCurve_swigregister = _DrawTrSurf.DrawTrSurf_BSplineCurve_swigregister
DrawTrSurf_BSplineCurve_swigregister(DrawTrSurf_BSplineCurve)

def DrawTrSurf_BSplineCurve_get_type_name(*args):
    """
    DrawTrSurf_BSplineCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _DrawTrSurf.DrawTrSurf_BSplineCurve_get_type_name(*args)

def DrawTrSurf_BSplineCurve_get_type_descriptor(*args):
    """
    DrawTrSurf_BSplineCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _DrawTrSurf.DrawTrSurf_BSplineCurve_get_type_descriptor(*args)

class Handle_DrawTrSurf_Drawable(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_DrawTrSurf_Drawable self)

        Nullify the handle


        """
        return _DrawTrSurf.Handle_DrawTrSurf_Drawable_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_DrawTrSurf_Drawable self) -> bool

        Check for being null

        :rtype: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Drawable_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_DrawTrSurf_Drawable self, DrawTrSurf_Drawable thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Drawable_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_DrawTrSurf_Drawable self, Handle_DrawTrSurf_Drawable theHandle) -> Handle_DrawTrSurf_Drawable
        assign(Handle_DrawTrSurf_Drawable self, DrawTrSurf_Drawable thePtr) -> Handle_DrawTrSurf_Drawable
        assign(Handle_DrawTrSurf_Drawable self, Handle_DrawTrSurf_Drawable theHandle) -> Handle_DrawTrSurf_Drawable

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Drawable_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_DrawTrSurf_Drawable self) -> DrawTrSurf_Drawable

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Drawable_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_DrawTrSurf_Drawable self) -> DrawTrSurf_Drawable

        Member access operator (note non-const)

        :rtype: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Drawable___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_DrawTrSurf_Drawable self) -> DrawTrSurf_Drawable

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Drawable___ref__(self, *args)


    def __hash__(self):
        return _DrawTrSurf.Handle_DrawTrSurf_Drawable___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _DrawTrSurf.Handle_DrawTrSurf_Drawable___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _DrawTrSurf.new_Handle_DrawTrSurf_Drawable(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_DrawTrSurf.Handle_DrawTrSurf_Drawable_DownCast)
    __swig_destroy__ = _DrawTrSurf.delete_Handle_DrawTrSurf_Drawable

    def DrawCurve2dOn(self, *args):
        """
        DrawCurve2dOn(Handle_DrawTrSurf_Drawable self, Adaptor2d_Curve2d C, Draw_Display D)

        Draw a polygon of the curve on the Display

        :type C: OCC.wrapper.Adaptor2d.Adaptor2d_Curve2d
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Drawable_DrawCurve2dOn(self, *args)


    def DrawCurveOn(self, *args):
        """
        DrawCurveOn(Handle_DrawTrSurf_Drawable self, Adaptor3d_Curve C, Draw_Display D)

        Draw a polygon of the curve on the Display

        :type C: OCC.wrapper.Adaptor3d.Adaptor3d_Curve
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Drawable_DrawCurveOn(self, *args)


    def DrawIsoCurveOn(self, *args):
        """
        DrawIsoCurveOn(Handle_DrawTrSurf_Drawable self, Adaptor3d_IsoCurve C, GeomAbs_IsoType const T, Standard_Real const P, Standard_Real const F, Standard_Real const L, Draw_Display D)

        Load C  with the specified iso  and Draw a polygon
        of the curve on the Display

        :type C: OCC.wrapper.Adaptor3d.Adaptor3d_IsoCurve
        :type T: OCC.wrapper.GeomAbs.GeomAbs_IsoType
        :type P: float
        :type F: float
        :type L: float
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Drawable_DrawIsoCurveOn(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(Handle_DrawTrSurf_Drawable self, Draw_Display dis)

        this is defined only to tell C++ not to complain
        about inheriting a pure virtual method.

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Drawable_DrawOn(self, *args)


    def SetDiscretisation(self, *args):
        """
        SetDiscretisation(Handle_DrawTrSurf_Drawable self, Standard_Integer const Discret)

        :type Discret: int

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Drawable_SetDiscretisation(self, *args)


    def GetDiscretisation(self, *args):
        """
        GetDiscretisation(Handle_DrawTrSurf_Drawable self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Drawable_GetDiscretisation(self, *args)


    def SetDeflection(self, *args):
        """
        SetDeflection(Handle_DrawTrSurf_Drawable self, Standard_Real const Deflection)

        :type Deflection: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Drawable_SetDeflection(self, *args)


    def GetDeflection(self, *args):
        """
        GetDeflection(Handle_DrawTrSurf_Drawable self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Drawable_GetDeflection(self, *args)


    def SetDrawMode(self, *args):
        """
        SetDrawMode(Handle_DrawTrSurf_Drawable self, Standard_Integer const DrawMode)

        :type DrawMode: int

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Drawable_SetDrawMode(self, *args)


    def GetDrawMode(self, *args):
        """
        GetDrawMode(Handle_DrawTrSurf_Drawable self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Drawable_GetDrawMode(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_DrawTrSurf_Drawable self) -> char const *

        :rtype: const char *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Drawable_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.Handle_DrawTrSurf_Drawable_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.Handle_DrawTrSurf_Drawable_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PickReject(self, *args):
        """
        PickReject(Handle_DrawTrSurf_Drawable self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Drawable_PickReject(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_DrawTrSurf_Drawable self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Drawable_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_DrawTrSurf_Drawable self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Drawable_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_DrawTrSurf_Drawable self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Drawable_Whatis(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_DrawTrSurf_Drawable self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Drawable_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_DrawTrSurf_Drawable self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Drawable_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_DrawTrSurf_Drawable self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Drawable_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_DrawTrSurf_Drawable self) -> Standard_Boolean
        Visible(Handle_DrawTrSurf_Drawable self, Standard_Boolean const V)

        :type V: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Drawable_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_DrawTrSurf_Drawable self) -> Standard_Boolean
        Protected(Handle_DrawTrSurf_Drawable self, Standard_Boolean const P)

        :type P: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Drawable_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_DrawTrSurf_Drawable self) -> Standard_CString
        Name(Handle_DrawTrSurf_Drawable self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Drawable_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_DrawTrSurf_Drawable self)

        Memory deallocator for transient classes


        """
        return _DrawTrSurf.Handle_DrawTrSurf_Drawable_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_DrawTrSurf_Drawable self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_DrawTrSurf_Drawable self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Drawable_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_DrawTrSurf_Drawable self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_DrawTrSurf_Drawable self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Drawable_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_DrawTrSurf_Drawable self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Drawable_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_DrawTrSurf_Drawable self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Drawable_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_DrawTrSurf_Drawable self)

        Increments the reference counter of this object


        """
        return _DrawTrSurf.Handle_DrawTrSurf_Drawable_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_DrawTrSurf_Drawable self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Drawable_DecrementRefCounter(self, *args)

Handle_DrawTrSurf_Drawable_swigregister = _DrawTrSurf.Handle_DrawTrSurf_Drawable_swigregister
Handle_DrawTrSurf_Drawable_swigregister(Handle_DrawTrSurf_Drawable)

def Handle_DrawTrSurf_Drawable_DownCast(thing):
    return _DrawTrSurf.Handle_DrawTrSurf_Drawable_DownCast(thing)
Handle_DrawTrSurf_Drawable_DownCast = _DrawTrSurf.Handle_DrawTrSurf_Drawable_DownCast

class Handle_DrawTrSurf_Triangulation2D(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_DrawTrSurf_Triangulation2D self)

        Nullify the handle


        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation2D_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_DrawTrSurf_Triangulation2D self) -> bool

        Check for being null

        :rtype: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation2D_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_DrawTrSurf_Triangulation2D self, DrawTrSurf_Triangulation2D thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation2D_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_DrawTrSurf_Triangulation2D self, Handle_DrawTrSurf_Triangulation2D theHandle) -> Handle_DrawTrSurf_Triangulation2D
        assign(Handle_DrawTrSurf_Triangulation2D self, DrawTrSurf_Triangulation2D thePtr) -> Handle_DrawTrSurf_Triangulation2D
        assign(Handle_DrawTrSurf_Triangulation2D self, Handle_DrawTrSurf_Triangulation2D theHandle) -> Handle_DrawTrSurf_Triangulation2D

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation2D_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_DrawTrSurf_Triangulation2D self) -> DrawTrSurf_Triangulation2D

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation2D_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_DrawTrSurf_Triangulation2D self) -> DrawTrSurf_Triangulation2D

        Member access operator (note non-const)

        :rtype: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation2D___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_DrawTrSurf_Triangulation2D self) -> DrawTrSurf_Triangulation2D

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation2D___ref__(self, *args)


    def __hash__(self):
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation2D___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _DrawTrSurf.Handle_DrawTrSurf_Triangulation2D___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _DrawTrSurf.new_Handle_DrawTrSurf_Triangulation2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_DrawTrSurf.Handle_DrawTrSurf_Triangulation2D_DownCast)
    __swig_destroy__ = _DrawTrSurf.delete_Handle_DrawTrSurf_Triangulation2D

    def Triangulation(self, *args):
        """
        Triangulation(Handle_DrawTrSurf_Triangulation2D self) -> Handle_Poly_Triangulation

        :rtype: OCC.wrapper.Poly.Handle_Poly_Triangulation

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation2D_Triangulation(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(Handle_DrawTrSurf_Triangulation2D self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation2D_DrawOn(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_DrawTrSurf_Triangulation2D self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation2D_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_DrawTrSurf_Triangulation2D self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation2D_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_DrawTrSurf_Triangulation2D self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation2D_Whatis(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_DrawTrSurf_Triangulation2D self) -> char const *

        :rtype: const char *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation2D_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.Handle_DrawTrSurf_Triangulation2D_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.Handle_DrawTrSurf_Triangulation2D_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Is3D(self, *args):
        """
        Is3D(Handle_DrawTrSurf_Triangulation2D self) -> Standard_Boolean

        Returns False.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation2D_Is3D(self, *args)


    def PickReject(self, *args):
        """
        PickReject(Handle_DrawTrSurf_Triangulation2D self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation2D_PickReject(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_DrawTrSurf_Triangulation2D self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation2D_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_DrawTrSurf_Triangulation2D self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation2D_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_DrawTrSurf_Triangulation2D self) -> Standard_Boolean
        Visible(Handle_DrawTrSurf_Triangulation2D self, Standard_Boolean const V)

        :type V: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation2D_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_DrawTrSurf_Triangulation2D self) -> Standard_Boolean
        Protected(Handle_DrawTrSurf_Triangulation2D self, Standard_Boolean const P)

        :type P: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation2D_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_DrawTrSurf_Triangulation2D self) -> Standard_CString
        Name(Handle_DrawTrSurf_Triangulation2D self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation2D_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_DrawTrSurf_Triangulation2D self)

        Memory deallocator for transient classes


        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation2D_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_DrawTrSurf_Triangulation2D self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_DrawTrSurf_Triangulation2D self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation2D_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_DrawTrSurf_Triangulation2D self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_DrawTrSurf_Triangulation2D self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation2D_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_DrawTrSurf_Triangulation2D self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation2D_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_DrawTrSurf_Triangulation2D self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation2D_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_DrawTrSurf_Triangulation2D self)

        Increments the reference counter of this object


        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation2D_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_DrawTrSurf_Triangulation2D self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Triangulation2D_DecrementRefCounter(self, *args)

Handle_DrawTrSurf_Triangulation2D_swigregister = _DrawTrSurf.Handle_DrawTrSurf_Triangulation2D_swigregister
Handle_DrawTrSurf_Triangulation2D_swigregister(Handle_DrawTrSurf_Triangulation2D)

def Handle_DrawTrSurf_Triangulation2D_DownCast(thing):
    return _DrawTrSurf.Handle_DrawTrSurf_Triangulation2D_DownCast(thing)
Handle_DrawTrSurf_Triangulation2D_DownCast = _DrawTrSurf.Handle_DrawTrSurf_Triangulation2D_DownCast

class Handle_DrawTrSurf_Point(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_DrawTrSurf_Point self)

        Nullify the handle


        """
        return _DrawTrSurf.Handle_DrawTrSurf_Point_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_DrawTrSurf_Point self) -> bool

        Check for being null

        :rtype: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Point_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_DrawTrSurf_Point self, DrawTrSurf_Point thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Point_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_DrawTrSurf_Point self, Handle_DrawTrSurf_Point theHandle) -> Handle_DrawTrSurf_Point
        assign(Handle_DrawTrSurf_Point self, DrawTrSurf_Point thePtr) -> Handle_DrawTrSurf_Point
        assign(Handle_DrawTrSurf_Point self, Handle_DrawTrSurf_Point theHandle) -> Handle_DrawTrSurf_Point

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Point_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_DrawTrSurf_Point self) -> DrawTrSurf_Point

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Point_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_DrawTrSurf_Point self) -> DrawTrSurf_Point

        Member access operator (note non-const)

        :rtype: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Point___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_DrawTrSurf_Point self) -> DrawTrSurf_Point

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Point___ref__(self, *args)


    def __hash__(self):
        return _DrawTrSurf.Handle_DrawTrSurf_Point___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _DrawTrSurf.Handle_DrawTrSurf_Point___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _DrawTrSurf.new_Handle_DrawTrSurf_Point(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_DrawTrSurf.Handle_DrawTrSurf_Point_DownCast)
    __swig_destroy__ = _DrawTrSurf.delete_Handle_DrawTrSurf_Point

    def DrawOn(self, *args):
        """
        DrawOn(Handle_DrawTrSurf_Point self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Point_DrawOn(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_DrawTrSurf_Point self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Point_Is3D(self, *args)


    def Point(self, *args):
        """
        Point(Handle_DrawTrSurf_Point self) -> gp_Pnt
        Point(Handle_DrawTrSurf_Point self, gp_Pnt P)

        :type P: OCC.wrapper.gp.gp_Pnt

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Point_Point(self, *args)


    def Point2d(self, *args):
        """
        Point2d(Handle_DrawTrSurf_Point self) -> gp_Pnt2d
        Point2d(Handle_DrawTrSurf_Point self, gp_Pnt2d P)

        :type P: OCC.wrapper.gp.gp_Pnt2d

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Point_Point2d(self, *args)


    def Color(self, *args):
        """
        Color(Handle_DrawTrSurf_Point self, Draw_Color aColor)
        Color(Handle_DrawTrSurf_Point self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Point_Color(self, *args)


    def Shape(self, *args):
        """
        Shape(Handle_DrawTrSurf_Point self, Draw_MarkerShape const S)
        Shape(Handle_DrawTrSurf_Point self) -> Draw_MarkerShape

        :rtype: OCC.wrapper.Draw.Draw_MarkerShape

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Point_Shape(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_DrawTrSurf_Point self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Point_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_DrawTrSurf_Point self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Point_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_DrawTrSurf_Point self, Draw_Interpretor I)

        For variable whatis command.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Point_Whatis(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_DrawTrSurf_Point self) -> char const *

        :rtype: const char *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Point_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.Handle_DrawTrSurf_Point_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.Handle_DrawTrSurf_Point_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PickReject(self, *args):
        """
        PickReject(Handle_DrawTrSurf_Point self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Point_PickReject(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_DrawTrSurf_Point self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Point_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_DrawTrSurf_Point self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Point_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_DrawTrSurf_Point self) -> Standard_Boolean
        Visible(Handle_DrawTrSurf_Point self, Standard_Boolean const V)

        :type V: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Point_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_DrawTrSurf_Point self) -> Standard_Boolean
        Protected(Handle_DrawTrSurf_Point self, Standard_Boolean const P)

        :type P: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Point_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_DrawTrSurf_Point self) -> Standard_CString
        Name(Handle_DrawTrSurf_Point self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Point_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_DrawTrSurf_Point self)

        Memory deallocator for transient classes


        """
        return _DrawTrSurf.Handle_DrawTrSurf_Point_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_DrawTrSurf_Point self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_DrawTrSurf_Point self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Point_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_DrawTrSurf_Point self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_DrawTrSurf_Point self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Point_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_DrawTrSurf_Point self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Point_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_DrawTrSurf_Point self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Point_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_DrawTrSurf_Point self)

        Increments the reference counter of this object


        """
        return _DrawTrSurf.Handle_DrawTrSurf_Point_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_DrawTrSurf_Point self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Point_DecrementRefCounter(self, *args)

Handle_DrawTrSurf_Point_swigregister = _DrawTrSurf.Handle_DrawTrSurf_Point_swigregister
Handle_DrawTrSurf_Point_swigregister(Handle_DrawTrSurf_Point)

def Handle_DrawTrSurf_Point_DownCast(thing):
    return _DrawTrSurf.Handle_DrawTrSurf_Point_DownCast(thing)
Handle_DrawTrSurf_Point_DownCast = _DrawTrSurf.Handle_DrawTrSurf_Point_DownCast

class Handle_DrawTrSurf_Curve2d(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_DrawTrSurf_Curve2d self)

        Nullify the handle


        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_DrawTrSurf_Curve2d self) -> bool

        Check for being null

        :rtype: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_DrawTrSurf_Curve2d self, DrawTrSurf_Curve2d thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_DrawTrSurf_Curve2d self, Handle_DrawTrSurf_Curve2d theHandle) -> Handle_DrawTrSurf_Curve2d
        assign(Handle_DrawTrSurf_Curve2d self, DrawTrSurf_Curve2d thePtr) -> Handle_DrawTrSurf_Curve2d
        assign(Handle_DrawTrSurf_Curve2d self, Handle_DrawTrSurf_Curve2d theHandle) -> Handle_DrawTrSurf_Curve2d

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_DrawTrSurf_Curve2d self) -> DrawTrSurf_Curve2d

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_DrawTrSurf_Curve2d self) -> DrawTrSurf_Curve2d

        Member access operator (note non-const)

        :rtype: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_DrawTrSurf_Curve2d self) -> DrawTrSurf_Curve2d

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d___ref__(self, *args)


    def __hash__(self):
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _DrawTrSurf.Handle_DrawTrSurf_Curve2d___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _DrawTrSurf.new_Handle_DrawTrSurf_Curve2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_DrawTrSurf.Handle_DrawTrSurf_Curve2d_DownCast)
    __swig_destroy__ = _DrawTrSurf.delete_Handle_DrawTrSurf_Curve2d

    def DrawOn(self, *args):
        """
        DrawOn(Handle_DrawTrSurf_Curve2d self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_DrawOn(self, *args)


    def GetCurve(self, *args):
        """
        GetCurve(Handle_DrawTrSurf_Curve2d self) -> Handle_Geom2d_Curve

        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_GetCurve(self, *args)


    def SetColor(self, *args):
        """
        SetColor(Handle_DrawTrSurf_Curve2d self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_SetColor(self, *args)


    def ShowCurvature(self, *args):
        """ShowCurvature(Handle_DrawTrSurf_Curve2d self)"""
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_ShowCurvature(self, *args)


    def ClearCurvature(self, *args):
        """ClearCurvature(Handle_DrawTrSurf_Curve2d self)"""
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_ClearCurvature(self, *args)


    def SetRadiusMax(self, *args):
        """
        SetRadiusMax(Handle_DrawTrSurf_Curve2d self, Standard_Real const Radius)

        :type Radius: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_SetRadiusMax(self, *args)


    def SetRadiusRatio(self, *args):
        """
        SetRadiusRatio(Handle_DrawTrSurf_Curve2d self, Standard_Real const Ratio)

        :type Ratio: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_SetRadiusRatio(self, *args)


    def Color(self, *args):
        """
        Color(Handle_DrawTrSurf_Curve2d self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_Color(self, *args)


    def RadiusMax(self, *args):
        """
        RadiusMax(Handle_DrawTrSurf_Curve2d self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_RadiusMax(self, *args)


    def RadiusRatio(self, *args):
        """
        RadiusRatio(Handle_DrawTrSurf_Curve2d self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_RadiusRatio(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_DrawTrSurf_Curve2d self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_DrawTrSurf_Curve2d self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_Dump(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_DrawTrSurf_Curve2d self) -> Standard_Boolean

        Returns False.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_Is3D(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_DrawTrSurf_Curve2d self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_Whatis(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_DrawTrSurf_Curve2d self) -> char const *

        :rtype: const char *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.Handle_DrawTrSurf_Curve2d_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.Handle_DrawTrSurf_Curve2d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DrawCurve2dOn(self, *args):
        """
        DrawCurve2dOn(Handle_DrawTrSurf_Curve2d self, Adaptor2d_Curve2d C, Draw_Display D)

        Draw a polygon of the curve on the Display

        :type C: OCC.wrapper.Adaptor2d.Adaptor2d_Curve2d
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_DrawCurve2dOn(self, *args)


    def DrawCurveOn(self, *args):
        """
        DrawCurveOn(Handle_DrawTrSurf_Curve2d self, Adaptor3d_Curve C, Draw_Display D)

        Draw a polygon of the curve on the Display

        :type C: OCC.wrapper.Adaptor3d.Adaptor3d_Curve
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_DrawCurveOn(self, *args)


    def DrawIsoCurveOn(self, *args):
        """
        DrawIsoCurveOn(Handle_DrawTrSurf_Curve2d self, Adaptor3d_IsoCurve C, GeomAbs_IsoType const T, Standard_Real const P, Standard_Real const F, Standard_Real const L, Draw_Display D)

        Load C  with the specified iso  and Draw a polygon
        of the curve on the Display

        :type C: OCC.wrapper.Adaptor3d.Adaptor3d_IsoCurve
        :type T: OCC.wrapper.GeomAbs.GeomAbs_IsoType
        :type P: float
        :type F: float
        :type L: float
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_DrawIsoCurveOn(self, *args)


    def SetDiscretisation(self, *args):
        """
        SetDiscretisation(Handle_DrawTrSurf_Curve2d self, Standard_Integer const Discret)

        :type Discret: int

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_SetDiscretisation(self, *args)


    def GetDiscretisation(self, *args):
        """
        GetDiscretisation(Handle_DrawTrSurf_Curve2d self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_GetDiscretisation(self, *args)


    def SetDeflection(self, *args):
        """
        SetDeflection(Handle_DrawTrSurf_Curve2d self, Standard_Real const Deflection)

        :type Deflection: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_SetDeflection(self, *args)


    def GetDeflection(self, *args):
        """
        GetDeflection(Handle_DrawTrSurf_Curve2d self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_GetDeflection(self, *args)


    def SetDrawMode(self, *args):
        """
        SetDrawMode(Handle_DrawTrSurf_Curve2d self, Standard_Integer const DrawMode)

        :type DrawMode: int

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_SetDrawMode(self, *args)


    def GetDrawMode(self, *args):
        """
        GetDrawMode(Handle_DrawTrSurf_Curve2d self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_GetDrawMode(self, *args)


    def PickReject(self, *args):
        """
        PickReject(Handle_DrawTrSurf_Curve2d self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_PickReject(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_DrawTrSurf_Curve2d self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_DrawTrSurf_Curve2d self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_DrawTrSurf_Curve2d self) -> Standard_Boolean
        Visible(Handle_DrawTrSurf_Curve2d self, Standard_Boolean const V)

        :type V: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_DrawTrSurf_Curve2d self) -> Standard_Boolean
        Protected(Handle_DrawTrSurf_Curve2d self, Standard_Boolean const P)

        :type P: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_DrawTrSurf_Curve2d self) -> Standard_CString
        Name(Handle_DrawTrSurf_Curve2d self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_DrawTrSurf_Curve2d self)

        Memory deallocator for transient classes


        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_DrawTrSurf_Curve2d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_DrawTrSurf_Curve2d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_DrawTrSurf_Curve2d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_DrawTrSurf_Curve2d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_DrawTrSurf_Curve2d self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_DrawTrSurf_Curve2d self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_DrawTrSurf_Curve2d self)

        Increments the reference counter of this object


        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_DrawTrSurf_Curve2d self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_DecrementRefCounter(self, *args)

Handle_DrawTrSurf_Curve2d_swigregister = _DrawTrSurf.Handle_DrawTrSurf_Curve2d_swigregister
Handle_DrawTrSurf_Curve2d_swigregister(Handle_DrawTrSurf_Curve2d)

def Handle_DrawTrSurf_Curve2d_DownCast(thing):
    return _DrawTrSurf.Handle_DrawTrSurf_Curve2d_DownCast(thing)
Handle_DrawTrSurf_Curve2d_DownCast = _DrawTrSurf.Handle_DrawTrSurf_Curve2d_DownCast

class Handle_DrawTrSurf_Polygon3D(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_DrawTrSurf_Polygon3D self)

        Nullify the handle


        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon3D_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_DrawTrSurf_Polygon3D self) -> bool

        Check for being null

        :rtype: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon3D_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_DrawTrSurf_Polygon3D self, DrawTrSurf_Polygon3D thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon3D_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_DrawTrSurf_Polygon3D self, Handle_DrawTrSurf_Polygon3D theHandle) -> Handle_DrawTrSurf_Polygon3D
        assign(Handle_DrawTrSurf_Polygon3D self, DrawTrSurf_Polygon3D thePtr) -> Handle_DrawTrSurf_Polygon3D
        assign(Handle_DrawTrSurf_Polygon3D self, Handle_DrawTrSurf_Polygon3D theHandle) -> Handle_DrawTrSurf_Polygon3D

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon3D_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_DrawTrSurf_Polygon3D self) -> DrawTrSurf_Polygon3D

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon3D_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_DrawTrSurf_Polygon3D self) -> DrawTrSurf_Polygon3D

        Member access operator (note non-const)

        :rtype: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon3D___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_DrawTrSurf_Polygon3D self) -> DrawTrSurf_Polygon3D

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon3D___ref__(self, *args)


    def __hash__(self):
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon3D___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _DrawTrSurf.Handle_DrawTrSurf_Polygon3D___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _DrawTrSurf.new_Handle_DrawTrSurf_Polygon3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_DrawTrSurf.Handle_DrawTrSurf_Polygon3D_DownCast)
    __swig_destroy__ = _DrawTrSurf.delete_Handle_DrawTrSurf_Polygon3D

    def Polygon3D(self, *args):
        """
        Polygon3D(Handle_DrawTrSurf_Polygon3D self) -> Handle_Poly_Polygon3D

        :rtype: OCC.wrapper.Poly.Handle_Poly_Polygon3D

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon3D_Polygon3D(self, *args)


    def ShowNodes(self, *args):
        """
        ShowNodes(Handle_DrawTrSurf_Polygon3D self, Standard_Boolean const B)
        ShowNodes(Handle_DrawTrSurf_Polygon3D self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon3D_ShowNodes(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(Handle_DrawTrSurf_Polygon3D self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon3D_DrawOn(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_DrawTrSurf_Polygon3D self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon3D_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_DrawTrSurf_Polygon3D self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon3D_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_DrawTrSurf_Polygon3D self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon3D_Whatis(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_DrawTrSurf_Polygon3D self) -> char const *

        :rtype: const char *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon3D_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.Handle_DrawTrSurf_Polygon3D_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.Handle_DrawTrSurf_Polygon3D_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PickReject(self, *args):
        """
        PickReject(Handle_DrawTrSurf_Polygon3D self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon3D_PickReject(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_DrawTrSurf_Polygon3D self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon3D_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_DrawTrSurf_Polygon3D self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon3D_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_DrawTrSurf_Polygon3D self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon3D_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_DrawTrSurf_Polygon3D self) -> Standard_Boolean
        Visible(Handle_DrawTrSurf_Polygon3D self, Standard_Boolean const V)

        :type V: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon3D_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_DrawTrSurf_Polygon3D self) -> Standard_Boolean
        Protected(Handle_DrawTrSurf_Polygon3D self, Standard_Boolean const P)

        :type P: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon3D_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_DrawTrSurf_Polygon3D self) -> Standard_CString
        Name(Handle_DrawTrSurf_Polygon3D self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon3D_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_DrawTrSurf_Polygon3D self)

        Memory deallocator for transient classes


        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon3D_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_DrawTrSurf_Polygon3D self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_DrawTrSurf_Polygon3D self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon3D_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_DrawTrSurf_Polygon3D self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_DrawTrSurf_Polygon3D self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon3D_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_DrawTrSurf_Polygon3D self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon3D_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_DrawTrSurf_Polygon3D self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon3D_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_DrawTrSurf_Polygon3D self)

        Increments the reference counter of this object


        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon3D_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_DrawTrSurf_Polygon3D self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_Polygon3D_DecrementRefCounter(self, *args)

Handle_DrawTrSurf_Polygon3D_swigregister = _DrawTrSurf.Handle_DrawTrSurf_Polygon3D_swigregister
Handle_DrawTrSurf_Polygon3D_swigregister(Handle_DrawTrSurf_Polygon3D)

def Handle_DrawTrSurf_Polygon3D_DownCast(thing):
    return _DrawTrSurf.Handle_DrawTrSurf_Polygon3D_DownCast(thing)
Handle_DrawTrSurf_Polygon3D_DownCast = _DrawTrSurf.Handle_DrawTrSurf_Polygon3D_DownCast

class Handle_DrawTrSurf_BSplineCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_DrawTrSurf_BSplineCurve self)

        Nullify the handle


        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_DrawTrSurf_BSplineCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_DrawTrSurf_BSplineCurve self, DrawTrSurf_BSplineCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_DrawTrSurf_BSplineCurve self, Handle_DrawTrSurf_BSplineCurve theHandle) -> Handle_DrawTrSurf_BSplineCurve
        assign(Handle_DrawTrSurf_BSplineCurve self, DrawTrSurf_BSplineCurve thePtr) -> Handle_DrawTrSurf_BSplineCurve
        assign(Handle_DrawTrSurf_BSplineCurve self, Handle_DrawTrSurf_BSplineCurve theHandle) -> Handle_DrawTrSurf_BSplineCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_DrawTrSurf_BSplineCurve self) -> DrawTrSurf_BSplineCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_DrawTrSurf_BSplineCurve self) -> DrawTrSurf_BSplineCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_DrawTrSurf_BSplineCurve self) -> DrawTrSurf_BSplineCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve___ref__(self, *args)


    def __hash__(self):
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _DrawTrSurf.new_Handle_DrawTrSurf_BSplineCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_DownCast)
    __swig_destroy__ = _DrawTrSurf.delete_Handle_DrawTrSurf_BSplineCurve

    def DrawOn(self, *args):
        """
        DrawOn(Handle_DrawTrSurf_BSplineCurve self, Draw_Display dis)
        DrawOn(Handle_DrawTrSurf_BSplineCurve self, Draw_Display dis, Standard_Boolean const ShowPoles, Standard_Boolean const ShowKnots)
        DrawOn(Handle_DrawTrSurf_BSplineCurve self, Draw_Display dis, Standard_Real const U1, Standard_Real const U2, Standard_Integer const Pindex, Standard_Boolean const ShowPoles, Standard_Boolean const ShowKnots)

        :type dis: OCC.wrapper.Draw.Draw_Display
        :type U1: float
        :type U2: float
        :type Pindex: int
        :type ShowPoles: bool
        :type ShowKnots: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_DrawOn(self, *args)


    def ShowPoles(self, *args):
        """ShowPoles(Handle_DrawTrSurf_BSplineCurve self)"""
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_ShowPoles(self, *args)


    def ShowKnots(self, *args):
        """ShowKnots(Handle_DrawTrSurf_BSplineCurve self)"""
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_ShowKnots(self, *args)


    def ClearPoles(self, *args):
        """ClearPoles(Handle_DrawTrSurf_BSplineCurve self)"""
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_ClearPoles(self, *args)


    def ClearKnots(self, *args):
        """ClearKnots(Handle_DrawTrSurf_BSplineCurve self)"""
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_ClearKnots(self, *args)


    def FindPole(self, *args):
        """
        FindPole(Handle_DrawTrSurf_BSplineCurve self, Standard_Real const X, Standard_Real const Y, Draw_Display D, Standard_Real const Prec)

        Returns in <Index> the index of the first pole  of the
        curve projected by the Display <D> at a distance lower
        than <Prec> from <X,Y>. If no pole  is found  index is
        set to 0, else index is always  greater than the input
        value of index.

        :type X: float
        :type Y: float
        :type D: OCC.wrapper.Draw.Draw_Display
        :type Prec: float
        :type Index: int

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_FindPole(self, *args)


    def FindKnot(self, *args):
        """
        FindKnot(Handle_DrawTrSurf_BSplineCurve self, Standard_Real const X, Standard_Real const Y, Draw_Display D, Standard_Real const Prec)

        :type X: float
        :type Y: float
        :type D: OCC.wrapper.Draw.Draw_Display
        :type Prec: float
        :type Index: int

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_FindKnot(self, *args)


    def SetPolesColor(self, *args):
        """
        SetPolesColor(Handle_DrawTrSurf_BSplineCurve self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_SetPolesColor(self, *args)


    def SetKnotsColor(self, *args):
        """
        SetKnotsColor(Handle_DrawTrSurf_BSplineCurve self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_SetKnotsColor(self, *args)


    def SetKnotsShape(self, *args):
        """
        SetKnotsShape(Handle_DrawTrSurf_BSplineCurve self, Draw_MarkerShape const Shape)

        :type Shape: OCC.wrapper.Draw.Draw_MarkerShape

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_SetKnotsShape(self, *args)


    def KnotsShape(self, *args):
        """
        KnotsShape(Handle_DrawTrSurf_BSplineCurve self) -> Draw_MarkerShape

        :rtype: OCC.wrapper.Draw.Draw_MarkerShape

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_KnotsShape(self, *args)


    def KnotsColor(self, *args):
        """
        KnotsColor(Handle_DrawTrSurf_BSplineCurve self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_KnotsColor(self, *args)


    def PolesColor(self, *args):
        """
        PolesColor(Handle_DrawTrSurf_BSplineCurve self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_PolesColor(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_DrawTrSurf_BSplineCurve self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_Copy(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_DrawTrSurf_BSplineCurve self) -> char const *

        :rtype: const char *

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetCurve(self, *args):
        """
        GetCurve(Handle_DrawTrSurf_BSplineCurve self) -> Handle_Geom_Curve

        :rtype: OCC.wrapper.Geom.Handle_Geom_Curve

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_GetCurve(self, *args)


    def SetColor(self, *args):
        """
        SetColor(Handle_DrawTrSurf_BSplineCurve self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_SetColor(self, *args)


    def DisplayOrigin(self, *args):
        """
        DisplayOrigin(Handle_DrawTrSurf_BSplineCurve self) -> Standard_Boolean
        DisplayOrigin(Handle_DrawTrSurf_BSplineCurve self, Standard_Boolean const V)

        :type V: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_DisplayOrigin(self, *args)


    def ShowCurvature(self, *args):
        """ShowCurvature(Handle_DrawTrSurf_BSplineCurve self)"""
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_ShowCurvature(self, *args)


    def ClearCurvature(self, *args):
        """ClearCurvature(Handle_DrawTrSurf_BSplineCurve self)"""
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_ClearCurvature(self, *args)


    def SetRadiusMax(self, *args):
        """
        SetRadiusMax(Handle_DrawTrSurf_BSplineCurve self, Standard_Real const Radius)

        :type Radius: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_SetRadiusMax(self, *args)


    def SetRadiusRatio(self, *args):
        """
        SetRadiusRatio(Handle_DrawTrSurf_BSplineCurve self, Standard_Real const Ratio)

        :type Ratio: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_SetRadiusRatio(self, *args)


    def Color(self, *args):
        """
        Color(Handle_DrawTrSurf_BSplineCurve self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_Color(self, *args)


    def RadiusMax(self, *args):
        """
        RadiusMax(Handle_DrawTrSurf_BSplineCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_RadiusMax(self, *args)


    def RadiusRatio(self, *args):
        """
        RadiusRatio(Handle_DrawTrSurf_BSplineCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_RadiusRatio(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_DrawTrSurf_BSplineCurve self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_DrawTrSurf_BSplineCurve self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_Whatis(self, *args)


    def DrawCurve2dOn(self, *args):
        """
        DrawCurve2dOn(Handle_DrawTrSurf_BSplineCurve self, Adaptor2d_Curve2d C, Draw_Display D)

        Draw a polygon of the curve on the Display

        :type C: OCC.wrapper.Adaptor2d.Adaptor2d_Curve2d
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_DrawCurve2dOn(self, *args)


    def DrawCurveOn(self, *args):
        """
        DrawCurveOn(Handle_DrawTrSurf_BSplineCurve self, Adaptor3d_Curve C, Draw_Display D)

        Draw a polygon of the curve on the Display

        :type C: OCC.wrapper.Adaptor3d.Adaptor3d_Curve
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_DrawCurveOn(self, *args)


    def DrawIsoCurveOn(self, *args):
        """
        DrawIsoCurveOn(Handle_DrawTrSurf_BSplineCurve self, Adaptor3d_IsoCurve C, GeomAbs_IsoType const T, Standard_Real const P, Standard_Real const F, Standard_Real const L, Draw_Display D)

        Load C  with the specified iso  and Draw a polygon
        of the curve on the Display

        :type C: OCC.wrapper.Adaptor3d.Adaptor3d_IsoCurve
        :type T: OCC.wrapper.GeomAbs.GeomAbs_IsoType
        :type P: float
        :type F: float
        :type L: float
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_DrawIsoCurveOn(self, *args)


    def SetDiscretisation(self, *args):
        """
        SetDiscretisation(Handle_DrawTrSurf_BSplineCurve self, Standard_Integer const Discret)

        :type Discret: int

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_SetDiscretisation(self, *args)


    def GetDiscretisation(self, *args):
        """
        GetDiscretisation(Handle_DrawTrSurf_BSplineCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_GetDiscretisation(self, *args)


    def SetDeflection(self, *args):
        """
        SetDeflection(Handle_DrawTrSurf_BSplineCurve self, Standard_Real const Deflection)

        :type Deflection: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_SetDeflection(self, *args)


    def GetDeflection(self, *args):
        """
        GetDeflection(Handle_DrawTrSurf_BSplineCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_GetDeflection(self, *args)


    def SetDrawMode(self, *args):
        """
        SetDrawMode(Handle_DrawTrSurf_BSplineCurve self, Standard_Integer const DrawMode)

        :type DrawMode: int

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_SetDrawMode(self, *args)


    def GetDrawMode(self, *args):
        """
        GetDrawMode(Handle_DrawTrSurf_BSplineCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_GetDrawMode(self, *args)


    def PickReject(self, *args):
        """
        PickReject(Handle_DrawTrSurf_BSplineCurve self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_PickReject(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_DrawTrSurf_BSplineCurve self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_DrawTrSurf_BSplineCurve self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_DrawTrSurf_BSplineCurve self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_DrawTrSurf_BSplineCurve self) -> Standard_Boolean
        Visible(Handle_DrawTrSurf_BSplineCurve self, Standard_Boolean const V)

        :type V: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_DrawTrSurf_BSplineCurve self) -> Standard_Boolean
        Protected(Handle_DrawTrSurf_BSplineCurve self, Standard_Boolean const P)

        :type P: bool

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_DrawTrSurf_BSplineCurve self) -> Standard_CString
        Name(Handle_DrawTrSurf_BSplineCurve self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_DrawTrSurf_BSplineCurve self)

        Memory deallocator for transient classes


        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_DrawTrSurf_BSplineCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_DrawTrSurf_BSplineCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_DrawTrSurf_BSplineCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_DrawTrSurf_BSplineCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_DrawTrSurf_BSplineCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_DrawTrSurf_BSplineCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_DrawTrSurf_BSplineCurve self)

        Increments the reference counter of this object


        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_DrawTrSurf_BSplineCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_DecrementRefCounter(self, *args)

Handle_DrawTrSurf_BSplineCurve_swigregister = _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_swigregister
Handle_DrawTrSurf_BSplineCurve_swigregister(Handle_DrawTrSurf_BSplineCurve)

def Handle_DrawTrSurf_BSplineCurve_DownCast(thing):
    return _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_DownCast(thing)
Handle_DrawTrSurf_BSplineCurve_DownCast = _DrawTrSurf.Handle_DrawTrSurf_BSplineCurve_DownCast



