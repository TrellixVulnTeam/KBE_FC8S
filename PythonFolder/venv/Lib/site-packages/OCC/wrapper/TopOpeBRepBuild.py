# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TopOpeBRepBuild')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TopOpeBRepBuild')
    _TopOpeBRepBuild = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TopOpeBRepBuild', [dirname(__file__)])
        except ImportError:
            import _TopOpeBRepBuild
            return _TopOpeBRepBuild
        try:
            _mod = imp.load_module('_TopOpeBRepBuild', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TopOpeBRepBuild = swig_import_helper()
    del swig_import_helper
else:
    import _TopOpeBRepBuild
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TopOpeBRepBuild.delete_SwigPyIterator

    def value(self):
        return _TopOpeBRepBuild.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _TopOpeBRepBuild.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _TopOpeBRepBuild.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _TopOpeBRepBuild.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _TopOpeBRepBuild.SwigPyIterator_equal(self, x)

    def copy(self):
        return _TopOpeBRepBuild.SwigPyIterator_copy(self)

    def next(self):
        return _TopOpeBRepBuild.SwigPyIterator_next(self)

    def __next__(self):
        return _TopOpeBRepBuild.SwigPyIterator___next__(self)

    def previous(self):
        return _TopOpeBRepBuild.SwigPyIterator_previous(self)

    def advance(self, n):
        return _TopOpeBRepBuild.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _TopOpeBRepBuild.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _TopOpeBRepBuild.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _TopOpeBRepBuild.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _TopOpeBRepBuild.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _TopOpeBRepBuild.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _TopOpeBRepBuild.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _TopOpeBRepBuild.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _TopOpeBRepBuild.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_TopOpeBRepBuild.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _TopOpeBRepBuild.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _TopOpeBRepBuild.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TopOpeBRepBuild.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _TopOpeBRepBuild.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _TopOpeBRepBuild.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _TopOpeBRepBuild.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _TopOpeBRepBuild.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_TopOpeBRepBuild.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _TopOpeBRepBuild.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _TopOpeBRepBuild.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TopOpeBRepBuild.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _TopOpeBRepBuild.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _TopOpeBRepBuild.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _TopOpeBRepBuild.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _TopOpeBRepBuild.ptr_to_number(item)
ptr_to_number = _TopOpeBRepBuild.ptr_to_number

def HashCode(*args):
    return _TopOpeBRepBuild.HashCode(*args)
HashCode = _TopOpeBRepBuild.HashCode

def ptr_equal(a, b):
    return _TopOpeBRepBuild.ptr_equal(a, b)
ptr_equal = _TopOpeBRepBuild.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopOpeBRepDS
else:
    import TopOpeBRepDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopOpeBRepTool
else:
    import TopOpeBRepTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopExp
else:
    import TopExp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepClass3d
else:
    import BRepClass3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntCurveSurface
else:
    import IntCurveSurface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Intf
else:
    import Intf
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntAna
else:
    import IntAna
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntSurf
else:
    import IntSurf
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor3d
else:
    import Adaptor3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor2d
else:
    import Adaptor2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import math
else:
    import math
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntCurvesFace
else:
    import IntCurvesFace
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepAdaptor
else:
    import BRepAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2dAdaptor
else:
    import Geom2dAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAdaptor
else:
    import GeomAdaptor
del _swig_python_version_info
TopOpeBRepBuild_ANYLOOP = _TopOpeBRepBuild.TopOpeBRepBuild_ANYLOOP
TopOpeBRepBuild_BOUNDARY = _TopOpeBRepBuild.TopOpeBRepBuild_BOUNDARY
TopOpeBRepBuild_BLOCK = _TopOpeBRepBuild.TopOpeBRepBuild_BLOCK
class TopOpeBRepBuild_LoopClassifier(object):
    """classify loops in order to build Areas"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Compare(self, *args):
        """
        Compare(TopOpeBRepBuild_LoopClassifier self, Handle_TopOpeBRepBuild_Loop L1, Handle_TopOpeBRepBuild_Loop L2) -> TopAbs_State

        Returns the state of loop <L1> compared with loop <L2>.

        :type L1: OCC.wrapper.TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop
        :type L2: OCC.wrapper.TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop
        :rtype: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_LoopClassifier_Compare(self, *args)

    __swig_destroy__ = _TopOpeBRepBuild.delete_TopOpeBRepBuild_LoopClassifier
TopOpeBRepBuild_LoopClassifier_swigregister = _TopOpeBRepBuild.TopOpeBRepBuild_LoopClassifier_swigregister
TopOpeBRepBuild_LoopClassifier_swigregister(TopOpeBRepBuild_LoopClassifier)

class TopOpeBRepBuild_ShapeListOfShape(object):
    """represent shape + a list of shape"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopOpeBRepBuild_ShapeListOfShape self) -> TopOpeBRepBuild_ShapeListOfShape
        __init__(TopOpeBRepBuild_ShapeListOfShape self, TopoDS_Shape S) -> TopOpeBRepBuild_ShapeListOfShape
        __init__(TopOpeBRepBuild_ShapeListOfShape self, TopoDS_Shape S, NCollection_List_TopoDS_Shape L) -> TopOpeBRepBuild_ShapeListOfShape

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type L: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        this = _TopOpeBRepBuild.new_TopOpeBRepBuild_ShapeListOfShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def List(self, *args):
        """
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_ShapeListOfShape_List(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeList(self, *args):
        """
        ChangeList(TopOpeBRepBuild_ShapeListOfShape self) -> NCollection_List_TopoDS_Shape

        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShapeListOfShape_ChangeList(self, *args)


    def Shape(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_ShapeListOfShape_Shape(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeShape(self, *args):
        """
        ChangeShape(TopOpeBRepBuild_ShapeListOfShape self) -> TopoDS_Shape

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShapeListOfShape_ChangeShape(self, *args)

    __swig_destroy__ = _TopOpeBRepBuild.delete_TopOpeBRepBuild_ShapeListOfShape
TopOpeBRepBuild_ShapeListOfShape_swigregister = _TopOpeBRepBuild.TopOpeBRepBuild_ShapeListOfShape_swigregister
TopOpeBRepBuild_ShapeListOfShape_swigregister(TopOpeBRepBuild_ShapeListOfShape)

class TopOpeBRepBuild_AreaBuilder(object):
    """
    The AreaBuilder algorithm is  used  to
    reconstruct complex  topological objects as  Faces
    or Solids.
    * Loop is  the  composite topological object of
    the boundary. Wire for a Face. Shell for a Solid.
    *  LoopSet is a  tool describing the object  to
    build.  It gives an iteration  on Loops.  For each
    Loop it tells if it is on the boundary or if it is
    an interference.
    * LoopClassifier  is an algorithm  used to test
    if a Loop is inside  another  Loop.
    The  result of the  reconstruction is an iteration
    on the reconstructed areas.  An  area is described
    by a set of Loops.
    A AreaBuilder is built with :
    - a LoopSet describing the object to reconstruct.
    - a LoopClassifier providing the classification algorithm.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopOpeBRepBuild_AreaBuilder self) -> TopOpeBRepBuild_AreaBuilder
        __init__(TopOpeBRepBuild_AreaBuilder self, TopOpeBRepBuild_LoopSet LS, TopOpeBRepBuild_LoopClassifier LC, Standard_Boolean const ForceClass) -> TopOpeBRepBuild_AreaBuilder

        Creates a AreaBuilder to build the areas on
        the shapes described by <LS> using the classifier <LC>.

        :type LS: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_LoopSet
        :type LC: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_LoopClassifier
        :type ForceClass: bool

        """
        this = _TopOpeBRepBuild.new_TopOpeBRepBuild_AreaBuilder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def InitAreaBuilder(self, *args):
        """
        InitAreaBuilder(TopOpeBRepBuild_AreaBuilder self, TopOpeBRepBuild_LoopSet LS, TopOpeBRepBuild_LoopClassifier LC, Standard_Boolean const ForceClass)

        Sets a AreaBuilder to find the areas on
        the shapes described by <LS> using the classifier <LC>.

        :type LS: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_LoopSet
        :type LC: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_LoopClassifier
        :type ForceClass: bool

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_AreaBuilder_InitAreaBuilder(self, *args)


    def InitArea(self, *args):
        """
        InitArea(TopOpeBRepBuild_AreaBuilder self) -> Standard_Integer

        Initialize iteration on areas.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_AreaBuilder_InitArea(self, *args)


    def MoreArea(self, *args):
        """
        MoreArea(TopOpeBRepBuild_AreaBuilder self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_AreaBuilder_MoreArea(self, *args)


    def NextArea(self, *args):
        """NextArea(TopOpeBRepBuild_AreaBuilder self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_AreaBuilder_NextArea(self, *args)


    def InitLoop(self, *args):
        """
        InitLoop(TopOpeBRepBuild_AreaBuilder self) -> Standard_Integer

        Initialize iteration on loops of current Area.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_AreaBuilder_InitLoop(self, *args)


    def MoreLoop(self, *args):
        """
        MoreLoop(TopOpeBRepBuild_AreaBuilder self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_AreaBuilder_MoreLoop(self, *args)


    def NextLoop(self, *args):
        """NextLoop(TopOpeBRepBuild_AreaBuilder self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_AreaBuilder_NextLoop(self, *args)


    def Loop(self, *args):
        """
        Returns the current Loop in the current area.

        :rtype: OCC.wrapper.TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_AreaBuilder_Loop(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ADD_Loop_TO_LISTOFLoop(self, *args):
        """
        ADD_Loop_TO_LISTOFLoop(TopOpeBRepBuild_AreaBuilder self, Handle_TopOpeBRepBuild_Loop L, NCollection_List_Handle_TopOpeBRepBuild_Loop LOL, Standard_Address const s=None)

        :type L: OCC.wrapper.TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop
        :type LOL: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_ListOfLoop
        :type s: OCC.wrapper.Standard.Standard_Address

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_AreaBuilder_ADD_Loop_TO_LISTOFLoop(self, *args)


    def REM_Loop_FROM_LISTOFLoop(self, *args):
        """
        REM_Loop_FROM_LISTOFLoop(TopOpeBRepBuild_AreaBuilder self, TopOpeBRepBuild_ListIteratorOfListOfLoop & ITLOL, NCollection_List_Handle_TopOpeBRepBuild_Loop LOL, Standard_Address const s=None)

        :type ITLOL: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_ListIteratorOfListOfLoop
        :type LOL: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_ListOfLoop
        :type s: OCC.wrapper.Standard.Standard_Address

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_AreaBuilder_REM_Loop_FROM_LISTOFLoop(self, *args)


    def ADD_LISTOFLoop_TO_LISTOFLoop(self, *args):
        """
        ADD_LISTOFLoop_TO_LISTOFLoop(TopOpeBRepBuild_AreaBuilder self, NCollection_List_Handle_TopOpeBRepBuild_Loop LOL1, NCollection_List_Handle_TopOpeBRepBuild_Loop LOL2, Standard_Address const s=None, Standard_Address const s1=None, Standard_Address const s2=None)

        :type LOL1: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_ListOfLoop
        :type LOL2: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_ListOfLoop
        :type s: OCC.wrapper.Standard.Standard_Address
        :type s1: OCC.wrapper.Standard.Standard_Address
        :type s2: OCC.wrapper.Standard.Standard_Address

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_AreaBuilder_ADD_LISTOFLoop_TO_LISTOFLoop(self, *args)

    __swig_destroy__ = _TopOpeBRepBuild.delete_TopOpeBRepBuild_AreaBuilder
TopOpeBRepBuild_AreaBuilder_swigregister = _TopOpeBRepBuild.TopOpeBRepBuild_AreaBuilder_swigregister
TopOpeBRepBuild_AreaBuilder_swigregister(TopOpeBRepBuild_AreaBuilder)

class TopOpeBRepBuild_ShapeSet(object):
    """
    Auxiliary class providing an exploration of a set
    of shapes to build faces or solids.
    To build faces  : shapes are wires, elements are edges.
    To build solids : shapes are shells, elements are faces.
    The ShapeSet stores a list of shapes, a list of elements
    to start reconstructions, and a map to search neighbours.
    The map stores the connection  between elements through
    subshapes of type <SubShapeType> given in constructor.
    <SubShapeType> is :
    - TopAbs_VERTEX to connect edges
    - TopAbs_EDGE to connect faces

    Signature needed by the BlockBuilder :
    InitStartElements(me : in out)
    MoreStartElements(me) returns Boolean;
    NextStartElement(me : in out);
    StartElement(me) returns Shape; ---C++: return const &
    InitNeighbours(me : in out; S : Shape);
    MoreNeighbours(me) returns Boolean;
    NextNeighbour(me : in out);
    Neighbour(me) returns Shape; ---C++: return const &
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopOpeBRepBuild_ShapeSet self, TopAbs_ShapeEnum const SubShapeType, Standard_Boolean const checkshape) -> TopOpeBRepBuild_ShapeSet

        Creates a ShapeSet  in order to build shapes connected
        by <SubShapeType>  shapes.
        <checkshape>:check (or not) the shapes, startelements, elements added.

        :type SubShapeType: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :type checkshape: bool

        """
        this = _TopOpeBRepBuild.new_TopOpeBRepBuild_ShapeSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddShape(self, *args):
        """
        AddShape(TopOpeBRepBuild_ShapeSet self, TopoDS_Shape S)

        Adds <S> to the list of shapes. (wires or shells).

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShapeSet_AddShape(self, *args)


    def AddStartElement(self, *args):
        """
        AddStartElement(TopOpeBRepBuild_ShapeSet self, TopoDS_Shape S)

        (S is a face or edge)
        Add S to the list of starting shapes used for reconstructions.
        apply AddElement(S).

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShapeSet_AddStartElement(self, *args)


    def AddElement(self, *args):
        """
        AddElement(TopOpeBRepBuild_ShapeSet self, TopoDS_Shape S)

        for each subshape SE of S of type mySubShapeType
        - Add subshapes of S to the map of subshapes (mySubShapeMap)
        - Add S to the list of shape incident to subshapes of S.

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShapeSet_AddElement(self, *args)


    def StartElements(self, *args):
        """
        return a reference on myStartShapes

        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_ShapeSet_StartElements(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def InitShapes(self, *args):
        """InitShapes(TopOpeBRepBuild_ShapeSet self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShapeSet_InitShapes(self, *args)


    def MoreShapes(self, *args):
        """
        MoreShapes(TopOpeBRepBuild_ShapeSet self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShapeSet_MoreShapes(self, *args)


    def NextShape(self, *args):
        """NextShape(TopOpeBRepBuild_ShapeSet self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShapeSet_NextShape(self, *args)


    def Shape(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_ShapeSet_Shape(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def InitStartElements(self, *args):
        """InitStartElements(TopOpeBRepBuild_ShapeSet self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShapeSet_InitStartElements(self, *args)


    def MoreStartElements(self, *args):
        """
        MoreStartElements(TopOpeBRepBuild_ShapeSet self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShapeSet_MoreStartElements(self, *args)


    def NextStartElement(self, *args):
        """NextStartElement(TopOpeBRepBuild_ShapeSet self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShapeSet_NextStartElement(self, *args)


    def StartElement(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_ShapeSet_StartElement(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def InitNeighbours(self, *args):
        """
        InitNeighbours(TopOpeBRepBuild_ShapeSet self, TopoDS_Shape S)

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShapeSet_InitNeighbours(self, *args)


    def MoreNeighbours(self, *args):
        """
        MoreNeighbours(TopOpeBRepBuild_ShapeSet self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShapeSet_MoreNeighbours(self, *args)


    def NextNeighbour(self, *args):
        """NextNeighbour(TopOpeBRepBuild_ShapeSet self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShapeSet_NextNeighbour(self, *args)


    def Neighbour(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_ShapeSet_Neighbour(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeStartShapes(self, *args):
        """
        ChangeStartShapes(TopOpeBRepBuild_ShapeSet self) -> NCollection_List_TopoDS_Shape

        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShapeSet_ChangeStartShapes(self, *args)


    def FindNeighbours(self, *args):
        """
        FindNeighbours(TopOpeBRepBuild_ShapeSet self)

        Build the list of neighbour shapes of myCurrentShape
        (neighbour shapes and myCurrentShapes are of type t)
        Initialize myIncidentShapesIter on neighbour shapes.


        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShapeSet_FindNeighbours(self, *args)


    def MakeNeighboursList(self, *args):
        """
        :type E: OCC.wrapper.TopoDS.TopoDS_Shape
        :type V: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_ShapeSet_MakeNeighboursList(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def MaxNumberSubShape(self, *args):
        """
        MaxNumberSubShape(TopOpeBRepBuild_ShapeSet self, TopoDS_Shape Shape) -> Standard_Integer

        :type Shape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShapeSet_MaxNumberSubShape(self, *args)


    def CheckShape(self, *args):
        """
        CheckShape(TopOpeBRepBuild_ShapeSet self, Standard_Boolean const checkshape)
        CheckShape(TopOpeBRepBuild_ShapeSet self) -> Standard_Boolean
        CheckShape(TopOpeBRepBuild_ShapeSet self, TopoDS_Shape S, Standard_Boolean const checkgeom) -> Standard_Boolean

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type checkgeom: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShapeSet_CheckShape(self, *args)


    def DumpName(self, *args):
        """
        DumpName(TopOpeBRepBuild_ShapeSet self, Standard_OStream & OS, TCollection_AsciiString str)

        :type OS: OCC.wrapper.Standard.Standard_OStream
        :type str: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShapeSet_DumpName(self, *args)


    def DumpCheck(self, *args):
        """
        DumpCheck(TopOpeBRepBuild_ShapeSet self, Standard_OStream & OS, TCollection_AsciiString str, TopoDS_Shape S, Standard_Boolean const chk)

        :type OS: OCC.wrapper.Standard.Standard_OStream
        :type str: OCC.wrapper.TCollection.TCollection_AsciiString
        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type chk: bool

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShapeSet_DumpCheck(self, *args)


    def DumpSS(self, *args):
        """DumpSS(TopOpeBRepBuild_ShapeSet self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShapeSet_DumpSS(self, *args)


    def DumpBB(self, *args):
        """DumpBB(TopOpeBRepBuild_ShapeSet self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShapeSet_DumpBB(self, *args)


    def DEBName(self, *args):
        """
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_ShapeSet_DEBName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DEBNumber(self, *args):
        """
        DEBNumber(TopOpeBRepBuild_ShapeSet self, Standard_Integer const I)
        DEBNumber(TopOpeBRepBuild_ShapeSet self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShapeSet_DEBNumber(self, *args)


    def SName(self, *args):
        """
        SName(TopOpeBRepBuild_ShapeSet self, TopoDS_Shape S, TCollection_AsciiString sb, TCollection_AsciiString sa) -> TCollection_AsciiString
        SName(TopOpeBRepBuild_ShapeSet self, NCollection_List_TopoDS_Shape S, TCollection_AsciiString sb, TCollection_AsciiString sa) -> TCollection_AsciiString

        :type S: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type sb: OCC.wrapper.TCollection.TCollection_AsciiString
        :type sa: OCC.wrapper.TCollection.TCollection_AsciiString
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShapeSet_SName(self, *args)


    def SNameori(self, *args):
        """
        SNameori(TopOpeBRepBuild_ShapeSet self, TopoDS_Shape S, TCollection_AsciiString sb, TCollection_AsciiString sa) -> TCollection_AsciiString
        SNameori(TopOpeBRepBuild_ShapeSet self, NCollection_List_TopoDS_Shape S, TCollection_AsciiString sb, TCollection_AsciiString sa) -> TCollection_AsciiString

        :type S: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type sb: OCC.wrapper.TCollection.TCollection_AsciiString
        :type sa: OCC.wrapper.TCollection.TCollection_AsciiString
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShapeSet_SNameori(self, *args)

    __swig_destroy__ = _TopOpeBRepBuild.delete_TopOpeBRepBuild_ShapeSet
TopOpeBRepBuild_ShapeSet_swigregister = _TopOpeBRepBuild.TopOpeBRepBuild_ShapeSet_swigregister
TopOpeBRepBuild_ShapeSet_swigregister(TopOpeBRepBuild_ShapeSet)

class TopOpeBRepBuild_Area2dBuilder(TopOpeBRepBuild_AreaBuilder):
    """
    The Area2dBuilder algorithm is used to construct Faces from a LoopSet,
    where the Loop is the composite topological object of the boundary,
    here wire or block of edges.
    The LoopSet gives an iteration on Loops.
    For each Loop  it indicates if it is on the boundary (wire) or if it
    results from  an interference (block of edges).
    The result of the Area2dBuilder is an iteration on areas.
    An area is described by a set of Loops.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopOpeBRepBuild_Area2dBuilder self) -> TopOpeBRepBuild_Area2dBuilder
        __init__(TopOpeBRepBuild_Area2dBuilder self, TopOpeBRepBuild_LoopSet LS, TopOpeBRepBuild_LoopClassifier LC, Standard_Boolean const ForceClass) -> TopOpeBRepBuild_Area2dBuilder

        Creates a Area2dBuilder to build faces on
        the (wires,blocks of edge) of <LS>, using the classifier <LC>.

        :type LS: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_LoopSet
        :type LC: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_LoopClassifier
        :type ForceClass: bool

        """
        this = _TopOpeBRepBuild.new_TopOpeBRepBuild_Area2dBuilder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def InitAreaBuilder(self, *args):
        """
        InitAreaBuilder(TopOpeBRepBuild_Area2dBuilder self, TopOpeBRepBuild_LoopSet LS, TopOpeBRepBuild_LoopClassifier LC, Standard_Boolean const ForceClass)

        Sets a Area1dBuilder to find the areas of
        the shapes described by <LS> using the classifier <LC>.

        :type LS: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_LoopSet
        :type LC: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_LoopClassifier
        :type ForceClass: bool

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Area2dBuilder_InitAreaBuilder(self, *args)

    __swig_destroy__ = _TopOpeBRepBuild.delete_TopOpeBRepBuild_Area2dBuilder
TopOpeBRepBuild_Area2dBuilder_swigregister = _TopOpeBRepBuild.TopOpeBRepBuild_Area2dBuilder_swigregister
TopOpeBRepBuild_Area2dBuilder_swigregister(TopOpeBRepBuild_Area2dBuilder)

class TopOpeBRepBuild_VertexInfo(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """__init__(TopOpeBRepBuild_VertexInfo self) -> TopOpeBRepBuild_VertexInfo"""
        this = _TopOpeBRepBuild.new_TopOpeBRepBuild_VertexInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetVertex(self, *args):
        """
        SetVertex(TopOpeBRepBuild_VertexInfo self, TopoDS_Vertex aV)

        :type aV: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_VertexInfo_SetVertex(self, *args)


    def Vertex(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_VertexInfo_Vertex(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetSmart(self, *args):
        """
        SetSmart(TopOpeBRepBuild_VertexInfo self, Standard_Boolean const aFlag)

        :type aFlag: bool

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_VertexInfo_SetSmart(self, *args)


    def Smart(self, *args):
        """
        Smart(TopOpeBRepBuild_VertexInfo self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_VertexInfo_Smart(self, *args)


    def NbCases(self, *args):
        """
        NbCases(TopOpeBRepBuild_VertexInfo self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_VertexInfo_NbCases(self, *args)


    def FoundOut(self, *args):
        """
        FoundOut(TopOpeBRepBuild_VertexInfo self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_VertexInfo_FoundOut(self, *args)


    def AddIn(self, *args):
        """
        AddIn(TopOpeBRepBuild_VertexInfo self, TopoDS_Edge anE)

        :type anE: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_VertexInfo_AddIn(self, *args)


    def AddOut(self, *args):
        """
        AddOut(TopOpeBRepBuild_VertexInfo self, TopoDS_Edge anE)

        :type anE: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_VertexInfo_AddOut(self, *args)


    def SetCurrentIn(self, *args):
        """
        SetCurrentIn(TopOpeBRepBuild_VertexInfo self, TopoDS_Edge anE)

        :type anE: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_VertexInfo_SetCurrentIn(self, *args)


    def EdgesIn(self, *args):
        """
        :rtype: OCC.wrapper.TopTools.TopTools_IndexedMapOfOrientedShape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_VertexInfo_EdgesIn(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def EdgesOut(self, *args):
        """
        :rtype: OCC.wrapper.TopTools.TopTools_IndexedMapOfOrientedShape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_VertexInfo_EdgesOut(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeEdgesOut(self, *args):
        """
        ChangeEdgesOut(TopOpeBRepBuild_VertexInfo self) -> NCollection_IndexedMap_TopoDS_Shape_TopTools_OrientedShapeMapHasher

        :rtype: OCC.wrapper.TopTools.TopTools_IndexedMapOfOrientedShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_VertexInfo_ChangeEdgesOut(self, *args)


    def Dump(self, *args):
        """Dump(TopOpeBRepBuild_VertexInfo self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_VertexInfo_Dump(self, *args)


    def CurrentOut(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_VertexInfo_CurrentOut(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def AppendPassed(self, *args):
        """
        AppendPassed(TopOpeBRepBuild_VertexInfo self, TopoDS_Edge anE)

        :type anE: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_VertexInfo_AppendPassed(self, *args)


    def RemovePassed(self, *args):
        """RemovePassed(TopOpeBRepBuild_VertexInfo self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_VertexInfo_RemovePassed(self, *args)


    def ListPassed(self, *args):
        """
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_VertexInfo_ListPassed(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Prepare(self, *args):
        """
        Prepare(TopOpeBRepBuild_VertexInfo self, NCollection_List_TopoDS_Shape aL)

        :type aL: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_VertexInfo_Prepare(self, *args)

    __swig_destroy__ = _TopOpeBRepBuild.delete_TopOpeBRepBuild_VertexInfo
TopOpeBRepBuild_VertexInfo_swigregister = _TopOpeBRepBuild.TopOpeBRepBuild_VertexInfo_swigregister
TopOpeBRepBuild_VertexInfo_swigregister(TopOpeBRepBuild_VertexInfo)

class TopOpeBRepBuild_Area3dBuilder(TopOpeBRepBuild_AreaBuilder):
    """
    The Area3dBuilder algorithm is used to construct Solids from a LoopSet,
    where the Loop is the composite topological object of the boundary,
    here wire or block of edges.
    The LoopSet gives an iteration on Loops.
    For each Loop  it indicates if it is on the boundary (wire) or if it
    results from  an interference (block of edges).
    The result of the Area3dBuilder is an iteration on areas.
    An area is described by a set of Loops.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopOpeBRepBuild_Area3dBuilder self) -> TopOpeBRepBuild_Area3dBuilder
        __init__(TopOpeBRepBuild_Area3dBuilder self, TopOpeBRepBuild_LoopSet LS, TopOpeBRepBuild_LoopClassifier LC, Standard_Boolean const ForceClass) -> TopOpeBRepBuild_Area3dBuilder

        Creates a Area3dBuilder to build Solids on
        the (shells,blocks of face) of <LS>, using the classifier <LC>.

        :type LS: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_LoopSet
        :type LC: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_LoopClassifier
        :type ForceClass: bool

        """
        this = _TopOpeBRepBuild.new_TopOpeBRepBuild_Area3dBuilder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def InitAreaBuilder(self, *args):
        """
        InitAreaBuilder(TopOpeBRepBuild_Area3dBuilder self, TopOpeBRepBuild_LoopSet LS, TopOpeBRepBuild_LoopClassifier LC, Standard_Boolean const ForceClass)

        Sets a Area1dBuilder to find the areas of
        the shapes described by <LS> using the classifier <LC>.

        :type LS: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_LoopSet
        :type LC: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_LoopClassifier
        :type ForceClass: bool

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Area3dBuilder_InitAreaBuilder(self, *args)

    __swig_destroy__ = _TopOpeBRepBuild.delete_TopOpeBRepBuild_Area3dBuilder
TopOpeBRepBuild_Area3dBuilder_swigregister = _TopOpeBRepBuild.TopOpeBRepBuild_Area3dBuilder_swigregister
TopOpeBRepBuild_Area3dBuilder_swigregister(TopOpeBRepBuild_Area3dBuilder)

class TopOpeBRepBuild_Tools(object):
    """Auxiliary  methods  used  in  TopOpeBRepBuild_Builder1  class"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def FindState(*args):
        """
        FindState(TopoDS_Shape aVertex, TopAbs_State const aState, TopAbs_ShapeEnum const aShapeEnum, NCollection_IndexedDataMap_TopoDS_Shape_TopTools_ListOfShape_TopTools_ShapeMapHasher aMapVertexEdges, NCollection_Map_TopoDS_Shape_TopTools_ShapeMapHasher aMapProcessedVertices, NCollection_DataMap_TopoDS_Shape_TopAbs_State_TopTools_ShapeMapHasher aMapVs)

        :type aVertex: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aState: OCC.wrapper.TopAbs.TopAbs_State
        :type aShapeEnum: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :type aMapVertexEdges: OCC.wrapper.TopTools.TopTools_IndexedDataMapOfShapeListOfShape
        :type aMapProcessedVertices: OCC.wrapper.TopTools.TopTools_MapOfShape
        :type aMapVs: OCC.wrapper.TopOpeBRepDS.TopOpeBRepDS_DataMapOfShapeState

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_FindState(*args)

    FindState = staticmethod(FindState)

    def PropagateState(*args):
        """
        PropagateState(NCollection_DataMap_TopoDS_Shape_TopAbs_State_TopTools_ShapeMapHasher aSplEdgesState, NCollection_IndexedMap_TopoDS_Shape_TopTools_ShapeMapHasher anEdgesToRestMap, TopAbs_ShapeEnum const aShapeEnum1, TopAbs_ShapeEnum const aShapeEnum2, TopOpeBRepTool_ShapeClassifier aShapeClassifier, NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepDS_ShapeWithState_TopTools_ShapeMapHasher aMapOfShapeWithState, NCollection_Map_TopoDS_Shape_TopTools_ShapeMapHasher anUnkStateShapes)

        :type aSplEdgesState: OCC.wrapper.TopOpeBRepDS.TopOpeBRepDS_DataMapOfShapeState
        :type anEdgesToRestMap: OCC.wrapper.TopTools.TopTools_IndexedMapOfShape
        :type aShapeEnum1: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :type aShapeEnum2: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :type aShapeClassifier: OCC.wrapper.TopOpeBRepTool.TopOpeBRepTool_ShapeClassifier
        :type aMapOfShapeWithState: OCC.wrapper.TopOpeBRepDS.TopOpeBRepDS_IndexedDataMapOfShapeWithState
        :type anUnkStateShapes: OCC.wrapper.TopTools.TopTools_MapOfShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_PropagateState(*args)

    PropagateState = staticmethod(PropagateState)

    def FindStateThroughVertex(*args):
        """
        FindStateThroughVertex(TopoDS_Shape aShape, TopOpeBRepTool_ShapeClassifier aShapeClassifier, NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepDS_ShapeWithState_TopTools_ShapeMapHasher aMapOfShapeWithState, NCollection_Map_TopoDS_Shape_TopTools_ShapeMapHasher anAvoidSubshMap) -> TopAbs_State

        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aShapeClassifier: OCC.wrapper.TopOpeBRepTool.TopOpeBRepTool_ShapeClassifier
        :type aMapOfShapeWithState: OCC.wrapper.TopOpeBRepDS.TopOpeBRepDS_IndexedDataMapOfShapeWithState
        :type anAvoidSubshMap: OCC.wrapper.TopTools.TopTools_MapOfShape
        :rtype: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_FindStateThroughVertex(*args)

    FindStateThroughVertex = staticmethod(FindStateThroughVertex)

    def PropagateStateForWires(*args):
        """
        PropagateStateForWires(NCollection_IndexedMap_TopoDS_Shape_TopTools_ShapeMapHasher aFacesToRestMap, NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepDS_ShapeWithState_TopTools_ShapeMapHasher aMapOfShapeWithState)

        :type aFacesToRestMap: OCC.wrapper.TopTools.TopTools_IndexedMapOfShape
        :type aMapOfShapeWithState: OCC.wrapper.TopOpeBRepDS.TopOpeBRepDS_IndexedDataMapOfShapeWithState

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_PropagateStateForWires(*args)

    PropagateStateForWires = staticmethod(PropagateStateForWires)

    def SpreadStateToChild(*args):
        """
        SpreadStateToChild(TopoDS_Shape aShape, TopAbs_State const aState, NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepDS_ShapeWithState_TopTools_ShapeMapHasher aMapOfShapeWithState)

        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aState: OCC.wrapper.TopAbs.TopAbs_State
        :type aMapOfShapeWithState: OCC.wrapper.TopOpeBRepDS.TopOpeBRepDS_IndexedDataMapOfShapeWithState

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_SpreadStateToChild(*args)

    SpreadStateToChild = staticmethod(SpreadStateToChild)

    def FindState1(*args):
        """
        FindState1(TopoDS_Shape anEdge, TopAbs_State const aState, NCollection_IndexedDataMap_TopoDS_Shape_TopTools_ListOfShape_TopTools_ShapeMapHasher aMapEdgesFaces, NCollection_Map_TopoDS_Shape_TopTools_ShapeMapHasher aMapProcessedVertices, NCollection_DataMap_TopoDS_Shape_TopAbs_State_TopTools_ShapeMapHasher aMapVs)

        :type anEdge: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aState: OCC.wrapper.TopAbs.TopAbs_State
        :type aMapEdgesFaces: OCC.wrapper.TopTools.TopTools_IndexedDataMapOfShapeListOfShape
        :type aMapProcessedVertices: OCC.wrapper.TopTools.TopTools_MapOfShape
        :type aMapVs: OCC.wrapper.TopOpeBRepDS.TopOpeBRepDS_DataMapOfShapeState

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_FindState1(*args)

    FindState1 = staticmethod(FindState1)

    def FindState2(*args):
        """
        FindState2(TopoDS_Shape anEdge, TopAbs_State const aState, NCollection_IndexedDataMap_TopoDS_Shape_TopTools_ListOfShape_TopTools_ShapeMapHasher aMapEdgesFaces, NCollection_Map_TopoDS_Shape_TopTools_ShapeMapHasher aMapProcessedEdges, NCollection_DataMap_TopoDS_Shape_TopAbs_State_TopTools_ShapeMapHasher aMapVs)

        :type anEdge: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aState: OCC.wrapper.TopAbs.TopAbs_State
        :type aMapEdgesFaces: OCC.wrapper.TopTools.TopTools_IndexedDataMapOfShapeListOfShape
        :type aMapProcessedEdges: OCC.wrapper.TopTools.TopTools_MapOfShape
        :type aMapVs: OCC.wrapper.TopOpeBRepDS.TopOpeBRepDS_DataMapOfShapeState

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_FindState2(*args)

    FindState2 = staticmethod(FindState2)

    def GetAdjacentFace(*args):
        """
        GetAdjacentFace(TopoDS_Shape aFaceObj, TopoDS_Shape anEObj, NCollection_IndexedDataMap_TopoDS_Shape_TopTools_ListOfShape_TopTools_ShapeMapHasher anEdgeFaceMap, TopoDS_Shape anAdjFaceObj) -> Standard_Boolean

        :type aFaceObj: OCC.wrapper.TopoDS.TopoDS_Shape
        :type anEObj: OCC.wrapper.TopoDS.TopoDS_Shape
        :type anEdgeFaceMap: OCC.wrapper.TopTools.TopTools_IndexedDataMapOfShapeListOfShape
        :type anAdjFaceObj: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_GetAdjacentFace(*args)

    GetAdjacentFace = staticmethod(GetAdjacentFace)

    def GetNormalToFaceOnEdge(*args):
        """
        GetNormalToFaceOnEdge(TopoDS_Face aFObj, TopoDS_Edge anEdgeObj, gp_Vec aDirNormal)

        :type aFObj: OCC.wrapper.TopoDS.TopoDS_Face
        :type anEdgeObj: OCC.wrapper.TopoDS.TopoDS_Edge
        :type aDirNormal: OCC.wrapper.gp.gp_Vec

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_GetNormalToFaceOnEdge(*args)

    GetNormalToFaceOnEdge = staticmethod(GetNormalToFaceOnEdge)

    def GetNormalInNearestPoint(*args):
        """
        GetNormalInNearestPoint(TopoDS_Face aFace, TopoDS_Edge anEdge, gp_Vec aNormal)

        This  function  used  to  compute  normal  in  point  which  is  located
        near  the  point  with  param  UV    (used  for  computation  of  normals  where  the  normal  in  the  point UV  equal  to  zero).

        :type aFace: OCC.wrapper.TopoDS.TopoDS_Face
        :type anEdge: OCC.wrapper.TopoDS.TopoDS_Edge
        :type aNormal: OCC.wrapper.gp.gp_Vec

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_GetNormalInNearestPoint(*args)

    GetNormalInNearestPoint = staticmethod(GetNormalInNearestPoint)

    def GetTangentToEdgeEdge(*args):
        """
        GetTangentToEdgeEdge(TopoDS_Face aFObj, TopoDS_Edge anEdgeObj, TopoDS_Edge aOriEObj, gp_Vec aTangent) -> Standard_Boolean

        :type aFObj: OCC.wrapper.TopoDS.TopoDS_Face
        :type anEdgeObj: OCC.wrapper.TopoDS.TopoDS_Edge
        :type aOriEObj: OCC.wrapper.TopoDS.TopoDS_Edge
        :type aTangent: OCC.wrapper.gp.gp_Vec
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_GetTangentToEdgeEdge(*args)

    GetTangentToEdgeEdge = staticmethod(GetTangentToEdgeEdge)

    def GetTangentToEdge(*args):
        """
        GetTangentToEdge(TopoDS_Edge anEdgeObj, gp_Vec aTangent) -> Standard_Boolean

        :type anEdgeObj: OCC.wrapper.TopoDS.TopoDS_Edge
        :type aTangent: OCC.wrapper.gp.gp_Vec
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_GetTangentToEdge(*args)

    GetTangentToEdge = staticmethod(GetTangentToEdge)

    def UpdatePCurves(*args):
        """
        UpdatePCurves(TopoDS_Wire aWire, TopoDS_Face fromFace, TopoDS_Face toFace)

        Recompute  PCurves  of  the  all  edges  from  the  wire  on  the  <toFace>

        :type aWire: OCC.wrapper.TopoDS.TopoDS_Wire
        :type fromFace: OCC.wrapper.TopoDS.TopoDS_Face
        :type toFace: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_UpdatePCurves(*args)

    UpdatePCurves = staticmethod(UpdatePCurves)

    def UpdateEdgeOnPeriodicalFace(*args):
        """
        UpdateEdgeOnPeriodicalFace(TopoDS_Edge aEdgeToUpdate, TopoDS_Face OldFace, TopoDS_Face NewFace)

        recompute  PCurves  of  the  closing  (SIM  ,  with 2  PCurves)  edge on  the  NewFace

        :type aEdgeToUpdate: OCC.wrapper.TopoDS.TopoDS_Edge
        :type OldFace: OCC.wrapper.TopoDS.TopoDS_Face
        :type NewFace: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_UpdateEdgeOnPeriodicalFace(*args)

    UpdateEdgeOnPeriodicalFace = staticmethod(UpdateEdgeOnPeriodicalFace)

    def UpdateEdgeOnFace(*args):
        """
        UpdateEdgeOnFace(TopoDS_Edge aEdgeToUpdate, TopoDS_Face OldFace, TopoDS_Face NewFace)

        recompute  PCurve  of  the    edge on  the  NewFace

        :type aEdgeToUpdate: OCC.wrapper.TopoDS.TopoDS_Edge
        :type OldFace: OCC.wrapper.TopoDS.TopoDS_Face
        :type NewFace: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_UpdateEdgeOnFace(*args)

    UpdateEdgeOnFace = staticmethod(UpdateEdgeOnFace)

    def IsDegEdgesTheSame(*args):
        """
        IsDegEdgesTheSame(TopoDS_Shape anE1, TopoDS_Shape anE2) -> Standard_Boolean

        :type anE1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type anE2: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_IsDegEdgesTheSame(*args)

    IsDegEdgesTheSame = staticmethod(IsDegEdgesTheSame)

    def NormalizeFace(*args):
        """
        NormalizeFace(TopoDS_Shape oldFace, TopoDS_Shape corrFace)

        test  if  <oldFace>  does  not  contain  INTERNAL  or  EXTERNAL  edges
        and  remove  such  edges  in  case  of  its  presence.  The  result  is  stored  in  <corrFace>

        :type oldFace: OCC.wrapper.TopoDS.TopoDS_Shape
        :type corrFace: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_NormalizeFace(*args)

    NormalizeFace = staticmethod(NormalizeFace)

    def CorrectFace2d(*args):
        """
        CorrectFace2d(TopoDS_Shape oldFace, TopoDS_Shape corrFace, NCollection_IndexedMap_TopoDS_Shape_TopTools_OrientedShapeMapHasher aSourceShapes, NCollection_IndexedDataMap_TopoDS_Shape_TopoDS_Shape_TopTools_ShapeMapHasher aMapOfCorrect2dEdges)

        test  if  UV  representation  of  <oldFace>  is  good  (i.e.  face  is  closed  in  2d).
        if  face  is  not  closed  ,  this  method  will  try  to  close  such  face  and  will
        return  corrected  edges  in  the  <aMapOfCorrect2dEdges>.  Parameter  <aSourceShapes>
        used  to  fix  the  edge  (or  wires)  which  should  be  correct  (Corrector  used  it  as  a  start  shapes).
        NOTE  :  Parameter  corrFace  doesn't  mean  anything.  If  you  want  to use  this  method  ,  rebuild  resulting  face
        after  by  yourself  using  corrected  edges.

        :type oldFace: OCC.wrapper.TopoDS.TopoDS_Shape
        :type corrFace: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aSourceShapes: OCC.wrapper.TopTools.TopTools_IndexedMapOfOrientedShape
        :type aMapOfCorrect2dEdges: OCC.wrapper.TopTools.TopTools_IndexedDataMapOfShapeShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_CorrectFace2d(*args)

    CorrectFace2d = staticmethod(CorrectFace2d)

    def CorrectTolerances(*args):
        """
        CorrectTolerances(TopoDS_Shape aS, Standard_Real const aTolMax=0.0001)

        :type aS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aTolMax: float

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_CorrectTolerances(*args)

    CorrectTolerances = staticmethod(CorrectTolerances)

    def CorrectCurveOnSurface(*args):
        """
        CorrectCurveOnSurface(TopoDS_Shape aS, Standard_Real const aTolMax=0.0001)

        :type aS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aTolMax: float

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_CorrectCurveOnSurface(*args)

    CorrectCurveOnSurface = staticmethod(CorrectCurveOnSurface)

    def CorrectPointOnCurve(*args):
        """
        CorrectPointOnCurve(TopoDS_Shape aS, Standard_Real const aTolMax=0.0001)

        :type aS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aTolMax: float

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_CorrectPointOnCurve(*args)

    CorrectPointOnCurve = staticmethod(CorrectPointOnCurve)

    def CheckFaceClosed2d(*args):
        """
        CheckFaceClosed2d(TopoDS_Face theFace) -> Standard_Boolean

        Checks if <theFace> has the properly closed in 2D boundary(ies)

        :type theFace: OCC.wrapper.TopoDS.TopoDS_Face
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_CheckFaceClosed2d(*args)

    CheckFaceClosed2d = staticmethod(CheckFaceClosed2d)

    def __init__(self):
        """Auxiliary  methods  used  in  TopOpeBRepBuild_Builder1  class"""
        this = _TopOpeBRepBuild.new_TopOpeBRepBuild_Tools()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TopOpeBRepBuild.delete_TopOpeBRepBuild_Tools
TopOpeBRepBuild_Tools_swigregister = _TopOpeBRepBuild.TopOpeBRepBuild_Tools_swigregister
TopOpeBRepBuild_Tools_swigregister(TopOpeBRepBuild_Tools)

def TopOpeBRepBuild_Tools_FindState(*args):
    """
    TopOpeBRepBuild_Tools_FindState(TopoDS_Shape aVertex, TopAbs_State const aState, TopAbs_ShapeEnum const aShapeEnum, NCollection_IndexedDataMap_TopoDS_Shape_TopTools_ListOfShape_TopTools_ShapeMapHasher aMapVertexEdges, NCollection_Map_TopoDS_Shape_TopTools_ShapeMapHasher aMapProcessedVertices, NCollection_DataMap_TopoDS_Shape_TopAbs_State_TopTools_ShapeMapHasher aMapVs)

    :type aVertex: OCC.wrapper.TopoDS.TopoDS_Shape
    :type aState: OCC.wrapper.TopAbs.TopAbs_State
    :type aShapeEnum: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
    :type aMapVertexEdges: OCC.wrapper.TopTools.TopTools_IndexedDataMapOfShapeListOfShape
    :type aMapProcessedVertices: OCC.wrapper.TopTools.TopTools_MapOfShape
    :type aMapVs: OCC.wrapper.TopOpeBRepDS.TopOpeBRepDS_DataMapOfShapeState

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_FindState(*args)

def TopOpeBRepBuild_Tools_PropagateState(*args):
    """
    TopOpeBRepBuild_Tools_PropagateState(NCollection_DataMap_TopoDS_Shape_TopAbs_State_TopTools_ShapeMapHasher aSplEdgesState, NCollection_IndexedMap_TopoDS_Shape_TopTools_ShapeMapHasher anEdgesToRestMap, TopAbs_ShapeEnum const aShapeEnum1, TopAbs_ShapeEnum const aShapeEnum2, TopOpeBRepTool_ShapeClassifier aShapeClassifier, NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepDS_ShapeWithState_TopTools_ShapeMapHasher aMapOfShapeWithState, NCollection_Map_TopoDS_Shape_TopTools_ShapeMapHasher anUnkStateShapes)

    :type aSplEdgesState: OCC.wrapper.TopOpeBRepDS.TopOpeBRepDS_DataMapOfShapeState
    :type anEdgesToRestMap: OCC.wrapper.TopTools.TopTools_IndexedMapOfShape
    :type aShapeEnum1: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
    :type aShapeEnum2: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
    :type aShapeClassifier: OCC.wrapper.TopOpeBRepTool.TopOpeBRepTool_ShapeClassifier
    :type aMapOfShapeWithState: OCC.wrapper.TopOpeBRepDS.TopOpeBRepDS_IndexedDataMapOfShapeWithState
    :type anUnkStateShapes: OCC.wrapper.TopTools.TopTools_MapOfShape

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_PropagateState(*args)

def TopOpeBRepBuild_Tools_FindStateThroughVertex(*args):
    """
    TopOpeBRepBuild_Tools_FindStateThroughVertex(TopoDS_Shape aShape, TopOpeBRepTool_ShapeClassifier aShapeClassifier, NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepDS_ShapeWithState_TopTools_ShapeMapHasher aMapOfShapeWithState, NCollection_Map_TopoDS_Shape_TopTools_ShapeMapHasher anAvoidSubshMap) -> TopAbs_State

    :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
    :type aShapeClassifier: OCC.wrapper.TopOpeBRepTool.TopOpeBRepTool_ShapeClassifier
    :type aMapOfShapeWithState: OCC.wrapper.TopOpeBRepDS.TopOpeBRepDS_IndexedDataMapOfShapeWithState
    :type anAvoidSubshMap: OCC.wrapper.TopTools.TopTools_MapOfShape
    :rtype: OCC.wrapper.TopAbs.TopAbs_State

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_FindStateThroughVertex(*args)

def TopOpeBRepBuild_Tools_PropagateStateForWires(*args):
    """
    TopOpeBRepBuild_Tools_PropagateStateForWires(NCollection_IndexedMap_TopoDS_Shape_TopTools_ShapeMapHasher aFacesToRestMap, NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepDS_ShapeWithState_TopTools_ShapeMapHasher aMapOfShapeWithState)

    :type aFacesToRestMap: OCC.wrapper.TopTools.TopTools_IndexedMapOfShape
    :type aMapOfShapeWithState: OCC.wrapper.TopOpeBRepDS.TopOpeBRepDS_IndexedDataMapOfShapeWithState

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_PropagateStateForWires(*args)

def TopOpeBRepBuild_Tools_SpreadStateToChild(*args):
    """
    TopOpeBRepBuild_Tools_SpreadStateToChild(TopoDS_Shape aShape, TopAbs_State const aState, NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepDS_ShapeWithState_TopTools_ShapeMapHasher aMapOfShapeWithState)

    :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
    :type aState: OCC.wrapper.TopAbs.TopAbs_State
    :type aMapOfShapeWithState: OCC.wrapper.TopOpeBRepDS.TopOpeBRepDS_IndexedDataMapOfShapeWithState

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_SpreadStateToChild(*args)

def TopOpeBRepBuild_Tools_FindState1(*args):
    """
    TopOpeBRepBuild_Tools_FindState1(TopoDS_Shape anEdge, TopAbs_State const aState, NCollection_IndexedDataMap_TopoDS_Shape_TopTools_ListOfShape_TopTools_ShapeMapHasher aMapEdgesFaces, NCollection_Map_TopoDS_Shape_TopTools_ShapeMapHasher aMapProcessedVertices, NCollection_DataMap_TopoDS_Shape_TopAbs_State_TopTools_ShapeMapHasher aMapVs)

    :type anEdge: OCC.wrapper.TopoDS.TopoDS_Shape
    :type aState: OCC.wrapper.TopAbs.TopAbs_State
    :type aMapEdgesFaces: OCC.wrapper.TopTools.TopTools_IndexedDataMapOfShapeListOfShape
    :type aMapProcessedVertices: OCC.wrapper.TopTools.TopTools_MapOfShape
    :type aMapVs: OCC.wrapper.TopOpeBRepDS.TopOpeBRepDS_DataMapOfShapeState

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_FindState1(*args)

def TopOpeBRepBuild_Tools_FindState2(*args):
    """
    TopOpeBRepBuild_Tools_FindState2(TopoDS_Shape anEdge, TopAbs_State const aState, NCollection_IndexedDataMap_TopoDS_Shape_TopTools_ListOfShape_TopTools_ShapeMapHasher aMapEdgesFaces, NCollection_Map_TopoDS_Shape_TopTools_ShapeMapHasher aMapProcessedEdges, NCollection_DataMap_TopoDS_Shape_TopAbs_State_TopTools_ShapeMapHasher aMapVs)

    :type anEdge: OCC.wrapper.TopoDS.TopoDS_Shape
    :type aState: OCC.wrapper.TopAbs.TopAbs_State
    :type aMapEdgesFaces: OCC.wrapper.TopTools.TopTools_IndexedDataMapOfShapeListOfShape
    :type aMapProcessedEdges: OCC.wrapper.TopTools.TopTools_MapOfShape
    :type aMapVs: OCC.wrapper.TopOpeBRepDS.TopOpeBRepDS_DataMapOfShapeState

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_FindState2(*args)

def TopOpeBRepBuild_Tools_GetAdjacentFace(*args):
    """
    TopOpeBRepBuild_Tools_GetAdjacentFace(TopoDS_Shape aFaceObj, TopoDS_Shape anEObj, NCollection_IndexedDataMap_TopoDS_Shape_TopTools_ListOfShape_TopTools_ShapeMapHasher anEdgeFaceMap, TopoDS_Shape anAdjFaceObj) -> Standard_Boolean

    :type aFaceObj: OCC.wrapper.TopoDS.TopoDS_Shape
    :type anEObj: OCC.wrapper.TopoDS.TopoDS_Shape
    :type anEdgeFaceMap: OCC.wrapper.TopTools.TopTools_IndexedDataMapOfShapeListOfShape
    :type anAdjFaceObj: OCC.wrapper.TopoDS.TopoDS_Shape
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_GetAdjacentFace(*args)

def TopOpeBRepBuild_Tools_GetNormalToFaceOnEdge(*args):
    """
    TopOpeBRepBuild_Tools_GetNormalToFaceOnEdge(TopoDS_Face aFObj, TopoDS_Edge anEdgeObj, gp_Vec aDirNormal)

    :type aFObj: OCC.wrapper.TopoDS.TopoDS_Face
    :type anEdgeObj: OCC.wrapper.TopoDS.TopoDS_Edge
    :type aDirNormal: OCC.wrapper.gp.gp_Vec

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_GetNormalToFaceOnEdge(*args)

def TopOpeBRepBuild_Tools_GetNormalInNearestPoint(*args):
    """
    TopOpeBRepBuild_Tools_GetNormalInNearestPoint(TopoDS_Face aFace, TopoDS_Edge anEdge, gp_Vec aNormal)

    This  function  used  to  compute  normal  in  point  which  is  located
    near  the  point  with  param  UV    (used  for  computation  of  normals  where  the  normal  in  the  point UV  equal  to  zero).

    :type aFace: OCC.wrapper.TopoDS.TopoDS_Face
    :type anEdge: OCC.wrapper.TopoDS.TopoDS_Edge
    :type aNormal: OCC.wrapper.gp.gp_Vec

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_GetNormalInNearestPoint(*args)

def TopOpeBRepBuild_Tools_GetTangentToEdgeEdge(*args):
    """
    TopOpeBRepBuild_Tools_GetTangentToEdgeEdge(TopoDS_Face aFObj, TopoDS_Edge anEdgeObj, TopoDS_Edge aOriEObj, gp_Vec aTangent) -> Standard_Boolean

    :type aFObj: OCC.wrapper.TopoDS.TopoDS_Face
    :type anEdgeObj: OCC.wrapper.TopoDS.TopoDS_Edge
    :type aOriEObj: OCC.wrapper.TopoDS.TopoDS_Edge
    :type aTangent: OCC.wrapper.gp.gp_Vec
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_GetTangentToEdgeEdge(*args)

def TopOpeBRepBuild_Tools_GetTangentToEdge(*args):
    """
    TopOpeBRepBuild_Tools_GetTangentToEdge(TopoDS_Edge anEdgeObj, gp_Vec aTangent) -> Standard_Boolean

    :type anEdgeObj: OCC.wrapper.TopoDS.TopoDS_Edge
    :type aTangent: OCC.wrapper.gp.gp_Vec
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_GetTangentToEdge(*args)

def TopOpeBRepBuild_Tools_UpdatePCurves(*args):
    """
    TopOpeBRepBuild_Tools_UpdatePCurves(TopoDS_Wire aWire, TopoDS_Face fromFace, TopoDS_Face toFace)

    Recompute  PCurves  of  the  all  edges  from  the  wire  on  the  <toFace>

    :type aWire: OCC.wrapper.TopoDS.TopoDS_Wire
    :type fromFace: OCC.wrapper.TopoDS.TopoDS_Face
    :type toFace: OCC.wrapper.TopoDS.TopoDS_Face

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_UpdatePCurves(*args)

def TopOpeBRepBuild_Tools_UpdateEdgeOnPeriodicalFace(*args):
    """
    TopOpeBRepBuild_Tools_UpdateEdgeOnPeriodicalFace(TopoDS_Edge aEdgeToUpdate, TopoDS_Face OldFace, TopoDS_Face NewFace)

    recompute  PCurves  of  the  closing  (SIM  ,  with 2  PCurves)  edge on  the  NewFace

    :type aEdgeToUpdate: OCC.wrapper.TopoDS.TopoDS_Edge
    :type OldFace: OCC.wrapper.TopoDS.TopoDS_Face
    :type NewFace: OCC.wrapper.TopoDS.TopoDS_Face

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_UpdateEdgeOnPeriodicalFace(*args)

def TopOpeBRepBuild_Tools_UpdateEdgeOnFace(*args):
    """
    TopOpeBRepBuild_Tools_UpdateEdgeOnFace(TopoDS_Edge aEdgeToUpdate, TopoDS_Face OldFace, TopoDS_Face NewFace)

    recompute  PCurve  of  the    edge on  the  NewFace

    :type aEdgeToUpdate: OCC.wrapper.TopoDS.TopoDS_Edge
    :type OldFace: OCC.wrapper.TopoDS.TopoDS_Face
    :type NewFace: OCC.wrapper.TopoDS.TopoDS_Face

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_UpdateEdgeOnFace(*args)

def TopOpeBRepBuild_Tools_IsDegEdgesTheSame(*args):
    """
    TopOpeBRepBuild_Tools_IsDegEdgesTheSame(TopoDS_Shape anE1, TopoDS_Shape anE2) -> Standard_Boolean

    :type anE1: OCC.wrapper.TopoDS.TopoDS_Shape
    :type anE2: OCC.wrapper.TopoDS.TopoDS_Shape
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_IsDegEdgesTheSame(*args)

def TopOpeBRepBuild_Tools_NormalizeFace(*args):
    """
    TopOpeBRepBuild_Tools_NormalizeFace(TopoDS_Shape oldFace, TopoDS_Shape corrFace)

    test  if  <oldFace>  does  not  contain  INTERNAL  or  EXTERNAL  edges
    and  remove  such  edges  in  case  of  its  presence.  The  result  is  stored  in  <corrFace>

    :type oldFace: OCC.wrapper.TopoDS.TopoDS_Shape
    :type corrFace: OCC.wrapper.TopoDS.TopoDS_Shape

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_NormalizeFace(*args)

def TopOpeBRepBuild_Tools_CorrectFace2d(*args):
    """
    TopOpeBRepBuild_Tools_CorrectFace2d(TopoDS_Shape oldFace, TopoDS_Shape corrFace, NCollection_IndexedMap_TopoDS_Shape_TopTools_OrientedShapeMapHasher aSourceShapes, NCollection_IndexedDataMap_TopoDS_Shape_TopoDS_Shape_TopTools_ShapeMapHasher aMapOfCorrect2dEdges)

    test  if  UV  representation  of  <oldFace>  is  good  (i.e.  face  is  closed  in  2d).
    if  face  is  not  closed  ,  this  method  will  try  to  close  such  face  and  will
    return  corrected  edges  in  the  <aMapOfCorrect2dEdges>.  Parameter  <aSourceShapes>
    used  to  fix  the  edge  (or  wires)  which  should  be  correct  (Corrector  used  it  as  a  start  shapes).
    NOTE  :  Parameter  corrFace  doesn't  mean  anything.  If  you  want  to use  this  method  ,  rebuild  resulting  face
    after  by  yourself  using  corrected  edges.

    :type oldFace: OCC.wrapper.TopoDS.TopoDS_Shape
    :type corrFace: OCC.wrapper.TopoDS.TopoDS_Shape
    :type aSourceShapes: OCC.wrapper.TopTools.TopTools_IndexedMapOfOrientedShape
    :type aMapOfCorrect2dEdges: OCC.wrapper.TopTools.TopTools_IndexedDataMapOfShapeShape

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_CorrectFace2d(*args)

def TopOpeBRepBuild_Tools_CorrectTolerances(*args):
    """
    TopOpeBRepBuild_Tools_CorrectTolerances(TopoDS_Shape aS, Standard_Real const aTolMax=0.0001)

    :type aS: OCC.wrapper.TopoDS.TopoDS_Shape
    :type aTolMax: float

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_CorrectTolerances(*args)

def TopOpeBRepBuild_Tools_CorrectCurveOnSurface(*args):
    """
    TopOpeBRepBuild_Tools_CorrectCurveOnSurface(TopoDS_Shape aS, Standard_Real const aTolMax=0.0001)

    :type aS: OCC.wrapper.TopoDS.TopoDS_Shape
    :type aTolMax: float

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_CorrectCurveOnSurface(*args)

def TopOpeBRepBuild_Tools_CorrectPointOnCurve(*args):
    """
    TopOpeBRepBuild_Tools_CorrectPointOnCurve(TopoDS_Shape aS, Standard_Real const aTolMax=0.0001)

    :type aS: OCC.wrapper.TopoDS.TopoDS_Shape
    :type aTolMax: float

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_CorrectPointOnCurve(*args)

def TopOpeBRepBuild_Tools_CheckFaceClosed2d(*args):
    """
    TopOpeBRepBuild_Tools_CheckFaceClosed2d(TopoDS_Face theFace) -> Standard_Boolean

    Checks if <theFace> has the properly closed in 2D boundary(ies)

    :type theFace: OCC.wrapper.TopoDS.TopoDS_Face
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Tools_CheckFaceClosed2d(*args)

class TopOpeBRepBuild_Loop(Standard.Standard_Transient):
    """
    a Loop is an existing shape (Shell,Wire) or a set
    of shapes (Faces,Edges) which are connex.
    a set of connex shape is represented by a BlockIterator
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TopOpeBRepBuild_Loop
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TopOpeBRepBuild_Loop(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TopOpeBRepBuild_Loop self, TopoDS_Shape S) -> TopOpeBRepBuild_Loop
        __init__(TopOpeBRepBuild_Loop self, TopOpeBRepBuild_BlockIterator BI) -> TopOpeBRepBuild_Loop

        :type BI: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_BlockIterator

        """
        this = _TopOpeBRepBuild.new_TopOpeBRepBuild_Loop(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def IsShape(self, *args):
        """
        IsShape(TopOpeBRepBuild_Loop self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Loop_IsShape(self, *args)


    def Shape(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_Loop_Shape(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def BlockIterator(self, *args):
        """
        :rtype: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_BlockIterator

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_Loop_BlockIterator(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Dump(self, *args):
        """Dump(TopOpeBRepBuild_Loop self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_Loop_Dump(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Loop_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Loop_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_Loop_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TopOpeBRepBuild.delete_TopOpeBRepBuild_Loop
TopOpeBRepBuild_Loop_swigregister = _TopOpeBRepBuild.TopOpeBRepBuild_Loop_swigregister
TopOpeBRepBuild_Loop_swigregister(TopOpeBRepBuild_Loop)

def TopOpeBRepBuild_Loop_get_type_name(*args):
    """
    TopOpeBRepBuild_Loop_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Loop_get_type_name(*args)

def TopOpeBRepBuild_Loop_get_type_descriptor(*args):
    """
    TopOpeBRepBuild_Loop_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Loop_get_type_descriptor(*args)

class TopOpeBRepBuild_Pave(TopOpeBRepBuild_Loop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TopOpeBRepBuild_Pave
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TopOpeBRepBuild_Pave(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TopOpeBRepBuild_Pave self, TopoDS_Shape V, Standard_Real const P, Standard_Boolean const bound) -> TopOpeBRepBuild_Pave

        V = vertex, P = parameter of vertex <V>
        bound = True if <V> is an old vertex
        bound = False if <V> is a new vertex

        :type V: OCC.wrapper.TopoDS.TopoDS_Shape
        :type P: float
        :type bound: bool

        """
        this = _TopOpeBRepBuild.new_TopOpeBRepBuild_Pave(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def HasSameDomain(self, *args):
        """
        HasSameDomain(TopOpeBRepBuild_Pave self, Standard_Boolean const b)
        HasSameDomain(TopOpeBRepBuild_Pave self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Pave_HasSameDomain(self, *args)


    def SameDomain(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_Pave_SameDomain(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Vertex(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_Pave_Vertex(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeVertex(self, *args):
        """
        ChangeVertex(TopOpeBRepBuild_Pave self) -> TopoDS_Shape

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Pave_ChangeVertex(self, *args)


    def Parameter(self, *args):
        """
        Parameter(TopOpeBRepBuild_Pave self) -> Standard_Real
        Parameter(TopOpeBRepBuild_Pave self, Standard_Real const Par)

        :type Par: float

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Pave_Parameter(self, *args)


    def InterferenceType(self, *args):
        """
        InterferenceType(TopOpeBRepBuild_Pave self) -> TopOpeBRepDS_Kind &

        :rtype: OCC.wrapper.TopOpeBRepDS.TopOpeBRepDS_Kind

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Pave_InterferenceType(self, *args)


    def IsShape(self, *args):
        """
        IsShape(TopOpeBRepBuild_Pave self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Pave_IsShape(self, *args)


    def Shape(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_Pave_Shape(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Dump(self, *args):
        """Dump(TopOpeBRepBuild_Pave self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_Pave_Dump(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Pave_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Pave_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_Pave_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TopOpeBRepBuild.delete_TopOpeBRepBuild_Pave
TopOpeBRepBuild_Pave_swigregister = _TopOpeBRepBuild.TopOpeBRepBuild_Pave_swigregister
TopOpeBRepBuild_Pave_swigregister(TopOpeBRepBuild_Pave)

def TopOpeBRepBuild_Pave_get_type_name(*args):
    """
    TopOpeBRepBuild_Pave_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Pave_get_type_name(*args)

def TopOpeBRepBuild_Pave_get_type_descriptor(*args):
    """
    TopOpeBRepBuild_Pave_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Pave_get_type_descriptor(*args)

class TopOpeBRepBuild_CompositeClassifier(TopOpeBRepBuild_LoopClassifier):
    """
    classify composite Loops, i.e, loops that can be either a Shape, or
    a block of Elements.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Compare(self, *args):
        """
        Compare(TopOpeBRepBuild_CompositeClassifier self, Handle_TopOpeBRepBuild_Loop L1, Handle_TopOpeBRepBuild_Loop L2) -> TopAbs_State

        :type L1: OCC.wrapper.TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop
        :type L2: OCC.wrapper.TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop
        :rtype: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_CompositeClassifier_Compare(self, *args)


    def CompareShapes(self, *args):
        """
        CompareShapes(TopOpeBRepBuild_CompositeClassifier self, TopoDS_Shape B1, TopoDS_Shape B2) -> TopAbs_State

        classify shape <B1> with shape <B2>

        :type B1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type B2: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_CompositeClassifier_CompareShapes(self, *args)


    def CompareElementToShape(self, *args):
        """
        CompareElementToShape(TopOpeBRepBuild_CompositeClassifier self, TopoDS_Shape E, TopoDS_Shape B) -> TopAbs_State

        classify element <E> with shape <B>

        :type E: OCC.wrapper.TopoDS.TopoDS_Shape
        :type B: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_CompositeClassifier_CompareElementToShape(self, *args)


    def ResetShape(self, *args):
        """
        ResetShape(TopOpeBRepBuild_CompositeClassifier self, TopoDS_Shape B)

        prepare classification involving shape <B>
        calls ResetElement on first element of <B>

        :type B: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_CompositeClassifier_ResetShape(self, *args)


    def ResetElement(self, *args):
        """
        ResetElement(TopOpeBRepBuild_CompositeClassifier self, TopoDS_Shape E)

        prepare classification involving element <E>.

        :type E: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_CompositeClassifier_ResetElement(self, *args)


    def CompareElement(self, *args):
        """
        CompareElement(TopOpeBRepBuild_CompositeClassifier self, TopoDS_Shape E) -> Standard_Boolean

        Add element <E> in the set of elements used in classification.
        Returns FALSE if the element <E> has been already added to the set of elements,
        otherwise returns TRUE.

        :type E: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_CompositeClassifier_CompareElement(self, *args)


    def State(self, *args):
        """
        State(TopOpeBRepBuild_CompositeClassifier self) -> TopAbs_State

        Returns state of classification of 2D point, defined by
        ResetElement, with the current set of elements, defined by Compare.

        :rtype: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_CompositeClassifier_State(self, *args)

    __swig_destroy__ = _TopOpeBRepBuild.delete_TopOpeBRepBuild_CompositeClassifier
TopOpeBRepBuild_CompositeClassifier_swigregister = _TopOpeBRepBuild.TopOpeBRepBuild_CompositeClassifier_swigregister
TopOpeBRepBuild_CompositeClassifier_swigregister(TopOpeBRepBuild_CompositeClassifier)

class NCollection_List_Handle_TopOpeBRepBuild_Loop(NCollection.NCollection_BaseList):
    """
    Purpose:      Simple list to link  items together keeping the first 
    and the last one.
    Inherits BaseList, adding the data item to each node.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_List_Handle_TopOpeBRepBuild_Loop self) -> NCollection_List< opencascade::handle< TopOpeBRepBuild_Loop > >::iterator

        Returns an iterator pointing to the first element in the list.

        :rtype: iterator

        """
        return _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Loop_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_List_Handle_TopOpeBRepBuild_Loop self) -> NCollection_List< opencascade::handle< TopOpeBRepBuild_Loop > >::iterator

        Returns an iterator referring to the past-the-end element in the list.

        :rtype: iterator

        """
        return _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Loop_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_List_Handle_TopOpeBRepBuild_Loop self) -> NCollection_List< opencascade::handle< TopOpeBRepBuild_Loop > >::const_iterator

        Returns a const iterator pointing to the first element in the list.

        :rtype: const_iterator

        """
        return _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Loop_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_List_Handle_TopOpeBRepBuild_Loop self) -> NCollection_List< opencascade::handle< TopOpeBRepBuild_Loop > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the list.

        :rtype: const_iterator

        """
        return _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Loop_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:      Simple list to link  items together keeping the first 
        and the last one.
        Inherits BaseList, adding the data item to each node.
        """
        this = _TopOpeBRepBuild.new_NCollection_List_Handle_TopOpeBRepBuild_Loop(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_List_Handle_TopOpeBRepBuild_Loop self) -> Standard_Integer

        Size - Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Loop_Size(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_List_Handle_TopOpeBRepBuild_Loop self, NCollection_List_Handle_TopOpeBRepBuild_Loop theOther) -> NCollection_List_Handle_TopOpeBRepBuild_Loop

        Replace this list by the items of another list (theOther parameter).
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_List
        :rtype: OCC.wrapper.NCollection.NCollection_List

        """
        return _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Loop_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_List_Handle_TopOpeBRepBuild_Loop self, NCollection_List_Handle_TopOpeBRepBuild_Loop theOther) -> NCollection_List_Handle_TopOpeBRepBuild_Loop

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_List
        :rtype: OCC.wrapper.NCollection.NCollection_List

        """
        return _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Loop_assign(self, *args)


    def Clear(self, *args):
        """
        Clear(NCollection_List_Handle_TopOpeBRepBuild_Loop self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear this list

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Loop_Clear(self, *args)


    def First(self, *args):
        """
        First item

        :rtype: const TheItemType &

        """
        res = _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Loop_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Last(self, *args):
        """
        Last item

        :rtype: const TheItemType &

        """
        res = _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Loop_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(NCollection_List_Handle_TopOpeBRepBuild_Loop self, Handle_TopOpeBRepBuild_Loop theItem) -> Handle_TopOpeBRepBuild_Loop
        Append(NCollection_List_Handle_TopOpeBRepBuild_Loop self, Handle_TopOpeBRepBuild_Loop theItem, NCollection_List< opencascade::handle< TopOpeBRepBuild_Loop > >::Iterator & theIter)
        Append(NCollection_List_Handle_TopOpeBRepBuild_Loop self, NCollection_List_Handle_TopOpeBRepBuild_Loop theOther)

        Append another list at the end

        :type theOther: OCC.wrapper.NCollection.NCollection_List

        """
        return _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Loop_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_List_Handle_TopOpeBRepBuild_Loop self, Handle_TopOpeBRepBuild_Loop theItem) -> Handle_TopOpeBRepBuild_Loop
        Prepend(NCollection_List_Handle_TopOpeBRepBuild_Loop self, NCollection_List_Handle_TopOpeBRepBuild_Loop theOther)

        Prepend another list at the beginning

        :type theOther: OCC.wrapper.NCollection.NCollection_List

        """
        return _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Loop_Prepend(self, *args)


    def RemoveFirst(self, *args):
        """
        RemoveFirst(NCollection_List_Handle_TopOpeBRepBuild_Loop self)

        RemoveFirst item


        """
        return _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Loop_RemoveFirst(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_List_Handle_TopOpeBRepBuild_Loop self, NCollection_List< opencascade::handle< TopOpeBRepBuild_Loop > >::Iterator & theIter)

        Remove item pointed by iterator theIter; 
        theIter is then set to the next item

        :type theIter: Iterator

        """
        return _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Loop_Remove(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_List_Handle_TopOpeBRepBuild_Loop self, Handle_TopOpeBRepBuild_Loop theItem, NCollection_List< opencascade::handle< TopOpeBRepBuild_Loop > >::Iterator & theIter) -> Handle_TopOpeBRepBuild_Loop
        InsertBefore(NCollection_List_Handle_TopOpeBRepBuild_Loop self, NCollection_List_Handle_TopOpeBRepBuild_Loop theOther, NCollection_List< opencascade::handle< TopOpeBRepBuild_Loop > >::Iterator & theIter)

        InsertBefore

        :type theOther: OCC.wrapper.NCollection.NCollection_List
        :type theIter: Iterator

        """
        return _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Loop_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_List_Handle_TopOpeBRepBuild_Loop self, Handle_TopOpeBRepBuild_Loop theItem, NCollection_List< opencascade::handle< TopOpeBRepBuild_Loop > >::Iterator & theIter) -> Handle_TopOpeBRepBuild_Loop
        InsertAfter(NCollection_List_Handle_TopOpeBRepBuild_Loop self, NCollection_List_Handle_TopOpeBRepBuild_Loop theOther, NCollection_List< opencascade::handle< TopOpeBRepBuild_Loop > >::Iterator & theIter)

        InsertAfter

        :type theOther: OCC.wrapper.NCollection.NCollection_List
        :type theIter: Iterator

        """
        return _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Loop_InsertAfter(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_List_Handle_TopOpeBRepBuild_Loop self)

        Reverse the list


        """
        return _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Loop_Reverse(self, *args)


    def __iter__(self):
        return _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Loop___iter__(self)
    __swig_destroy__ = _TopOpeBRepBuild.delete_NCollection_List_Handle_TopOpeBRepBuild_Loop
NCollection_List_Handle_TopOpeBRepBuild_Loop_swigregister = _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Loop_swigregister
NCollection_List_Handle_TopOpeBRepBuild_Loop_swigregister(NCollection_List_Handle_TopOpeBRepBuild_Loop)

class NCollection_List_Handle_TopOpeBRepBuild_Loop_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _TopOpeBRepBuild.new_NCollection_List_Handle_TopOpeBRepBuild_Loop_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TopOpeBRepBuild.delete_NCollection_List_Handle_TopOpeBRepBuild_Loop_IteratorHelper

    def __next__(self):
        return _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Loop_IteratorHelper___next__(self)
NCollection_List_Handle_TopOpeBRepBuild_Loop_IteratorHelper_swigregister = _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Loop_IteratorHelper_swigregister
NCollection_List_Handle_TopOpeBRepBuild_Loop_IteratorHelper_swigregister(NCollection_List_Handle_TopOpeBRepBuild_Loop_IteratorHelper)


try:
	TopOpeBRepBuild_ListOfLoop = NCollection_List_Handle_TopOpeBRepBuild_Loop
except NameError:
	pass # does not exist, probably ignored

class TopOpeBRepBuild_FuseFace(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopOpeBRepBuild_FuseFace self) -> TopOpeBRepBuild_FuseFace
        __init__(TopOpeBRepBuild_FuseFace self, NCollection_List_TopoDS_Shape LIF, NCollection_List_TopoDS_Shape LRF, Standard_Integer const CXM) -> TopOpeBRepBuild_FuseFace

        :type LIF: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type LRF: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type CXM: int

        """
        this = _TopOpeBRepBuild.new_TopOpeBRepBuild_FuseFace(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(TopOpeBRepBuild_FuseFace self, NCollection_List_TopoDS_Shape LIF, NCollection_List_TopoDS_Shape LRF, Standard_Integer const CXM)

        :type LIF: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type LRF: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type CXM: int

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_FuseFace_Init(self, *args)


    def PerformFace(self, *args):
        """PerformFace(TopOpeBRepBuild_FuseFace self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_FuseFace_PerformFace(self, *args)


    def PerformEdge(self, *args):
        """PerformEdge(TopOpeBRepBuild_FuseFace self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_FuseFace_PerformEdge(self, *args)


    def ClearEdge(self, *args):
        """ClearEdge(TopOpeBRepBuild_FuseFace self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_FuseFace_ClearEdge(self, *args)


    def ClearVertex(self, *args):
        """ClearVertex(TopOpeBRepBuild_FuseFace self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_FuseFace_ClearVertex(self, *args)


    def IsDone(self, *args):
        """
        IsDone(TopOpeBRepBuild_FuseFace self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_FuseFace_IsDone(self, *args)


    def IsModified(self, *args):
        """
        IsModified(TopOpeBRepBuild_FuseFace self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_FuseFace_IsModified(self, *args)


    def LFuseFace(self, *args):
        """
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_FuseFace_LFuseFace(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def LInternEdge(self, *args):
        """
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_FuseFace_LInternEdge(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def LExternEdge(self, *args):
        """
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_FuseFace_LExternEdge(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def LModifEdge(self, *args):
        """
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_FuseFace_LModifEdge(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def LInternVertex(self, *args):
        """
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_FuseFace_LInternVertex(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def LExternVertex(self, *args):
        """
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_FuseFace_LExternVertex(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def LModifVertex(self, *args):
        """
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_FuseFace_LModifVertex(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TopOpeBRepBuild.delete_TopOpeBRepBuild_FuseFace
TopOpeBRepBuild_FuseFace_swigregister = _TopOpeBRepBuild.TopOpeBRepBuild_FuseFace_swigregister
TopOpeBRepBuild_FuseFace_swigregister(TopOpeBRepBuild_FuseFace)

class TopOpeBRepBuild_ShellFaceSet(TopOpeBRepBuild_ShapeSet):
    """
    a bound is a shell, a boundelement is a face.
    The ShapeSet stores :
    - a list of shell (bounds),
    - a list of face (boundelements) to start reconstructions,
    - a map of edge giving the list of face incident to an edge.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopOpeBRepBuild_ShellFaceSet self) -> TopOpeBRepBuild_ShellFaceSet
        __init__(TopOpeBRepBuild_ShellFaceSet self, TopoDS_Shape S, Standard_Address const Addr=None) -> TopOpeBRepBuild_ShellFaceSet

        Creates a ShellFaceSet to build blocks of faces
        connected by edges.

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type Addr: OCC.wrapper.Standard.Standard_Address

        """
        this = _TopOpeBRepBuild.new_TopOpeBRepBuild_ShellFaceSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Solid(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Solid

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_ShellFaceSet_Solid(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def AddShape(self, *args):
        """
        AddShape(TopOpeBRepBuild_ShellFaceSet self, TopoDS_Shape S)

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShellFaceSet_AddShape(self, *args)


    def AddStartElement(self, *args):
        """
        AddStartElement(TopOpeBRepBuild_ShellFaceSet self, TopoDS_Shape S)

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShellFaceSet_AddStartElement(self, *args)


    def AddElement(self, *args):
        """
        AddElement(TopOpeBRepBuild_ShellFaceSet self, TopoDS_Shape S)

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShellFaceSet_AddElement(self, *args)


    def DumpSS(self, *args):
        """DumpSS(TopOpeBRepBuild_ShellFaceSet self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShellFaceSet_DumpSS(self, *args)


    def SName(self, *args):
        """
        SName(TopOpeBRepBuild_ShellFaceSet self, TopoDS_Shape S, TCollection_AsciiString sb, TCollection_AsciiString sa) -> TCollection_AsciiString
        SName(TopOpeBRepBuild_ShellFaceSet self, NCollection_List_TopoDS_Shape S, TCollection_AsciiString sb, TCollection_AsciiString sa) -> TCollection_AsciiString

        :type S: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type sb: OCC.wrapper.TCollection.TCollection_AsciiString
        :type sa: OCC.wrapper.TCollection.TCollection_AsciiString
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShellFaceSet_SName(self, *args)


    def SNameori(self, *args):
        """
        SNameori(TopOpeBRepBuild_ShellFaceSet self, TopoDS_Shape S, TCollection_AsciiString sb, TCollection_AsciiString sa) -> TCollection_AsciiString
        SNameori(TopOpeBRepBuild_ShellFaceSet self, NCollection_List_TopoDS_Shape S, TCollection_AsciiString sb, TCollection_AsciiString sa) -> TCollection_AsciiString

        :type S: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type sb: OCC.wrapper.TCollection.TCollection_AsciiString
        :type sa: OCC.wrapper.TCollection.TCollection_AsciiString
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShellFaceSet_SNameori(self, *args)

    __swig_destroy__ = _TopOpeBRepBuild.delete_TopOpeBRepBuild_ShellFaceSet
TopOpeBRepBuild_ShellFaceSet_swigregister = _TopOpeBRepBuild.TopOpeBRepBuild_ShellFaceSet_swigregister
TopOpeBRepBuild_ShellFaceSet_swigregister(TopOpeBRepBuild_ShellFaceSet)

class NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher(NCollection.NCollection_BaseMap):
    """
    Purpose:     The DataMap is a Map to store keys with associated
    Items. See Map  from NCollection for  a discussion
    about the number of buckets.

    The DataMap can be seen as an extended array where
    the Keys  are the   indices.  For this reason  the
    operator () is defined on DataMap to fetch an Item
    from a Key. So the following syntax can be used :

    anItem = aMap(aKey);
    aMap(aKey) = anItem;

    This analogy has its  limit.   aMap(aKey) = anItem
    can  be done only  if aKey was previously bound to
    an item in the map.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher self) -> NCollection_DataMap< TopoDS_Shape,TopOpeBRepBuild_ListOfShapeListOfShape,TopTools_ShapeMapHasher >::iterator

        Returns an iterator pointing to the first element in the map.

        :rtype: iterator

        """
        return _TopOpeBRepBuild.NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher self) -> NCollection_DataMap< TopoDS_Shape,TopOpeBRepBuild_ListOfShapeListOfShape,TopTools_ShapeMapHasher >::iterator

        Returns an iterator referring to the past-the-end element in the map.

        :rtype: iterator

        """
        return _TopOpeBRepBuild.NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher self) -> NCollection_DataMap< TopoDS_Shape,TopOpeBRepBuild_ListOfShapeListOfShape,TopTools_ShapeMapHasher >::const_iterator

        Returns a const iterator pointing to the first element in the map.

        :rtype: const_iterator

        """
        return _TopOpeBRepBuild.NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher self) -> NCollection_DataMap< TopoDS_Shape,TopOpeBRepBuild_ListOfShapeListOfShape,TopTools_ShapeMapHasher >::const_iterator

        Returns a const iterator referring to the past-the-end element in the map.

        :rtype: const_iterator

        """
        return _TopOpeBRepBuild.NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The DataMap is a Map to store keys with associated
        Items. See Map  from NCollection for  a discussion
        about the number of buckets.

        The DataMap can be seen as an extended array where
        the Keys  are the   indices.  For this reason  the
        operator () is defined on DataMap to fetch an Item
        from a Key. So the following syntax can be used :

        anItem = aMap(aKey);
        aMap(aKey) = anItem;

        This analogy has its  limit.   aMap(aKey) = anItem
        can  be done only  if aKey was previously bound to
        an item in the map.
        """
        this = _TopOpeBRepBuild.new_NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, *args):
        """
        Exchange(NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher self, NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher theOther)

        Exchange the content of two maps without re-allocations.
        Notice that allocators will be swapped as well!

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _TopOpeBRepBuild.NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher_Exchange(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher self, NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher theOther) -> NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher

        Assignment.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _TopOpeBRepBuild.NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher self, NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher theOther) -> NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _TopOpeBRepBuild.NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher_assign(self, *args)


    def ReSize(self, *args):
        """
        ReSize(NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher self, Standard_Integer const N)

        ReSize

        :type N: int

        """
        return _TopOpeBRepBuild.NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher_ReSize(self, *args)


    def Bind(self, *args):
        """
        Bind(NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher self, TopoDS_Shape theKey, NCollection_List< TopOpeBRepBuild_ShapeListOfShape > const & theItem) -> Standard_Boolean

        Bind binds Item to Key in map.
        @param theKey  key to add/update
        @param theItem new item; overrides value previously bound to the key, if any
        @return Standard_True if Key was not bound already

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher_Bind(self, *args)


    def Bound(self, *args):
        """
        Bound(NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher self, TopoDS_Shape theKey, NCollection_List< TopOpeBRepBuild_ShapeListOfShape > const & theItem) -> NCollection_List< TopOpeBRepBuild_ShapeListOfShape > *

        Bound binds Item to Key in map. Returns modifiable Item 

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: TheItemType *

        """
        return _TopOpeBRepBuild.NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher_Bound(self, *args)


    def IsBound(self, *args):
        """
        IsBound(NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher self, TopoDS_Shape theKey) -> Standard_Boolean

        IsBound

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher_IsBound(self, *args)


    def UnBind(self, *args):
        """
        UnBind(NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher self, TopoDS_Shape theKey) -> Standard_Boolean

        UnBind removes Item Key pair from map

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher_UnBind(self, *args)


    def Seek(self, *args):
        """
        Seek(NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher self, TopoDS_Shape theKey) -> NCollection_List< TopOpeBRepBuild_ShapeListOfShape > const *

        Seek returns pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: const TheItemType *

        """
        return _TopOpeBRepBuild.NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher_Seek(self, *args)


    def Find(self, *args):
        """
        Find returns the Item for Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _TopOpeBRepBuild.NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher_Find(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeSeek(self, *args):
        """
        ChangeSeek(NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher self, TopoDS_Shape theKey) -> NCollection_List< TopOpeBRepBuild_ShapeListOfShape > *

        ChangeSeek returns modifiable pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: TheItemType *

        """
        return _TopOpeBRepBuild.NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher_ChangeSeek(self, *args)


    def ChangeFind(self, *args):
        """
        ChangeFind(NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher self, TopoDS_Shape theKey) -> NCollection_List< TopOpeBRepBuild_ShapeListOfShape > &

        ChangeFind returns mofifiable Item by Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: TheItemType &

        """
        return _TopOpeBRepBuild.NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher_ChangeFind(self, *args)


    def __call__(self, *args):
        """
        operator ()

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _TopOpeBRepBuild.NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Clear(self, *args):
        """
        Clear(NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher self, Standard_Boolean const doReleaseMemory)
        Clear(NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher self, Handle_NCollection_BaseAllocator theAllocator)

        Clear data and reset allocator

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _TopOpeBRepBuild.NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher_Clear(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher self) -> Standard_Integer

        Size

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher_Size(self, *args)


    def __iter__(self):
        return _TopOpeBRepBuild.NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher___iter__(self)
    __swig_destroy__ = _TopOpeBRepBuild.delete_NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher
NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher_swigregister = _TopOpeBRepBuild.NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher_swigregister
NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher_swigregister(NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher)

class NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _TopOpeBRepBuild.new_NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TopOpeBRepBuild.delete_NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher_IteratorHelper

    def __next__(self):
        return _TopOpeBRepBuild.NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher_IteratorHelper___next__(self)
NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher_IteratorHelper_swigregister = _TopOpeBRepBuild.NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher_IteratorHelper_swigregister
NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher_IteratorHelper_swigregister(NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher_IteratorHelper)


try:
	TopOpeBRepBuild_DataMapOfShapeListOfShapeListOfShape = NCollection_DataMap_TopoDS_Shape_TopOpeBRepBuild_ListOfShapeListOfShape_TopTools_ShapeMapHasher
except NameError:
	pass # does not exist, probably ignored

class TopOpeBRepBuild_LoopSet(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """__init__(TopOpeBRepBuild_LoopSet self) -> TopOpeBRepBuild_LoopSet"""
        this = _TopOpeBRepBuild.new_TopOpeBRepBuild_LoopSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ChangeListOfLoop(self, *args):
        """
        ChangeListOfLoop(TopOpeBRepBuild_LoopSet self) -> NCollection_List_Handle_TopOpeBRepBuild_Loop

        :rtype: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_ListOfLoop

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_LoopSet_ChangeListOfLoop(self, *args)


    def InitLoop(self, *args):
        """InitLoop(TopOpeBRepBuild_LoopSet self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_LoopSet_InitLoop(self, *args)


    def MoreLoop(self, *args):
        """
        MoreLoop(TopOpeBRepBuild_LoopSet self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_LoopSet_MoreLoop(self, *args)


    def NextLoop(self, *args):
        """NextLoop(TopOpeBRepBuild_LoopSet self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_LoopSet_NextLoop(self, *args)


    def Loop(self, *args):
        """
        Loop(TopOpeBRepBuild_LoopSet self) -> Handle_TopOpeBRepBuild_Loop

        :rtype: OCC.wrapper.TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_LoopSet_Loop(self, *args)

    __swig_destroy__ = _TopOpeBRepBuild.delete_TopOpeBRepBuild_LoopSet
TopOpeBRepBuild_LoopSet_swigregister = _TopOpeBRepBuild.TopOpeBRepBuild_LoopSet_swigregister
TopOpeBRepBuild_LoopSet_swigregister(TopOpeBRepBuild_LoopSet)

class TopOpeBRepBuild_WireEdgeClassifier(TopOpeBRepBuild_CompositeClassifier):
    """
    Classify edges and wires.
    shapes are Wires, Element are Edge.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopOpeBRepBuild_WireEdgeClassifier self, TopoDS_Shape F, TopOpeBRepBuild_BlockBuilder BB) -> TopOpeBRepBuild_WireEdgeClassifier

        Creates a classifier on edge <F>.
        Used to compare edges and wires on the edge <F>.

        :type F: OCC.wrapper.TopoDS.TopoDS_Shape
        :type BB: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_BlockBuilder

        """
        this = _TopOpeBRepBuild.new_TopOpeBRepBuild_WireEdgeClassifier(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Compare(self, *args):
        """
        Compare(TopOpeBRepBuild_WireEdgeClassifier self, Handle_TopOpeBRepBuild_Loop L1, Handle_TopOpeBRepBuild_Loop L2) -> TopAbs_State

        :type L1: OCC.wrapper.TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop
        :type L2: OCC.wrapper.TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop
        :rtype: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeClassifier_Compare(self, *args)


    def LoopToShape(self, *args):
        """
        LoopToShape(TopOpeBRepBuild_WireEdgeClassifier self, Handle_TopOpeBRepBuild_Loop L) -> TopoDS_Shape

        :type L: OCC.wrapper.TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeClassifier_LoopToShape(self, *args)


    def CompareShapes(self, *args):
        """
        CompareShapes(TopOpeBRepBuild_WireEdgeClassifier self, TopoDS_Shape B1, TopoDS_Shape B2) -> TopAbs_State

        classify wire <B1> with wire <B2>

        :type B1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type B2: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeClassifier_CompareShapes(self, *args)


    def CompareElementToShape(self, *args):
        """
        CompareElementToShape(TopOpeBRepBuild_WireEdgeClassifier self, TopoDS_Shape E, TopoDS_Shape B) -> TopAbs_State

        classify edge <E> with wire <B>

        :type E: OCC.wrapper.TopoDS.TopoDS_Shape
        :type B: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeClassifier_CompareElementToShape(self, *args)


    def ResetShape(self, *args):
        """
        ResetShape(TopOpeBRepBuild_WireEdgeClassifier self, TopoDS_Shape B)

        prepare classification involving wire <B>
        calls ResetElement on first edge of <B>

        :type B: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeClassifier_ResetShape(self, *args)


    def ResetElement(self, *args):
        """
        ResetElement(TopOpeBRepBuild_WireEdgeClassifier self, TopoDS_Shape E)

        prepare classification involving edge <E>
        define 2D point (later used in Compare()) on first vertex of edge <E>.

        :type E: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeClassifier_ResetElement(self, *args)


    def CompareElement(self, *args):
        """
        CompareElement(TopOpeBRepBuild_WireEdgeClassifier self, TopoDS_Shape E) -> Standard_Boolean

        Add the edge <E> in the set of edges used in 2D point
        classification.

        :type E: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeClassifier_CompareElement(self, *args)


    def State(self, *args):
        """
        State(TopOpeBRepBuild_WireEdgeClassifier self) -> TopAbs_State

        Returns state of classification of 2D point, defined by
        ResetElement, with the current set of edges, defined by Compare.

        :rtype: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeClassifier_State(self, *args)

    __swig_destroy__ = _TopOpeBRepBuild.delete_TopOpeBRepBuild_WireEdgeClassifier
TopOpeBRepBuild_WireEdgeClassifier_swigregister = _TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeClassifier_swigregister
TopOpeBRepBuild_WireEdgeClassifier_swigregister(TopOpeBRepBuild_WireEdgeClassifier)

class TopOpeBRepBuild_Tools2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def MakeMapOfShapeVertexInfo(*args):
        """
        MakeMapOfShapeVertexInfo(TopoDS_Wire aWire, NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher aMap)

        :type aWire: OCC.wrapper.TopoDS.TopoDS_Wire
        :type aMap: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_IndexedDataMapOfShapeVertexInfo

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Tools2d_MakeMapOfShapeVertexInfo(*args)

    MakeMapOfShapeVertexInfo = staticmethod(MakeMapOfShapeVertexInfo)

    def DumpMapOfShapeVertexInfo(*args):
        """
        DumpMapOfShapeVertexInfo(NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher aMap)

        :type aMap: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_IndexedDataMapOfShapeVertexInfo

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Tools2d_DumpMapOfShapeVertexInfo(*args)

    DumpMapOfShapeVertexInfo = staticmethod(DumpMapOfShapeVertexInfo)

    def Path(*args):
        """
        Path(TopoDS_Wire aWire, NCollection_List_TopoDS_Shape aResList)

        :type aWire: OCC.wrapper.TopoDS.TopoDS_Wire
        :type aResList: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Tools2d_Path(*args)

    Path = staticmethod(Path)

    def __init__(self):
        this = _TopOpeBRepBuild.new_TopOpeBRepBuild_Tools2d()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TopOpeBRepBuild.delete_TopOpeBRepBuild_Tools2d
TopOpeBRepBuild_Tools2d_swigregister = _TopOpeBRepBuild.TopOpeBRepBuild_Tools2d_swigregister
TopOpeBRepBuild_Tools2d_swigregister(TopOpeBRepBuild_Tools2d)

def TopOpeBRepBuild_Tools2d_MakeMapOfShapeVertexInfo(*args):
    """
    TopOpeBRepBuild_Tools2d_MakeMapOfShapeVertexInfo(TopoDS_Wire aWire, NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher aMap)

    :type aWire: OCC.wrapper.TopoDS.TopoDS_Wire
    :type aMap: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_IndexedDataMapOfShapeVertexInfo

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Tools2d_MakeMapOfShapeVertexInfo(*args)

def TopOpeBRepBuild_Tools2d_DumpMapOfShapeVertexInfo(*args):
    """
    TopOpeBRepBuild_Tools2d_DumpMapOfShapeVertexInfo(NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher aMap)

    :type aMap: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_IndexedDataMapOfShapeVertexInfo

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Tools2d_DumpMapOfShapeVertexInfo(*args)

def TopOpeBRepBuild_Tools2d_Path(*args):
    """
    TopOpeBRepBuild_Tools2d_Path(TopoDS_Wire aWire, NCollection_List_TopoDS_Shape aResList)

    :type aWire: OCC.wrapper.TopoDS.TopoDS_Wire
    :type aResList: OCC.wrapper.TopTools.TopTools_ListOfShape

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Tools2d_Path(*args)

class TopOpeBRepBuild_FaceAreaBuilder(TopOpeBRepBuild_Area2dBuilder):
    """
    The FaceAreaBuilder algorithm is used to construct Faces from a LoopSet,
    where the Loop is the composite topological object of the boundary,
    here wire or block of edges.
    The LoopSet gives an iteration on Loops.
    For each Loop  it indicates if it is on the boundary (wire) or if it
    results from  an interference (block of edges).
    The result of the FaceAreaBuilder is an iteration on areas.
    An area is described by a set of Loops.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopOpeBRepBuild_FaceAreaBuilder self) -> TopOpeBRepBuild_FaceAreaBuilder
        __init__(TopOpeBRepBuild_FaceAreaBuilder self, TopOpeBRepBuild_LoopSet LS, TopOpeBRepBuild_LoopClassifier LC, Standard_Boolean const ForceClass) -> TopOpeBRepBuild_FaceAreaBuilder

        Creates a FaceAreaBuilder to build faces on
        the (wires,blocks of edge) of <LS>, using the classifier <LC>.

        :type LS: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_LoopSet
        :type LC: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_LoopClassifier
        :type ForceClass: bool

        """
        this = _TopOpeBRepBuild.new_TopOpeBRepBuild_FaceAreaBuilder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def InitFaceAreaBuilder(self, *args):
        """
        InitFaceAreaBuilder(TopOpeBRepBuild_FaceAreaBuilder self, TopOpeBRepBuild_LoopSet LS, TopOpeBRepBuild_LoopClassifier LC, Standard_Boolean const ForceClass)

        :type LS: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_LoopSet
        :type LC: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_LoopClassifier
        :type ForceClass: bool

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_FaceAreaBuilder_InitFaceAreaBuilder(self, *args)

    __swig_destroy__ = _TopOpeBRepBuild.delete_TopOpeBRepBuild_FaceAreaBuilder
TopOpeBRepBuild_FaceAreaBuilder_swigregister = _TopOpeBRepBuild.TopOpeBRepBuild_FaceAreaBuilder_swigregister
TopOpeBRepBuild_FaceAreaBuilder_swigregister(TopOpeBRepBuild_FaceAreaBuilder)

class TopOpeBRepBuild_Area1dBuilder(TopOpeBRepBuild_AreaBuilder):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopOpeBRepBuild_Area1dBuilder self) -> TopOpeBRepBuild_Area1dBuilder
        __init__(TopOpeBRepBuild_Area1dBuilder self, TopOpeBRepBuild_PaveSet LS, TopOpeBRepBuild_PaveClassifier LC, Standard_Boolean const ForceClass) -> TopOpeBRepBuild_Area1dBuilder

        Creates a Area1dBuilder to find the areas of
        the shapes described by <LS> using the classifier <LC>.

        :type LS: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_PaveSet
        :type LC: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_PaveClassifier
        :type ForceClass: bool

        """
        this = _TopOpeBRepBuild.new_TopOpeBRepBuild_Area1dBuilder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def InitAreaBuilder(self, *args):
        """
        InitAreaBuilder(TopOpeBRepBuild_Area1dBuilder self, TopOpeBRepBuild_LoopSet LS, TopOpeBRepBuild_LoopClassifier LC, Standard_Boolean const ForceClass)

        Sets a Area1dBuilder to find the areas of
        the shapes described by <LS> using the classifier <LC>.

        :type LS: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_LoopSet
        :type LC: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_LoopClassifier
        :type ForceClass: bool

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Area1dBuilder_InitAreaBuilder(self, *args)


    def ADD_Loop_TO_LISTOFLoop(self, *args):
        """
        ADD_Loop_TO_LISTOFLoop(TopOpeBRepBuild_Area1dBuilder self, Handle_TopOpeBRepBuild_Loop L, NCollection_List_Handle_TopOpeBRepBuild_Loop LOL, Standard_Address const s=None)

        :type L: OCC.wrapper.TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop
        :type LOL: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_ListOfLoop
        :type s: OCC.wrapper.Standard.Standard_Address

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Area1dBuilder_ADD_Loop_TO_LISTOFLoop(self, *args)


    def REM_Loop_FROM_LISTOFLoop(self, *args):
        """
        REM_Loop_FROM_LISTOFLoop(TopOpeBRepBuild_Area1dBuilder self, TopOpeBRepBuild_ListIteratorOfListOfLoop & ITLOL, NCollection_List_Handle_TopOpeBRepBuild_Loop LOL, Standard_Address const s=None)

        :type ITLOL: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_ListIteratorOfListOfLoop
        :type LOL: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_ListOfLoop
        :type s: OCC.wrapper.Standard.Standard_Address

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Area1dBuilder_REM_Loop_FROM_LISTOFLoop(self, *args)


    def ADD_LISTOFLoop_TO_LISTOFLoop(self, *args):
        """
        ADD_LISTOFLoop_TO_LISTOFLoop(TopOpeBRepBuild_Area1dBuilder self, NCollection_List_Handle_TopOpeBRepBuild_Loop LOL1, NCollection_List_Handle_TopOpeBRepBuild_Loop LOL2, Standard_Address const s=None, Standard_Address const s1=None, Standard_Address const s2=None)

        :type LOL1: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_ListOfLoop
        :type LOL2: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_ListOfLoop
        :type s: OCC.wrapper.Standard.Standard_Address
        :type s1: OCC.wrapper.Standard.Standard_Address
        :type s2: OCC.wrapper.Standard.Standard_Address

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Area1dBuilder_ADD_LISTOFLoop_TO_LISTOFLoop(self, *args)


    def DumpList(*args):
        """
        DumpList(NCollection_List_Handle_TopOpeBRepBuild_Loop L)

        :type L: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_ListOfLoop

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Area1dBuilder_DumpList(*args)

    DumpList = staticmethod(DumpList)
    __swig_destroy__ = _TopOpeBRepBuild.delete_TopOpeBRepBuild_Area1dBuilder
TopOpeBRepBuild_Area1dBuilder_swigregister = _TopOpeBRepBuild.TopOpeBRepBuild_Area1dBuilder_swigregister
TopOpeBRepBuild_Area1dBuilder_swigregister(TopOpeBRepBuild_Area1dBuilder)

def TopOpeBRepBuild_Area1dBuilder_DumpList(*args):
    """
    TopOpeBRepBuild_Area1dBuilder_DumpList(NCollection_List_Handle_TopOpeBRepBuild_Loop L)

    :type L: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_ListOfLoop

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Area1dBuilder_DumpList(*args)

class TopOpeBRepBuild_FaceBuilder(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopOpeBRepBuild_FaceBuilder self) -> TopOpeBRepBuild_FaceBuilder
        __init__(TopOpeBRepBuild_FaceBuilder self, TopOpeBRepBuild_WireEdgeSet ES, TopoDS_Shape F, Standard_Boolean const ForceClass) -> TopOpeBRepBuild_FaceBuilder

        Create a FaceBuilder to build the faces on
        the shapes (wires, blocks of edge) described by <LS>.

        :type ES: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeSet
        :type F: OCC.wrapper.TopoDS.TopoDS_Shape
        :type ForceClass: bool

        """
        this = _TopOpeBRepBuild.new_TopOpeBRepBuild_FaceBuilder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def InitFaceBuilder(self, *args):
        """
        InitFaceBuilder(TopOpeBRepBuild_FaceBuilder self, TopOpeBRepBuild_WireEdgeSet ES, TopoDS_Shape F, Standard_Boolean const ForceClass)

        :type ES: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeSet
        :type F: OCC.wrapper.TopoDS.TopoDS_Shape
        :type ForceClass: bool

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_FaceBuilder_InitFaceBuilder(self, *args)


    def DetectUnclosedWire(self, *args):
        """
        DetectUnclosedWire(TopOpeBRepBuild_FaceBuilder self, NCollection_IndexedDataMap_TopoDS_Shape_TopoDS_Shape_TopTools_ShapeMapHasher mapVVsameG, NCollection_IndexedDataMap_TopoDS_Shape_TopoDS_Shape_TopTools_ShapeMapHasher mapVon1Edge)

        Removes   are  non 3d-closed  wires.
        Fills  up maps <mapVVsameG> and  <mapVon1Edge>,  in order to
        correct 3d-closed but unclosed (topologic connexity) wires.
        modifies myBlockBuilder

        :type mapVVsameG: OCC.wrapper.TopTools.TopTools_IndexedDataMapOfShapeShape
        :type mapVon1Edge: OCC.wrapper.TopTools.TopTools_IndexedDataMapOfShapeShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_FaceBuilder_DetectUnclosedWire(self, *args)


    def CorrectGclosedWire(self, *args):
        """
        CorrectGclosedWire(TopOpeBRepBuild_FaceBuilder self, NCollection_IndexedDataMap_TopoDS_Shape_TopoDS_Shape_TopTools_ShapeMapHasher mapVVref, NCollection_IndexedDataMap_TopoDS_Shape_TopoDS_Shape_TopTools_ShapeMapHasher mapVon1Edge)

        Using the given maps, change the topology of the 3d-closed
        wires, in order to get closed wires.

        :type mapVVref: OCC.wrapper.TopTools.TopTools_IndexedDataMapOfShapeShape
        :type mapVon1Edge: OCC.wrapper.TopTools.TopTools_IndexedDataMapOfShapeShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_FaceBuilder_CorrectGclosedWire(self, *args)


    def DetectPseudoInternalEdge(self, *args):
        """
        DetectPseudoInternalEdge(TopOpeBRepBuild_FaceBuilder self, NCollection_IndexedMap_TopoDS_Shape_TopTools_ShapeMapHasher mapE)

        Removes edges appearing twice (FORWARD,REVERSED) with a bounding
        vertex not connected to any other edge.
        mapE contains edges found.
        modifies myBlockBuilder.

        :type mapE: OCC.wrapper.TopTools.TopTools_IndexedMapOfShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_FaceBuilder_DetectPseudoInternalEdge(self, *args)


    def Face(self, *args):
        """
        return myFace

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_FaceBuilder_Face(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def InitFace(self, *args):
        """
        InitFace(TopOpeBRepBuild_FaceBuilder self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_FaceBuilder_InitFace(self, *args)


    def MoreFace(self, *args):
        """
        MoreFace(TopOpeBRepBuild_FaceBuilder self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_FaceBuilder_MoreFace(self, *args)


    def NextFace(self, *args):
        """NextFace(TopOpeBRepBuild_FaceBuilder self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_FaceBuilder_NextFace(self, *args)


    def InitWire(self, *args):
        """
        InitWire(TopOpeBRepBuild_FaceBuilder self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_FaceBuilder_InitWire(self, *args)


    def MoreWire(self, *args):
        """
        MoreWire(TopOpeBRepBuild_FaceBuilder self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_FaceBuilder_MoreWire(self, *args)


    def NextWire(self, *args):
        """NextWire(TopOpeBRepBuild_FaceBuilder self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_FaceBuilder_NextWire(self, *args)


    def IsOldWire(self, *args):
        """
        IsOldWire(TopOpeBRepBuild_FaceBuilder self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_FaceBuilder_IsOldWire(self, *args)


    def OldWire(self, *args):
        """
        Returns current wire
        This wire may be :
        * an old wire OldWire(), which has not been reconstructed;
        * a new wire made of edges described by ...NewEdge() methods.

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_FaceBuilder_OldWire(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FindNextValidElement(self, *args):
        """
        FindNextValidElement(TopOpeBRepBuild_FaceBuilder self)

        Iterates on myBlockIterator until finding a valid element


        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_FaceBuilder_FindNextValidElement(self, *args)


    def InitEdge(self, *args):
        """
        InitEdge(TopOpeBRepBuild_FaceBuilder self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_FaceBuilder_InitEdge(self, *args)


    def MoreEdge(self, *args):
        """
        MoreEdge(TopOpeBRepBuild_FaceBuilder self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_FaceBuilder_MoreEdge(self, *args)


    def NextEdge(self, *args):
        """NextEdge(TopOpeBRepBuild_FaceBuilder self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_FaceBuilder_NextEdge(self, *args)


    def Edge(self, *args):
        """
        Returns current new edge of current new wire.

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_FaceBuilder_Edge(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def EdgeConnexity(self, *args):
        """
        EdgeConnexity(TopOpeBRepBuild_FaceBuilder self, TopoDS_Shape E) -> Standard_Integer

        :type E: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_FaceBuilder_EdgeConnexity(self, *args)


    def AddEdgeWire(self, *args):
        """
        AddEdgeWire(TopOpeBRepBuild_FaceBuilder self, TopoDS_Shape E, TopoDS_Shape W) -> Standard_Integer

        :type E: OCC.wrapper.TopoDS.TopoDS_Shape
        :type W: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_FaceBuilder_AddEdgeWire(self, *args)

    __swig_destroy__ = _TopOpeBRepBuild.delete_TopOpeBRepBuild_FaceBuilder
TopOpeBRepBuild_FaceBuilder_swigregister = _TopOpeBRepBuild.TopOpeBRepBuild_FaceBuilder_swigregister
TopOpeBRepBuild_FaceBuilder_swigregister(TopOpeBRepBuild_FaceBuilder)

class TopOpeBRepBuild_HBuilder(Standard.Standard_Transient):
    """
    The HBuilder  algorithm    constructs   topological
    objects  from   an    existing  topology  and  new
    geometries attached to the topology. It is used to
    construct the result of a topological operation;
    the existing  topologies are the parts involved in
    the  topological  operation and the new geometries
    are the intersection lines and points.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TopOpeBRepBuild_HBuilder
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TopOpeBRepBuild_HBuilder(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TopOpeBRepBuild_HBuilder self, TopOpeBRepDS_BuildTool BT) -> TopOpeBRepBuild_HBuilder

        :type BT: OCC.wrapper.TopOpeBRepDS.TopOpeBRepDS_BuildTool

        """
        this = _TopOpeBRepBuild.new_TopOpeBRepBuild_HBuilder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def BuildTool(self, *args):
        """
        :rtype: OCC.wrapper.TopOpeBRepDS.TopOpeBRepDS_BuildTool

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_HBuilder_BuildTool(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Perform(self, *args):
        """
        Perform(TopOpeBRepBuild_HBuilder self, Handle_TopOpeBRepDS_HDataStructure HDS)
        Perform(TopOpeBRepBuild_HBuilder self, Handle_TopOpeBRepDS_HDataStructure HDS, TopoDS_Shape S1, TopoDS_Shape S2)

        Same as previous + evaluates if an operation performed on shapes S1,S2
        is a particular case.

        :type HDS: OCC.wrapper.TopOpeBRepDS.Handle_TopOpeBRepDS_HDataStructure
        :type S1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type S2: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_HBuilder_Perform(self, *args)


    def Clear(self, *args):
        """
        Clear(TopOpeBRepBuild_HBuilder self)

        Removes all split and merge already performed.
        Does NOT clear the handled DS.


        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_HBuilder_Clear(self, *args)


    def DataStructure(self, *args):
        """
        DataStructure(TopOpeBRepBuild_HBuilder self) -> Handle_TopOpeBRepDS_HDataStructure

        returns the DS handled by this builder

        :rtype: OCC.wrapper.TopOpeBRepDS.Handle_TopOpeBRepDS_HDataStructure

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_HBuilder_DataStructure(self, *args)


    def ChangeBuildTool(self, *args):
        """
        ChangeBuildTool(TopOpeBRepBuild_HBuilder self) -> TopOpeBRepDS_BuildTool

        :rtype: OCC.wrapper.TopOpeBRepDS.TopOpeBRepDS_BuildTool

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_HBuilder_ChangeBuildTool(self, *args)


    def MergeShapes(self, *args):
        """
        MergeShapes(TopOpeBRepBuild_HBuilder self, TopoDS_Shape S1, TopAbs_State const TB1, TopoDS_Shape S2, TopAbs_State const TB2)

        Merges the two shapes <S1> and <S2> keeping the
        parts of states <TB1>,<TB2> in <S1>,<S2>.

        :type S1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type TB1: OCC.wrapper.TopAbs.TopAbs_State
        :type S2: OCC.wrapper.TopoDS.TopoDS_Shape
        :type TB2: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_HBuilder_MergeShapes(self, *args)


    def MergeSolids(self, *args):
        """
        MergeSolids(TopOpeBRepBuild_HBuilder self, TopoDS_Shape S1, TopAbs_State const TB1, TopoDS_Shape S2, TopAbs_State const TB2)

        Merges  the two solids <S1>   and <S2> keeping the
        parts in each solid of states <TB1> and <TB2>.

        :type S1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type TB1: OCC.wrapper.TopAbs.TopAbs_State
        :type S2: OCC.wrapper.TopoDS.TopoDS_Shape
        :type TB2: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_HBuilder_MergeSolids(self, *args)


    def MergeSolid(self, *args):
        """
        MergeSolid(TopOpeBRepBuild_HBuilder self, TopoDS_Shape S, TopAbs_State const TB)

        Merges the solid <S>  keeping the
        parts of state <TB>.

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type TB: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_HBuilder_MergeSolid(self, *args)


    def IsSplit(self, *args):
        """
        IsSplit(TopOpeBRepBuild_HBuilder self, TopoDS_Shape S, TopAbs_State const ToBuild) -> Standard_Boolean

        Returns True if the shape <S> has been split.

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type ToBuild: OCC.wrapper.TopAbs.TopAbs_State
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_HBuilder_IsSplit(self, *args)


    def Splits(self, *args):
        """
        Returns the split parts <ToBuild> of shape <S>.

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type ToBuild: OCC.wrapper.TopAbs.TopAbs_State
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_HBuilder_Splits(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsMerged(self, *args):
        """
        IsMerged(TopOpeBRepBuild_HBuilder self, TopoDS_Shape S, TopAbs_State const ToBuild) -> Standard_Boolean

        Returns True if the shape <S> has been merged.

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type ToBuild: OCC.wrapper.TopAbs.TopAbs_State
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_HBuilder_IsMerged(self, *args)


    def Merged(self, *args):
        """
        Returns the merged parts <ToBuild> of shape <S>.

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type ToBuild: OCC.wrapper.TopAbs.TopAbs_State
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_HBuilder_Merged(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NewVertex(self, *args):
        """
        Returns the vertex created on point <I>.

        :type I: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_HBuilder_NewVertex(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NewEdges(self, *args):
        """
        Returns the edges created on curve <I>.

        :type I: int
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_HBuilder_NewEdges(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeNewEdges(self, *args):
        """
        ChangeNewEdges(TopOpeBRepBuild_HBuilder self, Standard_Integer const I) -> NCollection_List_TopoDS_Shape

        Returns the edges created on curve <I>.

        :type I: int
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_HBuilder_ChangeNewEdges(self, *args)


    def NewFaces(self, *args):
        """
        Returns the faces created on surface <I>.

        :type I: int
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_HBuilder_NewFaces(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Section(self, *args):
        """
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_HBuilder_Section(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def InitExtendedSectionDS(self, *args):
        """
        InitExtendedSectionDS(TopOpeBRepBuild_HBuilder self, Standard_Integer const k=3)

        :type k: int

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_HBuilder_InitExtendedSectionDS(self, *args)


    def InitSection(self, *args):
        """
        InitSection(TopOpeBRepBuild_HBuilder self, Standard_Integer const k=3)

        :type k: int

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_HBuilder_InitSection(self, *args)


    def MoreSection(self, *args):
        """
        MoreSection(TopOpeBRepBuild_HBuilder self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_HBuilder_MoreSection(self, *args)


    def NextSection(self, *args):
        """NextSection(TopOpeBRepBuild_HBuilder self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_HBuilder_NextSection(self, *args)


    def CurrentSection(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_HBuilder_CurrentSection(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetDSEdgeFromSectEdge(self, *args):
        """
        GetDSEdgeFromSectEdge(TopOpeBRepBuild_HBuilder self, TopoDS_Shape E, Standard_Integer const rank) -> Standard_Integer

        :type E: OCC.wrapper.TopoDS.TopoDS_Shape
        :type rank: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_HBuilder_GetDSEdgeFromSectEdge(self, *args)


    def GetDSFaceFromDSEdge(self, *args):
        """
        GetDSFaceFromDSEdge(TopOpeBRepBuild_HBuilder self, Standard_Integer const indexEdg, Standard_Integer const rank) -> NCollection_List_Standard_Integer

        :type indexEdg: int
        :type rank: int
        :rtype: OCC.wrapper.TColStd.TColStd_ListOfInteger

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_HBuilder_GetDSFaceFromDSEdge(self, *args)


    def GetDSCurveFromSectEdge(self, *args):
        """
        GetDSCurveFromSectEdge(TopOpeBRepBuild_HBuilder self, TopoDS_Shape SectEdge) -> Standard_Integer

        :type SectEdge: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_HBuilder_GetDSCurveFromSectEdge(self, *args)


    def GetDSFaceFromDSCurve(self, *args):
        """
        GetDSFaceFromDSCurve(TopOpeBRepBuild_HBuilder self, Standard_Integer const indexCur, Standard_Integer const rank) -> Standard_Integer

        :type indexCur: int
        :type rank: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_HBuilder_GetDSFaceFromDSCurve(self, *args)


    def GetDSPointFromNewVertex(self, *args):
        """
        GetDSPointFromNewVertex(TopOpeBRepBuild_HBuilder self, TopoDS_Shape NewVert) -> Standard_Integer

        :type NewVert: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_HBuilder_GetDSPointFromNewVertex(self, *args)


    def EdgeCurveAncestors(self, *args):
        """
        EdgeCurveAncestors(TopOpeBRepBuild_HBuilder self, TopoDS_Shape E, TopoDS_Shape F1, TopoDS_Shape F2) -> Standard_Boolean

        search for the couple of face F1,F2
        (from arguments of supra Perform(S1,S2,HDS)) method which
        intersection gives section edge E built on an intersection curve.
        returns True if F1,F2 have been valued.
        returns False if E is not a section edge built
        on intersection curve IC.

        :type E: OCC.wrapper.TopoDS.TopoDS_Shape
        :type F1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type F2: OCC.wrapper.TopoDS.TopoDS_Shape
        :type IC: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_HBuilder_EdgeCurveAncestors(self, *args)


    def EdgeSectionAncestors(self, *args):
        """
        EdgeSectionAncestors(TopOpeBRepBuild_HBuilder self, TopoDS_Shape E, NCollection_List_TopoDS_Shape LF1, NCollection_List_TopoDS_Shape LF2, NCollection_List_TopoDS_Shape LE1, NCollection_List_TopoDS_Shape LE2) -> Standard_Boolean

        search for the couple of face F1,F2
        (from arguments of supra Perform(S1,S2,HDS)) method which
        intersection gives section edge E built on at least one edge .
        returns True if F1,F2 have been valued.
        returns False if E is not a section edge built
        on at least one edge of S1 and/or S2.
        LE1,LE2 are edges of S1,S2 which common part is edge E.
        LE1 or LE2 may be empty() but not both.

        :type E: OCC.wrapper.TopoDS.TopoDS_Shape
        :type LF1: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type LF2: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type LE1: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type LE2: OCC.wrapper.TopTools.TopTools_ListOfShape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_HBuilder_EdgeSectionAncestors(self, *args)


    def IsKPart(self, *args):
        """
        IsKPart(TopOpeBRepBuild_HBuilder self) -> Standard_Integer

        Returns 0 is standard operation, != 0 if particular case

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_HBuilder_IsKPart(self, *args)


    def MergeKPart(self, *args):
        """
        MergeKPart(TopOpeBRepBuild_HBuilder self, TopAbs_State const TB1, TopAbs_State const TB2)

        :type TB1: OCC.wrapper.TopAbs.TopAbs_State
        :type TB2: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_HBuilder_MergeKPart(self, *args)


    def ChangeBuilder(self, *args):
        """
        ChangeBuilder(TopOpeBRepBuild_HBuilder self) -> TopOpeBRepBuild_Builder

        :rtype: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_Builder

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_HBuilder_ChangeBuilder(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_HBuilder_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_HBuilder_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_HBuilder_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TopOpeBRepBuild.delete_TopOpeBRepBuild_HBuilder
TopOpeBRepBuild_HBuilder_swigregister = _TopOpeBRepBuild.TopOpeBRepBuild_HBuilder_swigregister
TopOpeBRepBuild_HBuilder_swigregister(TopOpeBRepBuild_HBuilder)

def TopOpeBRepBuild_HBuilder_get_type_name(*args):
    """
    TopOpeBRepBuild_HBuilder_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_HBuilder_get_type_name(*args)

def TopOpeBRepBuild_HBuilder_get_type_descriptor(*args):
    """
    TopOpeBRepBuild_HBuilder_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_HBuilder_get_type_descriptor(*args)

class TopOpeBRepBuild_GTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GFusUnsh(*args):
        """
        GFusUnsh(TopAbs_ShapeEnum const s1, TopAbs_ShapeEnum const s2) -> TopOpeBRepBuild_GTopo

        :type s1: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :type s2: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :rtype: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_GTool_GFusUnsh(*args)

    GFusUnsh = staticmethod(GFusUnsh)

    def GFusSame(*args):
        """
        GFusSame(TopAbs_ShapeEnum const s1, TopAbs_ShapeEnum const s2) -> TopOpeBRepBuild_GTopo

        :type s1: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :type s2: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :rtype: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_GTool_GFusSame(*args)

    GFusSame = staticmethod(GFusSame)

    def GFusDiff(*args):
        """
        GFusDiff(TopAbs_ShapeEnum const s1, TopAbs_ShapeEnum const s2) -> TopOpeBRepBuild_GTopo

        :type s1: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :type s2: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :rtype: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_GTool_GFusDiff(*args)

    GFusDiff = staticmethod(GFusDiff)

    def GCutUnsh(*args):
        """
        GCutUnsh(TopAbs_ShapeEnum const s1, TopAbs_ShapeEnum const s2) -> TopOpeBRepBuild_GTopo

        :type s1: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :type s2: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :rtype: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_GTool_GCutUnsh(*args)

    GCutUnsh = staticmethod(GCutUnsh)

    def GCutSame(*args):
        """
        GCutSame(TopAbs_ShapeEnum const s1, TopAbs_ShapeEnum const s2) -> TopOpeBRepBuild_GTopo

        :type s1: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :type s2: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :rtype: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_GTool_GCutSame(*args)

    GCutSame = staticmethod(GCutSame)

    def GCutDiff(*args):
        """
        GCutDiff(TopAbs_ShapeEnum const s1, TopAbs_ShapeEnum const s2) -> TopOpeBRepBuild_GTopo

        :type s1: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :type s2: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :rtype: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_GTool_GCutDiff(*args)

    GCutDiff = staticmethod(GCutDiff)

    def GComUnsh(*args):
        """
        GComUnsh(TopAbs_ShapeEnum const s1, TopAbs_ShapeEnum const s2) -> TopOpeBRepBuild_GTopo

        :type s1: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :type s2: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :rtype: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_GTool_GComUnsh(*args)

    GComUnsh = staticmethod(GComUnsh)

    def GComSame(*args):
        """
        GComSame(TopAbs_ShapeEnum const s1, TopAbs_ShapeEnum const s2) -> TopOpeBRepBuild_GTopo

        :type s1: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :type s2: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :rtype: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_GTool_GComSame(*args)

    GComSame = staticmethod(GComSame)

    def GComDiff(*args):
        """
        GComDiff(TopAbs_ShapeEnum const s1, TopAbs_ShapeEnum const s2) -> TopOpeBRepBuild_GTopo

        :type s1: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :type s2: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :rtype: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_GTool_GComDiff(*args)

    GComDiff = staticmethod(GComDiff)

    def Dump(*args):
        """
        Dump(Standard_OStream & OS)

        :type OS: OCC.wrapper.Standard.Standard_OStream

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_GTool_Dump(*args)

    Dump = staticmethod(Dump)

    def __init__(self):
        this = _TopOpeBRepBuild.new_TopOpeBRepBuild_GTool()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TopOpeBRepBuild.delete_TopOpeBRepBuild_GTool
TopOpeBRepBuild_GTool_swigregister = _TopOpeBRepBuild.TopOpeBRepBuild_GTool_swigregister
TopOpeBRepBuild_GTool_swigregister(TopOpeBRepBuild_GTool)

def TopOpeBRepBuild_GTool_GFusUnsh(*args):
    """
    TopOpeBRepBuild_GTool_GFusUnsh(TopAbs_ShapeEnum const s1, TopAbs_ShapeEnum const s2) -> TopOpeBRepBuild_GTopo

    :type s1: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
    :type s2: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
    :rtype: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_GTool_GFusUnsh(*args)

def TopOpeBRepBuild_GTool_GFusSame(*args):
    """
    TopOpeBRepBuild_GTool_GFusSame(TopAbs_ShapeEnum const s1, TopAbs_ShapeEnum const s2) -> TopOpeBRepBuild_GTopo

    :type s1: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
    :type s2: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
    :rtype: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_GTool_GFusSame(*args)

def TopOpeBRepBuild_GTool_GFusDiff(*args):
    """
    TopOpeBRepBuild_GTool_GFusDiff(TopAbs_ShapeEnum const s1, TopAbs_ShapeEnum const s2) -> TopOpeBRepBuild_GTopo

    :type s1: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
    :type s2: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
    :rtype: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_GTool_GFusDiff(*args)

def TopOpeBRepBuild_GTool_GCutUnsh(*args):
    """
    TopOpeBRepBuild_GTool_GCutUnsh(TopAbs_ShapeEnum const s1, TopAbs_ShapeEnum const s2) -> TopOpeBRepBuild_GTopo

    :type s1: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
    :type s2: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
    :rtype: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_GTool_GCutUnsh(*args)

def TopOpeBRepBuild_GTool_GCutSame(*args):
    """
    TopOpeBRepBuild_GTool_GCutSame(TopAbs_ShapeEnum const s1, TopAbs_ShapeEnum const s2) -> TopOpeBRepBuild_GTopo

    :type s1: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
    :type s2: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
    :rtype: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_GTool_GCutSame(*args)

def TopOpeBRepBuild_GTool_GCutDiff(*args):
    """
    TopOpeBRepBuild_GTool_GCutDiff(TopAbs_ShapeEnum const s1, TopAbs_ShapeEnum const s2) -> TopOpeBRepBuild_GTopo

    :type s1: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
    :type s2: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
    :rtype: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_GTool_GCutDiff(*args)

def TopOpeBRepBuild_GTool_GComUnsh(*args):
    """
    TopOpeBRepBuild_GTool_GComUnsh(TopAbs_ShapeEnum const s1, TopAbs_ShapeEnum const s2) -> TopOpeBRepBuild_GTopo

    :type s1: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
    :type s2: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
    :rtype: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_GTool_GComUnsh(*args)

def TopOpeBRepBuild_GTool_GComSame(*args):
    """
    TopOpeBRepBuild_GTool_GComSame(TopAbs_ShapeEnum const s1, TopAbs_ShapeEnum const s2) -> TopOpeBRepBuild_GTopo

    :type s1: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
    :type s2: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
    :rtype: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_GTool_GComSame(*args)

def TopOpeBRepBuild_GTool_GComDiff(*args):
    """
    TopOpeBRepBuild_GTool_GComDiff(TopAbs_ShapeEnum const s1, TopAbs_ShapeEnum const s2) -> TopOpeBRepBuild_GTopo

    :type s1: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
    :type s2: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
    :rtype: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_GTool_GComDiff(*args)

def TopOpeBRepBuild_GTool_Dump(*args):
    """
    TopOpeBRepBuild_GTool_Dump(Standard_OStream & OS)

    :type OS: OCC.wrapper.Standard.Standard_OStream

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_GTool_Dump(*args)

class TopOpeBRepBuild_GIter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopOpeBRepBuild_GIter self) -> TopOpeBRepBuild_GIter
        __init__(TopOpeBRepBuild_GIter self, TopOpeBRepBuild_GTopo G) -> TopOpeBRepBuild_GIter

        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo

        """
        this = _TopOpeBRepBuild.new_TopOpeBRepBuild_GIter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(TopOpeBRepBuild_GIter self)
        Init(TopOpeBRepBuild_GIter self, TopOpeBRepBuild_GTopo G)

        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_GIter_Init(self, *args)


    def More(self, *args):
        """
        More(TopOpeBRepBuild_GIter self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_GIter_More(self, *args)


    def Next(self, *args):
        """Next(TopOpeBRepBuild_GIter self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_GIter_Next(self, *args)


    def Current(self, *args):
        """
        Current(TopOpeBRepBuild_GIter self)

        :type s1: OCC.wrapper.TopAbs.TopAbs_State
        :type s2: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_GIter_Current(self, *args)


    def Dump(self, *args):
        """
        Dump(TopOpeBRepBuild_GIter self, Standard_OStream & OS)

        :type OS: OCC.wrapper.Standard.Standard_OStream

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_GIter_Dump(self, *args)

    __swig_destroy__ = _TopOpeBRepBuild.delete_TopOpeBRepBuild_GIter
TopOpeBRepBuild_GIter_swigregister = _TopOpeBRepBuild.TopOpeBRepBuild_GIter_swigregister
TopOpeBRepBuild_GIter_swigregister(TopOpeBRepBuild_GIter)

class TopOpeBRepBuild_BlockIterator(object):
    """Iterator on the elements of a block."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopOpeBRepBuild_BlockIterator self) -> TopOpeBRepBuild_BlockIterator
        __init__(TopOpeBRepBuild_BlockIterator self, Standard_Integer const Lower, Standard_Integer const Upper) -> TopOpeBRepBuild_BlockIterator

        :type Lower: int
        :type Upper: int

        """
        this = _TopOpeBRepBuild.new_TopOpeBRepBuild_BlockIterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Initialize(self, *args):
        """Initialize(TopOpeBRepBuild_BlockIterator self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_BlockIterator_Initialize(self, *args)


    def More(self, *args):
        """
        More(TopOpeBRepBuild_BlockIterator self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_BlockIterator_More(self, *args)


    def Next(self, *args):
        """Next(TopOpeBRepBuild_BlockIterator self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_BlockIterator_Next(self, *args)


    def Value(self, *args):
        """
        Value(TopOpeBRepBuild_BlockIterator self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_BlockIterator_Value(self, *args)


    def Extent(self, *args):
        """
        Extent(TopOpeBRepBuild_BlockIterator self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_BlockIterator_Extent(self, *args)

    __swig_destroy__ = _TopOpeBRepBuild.delete_TopOpeBRepBuild_BlockIterator
TopOpeBRepBuild_BlockIterator_swigregister = _TopOpeBRepBuild.TopOpeBRepBuild_BlockIterator_swigregister
TopOpeBRepBuild_BlockIterator_swigregister(TopOpeBRepBuild_BlockIterator)

class NCollection_List_TopOpeBRepBuild_ShapeListOfShape_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _TopOpeBRepBuild.new_NCollection_List_TopOpeBRepBuild_ShapeListOfShape_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TopOpeBRepBuild.delete_NCollection_List_TopOpeBRepBuild_ShapeListOfShape_IteratorHelper

    def __next__(self):
        return _TopOpeBRepBuild.NCollection_List_TopOpeBRepBuild_ShapeListOfShape_IteratorHelper___next__(self)
NCollection_List_TopOpeBRepBuild_ShapeListOfShape_IteratorHelper_swigregister = _TopOpeBRepBuild.NCollection_List_TopOpeBRepBuild_ShapeListOfShape_IteratorHelper_swigregister
NCollection_List_TopOpeBRepBuild_ShapeListOfShape_IteratorHelper_swigregister(NCollection_List_TopOpeBRepBuild_ShapeListOfShape_IteratorHelper)


try:
	TopOpeBRepBuild_ListOfShapeListOfShape = NCollection_List_TopOpeBRepBuild_ShapeListOfShape
except NameError:
	pass # does not exist, probably ignored

class Handle_TopOpeBRepBuild_HBuilder(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TopOpeBRepBuild_HBuilder self)

        Nullify the handle


        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TopOpeBRepBuild_HBuilder self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TopOpeBRepBuild_HBuilder self, TopOpeBRepBuild_HBuilder thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TopOpeBRepBuild_HBuilder self, Handle_TopOpeBRepBuild_HBuilder theHandle) -> Handle_TopOpeBRepBuild_HBuilder
        assign(Handle_TopOpeBRepBuild_HBuilder self, TopOpeBRepBuild_HBuilder thePtr) -> Handle_TopOpeBRepBuild_HBuilder
        assign(Handle_TopOpeBRepBuild_HBuilder self, Handle_TopOpeBRepBuild_HBuilder theHandle) -> Handle_TopOpeBRepBuild_HBuilder

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TopOpeBRepBuild_HBuilder self) -> TopOpeBRepBuild_HBuilder

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TopOpeBRepBuild_HBuilder self) -> TopOpeBRepBuild_HBuilder

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TopOpeBRepBuild_HBuilder self) -> TopOpeBRepBuild_HBuilder

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder___ref__(self, *args)


    def __hash__(self):
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TopOpeBRepBuild.new_Handle_TopOpeBRepBuild_HBuilder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_DownCast)
    __swig_destroy__ = _TopOpeBRepBuild.delete_Handle_TopOpeBRepBuild_HBuilder

    def BuildTool(self, *args):
        """
        :rtype: OCC.wrapper.TopOpeBRepDS.TopOpeBRepDS_BuildTool

        """
        res = _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_BuildTool(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Perform(self, *args):
        """
        Perform(Handle_TopOpeBRepBuild_HBuilder self, Handle_TopOpeBRepDS_HDataStructure HDS)
        Perform(Handle_TopOpeBRepBuild_HBuilder self, Handle_TopOpeBRepDS_HDataStructure HDS, TopoDS_Shape S1, TopoDS_Shape S2)

        Same as previous + evaluates if an operation performed on shapes S1,S2
        is a particular case.

        :type HDS: OCC.wrapper.TopOpeBRepDS.Handle_TopOpeBRepDS_HDataStructure
        :type S1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type S2: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_Perform(self, *args)


    def Clear(self, *args):
        """
        Clear(Handle_TopOpeBRepBuild_HBuilder self)

        Removes all split and merge already performed.
        Does NOT clear the handled DS.


        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_Clear(self, *args)


    def DataStructure(self, *args):
        """
        DataStructure(Handle_TopOpeBRepBuild_HBuilder self) -> Handle_TopOpeBRepDS_HDataStructure

        returns the DS handled by this builder

        :rtype: OCC.wrapper.TopOpeBRepDS.Handle_TopOpeBRepDS_HDataStructure

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_DataStructure(self, *args)


    def ChangeBuildTool(self, *args):
        """
        ChangeBuildTool(Handle_TopOpeBRepBuild_HBuilder self) -> TopOpeBRepDS_BuildTool

        :rtype: OCC.wrapper.TopOpeBRepDS.TopOpeBRepDS_BuildTool

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_ChangeBuildTool(self, *args)


    def MergeShapes(self, *args):
        """
        MergeShapes(Handle_TopOpeBRepBuild_HBuilder self, TopoDS_Shape S1, TopAbs_State const TB1, TopoDS_Shape S2, TopAbs_State const TB2)

        Merges the two shapes <S1> and <S2> keeping the
        parts of states <TB1>,<TB2> in <S1>,<S2>.

        :type S1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type TB1: OCC.wrapper.TopAbs.TopAbs_State
        :type S2: OCC.wrapper.TopoDS.TopoDS_Shape
        :type TB2: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_MergeShapes(self, *args)


    def MergeSolids(self, *args):
        """
        MergeSolids(Handle_TopOpeBRepBuild_HBuilder self, TopoDS_Shape S1, TopAbs_State const TB1, TopoDS_Shape S2, TopAbs_State const TB2)

        Merges  the two solids <S1>   and <S2> keeping the
        parts in each solid of states <TB1> and <TB2>.

        :type S1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type TB1: OCC.wrapper.TopAbs.TopAbs_State
        :type S2: OCC.wrapper.TopoDS.TopoDS_Shape
        :type TB2: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_MergeSolids(self, *args)


    def MergeSolid(self, *args):
        """
        MergeSolid(Handle_TopOpeBRepBuild_HBuilder self, TopoDS_Shape S, TopAbs_State const TB)

        Merges the solid <S>  keeping the
        parts of state <TB>.

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type TB: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_MergeSolid(self, *args)


    def IsSplit(self, *args):
        """
        IsSplit(Handle_TopOpeBRepBuild_HBuilder self, TopoDS_Shape S, TopAbs_State const ToBuild) -> Standard_Boolean

        Returns True if the shape <S> has been split.

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type ToBuild: OCC.wrapper.TopAbs.TopAbs_State
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_IsSplit(self, *args)


    def Splits(self, *args):
        """
        Returns the split parts <ToBuild> of shape <S>.

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type ToBuild: OCC.wrapper.TopAbs.TopAbs_State
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_Splits(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsMerged(self, *args):
        """
        IsMerged(Handle_TopOpeBRepBuild_HBuilder self, TopoDS_Shape S, TopAbs_State const ToBuild) -> Standard_Boolean

        Returns True if the shape <S> has been merged.

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type ToBuild: OCC.wrapper.TopAbs.TopAbs_State
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_IsMerged(self, *args)


    def Merged(self, *args):
        """
        Returns the merged parts <ToBuild> of shape <S>.

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type ToBuild: OCC.wrapper.TopAbs.TopAbs_State
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_Merged(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NewVertex(self, *args):
        """
        Returns the vertex created on point <I>.

        :type I: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_NewVertex(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NewEdges(self, *args):
        """
        Returns the edges created on curve <I>.

        :type I: int
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_NewEdges(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeNewEdges(self, *args):
        """
        ChangeNewEdges(Handle_TopOpeBRepBuild_HBuilder self, Standard_Integer const I) -> NCollection_List_TopoDS_Shape

        Returns the edges created on curve <I>.

        :type I: int
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_ChangeNewEdges(self, *args)


    def NewFaces(self, *args):
        """
        Returns the faces created on surface <I>.

        :type I: int
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_NewFaces(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Section(self, *args):
        """
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_Section(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def InitExtendedSectionDS(self, *args):
        """
        InitExtendedSectionDS(Handle_TopOpeBRepBuild_HBuilder self, Standard_Integer const k=3)

        :type k: int

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_InitExtendedSectionDS(self, *args)


    def InitSection(self, *args):
        """
        InitSection(Handle_TopOpeBRepBuild_HBuilder self, Standard_Integer const k=3)

        :type k: int

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_InitSection(self, *args)


    def MoreSection(self, *args):
        """
        MoreSection(Handle_TopOpeBRepBuild_HBuilder self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_MoreSection(self, *args)


    def NextSection(self, *args):
        """NextSection(Handle_TopOpeBRepBuild_HBuilder self)"""
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_NextSection(self, *args)


    def CurrentSection(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_CurrentSection(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetDSEdgeFromSectEdge(self, *args):
        """
        GetDSEdgeFromSectEdge(Handle_TopOpeBRepBuild_HBuilder self, TopoDS_Shape E, Standard_Integer const rank) -> Standard_Integer

        :type E: OCC.wrapper.TopoDS.TopoDS_Shape
        :type rank: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_GetDSEdgeFromSectEdge(self, *args)


    def GetDSFaceFromDSEdge(self, *args):
        """
        GetDSFaceFromDSEdge(Handle_TopOpeBRepBuild_HBuilder self, Standard_Integer const indexEdg, Standard_Integer const rank) -> NCollection_List_Standard_Integer

        :type indexEdg: int
        :type rank: int
        :rtype: OCC.wrapper.TColStd.TColStd_ListOfInteger

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_GetDSFaceFromDSEdge(self, *args)


    def GetDSCurveFromSectEdge(self, *args):
        """
        GetDSCurveFromSectEdge(Handle_TopOpeBRepBuild_HBuilder self, TopoDS_Shape SectEdge) -> Standard_Integer

        :type SectEdge: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_GetDSCurveFromSectEdge(self, *args)


    def GetDSFaceFromDSCurve(self, *args):
        """
        GetDSFaceFromDSCurve(Handle_TopOpeBRepBuild_HBuilder self, Standard_Integer const indexCur, Standard_Integer const rank) -> Standard_Integer

        :type indexCur: int
        :type rank: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_GetDSFaceFromDSCurve(self, *args)


    def GetDSPointFromNewVertex(self, *args):
        """
        GetDSPointFromNewVertex(Handle_TopOpeBRepBuild_HBuilder self, TopoDS_Shape NewVert) -> Standard_Integer

        :type NewVert: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_GetDSPointFromNewVertex(self, *args)


    def EdgeCurveAncestors(self, *args):
        """
        EdgeCurveAncestors(Handle_TopOpeBRepBuild_HBuilder self, TopoDS_Shape E, TopoDS_Shape F1, TopoDS_Shape F2) -> Standard_Boolean

        search for the couple of face F1,F2
        (from arguments of supra Perform(S1,S2,HDS)) method which
        intersection gives section edge E built on an intersection curve.
        returns True if F1,F2 have been valued.
        returns False if E is not a section edge built
        on intersection curve IC.

        :type E: OCC.wrapper.TopoDS.TopoDS_Shape
        :type F1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type F2: OCC.wrapper.TopoDS.TopoDS_Shape
        :type IC: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_EdgeCurveAncestors(self, *args)


    def EdgeSectionAncestors(self, *args):
        """
        EdgeSectionAncestors(Handle_TopOpeBRepBuild_HBuilder self, TopoDS_Shape E, NCollection_List_TopoDS_Shape LF1, NCollection_List_TopoDS_Shape LF2, NCollection_List_TopoDS_Shape LE1, NCollection_List_TopoDS_Shape LE2) -> Standard_Boolean

        search for the couple of face F1,F2
        (from arguments of supra Perform(S1,S2,HDS)) method which
        intersection gives section edge E built on at least one edge .
        returns True if F1,F2 have been valued.
        returns False if E is not a section edge built
        on at least one edge of S1 and/or S2.
        LE1,LE2 are edges of S1,S2 which common part is edge E.
        LE1 or LE2 may be empty() but not both.

        :type E: OCC.wrapper.TopoDS.TopoDS_Shape
        :type LF1: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type LF2: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type LE1: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type LE2: OCC.wrapper.TopTools.TopTools_ListOfShape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_EdgeSectionAncestors(self, *args)


    def IsKPart(self, *args):
        """
        IsKPart(Handle_TopOpeBRepBuild_HBuilder self) -> Standard_Integer

        Returns 0 is standard operation, != 0 if particular case

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_IsKPart(self, *args)


    def MergeKPart(self, *args):
        """
        MergeKPart(Handle_TopOpeBRepBuild_HBuilder self, TopAbs_State const TB1, TopAbs_State const TB2)

        :type TB1: OCC.wrapper.TopAbs.TopAbs_State
        :type TB2: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_MergeKPart(self, *args)


    def ChangeBuilder(self, *args):
        """
        ChangeBuilder(Handle_TopOpeBRepBuild_HBuilder self) -> TopOpeBRepBuild_Builder

        :rtype: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_Builder

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_ChangeBuilder(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TopOpeBRepBuild_HBuilder self) -> char const *

        :rtype: const char *

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TopOpeBRepBuild_HBuilder self)

        Memory deallocator for transient classes


        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TopOpeBRepBuild_HBuilder self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TopOpeBRepBuild_HBuilder self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TopOpeBRepBuild_HBuilder self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TopOpeBRepBuild_HBuilder self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TopOpeBRepBuild_HBuilder self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TopOpeBRepBuild_HBuilder self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TopOpeBRepBuild_HBuilder self)

        Increments the reference counter of this object


        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TopOpeBRepBuild_HBuilder self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_DecrementRefCounter(self, *args)

Handle_TopOpeBRepBuild_HBuilder_swigregister = _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_swigregister
Handle_TopOpeBRepBuild_HBuilder_swigregister(Handle_TopOpeBRepBuild_HBuilder)

def Handle_TopOpeBRepBuild_HBuilder_DownCast(thing):
    return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_DownCast(thing)
Handle_TopOpeBRepBuild_HBuilder_DownCast = _TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder_DownCast

class NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher(NCollection.NCollection_BaseMap):
    """
    Purpose:     An indexed map is used  to store keys and to  bind
    an index to them.  Each  new key stored in the map
    gets an index.  Index are  incremented as keys are
    stored in the map. A key can be found by the index
    and an index by the key.  No  key but the last can
    be  removed so the  indices   are in the range 1..
    Extent.  An Item is stored with each key.

    This   class is   similar  to  IndexedMap     from
    NCollection  with the Item as  a new feature. Note
    the important difference on  the operator  ().  In
    the IndexedMap this operator returns  the Key.  In
    the IndexedDataMap this operator returns the Item.

    See  the  class   Map   from NCollection   for   a
    discussion about the number of buckets.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher self) -> NCollection_IndexedDataMap< TopoDS_Shape,TopOpeBRepBuild_VertexInfo,TopTools_ShapeMapHasher >::iterator

        Returns an iterator pointing to the first element in the map.

        :rtype: iterator

        """
        return _TopOpeBRepBuild.NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher self) -> NCollection_IndexedDataMap< TopoDS_Shape,TopOpeBRepBuild_VertexInfo,TopTools_ShapeMapHasher >::iterator

        Returns an iterator referring to the past-the-end element in the map.

        :rtype: iterator

        """
        return _TopOpeBRepBuild.NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher self) -> NCollection_IndexedDataMap< TopoDS_Shape,TopOpeBRepBuild_VertexInfo,TopTools_ShapeMapHasher >::const_iterator

        Returns a const iterator pointing to the first element in the map.

        :rtype: const_iterator

        """
        return _TopOpeBRepBuild.NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher self) -> NCollection_IndexedDataMap< TopoDS_Shape,TopOpeBRepBuild_VertexInfo,TopTools_ShapeMapHasher >::const_iterator

        Returns a const iterator referring to the past-the-end element in the map.

        :rtype: const_iterator

        """
        return _TopOpeBRepBuild.NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     An indexed map is used  to store keys and to  bind
        an index to them.  Each  new key stored in the map
        gets an index.  Index are  incremented as keys are
        stored in the map. A key can be found by the index
        and an index by the key.  No  key but the last can
        be  removed so the  indices   are in the range 1..
        Extent.  An Item is stored with each key.

        This   class is   similar  to  IndexedMap     from
        NCollection  with the Item as  a new feature. Note
        the important difference on  the operator  ().  In
        the IndexedMap this operator returns  the Key.  In
        the IndexedDataMap this operator returns the Item.

        See  the  class   Map   from NCollection   for   a
        discussion about the number of buckets.
        """
        this = _TopOpeBRepBuild.new_NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, *args):
        """
        Exchange(NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher self, NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher theOther)

        Exchange the content of two maps without re-allocations.
        Notice that allocators will be swapped as well!

        :type theOther: OCC.wrapper.NCollection.NCollection_IndexedDataMap

        """
        return _TopOpeBRepBuild.NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher_Exchange(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher self, NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher theOther) -> NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher

        Assignment.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_IndexedDataMap
        :rtype: OCC.wrapper.NCollection.NCollection_IndexedDataMap

        """
        return _TopOpeBRepBuild.NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher self, NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher theOther) -> NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_IndexedDataMap
        :rtype: OCC.wrapper.NCollection.NCollection_IndexedDataMap

        """
        return _TopOpeBRepBuild.NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher_assign(self, *args)


    def ReSize(self, *args):
        """
        ReSize(NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher self, Standard_Integer const N)

        ReSize

        :type N: int

        """
        return _TopOpeBRepBuild.NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher_ReSize(self, *args)


    def Add(self, *args):
        """
        Add(NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher self, TopoDS_Shape theKey1, TopOpeBRepBuild_VertexInfo theItem) -> Standard_Integer

        Returns the Index of already bound Key or appends new Key with specified Item value.
        @param theKey1 Key to search (and to bind, if it was not bound already)
        @param theItem Item value to set for newly bound Key; ignored if Key was already bound
        @return index of Key

        :type theKey1: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher_Add(self, *args)


    def Contains(self, *args):
        """
        Contains(NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher self, TopoDS_Shape theKey1) -> Standard_Boolean

        Contains

        :type theKey1: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher_Contains(self, *args)


    def Substitute(self, *args):
        """
        Substitute(NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher self, Standard_Integer const theIndex, TopoDS_Shape theKey1, TopOpeBRepBuild_VertexInfo theItem)

        Substitute

        :type theIndex: int
        :type theKey1: const TheKeyType &
        :type theItem: const TheItemType &

        """
        return _TopOpeBRepBuild.NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher_Substitute(self, *args)


    def Swap(self, *args):
        """
        Swap(NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher self, Standard_Integer const theIndex1, Standard_Integer const theIndex2)

        Swaps two elements with the given indices.

        :type theIndex1: int
        :type theIndex2: int

        """
        return _TopOpeBRepBuild.NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher_Swap(self, *args)


    def RemoveLast(self, *args):
        """
        RemoveLast(NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher self)

        RemoveLast


        """
        return _TopOpeBRepBuild.NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher_RemoveLast(self, *args)


    def RemoveFromIndex(self, *args):
        """
        RemoveFromIndex(NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher self, Standard_Integer const theIndex)

        Remove the key of the given index.
        Caution! The index of the last key can be changed.

        :type theIndex: int

        """
        return _TopOpeBRepBuild.NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher_RemoveFromIndex(self, *args)


    def RemoveKey(self, *args):
        """
        RemoveKey(NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher self, TopoDS_Shape theKey1)

        Remove the given key.
        Caution! The index of the last key can be changed.

        :type theKey1: const TheKeyType &

        """
        return _TopOpeBRepBuild.NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher_RemoveKey(self, *args)


    def FindKey(self, *args):
        """
        FindKey

        :type theIndex: int
        :rtype: const TheKeyType &

        """
        res = _TopOpeBRepBuild.NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher_FindKey(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FindFromIndex(self, *args):
        """
        FindFromIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TopOpeBRepBuild.NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher_FindFromIndex(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFromIndex(self, *args):
        """
        ChangeFromIndex(NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher self, Standard_Integer const theIndex) -> TopOpeBRepBuild_VertexInfo

        ChangeFromIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _TopOpeBRepBuild.NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher_ChangeFromIndex(self, *args)


    def __call__(self, *args):
        """
        operator ()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TopOpeBRepBuild.NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FindIndex(self, *args):
        """
        FindIndex(NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher self, TopoDS_Shape theKey1) -> Standard_Integer

        FindIndex

        :type theKey1: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher_FindIndex(self, *args)


    def ChangeFromKey(self, *args):
        """
        ChangeFromKey(NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher self, TopoDS_Shape theKey1) -> TopOpeBRepBuild_VertexInfo

        ChangeFromKey

        :type theKey1: const TheKeyType &
        :rtype: TheItemType &

        """
        return _TopOpeBRepBuild.NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher_ChangeFromKey(self, *args)


    def Seek(self, *args):
        """
        Seek(NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher self, TopoDS_Shape theKey1) -> TopOpeBRepBuild_VertexInfo

        Seek returns pointer to Item by Key. Returns
        NULL if Key was not found.

        :type theKey1: const TheKeyType &
        :rtype: const TheItemType *

        """
        return _TopOpeBRepBuild.NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher_Seek(self, *args)


    def ChangeSeek(self, *args):
        """
        ChangeSeek(NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher self, TopoDS_Shape theKey1) -> TopOpeBRepBuild_VertexInfo

        ChangeSeek returns modifiable pointer to Item by Key. Returns
        NULL if Key was not found.

        :type theKey1: const TheKeyType &
        :rtype: TheItemType *

        """
        return _TopOpeBRepBuild.NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher_ChangeSeek(self, *args)


    def FindFromKey(self, *args):
        """
        FindFromKey

        :type theKey1: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _TopOpeBRepBuild.NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher_FindFromKey(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Clear(self, *args):
        """
        Clear(NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher self, Standard_Boolean const doReleaseMemory)
        Clear(NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher self, Handle_NCollection_BaseAllocator theAllocator)

        Clear data and reset allocator

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _TopOpeBRepBuild.NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher_Clear(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher self) -> Standard_Integer

        Size

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher_Size(self, *args)


    def __iter__(self):
        return _TopOpeBRepBuild.NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher___iter__(self)
    __swig_destroy__ = _TopOpeBRepBuild.delete_NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher
NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher_swigregister = _TopOpeBRepBuild.NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher_swigregister
NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher_swigregister(NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher)

class NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _TopOpeBRepBuild.new_NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TopOpeBRepBuild.delete_NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher_IteratorHelper

    def __next__(self):
        return _TopOpeBRepBuild.NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher_IteratorHelper___next__(self)
NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher_IteratorHelper_swigregister = _TopOpeBRepBuild.NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher_IteratorHelper_swigregister
NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher_IteratorHelper_swigregister(NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher_IteratorHelper)


try:
	TopOpeBRepBuild_IndexedDataMapOfShapeVertexInfo = NCollection_IndexedDataMap_TopoDS_Shape_TopOpeBRepBuild_VertexInfo_TopTools_ShapeMapHasher
except NameError:
	pass # does not exist, probably ignored

class Handle_TopOpeBRepBuild_Pave(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TopOpeBRepBuild_Pave self)

        Nullify the handle


        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Pave_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TopOpeBRepBuild_Pave self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Pave_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TopOpeBRepBuild_Pave self, TopOpeBRepBuild_Pave thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Pave_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TopOpeBRepBuild_Pave self, Handle_TopOpeBRepBuild_Pave theHandle) -> Handle_TopOpeBRepBuild_Pave
        assign(Handle_TopOpeBRepBuild_Pave self, TopOpeBRepBuild_Pave thePtr) -> Handle_TopOpeBRepBuild_Pave
        assign(Handle_TopOpeBRepBuild_Pave self, Handle_TopOpeBRepBuild_Pave theHandle) -> Handle_TopOpeBRepBuild_Pave

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Pave_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TopOpeBRepBuild_Pave self) -> TopOpeBRepBuild_Pave

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Pave_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TopOpeBRepBuild_Pave self) -> TopOpeBRepBuild_Pave

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Pave___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TopOpeBRepBuild_Pave self) -> TopOpeBRepBuild_Pave

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Pave___ref__(self, *args)


    def __hash__(self):
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Pave___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Pave___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TopOpeBRepBuild.new_Handle_TopOpeBRepBuild_Pave(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TopOpeBRepBuild.Handle_TopOpeBRepBuild_Pave_DownCast)
    __swig_destroy__ = _TopOpeBRepBuild.delete_Handle_TopOpeBRepBuild_Pave

    def HasSameDomain(self, *args):
        """
        HasSameDomain(Handle_TopOpeBRepBuild_Pave self, Standard_Boolean const b)
        HasSameDomain(Handle_TopOpeBRepBuild_Pave self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Pave_HasSameDomain(self, *args)


    def SameDomain(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Pave_SameDomain(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Vertex(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Pave_Vertex(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeVertex(self, *args):
        """
        ChangeVertex(Handle_TopOpeBRepBuild_Pave self) -> TopoDS_Shape

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Pave_ChangeVertex(self, *args)


    def Parameter(self, *args):
        """
        Parameter(Handle_TopOpeBRepBuild_Pave self) -> Standard_Real
        Parameter(Handle_TopOpeBRepBuild_Pave self, Standard_Real const Par)

        :type Par: float

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Pave_Parameter(self, *args)


    def InterferenceType(self, *args):
        """
        InterferenceType(Handle_TopOpeBRepBuild_Pave self) -> TopOpeBRepDS_Kind &

        :rtype: OCC.wrapper.TopOpeBRepDS.TopOpeBRepDS_Kind

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Pave_InterferenceType(self, *args)


    def IsShape(self, *args):
        """
        IsShape(Handle_TopOpeBRepBuild_Pave self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Pave_IsShape(self, *args)


    def Shape(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Pave_Shape(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Dump(self, *args):
        """Dump(Handle_TopOpeBRepBuild_Pave self)"""
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Pave_Dump(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TopOpeBRepBuild_Pave self) -> char const *

        :rtype: const char *

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Pave_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Pave_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Pave_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def BlockIterator(self, *args):
        """
        :rtype: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_BlockIterator

        """
        res = _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Pave_BlockIterator(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TopOpeBRepBuild_Pave self)

        Memory deallocator for transient classes


        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Pave_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TopOpeBRepBuild_Pave self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TopOpeBRepBuild_Pave self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Pave_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TopOpeBRepBuild_Pave self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TopOpeBRepBuild_Pave self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Pave_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TopOpeBRepBuild_Pave self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Pave_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TopOpeBRepBuild_Pave self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Pave_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TopOpeBRepBuild_Pave self)

        Increments the reference counter of this object


        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Pave_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TopOpeBRepBuild_Pave self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Pave_DecrementRefCounter(self, *args)

Handle_TopOpeBRepBuild_Pave_swigregister = _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Pave_swigregister
Handle_TopOpeBRepBuild_Pave_swigregister(Handle_TopOpeBRepBuild_Pave)

def Handle_TopOpeBRepBuild_Pave_DownCast(thing):
    return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Pave_DownCast(thing)
Handle_TopOpeBRepBuild_Pave_DownCast = _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Pave_DownCast

class TopOpeBRepBuild_BuilderON(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopOpeBRepBuild_BuilderON self) -> TopOpeBRepBuild_BuilderON
        __init__(TopOpeBRepBuild_BuilderON self, TopOpeBRepBuild_Builder PB, TopoDS_Shape F, TopOpeBRepBuild_GTopo PG, NCollection_List_TopoDS_Shape PLSclass, TopOpeBRepBuild_WireEdgeSet PWES) -> TopOpeBRepBuild_BuilderON

        :type PB: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_PBuilder
        :type F: OCC.wrapper.TopoDS.TopoDS_Shape
        :type PG: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_PGTopo
        :type PLSclass: OCC.wrapper.TopOpeBRepTool.TopOpeBRepTool_Plos
        :type PWES: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_PWireEdgeSet

        """
        this = _TopOpeBRepBuild.new_TopOpeBRepBuild_BuilderON(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Perform(self, *args):
        """
        Perform(TopOpeBRepBuild_BuilderON self, TopOpeBRepBuild_Builder PB, TopoDS_Shape F, TopOpeBRepBuild_GTopo PG, NCollection_List_TopoDS_Shape PLSclass, TopOpeBRepBuild_WireEdgeSet PWES)

        :type PB: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_PBuilder
        :type F: OCC.wrapper.TopoDS.TopoDS_Shape
        :type PG: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_PGTopo
        :type PLSclass: OCC.wrapper.TopOpeBRepTool.TopOpeBRepTool_Plos
        :type PWES: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_PWireEdgeSet

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_BuilderON_Perform(self, *args)


    def GFillONCheckI(self, *args):
        """
        GFillONCheckI(TopOpeBRepBuild_BuilderON self, Handle_TopOpeBRepDS_Interference I) -> Standard_Boolean

        :type I: OCC.wrapper.TopOpeBRepDS.Handle_TopOpeBRepDS_Interference
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_BuilderON_GFillONCheckI(self, *args)


    def GFillONPartsWES1(self, *args):
        """
        GFillONPartsWES1(TopOpeBRepBuild_BuilderON self, Handle_TopOpeBRepDS_Interference I)

        :type I: OCC.wrapper.TopOpeBRepDS.Handle_TopOpeBRepDS_Interference

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_BuilderON_GFillONPartsWES1(self, *args)


    def GFillONPartsWES2(self, *args):
        """
        GFillONPartsWES2(TopOpeBRepBuild_BuilderON self, Handle_TopOpeBRepDS_Interference I, TopoDS_Shape EspON)

        :type I: OCC.wrapper.TopOpeBRepDS.Handle_TopOpeBRepDS_Interference
        :type EspON: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_BuilderON_GFillONPartsWES2(self, *args)


    def Perform2d(self, *args):
        """
        Perform2d(TopOpeBRepBuild_BuilderON self, TopOpeBRepBuild_Builder PB, TopoDS_Shape F, TopOpeBRepBuild_GTopo PG, NCollection_List_TopoDS_Shape PLSclass, TopOpeBRepBuild_WireEdgeSet PWES)

        :type PB: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_PBuilder
        :type F: OCC.wrapper.TopoDS.TopoDS_Shape
        :type PG: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_PGTopo
        :type PLSclass: OCC.wrapper.TopOpeBRepTool.TopOpeBRepTool_Plos
        :type PWES: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_PWireEdgeSet

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_BuilderON_Perform2d(self, *args)


    def GFillONParts2dWES2(self, *args):
        """
        GFillONParts2dWES2(TopOpeBRepBuild_BuilderON self, Handle_TopOpeBRepDS_Interference I, TopoDS_Shape EspON)

        :type I: OCC.wrapper.TopOpeBRepDS.Handle_TopOpeBRepDS_Interference
        :type EspON: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_BuilderON_GFillONParts2dWES2(self, *args)

    __swig_destroy__ = _TopOpeBRepBuild.delete_TopOpeBRepBuild_BuilderON
TopOpeBRepBuild_BuilderON_swigregister = _TopOpeBRepBuild.TopOpeBRepBuild_BuilderON_swigregister
TopOpeBRepBuild_BuilderON_swigregister(TopOpeBRepBuild_BuilderON)

class TopOpeBRepBuild_BlockBuilder(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopOpeBRepBuild_BlockBuilder self) -> TopOpeBRepBuild_BlockBuilder
        __init__(TopOpeBRepBuild_BlockBuilder self, TopOpeBRepBuild_ShapeSet SS) -> TopOpeBRepBuild_BlockBuilder

        :type SS: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_ShapeSet

        """
        this = _TopOpeBRepBuild.new_TopOpeBRepBuild_BlockBuilder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def MakeBlock(self, *args):
        """
        MakeBlock(TopOpeBRepBuild_BlockBuilder self, TopOpeBRepBuild_ShapeSet SS)

        :type SS: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_ShapeSet

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_BlockBuilder_MakeBlock(self, *args)


    def InitBlock(self, *args):
        """InitBlock(TopOpeBRepBuild_BlockBuilder self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_BlockBuilder_InitBlock(self, *args)


    def MoreBlock(self, *args):
        """
        MoreBlock(TopOpeBRepBuild_BlockBuilder self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_BlockBuilder_MoreBlock(self, *args)


    def NextBlock(self, *args):
        """NextBlock(TopOpeBRepBuild_BlockBuilder self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_BlockBuilder_NextBlock(self, *args)


    def BlockIterator(self, *args):
        """
        BlockIterator(TopOpeBRepBuild_BlockBuilder self) -> TopOpeBRepBuild_BlockIterator

        :rtype: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_BlockIterator

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_BlockBuilder_BlockIterator(self, *args)


    def Element(self, *args):
        """
        :type I: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_BlockBuilder_Element(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ElementIsValid(self, *args):
        """
        ElementIsValid(TopOpeBRepBuild_BlockBuilder self, TopOpeBRepBuild_BlockIterator BI) -> Standard_Boolean
        ElementIsValid(TopOpeBRepBuild_BlockBuilder self, Standard_Integer const I) -> Standard_Boolean

        :type I: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_BlockBuilder_ElementIsValid(self, *args)


    def AddElement(self, *args):
        """
        AddElement(TopOpeBRepBuild_BlockBuilder self, TopoDS_Shape S) -> Standard_Integer

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_BlockBuilder_AddElement(self, *args)


    def SetValid(self, *args):
        """
        SetValid(TopOpeBRepBuild_BlockBuilder self, TopOpeBRepBuild_BlockIterator BI, Standard_Boolean const isvalid)
        SetValid(TopOpeBRepBuild_BlockBuilder self, Standard_Integer const I, Standard_Boolean const isvalid)

        :type I: int
        :type isvalid: bool

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_BlockBuilder_SetValid(self, *args)


    def CurrentBlockIsRegular(self, *args):
        """
        CurrentBlockIsRegular(TopOpeBRepBuild_BlockBuilder self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_BlockBuilder_CurrentBlockIsRegular(self, *args)

    __swig_destroy__ = _TopOpeBRepBuild.delete_TopOpeBRepBuild_BlockBuilder
TopOpeBRepBuild_BlockBuilder_swigregister = _TopOpeBRepBuild.TopOpeBRepBuild_BlockBuilder_swigregister
TopOpeBRepBuild_BlockBuilder_swigregister(TopOpeBRepBuild_BlockBuilder)

class Handle_TopOpeBRepBuild_Loop(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TopOpeBRepBuild_Loop self)

        Nullify the handle


        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TopOpeBRepBuild_Loop self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TopOpeBRepBuild_Loop self, TopOpeBRepBuild_Loop thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TopOpeBRepBuild_Loop self, Handle_TopOpeBRepBuild_Loop theHandle) -> Handle_TopOpeBRepBuild_Loop
        assign(Handle_TopOpeBRepBuild_Loop self, TopOpeBRepBuild_Loop thePtr) -> Handle_TopOpeBRepBuild_Loop
        assign(Handle_TopOpeBRepBuild_Loop self, Handle_TopOpeBRepBuild_Loop theHandle) -> Handle_TopOpeBRepBuild_Loop

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TopOpeBRepBuild_Loop self) -> TopOpeBRepBuild_Loop

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TopOpeBRepBuild_Loop self) -> TopOpeBRepBuild_Loop

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TopOpeBRepBuild_Loop self) -> TopOpeBRepBuild_Loop

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop___ref__(self, *args)


    def __hash__(self):
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TopOpeBRepBuild.new_Handle_TopOpeBRepBuild_Loop(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop_DownCast)
    __swig_destroy__ = _TopOpeBRepBuild.delete_Handle_TopOpeBRepBuild_Loop

    def IsShape(self, *args):
        """
        IsShape(Handle_TopOpeBRepBuild_Loop self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop_IsShape(self, *args)


    def Shape(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop_Shape(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def BlockIterator(self, *args):
        """
        :rtype: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_BlockIterator

        """
        res = _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop_BlockIterator(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Dump(self, *args):
        """Dump(Handle_TopOpeBRepBuild_Loop self)"""
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop_Dump(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TopOpeBRepBuild_Loop self) -> char const *

        :rtype: const char *

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TopOpeBRepBuild_Loop self)

        Memory deallocator for transient classes


        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TopOpeBRepBuild_Loop self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TopOpeBRepBuild_Loop self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TopOpeBRepBuild_Loop self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TopOpeBRepBuild_Loop self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TopOpeBRepBuild_Loop self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TopOpeBRepBuild_Loop self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TopOpeBRepBuild_Loop self)

        Increments the reference counter of this object


        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TopOpeBRepBuild_Loop self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop_DecrementRefCounter(self, *args)

Handle_TopOpeBRepBuild_Loop_swigregister = _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop_swigregister
Handle_TopOpeBRepBuild_Loop_swigregister(Handle_TopOpeBRepBuild_Loop)

def Handle_TopOpeBRepBuild_Loop_DownCast(thing):
    return _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop_DownCast(thing)
Handle_TopOpeBRepBuild_Loop_DownCast = _TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop_DownCast

class TopOpeBRepBuild_CorrectFace2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopOpeBRepBuild_CorrectFace2d self) -> TopOpeBRepBuild_CorrectFace2d
        __init__(TopOpeBRepBuild_CorrectFace2d self, TopoDS_Face aFace, NCollection_IndexedMap_TopoDS_Shape_TopTools_OrientedShapeMapHasher anAvoidMap, NCollection_IndexedDataMap_TopoDS_Shape_TopoDS_Shape_TopTools_ShapeMapHasher aMap) -> TopOpeBRepBuild_CorrectFace2d

        :type aFace: OCC.wrapper.TopoDS.TopoDS_Face
        :type anAvoidMap: OCC.wrapper.TopTools.TopTools_IndexedMapOfOrientedShape
        :type aMap: OCC.wrapper.TopTools.TopTools_IndexedDataMapOfShapeShape

        """
        this = _TopOpeBRepBuild.new_TopOpeBRepBuild_CorrectFace2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Face(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_CorrectFace2d_Face(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Perform(self, *args):
        """Perform(TopOpeBRepBuild_CorrectFace2d self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_CorrectFace2d_Perform(self, *args)


    def IsDone(self, *args):
        """
        IsDone(TopOpeBRepBuild_CorrectFace2d self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_CorrectFace2d_IsDone(self, *args)


    def ErrorStatus(self, *args):
        """
        ErrorStatus(TopOpeBRepBuild_CorrectFace2d self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_CorrectFace2d_ErrorStatus(self, *args)


    def CorrectedFace(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_CorrectFace2d_CorrectedFace(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetMapOfTrans2dInfo(self, *args):
        """
        SetMapOfTrans2dInfo(TopOpeBRepBuild_CorrectFace2d self, NCollection_IndexedDataMap_TopoDS_Shape_TopoDS_Shape_TopTools_ShapeMapHasher aMap)

        :type aMap: OCC.wrapper.TopTools.TopTools_IndexedDataMapOfShapeShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_CorrectFace2d_SetMapOfTrans2dInfo(self, *args)


    def MapOfTrans2dInfo(self, *args):
        """
        MapOfTrans2dInfo(TopOpeBRepBuild_CorrectFace2d self) -> NCollection_IndexedDataMap_TopoDS_Shape_TopoDS_Shape_TopTools_ShapeMapHasher

        :rtype: OCC.wrapper.TopTools.TopTools_IndexedDataMapOfShapeShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_CorrectFace2d_MapOfTrans2dInfo(self, *args)


    def GetP2dFL(*args):
        """
        GetP2dFL(TopoDS_Face aFace, TopoDS_Edge anEdge, gp_Pnt2d P2dF, gp_Pnt2d P2dL)

        :type aFace: OCC.wrapper.TopoDS.TopoDS_Face
        :type anEdge: OCC.wrapper.TopoDS.TopoDS_Edge
        :type P2dF: OCC.wrapper.gp.gp_Pnt2d
        :type P2dL: OCC.wrapper.gp.gp_Pnt2d

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_CorrectFace2d_GetP2dFL(*args)

    GetP2dFL = staticmethod(GetP2dFL)

    def CheckList(*args):
        """
        CheckList(TopoDS_Face aFace, NCollection_List_TopoDS_Shape aHeadList)

        :type aFace: OCC.wrapper.TopoDS.TopoDS_Face
        :type aHeadList: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_CorrectFace2d_CheckList(*args)

    CheckList = staticmethod(CheckList)
    __swig_destroy__ = _TopOpeBRepBuild.delete_TopOpeBRepBuild_CorrectFace2d
TopOpeBRepBuild_CorrectFace2d_swigregister = _TopOpeBRepBuild.TopOpeBRepBuild_CorrectFace2d_swigregister
TopOpeBRepBuild_CorrectFace2d_swigregister(TopOpeBRepBuild_CorrectFace2d)

def TopOpeBRepBuild_CorrectFace2d_GetP2dFL(*args):
    """
    TopOpeBRepBuild_CorrectFace2d_GetP2dFL(TopoDS_Face aFace, TopoDS_Edge anEdge, gp_Pnt2d P2dF, gp_Pnt2d P2dL)

    :type aFace: OCC.wrapper.TopoDS.TopoDS_Face
    :type anEdge: OCC.wrapper.TopoDS.TopoDS_Edge
    :type P2dF: OCC.wrapper.gp.gp_Pnt2d
    :type P2dL: OCC.wrapper.gp.gp_Pnt2d

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_CorrectFace2d_GetP2dFL(*args)

def TopOpeBRepBuild_CorrectFace2d_CheckList(*args):
    """
    TopOpeBRepBuild_CorrectFace2d_CheckList(TopoDS_Face aFace, NCollection_List_TopoDS_Shape aHeadList)

    :type aFace: OCC.wrapper.TopoDS.TopoDS_Face
    :type aHeadList: OCC.wrapper.TopTools.TopTools_ListOfShape

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_CorrectFace2d_CheckList(*args)

class TopOpeBRepBuild_WireToFace(object):
    """
    This class builds faces from a set of wires  SW and a face F.
    The face must have and underlying surface, say S.
    All of the edges of all of the wires must have a 2d representation
    on surface S (except if S is planar)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopOpeBRepBuild_WireToFace self) -> TopOpeBRepBuild_WireToFace

        This class builds faces from a set of wires  SW and a face F.
        The face must have and underlying surface, say S.
        All of the edges of all of the wires must have a 2d representation
        on surface S (except if S is planar)
        """
        this = _TopOpeBRepBuild.new_TopOpeBRepBuild_WireToFace(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """Init(TopOpeBRepBuild_WireToFace self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_WireToFace_Init(self, *args)


    def AddWire(self, *args):
        """
        AddWire(TopOpeBRepBuild_WireToFace self, TopoDS_Wire W)

        :type W: OCC.wrapper.TopoDS.TopoDS_Wire

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_WireToFace_AddWire(self, *args)


    def MakeFaces(self, *args):
        """
        MakeFaces(TopOpeBRepBuild_WireToFace self, TopoDS_Face F, NCollection_List_TopoDS_Shape LF)

        :type F: OCC.wrapper.TopoDS.TopoDS_Face
        :type LF: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_WireToFace_MakeFaces(self, *args)

    __swig_destroy__ = _TopOpeBRepBuild.delete_TopOpeBRepBuild_WireToFace
TopOpeBRepBuild_WireToFace_swigregister = _TopOpeBRepBuild.TopOpeBRepBuild_WireToFace_swigregister
TopOpeBRepBuild_WireToFace_swigregister(TopOpeBRepBuild_WireToFace)

class NCollection_List_Handle_TopOpeBRepBuild_Pave(NCollection.NCollection_BaseList):
    """
    Purpose:      Simple list to link  items together keeping the first 
    and the last one.
    Inherits BaseList, adding the data item to each node.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_List_Handle_TopOpeBRepBuild_Pave self) -> NCollection_List< opencascade::handle< TopOpeBRepBuild_Pave > >::iterator

        Returns an iterator pointing to the first element in the list.

        :rtype: iterator

        """
        return _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Pave_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_List_Handle_TopOpeBRepBuild_Pave self) -> NCollection_List< opencascade::handle< TopOpeBRepBuild_Pave > >::iterator

        Returns an iterator referring to the past-the-end element in the list.

        :rtype: iterator

        """
        return _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Pave_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_List_Handle_TopOpeBRepBuild_Pave self) -> NCollection_List< opencascade::handle< TopOpeBRepBuild_Pave > >::const_iterator

        Returns a const iterator pointing to the first element in the list.

        :rtype: const_iterator

        """
        return _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Pave_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_List_Handle_TopOpeBRepBuild_Pave self) -> NCollection_List< opencascade::handle< TopOpeBRepBuild_Pave > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the list.

        :rtype: const_iterator

        """
        return _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Pave_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:      Simple list to link  items together keeping the first 
        and the last one.
        Inherits BaseList, adding the data item to each node.
        """
        this = _TopOpeBRepBuild.new_NCollection_List_Handle_TopOpeBRepBuild_Pave(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_List_Handle_TopOpeBRepBuild_Pave self) -> Standard_Integer

        Size - Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Pave_Size(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_List_Handle_TopOpeBRepBuild_Pave self, NCollection_List_Handle_TopOpeBRepBuild_Pave theOther) -> NCollection_List_Handle_TopOpeBRepBuild_Pave

        Replace this list by the items of another list (theOther parameter).
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_List
        :rtype: OCC.wrapper.NCollection.NCollection_List

        """
        return _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Pave_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_List_Handle_TopOpeBRepBuild_Pave self, NCollection_List_Handle_TopOpeBRepBuild_Pave theOther) -> NCollection_List_Handle_TopOpeBRepBuild_Pave

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_List
        :rtype: OCC.wrapper.NCollection.NCollection_List

        """
        return _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Pave_assign(self, *args)


    def Clear(self, *args):
        """
        Clear(NCollection_List_Handle_TopOpeBRepBuild_Pave self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear this list

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Pave_Clear(self, *args)


    def First(self, *args):
        """
        First item

        :rtype: const TheItemType &

        """
        res = _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Pave_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Last(self, *args):
        """
        Last item

        :rtype: const TheItemType &

        """
        res = _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Pave_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(NCollection_List_Handle_TopOpeBRepBuild_Pave self, Handle_TopOpeBRepBuild_Pave theItem) -> Handle_TopOpeBRepBuild_Pave
        Append(NCollection_List_Handle_TopOpeBRepBuild_Pave self, Handle_TopOpeBRepBuild_Pave theItem, NCollection_List< opencascade::handle< TopOpeBRepBuild_Pave > >::Iterator & theIter)
        Append(NCollection_List_Handle_TopOpeBRepBuild_Pave self, NCollection_List_Handle_TopOpeBRepBuild_Pave theOther)

        Append another list at the end

        :type theOther: OCC.wrapper.NCollection.NCollection_List

        """
        return _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Pave_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_List_Handle_TopOpeBRepBuild_Pave self, Handle_TopOpeBRepBuild_Pave theItem) -> Handle_TopOpeBRepBuild_Pave
        Prepend(NCollection_List_Handle_TopOpeBRepBuild_Pave self, NCollection_List_Handle_TopOpeBRepBuild_Pave theOther)

        Prepend another list at the beginning

        :type theOther: OCC.wrapper.NCollection.NCollection_List

        """
        return _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Pave_Prepend(self, *args)


    def RemoveFirst(self, *args):
        """
        RemoveFirst(NCollection_List_Handle_TopOpeBRepBuild_Pave self)

        RemoveFirst item


        """
        return _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Pave_RemoveFirst(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_List_Handle_TopOpeBRepBuild_Pave self, NCollection_List< opencascade::handle< TopOpeBRepBuild_Pave > >::Iterator & theIter)

        Remove item pointed by iterator theIter; 
        theIter is then set to the next item

        :type theIter: Iterator

        """
        return _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Pave_Remove(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_List_Handle_TopOpeBRepBuild_Pave self, Handle_TopOpeBRepBuild_Pave theItem, NCollection_List< opencascade::handle< TopOpeBRepBuild_Pave > >::Iterator & theIter) -> Handle_TopOpeBRepBuild_Pave
        InsertBefore(NCollection_List_Handle_TopOpeBRepBuild_Pave self, NCollection_List_Handle_TopOpeBRepBuild_Pave theOther, NCollection_List< opencascade::handle< TopOpeBRepBuild_Pave > >::Iterator & theIter)

        InsertBefore

        :type theOther: OCC.wrapper.NCollection.NCollection_List
        :type theIter: Iterator

        """
        return _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Pave_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_List_Handle_TopOpeBRepBuild_Pave self, Handle_TopOpeBRepBuild_Pave theItem, NCollection_List< opencascade::handle< TopOpeBRepBuild_Pave > >::Iterator & theIter) -> Handle_TopOpeBRepBuild_Pave
        InsertAfter(NCollection_List_Handle_TopOpeBRepBuild_Pave self, NCollection_List_Handle_TopOpeBRepBuild_Pave theOther, NCollection_List< opencascade::handle< TopOpeBRepBuild_Pave > >::Iterator & theIter)

        InsertAfter

        :type theOther: OCC.wrapper.NCollection.NCollection_List
        :type theIter: Iterator

        """
        return _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Pave_InsertAfter(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_List_Handle_TopOpeBRepBuild_Pave self)

        Reverse the list


        """
        return _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Pave_Reverse(self, *args)


    def __iter__(self):
        return _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Pave___iter__(self)
    __swig_destroy__ = _TopOpeBRepBuild.delete_NCollection_List_Handle_TopOpeBRepBuild_Pave
NCollection_List_Handle_TopOpeBRepBuild_Pave_swigregister = _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Pave_swigregister
NCollection_List_Handle_TopOpeBRepBuild_Pave_swigregister(NCollection_List_Handle_TopOpeBRepBuild_Pave)

class NCollection_List_Handle_TopOpeBRepBuild_Pave_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _TopOpeBRepBuild.new_NCollection_List_Handle_TopOpeBRepBuild_Pave_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TopOpeBRepBuild.delete_NCollection_List_Handle_TopOpeBRepBuild_Pave_IteratorHelper

    def __next__(self):
        return _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Pave_IteratorHelper___next__(self)
NCollection_List_Handle_TopOpeBRepBuild_Pave_IteratorHelper_swigregister = _TopOpeBRepBuild.NCollection_List_Handle_TopOpeBRepBuild_Pave_IteratorHelper_swigregister
NCollection_List_Handle_TopOpeBRepBuild_Pave_IteratorHelper_swigregister(NCollection_List_Handle_TopOpeBRepBuild_Pave_IteratorHelper)


try:
	TopOpeBRepBuild_ListOfPave = NCollection_List_Handle_TopOpeBRepBuild_Pave
except NameError:
	pass # does not exist, probably ignored

class TopOpeBRepBuild_Builder(object):
    """
    The Builder  algorithm    constructs   topological
    objects  from   an    existing  topology  and  new
    geometries attached to the topology. It is used to
    construct the result of a topological operation;
    the existing  topologies are the parts involved in
    the  topological  operation and the new geometries
    are the intersection lines and points.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopOpeBRepBuild_Builder self, TopOpeBRepDS_BuildTool BT) -> TopOpeBRepBuild_Builder

        :type BT: OCC.wrapper.TopOpeBRepDS.TopOpeBRepDS_BuildTool

        """
        this = _TopOpeBRepBuild.new_TopOpeBRepBuild_Builder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ChangeBuildTool(self, *args):
        """
        ChangeBuildTool(TopOpeBRepBuild_Builder self) -> TopOpeBRepDS_BuildTool

        :rtype: OCC.wrapper.TopOpeBRepDS.TopOpeBRepDS_BuildTool

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_ChangeBuildTool(self, *args)


    def BuildTool(self, *args):
        """
        :rtype: OCC.wrapper.TopOpeBRepDS.TopOpeBRepDS_BuildTool

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_Builder_BuildTool(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Perform(self, *args):
        """
        Perform(TopOpeBRepBuild_Builder self, Handle_TopOpeBRepDS_HDataStructure HDS)
        Perform(TopOpeBRepBuild_Builder self, Handle_TopOpeBRepDS_HDataStructure HDS, TopoDS_Shape S1, TopoDS_Shape S2)

        Stores the data structure <HDS>,
        Create shapes from the new geometries,
        Evaluates if an operation performed on shapes S1,S2
        is a particular case.

        :type HDS: OCC.wrapper.TopOpeBRepDS.Handle_TopOpeBRepDS_HDataStructure
        :type S1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type S2: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_Perform(self, *args)


    def DataStructure(self, *args):
        """
        DataStructure(TopOpeBRepBuild_Builder self) -> Handle_TopOpeBRepDS_HDataStructure

        returns the DS handled by this builder

        :rtype: OCC.wrapper.TopOpeBRepDS.Handle_TopOpeBRepDS_HDataStructure

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_DataStructure(self, *args)


    def Clear(self, *args):
        """
        Clear(TopOpeBRepBuild_Builder self)

        Removes all splits and merges already performed.
        Does NOT clear the handled DS.


        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_Clear(self, *args)


    def MergeEdges(self, *args):
        """
        MergeEdges(TopOpeBRepBuild_Builder self, NCollection_List_TopoDS_Shape L1, TopAbs_State const TB1, NCollection_List_TopoDS_Shape L2, TopAbs_State const TB2, Standard_Boolean const onA, Standard_Boolean const onB, Standard_Boolean const onAB)

        Merges  the two edges <S1> and <S2> keeping the
        parts in each edge of states <TB1> and <TB2>.
        Booleans onA, onB, onAB indicate wheter parts of edges
        found as state ON respectively on first, second, and both
        shapes must be (or not) built.

        :type L1: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type TB1: OCC.wrapper.TopAbs.TopAbs_State
        :type L2: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type TB2: OCC.wrapper.TopAbs.TopAbs_State
        :type onA: bool
        :type onB: bool
        :type onAB: bool

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_MergeEdges(self, *args)


    def MergeFaces(self, *args):
        """
        MergeFaces(TopOpeBRepBuild_Builder self, NCollection_List_TopoDS_Shape S1, TopAbs_State const TB1, NCollection_List_TopoDS_Shape S2, TopAbs_State const TB2, Standard_Boolean const onA, Standard_Boolean const onB, Standard_Boolean const onAB)

        Merges  the two faces <S1>   and <S2> keeping the
        parts in each face of states <TB1> and <TB2>.

        :type S1: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type TB1: OCC.wrapper.TopAbs.TopAbs_State
        :type S2: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type TB2: OCC.wrapper.TopAbs.TopAbs_State
        :type onA: bool
        :type onB: bool
        :type onAB: bool

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_MergeFaces(self, *args)


    def MergeSolids(self, *args):
        """
        MergeSolids(TopOpeBRepBuild_Builder self, TopoDS_Shape S1, TopAbs_State const TB1, TopoDS_Shape S2, TopAbs_State const TB2)

        Merges  the two solids <S1>   and <S2> keeping the
        parts in each solid of states <TB1> and <TB2>.

        :type S1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type TB1: OCC.wrapper.TopAbs.TopAbs_State
        :type S2: OCC.wrapper.TopoDS.TopoDS_Shape
        :type TB2: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_MergeSolids(self, *args)


    def MergeShapes(self, *args):
        """
        MergeShapes(TopOpeBRepBuild_Builder self, TopoDS_Shape S1, TopAbs_State const TB1, TopoDS_Shape S2, TopAbs_State const TB2)

        Merges the two shapes <S1> and <S2> keeping the
        parts of states <TB1>,<TB2> in <S1>,<S2>.

        :type S1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type TB1: OCC.wrapper.TopAbs.TopAbs_State
        :type S2: OCC.wrapper.TopoDS.TopoDS_Shape
        :type TB2: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_MergeShapes(self, *args)


    def End(self, *args):
        """End(TopOpeBRepBuild_Builder self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_End(self, *args)


    def Classify(self, *args):
        """
        Classify(TopOpeBRepBuild_Builder self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_Classify(self, *args)


    def ChangeClassify(self, *args):
        """
        ChangeClassify(TopOpeBRepBuild_Builder self, Standard_Boolean const B)

        :type B: bool

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_ChangeClassify(self, *args)


    def MergeSolid(self, *args):
        """
        MergeSolid(TopOpeBRepBuild_Builder self, TopoDS_Shape S, TopAbs_State const TB)

        Merges the solid <S>  keeping the
        parts of state <TB>.

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type TB: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_MergeSolid(self, *args)


    def NewVertex(self, *args):
        """
        Returns the vertex created on point <I>.

        :type I: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_Builder_NewVertex(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NewEdges(self, *args):
        """
        Returns the edges created on curve <I>.

        :type I: int
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_Builder_NewEdges(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NewFaces(self, *args):
        """
        Returns the faces created on surface <I>.

        :type I: int
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_Builder_NewFaces(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsSplit(self, *args):
        """
        IsSplit(TopOpeBRepBuild_Builder self, TopoDS_Shape S, TopAbs_State const TB) -> Standard_Boolean

        Returns True if the shape <S> has been split.

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type TB: OCC.wrapper.TopAbs.TopAbs_State
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_IsSplit(self, *args)


    def Splits(self, *args):
        """
        Returns the split parts <TB> of shape <S>.

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type TB: OCC.wrapper.TopAbs.TopAbs_State
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_Builder_Splits(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsMerged(self, *args):
        """
        IsMerged(TopOpeBRepBuild_Builder self, TopoDS_Shape S, TopAbs_State const TB) -> Standard_Boolean

        Returns True if the shape <S> has been merged.

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type TB: OCC.wrapper.TopAbs.TopAbs_State
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_IsMerged(self, *args)


    def Merged(self, *args):
        """
        Returns the merged parts <TB> of shape <S>.

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type TB: OCC.wrapper.TopAbs.TopAbs_State
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_Builder_Merged(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def InitSection(self, *args):
        """InitSection(TopOpeBRepBuild_Builder self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_InitSection(self, *args)


    def SplitSectionEdges(self, *args):
        """
        SplitSectionEdges(TopOpeBRepBuild_Builder self)

        create parts ON solid of section edges


        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_SplitSectionEdges(self, *args)


    def SplitSectionEdge(self, *args):
        """
        SplitSectionEdge(TopOpeBRepBuild_Builder self, TopoDS_Shape E)

        create parts ON solid of section edges

        :type E: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_SplitSectionEdge(self, *args)


    def SectionCurves(self, *args):
        """
        SectionCurves(TopOpeBRepBuild_Builder self, NCollection_List_TopoDS_Shape L)

        return the section edges built on new curves.

        :type L: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_SectionCurves(self, *args)


    def SectionEdges(self, *args):
        """
        SectionEdges(TopOpeBRepBuild_Builder self, NCollection_List_TopoDS_Shape L)

        return the parts of edges found ON the boundary
        of the two arguments S1,S2 of Perform()

        :type L: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_SectionEdges(self, *args)


    def FillSecEdgeAncestorMap(self, *args):
        """
        FillSecEdgeAncestorMap(TopOpeBRepBuild_Builder self, Standard_Integer const aShapeRank, NCollection_Map_TopoDS_Shape_TopTools_ShapeMapHasher aMapON, NCollection_DataMap_TopoDS_Shape_TopoDS_Shape_TopTools_ShapeMapHasher anAncMap)

        Fills anAncMap with pairs (edge,ancestor edge) for each
        split from the map aMapON for the shape object identified
        by ShapeRank

        :type aShapeRank: int
        :type aMapON: OCC.wrapper.TopTools.TopTools_MapOfShape
        :type anAncMap: OCC.wrapper.TopTools.TopTools_DataMapOfShapeShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_FillSecEdgeAncestorMap(self, *args)


    def Section(self, *args):
        """
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_Builder_Section(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def BuildVertices(self, *args):
        """
        BuildVertices(TopOpeBRepBuild_Builder self, Handle_TopOpeBRepDS_HDataStructure DS)

        update the DS by creating new geometries.
        create vertices on DS points.

        :type DS: OCC.wrapper.TopOpeBRepDS.Handle_TopOpeBRepDS_HDataStructure

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_BuildVertices(self, *args)


    def BuildEdges(self, *args):
        """
        BuildEdges(TopOpeBRepBuild_Builder self, Handle_TopOpeBRepDS_HDataStructure DS)

        update the DS by creating new geometries.
        create shapes from the new geometries.

        :type DS: OCC.wrapper.TopOpeBRepDS.Handle_TopOpeBRepDS_HDataStructure

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_BuildEdges(self, *args)


    def MSplit(self, *args):
        """
        :type s: OCC.wrapper.TopAbs.TopAbs_State
        :rtype: OCC.wrapper.TopOpeBRepDS.TopOpeBRepDS_DataMapOfShapeListOfShapeOn1State

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_Builder_MSplit(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeMSplit(self, *args):
        """
        ChangeMSplit(TopOpeBRepBuild_Builder self, TopAbs_State const s) -> NCollection_DataMap_TopoDS_Shape_TopOpeBRepDS_ListOfShapeOn1State_TopTools_ShapeMapHasher

        :type s: OCC.wrapper.TopAbs.TopAbs_State
        :rtype: OCC.wrapper.TopOpeBRepDS.TopOpeBRepDS_DataMapOfShapeListOfShapeOn1State

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_ChangeMSplit(self, *args)


    def MakeEdges(self, *args):
        """
        MakeEdges(TopOpeBRepBuild_Builder self, TopoDS_Shape E, TopOpeBRepBuild_EdgeBuilder B, NCollection_List_TopoDS_Shape L)

        :type E: OCC.wrapper.TopoDS.TopoDS_Shape
        :type B: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_EdgeBuilder
        :type L: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_MakeEdges(self, *args)


    def MakeFaces(self, *args):
        """
        MakeFaces(TopOpeBRepBuild_Builder self, TopoDS_Shape F, TopOpeBRepBuild_FaceBuilder B, NCollection_List_TopoDS_Shape L)

        :type F: OCC.wrapper.TopoDS.TopoDS_Shape
        :type B: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_FaceBuilder
        :type L: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_MakeFaces(self, *args)


    def MakeSolids(self, *args):
        """
        MakeSolids(TopOpeBRepBuild_Builder self, TopOpeBRepBuild_SolidBuilder B, NCollection_List_TopoDS_Shape L)

        :type B: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_SolidBuilder
        :type L: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_MakeSolids(self, *args)


    def MakeShells(self, *args):
        """
        MakeShells(TopOpeBRepBuild_Builder self, TopOpeBRepBuild_SolidBuilder B, NCollection_List_TopoDS_Shape L)

        :type B: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_SolidBuilder
        :type L: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_MakeShells(self, *args)


    def ChangeSplit(self, *args):
        """
        ChangeSplit(TopOpeBRepBuild_Builder self, TopoDS_Shape S, TopAbs_State const TB) -> NCollection_List_TopoDS_Shape

        Returns a ref.on the list of shapes connected to <S> as
        <TB> split parts of <S>.
        Mark <S> as split in <TB> parts.

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type TB: OCC.wrapper.TopAbs.TopAbs_State
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_ChangeSplit(self, *args)


    def Opec12(self, *args):
        """
        Opec12(TopOpeBRepBuild_Builder self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_Opec12(self, *args)


    def Opec21(self, *args):
        """
        Opec21(TopOpeBRepBuild_Builder self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_Opec21(self, *args)


    def Opecom(self, *args):
        """
        Opecom(TopOpeBRepBuild_Builder self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_Opecom(self, *args)


    def Opefus(self, *args):
        """
        Opefus(TopOpeBRepBuild_Builder self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_Opefus(self, *args)


    def ShapePosition(self, *args):
        """
        ShapePosition(TopOpeBRepBuild_Builder self, TopoDS_Shape S, NCollection_List_TopoDS_Shape LS) -> TopAbs_State

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type LS: OCC.wrapper.TopTools.TopTools_ListOfShape
        :rtype: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_ShapePosition(self, *args)


    def KeepShape(self, *args):
        """
        KeepShape(TopOpeBRepBuild_Builder self, TopoDS_Shape S, NCollection_List_TopoDS_Shape LS, TopAbs_State const T) -> Standard_Boolean

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type LS: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type T: OCC.wrapper.TopAbs.TopAbs_State
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_KeepShape(self, *args)


    def TopType(*args):
        """
        TopType(TopoDS_Shape S) -> TopAbs_ShapeEnum

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TopAbs.TopAbs_ShapeEnum

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_TopType(*args)

    TopType = staticmethod(TopType)

    def Reverse(*args):
        """
        Reverse(TopAbs_State const T1, TopAbs_State const T2) -> Standard_Boolean

        :type T1: OCC.wrapper.TopAbs.TopAbs_State
        :type T2: OCC.wrapper.TopAbs.TopAbs_State
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_Reverse(*args)

    Reverse = staticmethod(Reverse)

    def Orient(*args):
        """
        Orient(TopAbs_Orientation const O, Standard_Boolean const R) -> TopAbs_Orientation

        :type O: OCC.wrapper.TopAbs.TopAbs_Orientation
        :type R: bool
        :rtype: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_Orient(*args)

    Orient = staticmethod(Orient)

    def FindSameDomain(self, *args):
        """
        FindSameDomain(TopOpeBRepBuild_Builder self, NCollection_List_TopoDS_Shape L1, NCollection_List_TopoDS_Shape L2)

        :type L1: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type L2: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_FindSameDomain(self, *args)


    def FindSameDomainSameOrientation(self, *args):
        """
        FindSameDomainSameOrientation(TopOpeBRepBuild_Builder self, NCollection_List_TopoDS_Shape LSO, NCollection_List_TopoDS_Shape LDO)

        :type LSO: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type LDO: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_FindSameDomainSameOrientation(self, *args)


    def MapShapes(self, *args):
        """
        MapShapes(TopOpeBRepBuild_Builder self, TopoDS_Shape S1, TopoDS_Shape S2)

        :type S1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type S2: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_MapShapes(self, *args)


    def ClearMaps(self, *args):
        """ClearMaps(TopOpeBRepBuild_Builder self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_ClearMaps(self, *args)


    def FindSameRank(self, *args):
        """
        FindSameRank(TopOpeBRepBuild_Builder self, NCollection_List_TopoDS_Shape L1, Standard_Integer const R, NCollection_List_TopoDS_Shape L2)

        :type L1: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type R: int
        :type L2: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_FindSameRank(self, *args)


    def ShapeRank(self, *args):
        """
        ShapeRank(TopOpeBRepBuild_Builder self, TopoDS_Shape S) -> Standard_Integer

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_ShapeRank(self, *args)


    def IsShapeOf(self, *args):
        """
        IsShapeOf(TopOpeBRepBuild_Builder self, TopoDS_Shape S, Standard_Integer const I12) -> Standard_Boolean

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type I12: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_IsShapeOf(self, *args)


    def Contains(*args):
        """
        Contains(TopoDS_Shape S, NCollection_List_TopoDS_Shape L) -> Standard_Boolean

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type L: OCC.wrapper.TopTools.TopTools_ListOfShape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_Contains(*args)

    Contains = staticmethod(Contains)

    def FindIsKPart(self, *args):
        """
        FindIsKPart(TopOpeBRepBuild_Builder self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_FindIsKPart(self, *args)


    def IsKPart(self, *args):
        """
        IsKPart(TopOpeBRepBuild_Builder self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_IsKPart(self, *args)


    def MergeKPart(self, *args):
        """
        MergeKPart(TopOpeBRepBuild_Builder self)
        MergeKPart(TopOpeBRepBuild_Builder self, TopAbs_State const TB1, TopAbs_State const TB2)

        :type TB1: OCC.wrapper.TopAbs.TopAbs_State
        :type TB2: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_MergeKPart(self, *args)


    def MergeKPartiskole(self, *args):
        """MergeKPartiskole(TopOpeBRepBuild_Builder self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_MergeKPartiskole(self, *args)


    def MergeKPartiskoletge(self, *args):
        """MergeKPartiskoletge(TopOpeBRepBuild_Builder self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_MergeKPartiskoletge(self, *args)


    def MergeKPartisdisj(self, *args):
        """MergeKPartisdisj(TopOpeBRepBuild_Builder self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_MergeKPartisdisj(self, *args)


    def MergeKPartisfafa(self, *args):
        """MergeKPartisfafa(TopOpeBRepBuild_Builder self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_MergeKPartisfafa(self, *args)


    def MergeKPartissoso(self, *args):
        """MergeKPartissoso(TopOpeBRepBuild_Builder self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_MergeKPartissoso(self, *args)


    def KPiskole(self, *args):
        """
        KPiskole(TopOpeBRepBuild_Builder self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_KPiskole(self, *args)


    def KPiskoletge(self, *args):
        """
        KPiskoletge(TopOpeBRepBuild_Builder self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_KPiskoletge(self, *args)


    def KPisdisj(self, *args):
        """
        KPisdisj(TopOpeBRepBuild_Builder self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_KPisdisj(self, *args)


    def KPisfafa(self, *args):
        """
        KPisfafa(TopOpeBRepBuild_Builder self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_KPisfafa(self, *args)


    def KPissoso(self, *args):
        """
        KPissoso(TopOpeBRepBuild_Builder self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_KPissoso(self, *args)


    def KPClearMaps(self, *args):
        """KPClearMaps(TopOpeBRepBuild_Builder self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_KPClearMaps(self, *args)


    def KPlhg(self, *args):
        """
        KPlhg(TopOpeBRepBuild_Builder self, TopoDS_Shape S, TopAbs_ShapeEnum const T, NCollection_List_TopoDS_Shape L) -> Standard_Integer
        KPlhg(TopOpeBRepBuild_Builder self, TopoDS_Shape S, TopAbs_ShapeEnum const T) -> Standard_Integer

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type T: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_KPlhg(self, *args)


    def KPlhsd(self, *args):
        """
        KPlhsd(TopOpeBRepBuild_Builder self, TopoDS_Shape S, TopAbs_ShapeEnum const T, NCollection_List_TopoDS_Shape L) -> Standard_Integer
        KPlhsd(TopOpeBRepBuild_Builder self, TopoDS_Shape S, TopAbs_ShapeEnum const T) -> Standard_Integer

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type T: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_KPlhsd(self, *args)


    def KPclasSS(self, *args):
        """
        KPclasSS(TopOpeBRepBuild_Builder self, TopoDS_Shape S1, NCollection_List_TopoDS_Shape exceptLS1, TopoDS_Shape S2) -> TopAbs_State
        KPclasSS(TopOpeBRepBuild_Builder self, TopoDS_Shape S1, TopoDS_Shape exceptS1, TopoDS_Shape S2) -> TopAbs_State
        KPclasSS(TopOpeBRepBuild_Builder self, TopoDS_Shape S1, TopoDS_Shape S2) -> TopAbs_State

        :type S1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type S2: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_KPclasSS(self, *args)


    def KPiskolesh(self, *args):
        """
        KPiskolesh(TopOpeBRepBuild_Builder self, TopoDS_Shape S, NCollection_List_TopoDS_Shape LS, NCollection_List_TopoDS_Shape LF) -> Standard_Boolean

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type LS: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type LF: OCC.wrapper.TopTools.TopTools_ListOfShape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_KPiskolesh(self, *args)


    def KPiskoletgesh(self, *args):
        """
        KPiskoletgesh(TopOpeBRepBuild_Builder self, TopoDS_Shape S, NCollection_List_TopoDS_Shape LS, NCollection_List_TopoDS_Shape LF) -> Standard_Boolean

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type LS: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type LF: OCC.wrapper.TopTools.TopTools_ListOfShape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_KPiskoletgesh(self, *args)


    def KPSameDomain(self, *args):
        """
        KPSameDomain(TopOpeBRepBuild_Builder self, NCollection_List_TopoDS_Shape L1, NCollection_List_TopoDS_Shape L2)

        :type L1: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type L2: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_KPSameDomain(self, *args)


    def KPisdisjsh(self, *args):
        """
        KPisdisjsh(TopOpeBRepBuild_Builder self, TopoDS_Shape S) -> Standard_Integer

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_KPisdisjsh(self, *args)


    def KPisfafash(self, *args):
        """
        KPisfafash(TopOpeBRepBuild_Builder self, TopoDS_Shape S) -> Standard_Integer

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_KPisfafash(self, *args)


    def KPissososh(self, *args):
        """
        KPissososh(TopOpeBRepBuild_Builder self, TopoDS_Shape S) -> Standard_Integer

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_KPissososh(self, *args)


    def KPiskoleanalyse(self, *args):
        """
        KPiskoleanalyse(TopOpeBRepBuild_Builder self, TopAbs_State const FT1, TopAbs_State const FT2, TopAbs_State const ST1, TopAbs_State const ST2)

        :type FT1: OCC.wrapper.TopAbs.TopAbs_State
        :type FT2: OCC.wrapper.TopAbs.TopAbs_State
        :type ST1: OCC.wrapper.TopAbs.TopAbs_State
        :type ST2: OCC.wrapper.TopAbs.TopAbs_State
        :type I: int
        :type I1: int
        :type I2: int

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_KPiskoleanalyse(self, *args)


    def KPiskoletgeanalyse(self, *args):
        """
        KPiskoletgeanalyse(TopOpeBRepBuild_Builder self, TopOpeBRepDS_Config const Conf, TopAbs_State const ST1, TopAbs_State const ST2)

        :type Conf: OCC.wrapper.TopOpeBRepDS.TopOpeBRepDS_Config
        :type ST1: OCC.wrapper.TopAbs.TopAbs_State
        :type ST2: OCC.wrapper.TopAbs.TopAbs_State
        :type I: int

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_KPiskoletgeanalyse(self, *args)


    def KPisdisjanalyse(self, *args):
        """
        KPisdisjanalyse(TopOpeBRepBuild_Builder self, TopAbs_State const ST1, TopAbs_State const ST2)

        :type ST1: OCC.wrapper.TopAbs.TopAbs_State
        :type ST2: OCC.wrapper.TopAbs.TopAbs_State
        :type I: int
        :type IC1: int
        :type IC2: int

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_KPisdisjanalyse(self, *args)


    def KPls(*args):
        """
        KPls(TopoDS_Shape S, TopAbs_ShapeEnum const T, NCollection_List_TopoDS_Shape L) -> Standard_Integer
        KPls(TopoDS_Shape S, TopAbs_ShapeEnum const T) -> Standard_Integer

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type T: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_KPls(*args)

    KPls = staticmethod(KPls)

    def KPclassF(self, *args):
        """
        KPclassF(TopOpeBRepBuild_Builder self, TopoDS_Shape F1, TopoDS_Shape F2) -> TopAbs_State

        :type F1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type F2: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_KPclassF(self, *args)


    def KPclassFF(self, *args):
        """
        KPclassFF(TopOpeBRepBuild_Builder self, TopoDS_Shape F1, TopoDS_Shape F2)

        :type F1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type F2: OCC.wrapper.TopoDS.TopoDS_Shape
        :type T1: OCC.wrapper.TopAbs.TopAbs_State
        :type T2: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_KPclassFF(self, *args)


    def KPiskoleFF(self, *args):
        """
        KPiskoleFF(TopOpeBRepBuild_Builder self, TopoDS_Shape F1, TopoDS_Shape F2) -> Standard_Boolean

        :type F1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type F2: OCC.wrapper.TopoDS.TopoDS_Shape
        :type T1: OCC.wrapper.TopAbs.TopAbs_State
        :type T2: OCC.wrapper.TopAbs.TopAbs_State
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_KPiskoleFF(self, *args)


    def KPContains(*args):
        """
        KPContains(TopoDS_Shape S, NCollection_List_TopoDS_Shape L) -> Standard_Boolean

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type L: OCC.wrapper.TopTools.TopTools_ListOfShape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_KPContains(*args)

    KPContains = staticmethod(KPContains)

    def KPmakeface(self, *args):
        """
        KPmakeface(TopOpeBRepBuild_Builder self, TopoDS_Shape F1, NCollection_List_TopoDS_Shape LF2, TopAbs_State const T1, TopAbs_State const T2, Standard_Boolean const R1, Standard_Boolean const R2) -> TopoDS_Shape

        :type F1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type LF2: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type T1: OCC.wrapper.TopAbs.TopAbs_State
        :type T2: OCC.wrapper.TopAbs.TopAbs_State
        :type R1: bool
        :type R2: bool
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_KPmakeface(self, *args)


    def KPreturn(*args):
        """
        KPreturn(Standard_Integer const KP) -> Standard_Integer

        :type KP: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_KPreturn(*args)

    KPreturn = staticmethod(KPreturn)

    def SplitEvisoONperiodicF(self, *args):
        """SplitEvisoONperiodicF(TopOpeBRepBuild_Builder self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_SplitEvisoONperiodicF(self, *args)


    def GMergeSolids(self, *args):
        """
        GMergeSolids(TopOpeBRepBuild_Builder self, NCollection_List_TopoDS_Shape LSO1, NCollection_List_TopoDS_Shape LSO2, TopOpeBRepBuild_GTopo G)

        :type LSO1: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type LSO2: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GMergeSolids(self, *args)


    def GFillSolidsSFS(self, *args):
        """
        GFillSolidsSFS(TopOpeBRepBuild_Builder self, NCollection_List_TopoDS_Shape LSO1, NCollection_List_TopoDS_Shape LSO2, TopOpeBRepBuild_GTopo G, TopOpeBRepBuild_ShellFaceSet SFS)

        :type LSO1: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type LSO2: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo
        :type SFS: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_ShellFaceSet

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GFillSolidsSFS(self, *args)


    def GFillSolidSFS(self, *args):
        """
        GFillSolidSFS(TopOpeBRepBuild_Builder self, TopoDS_Shape SO1, NCollection_List_TopoDS_Shape LSO2, TopOpeBRepBuild_GTopo G, TopOpeBRepBuild_ShellFaceSet SFS)

        :type SO1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type LSO2: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo
        :type SFS: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_ShellFaceSet

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GFillSolidSFS(self, *args)


    def GFillSurfaceTopologySFS(self, *args):
        """
        GFillSurfaceTopologySFS(TopOpeBRepBuild_Builder self, TopoDS_Shape SO1, TopOpeBRepBuild_GTopo G, TopOpeBRepBuild_ShellFaceSet SFS)
        GFillSurfaceTopologySFS(TopOpeBRepBuild_Builder self, TopOpeBRepDS_SurfaceIterator IT, TopOpeBRepBuild_GTopo G, TopOpeBRepBuild_ShellFaceSet SFS)

        :type IT: OCC.wrapper.TopOpeBRepDS.TopOpeBRepDS_SurfaceIterator
        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo
        :type SFS: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_ShellFaceSet

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GFillSurfaceTopologySFS(self, *args)


    def GFillShellSFS(self, *args):
        """
        GFillShellSFS(TopOpeBRepBuild_Builder self, TopoDS_Shape SH1, NCollection_List_TopoDS_Shape LSO2, TopOpeBRepBuild_GTopo G, TopOpeBRepBuild_ShellFaceSet SFS)

        :type SH1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type LSO2: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo
        :type SFS: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_ShellFaceSet

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GFillShellSFS(self, *args)


    def GFillFaceSFS(self, *args):
        """
        GFillFaceSFS(TopOpeBRepBuild_Builder self, TopoDS_Shape F1, NCollection_List_TopoDS_Shape LSO2, TopOpeBRepBuild_GTopo G, TopOpeBRepBuild_ShellFaceSet SFS)

        :type F1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type LSO2: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo
        :type SFS: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_ShellFaceSet

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GFillFaceSFS(self, *args)


    def GSplitFaceSFS(self, *args):
        """
        GSplitFaceSFS(TopOpeBRepBuild_Builder self, TopoDS_Shape F1, NCollection_List_TopoDS_Shape LSclass, TopOpeBRepBuild_GTopo G, TopOpeBRepBuild_ShellFaceSet SFS)

        :type F1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type LSclass: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo
        :type SFS: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_ShellFaceSet

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GSplitFaceSFS(self, *args)


    def GMergeFaceSFS(self, *args):
        """
        GMergeFaceSFS(TopOpeBRepBuild_Builder self, TopoDS_Shape F, TopOpeBRepBuild_GTopo G, TopOpeBRepBuild_ShellFaceSet SFS)

        :type F: OCC.wrapper.TopoDS.TopoDS_Shape
        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo
        :type SFS: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_ShellFaceSet

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GMergeFaceSFS(self, *args)


    def GSplitFace(self, *args):
        """
        GSplitFace(TopOpeBRepBuild_Builder self, TopoDS_Shape F, TopOpeBRepBuild_GTopo G, NCollection_List_TopoDS_Shape LSclass)

        :type F: OCC.wrapper.TopoDS.TopoDS_Shape
        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo
        :type LSclass: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GSplitFace(self, *args)


    def AddONPatchesSFS(self, *args):
        """
        AddONPatchesSFS(TopOpeBRepBuild_Builder self, TopOpeBRepBuild_GTopo G, TopOpeBRepBuild_ShellFaceSet SFS)

        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo
        :type SFS: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_ShellFaceSet

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_AddONPatchesSFS(self, *args)


    def FillOnPatches(self, *args):
        """
        FillOnPatches(TopOpeBRepBuild_Builder self, NCollection_List_TopoDS_Shape anEdgesON, TopoDS_Shape aBaseFace, NCollection_IndexedMap_TopoDS_Shape_TopTools_OrientedShapeMapHasher avoidMap)

        :type anEdgesON: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type aBaseFace: OCC.wrapper.TopoDS.TopoDS_Shape
        :type avoidMap: OCC.wrapper.TopTools.TopTools_IndexedMapOfOrientedShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_FillOnPatches(self, *args)


    def FindFacesTouchingEdge(self, *args):
        """
        FindFacesTouchingEdge(TopOpeBRepBuild_Builder self, TopoDS_Shape aFace, TopoDS_Shape anEdge, Standard_Integer const aShRank, NCollection_List_TopoDS_Shape aFaces)

        :type aFace: OCC.wrapper.TopoDS.TopoDS_Shape
        :type anEdge: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aShRank: int
        :type aFaces: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_FindFacesTouchingEdge(self, *args)


    def GMergeFaces(self, *args):
        """
        GMergeFaces(TopOpeBRepBuild_Builder self, NCollection_List_TopoDS_Shape LF1, NCollection_List_TopoDS_Shape LF2, TopOpeBRepBuild_GTopo G)

        :type LF1: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type LF2: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GMergeFaces(self, *args)


    def GFillFacesWES(self, *args):
        """
        GFillFacesWES(TopOpeBRepBuild_Builder self, NCollection_List_TopoDS_Shape LF1, NCollection_List_TopoDS_Shape LF2, TopOpeBRepBuild_GTopo G, TopOpeBRepBuild_WireEdgeSet WES)

        :type LF1: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type LF2: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo
        :type WES: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeSet

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GFillFacesWES(self, *args)


    def GFillFacesWESK(self, *args):
        """
        GFillFacesWESK(TopOpeBRepBuild_Builder self, NCollection_List_TopoDS_Shape LF1, NCollection_List_TopoDS_Shape LF2, TopOpeBRepBuild_GTopo G, TopOpeBRepBuild_WireEdgeSet WES, Standard_Integer const K)

        :type LF1: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type LF2: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo
        :type WES: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeSet
        :type K: int

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GFillFacesWESK(self, *args)


    def GFillFacesWESMakeFaces(self, *args):
        """
        GFillFacesWESMakeFaces(TopOpeBRepBuild_Builder self, NCollection_List_TopoDS_Shape LF1, NCollection_List_TopoDS_Shape LF2, NCollection_List_TopoDS_Shape LSO, TopOpeBRepBuild_GTopo G)

        :type LF1: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type LF2: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type LSO: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GFillFacesWESMakeFaces(self, *args)


    def GFillFaceWES(self, *args):
        """
        GFillFaceWES(TopOpeBRepBuild_Builder self, TopoDS_Shape F, NCollection_List_TopoDS_Shape LF2, TopOpeBRepBuild_GTopo G, TopOpeBRepBuild_WireEdgeSet WES)

        :type F: OCC.wrapper.TopoDS.TopoDS_Shape
        :type LF2: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo
        :type WES: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeSet

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GFillFaceWES(self, *args)


    def GFillCurveTopologyWES(self, *args):
        """
        GFillCurveTopologyWES(TopOpeBRepBuild_Builder self, TopoDS_Shape F, TopOpeBRepBuild_GTopo G, TopOpeBRepBuild_WireEdgeSet WES)
        GFillCurveTopologyWES(TopOpeBRepBuild_Builder self, TopOpeBRepDS_CurveIterator IT, TopOpeBRepBuild_GTopo G, TopOpeBRepBuild_WireEdgeSet WES)

        :type IT: OCC.wrapper.TopOpeBRepDS.TopOpeBRepDS_CurveIterator
        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo
        :type WES: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeSet

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GFillCurveTopologyWES(self, *args)


    def GFillONPartsWES(self, *args):
        """
        GFillONPartsWES(TopOpeBRepBuild_Builder self, TopoDS_Shape F, TopOpeBRepBuild_GTopo G, NCollection_List_TopoDS_Shape LSclass, TopOpeBRepBuild_WireEdgeSet WES)

        :type F: OCC.wrapper.TopoDS.TopoDS_Shape
        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo
        :type LSclass: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type WES: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeSet

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GFillONPartsWES(self, *args)


    def GFillWireWES(self, *args):
        """
        GFillWireWES(TopOpeBRepBuild_Builder self, TopoDS_Shape W, NCollection_List_TopoDS_Shape LF2, TopOpeBRepBuild_GTopo G, TopOpeBRepBuild_WireEdgeSet WES)

        :type W: OCC.wrapper.TopoDS.TopoDS_Shape
        :type LF2: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo
        :type WES: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeSet

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GFillWireWES(self, *args)


    def GFillEdgeWES(self, *args):
        """
        GFillEdgeWES(TopOpeBRepBuild_Builder self, TopoDS_Shape E, NCollection_List_TopoDS_Shape LF2, TopOpeBRepBuild_GTopo G, TopOpeBRepBuild_WireEdgeSet WES)

        :type E: OCC.wrapper.TopoDS.TopoDS_Shape
        :type LF2: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo
        :type WES: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeSet

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GFillEdgeWES(self, *args)


    def GSplitEdgeWES(self, *args):
        """
        GSplitEdgeWES(TopOpeBRepBuild_Builder self, TopoDS_Shape E, NCollection_List_TopoDS_Shape LF2, TopOpeBRepBuild_GTopo G, TopOpeBRepBuild_WireEdgeSet WES)

        :type E: OCC.wrapper.TopoDS.TopoDS_Shape
        :type LF2: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo
        :type WES: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeSet

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GSplitEdgeWES(self, *args)


    def GMergeEdgeWES(self, *args):
        """
        GMergeEdgeWES(TopOpeBRepBuild_Builder self, TopoDS_Shape E, TopOpeBRepBuild_GTopo G, TopOpeBRepBuild_WireEdgeSet WES)

        :type E: OCC.wrapper.TopoDS.TopoDS_Shape
        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo
        :type WES: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeSet

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GMergeEdgeWES(self, *args)


    def GSplitEdge(self, *args):
        """
        GSplitEdge(TopOpeBRepBuild_Builder self, TopoDS_Shape E, TopOpeBRepBuild_GTopo G, NCollection_List_TopoDS_Shape LSclass)

        :type E: OCC.wrapper.TopoDS.TopoDS_Shape
        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo
        :type LSclass: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GSplitEdge(self, *args)


    def GMergeEdges(self, *args):
        """
        GMergeEdges(TopOpeBRepBuild_Builder self, NCollection_List_TopoDS_Shape LE1, NCollection_List_TopoDS_Shape LE2, TopOpeBRepBuild_GTopo G)

        :type LE1: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type LE2: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GMergeEdges(self, *args)


    def GFillEdgesPVS(self, *args):
        """
        GFillEdgesPVS(TopOpeBRepBuild_Builder self, NCollection_List_TopoDS_Shape LE1, NCollection_List_TopoDS_Shape LE2, TopOpeBRepBuild_GTopo G, TopOpeBRepBuild_PaveSet PVS)

        :type LE1: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type LE2: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo
        :type PVS: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_PaveSet

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GFillEdgesPVS(self, *args)


    def GFillEdgePVS(self, *args):
        """
        GFillEdgePVS(TopOpeBRepBuild_Builder self, TopoDS_Shape E, NCollection_List_TopoDS_Shape LE2, TopOpeBRepBuild_GTopo G, TopOpeBRepBuild_PaveSet PVS)

        :type E: OCC.wrapper.TopoDS.TopoDS_Shape
        :type LE2: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo
        :type PVS: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_PaveSet

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GFillEdgePVS(self, *args)


    def GFillPointTopologyPVS(self, *args):
        """
        GFillPointTopologyPVS(TopOpeBRepBuild_Builder self, TopoDS_Shape E, TopOpeBRepBuild_GTopo G, TopOpeBRepBuild_PaveSet PVS)
        GFillPointTopologyPVS(TopOpeBRepBuild_Builder self, TopoDS_Shape E, TopOpeBRepDS_PointIterator IT, TopOpeBRepBuild_GTopo G, TopOpeBRepBuild_PaveSet PVS)

        :type E: OCC.wrapper.TopoDS.TopoDS_Shape
        :type IT: OCC.wrapper.TopOpeBRepDS.TopOpeBRepDS_PointIterator
        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo
        :type PVS: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_PaveSet

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GFillPointTopologyPVS(self, *args)


    def GParamOnReference(self, *args):
        """
        GParamOnReference(TopOpeBRepBuild_Builder self, TopoDS_Vertex V, TopoDS_Edge E) -> Standard_Boolean

        :type V: OCC.wrapper.TopoDS.TopoDS_Vertex
        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :type P: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GParamOnReference(self, *args)


    def GKeepShape(self, *args):
        """
        GKeepShape(TopOpeBRepBuild_Builder self, TopoDS_Shape S, NCollection_List_TopoDS_Shape Lref, TopAbs_State const T) -> Standard_Boolean

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type Lref: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type T: OCC.wrapper.TopAbs.TopAbs_State
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GKeepShape(self, *args)


    def GKeepShape1(self, *args):
        """
        GKeepShape1(TopOpeBRepBuild_Builder self, TopoDS_Shape S, NCollection_List_TopoDS_Shape Lref, TopAbs_State const T) -> Standard_Boolean

        return True if S is classified <T> / Lref shapes

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type Lref: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type T: OCC.wrapper.TopAbs.TopAbs_State
        :type pos: OCC.wrapper.TopAbs.TopAbs_State
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GKeepShape1(self, *args)


    def GKeepShapes(self, *args):
        """
        GKeepShapes(TopOpeBRepBuild_Builder self, TopoDS_Shape S, NCollection_List_TopoDS_Shape Lref, TopAbs_State const T, NCollection_List_TopoDS_Shape Lin, NCollection_List_TopoDS_Shape Lou)

        add to Lou the shapes of Lin classified <T> / Lref shapes.
        Lou is not cleared. (S is a dummy trace argument)

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type Lref: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type T: OCC.wrapper.TopAbs.TopAbs_State
        :type Lin: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type Lou: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GKeepShapes(self, *args)


    def GSFSMakeSolids(self, *args):
        """
        GSFSMakeSolids(TopOpeBRepBuild_Builder self, TopoDS_Shape SOF, TopOpeBRepBuild_ShellFaceSet SFS, NCollection_List_TopoDS_Shape LOSO)

        :type SOF: OCC.wrapper.TopoDS.TopoDS_Shape
        :type SFS: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_ShellFaceSet
        :type LOSO: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GSFSMakeSolids(self, *args)


    def GSOBUMakeSolids(self, *args):
        """
        GSOBUMakeSolids(TopOpeBRepBuild_Builder self, TopoDS_Shape SOF, TopOpeBRepBuild_SolidBuilder SOBU, NCollection_List_TopoDS_Shape LOSO)

        :type SOF: OCC.wrapper.TopoDS.TopoDS_Shape
        :type SOBU: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_SolidBuilder
        :type LOSO: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GSOBUMakeSolids(self, *args)


    def GWESMakeFaces(self, *args):
        """
        GWESMakeFaces(TopOpeBRepBuild_Builder self, TopoDS_Shape FF, TopOpeBRepBuild_WireEdgeSet WES, NCollection_List_TopoDS_Shape LOF)

        :type FF: OCC.wrapper.TopoDS.TopoDS_Shape
        :type WES: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeSet
        :type LOF: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GWESMakeFaces(self, *args)


    def GFABUMakeFaces(self, *args):
        """
        GFABUMakeFaces(TopOpeBRepBuild_Builder self, TopoDS_Shape FF, TopOpeBRepBuild_FaceBuilder FABU, NCollection_List_TopoDS_Shape LOF, NCollection_DataMap_TopoDS_Shape_Standard_Integer_TopTools_ShapeMapHasher MWisOld)

        :type FF: OCC.wrapper.TopoDS.TopoDS_Shape
        :type FABU: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_FaceBuilder
        :type LOF: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type MWisOld: OCC.wrapper.TopTools.TopTools_DataMapOfShapeInteger

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GFABUMakeFaces(self, *args)


    def RegularizeFaces(self, *args):
        """
        RegularizeFaces(TopOpeBRepBuild_Builder self, TopoDS_Shape FF, NCollection_List_TopoDS_Shape lnewFace, NCollection_List_TopoDS_Shape LOF)

        :type FF: OCC.wrapper.TopoDS.TopoDS_Shape
        :type lnewFace: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type LOF: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_RegularizeFaces(self, *args)


    def RegularizeFace(self, *args):
        """
        RegularizeFace(TopOpeBRepBuild_Builder self, TopoDS_Shape FF, TopoDS_Shape newFace, NCollection_List_TopoDS_Shape LOF)

        :type FF: OCC.wrapper.TopoDS.TopoDS_Shape
        :type newFace: OCC.wrapper.TopoDS.TopoDS_Shape
        :type LOF: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_RegularizeFace(self, *args)


    def RegularizeSolids(self, *args):
        """
        RegularizeSolids(TopOpeBRepBuild_Builder self, TopoDS_Shape SS, NCollection_List_TopoDS_Shape lnewSolid, NCollection_List_TopoDS_Shape LOS)

        :type SS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type lnewSolid: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type LOS: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_RegularizeSolids(self, *args)


    def RegularizeSolid(self, *args):
        """
        RegularizeSolid(TopOpeBRepBuild_Builder self, TopoDS_Shape SS, TopoDS_Shape newSolid, NCollection_List_TopoDS_Shape LOS)

        :type SS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type newSolid: OCC.wrapper.TopoDS.TopoDS_Shape
        :type LOS: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_RegularizeSolid(self, *args)


    def GPVSMakeEdges(self, *args):
        """
        GPVSMakeEdges(TopOpeBRepBuild_Builder self, TopoDS_Shape EF, TopOpeBRepBuild_PaveSet PVS, NCollection_List_TopoDS_Shape LOE)

        :type EF: OCC.wrapper.TopoDS.TopoDS_Shape
        :type PVS: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_PaveSet
        :type LOE: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GPVSMakeEdges(self, *args)


    def GEDBUMakeEdges(self, *args):
        """
        GEDBUMakeEdges(TopOpeBRepBuild_Builder self, TopoDS_Shape EF, TopOpeBRepBuild_EdgeBuilder EDBU, NCollection_List_TopoDS_Shape LOE)

        :type EF: OCC.wrapper.TopoDS.TopoDS_Shape
        :type EDBU: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_EdgeBuilder
        :type LOE: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GEDBUMakeEdges(self, *args)


    def GToSplit(self, *args):
        """
        GToSplit(TopOpeBRepBuild_Builder self, TopoDS_Shape S, TopAbs_State const TB) -> Standard_Boolean

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type TB: OCC.wrapper.TopAbs.TopAbs_State
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GToSplit(self, *args)


    def GToMerge(self, *args):
        """
        GToMerge(TopOpeBRepBuild_Builder self, TopoDS_Shape S) -> Standard_Boolean

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GToMerge(self, *args)


    def GTakeCommonOfSame(*args):
        """
        GTakeCommonOfSame(TopOpeBRepBuild_GTopo G) -> Standard_Boolean

        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GTakeCommonOfSame(*args)

    GTakeCommonOfSame = staticmethod(GTakeCommonOfSame)

    def GTakeCommonOfDiff(*args):
        """
        GTakeCommonOfDiff(TopOpeBRepBuild_GTopo G) -> Standard_Boolean

        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GTakeCommonOfDiff(*args)

    GTakeCommonOfDiff = staticmethod(GTakeCommonOfDiff)

    def GFindSamDom(self, *args):
        """
        GFindSamDom(TopOpeBRepBuild_Builder self, TopoDS_Shape S, NCollection_List_TopoDS_Shape L1, NCollection_List_TopoDS_Shape L2)
        GFindSamDom(TopOpeBRepBuild_Builder self, NCollection_List_TopoDS_Shape L1, NCollection_List_TopoDS_Shape L2)

        :type L1: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type L2: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GFindSamDom(self, *args)


    def GFindSamDomSODO(self, *args):
        """
        GFindSamDomSODO(TopOpeBRepBuild_Builder self, TopoDS_Shape S, NCollection_List_TopoDS_Shape LSO, NCollection_List_TopoDS_Shape LDO)
        GFindSamDomSODO(TopOpeBRepBuild_Builder self, NCollection_List_TopoDS_Shape LSO, NCollection_List_TopoDS_Shape LDO)

        :type LSO: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type LDO: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GFindSamDomSODO(self, *args)


    def GMapShapes(self, *args):
        """
        GMapShapes(TopOpeBRepBuild_Builder self, TopoDS_Shape S1, TopoDS_Shape S2)

        :type S1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type S2: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GMapShapes(self, *args)


    def GClearMaps(self, *args):
        """GClearMaps(TopOpeBRepBuild_Builder self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GClearMaps(self, *args)


    def GFindSameRank(self, *args):
        """
        GFindSameRank(TopOpeBRepBuild_Builder self, NCollection_List_TopoDS_Shape L1, Standard_Integer const R, NCollection_List_TopoDS_Shape L2)

        :type L1: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type R: int
        :type L2: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GFindSameRank(self, *args)


    def GShapeRank(self, *args):
        """
        GShapeRank(TopOpeBRepBuild_Builder self, TopoDS_Shape S) -> Standard_Integer

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GShapeRank(self, *args)


    def GIsShapeOf(self, *args):
        """
        GIsShapeOf(TopOpeBRepBuild_Builder self, TopoDS_Shape S, Standard_Integer const I12) -> Standard_Boolean

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type I12: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GIsShapeOf(self, *args)


    def GContains(*args):
        """
        GContains(TopoDS_Shape S, NCollection_List_TopoDS_Shape L) -> Standard_Boolean

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type L: OCC.wrapper.TopTools.TopTools_ListOfShape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GContains(*args)

    GContains = staticmethod(GContains)

    def GCopyList(*args):
        """
        GCopyList(NCollection_List_TopoDS_Shape Lin, Standard_Integer const i1, Standard_Integer const i2, NCollection_List_TopoDS_Shape Lou)
        GCopyList(NCollection_List_TopoDS_Shape Lin, NCollection_List_TopoDS_Shape Lou)

        :type Lin: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type Lou: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GCopyList(*args)

    GCopyList = staticmethod(GCopyList)

    def GdumpLS(self, *args):
        """
        GdumpLS(TopOpeBRepBuild_Builder self, NCollection_List_TopoDS_Shape L)

        :type L: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GdumpLS(self, *args)


    def GdumpPNT(*args):
        """
        GdumpPNT(gp_Pnt P)

        :type P: OCC.wrapper.gp.gp_Pnt

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GdumpPNT(*args)

    GdumpPNT = staticmethod(GdumpPNT)

    def GdumpORIPARPNT(*args):
        """
        GdumpORIPARPNT(TopAbs_Orientation const o, Standard_Real const p, gp_Pnt Pnt)

        :type o: OCC.wrapper.TopAbs.TopAbs_Orientation
        :type p: float
        :type Pnt: OCC.wrapper.gp.gp_Pnt

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GdumpORIPARPNT(*args)

    GdumpORIPARPNT = staticmethod(GdumpORIPARPNT)

    def GdumpSHA(self, *args):
        """
        GdumpSHA(TopOpeBRepBuild_Builder self, TopoDS_Shape S, Standard_Address const str=None)

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type str: OCC.wrapper.Standard.Standard_Address

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GdumpSHA(self, *args)


    def GdumpSHAORI(self, *args):
        """
        GdumpSHAORI(TopOpeBRepBuild_Builder self, TopoDS_Shape S, Standard_Address const str=None)

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type str: OCC.wrapper.Standard.Standard_Address

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GdumpSHAORI(self, *args)


    def GdumpSHAORIGEO(self, *args):
        """
        GdumpSHAORIGEO(TopOpeBRepBuild_Builder self, TopoDS_Shape S, Standard_Address const str=None)

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type str: OCC.wrapper.Standard.Standard_Address

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GdumpSHAORIGEO(self, *args)


    def GdumpSHASTA(self, *args):
        """
        GdumpSHASTA(TopOpeBRepBuild_Builder self, Standard_Integer const iS, TopAbs_State const T, TCollection_AsciiString a, TCollection_AsciiString b)
        GdumpSHASTA(TopOpeBRepBuild_Builder self, TopoDS_Shape S, TopAbs_State const T, TCollection_AsciiString a, TCollection_AsciiString b)
        GdumpSHASTA(TopOpeBRepBuild_Builder self, Standard_Integer const iS, TopAbs_State const T, TopOpeBRepBuild_ShapeSet SS, TCollection_AsciiString a, TCollection_AsciiString b, TCollection_AsciiString c)

        :type iS: int
        :type T: OCC.wrapper.TopAbs.TopAbs_State
        :type SS: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_ShapeSet
        :type a: OCC.wrapper.TCollection.TCollection_AsciiString
        :type b: OCC.wrapper.TCollection.TCollection_AsciiString
        :type c: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GdumpSHASTA(self, *args)


    def GdumpEDG(self, *args):
        """
        GdumpEDG(TopOpeBRepBuild_Builder self, TopoDS_Shape S, Standard_Address const str=None)

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type str: OCC.wrapper.Standard.Standard_Address

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GdumpEDG(self, *args)


    def GdumpEDGVER(self, *args):
        """
        GdumpEDGVER(TopOpeBRepBuild_Builder self, TopoDS_Shape E, TopoDS_Shape V, Standard_Address const str=None)

        :type E: OCC.wrapper.TopoDS.TopoDS_Shape
        :type V: OCC.wrapper.TopoDS.TopoDS_Shape
        :type str: OCC.wrapper.Standard.Standard_Address

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GdumpEDGVER(self, *args)


    def GdumpSAMDOM(self, *args):
        """
        GdumpSAMDOM(TopOpeBRepBuild_Builder self, NCollection_List_TopoDS_Shape L, Standard_Address const str=None)

        :type L: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type str: OCC.wrapper.Standard.Standard_Address

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GdumpSAMDOM(self, *args)


    def GdumpEXP(self, *args):
        """
        GdumpEXP(TopOpeBRepBuild_Builder self, TopOpeBRepTool_ShapeExplorer E)

        :type E: OCC.wrapper.TopOpeBRepTool.TopOpeBRepTool_ShapeExplorer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GdumpEXP(self, *args)


    def GdumpSOBU(self, *args):
        """
        GdumpSOBU(TopOpeBRepBuild_Builder self, TopOpeBRepBuild_SolidBuilder SB)

        :type SB: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_SolidBuilder

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GdumpSOBU(self, *args)


    def GdumpFABU(self, *args):
        """
        GdumpFABU(TopOpeBRepBuild_Builder self, TopOpeBRepBuild_FaceBuilder FB)

        :type FB: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_FaceBuilder

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GdumpFABU(self, *args)


    def GdumpEDBU(self, *args):
        """
        GdumpEDBU(TopOpeBRepBuild_Builder self, TopOpeBRepBuild_EdgeBuilder EB)

        :type EB: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_EdgeBuilder

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GdumpEDBU(self, *args)


    def GtraceSPS(self, *args):
        """
        GtraceSPS(TopOpeBRepBuild_Builder self, Standard_Integer const iS) -> Standard_Boolean
        GtraceSPS(TopOpeBRepBuild_Builder self, Standard_Integer const iS, Standard_Integer const jS) -> Standard_Boolean
        GtraceSPS(TopOpeBRepBuild_Builder self, TopoDS_Shape S) -> Standard_Boolean
        GtraceSPS(TopOpeBRepBuild_Builder self, TopoDS_Shape S) -> Standard_Boolean

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type IS: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GtraceSPS(self, *args)


    def GdumpSHASETreset(self, *args):
        """GdumpSHASETreset(TopOpeBRepBuild_Builder self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GdumpSHASETreset(self, *args)


    def GdumpSHASETindex(self, *args):
        """
        GdumpSHASETindex(TopOpeBRepBuild_Builder self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GdumpSHASETindex(self, *args)


    def PrintGeo(*args):
        """
        PrintGeo(TopoDS_Shape S)

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_PrintGeo(*args)

    PrintGeo = staticmethod(PrintGeo)

    def PrintSur(*args):
        """
        PrintSur(TopoDS_Face F)

        :type F: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_PrintSur(*args)

    PrintSur = staticmethod(PrintSur)

    def PrintCur(*args):
        """
        PrintCur(TopoDS_Edge E)

        :type E: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_PrintCur(*args)

    PrintCur = staticmethod(PrintCur)

    def PrintPnt(*args):
        """
        PrintPnt(TopoDS_Vertex V)

        :type V: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_PrintPnt(*args)

    PrintPnt = staticmethod(PrintPnt)

    def PrintOri(*args):
        """
        PrintOri(TopoDS_Shape S)

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_PrintOri(*args)

    PrintOri = staticmethod(PrintOri)

    def StringState(*args):
        """
        StringState(TopAbs_State const S) -> TCollection_AsciiString

        :type S: OCC.wrapper.TopAbs.TopAbs_State
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_StringState(*args)

    StringState = staticmethod(StringState)

    def GcheckNBOUNDS(*args):
        """
        GcheckNBOUNDS(TopoDS_Shape E) -> Standard_Boolean

        :type E: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GcheckNBOUNDS(*args)

    GcheckNBOUNDS = staticmethod(GcheckNBOUNDS)
    __swig_destroy__ = _TopOpeBRepBuild.delete_TopOpeBRepBuild_Builder
TopOpeBRepBuild_Builder_swigregister = _TopOpeBRepBuild.TopOpeBRepBuild_Builder_swigregister
TopOpeBRepBuild_Builder_swigregister(TopOpeBRepBuild_Builder)

def TopOpeBRepBuild_Builder_TopType(*args):
    """
    TopOpeBRepBuild_Builder_TopType(TopoDS_Shape S) -> TopAbs_ShapeEnum

    :type S: OCC.wrapper.TopoDS.TopoDS_Shape
    :rtype: OCC.wrapper.TopAbs.TopAbs_ShapeEnum

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_TopType(*args)

def TopOpeBRepBuild_Builder_Reverse(*args):
    """
    TopOpeBRepBuild_Builder_Reverse(TopAbs_State const T1, TopAbs_State const T2) -> Standard_Boolean

    :type T1: OCC.wrapper.TopAbs.TopAbs_State
    :type T2: OCC.wrapper.TopAbs.TopAbs_State
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_Reverse(*args)

def TopOpeBRepBuild_Builder_Orient(*args):
    """
    TopOpeBRepBuild_Builder_Orient(TopAbs_Orientation const O, Standard_Boolean const R) -> TopAbs_Orientation

    :type O: OCC.wrapper.TopAbs.TopAbs_Orientation
    :type R: bool
    :rtype: OCC.wrapper.TopAbs.TopAbs_Orientation

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_Orient(*args)

def TopOpeBRepBuild_Builder_Contains(*args):
    """
    TopOpeBRepBuild_Builder_Contains(TopoDS_Shape S, NCollection_List_TopoDS_Shape L) -> Standard_Boolean

    :type S: OCC.wrapper.TopoDS.TopoDS_Shape
    :type L: OCC.wrapper.TopTools.TopTools_ListOfShape
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_Contains(*args)

def TopOpeBRepBuild_Builder_KPls(*args):
    """
    KPls(TopoDS_Shape S, TopAbs_ShapeEnum const T, NCollection_List_TopoDS_Shape L) -> Standard_Integer
    TopOpeBRepBuild_Builder_KPls(TopoDS_Shape S, TopAbs_ShapeEnum const T) -> Standard_Integer

    :type S: OCC.wrapper.TopoDS.TopoDS_Shape
    :type T: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_KPls(*args)

def TopOpeBRepBuild_Builder_KPContains(*args):
    """
    TopOpeBRepBuild_Builder_KPContains(TopoDS_Shape S, NCollection_List_TopoDS_Shape L) -> Standard_Boolean

    :type S: OCC.wrapper.TopoDS.TopoDS_Shape
    :type L: OCC.wrapper.TopTools.TopTools_ListOfShape
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_KPContains(*args)

def TopOpeBRepBuild_Builder_KPreturn(*args):
    """
    TopOpeBRepBuild_Builder_KPreturn(Standard_Integer const KP) -> Standard_Integer

    :type KP: int
    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_KPreturn(*args)

def TopOpeBRepBuild_Builder_GTakeCommonOfSame(*args):
    """
    TopOpeBRepBuild_Builder_GTakeCommonOfSame(TopOpeBRepBuild_GTopo G) -> Standard_Boolean

    :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GTakeCommonOfSame(*args)

def TopOpeBRepBuild_Builder_GTakeCommonOfDiff(*args):
    """
    TopOpeBRepBuild_Builder_GTakeCommonOfDiff(TopOpeBRepBuild_GTopo G) -> Standard_Boolean

    :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GTakeCommonOfDiff(*args)

def TopOpeBRepBuild_Builder_GContains(*args):
    """
    TopOpeBRepBuild_Builder_GContains(TopoDS_Shape S, NCollection_List_TopoDS_Shape L) -> Standard_Boolean

    :type S: OCC.wrapper.TopoDS.TopoDS_Shape
    :type L: OCC.wrapper.TopTools.TopTools_ListOfShape
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GContains(*args)

def TopOpeBRepBuild_Builder_GCopyList(*args):
    """
    GCopyList(NCollection_List_TopoDS_Shape Lin, Standard_Integer const i1, Standard_Integer const i2, NCollection_List_TopoDS_Shape Lou)
    TopOpeBRepBuild_Builder_GCopyList(NCollection_List_TopoDS_Shape Lin, NCollection_List_TopoDS_Shape Lou)

    :type Lin: OCC.wrapper.TopTools.TopTools_ListOfShape
    :type Lou: OCC.wrapper.TopTools.TopTools_ListOfShape

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GCopyList(*args)

def TopOpeBRepBuild_Builder_GdumpPNT(*args):
    """
    TopOpeBRepBuild_Builder_GdumpPNT(gp_Pnt P)

    :type P: OCC.wrapper.gp.gp_Pnt

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GdumpPNT(*args)

def TopOpeBRepBuild_Builder_GdumpORIPARPNT(*args):
    """
    TopOpeBRepBuild_Builder_GdumpORIPARPNT(TopAbs_Orientation const o, Standard_Real const p, gp_Pnt Pnt)

    :type o: OCC.wrapper.TopAbs.TopAbs_Orientation
    :type p: float
    :type Pnt: OCC.wrapper.gp.gp_Pnt

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GdumpORIPARPNT(*args)

def TopOpeBRepBuild_Builder_PrintGeo(*args):
    """
    TopOpeBRepBuild_Builder_PrintGeo(TopoDS_Shape S)

    :type S: OCC.wrapper.TopoDS.TopoDS_Shape

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_PrintGeo(*args)

def TopOpeBRepBuild_Builder_PrintSur(*args):
    """
    TopOpeBRepBuild_Builder_PrintSur(TopoDS_Face F)

    :type F: OCC.wrapper.TopoDS.TopoDS_Face

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_PrintSur(*args)

def TopOpeBRepBuild_Builder_PrintCur(*args):
    """
    TopOpeBRepBuild_Builder_PrintCur(TopoDS_Edge E)

    :type E: OCC.wrapper.TopoDS.TopoDS_Edge

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_PrintCur(*args)

def TopOpeBRepBuild_Builder_PrintPnt(*args):
    """
    TopOpeBRepBuild_Builder_PrintPnt(TopoDS_Vertex V)

    :type V: OCC.wrapper.TopoDS.TopoDS_Vertex

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_PrintPnt(*args)

def TopOpeBRepBuild_Builder_PrintOri(*args):
    """
    TopOpeBRepBuild_Builder_PrintOri(TopoDS_Shape S)

    :type S: OCC.wrapper.TopoDS.TopoDS_Shape

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_PrintOri(*args)

def TopOpeBRepBuild_Builder_StringState(*args):
    """
    TopOpeBRepBuild_Builder_StringState(TopAbs_State const S) -> TCollection_AsciiString

    :type S: OCC.wrapper.TopAbs.TopAbs_State
    :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_StringState(*args)

def TopOpeBRepBuild_Builder_GcheckNBOUNDS(*args):
    """
    TopOpeBRepBuild_Builder_GcheckNBOUNDS(TopoDS_Shape E) -> Standard_Boolean

    :type E: OCC.wrapper.TopoDS.TopoDS_Shape
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_Builder_GcheckNBOUNDS(*args)

class TopOpeBRepBuild_SolidAreaBuilder(TopOpeBRepBuild_Area3dBuilder):
    """
    The SolidAreaBuilder algorithm is used to construct Solids from a LoopSet,
    where the Loop is the composite topological object of the boundary,
    here wire or block of edges.
    The LoopSet gives an iteration on Loops.
    For each Loop  it indicates if it is on the boundary (wire) or if it
    results from  an interference (block of edges).
    The result of the SolidAreaBuilder is an iteration on areas.
    An area is described by a set of Loops.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopOpeBRepBuild_SolidAreaBuilder self) -> TopOpeBRepBuild_SolidAreaBuilder
        __init__(TopOpeBRepBuild_SolidAreaBuilder self, TopOpeBRepBuild_LoopSet LS, TopOpeBRepBuild_LoopClassifier LC, Standard_Boolean const ForceClass) -> TopOpeBRepBuild_SolidAreaBuilder

        Creates a SolidAreaBuilder to build Solids on
        the (shells,blocks of face) of <LS>, using the classifier <LC>.

        :type LS: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_LoopSet
        :type LC: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_LoopClassifier
        :type ForceClass: bool

        """
        this = _TopOpeBRepBuild.new_TopOpeBRepBuild_SolidAreaBuilder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def InitSolidAreaBuilder(self, *args):
        """
        InitSolidAreaBuilder(TopOpeBRepBuild_SolidAreaBuilder self, TopOpeBRepBuild_LoopSet LS, TopOpeBRepBuild_LoopClassifier LC, Standard_Boolean const ForceClass)

        :type LS: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_LoopSet
        :type LC: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_LoopClassifier
        :type ForceClass: bool

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_SolidAreaBuilder_InitSolidAreaBuilder(self, *args)

    __swig_destroy__ = _TopOpeBRepBuild.delete_TopOpeBRepBuild_SolidAreaBuilder
TopOpeBRepBuild_SolidAreaBuilder_swigregister = _TopOpeBRepBuild.TopOpeBRepBuild_SolidAreaBuilder_swigregister
TopOpeBRepBuild_SolidAreaBuilder_swigregister(TopOpeBRepBuild_SolidAreaBuilder)

class TopOpeBRepBuild_PaveSet(TopOpeBRepBuild_LoopSet):
    """
    class providing an exploration of a set of vertices to build edges.
    It is similar to LoopSet from TopOpeBRepBuild where Loop is Pave.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopOpeBRepBuild_PaveSet self, TopoDS_Shape E) -> TopOpeBRepBuild_PaveSet

        Create a Pave set on edge <E>. It contains <E> vertices.

        :type E: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        this = _TopOpeBRepBuild.new_TopOpeBRepBuild_PaveSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def RemovePV(self, *args):
        """
        RemovePV(TopOpeBRepBuild_PaveSet self, Standard_Boolean const B)

        :type B: bool

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_PaveSet_RemovePV(self, *args)


    def Append(self, *args):
        """
        Append(TopOpeBRepBuild_PaveSet self, Handle_TopOpeBRepBuild_Pave PV)

        Add <PV> in the Pave set.

        :type PV: OCC.wrapper.TopOpeBRepBuild.Handle_TopOpeBRepBuild_Pave

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_PaveSet_Append(self, *args)


    def InitLoop(self, *args):
        """InitLoop(TopOpeBRepBuild_PaveSet self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_PaveSet_InitLoop(self, *args)


    def MoreLoop(self, *args):
        """
        MoreLoop(TopOpeBRepBuild_PaveSet self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_PaveSet_MoreLoop(self, *args)


    def NextLoop(self, *args):
        """NextLoop(TopOpeBRepBuild_PaveSet self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_PaveSet_NextLoop(self, *args)


    def Loop(self, *args):
        """
        Loop(TopOpeBRepBuild_PaveSet self) -> Handle_TopOpeBRepBuild_Loop

        :rtype: OCC.wrapper.TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_PaveSet_Loop(self, *args)


    def Edge(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_PaveSet_Edge(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasEqualParameters(self, *args):
        """
        HasEqualParameters(TopOpeBRepBuild_PaveSet self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_PaveSet_HasEqualParameters(self, *args)


    def EqualParameters(self, *args):
        """
        EqualParameters(TopOpeBRepBuild_PaveSet self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_PaveSet_EqualParameters(self, *args)


    def ClosedVertices(self, *args):
        """
        ClosedVertices(TopOpeBRepBuild_PaveSet self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_PaveSet_ClosedVertices(self, *args)


    def SortPave(*args):
        """
        SortPave(NCollection_List_Handle_TopOpeBRepBuild_Pave Lin, NCollection_List_Handle_TopOpeBRepBuild_Pave Lout)

        :type Lin: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_ListOfPave
        :type Lout: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_ListOfPave

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_PaveSet_SortPave(*args)

    SortPave = staticmethod(SortPave)
    __swig_destroy__ = _TopOpeBRepBuild.delete_TopOpeBRepBuild_PaveSet
TopOpeBRepBuild_PaveSet_swigregister = _TopOpeBRepBuild.TopOpeBRepBuild_PaveSet_swigregister
TopOpeBRepBuild_PaveSet_swigregister(TopOpeBRepBuild_PaveSet)

def TopOpeBRepBuild_PaveSet_SortPave(*args):
    """
    TopOpeBRepBuild_PaveSet_SortPave(NCollection_List_Handle_TopOpeBRepBuild_Pave Lin, NCollection_List_Handle_TopOpeBRepBuild_Pave Lout)

    :type Lin: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_ListOfPave
    :type Lout: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_ListOfPave

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_PaveSet_SortPave(*args)

class TopOpeBRepBuild_Builder1(TopOpeBRepBuild_Builder):
    """
    extension  of  the  class  TopOpeBRepBuild_Builder  dedicated
    to  avoid  bugs  in  "Rebuilding Result" algorithm  for  the  case  of  SOLID/SOLID  Boolean  Operations
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopOpeBRepBuild_Builder1 self, TopOpeBRepDS_BuildTool BT) -> TopOpeBRepBuild_Builder1

        :type BT: OCC.wrapper.TopOpeBRepDS.TopOpeBRepDS_BuildTool

        """
        this = _TopOpeBRepBuild.new_TopOpeBRepBuild_Builder1(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Clear(self, *args):
        """
        Clear(TopOpeBRepBuild_Builder1 self)

        Removes all splits and merges already performed.
        Does NOT clear the handled DS  (except  ShapeWithStatesMaps).


        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder1_Clear(self, *args)


    def Perform(self, *args):
        """
        Perform(TopOpeBRepBuild_Builder1 self, Handle_TopOpeBRepDS_HDataStructure HDS)
        Perform(TopOpeBRepBuild_Builder1 self, Handle_TopOpeBRepDS_HDataStructure HDS, TopoDS_Shape S1, TopoDS_Shape S2)

        :type HDS: OCC.wrapper.TopOpeBRepDS.Handle_TopOpeBRepDS_HDataStructure
        :type S1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type S2: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder1_Perform(self, *args)


    def MergeKPart(self, *args):
        """
        MergeKPart(TopOpeBRepBuild_Builder1 self)
        MergeKPart(TopOpeBRepBuild_Builder1 self, TopAbs_State const TB1, TopAbs_State const TB2)

        :type TB1: OCC.wrapper.TopAbs.TopAbs_State
        :type TB2: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder1_MergeKPart(self, *args)


    def GFillSolidSFS(self, *args):
        """
        GFillSolidSFS(TopOpeBRepBuild_Builder1 self, TopoDS_Shape SO1, NCollection_List_TopoDS_Shape LSO2, TopOpeBRepBuild_GTopo G, TopOpeBRepBuild_ShellFaceSet SFS)

        :type SO1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type LSO2: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo
        :type SFS: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_ShellFaceSet

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder1_GFillSolidSFS(self, *args)


    def GFillShellSFS(self, *args):
        """
        GFillShellSFS(TopOpeBRepBuild_Builder1 self, TopoDS_Shape SH1, NCollection_List_TopoDS_Shape LSO2, TopOpeBRepBuild_GTopo G, TopOpeBRepBuild_ShellFaceSet SFS)

        :type SH1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type LSO2: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo
        :type SFS: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_ShellFaceSet

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder1_GFillShellSFS(self, *args)


    def GWESMakeFaces(self, *args):
        """
        GWESMakeFaces(TopOpeBRepBuild_Builder1 self, TopoDS_Shape FF, TopOpeBRepBuild_WireEdgeSet WES, NCollection_List_TopoDS_Shape LOF)

        :type FF: OCC.wrapper.TopoDS.TopoDS_Shape
        :type WES: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeSet
        :type LOF: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder1_GWESMakeFaces(self, *args)


    def GFillFaceNotSameDomSFS(self, *args):
        """
        GFillFaceNotSameDomSFS(TopOpeBRepBuild_Builder1 self, TopoDS_Shape F1, NCollection_List_TopoDS_Shape LSO2, TopOpeBRepBuild_GTopo G, TopOpeBRepBuild_ShellFaceSet SFS)

        :type F1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type LSO2: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo
        :type SFS: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_ShellFaceSet

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder1_GFillFaceNotSameDomSFS(self, *args)


    def GFillFaceNotSameDomWES(self, *args):
        """
        GFillFaceNotSameDomWES(TopOpeBRepBuild_Builder1 self, TopoDS_Shape F1, NCollection_List_TopoDS_Shape LSO2, TopOpeBRepBuild_GTopo G, TopOpeBRepBuild_WireEdgeSet WES)

        :type F1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type LSO2: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo
        :type WES: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeSet

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder1_GFillFaceNotSameDomWES(self, *args)


    def GFillWireNotSameDomWES(self, *args):
        """
        GFillWireNotSameDomWES(TopOpeBRepBuild_Builder1 self, TopoDS_Shape W1, NCollection_List_TopoDS_Shape LSO2, TopOpeBRepBuild_GTopo G, TopOpeBRepBuild_WireEdgeSet WES)

        :type W1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type LSO2: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo
        :type WES: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeSet

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder1_GFillWireNotSameDomWES(self, *args)


    def GFillEdgeNotSameDomWES(self, *args):
        """
        GFillEdgeNotSameDomWES(TopOpeBRepBuild_Builder1 self, TopoDS_Shape E1, NCollection_List_TopoDS_Shape LSO2, TopOpeBRepBuild_GTopo G, TopOpeBRepBuild_WireEdgeSet WES)

        :type E1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type LSO2: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo
        :type WES: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeSet

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder1_GFillEdgeNotSameDomWES(self, *args)


    def GFillFaceSameDomSFS(self, *args):
        """
        GFillFaceSameDomSFS(TopOpeBRepBuild_Builder1 self, TopoDS_Shape F1, NCollection_List_TopoDS_Shape LSO2, TopOpeBRepBuild_GTopo G, TopOpeBRepBuild_ShellFaceSet SFS)

        :type F1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type LSO2: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo
        :type SFS: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_ShellFaceSet

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder1_GFillFaceSameDomSFS(self, *args)


    def GFillFaceSameDomWES(self, *args):
        """
        GFillFaceSameDomWES(TopOpeBRepBuild_Builder1 self, TopoDS_Shape F1, NCollection_List_TopoDS_Shape LSO2, TopOpeBRepBuild_GTopo G, TopOpeBRepBuild_WireEdgeSet WES)

        :type F1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type LSO2: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo
        :type WES: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeSet

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder1_GFillFaceSameDomWES(self, *args)


    def GFillWireSameDomWES(self, *args):
        """
        GFillWireSameDomWES(TopOpeBRepBuild_Builder1 self, TopoDS_Shape W1, NCollection_List_TopoDS_Shape LSO2, TopOpeBRepBuild_GTopo G, TopOpeBRepBuild_WireEdgeSet WES)

        :type W1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type LSO2: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo
        :type WES: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeSet

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder1_GFillWireSameDomWES(self, *args)


    def GFillEdgeSameDomWES(self, *args):
        """
        GFillEdgeSameDomWES(TopOpeBRepBuild_Builder1 self, TopoDS_Shape E1, NCollection_List_TopoDS_Shape LSO2, TopOpeBRepBuild_GTopo G, TopOpeBRepBuild_WireEdgeSet WES)

        :type E1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type LSO2: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo
        :type WES: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeSet

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder1_GFillEdgeSameDomWES(self, *args)


    def PerformONParts(self, *args):
        """
        PerformONParts(TopOpeBRepBuild_Builder1 self, TopoDS_Shape F, NCollection_IndexedMap_TopoDS_Shape_TopTools_ShapeMapHasher SDfaces, TopOpeBRepBuild_GTopo G, TopOpeBRepBuild_WireEdgeSet WES)

        :type F: OCC.wrapper.TopoDS.TopoDS_Shape
        :type SDfaces: OCC.wrapper.TopTools.TopTools_IndexedMapOfShape
        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo
        :type WES: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeSet

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder1_PerformONParts(self, *args)


    def PerformPieceIn2D(self, *args):
        """
        PerformPieceIn2D(TopOpeBRepBuild_Builder1 self, TopoDS_Edge aPieceToPerform, TopoDS_Edge aOriginalEdge, TopoDS_Face edgeFace, TopoDS_Face toFace, TopOpeBRepBuild_GTopo G)

        :type aPieceToPerform: OCC.wrapper.TopoDS.TopoDS_Edge
        :type aOriginalEdge: OCC.wrapper.TopoDS.TopoDS_Edge
        :type edgeFace: OCC.wrapper.TopoDS.TopoDS_Face
        :type toFace: OCC.wrapper.TopoDS.TopoDS_Face
        :type G: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo
        :type keep: bool

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder1_PerformPieceIn2D(self, *args)


    def PerformPieceOn2D(self, *args):
        """
        PerformPieceOn2D(TopOpeBRepBuild_Builder1 self, TopoDS_Shape aPieceObj, TopoDS_Shape aFaceObj, TopoDS_Shape aEdgeObj, NCollection_List_TopoDS_Shape aListOfPieces, NCollection_List_TopoDS_Shape aListOfFaces, NCollection_List_TopoDS_Shape aListOfPiecesOut2d) -> Standard_Integer

        :type aPieceObj: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aFaceObj: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aEdgeObj: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aListOfPieces: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type aListOfFaces: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type aListOfPiecesOut2d: OCC.wrapper.TopTools.TopTools_ListOfShape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder1_PerformPieceOn2D(self, *args)


    def TwoPiecesON(self, *args):
        """
        TwoPiecesON(TopOpeBRepBuild_Builder1 self, NCollection_Sequence_TopoDS_Shape aSeq, NCollection_List_TopoDS_Shape aListOfPieces, NCollection_List_TopoDS_Shape aListOfFaces, NCollection_List_TopoDS_Shape aListOfPiecesOut2d) -> Standard_Integer

        :type aSeq: OCC.wrapper.TopTools.TopTools_SequenceOfShape
        :type aListOfPieces: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type aListOfFaces: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type aListOfPiecesOut2d: OCC.wrapper.TopTools.TopTools_ListOfShape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder1_TwoPiecesON(self, *args)


    def CorrectResult2d(self, *args):
        """
        CorrectResult2d(TopOpeBRepBuild_Builder1 self, TopoDS_Shape aResult) -> Standard_Integer

        :type aResult: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_Builder1_CorrectResult2d(self, *args)

    __swig_destroy__ = _TopOpeBRepBuild.delete_TopOpeBRepBuild_Builder1
TopOpeBRepBuild_Builder1_swigregister = _TopOpeBRepBuild.TopOpeBRepBuild_Builder1_swigregister
TopOpeBRepBuild_Builder1_swigregister(TopOpeBRepBuild_Builder1)

class TopOpeBRepBuild_ShellFaceClassifier(TopOpeBRepBuild_CompositeClassifier):
    """
    Classify faces and shells.
    shapes are Shells, Elements are Faces.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopOpeBRepBuild_ShellFaceClassifier self, TopOpeBRepBuild_BlockBuilder BB) -> TopOpeBRepBuild_ShellFaceClassifier

        Creates a classifier in 3D space, to compare :
        a face with a set of faces
        a shell with a set of faces
        a shell with a shell

        :type BB: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_BlockBuilder

        """
        this = _TopOpeBRepBuild.new_TopOpeBRepBuild_ShellFaceClassifier(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Clear(self, *args):
        """Clear(TopOpeBRepBuild_ShellFaceClassifier self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShellFaceClassifier_Clear(self, *args)


    def CompareShapes(self, *args):
        """
        CompareShapes(TopOpeBRepBuild_ShellFaceClassifier self, TopoDS_Shape B1, TopoDS_Shape B2) -> TopAbs_State

        classify shell <B1> with shell <B2>

        :type B1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type B2: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShellFaceClassifier_CompareShapes(self, *args)


    def CompareElementToShape(self, *args):
        """
        CompareElementToShape(TopOpeBRepBuild_ShellFaceClassifier self, TopoDS_Shape F, TopoDS_Shape S) -> TopAbs_State

        classify face <F> with shell <S>

        :type F: OCC.wrapper.TopoDS.TopoDS_Shape
        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShellFaceClassifier_CompareElementToShape(self, *args)


    def ResetShape(self, *args):
        """
        ResetShape(TopOpeBRepBuild_ShellFaceClassifier self, TopoDS_Shape S)

        prepare classification involving shell <S>
        calls ResetElement on first face of <S>

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShellFaceClassifier_ResetShape(self, *args)


    def ResetElement(self, *args):
        """
        ResetElement(TopOpeBRepBuild_ShellFaceClassifier self, TopoDS_Shape F)

        prepare classification involving face <F>
        define 3D point (later used in Compare()) on first vertex of face <F>.

        :type F: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShellFaceClassifier_ResetElement(self, *args)


    def CompareElement(self, *args):
        """
        CompareElement(TopOpeBRepBuild_ShellFaceClassifier self, TopoDS_Shape F) -> Standard_Boolean

        Add the face <F> in the set of faces used in 3D point
        classification. Returns FALSE if the face <F> has been already
        added to the set of faces, otherwise returns TRUE.

        :type F: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShellFaceClassifier_CompareElement(self, *args)


    def State(self, *args):
        """
        State(TopOpeBRepBuild_ShellFaceClassifier self) -> TopAbs_State

        Returns state of classification of 3D point, defined by
        ResetElement, with the current set of faces, defined by Compare.

        :rtype: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShellFaceClassifier_State(self, *args)

    __swig_destroy__ = _TopOpeBRepBuild.delete_TopOpeBRepBuild_ShellFaceClassifier
TopOpeBRepBuild_ShellFaceClassifier_swigregister = _TopOpeBRepBuild.TopOpeBRepBuild_ShellFaceClassifier_swigregister
TopOpeBRepBuild_ShellFaceClassifier_swigregister(TopOpeBRepBuild_ShellFaceClassifier)

class TopOpeBRepBuild_GTopo(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopOpeBRepBuild_GTopo self) -> TopOpeBRepBuild_GTopo
        __init__(TopOpeBRepBuild_GTopo self, Standard_Boolean const II, Standard_Boolean const IN, Standard_Boolean const IO, Standard_Boolean const NI, Standard_Boolean const NN, Standard_Boolean const NO, Standard_Boolean const OI, Standard_Boolean const ON, Standard_Boolean const OO, TopAbs_ShapeEnum const t1, TopAbs_ShapeEnum const t2, TopOpeBRepDS_Config const C1, TopOpeBRepDS_Config const C2) -> TopOpeBRepBuild_GTopo

        :type II: bool
        :type IN: bool
        :type IO: bool
        :type NI: bool
        :type NN: bool
        :type NO: bool
        :type OI: bool
        :type ON: bool
        :type OO: bool
        :type t1: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :type t2: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :type C1: OCC.wrapper.TopOpeBRepDS.TopOpeBRepDS_Config
        :type C2: OCC.wrapper.TopOpeBRepDS.TopOpeBRepDS_Config

        """
        this = _TopOpeBRepBuild.new_TopOpeBRepBuild_GTopo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Reset(self, *args):
        """Reset(TopOpeBRepBuild_GTopo self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_GTopo_Reset(self, *args)


    def Set(self, *args):
        """
        Set(TopOpeBRepBuild_GTopo self, Standard_Boolean const II, Standard_Boolean const IN, Standard_Boolean const IO, Standard_Boolean const NI, Standard_Boolean const NN, Standard_Boolean const NO, Standard_Boolean const OI, Standard_Boolean const ON, Standard_Boolean const OO)

        :type II: bool
        :type IN: bool
        :type IO: bool
        :type NI: bool
        :type NN: bool
        :type NO: bool
        :type OI: bool
        :type ON: bool
        :type OO: bool

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_GTopo_Set(self, *args)


    def Type(self, *args):
        """
        Type(TopOpeBRepBuild_GTopo self)

        :type t1: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :type t2: OCC.wrapper.TopAbs.TopAbs_ShapeEnum

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_GTopo_Type(self, *args)


    def ChangeType(self, *args):
        """
        ChangeType(TopOpeBRepBuild_GTopo self, TopAbs_ShapeEnum const t1, TopAbs_ShapeEnum const t2)

        :type t1: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :type t2: OCC.wrapper.TopAbs.TopAbs_ShapeEnum

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_GTopo_ChangeType(self, *args)


    def Config1(self, *args):
        """
        Config1(TopOpeBRepBuild_GTopo self) -> TopOpeBRepDS_Config

        :rtype: OCC.wrapper.TopOpeBRepDS.TopOpeBRepDS_Config

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_GTopo_Config1(self, *args)


    def Config2(self, *args):
        """
        Config2(TopOpeBRepBuild_GTopo self) -> TopOpeBRepDS_Config

        :rtype: OCC.wrapper.TopOpeBRepDS.TopOpeBRepDS_Config

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_GTopo_Config2(self, *args)


    def ChangeConfig(self, *args):
        """
        ChangeConfig(TopOpeBRepBuild_GTopo self, TopOpeBRepDS_Config const C1, TopOpeBRepDS_Config const C2)

        :type C1: OCC.wrapper.TopOpeBRepDS.TopOpeBRepDS_Config
        :type C2: OCC.wrapper.TopOpeBRepDS.TopOpeBRepDS_Config

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_GTopo_ChangeConfig(self, *args)


    def Value(self, *args):
        """
        Value(TopOpeBRepBuild_GTopo self, TopAbs_State const s1, TopAbs_State const s2) -> Standard_Boolean
        Value(TopOpeBRepBuild_GTopo self, Standard_Integer const I1, Standard_Integer const I2) -> Standard_Boolean
        Value(TopOpeBRepBuild_GTopo self, Standard_Integer const II) -> Standard_Boolean

        :type II: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_GTopo_Value(self, *args)


    def ChangeValue(self, *args):
        """
        ChangeValue(TopOpeBRepBuild_GTopo self, Standard_Integer const i1, Standard_Integer const i2, Standard_Boolean const b)
        ChangeValue(TopOpeBRepBuild_GTopo self, TopAbs_State const s1, TopAbs_State const s2, Standard_Boolean const b)

        :type s1: OCC.wrapper.TopAbs.TopAbs_State
        :type s2: OCC.wrapper.TopAbs.TopAbs_State
        :type b: bool

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_GTopo_ChangeValue(self, *args)


    def GIndex(self, *args):
        """
        GIndex(TopOpeBRepBuild_GTopo self, TopAbs_State const S) -> Standard_Integer

        :type S: OCC.wrapper.TopAbs.TopAbs_State
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_GTopo_GIndex(self, *args)


    def GState(self, *args):
        """
        GState(TopOpeBRepBuild_GTopo self, Standard_Integer const I) -> TopAbs_State

        :type I: int
        :rtype: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_GTopo_GState(self, *args)


    def Index(self, *args):
        """
        Index(TopOpeBRepBuild_GTopo self, Standard_Integer const II)

        :type II: int
        :type i1: int
        :type i2: int

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_GTopo_Index(self, *args)


    def DumpVal(self, *args):
        """
        DumpVal(TopOpeBRepBuild_GTopo self, Standard_OStream & OS, TopAbs_State const s1, TopAbs_State const s2)

        :type OS: OCC.wrapper.Standard.Standard_OStream
        :type s1: OCC.wrapper.TopAbs.TopAbs_State
        :type s2: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_GTopo_DumpVal(self, *args)


    def DumpType(self, *args):
        """
        DumpType(TopOpeBRepBuild_GTopo self, Standard_OStream & OS)

        :type OS: OCC.wrapper.Standard.Standard_OStream

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_GTopo_DumpType(self, *args)


    def DumpSSB(*args):
        """
        DumpSSB(Standard_OStream & OS, TopAbs_State const s1, TopAbs_State const s2, Standard_Boolean const b)

        :type OS: OCC.wrapper.Standard.Standard_OStream
        :type s1: OCC.wrapper.TopAbs.TopAbs_State
        :type s2: OCC.wrapper.TopAbs.TopAbs_State
        :type b: bool

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_GTopo_DumpSSB(*args)

    DumpSSB = staticmethod(DumpSSB)

    def Dump(self, *args):
        """
        Dump(TopOpeBRepBuild_GTopo self, Standard_OStream & OS, Standard_Address const s=None)

        :type OS: OCC.wrapper.Standard.Standard_OStream
        :type s: OCC.wrapper.Standard.Standard_Address

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_GTopo_Dump(self, *args)


    def StatesON(self, *args):
        """
        StatesON(TopOpeBRepBuild_GTopo self)

        :type s1: OCC.wrapper.TopAbs.TopAbs_State
        :type s2: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_GTopo_StatesON(self, *args)


    def IsToReverse1(self, *args):
        """
        IsToReverse1(TopOpeBRepBuild_GTopo self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_GTopo_IsToReverse1(self, *args)


    def IsToReverse2(self, *args):
        """
        IsToReverse2(TopOpeBRepBuild_GTopo self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_GTopo_IsToReverse2(self, *args)


    def SetReverse(self, *args):
        """
        SetReverse(TopOpeBRepBuild_GTopo self, Standard_Boolean const rev)

        :type rev: bool

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_GTopo_SetReverse(self, *args)


    def Reverse(self, *args):
        """
        Reverse(TopOpeBRepBuild_GTopo self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_GTopo_Reverse(self, *args)


    def CopyPermuted(self, *args):
        """
        CopyPermuted(TopOpeBRepBuild_GTopo self) -> TopOpeBRepBuild_GTopo

        :rtype: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_GTopo

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_GTopo_CopyPermuted(self, *args)

    __swig_destroy__ = _TopOpeBRepBuild.delete_TopOpeBRepBuild_GTopo
TopOpeBRepBuild_GTopo_swigregister = _TopOpeBRepBuild.TopOpeBRepBuild_GTopo_swigregister
TopOpeBRepBuild_GTopo_swigregister(TopOpeBRepBuild_GTopo)

def TopOpeBRepBuild_GTopo_DumpSSB(*args):
    """
    TopOpeBRepBuild_GTopo_DumpSSB(Standard_OStream & OS, TopAbs_State const s1, TopAbs_State const s2, Standard_Boolean const b)

    :type OS: OCC.wrapper.Standard.Standard_OStream
    :type s1: OCC.wrapper.TopAbs.TopAbs_State
    :type s2: OCC.wrapper.TopAbs.TopAbs_State
    :type b: bool

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_GTopo_DumpSSB(*args)

class TopOpeBRepBuild_WireEdgeSet(TopOpeBRepBuild_ShapeSet):
    """
    a bound is a wire, a boundelement is an edge.
    The ShapeSet stores :
    - a list of wire (bounds),
    - a list of edge (boundelements) to start reconstructions,
    - a map of vertex giving the list of edge incident to a vertex.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopOpeBRepBuild_WireEdgeSet self, TopoDS_Shape F, Standard_Address const Addr=None) -> TopOpeBRepBuild_WireEdgeSet

        Creates a WireEdgeSet to build edges connected by vertices
        on face F. Edges of the WireEdgeSet must have a representation
        on surface of face F.

        :type F: OCC.wrapper.TopoDS.TopoDS_Shape
        :type Addr: OCC.wrapper.Standard.Standard_Address

        """
        this = _TopOpeBRepBuild.new_TopOpeBRepBuild_WireEdgeSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Face(self, *args):
        """
        value of field myFace

        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeSet_Face(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def AddShape(self, *args):
        """
        AddShape(TopOpeBRepBuild_WireEdgeSet self, TopoDS_Shape S)

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeSet_AddShape(self, *args)


    def AddStartElement(self, *args):
        """
        AddStartElement(TopOpeBRepBuild_WireEdgeSet self, TopoDS_Shape S)

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeSet_AddStartElement(self, *args)


    def AddElement(self, *args):
        """
        AddElement(TopOpeBRepBuild_WireEdgeSet self, TopoDS_Shape S)

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeSet_AddElement(self, *args)


    def InitNeighbours(self, *args):
        """
        InitNeighbours(TopOpeBRepBuild_WireEdgeSet self, TopoDS_Shape E)

        :type E: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeSet_InitNeighbours(self, *args)


    def FindNeighbours(self, *args):
        """
        FindNeighbours(TopOpeBRepBuild_WireEdgeSet self)

        Build the list of neighbour edges of edge myCurrentShape
        Initialize iterator of neighbour edges to edge myCurrentShape


        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeSet_FindNeighbours(self, *args)


    def MakeNeighboursList(self, *args):
        """
        :type E: OCC.wrapper.TopoDS.TopoDS_Shape
        :type V: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeSet_MakeNeighboursList(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsUVISO(*args):
        """
        IsUVISO(TopoDS_Edge E, TopoDS_Face F)

        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :type F: OCC.wrapper.TopoDS.TopoDS_Face
        :type uiso: bool
        :type viso: bool

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeSet_IsUVISO(*args)

    IsUVISO = staticmethod(IsUVISO)

    def DumpSS(self, *args):
        """DumpSS(TopOpeBRepBuild_WireEdgeSet self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeSet_DumpSS(self, *args)


    def SName(self, *args):
        """
        SName(TopOpeBRepBuild_WireEdgeSet self, TopoDS_Shape S, TCollection_AsciiString sb, TCollection_AsciiString sa) -> TCollection_AsciiString
        SName(TopOpeBRepBuild_WireEdgeSet self, NCollection_List_TopoDS_Shape S, TCollection_AsciiString sb, TCollection_AsciiString sa) -> TCollection_AsciiString

        :type S: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type sb: OCC.wrapper.TCollection.TCollection_AsciiString
        :type sa: OCC.wrapper.TCollection.TCollection_AsciiString
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeSet_SName(self, *args)


    def SNameori(self, *args):
        """
        SNameori(TopOpeBRepBuild_WireEdgeSet self, TopoDS_Shape S, TCollection_AsciiString sb, TCollection_AsciiString sa) -> TCollection_AsciiString
        SNameori(TopOpeBRepBuild_WireEdgeSet self, NCollection_List_TopoDS_Shape S, TCollection_AsciiString sb, TCollection_AsciiString sa) -> TCollection_AsciiString

        :type S: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type sb: OCC.wrapper.TCollection.TCollection_AsciiString
        :type sa: OCC.wrapper.TCollection.TCollection_AsciiString
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeSet_SNameori(self, *args)

    __swig_destroy__ = _TopOpeBRepBuild.delete_TopOpeBRepBuild_WireEdgeSet
TopOpeBRepBuild_WireEdgeSet_swigregister = _TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeSet_swigregister
TopOpeBRepBuild_WireEdgeSet_swigregister(TopOpeBRepBuild_WireEdgeSet)

def TopOpeBRepBuild_WireEdgeSet_IsUVISO(*args):
    """
    TopOpeBRepBuild_WireEdgeSet_IsUVISO(TopoDS_Edge E, TopoDS_Face F)

    :type E: OCC.wrapper.TopoDS.TopoDS_Edge
    :type F: OCC.wrapper.TopoDS.TopoDS_Face
    :type uiso: bool
    :type viso: bool

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_WireEdgeSet_IsUVISO(*args)

class TopOpeBRepBuild_ShellToSolid(object):
    """This class builds solids from a set of shells SSh and a solid F."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopOpeBRepBuild_ShellToSolid self) -> TopOpeBRepBuild_ShellToSolid

        This class builds solids from a set of shells SSh and a solid F.
        """
        this = _TopOpeBRepBuild.new_TopOpeBRepBuild_ShellToSolid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """Init(TopOpeBRepBuild_ShellToSolid self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShellToSolid_Init(self, *args)


    def AddShell(self, *args):
        """
        AddShell(TopOpeBRepBuild_ShellToSolid self, TopoDS_Shell Sh)

        :type Sh: OCC.wrapper.TopoDS.TopoDS_Shell

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShellToSolid_AddShell(self, *args)


    def MakeSolids(self, *args):
        """
        MakeSolids(TopOpeBRepBuild_ShellToSolid self, TopoDS_Solid So, NCollection_List_TopoDS_Shape LSo)

        :type So: OCC.wrapper.TopoDS.TopoDS_Solid
        :type LSo: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_ShellToSolid_MakeSolids(self, *args)

    __swig_destroy__ = _TopOpeBRepBuild.delete_TopOpeBRepBuild_ShellToSolid
TopOpeBRepBuild_ShellToSolid_swigregister = _TopOpeBRepBuild.TopOpeBRepBuild_ShellToSolid_swigregister
TopOpeBRepBuild_ShellToSolid_swigregister(TopOpeBRepBuild_ShellToSolid)

class TopOpeBRepBuild_PaveClassifier(TopOpeBRepBuild_LoopClassifier):
    """
    This class compares vertices on an edge.

    A vertex V1 is inside a vertex V2 if V1 is on the
    part of the curve defined by V2.

    If V2 is FORWARD V1 must be after V2 on the curve.
    If V2 is REVERSED V1 must be before V2 on the curve.
    If V2 is INTERNAL V1 is always inside.
    If V2 is EXTERNAL V1 is never inside.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopOpeBRepBuild_PaveClassifier self, TopoDS_Shape E) -> TopOpeBRepBuild_PaveClassifier

        Create a Pave classifier to compare vertices on edge <E>.

        :type E: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        this = _TopOpeBRepBuild.new_TopOpeBRepBuild_PaveClassifier(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Compare(self, *args):
        """
        Compare(TopOpeBRepBuild_PaveClassifier self, Handle_TopOpeBRepBuild_Loop L1, Handle_TopOpeBRepBuild_Loop L2) -> TopAbs_State

        Returns state of vertex <L1> compared with <L2>.

        :type L1: OCC.wrapper.TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop
        :type L2: OCC.wrapper.TopOpeBRepBuild.Handle_TopOpeBRepBuild_Loop
        :rtype: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_PaveClassifier_Compare(self, *args)


    def SetFirstParameter(self, *args):
        """
        SetFirstParameter(TopOpeBRepBuild_PaveClassifier self, Standard_Real const P)

        :type P: float

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_PaveClassifier_SetFirstParameter(self, *args)


    def ClosedVertices(self, *args):
        """
        ClosedVertices(TopOpeBRepBuild_PaveClassifier self, Standard_Boolean const B)

        :type B: bool

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_PaveClassifier_ClosedVertices(self, *args)


    def AdjustCase(*args):
        """
        AdjustCase(Standard_Real const p1, TopAbs_Orientation const o, Standard_Real const first, Standard_Real const period, Standard_Real const tol) -> Standard_Real

        :type p1: float
        :type o: OCC.wrapper.TopAbs.TopAbs_Orientation
        :type first: float
        :type period: float
        :type tol: float
        :type cas: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_PaveClassifier_AdjustCase(*args)

    AdjustCase = staticmethod(AdjustCase)
    __swig_destroy__ = _TopOpeBRepBuild.delete_TopOpeBRepBuild_PaveClassifier
TopOpeBRepBuild_PaveClassifier_swigregister = _TopOpeBRepBuild.TopOpeBRepBuild_PaveClassifier_swigregister
TopOpeBRepBuild_PaveClassifier_swigregister(TopOpeBRepBuild_PaveClassifier)

def TopOpeBRepBuild_PaveClassifier_AdjustCase(*args):
    """
    TopOpeBRepBuild_PaveClassifier_AdjustCase(Standard_Real const p1, TopAbs_Orientation const o, Standard_Real const first, Standard_Real const period, Standard_Real const tol) -> Standard_Real

    :type p1: float
    :type o: OCC.wrapper.TopAbs.TopAbs_Orientation
    :type first: float
    :type period: float
    :type tol: float
    :type cas: int
    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _TopOpeBRepBuild.TopOpeBRepBuild_PaveClassifier_AdjustCase(*args)

class TopOpeBRepBuild_SolidBuilder(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopOpeBRepBuild_SolidBuilder self) -> TopOpeBRepBuild_SolidBuilder
        __init__(TopOpeBRepBuild_SolidBuilder self, TopOpeBRepBuild_ShellFaceSet FS, Standard_Boolean const ForceClass) -> TopOpeBRepBuild_SolidBuilder

        Create a SolidBuilder to build the areas on
        the shapes (shells, blocks of faces) described by <LS>.

        :type FS: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_ShellFaceSet
        :type ForceClass: bool

        """
        this = _TopOpeBRepBuild.new_TopOpeBRepBuild_SolidBuilder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def InitSolidBuilder(self, *args):
        """
        InitSolidBuilder(TopOpeBRepBuild_SolidBuilder self, TopOpeBRepBuild_ShellFaceSet FS, Standard_Boolean const ForceClass)

        :type FS: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_ShellFaceSet
        :type ForceClass: bool

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_SolidBuilder_InitSolidBuilder(self, *args)


    def InitSolid(self, *args):
        """
        InitSolid(TopOpeBRepBuild_SolidBuilder self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_SolidBuilder_InitSolid(self, *args)


    def MoreSolid(self, *args):
        """
        MoreSolid(TopOpeBRepBuild_SolidBuilder self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_SolidBuilder_MoreSolid(self, *args)


    def NextSolid(self, *args):
        """NextSolid(TopOpeBRepBuild_SolidBuilder self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_SolidBuilder_NextSolid(self, *args)


    def InitShell(self, *args):
        """
        InitShell(TopOpeBRepBuild_SolidBuilder self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_SolidBuilder_InitShell(self, *args)


    def MoreShell(self, *args):
        """
        MoreShell(TopOpeBRepBuild_SolidBuilder self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_SolidBuilder_MoreShell(self, *args)


    def NextShell(self, *args):
        """NextShell(TopOpeBRepBuild_SolidBuilder self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_SolidBuilder_NextShell(self, *args)


    def IsOldShell(self, *args):
        """
        IsOldShell(TopOpeBRepBuild_SolidBuilder self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_SolidBuilder_IsOldShell(self, *args)


    def OldShell(self, *args):
        """
        Returns current shell
        This shell may be :
        * an old shell OldShell(), which has not been reconstructed;
        * a new shell made of faces described by ...NewFace() methods.

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_SolidBuilder_OldShell(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def InitFace(self, *args):
        """
        InitFace(TopOpeBRepBuild_SolidBuilder self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_SolidBuilder_InitFace(self, *args)


    def MoreFace(self, *args):
        """
        MoreFace(TopOpeBRepBuild_SolidBuilder self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_SolidBuilder_MoreFace(self, *args)


    def NextFace(self, *args):
        """NextFace(TopOpeBRepBuild_SolidBuilder self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_SolidBuilder_NextFace(self, *args)


    def Face(self, *args):
        """
        Returns current new face of current new shell.

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_SolidBuilder_Face(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TopOpeBRepBuild.delete_TopOpeBRepBuild_SolidBuilder
TopOpeBRepBuild_SolidBuilder_swigregister = _TopOpeBRepBuild.TopOpeBRepBuild_SolidBuilder_swigregister
TopOpeBRepBuild_SolidBuilder_swigregister(TopOpeBRepBuild_SolidBuilder)

class TopOpeBRepBuild_EdgeBuilder(TopOpeBRepBuild_Area1dBuilder):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopOpeBRepBuild_EdgeBuilder self) -> TopOpeBRepBuild_EdgeBuilder
        __init__(TopOpeBRepBuild_EdgeBuilder self, TopOpeBRepBuild_PaveSet LS, TopOpeBRepBuild_PaveClassifier LC, Standard_Boolean const ForceClass) -> TopOpeBRepBuild_EdgeBuilder

        Creates a EdgeBuilder to find the areas of
        the shapes described by <LS> using the classifier <LC>.

        :type LS: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_PaveSet
        :type LC: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_PaveClassifier
        :type ForceClass: bool

        """
        this = _TopOpeBRepBuild.new_TopOpeBRepBuild_EdgeBuilder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def InitEdgeBuilder(self, *args):
        """
        InitEdgeBuilder(TopOpeBRepBuild_EdgeBuilder self, TopOpeBRepBuild_LoopSet LS, TopOpeBRepBuild_LoopClassifier LC, Standard_Boolean const ForceClass)

        :type LS: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_LoopSet
        :type LC: OCC.wrapper.TopOpeBRepBuild.TopOpeBRepBuild_LoopClassifier
        :type ForceClass: bool

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_EdgeBuilder_InitEdgeBuilder(self, *args)


    def InitEdge(self, *args):
        """InitEdge(TopOpeBRepBuild_EdgeBuilder self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_EdgeBuilder_InitEdge(self, *args)


    def MoreEdge(self, *args):
        """
        MoreEdge(TopOpeBRepBuild_EdgeBuilder self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_EdgeBuilder_MoreEdge(self, *args)


    def NextEdge(self, *args):
        """NextEdge(TopOpeBRepBuild_EdgeBuilder self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_EdgeBuilder_NextEdge(self, *args)


    def InitVertex(self, *args):
        """InitVertex(TopOpeBRepBuild_EdgeBuilder self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_EdgeBuilder_InitVertex(self, *args)


    def MoreVertex(self, *args):
        """
        MoreVertex(TopOpeBRepBuild_EdgeBuilder self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_EdgeBuilder_MoreVertex(self, *args)


    def NextVertex(self, *args):
        """NextVertex(TopOpeBRepBuild_EdgeBuilder self)"""
        return _TopOpeBRepBuild.TopOpeBRepBuild_EdgeBuilder_NextVertex(self, *args)


    def Vertex(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _TopOpeBRepBuild.TopOpeBRepBuild_EdgeBuilder_Vertex(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Parameter(self, *args):
        """
        Parameter(TopOpeBRepBuild_EdgeBuilder self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _TopOpeBRepBuild.TopOpeBRepBuild_EdgeBuilder_Parameter(self, *args)

    __swig_destroy__ = _TopOpeBRepBuild.delete_TopOpeBRepBuild_EdgeBuilder
TopOpeBRepBuild_EdgeBuilder_swigregister = _TopOpeBRepBuild.TopOpeBRepBuild_EdgeBuilder_swigregister
TopOpeBRepBuild_EdgeBuilder_swigregister(TopOpeBRepBuild_EdgeBuilder)

class NCollection_List_TopOpeBRepBuild_ListOfLoop_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _TopOpeBRepBuild.new_NCollection_List_TopOpeBRepBuild_ListOfLoop_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TopOpeBRepBuild.delete_NCollection_List_TopOpeBRepBuild_ListOfLoop_IteratorHelper

    def __next__(self):
        return _TopOpeBRepBuild.NCollection_List_TopOpeBRepBuild_ListOfLoop_IteratorHelper___next__(self)
NCollection_List_TopOpeBRepBuild_ListOfLoop_IteratorHelper_swigregister = _TopOpeBRepBuild.NCollection_List_TopOpeBRepBuild_ListOfLoop_IteratorHelper_swigregister
NCollection_List_TopOpeBRepBuild_ListOfLoop_IteratorHelper_swigregister(NCollection_List_TopOpeBRepBuild_ListOfLoop_IteratorHelper)


try:
	TopOpeBRepBuild_ListOfListOfLoop = NCollection_List_TopOpeBRepBuild_ListOfLoop
except NameError:
	pass # does not exist, probably ignored



