# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_AdvApprox')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_AdvApprox')
    _AdvApprox = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_AdvApprox', [dirname(__file__)])
        except ImportError:
            import _AdvApprox
            return _AdvApprox
        try:
            _mod = imp.load_module('_AdvApprox', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _AdvApprox = swig_import_helper()
    del swig_import_helper
else:
    import _AdvApprox
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AdvApprox.delete_SwigPyIterator

    def value(self):
        return _AdvApprox.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _AdvApprox.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _AdvApprox.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _AdvApprox.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _AdvApprox.SwigPyIterator_equal(self, x)

    def copy(self):
        return _AdvApprox.SwigPyIterator_copy(self)

    def next(self):
        return _AdvApprox.SwigPyIterator_next(self)

    def __next__(self):
        return _AdvApprox.SwigPyIterator___next__(self)

    def previous(self):
        return _AdvApprox.SwigPyIterator_previous(self)

    def advance(self, n):
        return _AdvApprox.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _AdvApprox.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _AdvApprox.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _AdvApprox.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _AdvApprox.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _AdvApprox.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _AdvApprox.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _AdvApprox.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _AdvApprox.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_AdvApprox.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _AdvApprox.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _AdvApprox.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AdvApprox.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _AdvApprox.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _AdvApprox.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _AdvApprox.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _AdvApprox.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_AdvApprox.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _AdvApprox.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _AdvApprox.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AdvApprox.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _AdvApprox.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _AdvApprox.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _AdvApprox.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _AdvApprox.ptr_to_number(item)
ptr_to_number = _AdvApprox.ptr_to_number

def HashCode(*args):
    return _AdvApprox.HashCode(*args)
HashCode = _AdvApprox.HashCode

def ptr_equal(a, b):
    return _AdvApprox.ptr_equal(a, b)
ptr_equal = _AdvApprox.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import PLib
else:
    import PLib
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import math
else:
    import math
del _swig_python_version_info
class AdvApprox_Cutting(object):
    """to choose the way of cutting in approximation"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Value(self, *args):
        """
        Value(AdvApprox_Cutting self, Standard_Real const a, Standard_Real const b) -> Standard_Boolean

        :type a: float
        :type b: float
        :type cuttingvalue: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _AdvApprox.AdvApprox_Cutting_Value(self, *args)

    __swig_destroy__ = _AdvApprox.delete_AdvApprox_Cutting
AdvApprox_Cutting_swigregister = _AdvApprox.AdvApprox_Cutting_swigregister
AdvApprox_Cutting_swigregister(AdvApprox_Cutting)

class AdvApprox_PrefAndRec(AdvApprox_Cutting):
    """
    inherits class Cutting; contains a list of preferential points (pi)i
    and a list of Recommended points used in cutting management.
    if Cutting is necessary in [a,b], we cut at the di nearest from (a+b)/2
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(AdvApprox_PrefAndRec self, NCollection_Array1_Standard_Real RecomendedCut, NCollection_Array1_Standard_Real PrefferedCut, Standard_Real const Weight=5) -> AdvApprox_PrefAndRec

        :type RecomendedCut: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type PrefferedCut: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type Weight: float

        """
        this = _AdvApprox.new_AdvApprox_PrefAndRec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        Value(AdvApprox_PrefAndRec self, Standard_Real const a, Standard_Real const b) -> Standard_Boolean

        cuting value is
        - the recommended point nerest of (a+b)/2
        if pi is in ]a,b[ or else
        -  the preferential point nearest of (a+b) / 2
        if pi is in ](r*a+b)/(r+1) , (a+r*b)/(r+1)[ where r = Weight
        -  or (a+b)/2 else.

        :type a: float
        :type b: float
        :type cuttingvalue: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _AdvApprox.AdvApprox_PrefAndRec_Value(self, *args)

    __swig_destroy__ = _AdvApprox.delete_AdvApprox_PrefAndRec
AdvApprox_PrefAndRec_swigregister = _AdvApprox.AdvApprox_PrefAndRec_swigregister
AdvApprox_PrefAndRec_swigregister(AdvApprox_PrefAndRec)

class AdvApprox_DichoCutting(AdvApprox_Cutting):
    """if Cutting is necessary in [a,b], we cut at (a+b) / 2."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(AdvApprox_DichoCutting self) -> AdvApprox_DichoCutting

        if Cutting is necessary in [a,b], we cut at (a+b) / 2.
        """
        this = _AdvApprox.new_AdvApprox_DichoCutting(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        Value(AdvApprox_DichoCutting self, Standard_Real const a, Standard_Real const b) -> Standard_Boolean

        :type a: float
        :type b: float
        :type cuttingvalue: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _AdvApprox.AdvApprox_DichoCutting_Value(self, *args)

    __swig_destroy__ = _AdvApprox.delete_AdvApprox_DichoCutting
AdvApprox_DichoCutting_swigregister = _AdvApprox.AdvApprox_DichoCutting_swigregister
AdvApprox_DichoCutting_swigregister(AdvApprox_DichoCutting)

class AdvApprox_ApproxAFunction(object):
    """this approximate a given function"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(AdvApprox_ApproxAFunction self, Standard_Integer const Num1DSS, Standard_Integer const Num2DSS, Standard_Integer const Num3DSS, Handle_TColStd_HArray1OfReal OneDTol, Handle_TColStd_HArray1OfReal TwoDTol, Handle_TColStd_HArray1OfReal ThreeDTol, Standard_Real const First, Standard_Real const Last, GeomAbs_Shape const Continuity, Standard_Integer const MaxDeg, Standard_Integer const MaxSeg, AdvApprox_EvaluatorFunction Func) -> AdvApprox_ApproxAFunction
        __init__(AdvApprox_ApproxAFunction self, Standard_Integer const Num1DSS, Standard_Integer const Num2DSS, Standard_Integer const Num3DSS, Handle_TColStd_HArray1OfReal OneDTol, Handle_TColStd_HArray1OfReal TwoDTol, Handle_TColStd_HArray1OfReal ThreeDTol, Standard_Real const First, Standard_Real const Last, GeomAbs_Shape const Continuity, Standard_Integer const MaxDeg, Standard_Integer const MaxSeg, AdvApprox_EvaluatorFunction Func, AdvApprox_Cutting CutTool) -> AdvApprox_ApproxAFunction

        Approximation with user methode of cutting

        :type Num1DSS: int
        :type Num2DSS: int
        :type Num3DSS: int
        :type OneDTol: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type TwoDTol: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type ThreeDTol: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type First: float
        :type Last: float
        :type Continuity: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :type MaxDeg: int
        :type MaxSeg: int
        :type Func: OCC.wrapper.AdvApprox.AdvApprox_EvaluatorFunction
        :type CutTool: OCC.wrapper.AdvApprox.AdvApprox_Cutting

        """
        this = _AdvApprox.new_AdvApprox_ApproxAFunction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Approximation(*args):
        """
        Approximation(Standard_Integer const TotalDimension, Standard_Integer const TotalNumSS, NCollection_Array1_Standard_Integer LocalDimension, Standard_Real const First, Standard_Real const Last, AdvApprox_EvaluatorFunction Evaluator, AdvApprox_Cutting CutTool, Standard_Integer const ContinuityOrder, Standard_Integer const NumMaxCoeffs, Standard_Integer const MaxSegments, NCollection_Array1_Standard_Real TolerancesArray, Standard_Integer const code_precis, NCollection_Array1_Standard_Integer NumCoeffPerCurveArray, NCollection_Array1_Standard_Real LocalCoefficientArray, NCollection_Array1_Standard_Real IntervalsArray, NCollection_Array1_Standard_Real ErrorMaxArray, NCollection_Array1_Standard_Real AverageErrorArray)

        :type TotalDimension: int
        :type TotalNumSS: int
        :type LocalDimension: OCC.wrapper.TColStd.TColStd_Array1OfInteger
        :type First: float
        :type Last: float
        :type Evaluator: OCC.wrapper.AdvApprox.AdvApprox_EvaluatorFunction
        :type CutTool: OCC.wrapper.AdvApprox.AdvApprox_Cutting
        :type ContinuityOrder: int
        :type NumMaxCoeffs: int
        :type MaxSegments: int
        :type TolerancesArray: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type code_precis: int
        :type NumCurves: int
        :type NumCoeffPerCurveArray: OCC.wrapper.TColStd.TColStd_Array1OfInteger
        :type LocalCoefficientArray: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type IntervalsArray: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type ErrorMaxArray: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type AverageErrorArray: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type ErrorCode: int

        """
        return _AdvApprox.AdvApprox_ApproxAFunction_Approximation(*args)

    Approximation = staticmethod(Approximation)

    def IsDone(self, *args):
        """
        IsDone(AdvApprox_ApproxAFunction self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _AdvApprox.AdvApprox_ApproxAFunction_IsDone(self, *args)


    def HasResult(self, *args):
        """
        HasResult(AdvApprox_ApproxAFunction self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _AdvApprox.AdvApprox_ApproxAFunction_HasResult(self, *args)


    def NbPoles(self, *args):
        """
        NbPoles(AdvApprox_ApproxAFunction self) -> Standard_Integer

        as the name says

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApprox.AdvApprox_ApproxAFunction_NbPoles(self, *args)


    def Poles1d(self, *args):
        """
        Poles1d(AdvApprox_ApproxAFunction self) -> Handle_TColStd_HArray2OfReal
        Poles1d(AdvApprox_ApproxAFunction self, Standard_Integer const Index, NCollection_Array1_Standard_Real P)

        returns the poles at Index from the 1d subspace

        :type Index: int
        :type P: OCC.wrapper.TColStd.TColStd_Array1OfReal

        """
        return _AdvApprox.AdvApprox_ApproxAFunction_Poles1d(self, *args)


    def Poles2d(self, *args):
        """
        Poles2d(AdvApprox_ApproxAFunction self) -> Handle_TColgp_HArray2OfPnt2d
        Poles2d(AdvApprox_ApproxAFunction self, Standard_Integer const Index, NCollection_Array1_gp_Pnt2d P)

        returns the poles at Index from the 2d subspace

        :type Index: int
        :type P: OCC.wrapper.TColgp.TColgp_Array1OfPnt2d

        """
        return _AdvApprox.AdvApprox_ApproxAFunction_Poles2d(self, *args)


    def Poles(self, *args):
        """
        Poles(AdvApprox_ApproxAFunction self) -> Handle_TColgp_HArray2OfPnt
        Poles(AdvApprox_ApproxAFunction self, Standard_Integer const Index, NCollection_Array1_gp_Pnt P)

        returns the poles at Index from the 3d subspace

        :type Index: int
        :type P: OCC.wrapper.TColgp.TColgp_Array1OfPnt

        """
        return _AdvApprox.AdvApprox_ApproxAFunction_Poles(self, *args)


    def Degree(self, *args):
        """
        Degree(AdvApprox_ApproxAFunction self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApprox.AdvApprox_ApproxAFunction_Degree(self, *args)


    def NbKnots(self, *args):
        """
        NbKnots(AdvApprox_ApproxAFunction self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApprox.AdvApprox_ApproxAFunction_NbKnots(self, *args)


    def NumSubSpaces(self, *args):
        """
        NumSubSpaces(AdvApprox_ApproxAFunction self, Standard_Integer const Dimension) -> Standard_Integer

        :type Dimension: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApprox.AdvApprox_ApproxAFunction_NumSubSpaces(self, *args)


    def Knots(self, *args):
        """
        Knots(AdvApprox_ApproxAFunction self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _AdvApprox.AdvApprox_ApproxAFunction_Knots(self, *args)


    def Multiplicities(self, *args):
        """
        Multiplicities(AdvApprox_ApproxAFunction self) -> Handle_TColStd_HArray1OfInteger

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _AdvApprox.AdvApprox_ApproxAFunction_Multiplicities(self, *args)


    def MaxError(self, *args):
        """
        MaxError(AdvApprox_ApproxAFunction self, Standard_Integer const Dimension) -> Handle_TColStd_HArray1OfReal
        MaxError(AdvApprox_ApproxAFunction self, Standard_Integer const Dimension, Standard_Integer const Index) -> Standard_Real

        :type Dimension: int
        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _AdvApprox.AdvApprox_ApproxAFunction_MaxError(self, *args)


    def AverageError(self, *args):
        """
        AverageError(AdvApprox_ApproxAFunction self, Standard_Integer const Dimension) -> Handle_TColStd_HArray1OfReal
        AverageError(AdvApprox_ApproxAFunction self, Standard_Integer const Dimension, Standard_Integer const Index) -> Standard_Real

        :type Dimension: int
        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _AdvApprox.AdvApprox_ApproxAFunction_AverageError(self, *args)


    def Dump(self, *args):
        """
        Dump(AdvApprox_ApproxAFunction self, Standard_OStream & o)

        diplay information on approximation.

        :type o: OCC.wrapper.Standard.Standard_OStream

        """
        return _AdvApprox.AdvApprox_ApproxAFunction_Dump(self, *args)

    __swig_destroy__ = _AdvApprox.delete_AdvApprox_ApproxAFunction
AdvApprox_ApproxAFunction_swigregister = _AdvApprox.AdvApprox_ApproxAFunction_swigregister
AdvApprox_ApproxAFunction_swigregister(AdvApprox_ApproxAFunction)

def AdvApprox_ApproxAFunction_Approximation(*args):
    """
    AdvApprox_ApproxAFunction_Approximation(Standard_Integer const TotalDimension, Standard_Integer const TotalNumSS, NCollection_Array1_Standard_Integer LocalDimension, Standard_Real const First, Standard_Real const Last, AdvApprox_EvaluatorFunction Evaluator, AdvApprox_Cutting CutTool, Standard_Integer const ContinuityOrder, Standard_Integer const NumMaxCoeffs, Standard_Integer const MaxSegments, NCollection_Array1_Standard_Real TolerancesArray, Standard_Integer const code_precis, NCollection_Array1_Standard_Integer NumCoeffPerCurveArray, NCollection_Array1_Standard_Real LocalCoefficientArray, NCollection_Array1_Standard_Real IntervalsArray, NCollection_Array1_Standard_Real ErrorMaxArray, NCollection_Array1_Standard_Real AverageErrorArray)

    :type TotalDimension: int
    :type TotalNumSS: int
    :type LocalDimension: OCC.wrapper.TColStd.TColStd_Array1OfInteger
    :type First: float
    :type Last: float
    :type Evaluator: OCC.wrapper.AdvApprox.AdvApprox_EvaluatorFunction
    :type CutTool: OCC.wrapper.AdvApprox.AdvApprox_Cutting
    :type ContinuityOrder: int
    :type NumMaxCoeffs: int
    :type MaxSegments: int
    :type TolerancesArray: OCC.wrapper.TColStd.TColStd_Array1OfReal
    :type code_precis: int
    :type NumCurves: int
    :type NumCoeffPerCurveArray: OCC.wrapper.TColStd.TColStd_Array1OfInteger
    :type LocalCoefficientArray: OCC.wrapper.TColStd.TColStd_Array1OfReal
    :type IntervalsArray: OCC.wrapper.TColStd.TColStd_Array1OfReal
    :type ErrorMaxArray: OCC.wrapper.TColStd.TColStd_Array1OfReal
    :type AverageErrorArray: OCC.wrapper.TColStd.TColStd_Array1OfReal
    :type ErrorCode: int

    """
    return _AdvApprox.AdvApprox_ApproxAFunction_Approximation(*args)

class AdvApprox_SimpleApprox(object):
    """
    Approximate  a function on   an intervall [First,Last]
    The result  is  a simple  polynomial  whose  degree is  as low as
    possible  to   satisfy  the required  tolerance  and  the
    maximum degree.  The maximum  error and the averrage error
    resulting from  approximating the function by the polynomial are computed
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(AdvApprox_SimpleApprox self, Standard_Integer const TotalDimension, Standard_Integer const TotalNumSS, GeomAbs_Shape const Continuity, Standard_Integer const WorkDegree, Standard_Integer const NbGaussPoints, Handle_PLib_JacobiPolynomial JacobiBase, AdvApprox_EvaluatorFunction Func) -> AdvApprox_SimpleApprox

        :type TotalDimension: int
        :type TotalNumSS: int
        :type Continuity: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :type WorkDegree: int
        :type NbGaussPoints: int
        :type JacobiBase: OCC.wrapper.PLib.Handle_PLib_JacobiPolynomial
        :type Func: OCC.wrapper.AdvApprox.AdvApprox_EvaluatorFunction

        """
        this = _AdvApprox.new_AdvApprox_SimpleApprox(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Perform(self, *args):
        """
        Perform(AdvApprox_SimpleApprox self, NCollection_Array1_Standard_Integer LocalDimension, NCollection_Array1_Standard_Real LocalTolerancesArray, Standard_Real const First, Standard_Real const Last, Standard_Integer const MaxDegree)

        Constructs approximator tool.

        Warning:
        the Func should be valid reference to object of type
        inherited from class EvaluatorFunction from Approx
        with life time longer than that of the approximator tool;

        :type LocalDimension: OCC.wrapper.TColStd.TColStd_Array1OfInteger
        :type LocalTolerancesArray: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type First: float
        :type Last: float
        :type MaxDegree: int

        """
        return _AdvApprox.AdvApprox_SimpleApprox_Perform(self, *args)


    def IsDone(self, *args):
        """
        IsDone(AdvApprox_SimpleApprox self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _AdvApprox.AdvApprox_SimpleApprox_IsDone(self, *args)


    def Degree(self, *args):
        """
        Degree(AdvApprox_SimpleApprox self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AdvApprox.AdvApprox_SimpleApprox_Degree(self, *args)


    def Coefficients(self, *args):
        """
        Coefficients(AdvApprox_SimpleApprox self) -> Handle_TColStd_HArray1OfReal

        returns the coefficients in the Jacobi Base

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _AdvApprox.AdvApprox_SimpleApprox_Coefficients(self, *args)


    def FirstConstr(self, *args):
        """
        FirstConstr(AdvApprox_SimpleApprox self) -> Handle_TColStd_HArray2OfReal

        returns the constraints at First

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _AdvApprox.AdvApprox_SimpleApprox_FirstConstr(self, *args)


    def LastConstr(self, *args):
        """
        LastConstr(AdvApprox_SimpleApprox self) -> Handle_TColStd_HArray2OfReal

        returns the constraints at Last

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _AdvApprox.AdvApprox_SimpleApprox_LastConstr(self, *args)


    def SomTab(self, *args):
        """
        SomTab(AdvApprox_SimpleApprox self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _AdvApprox.AdvApprox_SimpleApprox_SomTab(self, *args)


    def DifTab(self, *args):
        """
        DifTab(AdvApprox_SimpleApprox self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _AdvApprox.AdvApprox_SimpleApprox_DifTab(self, *args)


    def MaxError(self, *args):
        """
        MaxError(AdvApprox_SimpleApprox self, Standard_Integer const Index) -> Standard_Real

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _AdvApprox.AdvApprox_SimpleApprox_MaxError(self, *args)


    def AverageError(self, *args):
        """
        AverageError(AdvApprox_SimpleApprox self, Standard_Integer const Index) -> Standard_Real

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _AdvApprox.AdvApprox_SimpleApprox_AverageError(self, *args)


    def Dump(self, *args):
        """
        Dump(AdvApprox_SimpleApprox self, Standard_OStream & o)

        display information on approximation

        :type o: OCC.wrapper.Standard.Standard_OStream

        """
        return _AdvApprox.AdvApprox_SimpleApprox_Dump(self, *args)

    __swig_destroy__ = _AdvApprox.delete_AdvApprox_SimpleApprox
AdvApprox_SimpleApprox_swigregister = _AdvApprox.AdvApprox_SimpleApprox_swigregister
AdvApprox_SimpleApprox_swigregister(AdvApprox_SimpleApprox)

class AdvApprox_PrefCutting(AdvApprox_Cutting):
    """
    inherits class Cutting; contains a list of preferential points (di)i
    if Cutting is necessary in [a,b], we cut at the di nearest from (a+b)/2.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(AdvApprox_PrefCutting self, NCollection_Array1_Standard_Real CutPnts) -> AdvApprox_PrefCutting

        :type CutPnts: OCC.wrapper.TColStd.TColStd_Array1OfReal

        """
        this = _AdvApprox.new_AdvApprox_PrefCutting(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        Value(AdvApprox_PrefCutting self, Standard_Real const a, Standard_Real const b) -> Standard_Boolean

        :type a: float
        :type b: float
        :type cuttingvalue: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _AdvApprox.AdvApprox_PrefCutting_Value(self, *args)

    __swig_destroy__ = _AdvApprox.delete_AdvApprox_PrefCutting
AdvApprox_PrefCutting_swigregister = _AdvApprox.AdvApprox_PrefCutting_swigregister
AdvApprox_PrefCutting_swigregister(AdvApprox_PrefCutting)

class AdvApprox_EvaluatorFunction(object):
    """
    Interface for a class implementing a function to be approximated
    by AdvApprox_ApproxAFunction
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Evaluate(self, *args):
        """
        Evaluate(AdvApprox_EvaluatorFunction self, Standard_Integer * Dimension, Standard_Real * StartEnd, Standard_Real * Parameter, Standard_Integer * DerivativeRequest, Standard_Real * Result, Standard_Integer * ErrorCode)

        Function evaluation method to be defined by descendant

        :type Dimension: int
        :type StartEnd: OCC.wrapper.Standard.Standard_Real [2]
        :type Parameter: float
        :type DerivativeRequest: int
        :type Result: float
        :type ErrorCode: int

        """
        return _AdvApprox.AdvApprox_EvaluatorFunction_Evaluate(self, *args)


    def __call__(self, *args):
        """
        __call__(AdvApprox_EvaluatorFunction self, Standard_Integer * Dimension, Standard_Real * StartEnd, Standard_Real * Parameter, Standard_Integer * DerivativeRequest, Standard_Real * Result, Standard_Integer * ErrorCode)

        Shortcut for function-call style usage

        :type Dimension: int
        :type StartEnd: OCC.wrapper.Standard.Standard_Real [2]
        :type Parameter: float
        :type DerivativeRequest: int
        :type Result: float
        :type ErrorCode: int

        """
        return _AdvApprox.AdvApprox_EvaluatorFunction___call__(self, *args)

    __swig_destroy__ = _AdvApprox.delete_AdvApprox_EvaluatorFunction
AdvApprox_EvaluatorFunction_swigregister = _AdvApprox.AdvApprox_EvaluatorFunction_swigregister
AdvApprox_EvaluatorFunction_swigregister(AdvApprox_EvaluatorFunction)



