# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_GeomProjLib')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_GeomProjLib')
    _GeomProjLib = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GeomProjLib', [dirname(__file__)])
        except ImportError:
            import _GeomProjLib
            return _GeomProjLib
        try:
            _mod = imp.load_module('_GeomProjLib', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _GeomProjLib = swig_import_helper()
    del swig_import_helper
else:
    import _GeomProjLib
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GeomProjLib.delete_SwigPyIterator

    def value(self):
        return _GeomProjLib.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _GeomProjLib.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _GeomProjLib.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _GeomProjLib.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _GeomProjLib.SwigPyIterator_equal(self, x)

    def copy(self):
        return _GeomProjLib.SwigPyIterator_copy(self)

    def next(self):
        return _GeomProjLib.SwigPyIterator_next(self)

    def __next__(self):
        return _GeomProjLib.SwigPyIterator___next__(self)

    def previous(self):
        return _GeomProjLib.SwigPyIterator_previous(self)

    def advance(self, n):
        return _GeomProjLib.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _GeomProjLib.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _GeomProjLib.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _GeomProjLib.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _GeomProjLib.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _GeomProjLib.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _GeomProjLib.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _GeomProjLib.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _GeomProjLib.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_GeomProjLib.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _GeomProjLib.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _GeomProjLib.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GeomProjLib.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _GeomProjLib.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _GeomProjLib.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _GeomProjLib.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _GeomProjLib.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_GeomProjLib.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _GeomProjLib.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _GeomProjLib.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GeomProjLib.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _GeomProjLib.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _GeomProjLib.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _GeomProjLib.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _GeomProjLib.ptr_to_number(item)
ptr_to_number = _GeomProjLib.ptr_to_number

def HashCode(*args):
    return _GeomProjLib.HashCode(*args)
HashCode = _GeomProjLib.HashCode

def ptr_equal(a, b):
    return _GeomProjLib.ptr_equal(a, b)
ptr_equal = _GeomProjLib.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
class GeomProjLib_(object):
    """Projection of a curve on a surface."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Curve2d(*args):
        """
        Curve2d(Handle_Geom_Curve C, Standard_Real const First, Standard_Real const Last, Handle_Geom_Surface S, Standard_Real const UFirst, Standard_Real const ULast, Standard_Real const VFirst, Standard_Real const VLast) -> Handle_Geom2d_Curve
        Curve2d(Handle_Geom_Curve C, Standard_Real const First, Standard_Real const Last, Handle_Geom_Surface S) -> Handle_Geom2d_Curve
        Curve2d(Handle_Geom_Curve C, Standard_Real const First, Standard_Real const Last, Handle_Geom_Surface S) -> Handle_Geom2d_Curve
        Curve2d(Handle_Geom_Curve C, Handle_Geom_Surface S) -> Handle_Geom2d_Curve
        Curve2d(Handle_Geom_Curve C, Handle_Geom_Surface S, Standard_Real const UDeb, Standard_Real const UFin, Standard_Real const VDeb, Standard_Real const VFin) -> Handle_Geom2d_Curve
        Curve2d(Handle_Geom_Curve C, Handle_Geom_Surface S, Standard_Real const UDeb, Standard_Real const UFin, Standard_Real const VDeb, Standard_Real const VFin) -> Handle_Geom2d_Curve

        gives  the  2d-curve  of  a  3d-curve lying   on a
        surface   ( uses   GeomProjLib_ProjectedCurve ).
        If the projection needs an approximation,
        Precision::PApproximation() is used.
        WARNING  :  if the   projection has  failed,  this
        method returns a null Handle.
        can expand a little the bounds of surface

        :type C: OCC.wrapper.Geom.Handle_Geom_Curve
        :type S: OCC.wrapper.Geom.Handle_Geom_Surface
        :type UDeb: float
        :type UFin: float
        :type VDeb: float
        :type VFin: float
        :type Tolerance: float
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _GeomProjLib.GeomProjLib__Curve2d(*args)

    Curve2d = staticmethod(Curve2d)

    def Project(*args):
        """
        Project(Handle_Geom_Curve C, Handle_Geom_Surface S) -> Handle_Geom_Curve

        Constructs   the  3d-curve  from the normal
        projection  of the  Curve <C> on  the surface <S>.
        WARNING : if the  projection has failes returns  a
        null Handle.

        :type C: OCC.wrapper.Geom.Handle_Geom_Curve
        :type S: OCC.wrapper.Geom.Handle_Geom_Surface
        :rtype: OCC.wrapper.Geom.Handle_Geom_Curve

        """
        return _GeomProjLib.GeomProjLib__Project(*args)

    Project = staticmethod(Project)

    def ProjectOnPlane(*args):
        """
        ProjectOnPlane(Handle_Geom_Curve Curve, Handle_Geom_Plane Plane, gp_Dir Dir, Standard_Boolean const KeepParametrization) -> Handle_Geom_Curve

        Constructs  the 3d-curves from the projection
        of the  curve  <Curve> on the  plane <Plane> along
        the direction <Dir>.
        If <KeepParametrization> is true, the parametrization
        of the Projected Curve <PC> will be  the same as  the
        parametrization of the initial curve <C>.
        It meens: proj(C(u)) = PC(u) for each u.
        Otherwize, the parametrization may change.

        :type Curve: OCC.wrapper.Geom.Handle_Geom_Curve
        :type Plane: OCC.wrapper.Geom.Handle_Geom_Plane
        :type Dir: OCC.wrapper.gp.gp_Dir
        :type KeepParametrization: bool
        :rtype: OCC.wrapper.Geom.Handle_Geom_Curve

        """
        return _GeomProjLib.GeomProjLib__ProjectOnPlane(*args)

    ProjectOnPlane = staticmethod(ProjectOnPlane)

    def __init__(self):
        """Projection of a curve on a surface."""
        this = _GeomProjLib.new_GeomProjLib_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GeomProjLib.delete_GeomProjLib_
GeomProjLib__swigregister = _GeomProjLib.GeomProjLib__swigregister
GeomProjLib__swigregister(GeomProjLib_)

def GeomProjLib__Curve2d(*args):
    """
    Curve2d(Handle_Geom_Curve C, Standard_Real const First, Standard_Real const Last, Handle_Geom_Surface S, Standard_Real const UFirst, Standard_Real const ULast, Standard_Real const VFirst, Standard_Real const VLast) -> Handle_Geom2d_Curve
    Curve2d(Handle_Geom_Curve C, Standard_Real const First, Standard_Real const Last, Handle_Geom_Surface S) -> Handle_Geom2d_Curve
    Curve2d(Handle_Geom_Curve C, Standard_Real const First, Standard_Real const Last, Handle_Geom_Surface S) -> Handle_Geom2d_Curve
    Curve2d(Handle_Geom_Curve C, Handle_Geom_Surface S) -> Handle_Geom2d_Curve
    Curve2d(Handle_Geom_Curve C, Handle_Geom_Surface S, Standard_Real const UDeb, Standard_Real const UFin, Standard_Real const VDeb, Standard_Real const VFin) -> Handle_Geom2d_Curve
    GeomProjLib__Curve2d(Handle_Geom_Curve C, Handle_Geom_Surface S, Standard_Real const UDeb, Standard_Real const UFin, Standard_Real const VDeb, Standard_Real const VFin) -> Handle_Geom2d_Curve

    gives  the  2d-curve  of  a  3d-curve lying   on a
    surface   ( uses   GeomProjLib_ProjectedCurve ).
    If the projection needs an approximation,
    Precision::PApproximation() is used.
    WARNING  :  if the   projection has  failed,  this
    method returns a null Handle.
    can expand a little the bounds of surface

    :type C: OCC.wrapper.Geom.Handle_Geom_Curve
    :type S: OCC.wrapper.Geom.Handle_Geom_Surface
    :type UDeb: float
    :type UFin: float
    :type VDeb: float
    :type VFin: float
    :type Tolerance: float
    :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

    """
    return _GeomProjLib.GeomProjLib__Curve2d(*args)

def GeomProjLib__Project(*args):
    """
    GeomProjLib__Project(Handle_Geom_Curve C, Handle_Geom_Surface S) -> Handle_Geom_Curve

    Constructs   the  3d-curve  from the normal
    projection  of the  Curve <C> on  the surface <S>.
    WARNING : if the  projection has failes returns  a
    null Handle.

    :type C: OCC.wrapper.Geom.Handle_Geom_Curve
    :type S: OCC.wrapper.Geom.Handle_Geom_Surface
    :rtype: OCC.wrapper.Geom.Handle_Geom_Curve

    """
    return _GeomProjLib.GeomProjLib__Project(*args)

def GeomProjLib__ProjectOnPlane(*args):
    """
    GeomProjLib__ProjectOnPlane(Handle_Geom_Curve Curve, Handle_Geom_Plane Plane, gp_Dir Dir, Standard_Boolean const KeepParametrization) -> Handle_Geom_Curve

    Constructs  the 3d-curves from the projection
    of the  curve  <Curve> on the  plane <Plane> along
    the direction <Dir>.
    If <KeepParametrization> is true, the parametrization
    of the Projected Curve <PC> will be  the same as  the
    parametrization of the initial curve <C>.
    It meens: proj(C(u)) = PC(u) for each u.
    Otherwize, the parametrization may change.

    :type Curve: OCC.wrapper.Geom.Handle_Geom_Curve
    :type Plane: OCC.wrapper.Geom.Handle_Geom_Plane
    :type Dir: OCC.wrapper.gp.gp_Dir
    :type KeepParametrization: bool
    :rtype: OCC.wrapper.Geom.Handle_Geom_Curve

    """
    return _GeomProjLib.GeomProjLib__ProjectOnPlane(*args)



