# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_LDOM')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_LDOM')
    _LDOM = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_LDOM', [dirname(__file__)])
        except ImportError:
            import _LDOM
            return _LDOM
        try:
            _mod = imp.load_module('_LDOM', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _LDOM = swig_import_helper()
    del swig_import_helper
else:
    import _LDOM
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _LDOM.delete_SwigPyIterator

    def value(self):
        return _LDOM.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _LDOM.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _LDOM.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _LDOM.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _LDOM.SwigPyIterator_equal(self, x)

    def copy(self):
        return _LDOM.SwigPyIterator_copy(self)

    def next(self):
        return _LDOM.SwigPyIterator_next(self)

    def __next__(self):
        return _LDOM.SwigPyIterator___next__(self)

    def previous(self):
        return _LDOM.SwigPyIterator_previous(self)

    def advance(self, n):
        return _LDOM.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _LDOM.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _LDOM.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _LDOM.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _LDOM.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _LDOM.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _LDOM.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _LDOM.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _LDOM.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_LDOM.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _LDOM.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _LDOM.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _LDOM.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _LDOM.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _LDOM.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _LDOM.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _LDOM.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_LDOM.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _LDOM.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _LDOM.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _LDOM.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _LDOM.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _LDOM.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _LDOM.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _LDOM.ptr_to_number(item)
ptr_to_number = _LDOM.ptr_to_number

def HashCode(*args):
    return _LDOM.HashCode(*args)
HashCode = _LDOM.HashCode

def ptr_equal(a, b):
    return _LDOM.ptr_equal(a, b)
ptr_equal = _LDOM.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
class LDOM_Node(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    UNKNOWN = _LDOM.LDOM_Node_UNKNOWN
    ELEMENT_NODE = _LDOM.LDOM_Node_ELEMENT_NODE
    ATTRIBUTE_NODE = _LDOM.LDOM_Node_ATTRIBUTE_NODE
    TEXT_NODE = _LDOM.LDOM_Node_TEXT_NODE
    CDATA_SECTION_NODE = _LDOM.LDOM_Node_CDATA_SECTION_NODE
    COMMENT_NODE = _LDOM.LDOM_Node_COMMENT_NODE

    def __init__(self, *args):
        """
        __init__(LDOM_Node self) -> LDOM_Node
        __init__(LDOM_Node self, LDOM_Node anOther) -> LDOM_Node

        :type anOther: OCC.wrapper.LDOM.LDOM_Node

        """
        this = _LDOM.new_LDOM_Node(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getOwnerDocument(self, *args):
        """
        :rtype: OCC.wrapper.LDOM.LDOM_MemManager

        """
        res = _LDOM.LDOM_Node_getOwnerDocument(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def assign(self, *args):
        """
        assign(LDOM_Node self, LDOM_Node anOther) -> LDOM_Node
        assign(LDOM_Node self, LDOM_NullPtr const * aNull) -> LDOM_Node

        :type aNull: OCC.wrapper.LDOM.LDOM_NullPtr
        :rtype: OCC.wrapper.LDOM.LDOM_Node

        """
        return _LDOM.LDOM_Node_assign(self, *args)


    def __eq__(self, *args):
        """
        __eq__(LDOM_Node self, LDOM_NullPtr const * arg2) -> Standard_Boolean
        __eq__(LDOM_Node self, LDOM_Node anOther) -> Standard_Boolean

        :type anOther: OCC.wrapper.LDOM.LDOM_Node
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _LDOM.LDOM_Node___eq__(self, *args)


    def __ne__(self, *args):
        """
        __ne__(LDOM_Node self, LDOM_NullPtr const * arg2) -> Standard_Boolean
        __ne__(LDOM_Node self, LDOM_Node anOther) -> Standard_Boolean

        :type anOther: OCC.wrapper.LDOM.LDOM_Node
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _LDOM.LDOM_Node___ne__(self, *args)


    def isNull(self, *args):
        """
        isNull(LDOM_Node self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _LDOM.LDOM_Node_isNull(self, *args)


    def getNodeType(self, *args):
        """
        getNodeType(LDOM_Node self) -> LDOM_Node::NodeType

        :rtype: NodeType

        """
        return _LDOM.LDOM_Node_getNodeType(self, *args)


    def getNodeName(self, *args):
        """
        getNodeName(LDOM_Node self) -> LDOMString

        :rtype: OCC.wrapper.LDOM.LDOMString

        """
        return _LDOM.LDOM_Node_getNodeName(self, *args)


    def getNodeValue(self, *args):
        """
        getNodeValue(LDOM_Node self) -> LDOMString

        :rtype: OCC.wrapper.LDOM.LDOMString

        """
        return _LDOM.LDOM_Node_getNodeValue(self, *args)


    def getFirstChild(self, *args):
        """
        getFirstChild(LDOM_Node self) -> LDOM_Node

        :rtype: OCC.wrapper.LDOM.LDOM_Node

        """
        return _LDOM.LDOM_Node_getFirstChild(self, *args)


    def getLastChild(self, *args):
        """
        getLastChild(LDOM_Node self) -> LDOM_Node

        :rtype: OCC.wrapper.LDOM.LDOM_Node

        """
        return _LDOM.LDOM_Node_getLastChild(self, *args)


    def getNextSibling(self, *args):
        """
        getNextSibling(LDOM_Node self) -> LDOM_Node

        :rtype: OCC.wrapper.LDOM.LDOM_Node

        """
        return _LDOM.LDOM_Node_getNextSibling(self, *args)


    def removeChild(self, *args):
        """
        removeChild(LDOM_Node self, LDOM_Node aChild)

        :type aChild: OCC.wrapper.LDOM.LDOM_Node

        """
        return _LDOM.LDOM_Node_removeChild(self, *args)


    def appendChild(self, *args):
        """
        appendChild(LDOM_Node self, LDOM_Node aChild)

        :type aChild: OCC.wrapper.LDOM.LDOM_Node

        """
        return _LDOM.LDOM_Node_appendChild(self, *args)


    def hasChildNodes(self, *args):
        """
        hasChildNodes(LDOM_Node self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _LDOM.LDOM_Node_hasChildNodes(self, *args)


    def SetValueClear(self, *args):
        """SetValueClear(LDOM_Node self)"""
        return _LDOM.LDOM_Node_SetValueClear(self, *args)

    __swig_destroy__ = _LDOM.delete_LDOM_Node
LDOM_Node_swigregister = _LDOM.LDOM_Node_swigregister
LDOM_Node_swigregister(LDOM_Node)

class LDOM_CharacterData(LDOM_Node):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(LDOM_CharacterData self) -> LDOM_CharacterData
        __init__(LDOM_CharacterData self, LDOM_CharacterData theOther) -> LDOM_CharacterData

        :type theOther: OCC.wrapper.LDOM.LDOM_CharacterData

        """
        this = _LDOM.new_LDOM_CharacterData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def assign(self, *args):
        """
        assign(LDOM_CharacterData self, LDOM_NullPtr const * aNull) -> LDOM_CharacterData
        assign(LDOM_CharacterData self, LDOM_CharacterData anOther) -> LDOM_CharacterData

        :type anOther: OCC.wrapper.LDOM.LDOM_CharacterData
        :rtype: OCC.wrapper.LDOM.LDOM_CharacterData

        """
        return _LDOM.LDOM_CharacterData_assign(self, *args)


    def getData(self, *args):
        """
        getData(LDOM_CharacterData self) -> LDOMString

        :rtype: OCC.wrapper.LDOM.LDOMString

        """
        return _LDOM.LDOM_CharacterData_getData(self, *args)


    def setData(self, *args):
        """
        setData(LDOM_CharacterData self, LDOMString aValue)

        :type aValue: OCC.wrapper.LDOM.LDOMString

        """
        return _LDOM.LDOM_CharacterData_setData(self, *args)


    def getLength(self, *args):
        """
        getLength(LDOM_CharacterData self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _LDOM.LDOM_CharacterData_getLength(self, *args)

    __swig_destroy__ = _LDOM.delete_LDOM_CharacterData
LDOM_CharacterData_swigregister = _LDOM.LDOM_CharacterData_swigregister
LDOM_CharacterData_swigregister(LDOM_CharacterData)

class LDOM_Text(LDOM_CharacterData):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(LDOM_Text self) -> LDOM_Text
        __init__(LDOM_Text self, LDOM_Text anOther) -> LDOM_Text

        :type anOther: OCC.wrapper.LDOM.LDOM_Text

        """
        this = _LDOM.new_LDOM_Text(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def assign(self, *args):
        """
        assign(LDOM_Text self, LDOM_NullPtr const * theNull) -> LDOM_Text
        assign(LDOM_Text self, LDOM_Text theOther) -> LDOM_Text

        :type theOther: OCC.wrapper.LDOM.LDOM_Text
        :rtype: OCC.wrapper.LDOM.LDOM_Text

        """
        return _LDOM.LDOM_Text_assign(self, *args)

    __swig_destroy__ = _LDOM.delete_LDOM_Text
LDOM_Text_swigregister = _LDOM.LDOM_Text_swigregister
LDOM_Text_swigregister(LDOM_Text)

class LDOMBasicString(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    LDOM_NULL = _LDOM.LDOMBasicString_LDOM_NULL
    LDOM_Integer = _LDOM.LDOMBasicString_LDOM_Integer
    LDOM_AsciiFree = _LDOM.LDOMBasicString_LDOM_AsciiFree
    LDOM_AsciiDoc = _LDOM.LDOMBasicString_LDOM_AsciiDoc
    LDOM_AsciiDocClear = _LDOM.LDOMBasicString_LDOM_AsciiDocClear
    LDOM_AsciiHashed = _LDOM.LDOMBasicString_LDOM_AsciiHashed

    def Type(self, *args):
        """
        Type(LDOMBasicString self) -> LDOMBasicString::StringType

        :rtype: StringType

        """
        return _LDOM.LDOMBasicString_Type(self, *args)


    def GetInteger(self, *args):
        """
        GetInteger(LDOMBasicString self) -> Standard_Boolean

        :type aResult: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _LDOM.LDOMBasicString_GetInteger(self, *args)


    def GetString(self, *args):
        """
        GetString(LDOMBasicString self) -> char const *

        :rtype: const char *

        """
        return _LDOM.LDOMBasicString_GetString(self, *args)


    def equals(self, *args):
        """
        equals(LDOMBasicString self, LDOMBasicString anOther) -> Standard_Boolean

        :type anOther: OCC.wrapper.LDOM.LDOMBasicString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _LDOM.LDOMBasicString_equals(self, *args)


    def assign(self, *args):
        """
        assign(LDOMBasicString self, LDOM_NullPtr const * arg2) -> LDOMBasicString
        assign(LDOMBasicString self, LDOMBasicString anOther) -> LDOMBasicString

        :type anOther: OCC.wrapper.LDOM.LDOMBasicString
        :rtype: OCC.wrapper.LDOM.LDOMBasicString

        """
        return _LDOM.LDOMBasicString_assign(self, *args)


    def __eq__(self, *args):
        """
        __eq__(LDOMBasicString self, LDOM_NullPtr const * arg2) -> Standard_Boolean
        __eq__(LDOMBasicString self, LDOMBasicString anOther) -> Standard_Boolean

        :type anOther: OCC.wrapper.LDOM.LDOMBasicString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _LDOM.LDOMBasicString___eq__(self, *args)


    def __ne__(self, *args):
        """
        __ne__(LDOMBasicString self, LDOM_NullPtr const * arg2) -> Standard_Boolean
        __ne__(LDOMBasicString self, LDOMBasicString anOther) -> Standard_Boolean

        :type anOther: OCC.wrapper.LDOM.LDOMBasicString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _LDOM.LDOMBasicString___ne__(self, *args)


    def __init__(self, *args):
        """
        __init__(LDOMBasicString self) -> LDOMBasicString
        __init__(LDOMBasicString self, LDOMBasicString anOther) -> LDOMBasicString
        __init__(LDOMBasicString self, Standard_Integer const aValue) -> LDOMBasicString
        __init__(LDOMBasicString self, char const * aValue) -> LDOMBasicString
        __init__(LDOMBasicString self, char const * aValue, Handle_LDOM_MemManager aDoc) -> LDOMBasicString
        __init__(LDOMBasicString self, char const * aValue, Standard_Integer const aLen, Handle_LDOM_MemManager aDoc) -> LDOMBasicString

        :type aValue: const char *
        :type aLen: int
        :type aDoc: OCC.wrapper.LDOM.Handle_LDOM_MemManager

        """
        this = _LDOM.new_LDOMBasicString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _LDOM.delete_LDOMBasicString
LDOMBasicString_swigregister = _LDOM.LDOMBasicString_swigregister
LDOMBasicString_swigregister(LDOMBasicString)

class LDOM_CDATASection(LDOM_Text):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(LDOM_CDATASection self) -> LDOM_CDATASection
        __init__(LDOM_CDATASection self, LDOM_CDATASection theOther) -> LDOM_CDATASection

        :type theOther: OCC.wrapper.LDOM.LDOM_CDATASection

        """
        this = _LDOM.new_LDOM_CDATASection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def assign(self, *args):
        """
        assign(LDOM_CDATASection self, LDOM_NullPtr const * theNull) -> LDOM_CDATASection
        assign(LDOM_CDATASection self, LDOM_CDATASection theOther) -> LDOM_CDATASection

        :type theOther: OCC.wrapper.LDOM.LDOM_CDATASection
        :rtype: OCC.wrapper.LDOM.LDOM_CDATASection

        """
        return _LDOM.LDOM_CDATASection_assign(self, *args)

    __swig_destroy__ = _LDOM.delete_LDOM_CDATASection
LDOM_CDATASection_swigregister = _LDOM.LDOM_CDATASection_swigregister
LDOM_CDATASection_swigregister(LDOM_CDATASection)

class LDOMString(LDOMBasicString):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(LDOMString self) -> LDOMString
        __init__(LDOMString self, LDOMString anOther) -> LDOMString
        __init__(LDOMString self, Standard_Integer const aValue) -> LDOMString
        __init__(LDOMString self, char const * aValue) -> LDOMString

        :type aValue: const char *

        """
        this = _LDOM.new_LDOMString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getOwnerDocument(self, *args):
        """
        :rtype: OCC.wrapper.LDOM.LDOM_MemManager

        """
        res = _LDOM.LDOMString_getOwnerDocument(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def assign(self, *args):
        """
        assign(LDOMString self, LDOM_NullPtr const * aNull) -> LDOMString
        assign(LDOMString self, LDOMString anOther) -> LDOMString

        :type anOther: OCC.wrapper.LDOM.LDOMString
        :rtype: OCC.wrapper.LDOM.LDOMString

        """
        return _LDOM.LDOMString_assign(self, *args)

    __swig_destroy__ = _LDOM.delete_LDOMString
LDOMString_swigregister = _LDOM.LDOMString_swigregister
LDOMString_swigregister(LDOMString)

class LDOM_Document(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(LDOM_Document self) -> LDOM_Document
        __init__(LDOM_Document self, LDOM_MemManager aMemManager) -> LDOM_Document

        :type aMemManager: OCC.wrapper.LDOM.LDOM_MemManager

        """
        this = _LDOM.new_LDOM_Document(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def createDocument(*args):
        """
        createDocument(LDOMString theQualifiedName) -> LDOM_Document

        :type theQualifiedName: OCC.wrapper.LDOM.LDOMString
        :rtype: OCC.wrapper.LDOM.LDOM_Document

        """
        return _LDOM.LDOM_Document_createDocument(*args)

    createDocument = staticmethod(createDocument)

    def createElement(self, *args):
        """
        createElement(LDOM_Document self, LDOMString theTagName) -> LDOM_Element

        :type theTagName: OCC.wrapper.LDOM.LDOMString
        :rtype: OCC.wrapper.LDOM.LDOM_Element

        """
        return _LDOM.LDOM_Document_createElement(self, *args)


    def createCDATASection(self, *args):
        """
        createCDATASection(LDOM_Document self, LDOMString theData) -> LDOM_CDATASection

        :type theData: OCC.wrapper.LDOM.LDOMString
        :rtype: OCC.wrapper.LDOM.LDOM_CDATASection

        """
        return _LDOM.LDOM_Document_createCDATASection(self, *args)


    def createComment(self, *args):
        """
        createComment(LDOM_Document self, LDOMString theData) -> LDOM_Comment

        :type theData: OCC.wrapper.LDOM.LDOMString
        :rtype: OCC.wrapper.LDOM.LDOM_Comment

        """
        return _LDOM.LDOM_Document_createComment(self, *args)


    def createTextNode(self, *args):
        """
        createTextNode(LDOM_Document self, LDOMString theData) -> LDOM_Text

        :type theData: OCC.wrapper.LDOM.LDOMString
        :rtype: OCC.wrapper.LDOM.LDOM_Text

        """
        return _LDOM.LDOM_Document_createTextNode(self, *args)


    def getDocumentElement(self, *args):
        """
        getDocumentElement(LDOM_Document self) -> LDOM_Element

        :rtype: OCC.wrapper.LDOM.LDOM_Element

        """
        return _LDOM.LDOM_Document_getDocumentElement(self, *args)


    def getElementsByTagName(self, *args):
        """
        getElementsByTagName(LDOM_Document self, LDOMString theTagName) -> LDOM_NodeList

        :type theTagName: OCC.wrapper.LDOM.LDOMString
        :rtype: OCC.wrapper.LDOM.LDOM_NodeList

        """
        return _LDOM.LDOM_Document_getElementsByTagName(self, *args)


    def __eq__(self, *args):
        """
        __eq__(LDOM_Document self, LDOM_Document anOther) -> Standard_Boolean

        :type anOther: OCC.wrapper.LDOM.LDOM_Document
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _LDOM.LDOM_Document___eq__(self, *args)


    def __ne__(self, *args):
        """
        __ne__(LDOM_Document self, LDOM_Document anOther) -> Standard_Boolean

        :type anOther: OCC.wrapper.LDOM.LDOM_Document
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _LDOM.LDOM_Document___ne__(self, *args)


    def isNull(self, *args):
        """
        isNull(LDOM_Document self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _LDOM.LDOM_Document_isNull(self, *args)


    def assign(self, *args):
        """
        assign(LDOM_Document self, LDOM_NullPtr const * arg2) -> LDOM_Document

        :type : OCC.wrapper.LDOM.LDOM_NullPtr
        :rtype: OCC.wrapper.LDOM.LDOM_Document

        """
        return _LDOM.LDOM_Document_assign(self, *args)

    __swig_destroy__ = _LDOM.delete_LDOM_Document
LDOM_Document_swigregister = _LDOM.LDOM_Document_swigregister
LDOM_Document_swigregister(LDOM_Document)

def LDOM_Document_createDocument(*args):
    """
    LDOM_Document_createDocument(LDOMString theQualifiedName) -> LDOM_Document

    :type theQualifiedName: OCC.wrapper.LDOM.LDOMString
    :rtype: OCC.wrapper.LDOM.LDOM_Document

    """
    return _LDOM.LDOM_Document_createDocument(*args)

class LDOM_OSStream(object):
    """
    Subclass if std::ostream allowing to increase performance
    of outputting data into a string avoiding reallocation of buffer.
    Class LDOM_OSStream implements output into a sequence of
    strings and getting the result as a string.
    It inherits Standard_OStream (ostream).
    Beside methods of ostream, it also has additional
    useful methods: str(), Length() and Clear().
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(LDOM_OSStream self, Standard_Integer const theMaxBuf) -> LDOM_OSStream

        Constructor

        :type theMaxBuf: int

        """
        this = _LDOM.new_LDOM_OSStream(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def str(self, *args):
        """
        str(LDOM_OSStream self) -> Standard_CString

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _LDOM.LDOM_OSStream_str(self, *args)


    def Length(self, *args):
        """
        Length(LDOM_OSStream self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _LDOM.LDOM_OSStream_Length(self, *args)


    def Clear(self, *args):
        """Clear(LDOM_OSStream self)"""
        return _LDOM.LDOM_OSStream_Clear(self, *args)

    __swig_destroy__ = _LDOM.delete_LDOM_OSStream
LDOM_OSStream_swigregister = _LDOM.LDOM_OSStream_swigregister
LDOM_OSStream_swigregister(LDOM_OSStream)

class LDOM_BasicNode(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isNull(self, *args):
        """
        isNull(LDOM_BasicNode self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _LDOM.LDOM_BasicNode_isNull(self, *args)


    def getNodeType(self, *args):
        """
        getNodeType(LDOM_BasicNode self) -> LDOM_Node::NodeType

        :rtype: NodeType

        """
        return _LDOM.LDOM_BasicNode_getNodeType(self, *args)


    def GetSibling(self, *args):
        """
        GetSibling(LDOM_BasicNode self) -> LDOM_BasicNode

        :rtype: OCC.wrapper.LDOM.LDOM_BasicNode

        """
        return _LDOM.LDOM_BasicNode_GetSibling(self, *args)

    __swig_destroy__ = _LDOM.delete_LDOM_BasicNode
LDOM_BasicNode_swigregister = _LDOM.LDOM_BasicNode_swigregister
LDOM_BasicNode_swigregister(LDOM_BasicNode)

class LDOM_Element(LDOM_Node):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(LDOM_Element self) -> LDOM_Element
        __init__(LDOM_Element self, LDOM_Element anOther) -> LDOM_Element

        :type anOther: OCC.wrapper.LDOM.LDOM_Element

        """
        this = _LDOM.new_LDOM_Element(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def assign(self, *args):
        """
        assign(LDOM_Element self, LDOM_Element anOther) -> LDOM_Element
        assign(LDOM_Element self, LDOM_NullPtr const * aNull) -> LDOM_Element

        :type aNull: OCC.wrapper.LDOM.LDOM_NullPtr
        :rtype: OCC.wrapper.LDOM.LDOM_Element

        """
        return _LDOM.LDOM_Element_assign(self, *args)


    def getTagName(self, *args):
        """
        getTagName(LDOM_Element self) -> LDOMString

        :rtype: OCC.wrapper.LDOM.LDOMString

        """
        return _LDOM.LDOM_Element_getTagName(self, *args)


    def getAttribute(self, *args):
        """
        getAttribute(LDOM_Element self, LDOMString aName) -> LDOMString

        :type aName: OCC.wrapper.LDOM.LDOMString
        :rtype: OCC.wrapper.LDOM.LDOMString

        """
        return _LDOM.LDOM_Element_getAttribute(self, *args)


    def getAttributeNode(self, *args):
        """
        getAttributeNode(LDOM_Element self, LDOMString aName) -> LDOM_Attr

        :type aName: OCC.wrapper.LDOM.LDOMString
        :rtype: OCC.wrapper.LDOM.LDOM_Attr

        """
        return _LDOM.LDOM_Element_getAttributeNode(self, *args)


    def getElementsByTagName(self, *args):
        """
        getElementsByTagName(LDOM_Element self, LDOMString aName) -> LDOM_NodeList

        :type aName: OCC.wrapper.LDOM.LDOMString
        :rtype: OCC.wrapper.LDOM.LDOM_NodeList

        """
        return _LDOM.LDOM_Element_getElementsByTagName(self, *args)


    def setAttribute(self, *args):
        """
        setAttribute(LDOM_Element self, LDOMString aName, LDOMString aValue)

        :type aName: OCC.wrapper.LDOM.LDOMString
        :type aValue: OCC.wrapper.LDOM.LDOMString

        """
        return _LDOM.LDOM_Element_setAttribute(self, *args)


    def setAttributeNode(self, *args):
        """
        setAttributeNode(LDOM_Element self, LDOM_Attr aNewAttr)

        :type aNewAttr: OCC.wrapper.LDOM.LDOM_Attr

        """
        return _LDOM.LDOM_Element_setAttributeNode(self, *args)


    def removeAttribute(self, *args):
        """
        removeAttribute(LDOM_Element self, LDOMString aName)

        :type aName: OCC.wrapper.LDOM.LDOMString

        """
        return _LDOM.LDOM_Element_removeAttribute(self, *args)


    def GetChildByTagName(self, *args):
        """
        GetChildByTagName(LDOM_Element self, LDOMString aTagName) -> LDOM_Element

        :type aTagName: OCC.wrapper.LDOM.LDOMString
        :rtype: OCC.wrapper.LDOM.LDOM_Element

        """
        return _LDOM.LDOM_Element_GetChildByTagName(self, *args)


    def GetSiblingByTagName(self, *args):
        """
        GetSiblingByTagName(LDOM_Element self) -> LDOM_Element

        :rtype: OCC.wrapper.LDOM.LDOM_Element

        """
        return _LDOM.LDOM_Element_GetSiblingByTagName(self, *args)


    def ReplaceElement(self, *args):
        """
        ReplaceElement(LDOM_Element self, LDOM_Element anOther)

        :type anOther: OCC.wrapper.LDOM.LDOM_Element

        """
        return _LDOM.LDOM_Element_ReplaceElement(self, *args)


    def GetAttributesList(self, *args):
        """
        GetAttributesList(LDOM_Element self) -> LDOM_NodeList

        :rtype: OCC.wrapper.LDOM.LDOM_NodeList

        """
        return _LDOM.LDOM_Element_GetAttributesList(self, *args)

    __swig_destroy__ = _LDOM.delete_LDOM_Element
LDOM_Element_swigregister = _LDOM.LDOM_Element_swigregister
LDOM_Element_swigregister(LDOM_Element)

class LDOMParser(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """__init__(LDOMParser self) -> LDOMParser"""
        this = _LDOM.new_LDOMParser(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getDocument(self, *args):
        """
        getDocument(LDOMParser self) -> LDOM_Document

        :rtype: OCC.wrapper.LDOM.LDOM_Document

        """
        return _LDOM.LDOMParser_getDocument(self, *args)


    def parse(self, *args):
        """
        parse(LDOMParser self, char const *const aFileName) -> Standard_Boolean
        parse(LDOMParser self, std::istream & anInput, Standard_Boolean const theTagPerStep, Standard_Boolean const theWithoutRoot) -> Standard_Boolean

        :type anInput: istream
        :type theTagPerStep: bool
        :type theWithoutRoot: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _LDOM.LDOMParser_parse(self, *args)


    def GetError(self, *args):
        """
        :type aData: OCC.wrapper.TCollection.TCollection_AsciiString
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _LDOM.LDOMParser_GetError(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _LDOM.delete_LDOMParser
LDOMParser_swigregister = _LDOM.LDOMParser_swigregister
LDOMParser_swigregister(LDOMParser)

class LDOM_XmlWriter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(LDOM_XmlWriter self, char const * theEncoding=None) -> LDOM_XmlWriter

        :type theEncoding: const char *

        """
        this = _LDOM.new_LDOM_XmlWriter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetIndentation(self, *args):
        """
        SetIndentation(LDOM_XmlWriter self, Standard_Integer const theIndent)

        :type theIndent: int

        """
        return _LDOM.LDOM_XmlWriter_SetIndentation(self, *args)


    def Write(self, *args):
        """
        Write(LDOM_XmlWriter self, Standard_OStream & theOStream, LDOM_Document theDoc)
        Write(LDOM_XmlWriter self, Standard_OStream & theOStream, LDOM_Node theNode)

        :type theOStream: OCC.wrapper.Standard.Standard_OStream
        :type theNode: OCC.wrapper.LDOM.LDOM_Node

        """
        return _LDOM.LDOM_XmlWriter_Write(self, *args)

    __swig_destroy__ = _LDOM.delete_LDOM_XmlWriter
LDOM_XmlWriter_swigregister = _LDOM.LDOM_XmlWriter_swigregister
LDOM_XmlWriter_swigregister(LDOM_XmlWriter)

class LDOM_Attr(LDOM_Node):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(LDOM_Attr self) -> LDOM_Attr
        __init__(LDOM_Attr self, LDOM_Attr anOther) -> LDOM_Attr

        :type anOther: OCC.wrapper.LDOM.LDOM_Attr

        """
        this = _LDOM.new_LDOM_Attr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def assign(self, *args):
        """
        assign(LDOM_Attr self, LDOM_NullPtr const * aNull) -> LDOM_Attr
        assign(LDOM_Attr self, LDOM_Attr anOther) -> LDOM_Attr

        :type anOther: OCC.wrapper.LDOM.LDOM_Attr
        :rtype: OCC.wrapper.LDOM.LDOM_Attr

        """
        return _LDOM.LDOM_Attr_assign(self, *args)


    def getName(self, *args):
        """
        getName(LDOM_Attr self) -> LDOMString

        :rtype: OCC.wrapper.LDOM.LDOMString

        """
        return _LDOM.LDOM_Attr_getName(self, *args)


    def getValue(self, *args):
        """
        getValue(LDOM_Attr self) -> LDOMString

        :rtype: OCC.wrapper.LDOM.LDOMString

        """
        return _LDOM.LDOM_Attr_getValue(self, *args)


    def setValue(self, *args):
        """
        setValue(LDOM_Attr self, LDOMString aValue)

        :type aValue: OCC.wrapper.LDOM.LDOMString

        """
        return _LDOM.LDOM_Attr_setValue(self, *args)

    __swig_destroy__ = _LDOM.delete_LDOM_Attr
LDOM_Attr_swigregister = _LDOM.LDOM_Attr_swigregister
LDOM_Attr_swigregister(LDOM_Attr)

class LDOM_BasicElement(LDOM_BasicNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """__init__(LDOM_BasicElement self) -> LDOM_BasicElement"""
        this = _LDOM.new_LDOM_BasicElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def assign(self, *args):
        """
        assign(LDOM_BasicElement self, LDOM_NullPtr const * aNull) -> LDOM_BasicElement

        :type aNull: OCC.wrapper.LDOM.LDOM_NullPtr
        :rtype: OCC.wrapper.LDOM.LDOM_BasicElement

        """
        return _LDOM.LDOM_BasicElement_assign(self, *args)


    def GetTagName(self, *args):
        """
        GetTagName(LDOM_BasicElement self) -> char const *

        :rtype: const char *

        """
        return _LDOM.LDOM_BasicElement_GetTagName(self, *args)


    def GetFirstChild(self, *args):
        """
        GetFirstChild(LDOM_BasicElement self) -> LDOM_BasicNode

        :rtype: OCC.wrapper.LDOM.LDOM_BasicNode

        """
        return _LDOM.LDOM_BasicElement_GetFirstChild(self, *args)


    def GetLastChild(self, *args):
        """
        GetLastChild(LDOM_BasicElement self) -> LDOM_BasicNode

        :rtype: OCC.wrapper.LDOM.LDOM_BasicNode

        """
        return _LDOM.LDOM_BasicElement_GetLastChild(self, *args)


    def GetAttribute(self, *args):
        """
        :type aName: OCC.wrapper.LDOM.LDOMBasicString
        :type aLastCh: OCC.wrapper.LDOM.LDOM_BasicNode
        :rtype: OCC.wrapper.LDOM.LDOM_BasicAttribute

        """
        res = _LDOM.LDOM_BasicElement_GetAttribute(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _LDOM.delete_LDOM_BasicElement
LDOM_BasicElement_swigregister = _LDOM.LDOM_BasicElement_swigregister
LDOM_BasicElement_swigregister(LDOM_BasicElement)

class LDOM_MemManager(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_LDOM_MemManager
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_LDOM_MemManager(self) 
            return h


    def __init__(self, *args):
        """
        __init__(LDOM_MemManager self, Standard_Integer const aBlockSize) -> LDOM_MemManager

        :type aBlockSize: int

        """
        this = _LDOM.new_LDOM_MemManager(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Allocate(self, *args):
        """
        Allocate(LDOM_MemManager self, Standard_Integer const aSize) -> void *

        :type aSize: int
        :rtype: void *

        """
        return _LDOM.LDOM_MemManager_Allocate(self, *args)


    def Self(self, *args):
        """
        :rtype: OCC.wrapper.LDOM.LDOM_MemManager

        """
        res = _LDOM.LDOM_MemManager_Self(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def RootElement(self, *args):
        """
        RootElement(LDOM_MemManager self) -> LDOM_BasicElement

        :rtype: OCC.wrapper.LDOM.LDOM_BasicElement

        """
        return _LDOM.LDOM_MemManager_RootElement(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _LDOM.LDOM_MemManager_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _LDOM.LDOM_MemManager_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _LDOM.LDOM_MemManager_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _LDOM.delete_LDOM_MemManager
LDOM_MemManager_swigregister = _LDOM.LDOM_MemManager_swigregister
LDOM_MemManager_swigregister(LDOM_MemManager)

def LDOM_MemManager_get_type_name(*args):
    """
    LDOM_MemManager_get_type_name() -> char const *

    :rtype: const char *

    """
    return _LDOM.LDOM_MemManager_get_type_name(*args)

def LDOM_MemManager_get_type_descriptor(*args):
    """
    LDOM_MemManager_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _LDOM.LDOM_MemManager_get_type_descriptor(*args)

class LDOM_NodeList(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(LDOM_NodeList self) -> LDOM_NodeList
        __init__(LDOM_NodeList self, LDOM_NodeList theOther) -> LDOM_NodeList

        :type theOther: OCC.wrapper.LDOM.LDOM_NodeList

        """
        this = _LDOM.new_LDOM_NodeList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def assign(self, *args):
        """
        assign(LDOM_NodeList self, LDOM_NodeList theOther) -> LDOM_NodeList
        assign(LDOM_NodeList self, LDOM_NullPtr const * arg2) -> LDOM_NodeList

        :type : OCC.wrapper.LDOM.LDOM_NullPtr
        :rtype: OCC.wrapper.LDOM.LDOM_NodeList

        """
        return _LDOM.LDOM_NodeList_assign(self, *args)


    def __eq__(self, *args):
        """
        __eq__(LDOM_NodeList self, LDOM_NullPtr const * arg2) -> Standard_Boolean

        :type : OCC.wrapper.LDOM.LDOM_NullPtr
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _LDOM.LDOM_NodeList___eq__(self, *args)


    def __ne__(self, *args):
        """
        __ne__(LDOM_NodeList self, LDOM_NullPtr const * arg2) -> Standard_Boolean

        :type : OCC.wrapper.LDOM.LDOM_NullPtr
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _LDOM.LDOM_NodeList___ne__(self, *args)


    def item(self, *args):
        """
        item(LDOM_NodeList self, Standard_Integer const arg2) -> LDOM_Node

        :type : int
        :rtype: OCC.wrapper.LDOM.LDOM_Node

        """
        return _LDOM.LDOM_NodeList_item(self, *args)


    def getLength(self, *args):
        """
        getLength(LDOM_NodeList self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _LDOM.LDOM_NodeList_getLength(self, *args)

    __swig_destroy__ = _LDOM.delete_LDOM_NodeList
LDOM_NodeList_swigregister = _LDOM.LDOM_NodeList_swigregister
LDOM_NodeList_swigregister(LDOM_NodeList)

class LDOM_BasicAttribute(LDOM_BasicNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """__init__(LDOM_BasicAttribute self) -> LDOM_BasicAttribute"""
        this = _LDOM.new_LDOM_BasicAttribute(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetName(self, *args):
        """
        GetName(LDOM_BasicAttribute self) -> char const *

        :rtype: const char *

        """
        return _LDOM.LDOM_BasicAttribute_GetName(self, *args)


    def GetValue(self, *args):
        """
        :rtype: OCC.wrapper.LDOM.LDOMBasicString

        """
        res = _LDOM.LDOM_BasicAttribute_GetValue(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _LDOM.delete_LDOM_BasicAttribute
LDOM_BasicAttribute_swigregister = _LDOM.LDOM_BasicAttribute_swigregister
LDOM_BasicAttribute_swigregister(LDOM_BasicAttribute)

class LDOM_DocumentType(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """__init__(LDOM_DocumentType self) -> LDOM_DocumentType"""
        this = _LDOM.new_LDOM_DocumentType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _LDOM.delete_LDOM_DocumentType
LDOM_DocumentType_swigregister = _LDOM.LDOM_DocumentType_swigregister
LDOM_DocumentType_swigregister(LDOM_DocumentType)

class LDOM_LDOMImplementation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def createDocument(*args):
        """
        createDocument(LDOMString aNamespaceURI, LDOMString aQualifiedName, LDOM_DocumentType aDocType) -> LDOM_Document

        :type aNamespaceURI: OCC.wrapper.LDOM.LDOMString
        :type aQualifiedName: OCC.wrapper.LDOM.LDOMString
        :type aDocType: OCC.wrapper.LDOM.LDOM_DocumentType
        :rtype: OCC.wrapper.LDOM.LDOM_Document

        """
        return _LDOM.LDOM_LDOMImplementation_createDocument(*args)

    createDocument = staticmethod(createDocument)

    def __init__(self):
        this = _LDOM.new_LDOM_LDOMImplementation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _LDOM.delete_LDOM_LDOMImplementation
LDOM_LDOMImplementation_swigregister = _LDOM.LDOM_LDOMImplementation_swigregister
LDOM_LDOMImplementation_swigregister(LDOM_LDOMImplementation)

def LDOM_LDOMImplementation_createDocument(*args):
    """
    LDOM_LDOMImplementation_createDocument(LDOMString aNamespaceURI, LDOMString aQualifiedName, LDOM_DocumentType aDocType) -> LDOM_Document

    :type aNamespaceURI: OCC.wrapper.LDOM.LDOMString
    :type aQualifiedName: OCC.wrapper.LDOM.LDOMString
    :type aDocType: OCC.wrapper.LDOM.LDOM_DocumentType
    :rtype: OCC.wrapper.LDOM.LDOM_Document

    """
    return _LDOM.LDOM_LDOMImplementation_createDocument(*args)

class Handle_LDOM_MemManager(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_LDOM_MemManager self)

        Nullify the handle


        """
        return _LDOM.Handle_LDOM_MemManager_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_LDOM_MemManager self) -> bool

        Check for being null

        :rtype: bool

        """
        return _LDOM.Handle_LDOM_MemManager_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_LDOM_MemManager self, LDOM_MemManager thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _LDOM.Handle_LDOM_MemManager_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_LDOM_MemManager self, Handle_LDOM_MemManager theHandle) -> Handle_LDOM_MemManager
        assign(Handle_LDOM_MemManager self, LDOM_MemManager thePtr) -> Handle_LDOM_MemManager
        assign(Handle_LDOM_MemManager self, Handle_LDOM_MemManager theHandle) -> Handle_LDOM_MemManager

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _LDOM.Handle_LDOM_MemManager_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_LDOM_MemManager self) -> LDOM_MemManager

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _LDOM.Handle_LDOM_MemManager_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_LDOM_MemManager self) -> LDOM_MemManager

        Member access operator (note non-const)

        :rtype: T *

        """
        return _LDOM.Handle_LDOM_MemManager___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_LDOM_MemManager self) -> LDOM_MemManager

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _LDOM.Handle_LDOM_MemManager___ref__(self, *args)


    def __hash__(self):
        return _LDOM.Handle_LDOM_MemManager___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _LDOM.Handle_LDOM_MemManager___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _LDOM.new_Handle_LDOM_MemManager(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_LDOM.Handle_LDOM_MemManager_DownCast)
    __swig_destroy__ = _LDOM.delete_Handle_LDOM_MemManager

    def Allocate(self, *args):
        """
        Allocate(Handle_LDOM_MemManager self, Standard_Integer const aSize) -> void *

        :type aSize: int
        :rtype: void *

        """
        return _LDOM.Handle_LDOM_MemManager_Allocate(self, *args)


    def Self(self, *args):
        """
        :rtype: OCC.wrapper.LDOM.LDOM_MemManager

        """
        res = _LDOM.Handle_LDOM_MemManager_Self(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def RootElement(self, *args):
        """
        RootElement(Handle_LDOM_MemManager self) -> LDOM_BasicElement

        :rtype: OCC.wrapper.LDOM.LDOM_BasicElement

        """
        return _LDOM.Handle_LDOM_MemManager_RootElement(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_LDOM_MemManager self) -> char const *

        :rtype: const char *

        """
        return _LDOM.Handle_LDOM_MemManager_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _LDOM.Handle_LDOM_MemManager_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _LDOM.Handle_LDOM_MemManager_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_LDOM_MemManager self)

        Memory deallocator for transient classes


        """
        return _LDOM.Handle_LDOM_MemManager_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_LDOM_MemManager self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_LDOM_MemManager self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _LDOM.Handle_LDOM_MemManager_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_LDOM_MemManager self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_LDOM_MemManager self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _LDOM.Handle_LDOM_MemManager_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_LDOM_MemManager self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _LDOM.Handle_LDOM_MemManager_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_LDOM_MemManager self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _LDOM.Handle_LDOM_MemManager_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_LDOM_MemManager self)

        Increments the reference counter of this object


        """
        return _LDOM.Handle_LDOM_MemManager_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_LDOM_MemManager self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _LDOM.Handle_LDOM_MemManager_DecrementRefCounter(self, *args)

Handle_LDOM_MemManager_swigregister = _LDOM.Handle_LDOM_MemManager_swigregister
Handle_LDOM_MemManager_swigregister(Handle_LDOM_MemManager)

def Handle_LDOM_MemManager_DownCast(thing):
    return _LDOM.Handle_LDOM_MemManager_DownCast(thing)
Handle_LDOM_MemManager_DownCast = _LDOM.Handle_LDOM_MemManager_DownCast

class LDOM_Comment(LDOM_CharacterData):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(LDOM_Comment self) -> LDOM_Comment
        __init__(LDOM_Comment self, LDOM_Comment theOther) -> LDOM_Comment

        :type theOther: OCC.wrapper.LDOM.LDOM_Comment

        """
        this = _LDOM.new_LDOM_Comment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def assign(self, *args):
        """
        assign(LDOM_Comment self, LDOM_NullPtr const * theNull) -> LDOM_Comment
        assign(LDOM_Comment self, LDOM_Comment theOther) -> LDOM_Comment

        :type theOther: OCC.wrapper.LDOM.LDOM_Comment
        :rtype: OCC.wrapper.LDOM.LDOM_Comment

        """
        return _LDOM.LDOM_Comment_assign(self, *args)

    __swig_destroy__ = _LDOM.delete_LDOM_Comment
LDOM_Comment_swigregister = _LDOM.LDOM_Comment_swigregister
LDOM_Comment_swigregister(LDOM_Comment)

class LDOM_BasicText(LDOM_BasicNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """__init__(LDOM_BasicText self) -> LDOM_BasicText"""
        this = _LDOM.new_LDOM_BasicText(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetData(self, *args):
        """
        :rtype: OCC.wrapper.LDOM.LDOMBasicString

        """
        res = _LDOM.LDOM_BasicText_GetData(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _LDOM.delete_LDOM_BasicText
LDOM_BasicText_swigregister = _LDOM.LDOM_BasicText_swigregister
LDOM_BasicText_swigregister(LDOM_BasicText)

class LDOM_SBuffer(object):
    """
    Class LDOM_SBuffer inherits streambuf and
    redefines some virtual methods of it (overflow() and xsputn()).
    This class contains pointers on first and current element 
    of sequence, also it has methods for the sequence management.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(LDOM_SBuffer self, Standard_Integer const theMaxBuf) -> LDOM_SBuffer

        Constructor. Sets a default value for the
        length of each sequence element.

        :type theMaxBuf: int

        """
        this = _LDOM.new_LDOM_SBuffer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def str(self, *args):
        """
        str(LDOM_SBuffer self) -> Standard_CString

        Concatenates strings of all sequence elements
        into one string. Space for output string is allocated
        with operator new.
        Caller of this function is responsible
        for memory release after the string usage.

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _LDOM.LDOM_SBuffer_str(self, *args)


    def Length(self, *args):
        """
        Length(LDOM_SBuffer self) -> Standard_Integer

        Returns full length of data contained

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _LDOM.LDOM_SBuffer_Length(self, *args)


    def Clear(self, *args):
        """
        Clear(LDOM_SBuffer self)

        Clears first element of sequence and removes all others


        """
        return _LDOM.LDOM_SBuffer_Clear(self, *args)


    def overflow(self, *args):
        """
        overflow(LDOM_SBuffer self, int c) -> int

        :type c: int
        :rtype: int

        """
        return _LDOM.LDOM_SBuffer_overflow(self, *args)


    def underflow(self, *args):
        """
        underflow(LDOM_SBuffer self) -> int

        :rtype: int

        """
        return _LDOM.LDOM_SBuffer_underflow(self, *args)


    def xsputn(self, *args):
        """
        xsputn(LDOM_SBuffer self, char const * s, std::streamsize n) -> std::streamsize

        :type s: const char *
        :type n: streamsize
        :rtype: streamsize

        """
        return _LDOM.LDOM_SBuffer_xsputn(self, *args)

    __swig_destroy__ = _LDOM.delete_LDOM_SBuffer
LDOM_SBuffer_swigregister = _LDOM.LDOM_SBuffer_swigregister
LDOM_SBuffer_swigregister(LDOM_SBuffer)



