# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_IGESDimen')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_IGESDimen')
    _IGESDimen = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IGESDimen', [dirname(__file__)])
        except ImportError:
            import _IGESDimen
            return _IGESDimen
        try:
            _mod = imp.load_module('_IGESDimen', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _IGESDimen = swig_import_helper()
    del swig_import_helper
else:
    import _IGESDimen
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IGESDimen.delete_SwigPyIterator

    def value(self):
        return _IGESDimen.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _IGESDimen.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _IGESDimen.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _IGESDimen.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _IGESDimen.SwigPyIterator_equal(self, x)

    def copy(self):
        return _IGESDimen.SwigPyIterator_copy(self)

    def next(self):
        return _IGESDimen.SwigPyIterator_next(self)

    def __next__(self):
        return _IGESDimen.SwigPyIterator___next__(self)

    def previous(self):
        return _IGESDimen.SwigPyIterator_previous(self)

    def advance(self, n):
        return _IGESDimen.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _IGESDimen.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _IGESDimen.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _IGESDimen.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _IGESDimen.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _IGESDimen.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _IGESDimen.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _IGESDimen.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _IGESDimen.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_IGESDimen.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _IGESDimen.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _IGESDimen.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IGESDimen.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _IGESDimen.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _IGESDimen.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _IGESDimen.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _IGESDimen.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_IGESDimen.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _IGESDimen.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _IGESDimen.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IGESDimen.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _IGESDimen.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _IGESDimen.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _IGESDimen.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _IGESDimen.ptr_to_number(item)
ptr_to_number = _IGESDimen.ptr_to_number

def HashCode(*args):
    return _IGESDimen.HashCode(*args)
HashCode = _IGESDimen.HashCode

def ptr_equal(a, b):
    return _IGESDimen.ptr_equal(a, b)
ptr_equal = _IGESDimen.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESData
else:
    import IGESData
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESGeom
else:
    import IGESGeom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESBasic
else:
    import IGESBasic
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESGraph
else:
    import IGESGraph
del _swig_python_version_info
class IGESDimen_HArray1OfGeneralNote(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDimen_HArray1OfGeneralNote
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDimen_HArray1OfGeneralNote(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDimen_HArray1OfGeneralNote self, Standard_Integer const theLower, Standard_Integer const theUpper) -> IGESDimen_HArray1OfGeneralNote
        __init__(IGESDimen_HArray1OfGeneralNote self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_IGESDimen_GeneralNote theValue) -> IGESDimen_HArray1OfGeneralNote
        __init__(IGESDimen_HArray1OfGeneralNote self, NCollection_Array1_Handle_IGESDimen_GeneralNote theOther) -> IGESDimen_HArray1OfGeneralNote

        :type theOther: OCC.wrapper.IGESDimen.IGESDimen_Array1OfGeneralNote

        """
        this = _IGESDimen.new_IGESDimen_HArray1OfGeneralNote(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.IGESDimen.IGESDimen_Array1OfGeneralNote

        """
        res = _IGESDimen.IGESDimen_HArray1OfGeneralNote_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(IGESDimen_HArray1OfGeneralNote self) -> NCollection_Array1_Handle_IGESDimen_GeneralNote

        :rtype: OCC.wrapper.IGESDimen.IGESDimen_Array1OfGeneralNote

        """
        return _IGESDimen.IGESDimen_HArray1OfGeneralNote_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDimen.IGESDimen_HArray1OfGeneralNote_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDimen.IGESDimen_HArray1OfGeneralNote_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.IGESDimen_HArray1OfGeneralNote_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDimen.delete_IGESDimen_HArray1OfGeneralNote
IGESDimen_HArray1OfGeneralNote_swigregister = _IGESDimen.IGESDimen_HArray1OfGeneralNote_swigregister
IGESDimen_HArray1OfGeneralNote_swigregister(IGESDimen_HArray1OfGeneralNote)

def IGESDimen_HArray1OfGeneralNote_get_type_name(*args):
    """
    IGESDimen_HArray1OfGeneralNote_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDimen.IGESDimen_HArray1OfGeneralNote_get_type_name(*args)

def IGESDimen_HArray1OfGeneralNote_get_type_descriptor(*args):
    """
    IGESDimen_HArray1OfGeneralNote_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDimen.IGESDimen_HArray1OfGeneralNote_get_type_descriptor(*args)

class IGESDimen_GeneralNote(IGESData.IGESData_IGESEntity):
    """
    defines GeneralNote, Type <212> Form <0-8, 100-200, 105>
    in package IGESDimen
    Used for formatting boxed text in different ways
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDimen_GeneralNote
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDimen_GeneralNote(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDimen_GeneralNote self) -> IGESDimen_GeneralNote

        defines GeneralNote, Type <212> Form <0-8, 100-200, 105>
        in package IGESDimen
        Used for formatting boxed text in different ways
        """
        this = _IGESDimen.new_IGESDimen_GeneralNote(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDimen_GeneralNote self, Handle_TColStd_HArray1OfInteger nbChars, Handle_TColStd_HArray1OfReal widths, Handle_TColStd_HArray1OfReal heights, Handle_TColStd_HArray1OfInteger fontCodes, Handle_IGESGraph_HArray1OfTextFontDef fonts, Handle_TColStd_HArray1OfReal slants, Handle_TColStd_HArray1OfReal rotations, Handle_TColStd_HArray1OfInteger mirrorFlags, Handle_TColStd_HArray1OfInteger rotFlags, Handle_TColgp_HArray1OfXYZ start, Handle_Interface_HArray1OfHAsciiString texts)

        This method is used to set the fields of the class
        GeneralNote
        - nNbChars      : number of chars strings
        - widths        : Box widths
        - heights       : Box heights
        - fontCodes     : Font codes, default = 1
        - fonts         : Text Font Definition Entities
        - slants        : Slant angles in radians
        - rotations     : Rotation angles in radians
        - mirrorFlags   : Mirror flags
        - rotFlags      : Rotation internal text flags
        - start         : Text start points
        - texts         : Text strings
        raises exception if there is mismatch between the various
        Array Lengths.

        :type nbChars: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type widths: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type heights: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type fontCodes: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type fonts: OCC.wrapper.IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef
        :type slants: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type rotations: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type mirrorFlags: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type rotFlags: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type start: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfXYZ
        :type texts: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString

        """
        return _IGESDimen.IGESDimen_GeneralNote_Init(self, *args)


    def SetFormNumber(self, *args):
        """
        SetFormNumber(IGESDimen_GeneralNote self, Standard_Integer const form)

        Changes FormNumber (indicates Graphical Representation)
        Error if not in ranges [0-8] or [100-102] or 105

        :type form: int

        """
        return _IGESDimen.IGESDimen_GeneralNote_SetFormNumber(self, *args)


    def NbStrings(self, *args):
        """
        NbStrings(IGESDimen_GeneralNote self) -> Standard_Integer

        returns number of text strings in General Note

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_GeneralNote_NbStrings(self, *args)


    def NbCharacters(self, *args):
        """
        NbCharacters(IGESDimen_GeneralNote self, Standard_Integer const Index) -> Standard_Integer

        returns number of characters of string or zero
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_GeneralNote_NbCharacters(self, *args)


    def BoxWidth(self, *args):
        """
        BoxWidth(IGESDimen_GeneralNote self, Standard_Integer const Index) -> Standard_Real

        returns Box width of string
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_GeneralNote_BoxWidth(self, *args)


    def BoxHeight(self, *args):
        """
        BoxHeight(IGESDimen_GeneralNote self, Standard_Integer const Index) -> Standard_Real

        returns Box height of string
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_GeneralNote_BoxHeight(self, *args)


    def IsFontEntity(self, *args):
        """
        IsFontEntity(IGESDimen_GeneralNote self, Standard_Integer const Index) -> Standard_Boolean

        returns False if Value, True if Entity
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.IGESDimen_GeneralNote_IsFontEntity(self, *args)


    def FontCode(self, *args):
        """
        FontCode(IGESDimen_GeneralNote self, Standard_Integer const Index) -> Standard_Integer

        returns Font code (default = 1) of string
        returns 0 if IsFontEntity () is True
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_GeneralNote_FontCode(self, *args)


    def FontEntity(self, *args):
        """
        FontEntity(IGESDimen_GeneralNote self, Standard_Integer const Index) -> Handle_IGESGraph_TextFontDef

        returns Text Font Definition Entity of string
        returns a Null Handle if IsFontEntity () returns False
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextFontDef

        """
        return _IGESDimen.IGESDimen_GeneralNote_FontEntity(self, *args)


    def SlantAngle(self, *args):
        """
        SlantAngle(IGESDimen_GeneralNote self, Standard_Integer const Index) -> Standard_Real

        returns Slant angle of string in radians
        default value = PI/2
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_GeneralNote_SlantAngle(self, *args)


    def RotationAngle(self, *args):
        """
        RotationAngle(IGESDimen_GeneralNote self, Standard_Integer const Index) -> Standard_Real

        returns Rotation angle of string in radians
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_GeneralNote_RotationAngle(self, *args)


    def MirrorFlag(self, *args):
        """
        MirrorFlag(IGESDimen_GeneralNote self, Standard_Integer const Index) -> Standard_Integer

        returns Mirror Flag of string
        0 = no mirroring
        1 = mirror axis is perpendicular to the text base line
        2 = mirror axis is text base line
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_GeneralNote_MirrorFlag(self, *args)


    def RotateFlag(self, *args):
        """
        RotateFlag(IGESDimen_GeneralNote self, Standard_Integer const Index) -> Standard_Integer

        returns Rotate internal text Flag of string
        0 = text horizontal
        1 = text vertical
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_GeneralNote_RotateFlag(self, *args)


    def StartPoint(self, *args):
        """
        StartPoint(IGESDimen_GeneralNote self, Standard_Integer const Index) -> gp_Pnt

        returns text start point of Index'th string
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.IGESDimen_GeneralNote_StartPoint(self, *args)


    def TransformedStartPoint(self, *args):
        """
        TransformedStartPoint(IGESDimen_GeneralNote self, Standard_Integer const Index) -> gp_Pnt

        returns text start point of Index'th string after Transformation
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.IGESDimen_GeneralNote_TransformedStartPoint(self, *args)


    def ZDepthStartPoint(self, *args):
        """
        ZDepthStartPoint(IGESDimen_GeneralNote self, Standard_Integer const Index) -> Standard_Real

        returns distance from Start Point plane of string
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_GeneralNote_ZDepthStartPoint(self, *args)


    def Text(self, *args):
        """
        Text(IGESDimen_GeneralNote self, Standard_Integer const Index) -> Handle_TCollection_HAsciiString

        returns text string
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.IGESDimen_GeneralNote_Text(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDimen.IGESDimen_GeneralNote_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDimen.IGESDimen_GeneralNote_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.IGESDimen_GeneralNote_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDimen.delete_IGESDimen_GeneralNote
IGESDimen_GeneralNote_swigregister = _IGESDimen.IGESDimen_GeneralNote_swigregister
IGESDimen_GeneralNote_swigregister(IGESDimen_GeneralNote)

def IGESDimen_GeneralNote_get_type_name(*args):
    """
    IGESDimen_GeneralNote_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDimen.IGESDimen_GeneralNote_get_type_name(*args)

def IGESDimen_GeneralNote_get_type_descriptor(*args):
    """
    IGESDimen_GeneralNote_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDimen.IGESDimen_GeneralNote_get_type_descriptor(*args)

class IGESDimen_DimensionTolerance(IGESData.IGESData_IGESEntity):
    """
    defines Dimension Tolerance, Type <406>, Form <29>
    in package IGESDimen
    Provides tolerance information for a dimension which
    can be used by the receiving system to regenerate the
    dimension.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDimen_DimensionTolerance
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDimen_DimensionTolerance(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDimen_DimensionTolerance self) -> IGESDimen_DimensionTolerance

        defines Dimension Tolerance, Type <406>, Form <29>
        in package IGESDimen
        Provides tolerance information for a dimension which
        can be used by the receiving system to regenerate the
        dimension.
        """
        this = _IGESDimen.new_IGESDimen_DimensionTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDimen_DimensionTolerance self, Standard_Integer const nbPropVal, Standard_Integer const aSecTolFlag, Standard_Integer const aTolType, Standard_Integer const aTolPlaceFlag, Standard_Real const anUpperTol, Standard_Real const aLowerTol, Standard_Boolean const aSignFlag, Standard_Integer const aFracFlag, Standard_Integer const aPrecision)

        This method is used to set the fields of the class
        DimensionTolerance
        - nbPropVal     : Number of property values, default = 8
        - aSecTolFlag   : Secondary Tolerance Flag
        0 = Applies to primary dimension
        1 = Applies to secondary dimension
        2 = Display values as fractions
        - aTolType      : Tolerance Type
        1  = Bilateral
        2  = Upper/Lower
        3  = Unilateral Upper
        4  = Unilateral Lower
        5  = Range - min before max
        6  = Range - min after max
        7  = Range - min above max
        8  = Range - min below max
        9  = Nominal + Range - min above max
        10 = Nominal + Range - min below max
        - aTolPlaceFlag : Tolerance Placement Flag
        1 = Before nominal value
        2 = After nominal value
        3 = Above nominal value
        4 = Below nominal value
        - anUpperTol    : Upper Tolerance
        - aLowerTol     : Lower Tolerance
        - aSignFlag     : Sign Suppression Flag
        - aFracFlag     : Fraction Flag
        0 = Display values as decimal numbers
        1 = Display values as mixed fractions
        2 = Display values as fractions
        - aPrecision    : Precision Value

        :type nbPropVal: int
        :type aSecTolFlag: int
        :type aTolType: int
        :type aTolPlaceFlag: int
        :type anUpperTol: float
        :type aLowerTol: float
        :type aSignFlag: bool
        :type aFracFlag: int
        :type aPrecision: int

        """
        return _IGESDimen.IGESDimen_DimensionTolerance_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(IGESDimen_DimensionTolerance self) -> Standard_Integer

        returns the number of property values, always = 8

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_DimensionTolerance_NbPropertyValues(self, *args)


    def SecondaryToleranceFlag(self, *args):
        """
        SecondaryToleranceFlag(IGESDimen_DimensionTolerance self) -> Standard_Integer

        returns the Secondary Tolerance Flag

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_DimensionTolerance_SecondaryToleranceFlag(self, *args)


    def ToleranceType(self, *args):
        """
        ToleranceType(IGESDimen_DimensionTolerance self) -> Standard_Integer

        returns the Tolerance Type

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_DimensionTolerance_ToleranceType(self, *args)


    def TolerancePlacementFlag(self, *args):
        """
        TolerancePlacementFlag(IGESDimen_DimensionTolerance self) -> Standard_Integer

        returns the Tolerance Placement Flag, default = 2

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_DimensionTolerance_TolerancePlacementFlag(self, *args)


    def UpperTolerance(self, *args):
        """
        UpperTolerance(IGESDimen_DimensionTolerance self) -> Standard_Real

        returns the Upper or Bilateral Tolerance Value

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_DimensionTolerance_UpperTolerance(self, *args)


    def LowerTolerance(self, *args):
        """
        LowerTolerance(IGESDimen_DimensionTolerance self) -> Standard_Real

        returns the Lower Tolerance Value

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_DimensionTolerance_LowerTolerance(self, *args)


    def SignSuppressionFlag(self, *args):
        """
        SignSuppressionFlag(IGESDimen_DimensionTolerance self) -> Standard_Boolean

        returns the Sign Suppression Flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.IGESDimen_DimensionTolerance_SignSuppressionFlag(self, *args)


    def FractionFlag(self, *args):
        """
        FractionFlag(IGESDimen_DimensionTolerance self) -> Standard_Integer

        returns the Fraction Flag

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_DimensionTolerance_FractionFlag(self, *args)


    def Precision(self, *args):
        """
        Precision(IGESDimen_DimensionTolerance self) -> Standard_Integer

        returns the Precision for Value Display

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_DimensionTolerance_Precision(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDimen.IGESDimen_DimensionTolerance_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDimen.IGESDimen_DimensionTolerance_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.IGESDimen_DimensionTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDimen.delete_IGESDimen_DimensionTolerance
IGESDimen_DimensionTolerance_swigregister = _IGESDimen.IGESDimen_DimensionTolerance_swigregister
IGESDimen_DimensionTolerance_swigregister(IGESDimen_DimensionTolerance)

def IGESDimen_DimensionTolerance_get_type_name(*args):
    """
    IGESDimen_DimensionTolerance_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDimen.IGESDimen_DimensionTolerance_get_type_name(*args)

def IGESDimen_DimensionTolerance_get_type_descriptor(*args):
    """
    IGESDimen_DimensionTolerance_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDimen.IGESDimen_DimensionTolerance_get_type_descriptor(*args)

class IGESDimen_LinearDimension(IGESData.IGESData_IGESEntity):
    """
    defines LinearDimension, Type <216> Form <0>
    in package IGESDimen
    Used for linear dimensioning
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDimen_LinearDimension
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDimen_LinearDimension(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDimen_LinearDimension self) -> IGESDimen_LinearDimension

        defines LinearDimension, Type <216> Form <0>
        in package IGESDimen
        Used for linear dimensioning
        """
        this = _IGESDimen.new_IGESDimen_LinearDimension(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDimen_LinearDimension self, Handle_IGESDimen_GeneralNote aNote, Handle_IGESDimen_LeaderArrow aLeader, Handle_IGESDimen_LeaderArrow anotherLeader, Handle_IGESDimen_WitnessLine aWitness, Handle_IGESDimen_WitnessLine anotherWitness)

        This method is used to set the fields of the class
        LinearDimension
        - aNote          : General Note Entity
        - aLeader        : First Leader Entity
        - anotherLeader  : Second Leader Entity
        - aWitness       : First Witness Line Entity or a Null
        Handle
        - anotherWitness : Second Witness Line Entity or a Null
        Handle

        :type aNote: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote
        :type aLeader: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow
        :type anotherLeader: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow
        :type aWitness: OCC.wrapper.IGESDimen.Handle_IGESDimen_WitnessLine
        :type anotherWitness: OCC.wrapper.IGESDimen.Handle_IGESDimen_WitnessLine

        """
        return _IGESDimen.IGESDimen_LinearDimension_Init(self, *args)


    def SetFormNumber(self, *args):
        """
        SetFormNumber(IGESDimen_LinearDimension self, Standard_Integer const form)

        Changes FormNumber (indicates the Nature of the Dimension
        Unspecified, Diameter or Radius)
        Error if not in range [0-2]

        :type form: int

        """
        return _IGESDimen.IGESDimen_LinearDimension_SetFormNumber(self, *args)


    def Note(self, *args):
        """
        Note(IGESDimen_LinearDimension self) -> Handle_IGESDimen_GeneralNote

        returns General Note Entity

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote

        """
        return _IGESDimen.IGESDimen_LinearDimension_Note(self, *args)


    def FirstLeader(self, *args):
        """
        FirstLeader(IGESDimen_LinearDimension self) -> Handle_IGESDimen_LeaderArrow

        returns first Leader Entity

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow

        """
        return _IGESDimen.IGESDimen_LinearDimension_FirstLeader(self, *args)


    def SecondLeader(self, *args):
        """
        SecondLeader(IGESDimen_LinearDimension self) -> Handle_IGESDimen_LeaderArrow

        returns second Leader Entity

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow

        """
        return _IGESDimen.IGESDimen_LinearDimension_SecondLeader(self, *args)


    def HasFirstWitness(self, *args):
        """
        HasFirstWitness(IGESDimen_LinearDimension self) -> Standard_Boolean

        returns False if no first witness line

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.IGESDimen_LinearDimension_HasFirstWitness(self, *args)


    def FirstWitness(self, *args):
        """
        FirstWitness(IGESDimen_LinearDimension self) -> Handle_IGESDimen_WitnessLine

        returns first Witness Line Entity or a Null Handle

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_WitnessLine

        """
        return _IGESDimen.IGESDimen_LinearDimension_FirstWitness(self, *args)


    def HasSecondWitness(self, *args):
        """
        HasSecondWitness(IGESDimen_LinearDimension self) -> Standard_Boolean

        returns False if no second witness line

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.IGESDimen_LinearDimension_HasSecondWitness(self, *args)


    def SecondWitness(self, *args):
        """
        SecondWitness(IGESDimen_LinearDimension self) -> Handle_IGESDimen_WitnessLine

        returns second Witness Line Entity or a Null Handle

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_WitnessLine

        """
        return _IGESDimen.IGESDimen_LinearDimension_SecondWitness(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDimen.IGESDimen_LinearDimension_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDimen.IGESDimen_LinearDimension_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.IGESDimen_LinearDimension_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDimen.delete_IGESDimen_LinearDimension
IGESDimen_LinearDimension_swigregister = _IGESDimen.IGESDimen_LinearDimension_swigregister
IGESDimen_LinearDimension_swigregister(IGESDimen_LinearDimension)

def IGESDimen_LinearDimension_get_type_name(*args):
    """
    IGESDimen_LinearDimension_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDimen.IGESDimen_LinearDimension_get_type_name(*args)

def IGESDimen_LinearDimension_get_type_descriptor(*args):
    """
    IGESDimen_LinearDimension_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDimen.IGESDimen_LinearDimension_get_type_descriptor(*args)

class IGESDimen_PointDimension(IGESData.IGESData_IGESEntity):
    """
    defines IGES Point Dimension, Type <220> Form <0>,
    in package IGESDimen
    A Point Dimension Entity consists of a leader, text, and
    an optional circle or hexagon enclosing the text
    IGES specs for this entity mention SimpleClosedPlanarCurve
    Entity(106/63)which is not listed in LIST.Text In the sequel
    we have ignored this & considered only the other two entity
    for representing the hexagon or circle enclosing the text.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDimen_PointDimension
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDimen_PointDimension(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDimen_PointDimension self) -> IGESDimen_PointDimension

        defines IGES Point Dimension, Type <220> Form <0>,
        in package IGESDimen
        A Point Dimension Entity consists of a leader, text, and
        an optional circle or hexagon enclosing the text
        IGES specs for this entity mention SimpleClosedPlanarCurve
        Entity(106/63)which is not listed in LIST.Text In the sequel
        we have ignored this & considered only the other two entity
        for representing the hexagon or circle enclosing the text.
        """
        this = _IGESDimen.new_IGESDimen_PointDimension(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDimen_PointDimension self, Handle_IGESDimen_GeneralNote aNote, Handle_IGESDimen_LeaderArrow anArrow, Handle_IGESData_IGESEntity aGeom)

        :type aNote: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote
        :type anArrow: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow
        :type aGeom: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.IGESDimen_PointDimension_Init(self, *args)


    def Note(self, *args):
        """
        Note(IGESDimen_PointDimension self) -> Handle_IGESDimen_GeneralNote

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote

        """
        return _IGESDimen.IGESDimen_PointDimension_Note(self, *args)


    def LeaderArrow(self, *args):
        """
        LeaderArrow(IGESDimen_PointDimension self) -> Handle_IGESDimen_LeaderArrow

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow

        """
        return _IGESDimen.IGESDimen_PointDimension_LeaderArrow(self, *args)


    def GeomCase(self, *args):
        """
        GeomCase(IGESDimen_PointDimension self) -> Standard_Integer

        returns the type of geometric entity.
        0 if no hexagon or circle encloses the text
        1 if CircularArc
        2 if CompositeCurve
        3 otherwise

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_PointDimension_GeomCase(self, *args)


    def Geom(self, *args):
        """
        Geom(IGESDimen_PointDimension self) -> Handle_IGESData_IGESEntity

        returns the Geometry Entity, Null handle if GeomCase(me) .eq. 0

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.IGESDimen_PointDimension_Geom(self, *args)


    def CircularArc(self, *args):
        """
        CircularArc(IGESDimen_PointDimension self) -> Handle_IGESGeom_CircularArc

        returns Null handle if GeomCase(me) .ne. 1

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_CircularArc

        """
        return _IGESDimen.IGESDimen_PointDimension_CircularArc(self, *args)


    def CompositeCurve(self, *args):
        """
        CompositeCurve(IGESDimen_PointDimension self) -> Handle_IGESGeom_CompositeCurve

        returns Null handle if GeomCase(me) .ne. 2

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_CompositeCurve

        """
        return _IGESDimen.IGESDimen_PointDimension_CompositeCurve(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDimen.IGESDimen_PointDimension_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDimen.IGESDimen_PointDimension_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.IGESDimen_PointDimension_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDimen.delete_IGESDimen_PointDimension
IGESDimen_PointDimension_swigregister = _IGESDimen.IGESDimen_PointDimension_swigregister
IGESDimen_PointDimension_swigregister(IGESDimen_PointDimension)

def IGESDimen_PointDimension_get_type_name(*args):
    """
    IGESDimen_PointDimension_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDimen.IGESDimen_PointDimension_get_type_name(*args)

def IGESDimen_PointDimension_get_type_descriptor(*args):
    """
    IGESDimen_PointDimension_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDimen.IGESDimen_PointDimension_get_type_descriptor(*args)

class IGESDimen_NewGeneralNote(IGESData.IGESData_IGESEntity):
    """
    defines NewGeneralNote, Type <213> Form <0>
    in package IGESDimen
    Further attributes for formatting text strings
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDimen_NewGeneralNote
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDimen_NewGeneralNote(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDimen_NewGeneralNote self) -> IGESDimen_NewGeneralNote

        defines NewGeneralNote, Type <213> Form <0>
        in package IGESDimen
        Further attributes for formatting text strings
        """
        this = _IGESDimen.new_IGESDimen_NewGeneralNote(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDimen_NewGeneralNote self, Standard_Real const width, Standard_Real const height, Standard_Integer const justifyCode, gp_XYZ areaLoc, Standard_Real const areaRotationAngle, gp_XYZ baseLinePos, Standard_Real const normalInterlineSpace, Handle_TColStd_HArray1OfInteger charDisplays, Handle_TColStd_HArray1OfReal charWidths, Handle_TColStd_HArray1OfReal charHeights, Handle_TColStd_HArray1OfReal interCharSpc, Handle_TColStd_HArray1OfReal interLineSpc, Handle_TColStd_HArray1OfInteger fontStyles, Handle_TColStd_HArray1OfReal charAngles, Handle_Interface_HArray1OfHAsciiString controlCodeStrings, Handle_TColStd_HArray1OfInteger nbChars, Handle_TColStd_HArray1OfReal boxWidths, Handle_TColStd_HArray1OfReal boxHeights, Handle_TColStd_HArray1OfInteger charSetCodes, Handle_IGESData_HArray1OfIGESEntity charSetEntities, Handle_TColStd_HArray1OfReal slAngles, Handle_TColStd_HArray1OfReal rotAngles, Handle_TColStd_HArray1OfInteger mirrorFlags, Handle_TColStd_HArray1OfInteger rotateFlags, Handle_TColgp_HArray1OfXYZ startPoints, Handle_Interface_HArray1OfHAsciiString texts)

        This method is used to set the fields of the class
        NewGeneralNote
        - width                : Width of text containment area
        - height               : Height of text containment area
        - justifyCode          : Justification code
        - areaLoc              : Text containment area location
        - areaRotationAngle    : Text containment area rotation
        - baseLinePos          : Base line position
        - normalInterlineSpace : Normal interline spacing
        - charDisplays         : Character display type
        - charWidths           : Character width
        - charHeights          : Character height
        - interCharSpc         : Intercharacter spacing
        - interLineSpc         : Interline spacing
        - fontStyles           : Font style
        - charAngles           : Character angle
        - controlCodeStrings   : Control Code string
        - nbChars              : Number of characters in string
        - boxWidths            : Box width
        - boxHeights           : Box height
        - charSetCodes         : Character Set Interpretation
        - charSetEntities      : Character Set Font
        - slAngles             : Slant angle of text in radians
        - rotAngles            : Rotation angle of text in radians
        - mirrorFlags          : Type of mirroring
        - rotateFlags          : Rotate internal text flag
        - startPoints          : Text start point
        - texts                : Text strings
        raises exception if there is mismatch between the various
        Array Lengths.

        :type width: float
        :type height: float
        :type justifyCode: int
        :type areaLoc: OCC.wrapper.gp.gp_XYZ
        :type areaRotationAngle: float
        :type baseLinePos: OCC.wrapper.gp.gp_XYZ
        :type normalInterlineSpace: float
        :type charDisplays: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type charWidths: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type charHeights: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type interCharSpc: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type interLineSpc: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type fontStyles: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type charAngles: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type controlCodeStrings: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString
        :type nbChars: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type boxWidths: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type boxHeights: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type charSetCodes: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type charSetEntities: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity
        :type slAngles: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type rotAngles: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type mirrorFlags: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type rotateFlags: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type startPoints: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfXYZ
        :type texts: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString

        """
        return _IGESDimen.IGESDimen_NewGeneralNote_Init(self, *args)


    def TextWidth(self, *args):
        """
        TextWidth(IGESDimen_NewGeneralNote self) -> Standard_Real

        returns width of text containment area of all strings in the note

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_NewGeneralNote_TextWidth(self, *args)


    def TextHeight(self, *args):
        """
        TextHeight(IGESDimen_NewGeneralNote self) -> Standard_Real

        returns height of text containment area of all strings in the note

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_NewGeneralNote_TextHeight(self, *args)


    def JustifyCode(self, *args):
        """
        JustifyCode(IGESDimen_NewGeneralNote self) -> Standard_Integer

        returns Justification code of all strings within the note
        0 = no justification
        1 = right justified
        2 = center justified
        3 = left justified

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_NewGeneralNote_JustifyCode(self, *args)


    def AreaLocation(self, *args):
        """
        AreaLocation(IGESDimen_NewGeneralNote self) -> gp_Pnt

        returns Text containment area Location point

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.IGESDimen_NewGeneralNote_AreaLocation(self, *args)


    def TransformedAreaLocation(self, *args):
        """
        TransformedAreaLocation(IGESDimen_NewGeneralNote self) -> gp_Pnt

        returns Text containment area Location point after Transformation

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.IGESDimen_NewGeneralNote_TransformedAreaLocation(self, *args)


    def ZDepthAreaLocation(self, *args):
        """
        ZDepthAreaLocation(IGESDimen_NewGeneralNote self) -> Standard_Real

        returns distance from the containment area plane

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_NewGeneralNote_ZDepthAreaLocation(self, *args)


    def AreaRotationAngle(self, *args):
        """
        AreaRotationAngle(IGESDimen_NewGeneralNote self) -> Standard_Real

        returns rotation angle of text containment area in radians

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_NewGeneralNote_AreaRotationAngle(self, *args)


    def BaseLinePosition(self, *args):
        """
        BaseLinePosition(IGESDimen_NewGeneralNote self) -> gp_Pnt

        returns position of first base line

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.IGESDimen_NewGeneralNote_BaseLinePosition(self, *args)


    def TransformedBaseLinePosition(self, *args):
        """
        TransformedBaseLinePosition(IGESDimen_NewGeneralNote self) -> gp_Pnt

        returns position of first base line after Transformation

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.IGESDimen_NewGeneralNote_TransformedBaseLinePosition(self, *args)


    def ZDepthBaseLinePosition(self, *args):
        """
        ZDepthBaseLinePosition(IGESDimen_NewGeneralNote self) -> Standard_Real

        returns distance from the Base line position plane

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_NewGeneralNote_ZDepthBaseLinePosition(self, *args)


    def NormalInterlineSpace(self, *args):
        """
        NormalInterlineSpace(IGESDimen_NewGeneralNote self) -> Standard_Real

        returns Normal Interline Spacing

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_NewGeneralNote_NormalInterlineSpace(self, *args)


    def NbStrings(self, *args):
        """
        NbStrings(IGESDimen_NewGeneralNote self) -> Standard_Integer

        returns number of text HAsciiStrings

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_NewGeneralNote_NbStrings(self, *args)


    def CharacterDisplay(self, *args):
        """
        CharacterDisplay(IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Standard_Integer

        returns Fixed/Variable width character display of string
        0 = Fixed
        1 = Variable
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_NewGeneralNote_CharacterDisplay(self, *args)


    def IsVariable(self, *args):
        """
        IsVariable(IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Standard_Boolean

        returns False if Character display width is Fixed
        optional method, if required
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.IGESDimen_NewGeneralNote_IsVariable(self, *args)


    def CharacterWidth(self, *args):
        """
        CharacterWidth(IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Standard_Real

        returns Character Width of string
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_NewGeneralNote_CharacterWidth(self, *args)


    def CharacterHeight(self, *args):
        """
        CharacterHeight(IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Standard_Real

        returns Character Height of string
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_NewGeneralNote_CharacterHeight(self, *args)


    def InterCharacterSpace(self, *args):
        """
        InterCharacterSpace(IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Standard_Real

        returns Inter-character spacing of string
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_NewGeneralNote_InterCharacterSpace(self, *args)


    def InterlineSpace(self, *args):
        """
        InterlineSpace(IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Standard_Real

        returns Interline spacing of string
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_NewGeneralNote_InterlineSpace(self, *args)


    def FontStyle(self, *args):
        """
        FontStyle(IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Standard_Integer

        returns FontStyle of string
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_NewGeneralNote_FontStyle(self, *args)


    def CharacterAngle(self, *args):
        """
        CharacterAngle(IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Standard_Real

        returns CharacterAngle of string
        Angle returned will be between 0 and 2PI
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_NewGeneralNote_CharacterAngle(self, *args)


    def ControlCodeString(self, *args):
        """
        ControlCodeString(IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Handle_TCollection_HAsciiString

        returns ControlCodeString of string
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.IGESDimen_NewGeneralNote_ControlCodeString(self, *args)


    def NbCharacters(self, *args):
        """
        NbCharacters(IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Standard_Integer

        returns number of characters in string or zero
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_NewGeneralNote_NbCharacters(self, *args)


    def BoxWidth(self, *args):
        """
        BoxWidth(IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Standard_Real

        returns Box width of string
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_NewGeneralNote_BoxWidth(self, *args)


    def BoxHeight(self, *args):
        """
        BoxHeight(IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Standard_Real

        returns Box height of string
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_NewGeneralNote_BoxHeight(self, *args)


    def IsCharSetEntity(self, *args):
        """
        IsCharSetEntity(IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Standard_Boolean

        returns False if Value, True if Pointer (Entity)
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.IGESDimen_NewGeneralNote_IsCharSetEntity(self, *args)


    def CharSetCode(self, *args):
        """
        CharSetCode(IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Standard_Integer

        returns Character Set Interpretation (default = 1) of string
        returns 0 if IsCharSetEntity () is True
        1 = Standard ASCII
        1001 = Symbol Font1
        1002 = Symbol Font2
        1003 = Symbol Font3
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_NewGeneralNote_CharSetCode(self, *args)


    def CharSetEntity(self, *args):
        """
        CharSetEntity(IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns Character Set Interpretation of string
        returns a Null Handle if IsCharSetEntity () is False
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.IGESDimen_NewGeneralNote_CharSetEntity(self, *args)


    def SlantAngle(self, *args):
        """
        SlantAngle(IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Standard_Real

        returns Slant angle of string in radians
        default value = PI/2
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_NewGeneralNote_SlantAngle(self, *args)


    def RotationAngle(self, *args):
        """
        RotationAngle(IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Standard_Real

        returns Rotation angle of string in radians
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_NewGeneralNote_RotationAngle(self, *args)


    def MirrorFlag(self, *args):
        """
        MirrorFlag(IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Standard_Integer

        returns Mirror Flag of string
        0 = no mirroring
        1 = mirror axis is perpendicular to the text base line
        2 = mirror axis is text base line
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_NewGeneralNote_MirrorFlag(self, *args)


    def IsMirrored(self, *args):
        """
        IsMirrored(IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Standard_Boolean

        returns False if MirrorFlag = 0. ie. no mirroring
        else returns True
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.IGESDimen_NewGeneralNote_IsMirrored(self, *args)


    def RotateFlag(self, *args):
        """
        RotateFlag(IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Standard_Integer

        returns Rotate internal text Flag of string
        0 = text horizontal
        1 = text vertical
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_NewGeneralNote_RotateFlag(self, *args)


    def StartPoint(self, *args):
        """
        StartPoint(IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> gp_Pnt

        returns text start point of string
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.IGESDimen_NewGeneralNote_StartPoint(self, *args)


    def TransformedStartPoint(self, *args):
        """
        TransformedStartPoint(IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> gp_Pnt

        returns text start point of string after Transformation
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.IGESDimen_NewGeneralNote_TransformedStartPoint(self, *args)


    def ZDepthStartPoint(self, *args):
        """
        ZDepthStartPoint(IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Standard_Real

        returns distance from the start point plane
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_NewGeneralNote_ZDepthStartPoint(self, *args)


    def Text(self, *args):
        """
        Text(IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Handle_TCollection_HAsciiString

        returns text string
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.IGESDimen_NewGeneralNote_Text(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDimen.IGESDimen_NewGeneralNote_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDimen.IGESDimen_NewGeneralNote_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.IGESDimen_NewGeneralNote_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDimen.delete_IGESDimen_NewGeneralNote
IGESDimen_NewGeneralNote_swigregister = _IGESDimen.IGESDimen_NewGeneralNote_swigregister
IGESDimen_NewGeneralNote_swigregister(IGESDimen_NewGeneralNote)

def IGESDimen_NewGeneralNote_get_type_name(*args):
    """
    IGESDimen_NewGeneralNote_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDimen.IGESDimen_NewGeneralNote_get_type_name(*args)

def IGESDimen_NewGeneralNote_get_type_descriptor(*args):
    """
    IGESDimen_NewGeneralNote_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDimen.IGESDimen_NewGeneralNote_get_type_descriptor(*args)

class IGESDimen_GeneralLabel(IGESData.IGESData_IGESEntity):
    """
    defines GeneralLabel, Type <210> Form <0>
    in package IGESDimen
    Used for general labeling with leaders
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDimen_GeneralLabel
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDimen_GeneralLabel(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDimen_GeneralLabel self) -> IGESDimen_GeneralLabel

        defines GeneralLabel, Type <210> Form <0>
        in package IGESDimen
        Used for general labeling with leaders
        """
        this = _IGESDimen.new_IGESDimen_GeneralLabel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDimen_GeneralLabel self, Handle_IGESDimen_GeneralNote aNote, Handle_IGESDimen_HArray1OfLeaderArrow someLeaders)

        This method is used to set the fields of the class
        GeneralLabel
        - aNote       : General Note Entity
        - someLeaders : Associated Leader Entities

        :type aNote: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote
        :type someLeaders: OCC.wrapper.IGESDimen.Handle_IGESDimen_HArray1OfLeaderArrow

        """
        return _IGESDimen.IGESDimen_GeneralLabel_Init(self, *args)


    def Note(self, *args):
        """
        Note(IGESDimen_GeneralLabel self) -> Handle_IGESDimen_GeneralNote

        returns General Note Entity

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote

        """
        return _IGESDimen.IGESDimen_GeneralLabel_Note(self, *args)


    def NbLeaders(self, *args):
        """
        NbLeaders(IGESDimen_GeneralLabel self) -> Standard_Integer

        returns Number of Leaders

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_GeneralLabel_NbLeaders(self, *args)


    def Leader(self, *args):
        """
        Leader(IGESDimen_GeneralLabel self, Standard_Integer const Index) -> Handle_IGESDimen_LeaderArrow

        returns Leader Entity
        raises exception if Index <= 0 or Index > NbLeaders()

        :type Index: int
        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow

        """
        return _IGESDimen.IGESDimen_GeneralLabel_Leader(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDimen.IGESDimen_GeneralLabel_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDimen.IGESDimen_GeneralLabel_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.IGESDimen_GeneralLabel_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDimen.delete_IGESDimen_GeneralLabel
IGESDimen_GeneralLabel_swigregister = _IGESDimen.IGESDimen_GeneralLabel_swigregister
IGESDimen_GeneralLabel_swigregister(IGESDimen_GeneralLabel)

def IGESDimen_GeneralLabel_get_type_name(*args):
    """
    IGESDimen_GeneralLabel_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDimen.IGESDimen_GeneralLabel_get_type_name(*args)

def IGESDimen_GeneralLabel_get_type_descriptor(*args):
    """
    IGESDimen_GeneralLabel_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDimen.IGESDimen_GeneralLabel_get_type_descriptor(*args)

class IGESDimen_CurveDimension(IGESData.IGESData_IGESEntity):
    """
    defines CurveDimension, Type <204> Form <0>
    in package IGESDimen
    Used to dimension curves
    Consists of one tail segment of nonzero length
    beginning with an arrowhead and which serves to define
    the orientation
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDimen_CurveDimension
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDimen_CurveDimension(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDimen_CurveDimension self) -> IGESDimen_CurveDimension

        defines CurveDimension, Type <204> Form <0>
        in package IGESDimen
        Used to dimension curves
        Consists of one tail segment of nonzero length
        beginning with an arrowhead and which serves to define
        the orientation
        """
        this = _IGESDimen.new_IGESDimen_CurveDimension(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDimen_CurveDimension self, Handle_IGESDimen_GeneralNote aNote, Handle_IGESData_IGESEntity aCurve, Handle_IGESData_IGESEntity anotherCurve, Handle_IGESDimen_LeaderArrow aLeader, Handle_IGESDimen_LeaderArrow anotherLeader, Handle_IGESDimen_WitnessLine aLine, Handle_IGESDimen_WitnessLine anotherLine)

        This method is used to set the fields of the class
        CurveDimension
        - aNote         : General Note Entity
        - aCurve        : First Curve Entity
        - anotherCurve  : Second Curve Entity or a Null Handle
        - aLeader       : First Leader Entity
        - anotherLeader : Second Leader Entity
        - aLine         : First Witness Line Entity or a Null
        Handle
        - anotherLine   : Second Witness Line Entity or a Null
        Handle

        :type aNote: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote
        :type aCurve: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type anotherCurve: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type aLeader: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow
        :type anotherLeader: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow
        :type aLine: OCC.wrapper.IGESDimen.Handle_IGESDimen_WitnessLine
        :type anotherLine: OCC.wrapper.IGESDimen.Handle_IGESDimen_WitnessLine

        """
        return _IGESDimen.IGESDimen_CurveDimension_Init(self, *args)


    def Note(self, *args):
        """
        Note(IGESDimen_CurveDimension self) -> Handle_IGESDimen_GeneralNote

        returns the General Note Entity

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote

        """
        return _IGESDimen.IGESDimen_CurveDimension_Note(self, *args)


    def FirstCurve(self, *args):
        """
        FirstCurve(IGESDimen_CurveDimension self) -> Handle_IGESData_IGESEntity

        returns the First curve Entity

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.IGESDimen_CurveDimension_FirstCurve(self, *args)


    def HasSecondCurve(self, *args):
        """
        HasSecondCurve(IGESDimen_CurveDimension self) -> Standard_Boolean

        returns False if theSecondCurve is a Null Handle.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.IGESDimen_CurveDimension_HasSecondCurve(self, *args)


    def SecondCurve(self, *args):
        """
        SecondCurve(IGESDimen_CurveDimension self) -> Handle_IGESData_IGESEntity

        returns the Second curve Entity or a Null Handle.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.IGESDimen_CurveDimension_SecondCurve(self, *args)


    def FirstLeader(self, *args):
        """
        FirstLeader(IGESDimen_CurveDimension self) -> Handle_IGESDimen_LeaderArrow

        returns the First Leader Entity

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow

        """
        return _IGESDimen.IGESDimen_CurveDimension_FirstLeader(self, *args)


    def SecondLeader(self, *args):
        """
        SecondLeader(IGESDimen_CurveDimension self) -> Handle_IGESDimen_LeaderArrow

        returns the Second Leader Entity

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow

        """
        return _IGESDimen.IGESDimen_CurveDimension_SecondLeader(self, *args)


    def HasFirstWitnessLine(self, *args):
        """
        HasFirstWitnessLine(IGESDimen_CurveDimension self) -> Standard_Boolean

        returns False if theFirstWitnessLine is a Null Handle.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.IGESDimen_CurveDimension_HasFirstWitnessLine(self, *args)


    def FirstWitnessLine(self, *args):
        """
        FirstWitnessLine(IGESDimen_CurveDimension self) -> Handle_IGESDimen_WitnessLine

        returns the First Witness Line Entity or a Null Handle.

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_WitnessLine

        """
        return _IGESDimen.IGESDimen_CurveDimension_FirstWitnessLine(self, *args)


    def HasSecondWitnessLine(self, *args):
        """
        HasSecondWitnessLine(IGESDimen_CurveDimension self) -> Standard_Boolean

        returns False if theSecondWitnessLine is a Null Handle.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.IGESDimen_CurveDimension_HasSecondWitnessLine(self, *args)


    def SecondWitnessLine(self, *args):
        """
        SecondWitnessLine(IGESDimen_CurveDimension self) -> Handle_IGESDimen_WitnessLine

        returns the Second Witness Line Entity or a Null Handle.

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_WitnessLine

        """
        return _IGESDimen.IGESDimen_CurveDimension_SecondWitnessLine(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDimen.IGESDimen_CurveDimension_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDimen.IGESDimen_CurveDimension_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.IGESDimen_CurveDimension_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDimen.delete_IGESDimen_CurveDimension
IGESDimen_CurveDimension_swigregister = _IGESDimen.IGESDimen_CurveDimension_swigregister
IGESDimen_CurveDimension_swigregister(IGESDimen_CurveDimension)

def IGESDimen_CurveDimension_get_type_name(*args):
    """
    IGESDimen_CurveDimension_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDimen.IGESDimen_CurveDimension_get_type_name(*args)

def IGESDimen_CurveDimension_get_type_descriptor(*args):
    """
    IGESDimen_CurveDimension_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDimen.IGESDimen_CurveDimension_get_type_descriptor(*args)

class IGESDimen_BasicDimension(IGESData.IGESData_IGESEntity):
    """
    Defines IGES Basic Dimension, Type 406, Form 31,
    in package IGESDimen
    The basic Dimension Property indicates that the referencing
    dimension entity is to be displayed with a box around text.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDimen_BasicDimension
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDimen_BasicDimension(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDimen_BasicDimension self) -> IGESDimen_BasicDimension

        Defines IGES Basic Dimension, Type 406, Form 31,
        in package IGESDimen
        The basic Dimension Property indicates that the referencing
        dimension entity is to be displayed with a box around text.
        """
        this = _IGESDimen.new_IGESDimen_BasicDimension(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDimen_BasicDimension self, Standard_Integer const nbPropVal, gp_XY lowerLeft, gp_XY lowerRight, gp_XY upperRight, gp_XY upperLeft)

        :type nbPropVal: int
        :type lowerLeft: OCC.wrapper.gp.gp_XY
        :type lowerRight: OCC.wrapper.gp.gp_XY
        :type upperRight: OCC.wrapper.gp.gp_XY
        :type upperLeft: OCC.wrapper.gp.gp_XY

        """
        return _IGESDimen.IGESDimen_BasicDimension_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(IGESDimen_BasicDimension self) -> Standard_Integer

        returns the number of properties = 8

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_BasicDimension_NbPropertyValues(self, *args)


    def LowerLeft(self, *args):
        """
        LowerLeft(IGESDimen_BasicDimension self) -> gp_Pnt2d

        returns coordinates of lower left corner

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESDimen.IGESDimen_BasicDimension_LowerLeft(self, *args)


    def LowerRight(self, *args):
        """
        LowerRight(IGESDimen_BasicDimension self) -> gp_Pnt2d

        returns coordinates of lower right corner

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESDimen.IGESDimen_BasicDimension_LowerRight(self, *args)


    def UpperRight(self, *args):
        """
        UpperRight(IGESDimen_BasicDimension self) -> gp_Pnt2d

        returns coordinates of upper right corner

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESDimen.IGESDimen_BasicDimension_UpperRight(self, *args)


    def UpperLeft(self, *args):
        """
        UpperLeft(IGESDimen_BasicDimension self) -> gp_Pnt2d

        returns coordinates of upper left corner

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESDimen.IGESDimen_BasicDimension_UpperLeft(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDimen.IGESDimen_BasicDimension_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDimen.IGESDimen_BasicDimension_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.IGESDimen_BasicDimension_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDimen.delete_IGESDimen_BasicDimension
IGESDimen_BasicDimension_swigregister = _IGESDimen.IGESDimen_BasicDimension_swigregister
IGESDimen_BasicDimension_swigregister(IGESDimen_BasicDimension)

def IGESDimen_BasicDimension_get_type_name(*args):
    """
    IGESDimen_BasicDimension_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDimen.IGESDimen_BasicDimension_get_type_name(*args)

def IGESDimen_BasicDimension_get_type_descriptor(*args):
    """
    IGESDimen_BasicDimension_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDimen.IGESDimen_BasicDimension_get_type_descriptor(*args)

class IGESDimen_HArray1OfLeaderArrow(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDimen_HArray1OfLeaderArrow
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDimen_HArray1OfLeaderArrow(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDimen_HArray1OfLeaderArrow self, Standard_Integer const theLower, Standard_Integer const theUpper) -> IGESDimen_HArray1OfLeaderArrow
        __init__(IGESDimen_HArray1OfLeaderArrow self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_IGESDimen_LeaderArrow theValue) -> IGESDimen_HArray1OfLeaderArrow
        __init__(IGESDimen_HArray1OfLeaderArrow self, NCollection_Array1_Handle_IGESDimen_LeaderArrow theOther) -> IGESDimen_HArray1OfLeaderArrow

        :type theOther: OCC.wrapper.IGESDimen.IGESDimen_Array1OfLeaderArrow

        """
        this = _IGESDimen.new_IGESDimen_HArray1OfLeaderArrow(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.IGESDimen.IGESDimen_Array1OfLeaderArrow

        """
        res = _IGESDimen.IGESDimen_HArray1OfLeaderArrow_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(IGESDimen_HArray1OfLeaderArrow self) -> NCollection_Array1_Handle_IGESDimen_LeaderArrow

        :rtype: OCC.wrapper.IGESDimen.IGESDimen_Array1OfLeaderArrow

        """
        return _IGESDimen.IGESDimen_HArray1OfLeaderArrow_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDimen.IGESDimen_HArray1OfLeaderArrow_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDimen.IGESDimen_HArray1OfLeaderArrow_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.IGESDimen_HArray1OfLeaderArrow_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDimen.delete_IGESDimen_HArray1OfLeaderArrow
IGESDimen_HArray1OfLeaderArrow_swigregister = _IGESDimen.IGESDimen_HArray1OfLeaderArrow_swigregister
IGESDimen_HArray1OfLeaderArrow_swigregister(IGESDimen_HArray1OfLeaderArrow)

def IGESDimen_HArray1OfLeaderArrow_get_type_name(*args):
    """
    IGESDimen_HArray1OfLeaderArrow_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDimen.IGESDimen_HArray1OfLeaderArrow_get_type_name(*args)

def IGESDimen_HArray1OfLeaderArrow_get_type_descriptor(*args):
    """
    IGESDimen_HArray1OfLeaderArrow_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDimen.IGESDimen_HArray1OfLeaderArrow_get_type_descriptor(*args)

class IGESDimen_DiameterDimension(IGESData.IGESData_IGESEntity):
    """
    defines DiameterDimension, Type <206> Form <0>
    in package IGESDimen
    Used for dimensioning diameters
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDimen_DiameterDimension
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDimen_DiameterDimension(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDimen_DiameterDimension self) -> IGESDimen_DiameterDimension

        defines DiameterDimension, Type <206> Form <0>
        in package IGESDimen
        Used for dimensioning diameters
        """
        this = _IGESDimen.new_IGESDimen_DiameterDimension(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDimen_DiameterDimension self, Handle_IGESDimen_GeneralNote aNote, Handle_IGESDimen_LeaderArrow aLeader, Handle_IGESDimen_LeaderArrow anotherLeader, gp_XY aCenter)

        This method is used to set the fields of the class
        DiameterDimension
        - aNote         : General Note Entity
        - aLeader       : First Leader Entity
        - anotherLeader : Second Leader Entity or a Null Handle.
        - aCenter       : Arc center coordinates

        :type aNote: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote
        :type aLeader: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow
        :type anotherLeader: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow
        :type aCenter: OCC.wrapper.gp.gp_XY

        """
        return _IGESDimen.IGESDimen_DiameterDimension_Init(self, *args)


    def Note(self, *args):
        """
        Note(IGESDimen_DiameterDimension self) -> Handle_IGESDimen_GeneralNote

        returns the General Note Entity

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote

        """
        return _IGESDimen.IGESDimen_DiameterDimension_Note(self, *args)


    def FirstLeader(self, *args):
        """
        FirstLeader(IGESDimen_DiameterDimension self) -> Handle_IGESDimen_LeaderArrow

        returns the First Leader Entity

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow

        """
        return _IGESDimen.IGESDimen_DiameterDimension_FirstLeader(self, *args)


    def HasSecondLeader(self, *args):
        """
        HasSecondLeader(IGESDimen_DiameterDimension self) -> Standard_Boolean

        returns False if theSecondleader is a Null Handle.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.IGESDimen_DiameterDimension_HasSecondLeader(self, *args)


    def SecondLeader(self, *args):
        """
        SecondLeader(IGESDimen_DiameterDimension self) -> Handle_IGESDimen_LeaderArrow

        returns the Second Leader Entity

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow

        """
        return _IGESDimen.IGESDimen_DiameterDimension_SecondLeader(self, *args)


    def Center(self, *args):
        """
        Center(IGESDimen_DiameterDimension self) -> gp_Pnt2d

        returns the Arc Center co-ordinates as Pnt2d from package gp

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESDimen.IGESDimen_DiameterDimension_Center(self, *args)


    def TransformedCenter(self, *args):
        """
        TransformedCenter(IGESDimen_DiameterDimension self) -> gp_Pnt2d

        returns the Arc Center co-ordinates as Pnt2d from package gp
        after Transformation. (Z = 0.0 for Transformation)

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESDimen.IGESDimen_DiameterDimension_TransformedCenter(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDimen.IGESDimen_DiameterDimension_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDimen.IGESDimen_DiameterDimension_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.IGESDimen_DiameterDimension_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDimen.delete_IGESDimen_DiameterDimension
IGESDimen_DiameterDimension_swigregister = _IGESDimen.IGESDimen_DiameterDimension_swigregister
IGESDimen_DiameterDimension_swigregister(IGESDimen_DiameterDimension)

def IGESDimen_DiameterDimension_get_type_name(*args):
    """
    IGESDimen_DiameterDimension_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDimen.IGESDimen_DiameterDimension_get_type_name(*args)

def IGESDimen_DiameterDimension_get_type_descriptor(*args):
    """
    IGESDimen_DiameterDimension_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDimen.IGESDimen_DiameterDimension_get_type_descriptor(*args)

class IGESDimen_GeneralSymbol(IGESData.IGESData_IGESEntity):
    """
    defines General Symbol, Type <228>, Form <0-3,5001-9999>
    in package IGESDimen
    Consists of zero or one (Form 0) or one (all other
    forms), one or more geometry entities which define
    a symbol, and zero, one or more associated leaders.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDimen_GeneralSymbol
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDimen_GeneralSymbol(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDimen_GeneralSymbol self) -> IGESDimen_GeneralSymbol

        defines General Symbol, Type <228>, Form <0-3,5001-9999>
        in package IGESDimen
        Consists of zero or one (Form 0) or one (all other
        forms), one or more geometry entities which define
        a symbol, and zero, one or more associated leaders.
        """
        this = _IGESDimen.new_IGESDimen_GeneralSymbol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDimen_GeneralSymbol self, Handle_IGESDimen_GeneralNote aNote, Handle_IGESData_HArray1OfIGESEntity allGeoms, Handle_IGESDimen_HArray1OfLeaderArrow allLeaders)

        This method is used to set the fields of the class
        GeneralSymbol
        - aNote      : General Note, null for form 0
        - allGeoms   : Geometric Entities
        - allLeaders : Leader Arrows

        :type aNote: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote
        :type allGeoms: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity
        :type allLeaders: OCC.wrapper.IGESDimen.Handle_IGESDimen_HArray1OfLeaderArrow

        """
        return _IGESDimen.IGESDimen_GeneralSymbol_Init(self, *args)


    def SetFormNumber(self, *args):
        """
        SetFormNumber(IGESDimen_GeneralSymbol self, Standard_Integer const form)

        Changes FormNumber (indicates the Nature of the Symbole)
        Error if not in ranges [0-3] or [> 5000]

        :type form: int

        """
        return _IGESDimen.IGESDimen_GeneralSymbol_SetFormNumber(self, *args)


    def HasNote(self, *args):
        """
        HasNote(IGESDimen_GeneralSymbol self) -> Standard_Boolean

        returns True if there is associated General Note Entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.IGESDimen_GeneralSymbol_HasNote(self, *args)


    def Note(self, *args):
        """
        Note(IGESDimen_GeneralSymbol self) -> Handle_IGESDimen_GeneralNote

        returns Null handle for form 0 only

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote

        """
        return _IGESDimen.IGESDimen_GeneralSymbol_Note(self, *args)


    def NbGeomEntities(self, *args):
        """
        NbGeomEntities(IGESDimen_GeneralSymbol self) -> Standard_Integer

        returns number of Geometry Entities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_GeneralSymbol_NbGeomEntities(self, *args)


    def GeomEntity(self, *args):
        """
        GeomEntity(IGESDimen_GeneralSymbol self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns the Index'th Geometry Entity
        raises exception if Index <= 0 or Index > NbGeomEntities()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.IGESDimen_GeneralSymbol_GeomEntity(self, *args)


    def NbLeaders(self, *args):
        """
        NbLeaders(IGESDimen_GeneralSymbol self) -> Standard_Integer

        returns number of Leaders or zero if not specified

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_GeneralSymbol_NbLeaders(self, *args)


    def LeaderArrow(self, *args):
        """
        LeaderArrow(IGESDimen_GeneralSymbol self, Standard_Integer const Index) -> Handle_IGESDimen_LeaderArrow

        returns the Index'th Leader Arrow
        raises exception if Index <= 0 or Index > NbLeaders()

        :type Index: int
        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow

        """
        return _IGESDimen.IGESDimen_GeneralSymbol_LeaderArrow(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDimen.IGESDimen_GeneralSymbol_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDimen.IGESDimen_GeneralSymbol_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.IGESDimen_GeneralSymbol_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDimen.delete_IGESDimen_GeneralSymbol
IGESDimen_GeneralSymbol_swigregister = _IGESDimen.IGESDimen_GeneralSymbol_swigregister
IGESDimen_GeneralSymbol_swigregister(IGESDimen_GeneralSymbol)

def IGESDimen_GeneralSymbol_get_type_name(*args):
    """
    IGESDimen_GeneralSymbol_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDimen.IGESDimen_GeneralSymbol_get_type_name(*args)

def IGESDimen_GeneralSymbol_get_type_descriptor(*args):
    """
    IGESDimen_GeneralSymbol_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDimen.IGESDimen_GeneralSymbol_get_type_descriptor(*args)

class IGESDimen_RadiusDimension(IGESData.IGESData_IGESEntity):
    """
    Defines IGES Radius Dimension, type <222> Form <0, 1>,
    in package IGESDimen.
    A Radius Dimension Entity consists of a General Note, a
    leader, and an arc center point. A second form of this
    entity accounts for the occasional need to have two
    leader entities referenced.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDimen_RadiusDimension
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDimen_RadiusDimension(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDimen_RadiusDimension self) -> IGESDimen_RadiusDimension

        Defines IGES Radius Dimension, type <222> Form <0, 1>,
        in package IGESDimen.
        A Radius Dimension Entity consists of a General Note, a
        leader, and an arc center point. A second form of this
        entity accounts for the occasional need to have two
        leader entities referenced.
        """
        this = _IGESDimen.new_IGESDimen_RadiusDimension(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDimen_RadiusDimension self, Handle_IGESDimen_GeneralNote aNote, Handle_IGESDimen_LeaderArrow anArrow, gp_XY arcCenter, Handle_IGESDimen_LeaderArrow anotherArrow)

        :type aNote: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote
        :type anArrow: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow
        :type arcCenter: OCC.wrapper.gp.gp_XY
        :type anotherArrow: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow

        """
        return _IGESDimen.IGESDimen_RadiusDimension_Init(self, *args)


    def InitForm(self, *args):
        """
        InitForm(IGESDimen_RadiusDimension self, Standard_Integer const form)

        Allows to change Form Number
        (1 admits null arrow)

        :type form: int

        """
        return _IGESDimen.IGESDimen_RadiusDimension_InitForm(self, *args)


    def Note(self, *args):
        """
        Note(IGESDimen_RadiusDimension self) -> Handle_IGESDimen_GeneralNote

        returns the General Note entity

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote

        """
        return _IGESDimen.IGESDimen_RadiusDimension_Note(self, *args)


    def Leader(self, *args):
        """
        Leader(IGESDimen_RadiusDimension self) -> Handle_IGESDimen_LeaderArrow

        returns the Leader Arrow entity

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow

        """
        return _IGESDimen.IGESDimen_RadiusDimension_Leader(self, *args)


    def Center(self, *args):
        """
        Center(IGESDimen_RadiusDimension self) -> gp_Pnt2d

        returns the coordinates of the Arc Center

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESDimen.IGESDimen_RadiusDimension_Center(self, *args)


    def TransformedCenter(self, *args):
        """
        TransformedCenter(IGESDimen_RadiusDimension self) -> gp_Pnt

        returns the coordinates of the Arc Center after Transformation
        (Z coord taken from ZDepth of Leader Entity)

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.IGESDimen_RadiusDimension_TransformedCenter(self, *args)


    def HasLeader2(self, *args):
        """
        HasLeader2(IGESDimen_RadiusDimension self) -> Standard_Boolean

        returns True if form is 1, False if 0

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.IGESDimen_RadiusDimension_HasLeader2(self, *args)


    def Leader2(self, *args):
        """
        Leader2(IGESDimen_RadiusDimension self) -> Handle_IGESDimen_LeaderArrow

        returns Null handle if Form is 0

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow

        """
        return _IGESDimen.IGESDimen_RadiusDimension_Leader2(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDimen.IGESDimen_RadiusDimension_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDimen.IGESDimen_RadiusDimension_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.IGESDimen_RadiusDimension_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDimen.delete_IGESDimen_RadiusDimension
IGESDimen_RadiusDimension_swigregister = _IGESDimen.IGESDimen_RadiusDimension_swigregister
IGESDimen_RadiusDimension_swigregister(IGESDimen_RadiusDimension)

def IGESDimen_RadiusDimension_get_type_name(*args):
    """
    IGESDimen_RadiusDimension_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDimen.IGESDimen_RadiusDimension_get_type_name(*args)

def IGESDimen_RadiusDimension_get_type_descriptor(*args):
    """
    IGESDimen_RadiusDimension_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDimen.IGESDimen_RadiusDimension_get_type_descriptor(*args)

class IGESDimen_NewDimensionedGeometry(IGESData.IGESData_IGESEntity):
    """
    defines New Dimensioned Geometry, Type <402>, Form <21>
    in package IGESDimen
    Links a dimension entity with the geometry entities it
    is dimensioning, so that later, in the receiving
    database, the dimension can be automatically recalculated
    and redrawn should the geometry be changed.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDimen_NewDimensionedGeometry
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDimen_NewDimensionedGeometry(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDimen_NewDimensionedGeometry self) -> IGESDimen_NewDimensionedGeometry

        defines New Dimensioned Geometry, Type <402>, Form <21>
        in package IGESDimen
        Links a dimension entity with the geometry entities it
        is dimensioning, so that later, in the receiving
        database, the dimension can be automatically recalculated
        and redrawn should the geometry be changed.
        """
        this = _IGESDimen.new_IGESDimen_NewDimensionedGeometry(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDimen_NewDimensionedGeometry self, Standard_Integer const nbDimens, Handle_IGESData_IGESEntity aDimen, Standard_Integer const anOrientation, Standard_Real const anAngle, Handle_IGESData_HArray1OfIGESEntity allEntities, Handle_TColStd_HArray1OfInteger allLocations, Handle_TColgp_HArray1OfXYZ allPoints)

        This method is used to set the fields of the class
        NewDimensionedGeometry
        - nbDimen       : Number of Dimensions, default = 1
        - aDimen        : Dimension Entity
        - anOrientation : Dimension Orientation Flag
        - anAngle       : Angle Value
        - allEntities   : Geometric Entities
        - allLocations  : Dimension Location Flags
        - allPoints     : Points on the Geometry Entities
        exception raised if lengths of entities, locations, points
        are not the same

        :type nbDimens: int
        :type aDimen: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type anOrientation: int
        :type anAngle: float
        :type allEntities: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity
        :type allLocations: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allPoints: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfXYZ

        """
        return _IGESDimen.IGESDimen_NewDimensionedGeometry_Init(self, *args)


    def NbDimensions(self, *args):
        """
        NbDimensions(IGESDimen_NewDimensionedGeometry self) -> Standard_Integer

        returns the number of dimensions

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_NewDimensionedGeometry_NbDimensions(self, *args)


    def NbGeometries(self, *args):
        """
        NbGeometries(IGESDimen_NewDimensionedGeometry self) -> Standard_Integer

        returns the number of associated geometry entities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_NewDimensionedGeometry_NbGeometries(self, *args)


    def DimensionEntity(self, *args):
        """
        DimensionEntity(IGESDimen_NewDimensionedGeometry self) -> Handle_IGESData_IGESEntity

        returns the dimension entity

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.IGESDimen_NewDimensionedGeometry_DimensionEntity(self, *args)


    def DimensionOrientationFlag(self, *args):
        """
        DimensionOrientationFlag(IGESDimen_NewDimensionedGeometry self) -> Standard_Integer

        returns the dimension orientation flag

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_NewDimensionedGeometry_DimensionOrientationFlag(self, *args)


    def AngleValue(self, *args):
        """
        AngleValue(IGESDimen_NewDimensionedGeometry self) -> Standard_Real

        returns the angle value

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_NewDimensionedGeometry_AngleValue(self, *args)


    def GeometryEntity(self, *args):
        """
        GeometryEntity(IGESDimen_NewDimensionedGeometry self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns the Index'th geometry entity
        raises exception if Index <= 0 or Index > NbGeometries()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.IGESDimen_NewDimensionedGeometry_GeometryEntity(self, *args)


    def DimensionLocationFlag(self, *args):
        """
        DimensionLocationFlag(IGESDimen_NewDimensionedGeometry self, Standard_Integer const Index) -> Standard_Integer

        returns the Index'th geometry entity's dimension location flag
        raises exception if Index <= 0 or Index > NbGeometries()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_NewDimensionedGeometry_DimensionLocationFlag(self, *args)


    def Point(self, *args):
        """
        Point(IGESDimen_NewDimensionedGeometry self, Standard_Integer const Index) -> gp_Pnt

        coordinate of point on Index'th geometry entity
        raises exception if Index <= 0 or Index > NbGeometries()

        :type Index: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.IGESDimen_NewDimensionedGeometry_Point(self, *args)


    def TransformedPoint(self, *args):
        """
        TransformedPoint(IGESDimen_NewDimensionedGeometry self, Standard_Integer const Index) -> gp_Pnt

        coordinate of point on Index'th geometry entity after Transformation
        raises exception if Index <= 0 or Index > NbGeometries()

        :type Index: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.IGESDimen_NewDimensionedGeometry_TransformedPoint(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDimen.IGESDimen_NewDimensionedGeometry_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDimen.IGESDimen_NewDimensionedGeometry_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.IGESDimen_NewDimensionedGeometry_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDimen.delete_IGESDimen_NewDimensionedGeometry
IGESDimen_NewDimensionedGeometry_swigregister = _IGESDimen.IGESDimen_NewDimensionedGeometry_swigregister
IGESDimen_NewDimensionedGeometry_swigregister(IGESDimen_NewDimensionedGeometry)

def IGESDimen_NewDimensionedGeometry_get_type_name(*args):
    """
    IGESDimen_NewDimensionedGeometry_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDimen.IGESDimen_NewDimensionedGeometry_get_type_name(*args)

def IGESDimen_NewDimensionedGeometry_get_type_descriptor(*args):
    """
    IGESDimen_NewDimensionedGeometry_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDimen.IGESDimen_NewDimensionedGeometry_get_type_descriptor(*args)

class IGESDimen_DimensionedGeometry(IGESData.IGESData_IGESEntity):
    """
    Defines IGES Dimensioned Geometry, Type <402> Form <13>,
    in package IGESDimen
    This entity has been replaced by the new form of  Dimensioned
    Geometry Associativity Entity (Type 402, Form 21) and should no
    longer be used by preprocessors.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDimen_DimensionedGeometry
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDimen_DimensionedGeometry(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDimen_DimensionedGeometry self) -> IGESDimen_DimensionedGeometry

        Defines IGES Dimensioned Geometry, Type <402> Form <13>,
        in package IGESDimen
        This entity has been replaced by the new form of  Dimensioned
        Geometry Associativity Entity (Type 402, Form 21) and should no
        longer be used by preprocessors.
        """
        this = _IGESDimen.new_IGESDimen_DimensionedGeometry(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDimen_DimensionedGeometry self, Standard_Integer const nbDims, Handle_IGESData_IGESEntity aDimension, Handle_IGESData_HArray1OfIGESEntity entities)

        :type nbDims: int
        :type aDimension: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type entities: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESDimen.IGESDimen_DimensionedGeometry_Init(self, *args)


    def NbDimensions(self, *args):
        """
        NbDimensions(IGESDimen_DimensionedGeometry self) -> Standard_Integer

        returns the number of dimensions

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_DimensionedGeometry_NbDimensions(self, *args)


    def NbGeometryEntities(self, *args):
        """
        NbGeometryEntities(IGESDimen_DimensionedGeometry self) -> Standard_Integer

        returns the number of associated geometry entities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_DimensionedGeometry_NbGeometryEntities(self, *args)


    def DimensionEntity(self, *args):
        """
        DimensionEntity(IGESDimen_DimensionedGeometry self) -> Handle_IGESData_IGESEntity

        returns the Dimension entity

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.IGESDimen_DimensionedGeometry_DimensionEntity(self, *args)


    def GeometryEntity(self, *args):
        """
        GeometryEntity(IGESDimen_DimensionedGeometry self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns the num'th Geometry entity
        raises exception if Index <= 0 or Index > NbGeometryEntities()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.IGESDimen_DimensionedGeometry_GeometryEntity(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDimen.IGESDimen_DimensionedGeometry_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDimen.IGESDimen_DimensionedGeometry_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.IGESDimen_DimensionedGeometry_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDimen.delete_IGESDimen_DimensionedGeometry
IGESDimen_DimensionedGeometry_swigregister = _IGESDimen.IGESDimen_DimensionedGeometry_swigregister
IGESDimen_DimensionedGeometry_swigregister(IGESDimen_DimensionedGeometry)

def IGESDimen_DimensionedGeometry_get_type_name(*args):
    """
    IGESDimen_DimensionedGeometry_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDimen.IGESDimen_DimensionedGeometry_get_type_name(*args)

def IGESDimen_DimensionedGeometry_get_type_descriptor(*args):
    """
    IGESDimen_DimensionedGeometry_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDimen.IGESDimen_DimensionedGeometry_get_type_descriptor(*args)

class IGESDimen_CenterLine(IGESData.IGESData_IGESEntity):
    """
    defines CenterLine, Type <106> Form <20-21>
    in package IGESDimen
    Is an entity appearing as crosshairs or as a
    construction between 2 positions
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDimen_CenterLine
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDimen_CenterLine(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDimen_CenterLine self) -> IGESDimen_CenterLine

        defines CenterLine, Type <106> Form <20-21>
        in package IGESDimen
        Is an entity appearing as crosshairs or as a
        construction between 2 positions
        """
        this = _IGESDimen.new_IGESDimen_CenterLine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDimen_CenterLine self, Standard_Integer const aDataType, Standard_Real const aZdisp, Handle_TColgp_HArray1OfXY dataPnts)

        This method is used to set the fields of the class
        CenterLine
        - aDataType      : Interpretation Flag, always = 1
        - aZDisplacement : Common z displacement
        - dataPnts       : Data points (x and y)

        :type aDataType: int
        :type aZdisp: float
        :type dataPnts: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfXY

        """
        return _IGESDimen.IGESDimen_CenterLine_Init(self, *args)


    def SetCrossHair(self, *args):
        """
        SetCrossHair(IGESDimen_CenterLine self, Standard_Boolean const mode)

        Sets FormNumber to 20 if <mode> is True, 21 else

        :type mode: bool

        """
        return _IGESDimen.IGESDimen_CenterLine_SetCrossHair(self, *args)


    def Datatype(self, *args):
        """
        Datatype(IGESDimen_CenterLine self) -> Standard_Integer

        returns Interpretation Flag : IP = 1.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_CenterLine_Datatype(self, *args)


    def NbPoints(self, *args):
        """
        NbPoints(IGESDimen_CenterLine self) -> Standard_Integer

        returns Number of Data Points.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_CenterLine_NbPoints(self, *args)


    def ZDisplacement(self, *args):
        """
        ZDisplacement(IGESDimen_CenterLine self) -> Standard_Real

        returns Common Z displacement.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_CenterLine_ZDisplacement(self, *args)


    def Point(self, *args):
        """
        Point(IGESDimen_CenterLine self, Standard_Integer const Index) -> gp_Pnt

        returns the data point as Pnt from gp.
        raises exception if Index <= 0 or Index > NbPoints()

        :type Index: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.IGESDimen_CenterLine_Point(self, *args)


    def TransformedPoint(self, *args):
        """
        TransformedPoint(IGESDimen_CenterLine self, Standard_Integer const Index) -> gp_Pnt

        returns the data point as Pnt from gp after Transformation.
        raises exception if Index <= 0 or Index > NbPoints()

        :type Index: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.IGESDimen_CenterLine_TransformedPoint(self, *args)


    def IsCrossHair(self, *args):
        """
        IsCrossHair(IGESDimen_CenterLine self) -> Standard_Boolean

        returns True if Form is 20.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.IGESDimen_CenterLine_IsCrossHair(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDimen.IGESDimen_CenterLine_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDimen.IGESDimen_CenterLine_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.IGESDimen_CenterLine_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDimen.delete_IGESDimen_CenterLine
IGESDimen_CenterLine_swigregister = _IGESDimen.IGESDimen_CenterLine_swigregister
IGESDimen_CenterLine_swigregister(IGESDimen_CenterLine)

def IGESDimen_CenterLine_get_type_name(*args):
    """
    IGESDimen_CenterLine_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDimen.IGESDimen_CenterLine_get_type_name(*args)

def IGESDimen_CenterLine_get_type_descriptor(*args):
    """
    IGESDimen_CenterLine_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDimen.IGESDimen_CenterLine_get_type_descriptor(*args)

class IGESDimen_AngularDimension(IGESData.IGESData_IGESEntity):
    """
    defines AngularDimension, Type <202> Form <0>
    in package IGESDimen
    Used to dimension angles
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDimen_AngularDimension
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDimen_AngularDimension(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDimen_AngularDimension self) -> IGESDimen_AngularDimension

        defines AngularDimension, Type <202> Form <0>
        in package IGESDimen
        Used to dimension angles
        """
        this = _IGESDimen.new_IGESDimen_AngularDimension(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDimen_AngularDimension self, Handle_IGESDimen_GeneralNote aNote, Handle_IGESDimen_WitnessLine aLine, Handle_IGESDimen_WitnessLine anotherLine, gp_XY aVertex, Standard_Real const aRadius, Handle_IGESDimen_LeaderArrow aLeader, Handle_IGESDimen_LeaderArrow anotherLeader)

        This method is used to set the fields of the class
        AngularDimension
        - aNote         : General Note Entity
        - aLine         : First Witness Line Entity or Null
        Handle
        - anotherLine   : Second Witness Line Entity or Null
        Handle
        - aVertex       : Coordinates of vertex point
        - aRadius       : Radius of leader arcs
        - aLeader       : First Leader Entity
        - anotherLeader : Second Leader Entity

        :type aNote: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote
        :type aLine: OCC.wrapper.IGESDimen.Handle_IGESDimen_WitnessLine
        :type anotherLine: OCC.wrapper.IGESDimen.Handle_IGESDimen_WitnessLine
        :type aVertex: OCC.wrapper.gp.gp_XY
        :type aRadius: float
        :type aLeader: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow
        :type anotherLeader: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow

        """
        return _IGESDimen.IGESDimen_AngularDimension_Init(self, *args)


    def Note(self, *args):
        """
        Note(IGESDimen_AngularDimension self) -> Handle_IGESDimen_GeneralNote

        returns the General Note Entity of the Dimension.

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote

        """
        return _IGESDimen.IGESDimen_AngularDimension_Note(self, *args)


    def HasFirstWitnessLine(self, *args):
        """
        HasFirstWitnessLine(IGESDimen_AngularDimension self) -> Standard_Boolean

        returns False if theFirstWitnessLine is Null Handle.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.IGESDimen_AngularDimension_HasFirstWitnessLine(self, *args)


    def FirstWitnessLine(self, *args):
        """
        FirstWitnessLine(IGESDimen_AngularDimension self) -> Handle_IGESDimen_WitnessLine

        returns the First Witness Line Entity or Null Handle.

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_WitnessLine

        """
        return _IGESDimen.IGESDimen_AngularDimension_FirstWitnessLine(self, *args)


    def HasSecondWitnessLine(self, *args):
        """
        HasSecondWitnessLine(IGESDimen_AngularDimension self) -> Standard_Boolean

        returns False if theSecondWitnessLine is Null Handle.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.IGESDimen_AngularDimension_HasSecondWitnessLine(self, *args)


    def SecondWitnessLine(self, *args):
        """
        SecondWitnessLine(IGESDimen_AngularDimension self) -> Handle_IGESDimen_WitnessLine

        returns the Second Witness Line Entity or Null Handle.

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_WitnessLine

        """
        return _IGESDimen.IGESDimen_AngularDimension_SecondWitnessLine(self, *args)


    def Vertex(self, *args):
        """
        Vertex(IGESDimen_AngularDimension self) -> gp_Pnt2d

        returns the co-ordinates of the Vertex point as Pnt2d from gp.

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESDimen.IGESDimen_AngularDimension_Vertex(self, *args)


    def TransformedVertex(self, *args):
        """
        TransformedVertex(IGESDimen_AngularDimension self) -> gp_Pnt2d

        returns the co-ordinates of the Vertex point as Pnt2d from gp
        after Transformation. (Z = 0.0 for Transformation)

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESDimen.IGESDimen_AngularDimension_TransformedVertex(self, *args)


    def Radius(self, *args):
        """
        Radius(IGESDimen_AngularDimension self) -> Standard_Real

        returns the Radius of the Leader arcs.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_AngularDimension_Radius(self, *args)


    def FirstLeader(self, *args):
        """
        FirstLeader(IGESDimen_AngularDimension self) -> Handle_IGESDimen_LeaderArrow

        returns the First Leader Entity.

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow

        """
        return _IGESDimen.IGESDimen_AngularDimension_FirstLeader(self, *args)


    def SecondLeader(self, *args):
        """
        SecondLeader(IGESDimen_AngularDimension self) -> Handle_IGESDimen_LeaderArrow

        returns the Second Leader Entity.

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow

        """
        return _IGESDimen.IGESDimen_AngularDimension_SecondLeader(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDimen.IGESDimen_AngularDimension_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDimen.IGESDimen_AngularDimension_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.IGESDimen_AngularDimension_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDimen.delete_IGESDimen_AngularDimension
IGESDimen_AngularDimension_swigregister = _IGESDimen.IGESDimen_AngularDimension_swigregister
IGESDimen_AngularDimension_swigregister(IGESDimen_AngularDimension)

def IGESDimen_AngularDimension_get_type_name(*args):
    """
    IGESDimen_AngularDimension_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDimen.IGESDimen_AngularDimension_get_type_name(*args)

def IGESDimen_AngularDimension_get_type_descriptor(*args):
    """
    IGESDimen_AngularDimension_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDimen.IGESDimen_AngularDimension_get_type_descriptor(*args)

class Handle_IGESDimen_HArray1OfGeneralNote(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDimen_HArray1OfGeneralNote self)

        Nullify the handle


        """
        return _IGESDimen.Handle_IGESDimen_HArray1OfGeneralNote_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDimen_HArray1OfGeneralNote self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDimen.Handle_IGESDimen_HArray1OfGeneralNote_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDimen_HArray1OfGeneralNote self, IGESDimen_HArray1OfGeneralNote thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDimen.Handle_IGESDimen_HArray1OfGeneralNote_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDimen_HArray1OfGeneralNote self, Handle_IGESDimen_HArray1OfGeneralNote theHandle) -> Handle_IGESDimen_HArray1OfGeneralNote
        assign(Handle_IGESDimen_HArray1OfGeneralNote self, IGESDimen_HArray1OfGeneralNote thePtr) -> Handle_IGESDimen_HArray1OfGeneralNote
        assign(Handle_IGESDimen_HArray1OfGeneralNote self, Handle_IGESDimen_HArray1OfGeneralNote theHandle) -> Handle_IGESDimen_HArray1OfGeneralNote

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDimen.Handle_IGESDimen_HArray1OfGeneralNote_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDimen_HArray1OfGeneralNote self) -> IGESDimen_HArray1OfGeneralNote

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_HArray1OfGeneralNote_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDimen_HArray1OfGeneralNote self) -> IGESDimen_HArray1OfGeneralNote

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_HArray1OfGeneralNote___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDimen_HArray1OfGeneralNote self) -> IGESDimen_HArray1OfGeneralNote

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDimen.Handle_IGESDimen_HArray1OfGeneralNote___ref__(self, *args)


    def __hash__(self):
        return _IGESDimen.Handle_IGESDimen_HArray1OfGeneralNote___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDimen.Handle_IGESDimen_HArray1OfGeneralNote___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDimen.new_Handle_IGESDimen_HArray1OfGeneralNote(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDimen.Handle_IGESDimen_HArray1OfGeneralNote_DownCast)
    __swig_destroy__ = _IGESDimen.delete_Handle_IGESDimen_HArray1OfGeneralNote

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.IGESDimen.IGESDimen_Array1OfGeneralNote

        """
        res = _IGESDimen.Handle_IGESDimen_HArray1OfGeneralNote_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_IGESDimen_HArray1OfGeneralNote self) -> NCollection_Array1_Handle_IGESDimen_GeneralNote

        :rtype: OCC.wrapper.IGESDimen.IGESDimen_Array1OfGeneralNote

        """
        return _IGESDimen.Handle_IGESDimen_HArray1OfGeneralNote_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDimen_HArray1OfGeneralNote self) -> char const *

        :rtype: const char *

        """
        return _IGESDimen.Handle_IGESDimen_HArray1OfGeneralNote_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_HArray1OfGeneralNote_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_HArray1OfGeneralNote_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESDimen_HArray1OfGeneralNote self)

        Memory deallocator for transient classes


        """
        return _IGESDimen.Handle_IGESDimen_HArray1OfGeneralNote_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDimen_HArray1OfGeneralNote self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDimen_HArray1OfGeneralNote self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_HArray1OfGeneralNote_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDimen_HArray1OfGeneralNote self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDimen_HArray1OfGeneralNote self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_HArray1OfGeneralNote_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDimen_HArray1OfGeneralNote self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDimen.Handle_IGESDimen_HArray1OfGeneralNote_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDimen_HArray1OfGeneralNote self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_HArray1OfGeneralNote_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDimen_HArray1OfGeneralNote self)

        Increments the reference counter of this object


        """
        return _IGESDimen.Handle_IGESDimen_HArray1OfGeneralNote_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDimen_HArray1OfGeneralNote self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_HArray1OfGeneralNote_DecrementRefCounter(self, *args)

Handle_IGESDimen_HArray1OfGeneralNote_swigregister = _IGESDimen.Handle_IGESDimen_HArray1OfGeneralNote_swigregister
Handle_IGESDimen_HArray1OfGeneralNote_swigregister(Handle_IGESDimen_HArray1OfGeneralNote)

def Handle_IGESDimen_HArray1OfGeneralNote_DownCast(thing):
    return _IGESDimen.Handle_IGESDimen_HArray1OfGeneralNote_DownCast(thing)
Handle_IGESDimen_HArray1OfGeneralNote_DownCast = _IGESDimen.Handle_IGESDimen_HArray1OfGeneralNote_DownCast

class IGESDimen_WitnessLine(IGESData.IGESData_IGESEntity):
    """
    defines WitnessLine, Type <106> Form <40>
    in package IGESDimen
    Contains one or more straight line segments associated
    with drafting entities of various types
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDimen_WitnessLine
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDimen_WitnessLine(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDimen_WitnessLine self) -> IGESDimen_WitnessLine

        defines WitnessLine, Type <106> Form <40>
        in package IGESDimen
        Contains one or more straight line segments associated
        with drafting entities of various types
        """
        this = _IGESDimen.new_IGESDimen_WitnessLine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDimen_WitnessLine self, Standard_Integer const dataType, Standard_Real const aDisp, Handle_TColgp_HArray1OfXY dataPoints)

        This method is used to set the fields of the class
        WitnessLine
        - dataType   : Interpretation Flag, always = 1
        - aDispl     : Common z displacement
        - dataPoints : Data points

        :type dataType: int
        :type aDisp: float
        :type dataPoints: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfXY

        """
        return _IGESDimen.IGESDimen_WitnessLine_Init(self, *args)


    def Datatype(self, *args):
        """
        Datatype(IGESDimen_WitnessLine self) -> Standard_Integer

        returns Interpretation Flag, always = 1

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_WitnessLine_Datatype(self, *args)


    def NbPoints(self, *args):
        """
        NbPoints(IGESDimen_WitnessLine self) -> Standard_Integer

        returns number of Data Points

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_WitnessLine_NbPoints(self, *args)


    def ZDisplacement(self, *args):
        """
        ZDisplacement(IGESDimen_WitnessLine self) -> Standard_Real

        returns common Z displacement

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_WitnessLine_ZDisplacement(self, *args)


    def Point(self, *args):
        """
        Point(IGESDimen_WitnessLine self, Standard_Integer const Index) -> gp_Pnt

        returns Index'th. data point
        raises exception if Index <= 0 or Index > NbPoints

        :type Index: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.IGESDimen_WitnessLine_Point(self, *args)


    def TransformedPoint(self, *args):
        """
        TransformedPoint(IGESDimen_WitnessLine self, Standard_Integer const Index) -> gp_Pnt

        returns data point after Transformation.
        raises exception if Index <= 0 or Index > NbPoints

        :type Index: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.IGESDimen_WitnessLine_TransformedPoint(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDimen.IGESDimen_WitnessLine_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDimen.IGESDimen_WitnessLine_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.IGESDimen_WitnessLine_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDimen.delete_IGESDimen_WitnessLine
IGESDimen_WitnessLine_swigregister = _IGESDimen.IGESDimen_WitnessLine_swigregister
IGESDimen_WitnessLine_swigregister(IGESDimen_WitnessLine)

def IGESDimen_WitnessLine_get_type_name(*args):
    """
    IGESDimen_WitnessLine_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDimen.IGESDimen_WitnessLine_get_type_name(*args)

def IGESDimen_WitnessLine_get_type_descriptor(*args):
    """
    IGESDimen_WitnessLine_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDimen.IGESDimen_WitnessLine_get_type_descriptor(*args)

class Handle_IGESDimen_LinearDimension(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDimen_LinearDimension self)

        Nullify the handle


        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDimen_LinearDimension self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDimen_LinearDimension self, IGESDimen_LinearDimension thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDimen_LinearDimension self, Handle_IGESDimen_LinearDimension theHandle) -> Handle_IGESDimen_LinearDimension
        assign(Handle_IGESDimen_LinearDimension self, IGESDimen_LinearDimension thePtr) -> Handle_IGESDimen_LinearDimension
        assign(Handle_IGESDimen_LinearDimension self, Handle_IGESDimen_LinearDimension theHandle) -> Handle_IGESDimen_LinearDimension

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDimen_LinearDimension self) -> IGESDimen_LinearDimension

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDimen_LinearDimension self) -> IGESDimen_LinearDimension

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDimen_LinearDimension self) -> IGESDimen_LinearDimension

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension___ref__(self, *args)


    def __hash__(self):
        return _IGESDimen.Handle_IGESDimen_LinearDimension___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDimen.Handle_IGESDimen_LinearDimension___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDimen.new_Handle_IGESDimen_LinearDimension(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDimen.Handle_IGESDimen_LinearDimension_DownCast)
    __swig_destroy__ = _IGESDimen.delete_Handle_IGESDimen_LinearDimension

    def Init(self, *args):
        """
        Init(Handle_IGESDimen_LinearDimension self, Handle_IGESDimen_GeneralNote aNote, Handle_IGESDimen_LeaderArrow aLeader, Handle_IGESDimen_LeaderArrow anotherLeader, Handle_IGESDimen_WitnessLine aWitness, Handle_IGESDimen_WitnessLine anotherWitness)

        This method is used to set the fields of the class
        LinearDimension
        - aNote          : General Note Entity
        - aLeader        : First Leader Entity
        - anotherLeader  : Second Leader Entity
        - aWitness       : First Witness Line Entity or a Null
        Handle
        - anotherWitness : Second Witness Line Entity or a Null
        Handle

        :type aNote: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote
        :type aLeader: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow
        :type anotherLeader: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow
        :type aWitness: OCC.wrapper.IGESDimen.Handle_IGESDimen_WitnessLine
        :type anotherWitness: OCC.wrapper.IGESDimen.Handle_IGESDimen_WitnessLine

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_Init(self, *args)


    def SetFormNumber(self, *args):
        """
        SetFormNumber(Handle_IGESDimen_LinearDimension self, Standard_Integer const form)

        Changes FormNumber (indicates the Nature of the Dimension
        Unspecified, Diameter or Radius)
        Error if not in range [0-2]

        :type form: int

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_SetFormNumber(self, *args)


    def Note(self, *args):
        """
        Note(Handle_IGESDimen_LinearDimension self) -> Handle_IGESDimen_GeneralNote

        returns General Note Entity

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_Note(self, *args)


    def FirstLeader(self, *args):
        """
        FirstLeader(Handle_IGESDimen_LinearDimension self) -> Handle_IGESDimen_LeaderArrow

        returns first Leader Entity

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_FirstLeader(self, *args)


    def SecondLeader(self, *args):
        """
        SecondLeader(Handle_IGESDimen_LinearDimension self) -> Handle_IGESDimen_LeaderArrow

        returns second Leader Entity

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_SecondLeader(self, *args)


    def HasFirstWitness(self, *args):
        """
        HasFirstWitness(Handle_IGESDimen_LinearDimension self) -> Standard_Boolean

        returns False if no first witness line

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_HasFirstWitness(self, *args)


    def FirstWitness(self, *args):
        """
        FirstWitness(Handle_IGESDimen_LinearDimension self) -> Handle_IGESDimen_WitnessLine

        returns first Witness Line Entity or a Null Handle

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_WitnessLine

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_FirstWitness(self, *args)


    def HasSecondWitness(self, *args):
        """
        HasSecondWitness(Handle_IGESDimen_LinearDimension self) -> Standard_Boolean

        returns False if no second witness line

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_HasSecondWitness(self, *args)


    def SecondWitness(self, *args):
        """
        SecondWitness(Handle_IGESDimen_LinearDimension self) -> Handle_IGESDimen_WitnessLine

        returns second Witness Line Entity or a Null Handle

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_WitnessLine

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_SecondWitness(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDimen_LinearDimension self) -> char const *

        :rtype: const char *

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_LinearDimension_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_LinearDimension_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDimen_LinearDimension self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDimen_LinearDimension self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDimen_LinearDimension self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDimen_LinearDimension self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDimen_LinearDimension self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDimen_LinearDimension self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDimen_LinearDimension self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDimen_LinearDimension self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDimen_LinearDimension self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDimen_LinearDimension self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDimen_LinearDimension self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDimen_LinearDimension self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDimen_LinearDimension self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDimen_LinearDimension self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDimen_LinearDimension self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDimen_LinearDimension self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDimen_LinearDimension self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDimen_LinearDimension self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDimen_LinearDimension self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDimen_LinearDimension self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDimen_LinearDimension self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDimen_LinearDimension self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDimen_LinearDimension self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDimen_LinearDimension self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDimen_LinearDimension self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDimen_LinearDimension self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDimen_LinearDimension self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDimen_LinearDimension self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDimen_LinearDimension self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDimen_LinearDimension self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDimen_LinearDimension self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDimen_LinearDimension self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDimen_LinearDimension self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDimen_LinearDimension self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDimen_LinearDimension self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDimen_LinearDimension self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDimen_LinearDimension self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDimen_LinearDimension self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDimen_LinearDimension self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDimen_LinearDimension self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDimen_LinearDimension self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDimen_LinearDimension self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDimen_LinearDimension self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDimen_LinearDimension self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDimen_LinearDimension self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDimen_LinearDimension self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDimen_LinearDimension self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDimen_LinearDimension self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDimen_LinearDimension self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDimen_LinearDimension self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDimen_LinearDimension self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDimen_LinearDimension self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDimen_LinearDimension self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDimen_LinearDimension self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDimen_LinearDimension self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDimen_LinearDimension self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDimen_LinearDimension self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDimen_LinearDimension self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDimen_LinearDimension self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDimen_LinearDimension self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDimen_LinearDimension self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDimen_LinearDimension self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDimen_LinearDimension self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDimen_LinearDimension self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDimen_LinearDimension self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDimen_LinearDimension self)

        Memory deallocator for transient classes


        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDimen_LinearDimension self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDimen_LinearDimension self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDimen_LinearDimension self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDimen_LinearDimension self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDimen_LinearDimension self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDimen_LinearDimension self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDimen_LinearDimension self)

        Increments the reference counter of this object


        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDimen_LinearDimension self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_LinearDimension_DecrementRefCounter(self, *args)

Handle_IGESDimen_LinearDimension_swigregister = _IGESDimen.Handle_IGESDimen_LinearDimension_swigregister
Handle_IGESDimen_LinearDimension_swigregister(Handle_IGESDimen_LinearDimension)

def Handle_IGESDimen_LinearDimension_DownCast(thing):
    return _IGESDimen.Handle_IGESDimen_LinearDimension_DownCast(thing)
Handle_IGESDimen_LinearDimension_DownCast = _IGESDimen.Handle_IGESDimen_LinearDimension_DownCast

class IGESDimen_FlagNote(IGESData.IGESData_IGESEntity):
    """
    defines FlagNote, Type <208> Form <0>
    in package IGESDimen
    Is label information formatted in different ways
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDimen_FlagNote
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDimen_FlagNote(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDimen_FlagNote self) -> IGESDimen_FlagNote

        defines FlagNote, Type <208> Form <0>
        in package IGESDimen
        Is label information formatted in different ways
        """
        this = _IGESDimen.new_IGESDimen_FlagNote(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDimen_FlagNote self, gp_XYZ leftCorner, Standard_Real const anAngle, Handle_IGESDimen_GeneralNote aNote, Handle_IGESDimen_HArray1OfLeaderArrow someLeaders)

        This method is used to set the fields of the class
        FlagNote
        - leftCorner  : Lower left corner of the Flag
        - anAngle     : Rotation angle in radians
        - aNote       : General Note Entity
        - someLeaders : Leader Entities

        :type leftCorner: OCC.wrapper.gp.gp_XYZ
        :type anAngle: float
        :type aNote: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote
        :type someLeaders: OCC.wrapper.IGESDimen.Handle_IGESDimen_HArray1OfLeaderArrow

        """
        return _IGESDimen.IGESDimen_FlagNote_Init(self, *args)


    def LowerLeftCorner(self, *args):
        """
        LowerLeftCorner(IGESDimen_FlagNote self) -> gp_Pnt

        returns Lower Left coordinate of Flag as Pnt from package gp

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.IGESDimen_FlagNote_LowerLeftCorner(self, *args)


    def TransformedLowerLeftCorner(self, *args):
        """
        TransformedLowerLeftCorner(IGESDimen_FlagNote self) -> gp_Pnt

        returns Lower Left coordinate of Flag as Pnt from package gp
        after Transformation.

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.IGESDimen_FlagNote_TransformedLowerLeftCorner(self, *args)


    def Angle(self, *args):
        """
        Angle(IGESDimen_FlagNote self) -> Standard_Real

        returns Rotation angle in radians

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_FlagNote_Angle(self, *args)


    def Note(self, *args):
        """
        Note(IGESDimen_FlagNote self) -> Handle_IGESDimen_GeneralNote

        returns General Note Entity

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote

        """
        return _IGESDimen.IGESDimen_FlagNote_Note(self, *args)


    def NbLeaders(self, *args):
        """
        NbLeaders(IGESDimen_FlagNote self) -> Standard_Integer

        returns number of Arrows (Leaders) or zero

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_FlagNote_NbLeaders(self, *args)


    def Leader(self, *args):
        """
        Leader(IGESDimen_FlagNote self, Standard_Integer const Index) -> Handle_IGESDimen_LeaderArrow

        returns Leader Entity
        raises exception if Index <= 0 or Index > NbLeaders()

        :type Index: int
        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow

        """
        return _IGESDimen.IGESDimen_FlagNote_Leader(self, *args)


    def Height(self, *args):
        """
        Height(IGESDimen_FlagNote self) -> Standard_Real

        returns Height computed by the formula :
        Height = 2 * CH   where CH is from theNote

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_FlagNote_Height(self, *args)


    def CharacterHeight(self, *args):
        """
        CharacterHeight(IGESDimen_FlagNote self) -> Standard_Real

        returns the Character Height (from General Note)

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_FlagNote_CharacterHeight(self, *args)


    def Length(self, *args):
        """
        Length(IGESDimen_FlagNote self) -> Standard_Real

        returns Length computed by the formula :
        Length = TW + 0.4*CH  where CH is from theNote
        and TW is from theNote

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_FlagNote_Length(self, *args)


    def TextWidth(self, *args):
        """
        TextWidth(IGESDimen_FlagNote self) -> Standard_Real

        returns the Text Width (from General Note)

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_FlagNote_TextWidth(self, *args)


    def TipLength(self, *args):
        """
        TipLength(IGESDimen_FlagNote self) -> Standard_Real

        returns TipLength computed by the formula :
        TipLength = 0.5 * H / tan 35(deg)  where H is Height()

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_FlagNote_TipLength(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDimen.IGESDimen_FlagNote_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDimen.IGESDimen_FlagNote_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.IGESDimen_FlagNote_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDimen.delete_IGESDimen_FlagNote
IGESDimen_FlagNote_swigregister = _IGESDimen.IGESDimen_FlagNote_swigregister
IGESDimen_FlagNote_swigregister(IGESDimen_FlagNote)

def IGESDimen_FlagNote_get_type_name(*args):
    """
    IGESDimen_FlagNote_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDimen.IGESDimen_FlagNote_get_type_name(*args)

def IGESDimen_FlagNote_get_type_descriptor(*args):
    """
    IGESDimen_FlagNote_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDimen.IGESDimen_FlagNote_get_type_descriptor(*args)

class IGESDimen_ToolDiameterDimension(object):
    """
    Tool to work on a DiameterDimension. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDimen_ToolDiameterDimension self) -> IGESDimen_ToolDiameterDimension

        Returns a ToolDiameterDimension, ready to work


        """
        this = _IGESDimen.new_IGESDimen_ToolDiameterDimension(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDimen_ToolDiameterDimension self, Handle_IGESDimen_DiameterDimension ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_DiameterDimension
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDimen.IGESDimen_ToolDiameterDimension_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDimen_ToolDiameterDimension self, Handle_IGESDimen_DiameterDimension ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_DiameterDimension
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDimen.IGESDimen_ToolDiameterDimension_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDimen_ToolDiameterDimension self, Handle_IGESDimen_DiameterDimension ent, Interface_EntityIterator iter)

        Lists the Entities shared by a DiameterDimension <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_DiameterDimension
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.IGESDimen_ToolDiameterDimension_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDimen_ToolDiameterDimension self, Handle_IGESDimen_DiameterDimension ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_DiameterDimension
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDimen.IGESDimen_ToolDiameterDimension_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDimen_ToolDiameterDimension self, Handle_IGESDimen_DiameterDimension ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_DiameterDimension
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDimen.IGESDimen_ToolDiameterDimension_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDimen_ToolDiameterDimension self, Handle_IGESDimen_DiameterDimension entfrom, Handle_IGESDimen_DiameterDimension entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDimen.Handle_IGESDimen_DiameterDimension
        :type entto: OCC.wrapper.IGESDimen.Handle_IGESDimen_DiameterDimension
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDimen.IGESDimen_ToolDiameterDimension_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDimen_ToolDiameterDimension self, Handle_IGESDimen_DiameterDimension ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_DiameterDimension
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDimen.IGESDimen_ToolDiameterDimension_OwnDump(self, *args)

    __swig_destroy__ = _IGESDimen.delete_IGESDimen_ToolDiameterDimension
IGESDimen_ToolDiameterDimension_swigregister = _IGESDimen.IGESDimen_ToolDiameterDimension_swigregister
IGESDimen_ToolDiameterDimension_swigregister(IGESDimen_ToolDiameterDimension)

class IGESDimen_ToolDimensionedGeometry(object):
    """
    Tool to work on a DimensionedGeometry. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDimen_ToolDimensionedGeometry self) -> IGESDimen_ToolDimensionedGeometry

        Returns a ToolDimensionedGeometry, ready to work


        """
        this = _IGESDimen.new_IGESDimen_ToolDimensionedGeometry(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDimen_ToolDimensionedGeometry self, Handle_IGESDimen_DimensionedGeometry ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_DimensionedGeometry
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDimen.IGESDimen_ToolDimensionedGeometry_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDimen_ToolDimensionedGeometry self, Handle_IGESDimen_DimensionedGeometry ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_DimensionedGeometry
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDimen.IGESDimen_ToolDimensionedGeometry_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDimen_ToolDimensionedGeometry self, Handle_IGESDimen_DimensionedGeometry ent, Interface_EntityIterator iter)

        Lists the Entities shared by a DimensionedGeometry <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_DimensionedGeometry
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.IGESDimen_ToolDimensionedGeometry_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESDimen_ToolDimensionedGeometry self, Handle_IGESDimen_DimensionedGeometry ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a DimensionedGeometry
        (NbDimensions forced to 1)

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_DimensionedGeometry
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.IGESDimen_ToolDimensionedGeometry_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDimen_ToolDimensionedGeometry self, Handle_IGESDimen_DimensionedGeometry ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_DimensionedGeometry
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDimen.IGESDimen_ToolDimensionedGeometry_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDimen_ToolDimensionedGeometry self, Handle_IGESDimen_DimensionedGeometry ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_DimensionedGeometry
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDimen.IGESDimen_ToolDimensionedGeometry_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDimen_ToolDimensionedGeometry self, Handle_IGESDimen_DimensionedGeometry entfrom, Handle_IGESDimen_DimensionedGeometry entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDimen.Handle_IGESDimen_DimensionedGeometry
        :type entto: OCC.wrapper.IGESDimen.Handle_IGESDimen_DimensionedGeometry
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDimen.IGESDimen_ToolDimensionedGeometry_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDimen_ToolDimensionedGeometry self, Handle_IGESDimen_DimensionedGeometry ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_DimensionedGeometry
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDimen.IGESDimen_ToolDimensionedGeometry_OwnDump(self, *args)

    __swig_destroy__ = _IGESDimen.delete_IGESDimen_ToolDimensionedGeometry
IGESDimen_ToolDimensionedGeometry_swigregister = _IGESDimen.IGESDimen_ToolDimensionedGeometry_swigregister
IGESDimen_ToolDimensionedGeometry_swigregister(IGESDimen_ToolDimensionedGeometry)

class IGESDimen_ToolDimensionUnits(object):
    """
    Tool to work on a DimensionUnits. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDimen_ToolDimensionUnits self) -> IGESDimen_ToolDimensionUnits

        Returns a ToolDimensionUnits, ready to work


        """
        this = _IGESDimen.new_IGESDimen_ToolDimensionUnits(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDimen_ToolDimensionUnits self, Handle_IGESDimen_DimensionUnits ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_DimensionUnits
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDimen.IGESDimen_ToolDimensionUnits_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDimen_ToolDimensionUnits self, Handle_IGESDimen_DimensionUnits ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_DimensionUnits
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDimen.IGESDimen_ToolDimensionUnits_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDimen_ToolDimensionUnits self, Handle_IGESDimen_DimensionUnits ent, Interface_EntityIterator iter)

        Lists the Entities shared by a DimensionUnits <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_DimensionUnits
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.IGESDimen_ToolDimensionUnits_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESDimen_ToolDimensionUnits self, Handle_IGESDimen_DimensionUnits ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a DimensionUnits
        (NbPropertyValues forced to 6)

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_DimensionUnits
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.IGESDimen_ToolDimensionUnits_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDimen_ToolDimensionUnits self, Handle_IGESDimen_DimensionUnits ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_DimensionUnits
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDimen.IGESDimen_ToolDimensionUnits_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDimen_ToolDimensionUnits self, Handle_IGESDimen_DimensionUnits ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_DimensionUnits
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDimen.IGESDimen_ToolDimensionUnits_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDimen_ToolDimensionUnits self, Handle_IGESDimen_DimensionUnits entfrom, Handle_IGESDimen_DimensionUnits entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDimen.Handle_IGESDimen_DimensionUnits
        :type entto: OCC.wrapper.IGESDimen.Handle_IGESDimen_DimensionUnits
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDimen.IGESDimen_ToolDimensionUnits_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDimen_ToolDimensionUnits self, Handle_IGESDimen_DimensionUnits ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_DimensionUnits
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDimen.IGESDimen_ToolDimensionUnits_OwnDump(self, *args)

    __swig_destroy__ = _IGESDimen.delete_IGESDimen_ToolDimensionUnits
IGESDimen_ToolDimensionUnits_swigregister = _IGESDimen.IGESDimen_ToolDimensionUnits_swigregister
IGESDimen_ToolDimensionUnits_swigregister(IGESDimen_ToolDimensionUnits)

class Handle_IGESDimen_DimensionTolerance(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDimen_DimensionTolerance self)

        Nullify the handle


        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDimen_DimensionTolerance self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDimen_DimensionTolerance self, IGESDimen_DimensionTolerance thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDimen_DimensionTolerance self, Handle_IGESDimen_DimensionTolerance theHandle) -> Handle_IGESDimen_DimensionTolerance
        assign(Handle_IGESDimen_DimensionTolerance self, IGESDimen_DimensionTolerance thePtr) -> Handle_IGESDimen_DimensionTolerance
        assign(Handle_IGESDimen_DimensionTolerance self, Handle_IGESDimen_DimensionTolerance theHandle) -> Handle_IGESDimen_DimensionTolerance

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDimen_DimensionTolerance self) -> IGESDimen_DimensionTolerance

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDimen_DimensionTolerance self) -> IGESDimen_DimensionTolerance

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDimen_DimensionTolerance self) -> IGESDimen_DimensionTolerance

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance___ref__(self, *args)


    def __hash__(self):
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDimen.Handle_IGESDimen_DimensionTolerance___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDimen.new_Handle_IGESDimen_DimensionTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDimen.Handle_IGESDimen_DimensionTolerance_DownCast)
    __swig_destroy__ = _IGESDimen.delete_Handle_IGESDimen_DimensionTolerance

    def Init(self, *args):
        """
        Init(Handle_IGESDimen_DimensionTolerance self, Standard_Integer const nbPropVal, Standard_Integer const aSecTolFlag, Standard_Integer const aTolType, Standard_Integer const aTolPlaceFlag, Standard_Real const anUpperTol, Standard_Real const aLowerTol, Standard_Boolean const aSignFlag, Standard_Integer const aFracFlag, Standard_Integer const aPrecision)

        This method is used to set the fields of the class
        DimensionTolerance
        - nbPropVal     : Number of property values, default = 8
        - aSecTolFlag   : Secondary Tolerance Flag
        0 = Applies to primary dimension
        1 = Applies to secondary dimension
        2 = Display values as fractions
        - aTolType      : Tolerance Type
        1  = Bilateral
        2  = Upper/Lower
        3  = Unilateral Upper
        4  = Unilateral Lower
        5  = Range - min before max
        6  = Range - min after max
        7  = Range - min above max
        8  = Range - min below max
        9  = Nominal + Range - min above max
        10 = Nominal + Range - min below max
        - aTolPlaceFlag : Tolerance Placement Flag
        1 = Before nominal value
        2 = After nominal value
        3 = Above nominal value
        4 = Below nominal value
        - anUpperTol    : Upper Tolerance
        - aLowerTol     : Lower Tolerance
        - aSignFlag     : Sign Suppression Flag
        - aFracFlag     : Fraction Flag
        0 = Display values as decimal numbers
        1 = Display values as mixed fractions
        2 = Display values as fractions
        - aPrecision    : Precision Value

        :type nbPropVal: int
        :type aSecTolFlag: int
        :type aTolType: int
        :type aTolPlaceFlag: int
        :type anUpperTol: float
        :type aLowerTol: float
        :type aSignFlag: bool
        :type aFracFlag: int
        :type aPrecision: int

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(Handle_IGESDimen_DimensionTolerance self) -> Standard_Integer

        returns the number of property values, always = 8

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_NbPropertyValues(self, *args)


    def SecondaryToleranceFlag(self, *args):
        """
        SecondaryToleranceFlag(Handle_IGESDimen_DimensionTolerance self) -> Standard_Integer

        returns the Secondary Tolerance Flag

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_SecondaryToleranceFlag(self, *args)


    def ToleranceType(self, *args):
        """
        ToleranceType(Handle_IGESDimen_DimensionTolerance self) -> Standard_Integer

        returns the Tolerance Type

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_ToleranceType(self, *args)


    def TolerancePlacementFlag(self, *args):
        """
        TolerancePlacementFlag(Handle_IGESDimen_DimensionTolerance self) -> Standard_Integer

        returns the Tolerance Placement Flag, default = 2

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_TolerancePlacementFlag(self, *args)


    def UpperTolerance(self, *args):
        """
        UpperTolerance(Handle_IGESDimen_DimensionTolerance self) -> Standard_Real

        returns the Upper or Bilateral Tolerance Value

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_UpperTolerance(self, *args)


    def LowerTolerance(self, *args):
        """
        LowerTolerance(Handle_IGESDimen_DimensionTolerance self) -> Standard_Real

        returns the Lower Tolerance Value

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_LowerTolerance(self, *args)


    def SignSuppressionFlag(self, *args):
        """
        SignSuppressionFlag(Handle_IGESDimen_DimensionTolerance self) -> Standard_Boolean

        returns the Sign Suppression Flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_SignSuppressionFlag(self, *args)


    def FractionFlag(self, *args):
        """
        FractionFlag(Handle_IGESDimen_DimensionTolerance self) -> Standard_Integer

        returns the Fraction Flag

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_FractionFlag(self, *args)


    def Precision(self, *args):
        """
        Precision(Handle_IGESDimen_DimensionTolerance self) -> Standard_Integer

        returns the Precision for Value Display

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_Precision(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDimen_DimensionTolerance self) -> char const *

        :rtype: const char *

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_DimensionTolerance_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_DimensionTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDimen_DimensionTolerance self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDimen_DimensionTolerance self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDimen_DimensionTolerance self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDimen_DimensionTolerance self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDimen_DimensionTolerance self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDimen_DimensionTolerance self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDimen_DimensionTolerance self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDimen_DimensionTolerance self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDimen_DimensionTolerance self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDimen_DimensionTolerance self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDimen_DimensionTolerance self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDimen_DimensionTolerance self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDimen_DimensionTolerance self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDimen_DimensionTolerance self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDimen_DimensionTolerance self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDimen_DimensionTolerance self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDimen_DimensionTolerance self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDimen_DimensionTolerance self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDimen_DimensionTolerance self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDimen_DimensionTolerance self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDimen_DimensionTolerance self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDimen_DimensionTolerance self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDimen_DimensionTolerance self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDimen_DimensionTolerance self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDimen_DimensionTolerance self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDimen_DimensionTolerance self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDimen_DimensionTolerance self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDimen_DimensionTolerance self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDimen_DimensionTolerance self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDimen_DimensionTolerance self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDimen_DimensionTolerance self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDimen_DimensionTolerance self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDimen_DimensionTolerance self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDimen_DimensionTolerance self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDimen_DimensionTolerance self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDimen_DimensionTolerance self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDimen_DimensionTolerance self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDimen_DimensionTolerance self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDimen_DimensionTolerance self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDimen_DimensionTolerance self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDimen_DimensionTolerance self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDimen_DimensionTolerance self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDimen_DimensionTolerance self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDimen_DimensionTolerance self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDimen_DimensionTolerance self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDimen_DimensionTolerance self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDimen_DimensionTolerance self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDimen_DimensionTolerance self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDimen_DimensionTolerance self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDimen_DimensionTolerance self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDimen_DimensionTolerance self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDimen_DimensionTolerance self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDimen_DimensionTolerance self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDimen_DimensionTolerance self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDimen_DimensionTolerance self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDimen_DimensionTolerance self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDimen_DimensionTolerance self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDimen_DimensionTolerance self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDimen_DimensionTolerance self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDimen_DimensionTolerance self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDimen_DimensionTolerance self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDimen_DimensionTolerance self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDimen_DimensionTolerance self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDimen_DimensionTolerance self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDimen_DimensionTolerance self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDimen_DimensionTolerance self)

        Memory deallocator for transient classes


        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDimen_DimensionTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDimen_DimensionTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDimen_DimensionTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDimen_DimensionTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDimen_DimensionTolerance self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDimen_DimensionTolerance self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDimen_DimensionTolerance self)

        Increments the reference counter of this object


        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDimen_DimensionTolerance self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionTolerance_DecrementRefCounter(self, *args)

Handle_IGESDimen_DimensionTolerance_swigregister = _IGESDimen.Handle_IGESDimen_DimensionTolerance_swigregister
Handle_IGESDimen_DimensionTolerance_swigregister(Handle_IGESDimen_DimensionTolerance)

def Handle_IGESDimen_DimensionTolerance_DownCast(thing):
    return _IGESDimen.Handle_IGESDimen_DimensionTolerance_DownCast(thing)
Handle_IGESDimen_DimensionTolerance_DownCast = _IGESDimen.Handle_IGESDimen_DimensionTolerance_DownCast

class Handle_IGESDimen_PointDimension(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDimen_PointDimension self)

        Nullify the handle


        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDimen_PointDimension self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDimen_PointDimension self, IGESDimen_PointDimension thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDimen_PointDimension self, Handle_IGESDimen_PointDimension theHandle) -> Handle_IGESDimen_PointDimension
        assign(Handle_IGESDimen_PointDimension self, IGESDimen_PointDimension thePtr) -> Handle_IGESDimen_PointDimension
        assign(Handle_IGESDimen_PointDimension self, Handle_IGESDimen_PointDimension theHandle) -> Handle_IGESDimen_PointDimension

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDimen_PointDimension self) -> IGESDimen_PointDimension

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDimen_PointDimension self) -> IGESDimen_PointDimension

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDimen_PointDimension self) -> IGESDimen_PointDimension

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension___ref__(self, *args)


    def __hash__(self):
        return _IGESDimen.Handle_IGESDimen_PointDimension___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDimen.Handle_IGESDimen_PointDimension___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDimen.new_Handle_IGESDimen_PointDimension(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDimen.Handle_IGESDimen_PointDimension_DownCast)
    __swig_destroy__ = _IGESDimen.delete_Handle_IGESDimen_PointDimension

    def Init(self, *args):
        """
        Init(Handle_IGESDimen_PointDimension self, Handle_IGESDimen_GeneralNote aNote, Handle_IGESDimen_LeaderArrow anArrow, Handle_IGESData_IGESEntity aGeom)

        :type aNote: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote
        :type anArrow: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow
        :type aGeom: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_Init(self, *args)


    def Note(self, *args):
        """
        Note(Handle_IGESDimen_PointDimension self) -> Handle_IGESDimen_GeneralNote

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_Note(self, *args)


    def LeaderArrow(self, *args):
        """
        LeaderArrow(Handle_IGESDimen_PointDimension self) -> Handle_IGESDimen_LeaderArrow

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_LeaderArrow(self, *args)


    def GeomCase(self, *args):
        """
        GeomCase(Handle_IGESDimen_PointDimension self) -> Standard_Integer

        returns the type of geometric entity.
        0 if no hexagon or circle encloses the text
        1 if CircularArc
        2 if CompositeCurve
        3 otherwise

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_GeomCase(self, *args)


    def Geom(self, *args):
        """
        Geom(Handle_IGESDimen_PointDimension self) -> Handle_IGESData_IGESEntity

        returns the Geometry Entity, Null handle if GeomCase(me) .eq. 0

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_Geom(self, *args)


    def CircularArc(self, *args):
        """
        CircularArc(Handle_IGESDimen_PointDimension self) -> Handle_IGESGeom_CircularArc

        returns Null handle if GeomCase(me) .ne. 1

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_CircularArc

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_CircularArc(self, *args)


    def CompositeCurve(self, *args):
        """
        CompositeCurve(Handle_IGESDimen_PointDimension self) -> Handle_IGESGeom_CompositeCurve

        returns Null handle if GeomCase(me) .ne. 2

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_CompositeCurve

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_CompositeCurve(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDimen_PointDimension self) -> char const *

        :rtype: const char *

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_PointDimension_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_PointDimension_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDimen_PointDimension self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDimen_PointDimension self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDimen_PointDimension self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDimen_PointDimension self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDimen_PointDimension self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDimen_PointDimension self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDimen_PointDimension self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDimen_PointDimension self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDimen_PointDimension self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDimen_PointDimension self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDimen_PointDimension self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDimen_PointDimension self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDimen_PointDimension self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDimen_PointDimension self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDimen_PointDimension self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDimen_PointDimension self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDimen_PointDimension self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDimen_PointDimension self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDimen_PointDimension self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDimen_PointDimension self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDimen_PointDimension self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDimen_PointDimension self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDimen_PointDimension self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDimen_PointDimension self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDimen_PointDimension self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDimen_PointDimension self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDimen_PointDimension self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDimen_PointDimension self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDimen_PointDimension self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDimen_PointDimension self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDimen_PointDimension self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDimen_PointDimension self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDimen_PointDimension self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDimen_PointDimension self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDimen_PointDimension self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDimen_PointDimension self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDimen_PointDimension self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDimen_PointDimension self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDimen_PointDimension self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDimen_PointDimension self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDimen_PointDimension self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDimen_PointDimension self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDimen_PointDimension self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDimen_PointDimension self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDimen_PointDimension self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDimen_PointDimension self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDimen_PointDimension self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDimen_PointDimension self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDimen_PointDimension self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDimen_PointDimension self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDimen_PointDimension self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDimen_PointDimension self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDimen_PointDimension self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDimen_PointDimension self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDimen_PointDimension self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDimen_PointDimension self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDimen_PointDimension self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDimen_PointDimension self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDimen_PointDimension self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDimen_PointDimension self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDimen_PointDimension self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDimen_PointDimension self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDimen_PointDimension self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDimen_PointDimension self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDimen_PointDimension self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDimen_PointDimension self)

        Memory deallocator for transient classes


        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDimen_PointDimension self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDimen_PointDimension self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDimen_PointDimension self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDimen_PointDimension self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDimen_PointDimension self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDimen_PointDimension self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDimen_PointDimension self)

        Increments the reference counter of this object


        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDimen_PointDimension self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_PointDimension_DecrementRefCounter(self, *args)

Handle_IGESDimen_PointDimension_swigregister = _IGESDimen.Handle_IGESDimen_PointDimension_swigregister
Handle_IGESDimen_PointDimension_swigregister(Handle_IGESDimen_PointDimension)

def Handle_IGESDimen_PointDimension_DownCast(thing):
    return _IGESDimen.Handle_IGESDimen_PointDimension_DownCast(thing)
Handle_IGESDimen_PointDimension_DownCast = _IGESDimen.Handle_IGESDimen_PointDimension_DownCast

class IGESDimen_OrdinateDimension(IGESData.IGESData_IGESEntity):
    """
    defines IGES Ordinate Dimension, Type <218> Form <0, 1>,
    in package IGESDimen
    Note   : The ordinate dimension entity is used to
    indicate dimensions from a common base line.
    Dimensioning is only permitted along the XT
    or YT axis.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDimen_OrdinateDimension
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDimen_OrdinateDimension(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDimen_OrdinateDimension self) -> IGESDimen_OrdinateDimension

        defines IGES Ordinate Dimension, Type <218> Form <0, 1>,
        in package IGESDimen
        Note   : The ordinate dimension entity is used to
        indicate dimensions from a common base line.
        Dimensioning is only permitted along the XT
        or YT axis.
        """
        this = _IGESDimen.new_IGESDimen_OrdinateDimension(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDimen_OrdinateDimension self, Handle_IGESDimen_GeneralNote aNote, Standard_Boolean const aType, Handle_IGESDimen_WitnessLine aLine, Handle_IGESDimen_LeaderArrow anArrow)

        :type aNote: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote
        :type aType: bool
        :type aLine: OCC.wrapper.IGESDimen.Handle_IGESDimen_WitnessLine
        :type anArrow: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow

        """
        return _IGESDimen.IGESDimen_OrdinateDimension_Init(self, *args)


    def IsLine(self, *args):
        """
        IsLine(IGESDimen_OrdinateDimension self) -> Standard_Boolean

        returns True if Witness Line and False if Leader (only for Form 0)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.IGESDimen_OrdinateDimension_IsLine(self, *args)


    def IsLeader(self, *args):
        """
        IsLeader(IGESDimen_OrdinateDimension self) -> Standard_Boolean

        returns True if Leader and False if Witness Line (only for Form 0)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.IGESDimen_OrdinateDimension_IsLeader(self, *args)


    def Note(self, *args):
        """
        Note(IGESDimen_OrdinateDimension self) -> Handle_IGESDimen_GeneralNote

        returns the General Note entity associated.

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote

        """
        return _IGESDimen.IGESDimen_OrdinateDimension_Note(self, *args)


    def WitnessLine(self, *args):
        """
        WitnessLine(IGESDimen_OrdinateDimension self) -> Handle_IGESDimen_WitnessLine

        returns the Witness Line associated or Null handle

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_WitnessLine

        """
        return _IGESDimen.IGESDimen_OrdinateDimension_WitnessLine(self, *args)


    def Leader(self, *args):
        """
        Leader(IGESDimen_OrdinateDimension self) -> Handle_IGESDimen_LeaderArrow

        returns the Leader associated or Null handle

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow

        """
        return _IGESDimen.IGESDimen_OrdinateDimension_Leader(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDimen.IGESDimen_OrdinateDimension_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDimen.IGESDimen_OrdinateDimension_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.IGESDimen_OrdinateDimension_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDimen.delete_IGESDimen_OrdinateDimension
IGESDimen_OrdinateDimension_swigregister = _IGESDimen.IGESDimen_OrdinateDimension_swigregister
IGESDimen_OrdinateDimension_swigregister(IGESDimen_OrdinateDimension)

def IGESDimen_OrdinateDimension_get_type_name(*args):
    """
    IGESDimen_OrdinateDimension_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDimen.IGESDimen_OrdinateDimension_get_type_name(*args)

def IGESDimen_OrdinateDimension_get_type_descriptor(*args):
    """
    IGESDimen_OrdinateDimension_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDimen.IGESDimen_OrdinateDimension_get_type_descriptor(*args)

class IGESDimen_ToolAngularDimension(object):
    """
    Tool to work on a AngularDimension. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDimen_ToolAngularDimension self) -> IGESDimen_ToolAngularDimension

        Returns a ToolAngularDimension, ready to work


        """
        this = _IGESDimen.new_IGESDimen_ToolAngularDimension(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDimen_ToolAngularDimension self, Handle_IGESDimen_AngularDimension ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_AngularDimension
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDimen.IGESDimen_ToolAngularDimension_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDimen_ToolAngularDimension self, Handle_IGESDimen_AngularDimension ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_AngularDimension
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDimen.IGESDimen_ToolAngularDimension_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDimen_ToolAngularDimension self, Handle_IGESDimen_AngularDimension ent, Interface_EntityIterator iter)

        Lists the Entities shared by a AngularDimension <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_AngularDimension
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.IGESDimen_ToolAngularDimension_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDimen_ToolAngularDimension self, Handle_IGESDimen_AngularDimension ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_AngularDimension
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDimen.IGESDimen_ToolAngularDimension_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDimen_ToolAngularDimension self, Handle_IGESDimen_AngularDimension ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_AngularDimension
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDimen.IGESDimen_ToolAngularDimension_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDimen_ToolAngularDimension self, Handle_IGESDimen_AngularDimension entfrom, Handle_IGESDimen_AngularDimension entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDimen.Handle_IGESDimen_AngularDimension
        :type entto: OCC.wrapper.IGESDimen.Handle_IGESDimen_AngularDimension
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDimen.IGESDimen_ToolAngularDimension_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDimen_ToolAngularDimension self, Handle_IGESDimen_AngularDimension ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_AngularDimension
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDimen.IGESDimen_ToolAngularDimension_OwnDump(self, *args)

    __swig_destroy__ = _IGESDimen.delete_IGESDimen_ToolAngularDimension
IGESDimen_ToolAngularDimension_swigregister = _IGESDimen.IGESDimen_ToolAngularDimension_swigregister
IGESDimen_ToolAngularDimension_swigregister(IGESDimen_ToolAngularDimension)

class IGESDimen_ToolDimensionTolerance(object):
    """
    Tool to work on a DimensionTolerance. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDimen_ToolDimensionTolerance self) -> IGESDimen_ToolDimensionTolerance

        Returns a ToolDimensionTolerance, ready to work


        """
        this = _IGESDimen.new_IGESDimen_ToolDimensionTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDimen_ToolDimensionTolerance self, Handle_IGESDimen_DimensionTolerance ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_DimensionTolerance
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDimen.IGESDimen_ToolDimensionTolerance_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDimen_ToolDimensionTolerance self, Handle_IGESDimen_DimensionTolerance ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_DimensionTolerance
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDimen.IGESDimen_ToolDimensionTolerance_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDimen_ToolDimensionTolerance self, Handle_IGESDimen_DimensionTolerance ent, Interface_EntityIterator iter)

        Lists the Entities shared by a DimensionTolerance <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_DimensionTolerance
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.IGESDimen_ToolDimensionTolerance_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESDimen_ToolDimensionTolerance self, Handle_IGESDimen_DimensionTolerance ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a DimensionTolerance
        (NbPropertyValues forced to 8)

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_DimensionTolerance
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.IGESDimen_ToolDimensionTolerance_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDimen_ToolDimensionTolerance self, Handle_IGESDimen_DimensionTolerance ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_DimensionTolerance
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDimen.IGESDimen_ToolDimensionTolerance_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDimen_ToolDimensionTolerance self, Handle_IGESDimen_DimensionTolerance ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_DimensionTolerance
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDimen.IGESDimen_ToolDimensionTolerance_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDimen_ToolDimensionTolerance self, Handle_IGESDimen_DimensionTolerance entfrom, Handle_IGESDimen_DimensionTolerance entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDimen.Handle_IGESDimen_DimensionTolerance
        :type entto: OCC.wrapper.IGESDimen.Handle_IGESDimen_DimensionTolerance
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDimen.IGESDimen_ToolDimensionTolerance_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDimen_ToolDimensionTolerance self, Handle_IGESDimen_DimensionTolerance ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_DimensionTolerance
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDimen.IGESDimen_ToolDimensionTolerance_OwnDump(self, *args)

    __swig_destroy__ = _IGESDimen.delete_IGESDimen_ToolDimensionTolerance
IGESDimen_ToolDimensionTolerance_swigregister = _IGESDimen.IGESDimen_ToolDimensionTolerance_swigregister
IGESDimen_ToolDimensionTolerance_swigregister(IGESDimen_ToolDimensionTolerance)

class Handle_IGESDimen_FlagNote(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDimen_FlagNote self)

        Nullify the handle


        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDimen_FlagNote self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDimen_FlagNote self, IGESDimen_FlagNote thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDimen_FlagNote self, Handle_IGESDimen_FlagNote theHandle) -> Handle_IGESDimen_FlagNote
        assign(Handle_IGESDimen_FlagNote self, IGESDimen_FlagNote thePtr) -> Handle_IGESDimen_FlagNote
        assign(Handle_IGESDimen_FlagNote self, Handle_IGESDimen_FlagNote theHandle) -> Handle_IGESDimen_FlagNote

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDimen_FlagNote self) -> IGESDimen_FlagNote

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDimen_FlagNote self) -> IGESDimen_FlagNote

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDimen_FlagNote self) -> IGESDimen_FlagNote

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote___ref__(self, *args)


    def __hash__(self):
        return _IGESDimen.Handle_IGESDimen_FlagNote___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDimen.Handle_IGESDimen_FlagNote___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDimen.new_Handle_IGESDimen_FlagNote(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDimen.Handle_IGESDimen_FlagNote_DownCast)
    __swig_destroy__ = _IGESDimen.delete_Handle_IGESDimen_FlagNote

    def Init(self, *args):
        """
        Init(Handle_IGESDimen_FlagNote self, gp_XYZ leftCorner, Standard_Real const anAngle, Handle_IGESDimen_GeneralNote aNote, Handle_IGESDimen_HArray1OfLeaderArrow someLeaders)

        This method is used to set the fields of the class
        FlagNote
        - leftCorner  : Lower left corner of the Flag
        - anAngle     : Rotation angle in radians
        - aNote       : General Note Entity
        - someLeaders : Leader Entities

        :type leftCorner: OCC.wrapper.gp.gp_XYZ
        :type anAngle: float
        :type aNote: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote
        :type someLeaders: OCC.wrapper.IGESDimen.Handle_IGESDimen_HArray1OfLeaderArrow

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_Init(self, *args)


    def LowerLeftCorner(self, *args):
        """
        LowerLeftCorner(Handle_IGESDimen_FlagNote self) -> gp_Pnt

        returns Lower Left coordinate of Flag as Pnt from package gp

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_LowerLeftCorner(self, *args)


    def TransformedLowerLeftCorner(self, *args):
        """
        TransformedLowerLeftCorner(Handle_IGESDimen_FlagNote self) -> gp_Pnt

        returns Lower Left coordinate of Flag as Pnt from package gp
        after Transformation.

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_TransformedLowerLeftCorner(self, *args)


    def Angle(self, *args):
        """
        Angle(Handle_IGESDimen_FlagNote self) -> Standard_Real

        returns Rotation angle in radians

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_Angle(self, *args)


    def Note(self, *args):
        """
        Note(Handle_IGESDimen_FlagNote self) -> Handle_IGESDimen_GeneralNote

        returns General Note Entity

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_Note(self, *args)


    def NbLeaders(self, *args):
        """
        NbLeaders(Handle_IGESDimen_FlagNote self) -> Standard_Integer

        returns number of Arrows (Leaders) or zero

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_NbLeaders(self, *args)


    def Leader(self, *args):
        """
        Leader(Handle_IGESDimen_FlagNote self, Standard_Integer const Index) -> Handle_IGESDimen_LeaderArrow

        returns Leader Entity
        raises exception if Index <= 0 or Index > NbLeaders()

        :type Index: int
        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_Leader(self, *args)


    def Height(self, *args):
        """
        Height(Handle_IGESDimen_FlagNote self) -> Standard_Real

        returns Height computed by the formula :
        Height = 2 * CH   where CH is from theNote

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_Height(self, *args)


    def CharacterHeight(self, *args):
        """
        CharacterHeight(Handle_IGESDimen_FlagNote self) -> Standard_Real

        returns the Character Height (from General Note)

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_CharacterHeight(self, *args)


    def Length(self, *args):
        """
        Length(Handle_IGESDimen_FlagNote self) -> Standard_Real

        returns Length computed by the formula :
        Length = TW + 0.4*CH  where CH is from theNote
        and TW is from theNote

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_Length(self, *args)


    def TextWidth(self, *args):
        """
        TextWidth(Handle_IGESDimen_FlagNote self) -> Standard_Real

        returns the Text Width (from General Note)

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_TextWidth(self, *args)


    def TipLength(self, *args):
        """
        TipLength(Handle_IGESDimen_FlagNote self) -> Standard_Real

        returns TipLength computed by the formula :
        TipLength = 0.5 * H / tan 35(deg)  where H is Height()

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_TipLength(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDimen_FlagNote self) -> char const *

        :rtype: const char *

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_FlagNote_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_FlagNote_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDimen_FlagNote self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDimen_FlagNote self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDimen_FlagNote self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDimen_FlagNote self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDimen_FlagNote self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDimen_FlagNote self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDimen_FlagNote self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDimen_FlagNote self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDimen_FlagNote self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDimen_FlagNote self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDimen_FlagNote self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDimen_FlagNote self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDimen_FlagNote self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDimen_FlagNote self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDimen_FlagNote self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDimen_FlagNote self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDimen_FlagNote self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDimen_FlagNote self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDimen_FlagNote self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDimen_FlagNote self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDimen_FlagNote self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDimen_FlagNote self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDimen_FlagNote self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDimen_FlagNote self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDimen_FlagNote self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDimen_FlagNote self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDimen_FlagNote self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDimen_FlagNote self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDimen_FlagNote self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDimen_FlagNote self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDimen_FlagNote self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDimen_FlagNote self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDimen_FlagNote self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDimen_FlagNote self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDimen_FlagNote self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDimen_FlagNote self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDimen_FlagNote self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDimen_FlagNote self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDimen_FlagNote self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDimen_FlagNote self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDimen_FlagNote self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDimen_FlagNote self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDimen_FlagNote self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDimen_FlagNote self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDimen_FlagNote self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDimen_FlagNote self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDimen_FlagNote self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDimen_FlagNote self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDimen_FlagNote self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDimen_FlagNote self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDimen_FlagNote self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDimen_FlagNote self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDimen_FlagNote self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDimen_FlagNote self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDimen_FlagNote self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDimen_FlagNote self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDimen_FlagNote self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDimen_FlagNote self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDimen_FlagNote self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDimen_FlagNote self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDimen_FlagNote self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDimen_FlagNote self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDimen_FlagNote self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDimen_FlagNote self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDimen_FlagNote self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDimen_FlagNote self)

        Memory deallocator for transient classes


        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDimen_FlagNote self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDimen_FlagNote self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDimen_FlagNote self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDimen_FlagNote self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDimen_FlagNote self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDimen_FlagNote self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDimen_FlagNote self)

        Increments the reference counter of this object


        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDimen_FlagNote self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_FlagNote_DecrementRefCounter(self, *args)

Handle_IGESDimen_FlagNote_swigregister = _IGESDimen.Handle_IGESDimen_FlagNote_swigregister
Handle_IGESDimen_FlagNote_swigregister(Handle_IGESDimen_FlagNote)

def Handle_IGESDimen_FlagNote_DownCast(thing):
    return _IGESDimen.Handle_IGESDimen_FlagNote_DownCast(thing)
Handle_IGESDimen_FlagNote_DownCast = _IGESDimen.Handle_IGESDimen_FlagNote_DownCast

class IGESDimen_ToolFlagNote(object):
    """
    Tool to work on a FlagNote. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDimen_ToolFlagNote self) -> IGESDimen_ToolFlagNote

        Returns a ToolFlagNote, ready to work


        """
        this = _IGESDimen.new_IGESDimen_ToolFlagNote(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDimen_ToolFlagNote self, Handle_IGESDimen_FlagNote ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_FlagNote
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDimen.IGESDimen_ToolFlagNote_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDimen_ToolFlagNote self, Handle_IGESDimen_FlagNote ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_FlagNote
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDimen.IGESDimen_ToolFlagNote_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDimen_ToolFlagNote self, Handle_IGESDimen_FlagNote ent, Interface_EntityIterator iter)

        Lists the Entities shared by a FlagNote <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_FlagNote
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.IGESDimen_ToolFlagNote_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDimen_ToolFlagNote self, Handle_IGESDimen_FlagNote ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_FlagNote
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDimen.IGESDimen_ToolFlagNote_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDimen_ToolFlagNote self, Handle_IGESDimen_FlagNote ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_FlagNote
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDimen.IGESDimen_ToolFlagNote_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDimen_ToolFlagNote self, Handle_IGESDimen_FlagNote entfrom, Handle_IGESDimen_FlagNote entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDimen.Handle_IGESDimen_FlagNote
        :type entto: OCC.wrapper.IGESDimen.Handle_IGESDimen_FlagNote
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDimen.IGESDimen_ToolFlagNote_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDimen_ToolFlagNote self, Handle_IGESDimen_FlagNote ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_FlagNote
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDimen.IGESDimen_ToolFlagNote_OwnDump(self, *args)

    __swig_destroy__ = _IGESDimen.delete_IGESDimen_ToolFlagNote
IGESDimen_ToolFlagNote_swigregister = _IGESDimen.IGESDimen_ToolFlagNote_swigregister
IGESDimen_ToolFlagNote_swigregister(IGESDimen_ToolFlagNote)

class IGESDimen_LeaderArrow(IGESData.IGESData_IGESEntity):
    """
    defines LeaderArrow, Type <214> Form <1-12>
    in package IGESDimen
    Consists of one or more line segments except when
    leader is part of an angular dimension, with links to
    presumed text item
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDimen_LeaderArrow
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDimen_LeaderArrow(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDimen_LeaderArrow self) -> IGESDimen_LeaderArrow

        defines LeaderArrow, Type <214> Form <1-12>
        in package IGESDimen
        Consists of one or more line segments except when
        leader is part of an angular dimension, with links to
        presumed text item
        """
        this = _IGESDimen.new_IGESDimen_LeaderArrow(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDimen_LeaderArrow self, Standard_Real const height, Standard_Real const width, Standard_Real const depth, gp_XY position, Handle_TColgp_HArray1OfXY segments)

        This method is used to set the fields of the class
        LeaderArrow
        - height      : ArrowHead height
        - width       : ArrowHead width
        - depth       : Z Depth
        - position    : ArrowHead coordinates
        - segments    : Segment tail coordinate pairs

        :type height: float
        :type width: float
        :type depth: float
        :type position: OCC.wrapper.gp.gp_XY
        :type segments: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfXY

        """
        return _IGESDimen.IGESDimen_LeaderArrow_Init(self, *args)


    def SetFormNumber(self, *args):
        """
        SetFormNumber(IGESDimen_LeaderArrow self, Standard_Integer const form)

        Changes FormNumber (indicates the Shape of the Arrow)
        Error if not in range [0-12]

        :type form: int

        """
        return _IGESDimen.IGESDimen_LeaderArrow_SetFormNumber(self, *args)


    def NbSegments(self, *args):
        """
        NbSegments(IGESDimen_LeaderArrow self) -> Standard_Integer

        returns number of segments

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_LeaderArrow_NbSegments(self, *args)


    def ArrowHeadHeight(self, *args):
        """
        ArrowHeadHeight(IGESDimen_LeaderArrow self) -> Standard_Real

        returns ArrowHead height

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_LeaderArrow_ArrowHeadHeight(self, *args)


    def ArrowHeadWidth(self, *args):
        """
        ArrowHeadWidth(IGESDimen_LeaderArrow self) -> Standard_Real

        returns ArrowHead width

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_LeaderArrow_ArrowHeadWidth(self, *args)


    def ZDepth(self, *args):
        """
        ZDepth(IGESDimen_LeaderArrow self) -> Standard_Real

        returns Z depth

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_LeaderArrow_ZDepth(self, *args)


    def ArrowHead(self, *args):
        """
        ArrowHead(IGESDimen_LeaderArrow self) -> gp_Pnt2d

        returns ArrowHead co-ordinates

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESDimen.IGESDimen_LeaderArrow_ArrowHead(self, *args)


    def TransformedArrowHead(self, *args):
        """
        TransformedArrowHead(IGESDimen_LeaderArrow self) -> gp_Pnt

        returns ArrowHead co-ordinates after Transformation

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.IGESDimen_LeaderArrow_TransformedArrowHead(self, *args)


    def SegmentTail(self, *args):
        """
        SegmentTail(IGESDimen_LeaderArrow self, Standard_Integer const Index) -> gp_Pnt2d

        returns segment tail co-ordinates.
        raises exception if Index <= 0 or Index > NbSegments

        :type Index: int
        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESDimen.IGESDimen_LeaderArrow_SegmentTail(self, *args)


    def TransformedSegmentTail(self, *args):
        """
        TransformedSegmentTail(IGESDimen_LeaderArrow self, Standard_Integer const Index) -> gp_Pnt

        returns segment tail co-ordinates after Transformation.
        raises exception if Index <= 0 or Index > NbSegments

        :type Index: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.IGESDimen_LeaderArrow_TransformedSegmentTail(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDimen.IGESDimen_LeaderArrow_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDimen.IGESDimen_LeaderArrow_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.IGESDimen_LeaderArrow_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDimen.delete_IGESDimen_LeaderArrow
IGESDimen_LeaderArrow_swigregister = _IGESDimen.IGESDimen_LeaderArrow_swigregister
IGESDimen_LeaderArrow_swigregister(IGESDimen_LeaderArrow)

def IGESDimen_LeaderArrow_get_type_name(*args):
    """
    IGESDimen_LeaderArrow_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDimen.IGESDimen_LeaderArrow_get_type_name(*args)

def IGESDimen_LeaderArrow_get_type_descriptor(*args):
    """
    IGESDimen_LeaderArrow_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDimen.IGESDimen_LeaderArrow_get_type_descriptor(*args)

class NCollection_Array1_Handle_IGESDimen_GeneralNote(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_IGESDimen_GeneralNote self) -> NCollection_Array1< opencascade::handle< IGESDimen_GeneralNote > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _IGESDimen.NCollection_Array1_Handle_IGESDimen_GeneralNote_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_IGESDimen_GeneralNote self) -> NCollection_Array1< opencascade::handle< IGESDimen_GeneralNote > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _IGESDimen.NCollection_Array1_Handle_IGESDimen_GeneralNote_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_IGESDimen_GeneralNote self) -> NCollection_Array1< opencascade::handle< IGESDimen_GeneralNote > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _IGESDimen.NCollection_Array1_Handle_IGESDimen_GeneralNote_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_IGESDimen_GeneralNote self) -> NCollection_Array1< opencascade::handle< IGESDimen_GeneralNote > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _IGESDimen.NCollection_Array1_Handle_IGESDimen_GeneralNote_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _IGESDimen.new_NCollection_Array1_Handle_IGESDimen_GeneralNote(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_IGESDimen_GeneralNote self, Handle_IGESDimen_GeneralNote theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _IGESDimen.NCollection_Array1_Handle_IGESDimen_GeneralNote_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_IGESDimen_GeneralNote self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.NCollection_Array1_Handle_IGESDimen_GeneralNote_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_IGESDimen_GeneralNote self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.NCollection_Array1_Handle_IGESDimen_GeneralNote_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_IGESDimen_GeneralNote self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.NCollection_Array1_Handle_IGESDimen_GeneralNote_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_IGESDimen_GeneralNote self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.NCollection_Array1_Handle_IGESDimen_GeneralNote_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_IGESDimen_GeneralNote self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.NCollection_Array1_Handle_IGESDimen_GeneralNote_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_IGESDimen_GeneralNote self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.NCollection_Array1_Handle_IGESDimen_GeneralNote_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_IGESDimen_GeneralNote self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.NCollection_Array1_Handle_IGESDimen_GeneralNote_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_IGESDimen_GeneralNote self, NCollection_Array1_Handle_IGESDimen_GeneralNote theOther) -> NCollection_Array1_Handle_IGESDimen_GeneralNote

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESDimen.NCollection_Array1_Handle_IGESDimen_GeneralNote_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_IGESDimen_GeneralNote self, NCollection_Array1_Handle_IGESDimen_GeneralNote theOther) -> NCollection_Array1_Handle_IGESDimen_GeneralNote

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESDimen.NCollection_Array1_Handle_IGESDimen_GeneralNote_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_IGESDimen_GeneralNote self, NCollection_Array1_Handle_IGESDimen_GeneralNote theOther) -> NCollection_Array1_Handle_IGESDimen_GeneralNote
        assign(NCollection_Array1_Handle_IGESDimen_GeneralNote self, NCollection_Array1_Handle_IGESDimen_GeneralNote theOther) -> NCollection_Array1_Handle_IGESDimen_GeneralNote

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESDimen.NCollection_Array1_Handle_IGESDimen_GeneralNote_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _IGESDimen.NCollection_Array1_Handle_IGESDimen_GeneralNote_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_IGESDimen_GeneralNote self) -> Handle_IGESDimen_GeneralNote

        @return first element

        :rtype: TheItemType &

        """
        return _IGESDimen.NCollection_Array1_Handle_IGESDimen_GeneralNote_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _IGESDimen.NCollection_Array1_Handle_IGESDimen_GeneralNote_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_IGESDimen_GeneralNote self) -> Handle_IGESDimen_GeneralNote

        @return last element

        :rtype: TheItemType &

        """
        return _IGESDimen.NCollection_Array1_Handle_IGESDimen_GeneralNote_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESDimen.NCollection_Array1_Handle_IGESDimen_GeneralNote_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_IGESDimen_GeneralNote self, Standard_Integer const theIndex) -> Handle_IGESDimen_GeneralNote

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _IGESDimen.NCollection_Array1_Handle_IGESDimen_GeneralNote_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESDimen.NCollection_Array1_Handle_IGESDimen_GeneralNote___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESDimen.NCollection_Array1_Handle_IGESDimen_GeneralNote_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_IGESDimen_GeneralNote self, Standard_Integer const theIndex, Handle_IGESDimen_GeneralNote theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _IGESDimen.NCollection_Array1_Handle_IGESDimen_GeneralNote_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_IGESDimen_GeneralNote self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _IGESDimen.NCollection_Array1_Handle_IGESDimen_GeneralNote_Resize(self, *args)

    __swig_destroy__ = _IGESDimen.delete_NCollection_Array1_Handle_IGESDimen_GeneralNote
NCollection_Array1_Handle_IGESDimen_GeneralNote_swigregister = _IGESDimen.NCollection_Array1_Handle_IGESDimen_GeneralNote_swigregister
NCollection_Array1_Handle_IGESDimen_GeneralNote_swigregister(NCollection_Array1_Handle_IGESDimen_GeneralNote)


try:
	IGESDimen_Array1OfGeneralNote = NCollection_Array1_Handle_IGESDimen_GeneralNote
except NameError:
	pass # does not exist, probably ignored

class IGESDimen_ToolSection(object):
    """
    Tool to work on a Section. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDimen_ToolSection self) -> IGESDimen_ToolSection

        Returns a ToolSection, ready to work


        """
        this = _IGESDimen.new_IGESDimen_ToolSection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDimen_ToolSection self, Handle_IGESDimen_Section ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_Section
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDimen.IGESDimen_ToolSection_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDimen_ToolSection self, Handle_IGESDimen_Section ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_Section
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDimen.IGESDimen_ToolSection_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDimen_ToolSection self, Handle_IGESDimen_Section ent, Interface_EntityIterator iter)

        Lists the Entities shared by a Section <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_Section
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.IGESDimen_ToolSection_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESDimen_ToolSection self, Handle_IGESDimen_Section ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a Section
        (LineFont forced to Rank = 1, DataType forced to 1)

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_Section
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.IGESDimen_ToolSection_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDimen_ToolSection self, Handle_IGESDimen_Section ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_Section
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDimen.IGESDimen_ToolSection_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDimen_ToolSection self, Handle_IGESDimen_Section ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_Section
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDimen.IGESDimen_ToolSection_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDimen_ToolSection self, Handle_IGESDimen_Section entfrom, Handle_IGESDimen_Section entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDimen.Handle_IGESDimen_Section
        :type entto: OCC.wrapper.IGESDimen.Handle_IGESDimen_Section
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDimen.IGESDimen_ToolSection_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDimen_ToolSection self, Handle_IGESDimen_Section ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_Section
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDimen.IGESDimen_ToolSection_OwnDump(self, *args)

    __swig_destroy__ = _IGESDimen.delete_IGESDimen_ToolSection
IGESDimen_ToolSection_swigregister = _IGESDimen.IGESDimen_ToolSection_swigregister
IGESDimen_ToolSection_swigregister(IGESDimen_ToolSection)

class Handle_IGESDimen_CurveDimension(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDimen_CurveDimension self)

        Nullify the handle


        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDimen_CurveDimension self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDimen_CurveDimension self, IGESDimen_CurveDimension thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDimen_CurveDimension self, Handle_IGESDimen_CurveDimension theHandle) -> Handle_IGESDimen_CurveDimension
        assign(Handle_IGESDimen_CurveDimension self, IGESDimen_CurveDimension thePtr) -> Handle_IGESDimen_CurveDimension
        assign(Handle_IGESDimen_CurveDimension self, Handle_IGESDimen_CurveDimension theHandle) -> Handle_IGESDimen_CurveDimension

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDimen_CurveDimension self) -> IGESDimen_CurveDimension

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDimen_CurveDimension self) -> IGESDimen_CurveDimension

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDimen_CurveDimension self) -> IGESDimen_CurveDimension

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension___ref__(self, *args)


    def __hash__(self):
        return _IGESDimen.Handle_IGESDimen_CurveDimension___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDimen.Handle_IGESDimen_CurveDimension___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDimen.new_Handle_IGESDimen_CurveDimension(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDimen.Handle_IGESDimen_CurveDimension_DownCast)
    __swig_destroy__ = _IGESDimen.delete_Handle_IGESDimen_CurveDimension

    def Init(self, *args):
        """
        Init(Handle_IGESDimen_CurveDimension self, Handle_IGESDimen_GeneralNote aNote, Handle_IGESData_IGESEntity aCurve, Handle_IGESData_IGESEntity anotherCurve, Handle_IGESDimen_LeaderArrow aLeader, Handle_IGESDimen_LeaderArrow anotherLeader, Handle_IGESDimen_WitnessLine aLine, Handle_IGESDimen_WitnessLine anotherLine)

        This method is used to set the fields of the class
        CurveDimension
        - aNote         : General Note Entity
        - aCurve        : First Curve Entity
        - anotherCurve  : Second Curve Entity or a Null Handle
        - aLeader       : First Leader Entity
        - anotherLeader : Second Leader Entity
        - aLine         : First Witness Line Entity or a Null
        Handle
        - anotherLine   : Second Witness Line Entity or a Null
        Handle

        :type aNote: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote
        :type aCurve: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type anotherCurve: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type aLeader: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow
        :type anotherLeader: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow
        :type aLine: OCC.wrapper.IGESDimen.Handle_IGESDimen_WitnessLine
        :type anotherLine: OCC.wrapper.IGESDimen.Handle_IGESDimen_WitnessLine

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_Init(self, *args)


    def Note(self, *args):
        """
        Note(Handle_IGESDimen_CurveDimension self) -> Handle_IGESDimen_GeneralNote

        returns the General Note Entity

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_Note(self, *args)


    def FirstCurve(self, *args):
        """
        FirstCurve(Handle_IGESDimen_CurveDimension self) -> Handle_IGESData_IGESEntity

        returns the First curve Entity

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_FirstCurve(self, *args)


    def HasSecondCurve(self, *args):
        """
        HasSecondCurve(Handle_IGESDimen_CurveDimension self) -> Standard_Boolean

        returns False if theSecondCurve is a Null Handle.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_HasSecondCurve(self, *args)


    def SecondCurve(self, *args):
        """
        SecondCurve(Handle_IGESDimen_CurveDimension self) -> Handle_IGESData_IGESEntity

        returns the Second curve Entity or a Null Handle.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_SecondCurve(self, *args)


    def FirstLeader(self, *args):
        """
        FirstLeader(Handle_IGESDimen_CurveDimension self) -> Handle_IGESDimen_LeaderArrow

        returns the First Leader Entity

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_FirstLeader(self, *args)


    def SecondLeader(self, *args):
        """
        SecondLeader(Handle_IGESDimen_CurveDimension self) -> Handle_IGESDimen_LeaderArrow

        returns the Second Leader Entity

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_SecondLeader(self, *args)


    def HasFirstWitnessLine(self, *args):
        """
        HasFirstWitnessLine(Handle_IGESDimen_CurveDimension self) -> Standard_Boolean

        returns False if theFirstWitnessLine is a Null Handle.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_HasFirstWitnessLine(self, *args)


    def FirstWitnessLine(self, *args):
        """
        FirstWitnessLine(Handle_IGESDimen_CurveDimension self) -> Handle_IGESDimen_WitnessLine

        returns the First Witness Line Entity or a Null Handle.

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_WitnessLine

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_FirstWitnessLine(self, *args)


    def HasSecondWitnessLine(self, *args):
        """
        HasSecondWitnessLine(Handle_IGESDimen_CurveDimension self) -> Standard_Boolean

        returns False if theSecondWitnessLine is a Null Handle.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_HasSecondWitnessLine(self, *args)


    def SecondWitnessLine(self, *args):
        """
        SecondWitnessLine(Handle_IGESDimen_CurveDimension self) -> Handle_IGESDimen_WitnessLine

        returns the Second Witness Line Entity or a Null Handle.

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_WitnessLine

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_SecondWitnessLine(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDimen_CurveDimension self) -> char const *

        :rtype: const char *

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_CurveDimension_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_CurveDimension_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDimen_CurveDimension self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDimen_CurveDimension self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDimen_CurveDimension self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDimen_CurveDimension self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDimen_CurveDimension self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDimen_CurveDimension self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDimen_CurveDimension self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDimen_CurveDimension self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDimen_CurveDimension self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDimen_CurveDimension self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDimen_CurveDimension self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDimen_CurveDimension self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDimen_CurveDimension self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDimen_CurveDimension self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDimen_CurveDimension self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDimen_CurveDimension self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDimen_CurveDimension self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDimen_CurveDimension self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDimen_CurveDimension self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDimen_CurveDimension self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDimen_CurveDimension self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDimen_CurveDimension self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDimen_CurveDimension self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDimen_CurveDimension self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDimen_CurveDimension self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDimen_CurveDimension self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDimen_CurveDimension self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDimen_CurveDimension self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDimen_CurveDimension self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDimen_CurveDimension self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDimen_CurveDimension self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDimen_CurveDimension self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDimen_CurveDimension self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDimen_CurveDimension self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDimen_CurveDimension self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDimen_CurveDimension self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDimen_CurveDimension self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDimen_CurveDimension self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDimen_CurveDimension self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDimen_CurveDimension self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDimen_CurveDimension self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDimen_CurveDimension self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDimen_CurveDimension self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDimen_CurveDimension self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDimen_CurveDimension self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDimen_CurveDimension self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDimen_CurveDimension self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDimen_CurveDimension self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDimen_CurveDimension self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDimen_CurveDimension self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDimen_CurveDimension self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDimen_CurveDimension self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDimen_CurveDimension self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDimen_CurveDimension self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDimen_CurveDimension self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDimen_CurveDimension self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDimen_CurveDimension self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDimen_CurveDimension self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDimen_CurveDimension self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDimen_CurveDimension self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDimen_CurveDimension self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDimen_CurveDimension self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDimen_CurveDimension self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDimen_CurveDimension self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDimen_CurveDimension self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDimen_CurveDimension self)

        Memory deallocator for transient classes


        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDimen_CurveDimension self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDimen_CurveDimension self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDimen_CurveDimension self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDimen_CurveDimension self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDimen_CurveDimension self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDimen_CurveDimension self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDimen_CurveDimension self)

        Increments the reference counter of this object


        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDimen_CurveDimension self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_CurveDimension_DecrementRefCounter(self, *args)

Handle_IGESDimen_CurveDimension_swigregister = _IGESDimen.Handle_IGESDimen_CurveDimension_swigregister
Handle_IGESDimen_CurveDimension_swigregister(Handle_IGESDimen_CurveDimension)

def Handle_IGESDimen_CurveDimension_DownCast(thing):
    return _IGESDimen.Handle_IGESDimen_CurveDimension_DownCast(thing)
Handle_IGESDimen_CurveDimension_DownCast = _IGESDimen.Handle_IGESDimen_CurveDimension_DownCast

class Handle_IGESDimen_NewGeneralNote(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDimen_NewGeneralNote self)

        Nullify the handle


        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDimen_NewGeneralNote self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDimen_NewGeneralNote self, IGESDimen_NewGeneralNote thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDimen_NewGeneralNote self, Handle_IGESDimen_NewGeneralNote theHandle) -> Handle_IGESDimen_NewGeneralNote
        assign(Handle_IGESDimen_NewGeneralNote self, IGESDimen_NewGeneralNote thePtr) -> Handle_IGESDimen_NewGeneralNote
        assign(Handle_IGESDimen_NewGeneralNote self, Handle_IGESDimen_NewGeneralNote theHandle) -> Handle_IGESDimen_NewGeneralNote

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDimen_NewGeneralNote self) -> IGESDimen_NewGeneralNote

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDimen_NewGeneralNote self) -> IGESDimen_NewGeneralNote

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDimen_NewGeneralNote self) -> IGESDimen_NewGeneralNote

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote___ref__(self, *args)


    def __hash__(self):
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDimen.Handle_IGESDimen_NewGeneralNote___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDimen.new_Handle_IGESDimen_NewGeneralNote(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDimen.Handle_IGESDimen_NewGeneralNote_DownCast)
    __swig_destroy__ = _IGESDimen.delete_Handle_IGESDimen_NewGeneralNote

    def Init(self, *args):
        """
        Init(Handle_IGESDimen_NewGeneralNote self, Standard_Real const width, Standard_Real const height, Standard_Integer const justifyCode, gp_XYZ areaLoc, Standard_Real const areaRotationAngle, gp_XYZ baseLinePos, Standard_Real const normalInterlineSpace, Handle_TColStd_HArray1OfInteger charDisplays, Handle_TColStd_HArray1OfReal charWidths, Handle_TColStd_HArray1OfReal charHeights, Handle_TColStd_HArray1OfReal interCharSpc, Handle_TColStd_HArray1OfReal interLineSpc, Handle_TColStd_HArray1OfInteger fontStyles, Handle_TColStd_HArray1OfReal charAngles, Handle_Interface_HArray1OfHAsciiString controlCodeStrings, Handle_TColStd_HArray1OfInteger nbChars, Handle_TColStd_HArray1OfReal boxWidths, Handle_TColStd_HArray1OfReal boxHeights, Handle_TColStd_HArray1OfInteger charSetCodes, Handle_IGESData_HArray1OfIGESEntity charSetEntities, Handle_TColStd_HArray1OfReal slAngles, Handle_TColStd_HArray1OfReal rotAngles, Handle_TColStd_HArray1OfInteger mirrorFlags, Handle_TColStd_HArray1OfInteger rotateFlags, Handle_TColgp_HArray1OfXYZ startPoints, Handle_Interface_HArray1OfHAsciiString texts)

        This method is used to set the fields of the class
        NewGeneralNote
        - width                : Width of text containment area
        - height               : Height of text containment area
        - justifyCode          : Justification code
        - areaLoc              : Text containment area location
        - areaRotationAngle    : Text containment area rotation
        - baseLinePos          : Base line position
        - normalInterlineSpace : Normal interline spacing
        - charDisplays         : Character display type
        - charWidths           : Character width
        - charHeights          : Character height
        - interCharSpc         : Intercharacter spacing
        - interLineSpc         : Interline spacing
        - fontStyles           : Font style
        - charAngles           : Character angle
        - controlCodeStrings   : Control Code string
        - nbChars              : Number of characters in string
        - boxWidths            : Box width
        - boxHeights           : Box height
        - charSetCodes         : Character Set Interpretation
        - charSetEntities      : Character Set Font
        - slAngles             : Slant angle of text in radians
        - rotAngles            : Rotation angle of text in radians
        - mirrorFlags          : Type of mirroring
        - rotateFlags          : Rotate internal text flag
        - startPoints          : Text start point
        - texts                : Text strings
        raises exception if there is mismatch between the various
        Array Lengths.

        :type width: float
        :type height: float
        :type justifyCode: int
        :type areaLoc: OCC.wrapper.gp.gp_XYZ
        :type areaRotationAngle: float
        :type baseLinePos: OCC.wrapper.gp.gp_XYZ
        :type normalInterlineSpace: float
        :type charDisplays: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type charWidths: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type charHeights: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type interCharSpc: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type interLineSpc: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type fontStyles: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type charAngles: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type controlCodeStrings: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString
        :type nbChars: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type boxWidths: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type boxHeights: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type charSetCodes: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type charSetEntities: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity
        :type slAngles: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type rotAngles: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type mirrorFlags: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type rotateFlags: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type startPoints: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfXYZ
        :type texts: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_Init(self, *args)


    def TextWidth(self, *args):
        """
        TextWidth(Handle_IGESDimen_NewGeneralNote self) -> Standard_Real

        returns width of text containment area of all strings in the note

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_TextWidth(self, *args)


    def TextHeight(self, *args):
        """
        TextHeight(Handle_IGESDimen_NewGeneralNote self) -> Standard_Real

        returns height of text containment area of all strings in the note

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_TextHeight(self, *args)


    def JustifyCode(self, *args):
        """
        JustifyCode(Handle_IGESDimen_NewGeneralNote self) -> Standard_Integer

        returns Justification code of all strings within the note
        0 = no justification
        1 = right justified
        2 = center justified
        3 = left justified

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_JustifyCode(self, *args)


    def AreaLocation(self, *args):
        """
        AreaLocation(Handle_IGESDimen_NewGeneralNote self) -> gp_Pnt

        returns Text containment area Location point

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_AreaLocation(self, *args)


    def TransformedAreaLocation(self, *args):
        """
        TransformedAreaLocation(Handle_IGESDimen_NewGeneralNote self) -> gp_Pnt

        returns Text containment area Location point after Transformation

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_TransformedAreaLocation(self, *args)


    def ZDepthAreaLocation(self, *args):
        """
        ZDepthAreaLocation(Handle_IGESDimen_NewGeneralNote self) -> Standard_Real

        returns distance from the containment area plane

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_ZDepthAreaLocation(self, *args)


    def AreaRotationAngle(self, *args):
        """
        AreaRotationAngle(Handle_IGESDimen_NewGeneralNote self) -> Standard_Real

        returns rotation angle of text containment area in radians

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_AreaRotationAngle(self, *args)


    def BaseLinePosition(self, *args):
        """
        BaseLinePosition(Handle_IGESDimen_NewGeneralNote self) -> gp_Pnt

        returns position of first base line

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_BaseLinePosition(self, *args)


    def TransformedBaseLinePosition(self, *args):
        """
        TransformedBaseLinePosition(Handle_IGESDimen_NewGeneralNote self) -> gp_Pnt

        returns position of first base line after Transformation

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_TransformedBaseLinePosition(self, *args)


    def ZDepthBaseLinePosition(self, *args):
        """
        ZDepthBaseLinePosition(Handle_IGESDimen_NewGeneralNote self) -> Standard_Real

        returns distance from the Base line position plane

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_ZDepthBaseLinePosition(self, *args)


    def NormalInterlineSpace(self, *args):
        """
        NormalInterlineSpace(Handle_IGESDimen_NewGeneralNote self) -> Standard_Real

        returns Normal Interline Spacing

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_NormalInterlineSpace(self, *args)


    def NbStrings(self, *args):
        """
        NbStrings(Handle_IGESDimen_NewGeneralNote self) -> Standard_Integer

        returns number of text HAsciiStrings

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_NbStrings(self, *args)


    def CharacterDisplay(self, *args):
        """
        CharacterDisplay(Handle_IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Standard_Integer

        returns Fixed/Variable width character display of string
        0 = Fixed
        1 = Variable
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_CharacterDisplay(self, *args)


    def IsVariable(self, *args):
        """
        IsVariable(Handle_IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Standard_Boolean

        returns False if Character display width is Fixed
        optional method, if required
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_IsVariable(self, *args)


    def CharacterWidth(self, *args):
        """
        CharacterWidth(Handle_IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Standard_Real

        returns Character Width of string
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_CharacterWidth(self, *args)


    def CharacterHeight(self, *args):
        """
        CharacterHeight(Handle_IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Standard_Real

        returns Character Height of string
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_CharacterHeight(self, *args)


    def InterCharacterSpace(self, *args):
        """
        InterCharacterSpace(Handle_IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Standard_Real

        returns Inter-character spacing of string
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_InterCharacterSpace(self, *args)


    def InterlineSpace(self, *args):
        """
        InterlineSpace(Handle_IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Standard_Real

        returns Interline spacing of string
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_InterlineSpace(self, *args)


    def FontStyle(self, *args):
        """
        FontStyle(Handle_IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Standard_Integer

        returns FontStyle of string
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_FontStyle(self, *args)


    def CharacterAngle(self, *args):
        """
        CharacterAngle(Handle_IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Standard_Real

        returns CharacterAngle of string
        Angle returned will be between 0 and 2PI
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_CharacterAngle(self, *args)


    def ControlCodeString(self, *args):
        """
        ControlCodeString(Handle_IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Handle_TCollection_HAsciiString

        returns ControlCodeString of string
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_ControlCodeString(self, *args)


    def NbCharacters(self, *args):
        """
        NbCharacters(Handle_IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Standard_Integer

        returns number of characters in string or zero
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_NbCharacters(self, *args)


    def BoxWidth(self, *args):
        """
        BoxWidth(Handle_IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Standard_Real

        returns Box width of string
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_BoxWidth(self, *args)


    def BoxHeight(self, *args):
        """
        BoxHeight(Handle_IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Standard_Real

        returns Box height of string
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_BoxHeight(self, *args)


    def IsCharSetEntity(self, *args):
        """
        IsCharSetEntity(Handle_IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Standard_Boolean

        returns False if Value, True if Pointer (Entity)
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_IsCharSetEntity(self, *args)


    def CharSetCode(self, *args):
        """
        CharSetCode(Handle_IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Standard_Integer

        returns Character Set Interpretation (default = 1) of string
        returns 0 if IsCharSetEntity () is True
        1 = Standard ASCII
        1001 = Symbol Font1
        1002 = Symbol Font2
        1003 = Symbol Font3
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_CharSetCode(self, *args)


    def CharSetEntity(self, *args):
        """
        CharSetEntity(Handle_IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns Character Set Interpretation of string
        returns a Null Handle if IsCharSetEntity () is False
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_CharSetEntity(self, *args)


    def SlantAngle(self, *args):
        """
        SlantAngle(Handle_IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Standard_Real

        returns Slant angle of string in radians
        default value = PI/2
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_SlantAngle(self, *args)


    def RotationAngle(self, *args):
        """
        RotationAngle(Handle_IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Standard_Real

        returns Rotation angle of string in radians
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_RotationAngle(self, *args)


    def MirrorFlag(self, *args):
        """
        MirrorFlag(Handle_IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Standard_Integer

        returns Mirror Flag of string
        0 = no mirroring
        1 = mirror axis is perpendicular to the text base line
        2 = mirror axis is text base line
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_MirrorFlag(self, *args)


    def IsMirrored(self, *args):
        """
        IsMirrored(Handle_IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Standard_Boolean

        returns False if MirrorFlag = 0. ie. no mirroring
        else returns True
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_IsMirrored(self, *args)


    def RotateFlag(self, *args):
        """
        RotateFlag(Handle_IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Standard_Integer

        returns Rotate internal text Flag of string
        0 = text horizontal
        1 = text vertical
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_RotateFlag(self, *args)


    def StartPoint(self, *args):
        """
        StartPoint(Handle_IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> gp_Pnt

        returns text start point of string
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_StartPoint(self, *args)


    def TransformedStartPoint(self, *args):
        """
        TransformedStartPoint(Handle_IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> gp_Pnt

        returns text start point of string after Transformation
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_TransformedStartPoint(self, *args)


    def ZDepthStartPoint(self, *args):
        """
        ZDepthStartPoint(Handle_IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Standard_Real

        returns distance from the start point plane
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_ZDepthStartPoint(self, *args)


    def Text(self, *args):
        """
        Text(Handle_IGESDimen_NewGeneralNote self, Standard_Integer const Index) -> Handle_TCollection_HAsciiString

        returns text string
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_Text(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDimen_NewGeneralNote self) -> char const *

        :rtype: const char *

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_NewGeneralNote_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_NewGeneralNote_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDimen_NewGeneralNote self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDimen_NewGeneralNote self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDimen_NewGeneralNote self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDimen_NewGeneralNote self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDimen_NewGeneralNote self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDimen_NewGeneralNote self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDimen_NewGeneralNote self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDimen_NewGeneralNote self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDimen_NewGeneralNote self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDimen_NewGeneralNote self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDimen_NewGeneralNote self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDimen_NewGeneralNote self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDimen_NewGeneralNote self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDimen_NewGeneralNote self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDimen_NewGeneralNote self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDimen_NewGeneralNote self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDimen_NewGeneralNote self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDimen_NewGeneralNote self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDimen_NewGeneralNote self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDimen_NewGeneralNote self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDimen_NewGeneralNote self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDimen_NewGeneralNote self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDimen_NewGeneralNote self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDimen_NewGeneralNote self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDimen_NewGeneralNote self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDimen_NewGeneralNote self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDimen_NewGeneralNote self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDimen_NewGeneralNote self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDimen_NewGeneralNote self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDimen_NewGeneralNote self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDimen_NewGeneralNote self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDimen_NewGeneralNote self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDimen_NewGeneralNote self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDimen_NewGeneralNote self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDimen_NewGeneralNote self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDimen_NewGeneralNote self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDimen_NewGeneralNote self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDimen_NewGeneralNote self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDimen_NewGeneralNote self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDimen_NewGeneralNote self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDimen_NewGeneralNote self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDimen_NewGeneralNote self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDimen_NewGeneralNote self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDimen_NewGeneralNote self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDimen_NewGeneralNote self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDimen_NewGeneralNote self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDimen_NewGeneralNote self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDimen_NewGeneralNote self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDimen_NewGeneralNote self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDimen_NewGeneralNote self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDimen_NewGeneralNote self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDimen_NewGeneralNote self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDimen_NewGeneralNote self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDimen_NewGeneralNote self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDimen_NewGeneralNote self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDimen_NewGeneralNote self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDimen_NewGeneralNote self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDimen_NewGeneralNote self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDimen_NewGeneralNote self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDimen_NewGeneralNote self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDimen_NewGeneralNote self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDimen_NewGeneralNote self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDimen_NewGeneralNote self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDimen_NewGeneralNote self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDimen_NewGeneralNote self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDimen_NewGeneralNote self)

        Memory deallocator for transient classes


        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDimen_NewGeneralNote self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDimen_NewGeneralNote self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDimen_NewGeneralNote self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDimen_NewGeneralNote self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDimen_NewGeneralNote self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDimen_NewGeneralNote self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDimen_NewGeneralNote self)

        Increments the reference counter of this object


        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDimen_NewGeneralNote self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewGeneralNote_DecrementRefCounter(self, *args)

Handle_IGESDimen_NewGeneralNote_swigregister = _IGESDimen.Handle_IGESDimen_NewGeneralNote_swigregister
Handle_IGESDimen_NewGeneralNote_swigregister(Handle_IGESDimen_NewGeneralNote)

def Handle_IGESDimen_NewGeneralNote_DownCast(thing):
    return _IGESDimen.Handle_IGESDimen_NewGeneralNote_DownCast(thing)
Handle_IGESDimen_NewGeneralNote_DownCast = _IGESDimen.Handle_IGESDimen_NewGeneralNote_DownCast

class Handle_IGESDimen_DiameterDimension(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDimen_DiameterDimension self)

        Nullify the handle


        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDimen_DiameterDimension self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDimen_DiameterDimension self, IGESDimen_DiameterDimension thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDimen_DiameterDimension self, Handle_IGESDimen_DiameterDimension theHandle) -> Handle_IGESDimen_DiameterDimension
        assign(Handle_IGESDimen_DiameterDimension self, IGESDimen_DiameterDimension thePtr) -> Handle_IGESDimen_DiameterDimension
        assign(Handle_IGESDimen_DiameterDimension self, Handle_IGESDimen_DiameterDimension theHandle) -> Handle_IGESDimen_DiameterDimension

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDimen_DiameterDimension self) -> IGESDimen_DiameterDimension

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDimen_DiameterDimension self) -> IGESDimen_DiameterDimension

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDimen_DiameterDimension self) -> IGESDimen_DiameterDimension

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension___ref__(self, *args)


    def __hash__(self):
        return _IGESDimen.Handle_IGESDimen_DiameterDimension___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDimen.Handle_IGESDimen_DiameterDimension___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDimen.new_Handle_IGESDimen_DiameterDimension(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDimen.Handle_IGESDimen_DiameterDimension_DownCast)
    __swig_destroy__ = _IGESDimen.delete_Handle_IGESDimen_DiameterDimension

    def Init(self, *args):
        """
        Init(Handle_IGESDimen_DiameterDimension self, Handle_IGESDimen_GeneralNote aNote, Handle_IGESDimen_LeaderArrow aLeader, Handle_IGESDimen_LeaderArrow anotherLeader, gp_XY aCenter)

        This method is used to set the fields of the class
        DiameterDimension
        - aNote         : General Note Entity
        - aLeader       : First Leader Entity
        - anotherLeader : Second Leader Entity or a Null Handle.
        - aCenter       : Arc center coordinates

        :type aNote: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote
        :type aLeader: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow
        :type anotherLeader: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow
        :type aCenter: OCC.wrapper.gp.gp_XY

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_Init(self, *args)


    def Note(self, *args):
        """
        Note(Handle_IGESDimen_DiameterDimension self) -> Handle_IGESDimen_GeneralNote

        returns the General Note Entity

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_Note(self, *args)


    def FirstLeader(self, *args):
        """
        FirstLeader(Handle_IGESDimen_DiameterDimension self) -> Handle_IGESDimen_LeaderArrow

        returns the First Leader Entity

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_FirstLeader(self, *args)


    def HasSecondLeader(self, *args):
        """
        HasSecondLeader(Handle_IGESDimen_DiameterDimension self) -> Standard_Boolean

        returns False if theSecondleader is a Null Handle.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_HasSecondLeader(self, *args)


    def SecondLeader(self, *args):
        """
        SecondLeader(Handle_IGESDimen_DiameterDimension self) -> Handle_IGESDimen_LeaderArrow

        returns the Second Leader Entity

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_SecondLeader(self, *args)


    def Center(self, *args):
        """
        Center(Handle_IGESDimen_DiameterDimension self) -> gp_Pnt2d

        returns the Arc Center co-ordinates as Pnt2d from package gp

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_Center(self, *args)


    def TransformedCenter(self, *args):
        """
        TransformedCenter(Handle_IGESDimen_DiameterDimension self) -> gp_Pnt2d

        returns the Arc Center co-ordinates as Pnt2d from package gp
        after Transformation. (Z = 0.0 for Transformation)

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_TransformedCenter(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDimen_DiameterDimension self) -> char const *

        :rtype: const char *

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_DiameterDimension_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_DiameterDimension_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDimen_DiameterDimension self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDimen_DiameterDimension self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDimen_DiameterDimension self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDimen_DiameterDimension self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDimen_DiameterDimension self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDimen_DiameterDimension self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDimen_DiameterDimension self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDimen_DiameterDimension self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDimen_DiameterDimension self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDimen_DiameterDimension self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDimen_DiameterDimension self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDimen_DiameterDimension self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDimen_DiameterDimension self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDimen_DiameterDimension self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDimen_DiameterDimension self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDimen_DiameterDimension self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDimen_DiameterDimension self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDimen_DiameterDimension self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDimen_DiameterDimension self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDimen_DiameterDimension self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDimen_DiameterDimension self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDimen_DiameterDimension self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDimen_DiameterDimension self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDimen_DiameterDimension self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDimen_DiameterDimension self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDimen_DiameterDimension self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDimen_DiameterDimension self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDimen_DiameterDimension self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDimen_DiameterDimension self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDimen_DiameterDimension self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDimen_DiameterDimension self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDimen_DiameterDimension self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDimen_DiameterDimension self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDimen_DiameterDimension self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDimen_DiameterDimension self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDimen_DiameterDimension self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDimen_DiameterDimension self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDimen_DiameterDimension self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDimen_DiameterDimension self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDimen_DiameterDimension self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDimen_DiameterDimension self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDimen_DiameterDimension self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDimen_DiameterDimension self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDimen_DiameterDimension self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDimen_DiameterDimension self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDimen_DiameterDimension self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDimen_DiameterDimension self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDimen_DiameterDimension self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDimen_DiameterDimension self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDimen_DiameterDimension self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDimen_DiameterDimension self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDimen_DiameterDimension self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDimen_DiameterDimension self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDimen_DiameterDimension self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDimen_DiameterDimension self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDimen_DiameterDimension self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDimen_DiameterDimension self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDimen_DiameterDimension self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDimen_DiameterDimension self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDimen_DiameterDimension self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDimen_DiameterDimension self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDimen_DiameterDimension self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDimen_DiameterDimension self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDimen_DiameterDimension self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDimen_DiameterDimension self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDimen_DiameterDimension self)

        Memory deallocator for transient classes


        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDimen_DiameterDimension self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDimen_DiameterDimension self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDimen_DiameterDimension self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDimen_DiameterDimension self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDimen_DiameterDimension self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDimen_DiameterDimension self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDimen_DiameterDimension self)

        Increments the reference counter of this object


        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDimen_DiameterDimension self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DiameterDimension_DecrementRefCounter(self, *args)

Handle_IGESDimen_DiameterDimension_swigregister = _IGESDimen.Handle_IGESDimen_DiameterDimension_swigregister
Handle_IGESDimen_DiameterDimension_swigregister(Handle_IGESDimen_DiameterDimension)

def Handle_IGESDimen_DiameterDimension_DownCast(thing):
    return _IGESDimen.Handle_IGESDimen_DiameterDimension_DownCast(thing)
Handle_IGESDimen_DiameterDimension_DownCast = _IGESDimen.Handle_IGESDimen_DiameterDimension_DownCast

class Handle_IGESDimen_CenterLine(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDimen_CenterLine self)

        Nullify the handle


        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDimen_CenterLine self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDimen_CenterLine self, IGESDimen_CenterLine thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDimen_CenterLine self, Handle_IGESDimen_CenterLine theHandle) -> Handle_IGESDimen_CenterLine
        assign(Handle_IGESDimen_CenterLine self, IGESDimen_CenterLine thePtr) -> Handle_IGESDimen_CenterLine
        assign(Handle_IGESDimen_CenterLine self, Handle_IGESDimen_CenterLine theHandle) -> Handle_IGESDimen_CenterLine

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDimen_CenterLine self) -> IGESDimen_CenterLine

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDimen_CenterLine self) -> IGESDimen_CenterLine

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDimen_CenterLine self) -> IGESDimen_CenterLine

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine___ref__(self, *args)


    def __hash__(self):
        return _IGESDimen.Handle_IGESDimen_CenterLine___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDimen.Handle_IGESDimen_CenterLine___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDimen.new_Handle_IGESDimen_CenterLine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDimen.Handle_IGESDimen_CenterLine_DownCast)
    __swig_destroy__ = _IGESDimen.delete_Handle_IGESDimen_CenterLine

    def Init(self, *args):
        """
        Init(Handle_IGESDimen_CenterLine self, Standard_Integer const aDataType, Standard_Real const aZdisp, Handle_TColgp_HArray1OfXY dataPnts)

        This method is used to set the fields of the class
        CenterLine
        - aDataType      : Interpretation Flag, always = 1
        - aZDisplacement : Common z displacement
        - dataPnts       : Data points (x and y)

        :type aDataType: int
        :type aZdisp: float
        :type dataPnts: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfXY

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_Init(self, *args)


    def SetCrossHair(self, *args):
        """
        SetCrossHair(Handle_IGESDimen_CenterLine self, Standard_Boolean const mode)

        Sets FormNumber to 20 if <mode> is True, 21 else

        :type mode: bool

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_SetCrossHair(self, *args)


    def Datatype(self, *args):
        """
        Datatype(Handle_IGESDimen_CenterLine self) -> Standard_Integer

        returns Interpretation Flag : IP = 1.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_Datatype(self, *args)


    def NbPoints(self, *args):
        """
        NbPoints(Handle_IGESDimen_CenterLine self) -> Standard_Integer

        returns Number of Data Points.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_NbPoints(self, *args)


    def ZDisplacement(self, *args):
        """
        ZDisplacement(Handle_IGESDimen_CenterLine self) -> Standard_Real

        returns Common Z displacement.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_ZDisplacement(self, *args)


    def Point(self, *args):
        """
        Point(Handle_IGESDimen_CenterLine self, Standard_Integer const Index) -> gp_Pnt

        returns the data point as Pnt from gp.
        raises exception if Index <= 0 or Index > NbPoints()

        :type Index: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_Point(self, *args)


    def TransformedPoint(self, *args):
        """
        TransformedPoint(Handle_IGESDimen_CenterLine self, Standard_Integer const Index) -> gp_Pnt

        returns the data point as Pnt from gp after Transformation.
        raises exception if Index <= 0 or Index > NbPoints()

        :type Index: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_TransformedPoint(self, *args)


    def IsCrossHair(self, *args):
        """
        IsCrossHair(Handle_IGESDimen_CenterLine self) -> Standard_Boolean

        returns True if Form is 20.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_IsCrossHair(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDimen_CenterLine self) -> char const *

        :rtype: const char *

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_CenterLine_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_CenterLine_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDimen_CenterLine self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDimen_CenterLine self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDimen_CenterLine self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDimen_CenterLine self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDimen_CenterLine self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDimen_CenterLine self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDimen_CenterLine self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDimen_CenterLine self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDimen_CenterLine self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDimen_CenterLine self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDimen_CenterLine self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDimen_CenterLine self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDimen_CenterLine self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDimen_CenterLine self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDimen_CenterLine self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDimen_CenterLine self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDimen_CenterLine self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDimen_CenterLine self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDimen_CenterLine self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDimen_CenterLine self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDimen_CenterLine self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDimen_CenterLine self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDimen_CenterLine self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDimen_CenterLine self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDimen_CenterLine self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDimen_CenterLine self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDimen_CenterLine self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDimen_CenterLine self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDimen_CenterLine self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDimen_CenterLine self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDimen_CenterLine self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDimen_CenterLine self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDimen_CenterLine self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDimen_CenterLine self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDimen_CenterLine self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDimen_CenterLine self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDimen_CenterLine self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDimen_CenterLine self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDimen_CenterLine self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDimen_CenterLine self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDimen_CenterLine self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDimen_CenterLine self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDimen_CenterLine self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDimen_CenterLine self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDimen_CenterLine self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDimen_CenterLine self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDimen_CenterLine self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDimen_CenterLine self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDimen_CenterLine self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDimen_CenterLine self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDimen_CenterLine self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDimen_CenterLine self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDimen_CenterLine self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDimen_CenterLine self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDimen_CenterLine self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDimen_CenterLine self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDimen_CenterLine self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDimen_CenterLine self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDimen_CenterLine self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDimen_CenterLine self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDimen_CenterLine self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDimen_CenterLine self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDimen_CenterLine self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDimen_CenterLine self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDimen_CenterLine self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDimen_CenterLine self)

        Memory deallocator for transient classes


        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDimen_CenterLine self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDimen_CenterLine self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDimen_CenterLine self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDimen_CenterLine self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDimen_CenterLine self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDimen_CenterLine self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDimen_CenterLine self)

        Increments the reference counter of this object


        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDimen_CenterLine self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_CenterLine_DecrementRefCounter(self, *args)

Handle_IGESDimen_CenterLine_swigregister = _IGESDimen.Handle_IGESDimen_CenterLine_swigregister
Handle_IGESDimen_CenterLine_swigregister(Handle_IGESDimen_CenterLine)

def Handle_IGESDimen_CenterLine_DownCast(thing):
    return _IGESDimen.Handle_IGESDimen_CenterLine_DownCast(thing)
Handle_IGESDimen_CenterLine_DownCast = _IGESDimen.Handle_IGESDimen_CenterLine_DownCast

class Handle_IGESDimen_GeneralLabel(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDimen_GeneralLabel self)

        Nullify the handle


        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDimen_GeneralLabel self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDimen_GeneralLabel self, IGESDimen_GeneralLabel thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDimen_GeneralLabel self, Handle_IGESDimen_GeneralLabel theHandle) -> Handle_IGESDimen_GeneralLabel
        assign(Handle_IGESDimen_GeneralLabel self, IGESDimen_GeneralLabel thePtr) -> Handle_IGESDimen_GeneralLabel
        assign(Handle_IGESDimen_GeneralLabel self, Handle_IGESDimen_GeneralLabel theHandle) -> Handle_IGESDimen_GeneralLabel

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDimen_GeneralLabel self) -> IGESDimen_GeneralLabel

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDimen_GeneralLabel self) -> IGESDimen_GeneralLabel

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDimen_GeneralLabel self) -> IGESDimen_GeneralLabel

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel___ref__(self, *args)


    def __hash__(self):
        return _IGESDimen.Handle_IGESDimen_GeneralLabel___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDimen.Handle_IGESDimen_GeneralLabel___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDimen.new_Handle_IGESDimen_GeneralLabel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDimen.Handle_IGESDimen_GeneralLabel_DownCast)
    __swig_destroy__ = _IGESDimen.delete_Handle_IGESDimen_GeneralLabel

    def Init(self, *args):
        """
        Init(Handle_IGESDimen_GeneralLabel self, Handle_IGESDimen_GeneralNote aNote, Handle_IGESDimen_HArray1OfLeaderArrow someLeaders)

        This method is used to set the fields of the class
        GeneralLabel
        - aNote       : General Note Entity
        - someLeaders : Associated Leader Entities

        :type aNote: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote
        :type someLeaders: OCC.wrapper.IGESDimen.Handle_IGESDimen_HArray1OfLeaderArrow

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_Init(self, *args)


    def Note(self, *args):
        """
        Note(Handle_IGESDimen_GeneralLabel self) -> Handle_IGESDimen_GeneralNote

        returns General Note Entity

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_Note(self, *args)


    def NbLeaders(self, *args):
        """
        NbLeaders(Handle_IGESDimen_GeneralLabel self) -> Standard_Integer

        returns Number of Leaders

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_NbLeaders(self, *args)


    def Leader(self, *args):
        """
        Leader(Handle_IGESDimen_GeneralLabel self, Standard_Integer const Index) -> Handle_IGESDimen_LeaderArrow

        returns Leader Entity
        raises exception if Index <= 0 or Index > NbLeaders()

        :type Index: int
        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_Leader(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDimen_GeneralLabel self) -> char const *

        :rtype: const char *

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_GeneralLabel_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_GeneralLabel_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDimen_GeneralLabel self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDimen_GeneralLabel self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDimen_GeneralLabel self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDimen_GeneralLabel self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDimen_GeneralLabel self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDimen_GeneralLabel self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDimen_GeneralLabel self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDimen_GeneralLabel self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDimen_GeneralLabel self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDimen_GeneralLabel self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDimen_GeneralLabel self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDimen_GeneralLabel self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDimen_GeneralLabel self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDimen_GeneralLabel self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDimen_GeneralLabel self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDimen_GeneralLabel self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDimen_GeneralLabel self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDimen_GeneralLabel self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDimen_GeneralLabel self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDimen_GeneralLabel self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDimen_GeneralLabel self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDimen_GeneralLabel self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDimen_GeneralLabel self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDimen_GeneralLabel self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDimen_GeneralLabel self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDimen_GeneralLabel self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDimen_GeneralLabel self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDimen_GeneralLabel self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDimen_GeneralLabel self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDimen_GeneralLabel self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDimen_GeneralLabel self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDimen_GeneralLabel self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDimen_GeneralLabel self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDimen_GeneralLabel self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDimen_GeneralLabel self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDimen_GeneralLabel self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDimen_GeneralLabel self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDimen_GeneralLabel self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDimen_GeneralLabel self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDimen_GeneralLabel self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDimen_GeneralLabel self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDimen_GeneralLabel self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDimen_GeneralLabel self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDimen_GeneralLabel self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDimen_GeneralLabel self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDimen_GeneralLabel self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDimen_GeneralLabel self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDimen_GeneralLabel self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDimen_GeneralLabel self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDimen_GeneralLabel self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDimen_GeneralLabel self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDimen_GeneralLabel self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDimen_GeneralLabel self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDimen_GeneralLabel self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDimen_GeneralLabel self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDimen_GeneralLabel self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDimen_GeneralLabel self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDimen_GeneralLabel self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDimen_GeneralLabel self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDimen_GeneralLabel self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDimen_GeneralLabel self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDimen_GeneralLabel self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDimen_GeneralLabel self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDimen_GeneralLabel self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDimen_GeneralLabel self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDimen_GeneralLabel self)

        Memory deallocator for transient classes


        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDimen_GeneralLabel self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDimen_GeneralLabel self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDimen_GeneralLabel self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDimen_GeneralLabel self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDimen_GeneralLabel self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDimen_GeneralLabel self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDimen_GeneralLabel self)

        Increments the reference counter of this object


        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDimen_GeneralLabel self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralLabel_DecrementRefCounter(self, *args)

Handle_IGESDimen_GeneralLabel_swigregister = _IGESDimen.Handle_IGESDimen_GeneralLabel_swigregister
Handle_IGESDimen_GeneralLabel_swigregister(Handle_IGESDimen_GeneralLabel)

def Handle_IGESDimen_GeneralLabel_DownCast(thing):
    return _IGESDimen.Handle_IGESDimen_GeneralLabel_DownCast(thing)
Handle_IGESDimen_GeneralLabel_DownCast = _IGESDimen.Handle_IGESDimen_GeneralLabel_DownCast

class IGESDimen_ToolDimensionDisplayData(object):
    """
    Tool to work on a DimensionDisplayData. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDimen_ToolDimensionDisplayData self) -> IGESDimen_ToolDimensionDisplayData

        Returns a ToolDimensionDisplayData, ready to work


        """
        this = _IGESDimen.new_IGESDimen_ToolDimensionDisplayData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDimen_ToolDimensionDisplayData self, Handle_IGESDimen_DimensionDisplayData ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_DimensionDisplayData
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDimen.IGESDimen_ToolDimensionDisplayData_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDimen_ToolDimensionDisplayData self, Handle_IGESDimen_DimensionDisplayData ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_DimensionDisplayData
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDimen.IGESDimen_ToolDimensionDisplayData_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDimen_ToolDimensionDisplayData self, Handle_IGESDimen_DimensionDisplayData ent, Interface_EntityIterator iter)

        Lists the Entities shared by a DimensionDisplayData <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_DimensionDisplayData
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.IGESDimen_ToolDimensionDisplayData_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESDimen_ToolDimensionDisplayData self, Handle_IGESDimen_DimensionDisplayData ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a DimensionDisplayData
        (NbPropertyValues forced to 14)

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_DimensionDisplayData
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.IGESDimen_ToolDimensionDisplayData_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDimen_ToolDimensionDisplayData self, Handle_IGESDimen_DimensionDisplayData ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_DimensionDisplayData
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDimen.IGESDimen_ToolDimensionDisplayData_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDimen_ToolDimensionDisplayData self, Handle_IGESDimen_DimensionDisplayData ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_DimensionDisplayData
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDimen.IGESDimen_ToolDimensionDisplayData_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDimen_ToolDimensionDisplayData self, Handle_IGESDimen_DimensionDisplayData entfrom, Handle_IGESDimen_DimensionDisplayData entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDimen.Handle_IGESDimen_DimensionDisplayData
        :type entto: OCC.wrapper.IGESDimen.Handle_IGESDimen_DimensionDisplayData
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDimen.IGESDimen_ToolDimensionDisplayData_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDimen_ToolDimensionDisplayData self, Handle_IGESDimen_DimensionDisplayData ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_DimensionDisplayData
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDimen.IGESDimen_ToolDimensionDisplayData_OwnDump(self, *args)

    __swig_destroy__ = _IGESDimen.delete_IGESDimen_ToolDimensionDisplayData
IGESDimen_ToolDimensionDisplayData_swigregister = _IGESDimen.IGESDimen_ToolDimensionDisplayData_swigregister
IGESDimen_ToolDimensionDisplayData_swigregister(IGESDimen_ToolDimensionDisplayData)

class Handle_IGESDimen_AngularDimension(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDimen_AngularDimension self)

        Nullify the handle


        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDimen_AngularDimension self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDimen_AngularDimension self, IGESDimen_AngularDimension thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDimen_AngularDimension self, Handle_IGESDimen_AngularDimension theHandle) -> Handle_IGESDimen_AngularDimension
        assign(Handle_IGESDimen_AngularDimension self, IGESDimen_AngularDimension thePtr) -> Handle_IGESDimen_AngularDimension
        assign(Handle_IGESDimen_AngularDimension self, Handle_IGESDimen_AngularDimension theHandle) -> Handle_IGESDimen_AngularDimension

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDimen_AngularDimension self) -> IGESDimen_AngularDimension

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDimen_AngularDimension self) -> IGESDimen_AngularDimension

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDimen_AngularDimension self) -> IGESDimen_AngularDimension

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension___ref__(self, *args)


    def __hash__(self):
        return _IGESDimen.Handle_IGESDimen_AngularDimension___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDimen.Handle_IGESDimen_AngularDimension___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDimen.new_Handle_IGESDimen_AngularDimension(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDimen.Handle_IGESDimen_AngularDimension_DownCast)
    __swig_destroy__ = _IGESDimen.delete_Handle_IGESDimen_AngularDimension

    def Init(self, *args):
        """
        Init(Handle_IGESDimen_AngularDimension self, Handle_IGESDimen_GeneralNote aNote, Handle_IGESDimen_WitnessLine aLine, Handle_IGESDimen_WitnessLine anotherLine, gp_XY aVertex, Standard_Real const aRadius, Handle_IGESDimen_LeaderArrow aLeader, Handle_IGESDimen_LeaderArrow anotherLeader)

        This method is used to set the fields of the class
        AngularDimension
        - aNote         : General Note Entity
        - aLine         : First Witness Line Entity or Null
        Handle
        - anotherLine   : Second Witness Line Entity or Null
        Handle
        - aVertex       : Coordinates of vertex point
        - aRadius       : Radius of leader arcs
        - aLeader       : First Leader Entity
        - anotherLeader : Second Leader Entity

        :type aNote: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote
        :type aLine: OCC.wrapper.IGESDimen.Handle_IGESDimen_WitnessLine
        :type anotherLine: OCC.wrapper.IGESDimen.Handle_IGESDimen_WitnessLine
        :type aVertex: OCC.wrapper.gp.gp_XY
        :type aRadius: float
        :type aLeader: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow
        :type anotherLeader: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_Init(self, *args)


    def Note(self, *args):
        """
        Note(Handle_IGESDimen_AngularDimension self) -> Handle_IGESDimen_GeneralNote

        returns the General Note Entity of the Dimension.

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_Note(self, *args)


    def HasFirstWitnessLine(self, *args):
        """
        HasFirstWitnessLine(Handle_IGESDimen_AngularDimension self) -> Standard_Boolean

        returns False if theFirstWitnessLine is Null Handle.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_HasFirstWitnessLine(self, *args)


    def FirstWitnessLine(self, *args):
        """
        FirstWitnessLine(Handle_IGESDimen_AngularDimension self) -> Handle_IGESDimen_WitnessLine

        returns the First Witness Line Entity or Null Handle.

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_WitnessLine

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_FirstWitnessLine(self, *args)


    def HasSecondWitnessLine(self, *args):
        """
        HasSecondWitnessLine(Handle_IGESDimen_AngularDimension self) -> Standard_Boolean

        returns False if theSecondWitnessLine is Null Handle.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_HasSecondWitnessLine(self, *args)


    def SecondWitnessLine(self, *args):
        """
        SecondWitnessLine(Handle_IGESDimen_AngularDimension self) -> Handle_IGESDimen_WitnessLine

        returns the Second Witness Line Entity or Null Handle.

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_WitnessLine

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_SecondWitnessLine(self, *args)


    def Vertex(self, *args):
        """
        Vertex(Handle_IGESDimen_AngularDimension self) -> gp_Pnt2d

        returns the co-ordinates of the Vertex point as Pnt2d from gp.

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_Vertex(self, *args)


    def TransformedVertex(self, *args):
        """
        TransformedVertex(Handle_IGESDimen_AngularDimension self) -> gp_Pnt2d

        returns the co-ordinates of the Vertex point as Pnt2d from gp
        after Transformation. (Z = 0.0 for Transformation)

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_TransformedVertex(self, *args)


    def Radius(self, *args):
        """
        Radius(Handle_IGESDimen_AngularDimension self) -> Standard_Real

        returns the Radius of the Leader arcs.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_Radius(self, *args)


    def FirstLeader(self, *args):
        """
        FirstLeader(Handle_IGESDimen_AngularDimension self) -> Handle_IGESDimen_LeaderArrow

        returns the First Leader Entity.

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_FirstLeader(self, *args)


    def SecondLeader(self, *args):
        """
        SecondLeader(Handle_IGESDimen_AngularDimension self) -> Handle_IGESDimen_LeaderArrow

        returns the Second Leader Entity.

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_SecondLeader(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDimen_AngularDimension self) -> char const *

        :rtype: const char *

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_AngularDimension_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_AngularDimension_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDimen_AngularDimension self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDimen_AngularDimension self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDimen_AngularDimension self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDimen_AngularDimension self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDimen_AngularDimension self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDimen_AngularDimension self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDimen_AngularDimension self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDimen_AngularDimension self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDimen_AngularDimension self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDimen_AngularDimension self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDimen_AngularDimension self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDimen_AngularDimension self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDimen_AngularDimension self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDimen_AngularDimension self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDimen_AngularDimension self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDimen_AngularDimension self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDimen_AngularDimension self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDimen_AngularDimension self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDimen_AngularDimension self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDimen_AngularDimension self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDimen_AngularDimension self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDimen_AngularDimension self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDimen_AngularDimension self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDimen_AngularDimension self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDimen_AngularDimension self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDimen_AngularDimension self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDimen_AngularDimension self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDimen_AngularDimension self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDimen_AngularDimension self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDimen_AngularDimension self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDimen_AngularDimension self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDimen_AngularDimension self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDimen_AngularDimension self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDimen_AngularDimension self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDimen_AngularDimension self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDimen_AngularDimension self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDimen_AngularDimension self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDimen_AngularDimension self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDimen_AngularDimension self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDimen_AngularDimension self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDimen_AngularDimension self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDimen_AngularDimension self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDimen_AngularDimension self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDimen_AngularDimension self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDimen_AngularDimension self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDimen_AngularDimension self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDimen_AngularDimension self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDimen_AngularDimension self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDimen_AngularDimension self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDimen_AngularDimension self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDimen_AngularDimension self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDimen_AngularDimension self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDimen_AngularDimension self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDimen_AngularDimension self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDimen_AngularDimension self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDimen_AngularDimension self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDimen_AngularDimension self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDimen_AngularDimension self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDimen_AngularDimension self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDimen_AngularDimension self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDimen_AngularDimension self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDimen_AngularDimension self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDimen_AngularDimension self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDimen_AngularDimension self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDimen_AngularDimension self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDimen_AngularDimension self)

        Memory deallocator for transient classes


        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDimen_AngularDimension self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDimen_AngularDimension self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDimen_AngularDimension self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDimen_AngularDimension self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDimen_AngularDimension self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDimen_AngularDimension self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDimen_AngularDimension self)

        Increments the reference counter of this object


        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDimen_AngularDimension self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_AngularDimension_DecrementRefCounter(self, *args)

Handle_IGESDimen_AngularDimension_swigregister = _IGESDimen.Handle_IGESDimen_AngularDimension_swigregister
Handle_IGESDimen_AngularDimension_swigregister(Handle_IGESDimen_AngularDimension)

def Handle_IGESDimen_AngularDimension_DownCast(thing):
    return _IGESDimen.Handle_IGESDimen_AngularDimension_DownCast(thing)
Handle_IGESDimen_AngularDimension_DownCast = _IGESDimen.Handle_IGESDimen_AngularDimension_DownCast

class Handle_IGESDimen_OrdinateDimension(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDimen_OrdinateDimension self)

        Nullify the handle


        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDimen_OrdinateDimension self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDimen_OrdinateDimension self, IGESDimen_OrdinateDimension thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDimen_OrdinateDimension self, Handle_IGESDimen_OrdinateDimension theHandle) -> Handle_IGESDimen_OrdinateDimension
        assign(Handle_IGESDimen_OrdinateDimension self, IGESDimen_OrdinateDimension thePtr) -> Handle_IGESDimen_OrdinateDimension
        assign(Handle_IGESDimen_OrdinateDimension self, Handle_IGESDimen_OrdinateDimension theHandle) -> Handle_IGESDimen_OrdinateDimension

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDimen_OrdinateDimension self) -> IGESDimen_OrdinateDimension

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDimen_OrdinateDimension self) -> IGESDimen_OrdinateDimension

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDimen_OrdinateDimension self) -> IGESDimen_OrdinateDimension

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension___ref__(self, *args)


    def __hash__(self):
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDimen.Handle_IGESDimen_OrdinateDimension___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDimen.new_Handle_IGESDimen_OrdinateDimension(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDimen.Handle_IGESDimen_OrdinateDimension_DownCast)
    __swig_destroy__ = _IGESDimen.delete_Handle_IGESDimen_OrdinateDimension

    def Init(self, *args):
        """
        Init(Handle_IGESDimen_OrdinateDimension self, Handle_IGESDimen_GeneralNote aNote, Standard_Boolean const aType, Handle_IGESDimen_WitnessLine aLine, Handle_IGESDimen_LeaderArrow anArrow)

        :type aNote: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote
        :type aType: bool
        :type aLine: OCC.wrapper.IGESDimen.Handle_IGESDimen_WitnessLine
        :type anArrow: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_Init(self, *args)


    def IsLine(self, *args):
        """
        IsLine(Handle_IGESDimen_OrdinateDimension self) -> Standard_Boolean

        returns True if Witness Line and False if Leader (only for Form 0)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_IsLine(self, *args)


    def IsLeader(self, *args):
        """
        IsLeader(Handle_IGESDimen_OrdinateDimension self) -> Standard_Boolean

        returns True if Leader and False if Witness Line (only for Form 0)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_IsLeader(self, *args)


    def Note(self, *args):
        """
        Note(Handle_IGESDimen_OrdinateDimension self) -> Handle_IGESDimen_GeneralNote

        returns the General Note entity associated.

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_Note(self, *args)


    def WitnessLine(self, *args):
        """
        WitnessLine(Handle_IGESDimen_OrdinateDimension self) -> Handle_IGESDimen_WitnessLine

        returns the Witness Line associated or Null handle

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_WitnessLine

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_WitnessLine(self, *args)


    def Leader(self, *args):
        """
        Leader(Handle_IGESDimen_OrdinateDimension self) -> Handle_IGESDimen_LeaderArrow

        returns the Leader associated or Null handle

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_Leader(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDimen_OrdinateDimension self) -> char const *

        :rtype: const char *

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_OrdinateDimension_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_OrdinateDimension_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDimen_OrdinateDimension self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDimen_OrdinateDimension self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDimen_OrdinateDimension self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDimen_OrdinateDimension self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDimen_OrdinateDimension self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDimen_OrdinateDimension self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDimen_OrdinateDimension self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDimen_OrdinateDimension self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDimen_OrdinateDimension self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDimen_OrdinateDimension self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDimen_OrdinateDimension self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDimen_OrdinateDimension self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDimen_OrdinateDimension self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDimen_OrdinateDimension self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDimen_OrdinateDimension self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDimen_OrdinateDimension self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDimen_OrdinateDimension self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDimen_OrdinateDimension self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDimen_OrdinateDimension self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDimen_OrdinateDimension self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDimen_OrdinateDimension self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDimen_OrdinateDimension self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDimen_OrdinateDimension self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDimen_OrdinateDimension self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDimen_OrdinateDimension self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDimen_OrdinateDimension self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDimen_OrdinateDimension self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDimen_OrdinateDimension self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDimen_OrdinateDimension self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDimen_OrdinateDimension self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDimen_OrdinateDimension self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDimen_OrdinateDimension self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDimen_OrdinateDimension self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDimen_OrdinateDimension self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDimen_OrdinateDimension self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDimen_OrdinateDimension self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDimen_OrdinateDimension self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDimen_OrdinateDimension self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDimen_OrdinateDimension self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDimen_OrdinateDimension self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDimen_OrdinateDimension self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDimen_OrdinateDimension self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDimen_OrdinateDimension self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDimen_OrdinateDimension self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDimen_OrdinateDimension self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDimen_OrdinateDimension self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDimen_OrdinateDimension self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDimen_OrdinateDimension self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDimen_OrdinateDimension self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDimen_OrdinateDimension self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDimen_OrdinateDimension self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDimen_OrdinateDimension self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDimen_OrdinateDimension self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDimen_OrdinateDimension self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDimen_OrdinateDimension self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDimen_OrdinateDimension self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDimen_OrdinateDimension self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDimen_OrdinateDimension self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDimen_OrdinateDimension self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDimen_OrdinateDimension self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDimen_OrdinateDimension self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDimen_OrdinateDimension self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDimen_OrdinateDimension self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDimen_OrdinateDimension self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDimen_OrdinateDimension self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDimen_OrdinateDimension self)

        Memory deallocator for transient classes


        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDimen_OrdinateDimension self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDimen_OrdinateDimension self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDimen_OrdinateDimension self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDimen_OrdinateDimension self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDimen_OrdinateDimension self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDimen_OrdinateDimension self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDimen_OrdinateDimension self)

        Increments the reference counter of this object


        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDimen_OrdinateDimension self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_OrdinateDimension_DecrementRefCounter(self, *args)

Handle_IGESDimen_OrdinateDimension_swigregister = _IGESDimen.Handle_IGESDimen_OrdinateDimension_swigregister
Handle_IGESDimen_OrdinateDimension_swigregister(Handle_IGESDimen_OrdinateDimension)

def Handle_IGESDimen_OrdinateDimension_DownCast(thing):
    return _IGESDimen.Handle_IGESDimen_OrdinateDimension_DownCast(thing)
Handle_IGESDimen_OrdinateDimension_DownCast = _IGESDimen.Handle_IGESDimen_OrdinateDimension_DownCast

class Handle_IGESDimen_WitnessLine(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDimen_WitnessLine self)

        Nullify the handle


        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDimen_WitnessLine self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDimen_WitnessLine self, IGESDimen_WitnessLine thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDimen_WitnessLine self, Handle_IGESDimen_WitnessLine theHandle) -> Handle_IGESDimen_WitnessLine
        assign(Handle_IGESDimen_WitnessLine self, IGESDimen_WitnessLine thePtr) -> Handle_IGESDimen_WitnessLine
        assign(Handle_IGESDimen_WitnessLine self, Handle_IGESDimen_WitnessLine theHandle) -> Handle_IGESDimen_WitnessLine

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDimen_WitnessLine self) -> IGESDimen_WitnessLine

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDimen_WitnessLine self) -> IGESDimen_WitnessLine

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDimen_WitnessLine self) -> IGESDimen_WitnessLine

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine___ref__(self, *args)


    def __hash__(self):
        return _IGESDimen.Handle_IGESDimen_WitnessLine___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDimen.Handle_IGESDimen_WitnessLine___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDimen.new_Handle_IGESDimen_WitnessLine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDimen.Handle_IGESDimen_WitnessLine_DownCast)
    __swig_destroy__ = _IGESDimen.delete_Handle_IGESDimen_WitnessLine

    def Init(self, *args):
        """
        Init(Handle_IGESDimen_WitnessLine self, Standard_Integer const dataType, Standard_Real const aDisp, Handle_TColgp_HArray1OfXY dataPoints)

        This method is used to set the fields of the class
        WitnessLine
        - dataType   : Interpretation Flag, always = 1
        - aDispl     : Common z displacement
        - dataPoints : Data points

        :type dataType: int
        :type aDisp: float
        :type dataPoints: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfXY

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_Init(self, *args)


    def Datatype(self, *args):
        """
        Datatype(Handle_IGESDimen_WitnessLine self) -> Standard_Integer

        returns Interpretation Flag, always = 1

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_Datatype(self, *args)


    def NbPoints(self, *args):
        """
        NbPoints(Handle_IGESDimen_WitnessLine self) -> Standard_Integer

        returns number of Data Points

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_NbPoints(self, *args)


    def ZDisplacement(self, *args):
        """
        ZDisplacement(Handle_IGESDimen_WitnessLine self) -> Standard_Real

        returns common Z displacement

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_ZDisplacement(self, *args)


    def Point(self, *args):
        """
        Point(Handle_IGESDimen_WitnessLine self, Standard_Integer const Index) -> gp_Pnt

        returns Index'th. data point
        raises exception if Index <= 0 or Index > NbPoints

        :type Index: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_Point(self, *args)


    def TransformedPoint(self, *args):
        """
        TransformedPoint(Handle_IGESDimen_WitnessLine self, Standard_Integer const Index) -> gp_Pnt

        returns data point after Transformation.
        raises exception if Index <= 0 or Index > NbPoints

        :type Index: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_TransformedPoint(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDimen_WitnessLine self) -> char const *

        :rtype: const char *

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_WitnessLine_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_WitnessLine_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDimen_WitnessLine self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDimen_WitnessLine self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDimen_WitnessLine self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDimen_WitnessLine self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDimen_WitnessLine self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDimen_WitnessLine self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDimen_WitnessLine self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDimen_WitnessLine self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDimen_WitnessLine self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDimen_WitnessLine self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDimen_WitnessLine self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDimen_WitnessLine self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDimen_WitnessLine self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDimen_WitnessLine self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDimen_WitnessLine self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDimen_WitnessLine self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDimen_WitnessLine self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDimen_WitnessLine self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDimen_WitnessLine self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDimen_WitnessLine self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDimen_WitnessLine self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDimen_WitnessLine self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDimen_WitnessLine self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDimen_WitnessLine self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDimen_WitnessLine self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDimen_WitnessLine self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDimen_WitnessLine self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDimen_WitnessLine self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDimen_WitnessLine self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDimen_WitnessLine self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDimen_WitnessLine self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDimen_WitnessLine self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDimen_WitnessLine self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDimen_WitnessLine self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDimen_WitnessLine self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDimen_WitnessLine self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDimen_WitnessLine self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDimen_WitnessLine self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDimen_WitnessLine self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDimen_WitnessLine self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDimen_WitnessLine self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDimen_WitnessLine self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDimen_WitnessLine self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDimen_WitnessLine self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDimen_WitnessLine self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDimen_WitnessLine self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDimen_WitnessLine self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDimen_WitnessLine self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDimen_WitnessLine self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDimen_WitnessLine self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDimen_WitnessLine self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDimen_WitnessLine self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDimen_WitnessLine self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDimen_WitnessLine self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDimen_WitnessLine self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDimen_WitnessLine self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDimen_WitnessLine self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDimen_WitnessLine self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDimen_WitnessLine self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDimen_WitnessLine self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDimen_WitnessLine self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDimen_WitnessLine self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDimen_WitnessLine self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDimen_WitnessLine self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDimen_WitnessLine self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDimen_WitnessLine self)

        Memory deallocator for transient classes


        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDimen_WitnessLine self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDimen_WitnessLine self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDimen_WitnessLine self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDimen_WitnessLine self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDimen_WitnessLine self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDimen_WitnessLine self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDimen_WitnessLine self)

        Increments the reference counter of this object


        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDimen_WitnessLine self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_WitnessLine_DecrementRefCounter(self, *args)

Handle_IGESDimen_WitnessLine_swigregister = _IGESDimen.Handle_IGESDimen_WitnessLine_swigregister
Handle_IGESDimen_WitnessLine_swigregister(Handle_IGESDimen_WitnessLine)

def Handle_IGESDimen_WitnessLine_DownCast(thing):
    return _IGESDimen.Handle_IGESDimen_WitnessLine_DownCast(thing)
Handle_IGESDimen_WitnessLine_DownCast = _IGESDimen.Handle_IGESDimen_WitnessLine_DownCast

class IGESDimen_ToolSectionedArea(object):
    """
    Tool to work on a SectionedArea. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDimen_ToolSectionedArea self) -> IGESDimen_ToolSectionedArea

        Returns a ToolSectionedArea, ready to work


        """
        this = _IGESDimen.new_IGESDimen_ToolSectionedArea(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDimen_ToolSectionedArea self, Handle_IGESDimen_SectionedArea ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_SectionedArea
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDimen.IGESDimen_ToolSectionedArea_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDimen_ToolSectionedArea self, Handle_IGESDimen_SectionedArea ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_SectionedArea
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDimen.IGESDimen_ToolSectionedArea_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDimen_ToolSectionedArea self, Handle_IGESDimen_SectionedArea ent, Interface_EntityIterator iter)

        Lists the Entities shared by a SectionedArea <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_SectionedArea
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.IGESDimen_ToolSectionedArea_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDimen_ToolSectionedArea self, Handle_IGESDimen_SectionedArea ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_SectionedArea
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDimen.IGESDimen_ToolSectionedArea_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDimen_ToolSectionedArea self, Handle_IGESDimen_SectionedArea ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_SectionedArea
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDimen.IGESDimen_ToolSectionedArea_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDimen_ToolSectionedArea self, Handle_IGESDimen_SectionedArea entfrom, Handle_IGESDimen_SectionedArea entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDimen.Handle_IGESDimen_SectionedArea
        :type entto: OCC.wrapper.IGESDimen.Handle_IGESDimen_SectionedArea
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDimen.IGESDimen_ToolSectionedArea_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDimen_ToolSectionedArea self, Handle_IGESDimen_SectionedArea ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_SectionedArea
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDimen.IGESDimen_ToolSectionedArea_OwnDump(self, *args)

    __swig_destroy__ = _IGESDimen.delete_IGESDimen_ToolSectionedArea
IGESDimen_ToolSectionedArea_swigregister = _IGESDimen.IGESDimen_ToolSectionedArea_swigregister
IGESDimen_ToolSectionedArea_swigregister(IGESDimen_ToolSectionedArea)

class NCollection_Array1_Handle_IGESDimen_LeaderArrow(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_IGESDimen_LeaderArrow self) -> NCollection_Array1< opencascade::handle< IGESDimen_LeaderArrow > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _IGESDimen.NCollection_Array1_Handle_IGESDimen_LeaderArrow_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_IGESDimen_LeaderArrow self) -> NCollection_Array1< opencascade::handle< IGESDimen_LeaderArrow > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _IGESDimen.NCollection_Array1_Handle_IGESDimen_LeaderArrow_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_IGESDimen_LeaderArrow self) -> NCollection_Array1< opencascade::handle< IGESDimen_LeaderArrow > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _IGESDimen.NCollection_Array1_Handle_IGESDimen_LeaderArrow_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_IGESDimen_LeaderArrow self) -> NCollection_Array1< opencascade::handle< IGESDimen_LeaderArrow > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _IGESDimen.NCollection_Array1_Handle_IGESDimen_LeaderArrow_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _IGESDimen.new_NCollection_Array1_Handle_IGESDimen_LeaderArrow(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_IGESDimen_LeaderArrow self, Handle_IGESDimen_LeaderArrow theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _IGESDimen.NCollection_Array1_Handle_IGESDimen_LeaderArrow_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_IGESDimen_LeaderArrow self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.NCollection_Array1_Handle_IGESDimen_LeaderArrow_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_IGESDimen_LeaderArrow self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.NCollection_Array1_Handle_IGESDimen_LeaderArrow_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_IGESDimen_LeaderArrow self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.NCollection_Array1_Handle_IGESDimen_LeaderArrow_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_IGESDimen_LeaderArrow self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.NCollection_Array1_Handle_IGESDimen_LeaderArrow_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_IGESDimen_LeaderArrow self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.NCollection_Array1_Handle_IGESDimen_LeaderArrow_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_IGESDimen_LeaderArrow self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.NCollection_Array1_Handle_IGESDimen_LeaderArrow_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_IGESDimen_LeaderArrow self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.NCollection_Array1_Handle_IGESDimen_LeaderArrow_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_IGESDimen_LeaderArrow self, NCollection_Array1_Handle_IGESDimen_LeaderArrow theOther) -> NCollection_Array1_Handle_IGESDimen_LeaderArrow

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESDimen.NCollection_Array1_Handle_IGESDimen_LeaderArrow_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_IGESDimen_LeaderArrow self, NCollection_Array1_Handle_IGESDimen_LeaderArrow theOther) -> NCollection_Array1_Handle_IGESDimen_LeaderArrow

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESDimen.NCollection_Array1_Handle_IGESDimen_LeaderArrow_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_IGESDimen_LeaderArrow self, NCollection_Array1_Handle_IGESDimen_LeaderArrow theOther) -> NCollection_Array1_Handle_IGESDimen_LeaderArrow
        assign(NCollection_Array1_Handle_IGESDimen_LeaderArrow self, NCollection_Array1_Handle_IGESDimen_LeaderArrow theOther) -> NCollection_Array1_Handle_IGESDimen_LeaderArrow

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESDimen.NCollection_Array1_Handle_IGESDimen_LeaderArrow_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _IGESDimen.NCollection_Array1_Handle_IGESDimen_LeaderArrow_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_IGESDimen_LeaderArrow self) -> Handle_IGESDimen_LeaderArrow

        @return first element

        :rtype: TheItemType &

        """
        return _IGESDimen.NCollection_Array1_Handle_IGESDimen_LeaderArrow_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _IGESDimen.NCollection_Array1_Handle_IGESDimen_LeaderArrow_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_IGESDimen_LeaderArrow self) -> Handle_IGESDimen_LeaderArrow

        @return last element

        :rtype: TheItemType &

        """
        return _IGESDimen.NCollection_Array1_Handle_IGESDimen_LeaderArrow_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESDimen.NCollection_Array1_Handle_IGESDimen_LeaderArrow_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_IGESDimen_LeaderArrow self, Standard_Integer const theIndex) -> Handle_IGESDimen_LeaderArrow

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _IGESDimen.NCollection_Array1_Handle_IGESDimen_LeaderArrow_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESDimen.NCollection_Array1_Handle_IGESDimen_LeaderArrow___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESDimen.NCollection_Array1_Handle_IGESDimen_LeaderArrow_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_IGESDimen_LeaderArrow self, Standard_Integer const theIndex, Handle_IGESDimen_LeaderArrow theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _IGESDimen.NCollection_Array1_Handle_IGESDimen_LeaderArrow_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_IGESDimen_LeaderArrow self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _IGESDimen.NCollection_Array1_Handle_IGESDimen_LeaderArrow_Resize(self, *args)

    __swig_destroy__ = _IGESDimen.delete_NCollection_Array1_Handle_IGESDimen_LeaderArrow
NCollection_Array1_Handle_IGESDimen_LeaderArrow_swigregister = _IGESDimen.NCollection_Array1_Handle_IGESDimen_LeaderArrow_swigregister
NCollection_Array1_Handle_IGESDimen_LeaderArrow_swigregister(NCollection_Array1_Handle_IGESDimen_LeaderArrow)


try:
	IGESDimen_Array1OfLeaderArrow = NCollection_Array1_Handle_IGESDimen_LeaderArrow
except NameError:
	pass # does not exist, probably ignored

class IGESDimen_ReadWriteModule(IGESData.IGESData_ReadWriteModule):
    """
    Defines Dimen File Access Module for IGESDimen (specific parts)
    Specific actions concern : Read and Write Own Parameters of
    an IGESEntity
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDimen_ReadWriteModule
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDimen_ReadWriteModule(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDimen_ReadWriteModule self) -> IGESDimen_ReadWriteModule

        Creates a ReadWriteModule & puts it into ReaderLib & WriterLib


        """
        this = _IGESDimen.new_IGESDimen_ReadWriteModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def CaseIGES(self, *args):
        """
        CaseIGES(IGESDimen_ReadWriteModule self, Standard_Integer const typenum, Standard_Integer const formnum) -> Standard_Integer

        Defines Case Numbers for Entities of IGESDimen

        :type typenum: int
        :type formnum: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_ReadWriteModule_CaseIGES(self, *args)


    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDimen_ReadWriteModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file for an Entity of IGESDimen

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDimen.IGESDimen_ReadWriteModule_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDimen_ReadWriteModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDimen.IGESDimen_ReadWriteModule_WriteOwnParams(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDimen.IGESDimen_ReadWriteModule_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDimen.IGESDimen_ReadWriteModule_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.IGESDimen_ReadWriteModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDimen.delete_IGESDimen_ReadWriteModule
IGESDimen_ReadWriteModule_swigregister = _IGESDimen.IGESDimen_ReadWriteModule_swigregister
IGESDimen_ReadWriteModule_swigregister(IGESDimen_ReadWriteModule)

def IGESDimen_ReadWriteModule_get_type_name(*args):
    """
    IGESDimen_ReadWriteModule_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDimen.IGESDimen_ReadWriteModule_get_type_name(*args)

def IGESDimen_ReadWriteModule_get_type_descriptor(*args):
    """
    IGESDimen_ReadWriteModule_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDimen.IGESDimen_ReadWriteModule_get_type_descriptor(*args)

class IGESDimen_(object):
    """
    This package represents Entities applied to Dimensions
    ie. Annotation Entities and attached Properties and
    Associativities.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Init(*args):
        """
        Init()

        Prepares dynamic data (Protocol, Modules) for this package


        """
        return _IGESDimen.IGESDimen__Init(*args)

    Init = staticmethod(Init)

    def Protocol(*args):
        """
        Protocol() -> Handle_IGESDimen_Protocol

        Returns the Protocol for this Package

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_Protocol

        """
        return _IGESDimen.IGESDimen__Protocol(*args)

    Protocol = staticmethod(Protocol)

    def __init__(self):
        """
        This package represents Entities applied to Dimensions
        ie. Annotation Entities and attached Properties and
        Associativities.
        """
        this = _IGESDimen.new_IGESDimen_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IGESDimen.delete_IGESDimen_
IGESDimen__swigregister = _IGESDimen.IGESDimen__swigregister
IGESDimen__swigregister(IGESDimen_)

def IGESDimen__Init(*args):
    """
    IGESDimen__Init()

    Prepares dynamic data (Protocol, Modules) for this package


    """
    return _IGESDimen.IGESDimen__Init(*args)

def IGESDimen__Protocol(*args):
    """
    IGESDimen__Protocol() -> Handle_IGESDimen_Protocol

    Returns the Protocol for this Package

    :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_Protocol

    """
    return _IGESDimen.IGESDimen__Protocol(*args)

class IGESDimen_ToolBasicDimension(object):
    """
    Tool to work on a BasicDimension. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDimen_ToolBasicDimension self) -> IGESDimen_ToolBasicDimension

        Returns a ToolBasicDimension, ready to work


        """
        this = _IGESDimen.new_IGESDimen_ToolBasicDimension(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDimen_ToolBasicDimension self, Handle_IGESDimen_BasicDimension ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_BasicDimension
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDimen.IGESDimen_ToolBasicDimension_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDimen_ToolBasicDimension self, Handle_IGESDimen_BasicDimension ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_BasicDimension
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDimen.IGESDimen_ToolBasicDimension_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDimen_ToolBasicDimension self, Handle_IGESDimen_BasicDimension ent, Interface_EntityIterator iter)

        Lists the Entities shared by a BasicDimension <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_BasicDimension
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.IGESDimen_ToolBasicDimension_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESDimen_ToolBasicDimension self, Handle_IGESDimen_BasicDimension ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a BasicDimension
        (NbPropertyValues forced to 8)

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_BasicDimension
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.IGESDimen_ToolBasicDimension_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDimen_ToolBasicDimension self, Handle_IGESDimen_BasicDimension ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_BasicDimension
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDimen.IGESDimen_ToolBasicDimension_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDimen_ToolBasicDimension self, Handle_IGESDimen_BasicDimension ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_BasicDimension
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDimen.IGESDimen_ToolBasicDimension_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDimen_ToolBasicDimension self, Handle_IGESDimen_BasicDimension entfrom, Handle_IGESDimen_BasicDimension entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDimen.Handle_IGESDimen_BasicDimension
        :type entto: OCC.wrapper.IGESDimen.Handle_IGESDimen_BasicDimension
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDimen.IGESDimen_ToolBasicDimension_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDimen_ToolBasicDimension self, Handle_IGESDimen_BasicDimension ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_BasicDimension
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDimen.IGESDimen_ToolBasicDimension_OwnDump(self, *args)

    __swig_destroy__ = _IGESDimen.delete_IGESDimen_ToolBasicDimension
IGESDimen_ToolBasicDimension_swigregister = _IGESDimen.IGESDimen_ToolBasicDimension_swigregister
IGESDimen_ToolBasicDimension_swigregister(IGESDimen_ToolBasicDimension)

class Handle_IGESDimen_BasicDimension(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDimen_BasicDimension self)

        Nullify the handle


        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDimen_BasicDimension self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDimen_BasicDimension self, IGESDimen_BasicDimension thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDimen_BasicDimension self, Handle_IGESDimen_BasicDimension theHandle) -> Handle_IGESDimen_BasicDimension
        assign(Handle_IGESDimen_BasicDimension self, IGESDimen_BasicDimension thePtr) -> Handle_IGESDimen_BasicDimension
        assign(Handle_IGESDimen_BasicDimension self, Handle_IGESDimen_BasicDimension theHandle) -> Handle_IGESDimen_BasicDimension

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDimen_BasicDimension self) -> IGESDimen_BasicDimension

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDimen_BasicDimension self) -> IGESDimen_BasicDimension

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDimen_BasicDimension self) -> IGESDimen_BasicDimension

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension___ref__(self, *args)


    def __hash__(self):
        return _IGESDimen.Handle_IGESDimen_BasicDimension___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDimen.Handle_IGESDimen_BasicDimension___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDimen.new_Handle_IGESDimen_BasicDimension(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDimen.Handle_IGESDimen_BasicDimension_DownCast)
    __swig_destroy__ = _IGESDimen.delete_Handle_IGESDimen_BasicDimension

    def Init(self, *args):
        """
        Init(Handle_IGESDimen_BasicDimension self, Standard_Integer const nbPropVal, gp_XY lowerLeft, gp_XY lowerRight, gp_XY upperRight, gp_XY upperLeft)

        :type nbPropVal: int
        :type lowerLeft: OCC.wrapper.gp.gp_XY
        :type lowerRight: OCC.wrapper.gp.gp_XY
        :type upperRight: OCC.wrapper.gp.gp_XY
        :type upperLeft: OCC.wrapper.gp.gp_XY

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(Handle_IGESDimen_BasicDimension self) -> Standard_Integer

        returns the number of properties = 8

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_NbPropertyValues(self, *args)


    def LowerLeft(self, *args):
        """
        LowerLeft(Handle_IGESDimen_BasicDimension self) -> gp_Pnt2d

        returns coordinates of lower left corner

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_LowerLeft(self, *args)


    def LowerRight(self, *args):
        """
        LowerRight(Handle_IGESDimen_BasicDimension self) -> gp_Pnt2d

        returns coordinates of lower right corner

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_LowerRight(self, *args)


    def UpperRight(self, *args):
        """
        UpperRight(Handle_IGESDimen_BasicDimension self) -> gp_Pnt2d

        returns coordinates of upper right corner

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_UpperRight(self, *args)


    def UpperLeft(self, *args):
        """
        UpperLeft(Handle_IGESDimen_BasicDimension self) -> gp_Pnt2d

        returns coordinates of upper left corner

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_UpperLeft(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDimen_BasicDimension self) -> char const *

        :rtype: const char *

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_BasicDimension_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_BasicDimension_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDimen_BasicDimension self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDimen_BasicDimension self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDimen_BasicDimension self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDimen_BasicDimension self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDimen_BasicDimension self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDimen_BasicDimension self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDimen_BasicDimension self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDimen_BasicDimension self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDimen_BasicDimension self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDimen_BasicDimension self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDimen_BasicDimension self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDimen_BasicDimension self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDimen_BasicDimension self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDimen_BasicDimension self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDimen_BasicDimension self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDimen_BasicDimension self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDimen_BasicDimension self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDimen_BasicDimension self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDimen_BasicDimension self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDimen_BasicDimension self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDimen_BasicDimension self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDimen_BasicDimension self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDimen_BasicDimension self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDimen_BasicDimension self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDimen_BasicDimension self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDimen_BasicDimension self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDimen_BasicDimension self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDimen_BasicDimension self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDimen_BasicDimension self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDimen_BasicDimension self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDimen_BasicDimension self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDimen_BasicDimension self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDimen_BasicDimension self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDimen_BasicDimension self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDimen_BasicDimension self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDimen_BasicDimension self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDimen_BasicDimension self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDimen_BasicDimension self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDimen_BasicDimension self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDimen_BasicDimension self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDimen_BasicDimension self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDimen_BasicDimension self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDimen_BasicDimension self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDimen_BasicDimension self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDimen_BasicDimension self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDimen_BasicDimension self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDimen_BasicDimension self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDimen_BasicDimension self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDimen_BasicDimension self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDimen_BasicDimension self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDimen_BasicDimension self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDimen_BasicDimension self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDimen_BasicDimension self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDimen_BasicDimension self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDimen_BasicDimension self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDimen_BasicDimension self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDimen_BasicDimension self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDimen_BasicDimension self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDimen_BasicDimension self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDimen_BasicDimension self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDimen_BasicDimension self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDimen_BasicDimension self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDimen_BasicDimension self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDimen_BasicDimension self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDimen_BasicDimension self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDimen_BasicDimension self)

        Memory deallocator for transient classes


        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDimen_BasicDimension self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDimen_BasicDimension self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDimen_BasicDimension self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDimen_BasicDimension self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDimen_BasicDimension self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDimen_BasicDimension self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDimen_BasicDimension self)

        Increments the reference counter of this object


        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDimen_BasicDimension self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_BasicDimension_DecrementRefCounter(self, *args)

Handle_IGESDimen_BasicDimension_swigregister = _IGESDimen.Handle_IGESDimen_BasicDimension_swigregister
Handle_IGESDimen_BasicDimension_swigregister(Handle_IGESDimen_BasicDimension)

def Handle_IGESDimen_BasicDimension_DownCast(thing):
    return _IGESDimen.Handle_IGESDimen_BasicDimension_DownCast(thing)
Handle_IGESDimen_BasicDimension_DownCast = _IGESDimen.Handle_IGESDimen_BasicDimension_DownCast

class IGESDimen_SectionedArea(IGESData.IGESData_IGESEntity):
    """
    defines IGES Sectioned Area, Type <230> Form <0>,
    in package IGESDimen
    A sectioned area is a portion of a design which is to be
    filled with a pattern of lines. Ordinarily, this entity
    is used to reveal or expose shape or material characteri-
    stics defined by other entities. It consists of a pointer
    to an exterior definition curve, a specification of the
    pattern of lines, the coordinates of a point on a pattern
    line, the distance between the pattern lines, the angle
    between the pattern lines and the X-axis of definition
    space, and the specification of any enclosed definition
    curves (commonly known as islands).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDimen_SectionedArea
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDimen_SectionedArea(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDimen_SectionedArea self) -> IGESDimen_SectionedArea

        defines IGES Sectioned Area, Type <230> Form <0>,
        in package IGESDimen
        A sectioned area is a portion of a design which is to be
        filled with a pattern of lines. Ordinarily, this entity
        is used to reveal or expose shape or material characteri-
        stics defined by other entities. It consists of a pointer
        to an exterior definition curve, a specification of the
        pattern of lines, the coordinates of a point on a pattern
        line, the distance between the pattern lines, the angle
        between the pattern lines and the X-axis of definition
        space, and the specification of any enclosed definition
        curves (commonly known as islands).
        """
        this = _IGESDimen.new_IGESDimen_SectionedArea(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDimen_SectionedArea self, Handle_IGESData_IGESEntity aCurve, Standard_Integer const aPattern, gp_XYZ aPoint, Standard_Real const aDistance, Standard_Real const anAngle, Handle_IGESData_HArray1OfIGESEntity someIslands)

        :type aCurve: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type aPattern: int
        :type aPoint: OCC.wrapper.gp.gp_XYZ
        :type aDistance: float
        :type anAngle: float
        :type someIslands: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESDimen.IGESDimen_SectionedArea_Init(self, *args)


    def SetInverted(self, *args):
        """
        SetInverted(IGESDimen_SectionedArea self, Standard_Boolean const mode)

        Sets the cross hatches to be inverted or not,
        according value of <mode> (corresponds to FormNumber)

        :type mode: bool

        """
        return _IGESDimen.IGESDimen_SectionedArea_SetInverted(self, *args)


    def IsInverted(self, *args):
        """
        IsInverted(IGESDimen_SectionedArea self) -> Standard_Boolean

        Returns True if cross hatches as Inverted, else they are
        Standard (Inverted : Form=1, Standard : Form=0)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.IGESDimen_SectionedArea_IsInverted(self, *args)


    def ExteriorCurve(self, *args):
        """
        ExteriorCurve(IGESDimen_SectionedArea self) -> Handle_IGESData_IGESEntity

        returns the exterior definition curve

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.IGESDimen_SectionedArea_ExteriorCurve(self, *args)


    def Pattern(self, *args):
        """
        Pattern(IGESDimen_SectionedArea self) -> Standard_Integer

        returns fill pattern code

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_SectionedArea_Pattern(self, *args)


    def PassingPoint(self, *args):
        """
        PassingPoint(IGESDimen_SectionedArea self) -> gp_Pnt

        returns point thru which line should pass

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.IGESDimen_SectionedArea_PassingPoint(self, *args)


    def TransformedPassingPoint(self, *args):
        """
        TransformedPassingPoint(IGESDimen_SectionedArea self) -> gp_Pnt

        returns point thru which line should pass after Transformation

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.IGESDimen_SectionedArea_TransformedPassingPoint(self, *args)


    def ZDepth(self, *args):
        """
        ZDepth(IGESDimen_SectionedArea self) -> Standard_Real

        returns the Z depth

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_SectionedArea_ZDepth(self, *args)


    def Distance(self, *args):
        """
        Distance(IGESDimen_SectionedArea self) -> Standard_Real

        returns the normal distance between lines

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_SectionedArea_Distance(self, *args)


    def Angle(self, *args):
        """
        Angle(IGESDimen_SectionedArea self) -> Standard_Real

        returns the angle of lines with XT axis

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_SectionedArea_Angle(self, *args)


    def NbIslands(self, *args):
        """
        NbIslands(IGESDimen_SectionedArea self) -> Standard_Integer

        returns the number of island curves

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_SectionedArea_NbIslands(self, *args)


    def IslandCurve(self, *args):
        """
        IslandCurve(IGESDimen_SectionedArea self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns the interior definition curves, returns Null Handle
        exception raised if Index <= 0 or Index > NbIslands()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.IGESDimen_SectionedArea_IslandCurve(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDimen.IGESDimen_SectionedArea_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDimen.IGESDimen_SectionedArea_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.IGESDimen_SectionedArea_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDimen.delete_IGESDimen_SectionedArea
IGESDimen_SectionedArea_swigregister = _IGESDimen.IGESDimen_SectionedArea_swigregister
IGESDimen_SectionedArea_swigregister(IGESDimen_SectionedArea)

def IGESDimen_SectionedArea_get_type_name(*args):
    """
    IGESDimen_SectionedArea_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDimen.IGESDimen_SectionedArea_get_type_name(*args)

def IGESDimen_SectionedArea_get_type_descriptor(*args):
    """
    IGESDimen_SectionedArea_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDimen.IGESDimen_SectionedArea_get_type_descriptor(*args)

class IGESDimen_ToolNewGeneralNote(object):
    """
    Tool to work on a NewGeneralNote. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDimen_ToolNewGeneralNote self) -> IGESDimen_ToolNewGeneralNote

        Returns a ToolNewGeneralNote, ready to work


        """
        this = _IGESDimen.new_IGESDimen_ToolNewGeneralNote(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDimen_ToolNewGeneralNote self, Handle_IGESDimen_NewGeneralNote ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_NewGeneralNote
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDimen.IGESDimen_ToolNewGeneralNote_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDimen_ToolNewGeneralNote self, Handle_IGESDimen_NewGeneralNote ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_NewGeneralNote
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDimen.IGESDimen_ToolNewGeneralNote_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDimen_ToolNewGeneralNote self, Handle_IGESDimen_NewGeneralNote ent, Interface_EntityIterator iter)

        Lists the Entities shared by a NewGeneralNote <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_NewGeneralNote
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.IGESDimen_ToolNewGeneralNote_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDimen_ToolNewGeneralNote self, Handle_IGESDimen_NewGeneralNote ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_NewGeneralNote
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDimen.IGESDimen_ToolNewGeneralNote_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDimen_ToolNewGeneralNote self, Handle_IGESDimen_NewGeneralNote ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_NewGeneralNote
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDimen.IGESDimen_ToolNewGeneralNote_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDimen_ToolNewGeneralNote self, Handle_IGESDimen_NewGeneralNote entfrom, Handle_IGESDimen_NewGeneralNote entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDimen.Handle_IGESDimen_NewGeneralNote
        :type entto: OCC.wrapper.IGESDimen.Handle_IGESDimen_NewGeneralNote
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDimen.IGESDimen_ToolNewGeneralNote_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDimen_ToolNewGeneralNote self, Handle_IGESDimen_NewGeneralNote ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_NewGeneralNote
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDimen.IGESDimen_ToolNewGeneralNote_OwnDump(self, *args)

    __swig_destroy__ = _IGESDimen.delete_IGESDimen_ToolNewGeneralNote
IGESDimen_ToolNewGeneralNote_swigregister = _IGESDimen.IGESDimen_ToolNewGeneralNote_swigregister
IGESDimen_ToolNewGeneralNote_swigregister(IGESDimen_ToolNewGeneralNote)

class IGESDimen_ToolCenterLine(object):
    """
    Tool to work on a CenterLine. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDimen_ToolCenterLine self) -> IGESDimen_ToolCenterLine

        Returns a ToolCenterLine, ready to work


        """
        this = _IGESDimen.new_IGESDimen_ToolCenterLine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDimen_ToolCenterLine self, Handle_IGESDimen_CenterLine ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_CenterLine
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDimen.IGESDimen_ToolCenterLine_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDimen_ToolCenterLine self, Handle_IGESDimen_CenterLine ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_CenterLine
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDimen.IGESDimen_ToolCenterLine_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDimen_ToolCenterLine self, Handle_IGESDimen_CenterLine ent, Interface_EntityIterator iter)

        Lists the Entities shared by a CenterLine <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_CenterLine
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.IGESDimen_ToolCenterLine_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESDimen_ToolCenterLine self, Handle_IGESDimen_CenterLine ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a CenterLine
        (LineFont forced to Rank = 1, DataType forced to 1)

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_CenterLine
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.IGESDimen_ToolCenterLine_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDimen_ToolCenterLine self, Handle_IGESDimen_CenterLine ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_CenterLine
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDimen.IGESDimen_ToolCenterLine_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDimen_ToolCenterLine self, Handle_IGESDimen_CenterLine ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_CenterLine
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDimen.IGESDimen_ToolCenterLine_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDimen_ToolCenterLine self, Handle_IGESDimen_CenterLine entfrom, Handle_IGESDimen_CenterLine entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDimen.Handle_IGESDimen_CenterLine
        :type entto: OCC.wrapper.IGESDimen.Handle_IGESDimen_CenterLine
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDimen.IGESDimen_ToolCenterLine_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDimen_ToolCenterLine self, Handle_IGESDimen_CenterLine ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_CenterLine
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDimen.IGESDimen_ToolCenterLine_OwnDump(self, *args)

    __swig_destroy__ = _IGESDimen.delete_IGESDimen_ToolCenterLine
IGESDimen_ToolCenterLine_swigregister = _IGESDimen.IGESDimen_ToolCenterLine_swigregister
IGESDimen_ToolCenterLine_swigregister(IGESDimen_ToolCenterLine)

class Handle_IGESDimen_LeaderArrow(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDimen_LeaderArrow self)

        Nullify the handle


        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDimen_LeaderArrow self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDimen_LeaderArrow self, IGESDimen_LeaderArrow thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDimen_LeaderArrow self, Handle_IGESDimen_LeaderArrow theHandle) -> Handle_IGESDimen_LeaderArrow
        assign(Handle_IGESDimen_LeaderArrow self, IGESDimen_LeaderArrow thePtr) -> Handle_IGESDimen_LeaderArrow
        assign(Handle_IGESDimen_LeaderArrow self, Handle_IGESDimen_LeaderArrow theHandle) -> Handle_IGESDimen_LeaderArrow

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDimen_LeaderArrow self) -> IGESDimen_LeaderArrow

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDimen_LeaderArrow self) -> IGESDimen_LeaderArrow

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDimen_LeaderArrow self) -> IGESDimen_LeaderArrow

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow___ref__(self, *args)


    def __hash__(self):
        return _IGESDimen.Handle_IGESDimen_LeaderArrow___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDimen.Handle_IGESDimen_LeaderArrow___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDimen.new_Handle_IGESDimen_LeaderArrow(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDimen.Handle_IGESDimen_LeaderArrow_DownCast)
    __swig_destroy__ = _IGESDimen.delete_Handle_IGESDimen_LeaderArrow

    def Init(self, *args):
        """
        Init(Handle_IGESDimen_LeaderArrow self, Standard_Real const height, Standard_Real const width, Standard_Real const depth, gp_XY position, Handle_TColgp_HArray1OfXY segments)

        This method is used to set the fields of the class
        LeaderArrow
        - height      : ArrowHead height
        - width       : ArrowHead width
        - depth       : Z Depth
        - position    : ArrowHead coordinates
        - segments    : Segment tail coordinate pairs

        :type height: float
        :type width: float
        :type depth: float
        :type position: OCC.wrapper.gp.gp_XY
        :type segments: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfXY

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_Init(self, *args)


    def SetFormNumber(self, *args):
        """
        SetFormNumber(Handle_IGESDimen_LeaderArrow self, Standard_Integer const form)

        Changes FormNumber (indicates the Shape of the Arrow)
        Error if not in range [0-12]

        :type form: int

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_SetFormNumber(self, *args)


    def NbSegments(self, *args):
        """
        NbSegments(Handle_IGESDimen_LeaderArrow self) -> Standard_Integer

        returns number of segments

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_NbSegments(self, *args)


    def ArrowHeadHeight(self, *args):
        """
        ArrowHeadHeight(Handle_IGESDimen_LeaderArrow self) -> Standard_Real

        returns ArrowHead height

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_ArrowHeadHeight(self, *args)


    def ArrowHeadWidth(self, *args):
        """
        ArrowHeadWidth(Handle_IGESDimen_LeaderArrow self) -> Standard_Real

        returns ArrowHead width

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_ArrowHeadWidth(self, *args)


    def ZDepth(self, *args):
        """
        ZDepth(Handle_IGESDimen_LeaderArrow self) -> Standard_Real

        returns Z depth

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_ZDepth(self, *args)


    def ArrowHead(self, *args):
        """
        ArrowHead(Handle_IGESDimen_LeaderArrow self) -> gp_Pnt2d

        returns ArrowHead co-ordinates

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_ArrowHead(self, *args)


    def TransformedArrowHead(self, *args):
        """
        TransformedArrowHead(Handle_IGESDimen_LeaderArrow self) -> gp_Pnt

        returns ArrowHead co-ordinates after Transformation

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_TransformedArrowHead(self, *args)


    def SegmentTail(self, *args):
        """
        SegmentTail(Handle_IGESDimen_LeaderArrow self, Standard_Integer const Index) -> gp_Pnt2d

        returns segment tail co-ordinates.
        raises exception if Index <= 0 or Index > NbSegments

        :type Index: int
        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_SegmentTail(self, *args)


    def TransformedSegmentTail(self, *args):
        """
        TransformedSegmentTail(Handle_IGESDimen_LeaderArrow self, Standard_Integer const Index) -> gp_Pnt

        returns segment tail co-ordinates after Transformation.
        raises exception if Index <= 0 or Index > NbSegments

        :type Index: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_TransformedSegmentTail(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDimen_LeaderArrow self) -> char const *

        :rtype: const char *

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_LeaderArrow_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_LeaderArrow_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDimen_LeaderArrow self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDimen_LeaderArrow self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDimen_LeaderArrow self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDimen_LeaderArrow self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDimen_LeaderArrow self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDimen_LeaderArrow self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDimen_LeaderArrow self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDimen_LeaderArrow self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDimen_LeaderArrow self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDimen_LeaderArrow self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDimen_LeaderArrow self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDimen_LeaderArrow self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDimen_LeaderArrow self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDimen_LeaderArrow self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDimen_LeaderArrow self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDimen_LeaderArrow self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDimen_LeaderArrow self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDimen_LeaderArrow self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDimen_LeaderArrow self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDimen_LeaderArrow self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDimen_LeaderArrow self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDimen_LeaderArrow self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDimen_LeaderArrow self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDimen_LeaderArrow self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDimen_LeaderArrow self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDimen_LeaderArrow self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDimen_LeaderArrow self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDimen_LeaderArrow self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDimen_LeaderArrow self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDimen_LeaderArrow self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDimen_LeaderArrow self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDimen_LeaderArrow self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDimen_LeaderArrow self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDimen_LeaderArrow self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDimen_LeaderArrow self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDimen_LeaderArrow self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDimen_LeaderArrow self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDimen_LeaderArrow self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDimen_LeaderArrow self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDimen_LeaderArrow self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDimen_LeaderArrow self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDimen_LeaderArrow self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDimen_LeaderArrow self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDimen_LeaderArrow self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDimen_LeaderArrow self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDimen_LeaderArrow self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDimen_LeaderArrow self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDimen_LeaderArrow self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDimen_LeaderArrow self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDimen_LeaderArrow self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDimen_LeaderArrow self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDimen_LeaderArrow self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDimen_LeaderArrow self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDimen_LeaderArrow self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDimen_LeaderArrow self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDimen_LeaderArrow self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDimen_LeaderArrow self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDimen_LeaderArrow self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDimen_LeaderArrow self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDimen_LeaderArrow self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDimen_LeaderArrow self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDimen_LeaderArrow self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDimen_LeaderArrow self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDimen_LeaderArrow self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDimen_LeaderArrow self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDimen_LeaderArrow self)

        Memory deallocator for transient classes


        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDimen_LeaderArrow self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDimen_LeaderArrow self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDimen_LeaderArrow self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDimen_LeaderArrow self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDimen_LeaderArrow self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDimen_LeaderArrow self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDimen_LeaderArrow self)

        Increments the reference counter of this object


        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDimen_LeaderArrow self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_LeaderArrow_DecrementRefCounter(self, *args)

Handle_IGESDimen_LeaderArrow_swigregister = _IGESDimen.Handle_IGESDimen_LeaderArrow_swigregister
Handle_IGESDimen_LeaderArrow_swigregister(Handle_IGESDimen_LeaderArrow)

def Handle_IGESDimen_LeaderArrow_DownCast(thing):
    return _IGESDimen.Handle_IGESDimen_LeaderArrow_DownCast(thing)
Handle_IGESDimen_LeaderArrow_DownCast = _IGESDimen.Handle_IGESDimen_LeaderArrow_DownCast

class Handle_IGESDimen_HArray1OfLeaderArrow(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDimen_HArray1OfLeaderArrow self)

        Nullify the handle


        """
        return _IGESDimen.Handle_IGESDimen_HArray1OfLeaderArrow_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDimen_HArray1OfLeaderArrow self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDimen.Handle_IGESDimen_HArray1OfLeaderArrow_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDimen_HArray1OfLeaderArrow self, IGESDimen_HArray1OfLeaderArrow thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDimen.Handle_IGESDimen_HArray1OfLeaderArrow_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDimen_HArray1OfLeaderArrow self, Handle_IGESDimen_HArray1OfLeaderArrow theHandle) -> Handle_IGESDimen_HArray1OfLeaderArrow
        assign(Handle_IGESDimen_HArray1OfLeaderArrow self, IGESDimen_HArray1OfLeaderArrow thePtr) -> Handle_IGESDimen_HArray1OfLeaderArrow
        assign(Handle_IGESDimen_HArray1OfLeaderArrow self, Handle_IGESDimen_HArray1OfLeaderArrow theHandle) -> Handle_IGESDimen_HArray1OfLeaderArrow

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDimen.Handle_IGESDimen_HArray1OfLeaderArrow_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDimen_HArray1OfLeaderArrow self) -> IGESDimen_HArray1OfLeaderArrow

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_HArray1OfLeaderArrow_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDimen_HArray1OfLeaderArrow self) -> IGESDimen_HArray1OfLeaderArrow

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_HArray1OfLeaderArrow___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDimen_HArray1OfLeaderArrow self) -> IGESDimen_HArray1OfLeaderArrow

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDimen.Handle_IGESDimen_HArray1OfLeaderArrow___ref__(self, *args)


    def __hash__(self):
        return _IGESDimen.Handle_IGESDimen_HArray1OfLeaderArrow___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDimen.Handle_IGESDimen_HArray1OfLeaderArrow___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDimen.new_Handle_IGESDimen_HArray1OfLeaderArrow(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDimen.Handle_IGESDimen_HArray1OfLeaderArrow_DownCast)
    __swig_destroy__ = _IGESDimen.delete_Handle_IGESDimen_HArray1OfLeaderArrow

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.IGESDimen.IGESDimen_Array1OfLeaderArrow

        """
        res = _IGESDimen.Handle_IGESDimen_HArray1OfLeaderArrow_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_IGESDimen_HArray1OfLeaderArrow self) -> NCollection_Array1_Handle_IGESDimen_LeaderArrow

        :rtype: OCC.wrapper.IGESDimen.IGESDimen_Array1OfLeaderArrow

        """
        return _IGESDimen.Handle_IGESDimen_HArray1OfLeaderArrow_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDimen_HArray1OfLeaderArrow self) -> char const *

        :rtype: const char *

        """
        return _IGESDimen.Handle_IGESDimen_HArray1OfLeaderArrow_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_HArray1OfLeaderArrow_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_HArray1OfLeaderArrow_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESDimen_HArray1OfLeaderArrow self)

        Memory deallocator for transient classes


        """
        return _IGESDimen.Handle_IGESDimen_HArray1OfLeaderArrow_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDimen_HArray1OfLeaderArrow self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDimen_HArray1OfLeaderArrow self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_HArray1OfLeaderArrow_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDimen_HArray1OfLeaderArrow self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDimen_HArray1OfLeaderArrow self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_HArray1OfLeaderArrow_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDimen_HArray1OfLeaderArrow self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDimen.Handle_IGESDimen_HArray1OfLeaderArrow_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDimen_HArray1OfLeaderArrow self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_HArray1OfLeaderArrow_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDimen_HArray1OfLeaderArrow self)

        Increments the reference counter of this object


        """
        return _IGESDimen.Handle_IGESDimen_HArray1OfLeaderArrow_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDimen_HArray1OfLeaderArrow self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_HArray1OfLeaderArrow_DecrementRefCounter(self, *args)

Handle_IGESDimen_HArray1OfLeaderArrow_swigregister = _IGESDimen.Handle_IGESDimen_HArray1OfLeaderArrow_swigregister
Handle_IGESDimen_HArray1OfLeaderArrow_swigregister(Handle_IGESDimen_HArray1OfLeaderArrow)

def Handle_IGESDimen_HArray1OfLeaderArrow_DownCast(thing):
    return _IGESDimen.Handle_IGESDimen_HArray1OfLeaderArrow_DownCast(thing)
Handle_IGESDimen_HArray1OfLeaderArrow_DownCast = _IGESDimen.Handle_IGESDimen_HArray1OfLeaderArrow_DownCast

class IGESDimen_SpecificModule(IGESData.IGESData_SpecificModule):
    """
    Defines Services attached to IGES Entities :
    Dump & OwnCorrect, for IGESDimen
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDimen_SpecificModule
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDimen_SpecificModule(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDimen_SpecificModule self) -> IGESDimen_SpecificModule

        Creates a SpecificModule from IGESDimen & puts it into SpecificLib


        """
        this = _IGESDimen.new_IGESDimen_SpecificModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def OwnDump(self, *args):
        """
        OwnDump(IGESDimen_SpecificModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Specific Dump (own parameters) for IGESDimen

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDimen.IGESDimen_SpecificModule_OwnDump(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESDimen_SpecificModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent) -> Standard_Boolean

        Performs non-ambiguous Corrections on Entities which support
        them (BasicDimension,CenterLine,DimensionDisplayData,
        DimensionTolerance,DimensionUnits,DimensionedGeometry,
        NewDimensionedGeometry,Section,WitnessLine)

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.IGESDimen_SpecificModule_OwnCorrect(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDimen.IGESDimen_SpecificModule_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDimen.IGESDimen_SpecificModule_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.IGESDimen_SpecificModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDimen.delete_IGESDimen_SpecificModule
IGESDimen_SpecificModule_swigregister = _IGESDimen.IGESDimen_SpecificModule_swigregister
IGESDimen_SpecificModule_swigregister(IGESDimen_SpecificModule)

def IGESDimen_SpecificModule_get_type_name(*args):
    """
    IGESDimen_SpecificModule_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDimen.IGESDimen_SpecificModule_get_type_name(*args)

def IGESDimen_SpecificModule_get_type_descriptor(*args):
    """
    IGESDimen_SpecificModule_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDimen.IGESDimen_SpecificModule_get_type_descriptor(*args)

class Handle_IGESDimen_NewDimensionedGeometry(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDimen_NewDimensionedGeometry self)

        Nullify the handle


        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDimen_NewDimensionedGeometry self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDimen_NewDimensionedGeometry self, IGESDimen_NewDimensionedGeometry thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDimen_NewDimensionedGeometry self, Handle_IGESDimen_NewDimensionedGeometry theHandle) -> Handle_IGESDimen_NewDimensionedGeometry
        assign(Handle_IGESDimen_NewDimensionedGeometry self, IGESDimen_NewDimensionedGeometry thePtr) -> Handle_IGESDimen_NewDimensionedGeometry
        assign(Handle_IGESDimen_NewDimensionedGeometry self, Handle_IGESDimen_NewDimensionedGeometry theHandle) -> Handle_IGESDimen_NewDimensionedGeometry

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDimen_NewDimensionedGeometry self) -> IGESDimen_NewDimensionedGeometry

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDimen_NewDimensionedGeometry self) -> IGESDimen_NewDimensionedGeometry

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDimen_NewDimensionedGeometry self) -> IGESDimen_NewDimensionedGeometry

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry___ref__(self, *args)


    def __hash__(self):
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDimen.new_Handle_IGESDimen_NewDimensionedGeometry(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_DownCast)
    __swig_destroy__ = _IGESDimen.delete_Handle_IGESDimen_NewDimensionedGeometry

    def Init(self, *args):
        """
        Init(Handle_IGESDimen_NewDimensionedGeometry self, Standard_Integer const nbDimens, Handle_IGESData_IGESEntity aDimen, Standard_Integer const anOrientation, Standard_Real const anAngle, Handle_IGESData_HArray1OfIGESEntity allEntities, Handle_TColStd_HArray1OfInteger allLocations, Handle_TColgp_HArray1OfXYZ allPoints)

        This method is used to set the fields of the class
        NewDimensionedGeometry
        - nbDimen       : Number of Dimensions, default = 1
        - aDimen        : Dimension Entity
        - anOrientation : Dimension Orientation Flag
        - anAngle       : Angle Value
        - allEntities   : Geometric Entities
        - allLocations  : Dimension Location Flags
        - allPoints     : Points on the Geometry Entities
        exception raised if lengths of entities, locations, points
        are not the same

        :type nbDimens: int
        :type aDimen: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type anOrientation: int
        :type anAngle: float
        :type allEntities: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity
        :type allLocations: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allPoints: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfXYZ

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_Init(self, *args)


    def NbDimensions(self, *args):
        """
        NbDimensions(Handle_IGESDimen_NewDimensionedGeometry self) -> Standard_Integer

        returns the number of dimensions

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_NbDimensions(self, *args)


    def NbGeometries(self, *args):
        """
        NbGeometries(Handle_IGESDimen_NewDimensionedGeometry self) -> Standard_Integer

        returns the number of associated geometry entities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_NbGeometries(self, *args)


    def DimensionEntity(self, *args):
        """
        DimensionEntity(Handle_IGESDimen_NewDimensionedGeometry self) -> Handle_IGESData_IGESEntity

        returns the dimension entity

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_DimensionEntity(self, *args)


    def DimensionOrientationFlag(self, *args):
        """
        DimensionOrientationFlag(Handle_IGESDimen_NewDimensionedGeometry self) -> Standard_Integer

        returns the dimension orientation flag

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_DimensionOrientationFlag(self, *args)


    def AngleValue(self, *args):
        """
        AngleValue(Handle_IGESDimen_NewDimensionedGeometry self) -> Standard_Real

        returns the angle value

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_AngleValue(self, *args)


    def GeometryEntity(self, *args):
        """
        GeometryEntity(Handle_IGESDimen_NewDimensionedGeometry self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns the Index'th geometry entity
        raises exception if Index <= 0 or Index > NbGeometries()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_GeometryEntity(self, *args)


    def DimensionLocationFlag(self, *args):
        """
        DimensionLocationFlag(Handle_IGESDimen_NewDimensionedGeometry self, Standard_Integer const Index) -> Standard_Integer

        returns the Index'th geometry entity's dimension location flag
        raises exception if Index <= 0 or Index > NbGeometries()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_DimensionLocationFlag(self, *args)


    def Point(self, *args):
        """
        Point(Handle_IGESDimen_NewDimensionedGeometry self, Standard_Integer const Index) -> gp_Pnt

        coordinate of point on Index'th geometry entity
        raises exception if Index <= 0 or Index > NbGeometries()

        :type Index: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_Point(self, *args)


    def TransformedPoint(self, *args):
        """
        TransformedPoint(Handle_IGESDimen_NewDimensionedGeometry self, Standard_Integer const Index) -> gp_Pnt

        coordinate of point on Index'th geometry entity after Transformation
        raises exception if Index <= 0 or Index > NbGeometries()

        :type Index: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_TransformedPoint(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDimen_NewDimensionedGeometry self) -> char const *

        :rtype: const char *

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDimen_NewDimensionedGeometry self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDimen_NewDimensionedGeometry self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDimen_NewDimensionedGeometry self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDimen_NewDimensionedGeometry self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDimen_NewDimensionedGeometry self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDimen_NewDimensionedGeometry self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDimen_NewDimensionedGeometry self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDimen_NewDimensionedGeometry self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDimen_NewDimensionedGeometry self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDimen_NewDimensionedGeometry self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDimen_NewDimensionedGeometry self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDimen_NewDimensionedGeometry self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDimen_NewDimensionedGeometry self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDimen_NewDimensionedGeometry self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDimen_NewDimensionedGeometry self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDimen_NewDimensionedGeometry self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDimen_NewDimensionedGeometry self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDimen_NewDimensionedGeometry self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDimen_NewDimensionedGeometry self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDimen_NewDimensionedGeometry self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDimen_NewDimensionedGeometry self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDimen_NewDimensionedGeometry self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDimen_NewDimensionedGeometry self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDimen_NewDimensionedGeometry self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDimen_NewDimensionedGeometry self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDimen_NewDimensionedGeometry self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDimen_NewDimensionedGeometry self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDimen_NewDimensionedGeometry self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDimen_NewDimensionedGeometry self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDimen_NewDimensionedGeometry self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDimen_NewDimensionedGeometry self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDimen_NewDimensionedGeometry self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDimen_NewDimensionedGeometry self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDimen_NewDimensionedGeometry self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDimen_NewDimensionedGeometry self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDimen_NewDimensionedGeometry self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDimen_NewDimensionedGeometry self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDimen_NewDimensionedGeometry self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDimen_NewDimensionedGeometry self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDimen_NewDimensionedGeometry self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDimen_NewDimensionedGeometry self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDimen_NewDimensionedGeometry self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDimen_NewDimensionedGeometry self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDimen_NewDimensionedGeometry self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDimen_NewDimensionedGeometry self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDimen_NewDimensionedGeometry self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDimen_NewDimensionedGeometry self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDimen_NewDimensionedGeometry self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDimen_NewDimensionedGeometry self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDimen_NewDimensionedGeometry self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDimen_NewDimensionedGeometry self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDimen_NewDimensionedGeometry self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDimen_NewDimensionedGeometry self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDimen_NewDimensionedGeometry self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDimen_NewDimensionedGeometry self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDimen_NewDimensionedGeometry self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDimen_NewDimensionedGeometry self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDimen_NewDimensionedGeometry self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDimen_NewDimensionedGeometry self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDimen_NewDimensionedGeometry self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDimen_NewDimensionedGeometry self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDimen_NewDimensionedGeometry self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDimen_NewDimensionedGeometry self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDimen_NewDimensionedGeometry self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDimen_NewDimensionedGeometry self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDimen_NewDimensionedGeometry self)

        Memory deallocator for transient classes


        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDimen_NewDimensionedGeometry self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDimen_NewDimensionedGeometry self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDimen_NewDimensionedGeometry self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDimen_NewDimensionedGeometry self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDimen_NewDimensionedGeometry self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDimen_NewDimensionedGeometry self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDimen_NewDimensionedGeometry self)

        Increments the reference counter of this object


        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDimen_NewDimensionedGeometry self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_DecrementRefCounter(self, *args)

Handle_IGESDimen_NewDimensionedGeometry_swigregister = _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_swigregister
Handle_IGESDimen_NewDimensionedGeometry_swigregister(Handle_IGESDimen_NewDimensionedGeometry)

def Handle_IGESDimen_NewDimensionedGeometry_DownCast(thing):
    return _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_DownCast(thing)
Handle_IGESDimen_NewDimensionedGeometry_DownCast = _IGESDimen.Handle_IGESDimen_NewDimensionedGeometry_DownCast

class Handle_IGESDimen_GeneralSymbol(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDimen_GeneralSymbol self)

        Nullify the handle


        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDimen_GeneralSymbol self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDimen_GeneralSymbol self, IGESDimen_GeneralSymbol thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDimen_GeneralSymbol self, Handle_IGESDimen_GeneralSymbol theHandle) -> Handle_IGESDimen_GeneralSymbol
        assign(Handle_IGESDimen_GeneralSymbol self, IGESDimen_GeneralSymbol thePtr) -> Handle_IGESDimen_GeneralSymbol
        assign(Handle_IGESDimen_GeneralSymbol self, Handle_IGESDimen_GeneralSymbol theHandle) -> Handle_IGESDimen_GeneralSymbol

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDimen_GeneralSymbol self) -> IGESDimen_GeneralSymbol

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDimen_GeneralSymbol self) -> IGESDimen_GeneralSymbol

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDimen_GeneralSymbol self) -> IGESDimen_GeneralSymbol

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol___ref__(self, *args)


    def __hash__(self):
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDimen.Handle_IGESDimen_GeneralSymbol___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDimen.new_Handle_IGESDimen_GeneralSymbol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDimen.Handle_IGESDimen_GeneralSymbol_DownCast)
    __swig_destroy__ = _IGESDimen.delete_Handle_IGESDimen_GeneralSymbol

    def Init(self, *args):
        """
        Init(Handle_IGESDimen_GeneralSymbol self, Handle_IGESDimen_GeneralNote aNote, Handle_IGESData_HArray1OfIGESEntity allGeoms, Handle_IGESDimen_HArray1OfLeaderArrow allLeaders)

        This method is used to set the fields of the class
        GeneralSymbol
        - aNote      : General Note, null for form 0
        - allGeoms   : Geometric Entities
        - allLeaders : Leader Arrows

        :type aNote: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote
        :type allGeoms: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity
        :type allLeaders: OCC.wrapper.IGESDimen.Handle_IGESDimen_HArray1OfLeaderArrow

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_Init(self, *args)


    def SetFormNumber(self, *args):
        """
        SetFormNumber(Handle_IGESDimen_GeneralSymbol self, Standard_Integer const form)

        Changes FormNumber (indicates the Nature of the Symbole)
        Error if not in ranges [0-3] or [> 5000]

        :type form: int

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_SetFormNumber(self, *args)


    def HasNote(self, *args):
        """
        HasNote(Handle_IGESDimen_GeneralSymbol self) -> Standard_Boolean

        returns True if there is associated General Note Entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_HasNote(self, *args)


    def Note(self, *args):
        """
        Note(Handle_IGESDimen_GeneralSymbol self) -> Handle_IGESDimen_GeneralNote

        returns Null handle for form 0 only

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_Note(self, *args)


    def NbGeomEntities(self, *args):
        """
        NbGeomEntities(Handle_IGESDimen_GeneralSymbol self) -> Standard_Integer

        returns number of Geometry Entities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_NbGeomEntities(self, *args)


    def GeomEntity(self, *args):
        """
        GeomEntity(Handle_IGESDimen_GeneralSymbol self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns the Index'th Geometry Entity
        raises exception if Index <= 0 or Index > NbGeomEntities()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_GeomEntity(self, *args)


    def NbLeaders(self, *args):
        """
        NbLeaders(Handle_IGESDimen_GeneralSymbol self) -> Standard_Integer

        returns number of Leaders or zero if not specified

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_NbLeaders(self, *args)


    def LeaderArrow(self, *args):
        """
        LeaderArrow(Handle_IGESDimen_GeneralSymbol self, Standard_Integer const Index) -> Handle_IGESDimen_LeaderArrow

        returns the Index'th Leader Arrow
        raises exception if Index <= 0 or Index > NbLeaders()

        :type Index: int
        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_LeaderArrow(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDimen_GeneralSymbol self) -> char const *

        :rtype: const char *

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_GeneralSymbol_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_GeneralSymbol_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDimen_GeneralSymbol self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDimen_GeneralSymbol self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDimen_GeneralSymbol self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDimen_GeneralSymbol self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDimen_GeneralSymbol self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDimen_GeneralSymbol self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDimen_GeneralSymbol self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDimen_GeneralSymbol self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDimen_GeneralSymbol self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDimen_GeneralSymbol self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDimen_GeneralSymbol self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDimen_GeneralSymbol self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDimen_GeneralSymbol self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDimen_GeneralSymbol self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDimen_GeneralSymbol self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDimen_GeneralSymbol self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDimen_GeneralSymbol self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDimen_GeneralSymbol self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDimen_GeneralSymbol self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDimen_GeneralSymbol self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDimen_GeneralSymbol self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDimen_GeneralSymbol self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDimen_GeneralSymbol self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDimen_GeneralSymbol self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDimen_GeneralSymbol self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDimen_GeneralSymbol self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDimen_GeneralSymbol self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDimen_GeneralSymbol self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDimen_GeneralSymbol self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDimen_GeneralSymbol self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDimen_GeneralSymbol self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDimen_GeneralSymbol self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDimen_GeneralSymbol self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDimen_GeneralSymbol self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDimen_GeneralSymbol self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDimen_GeneralSymbol self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDimen_GeneralSymbol self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDimen_GeneralSymbol self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDimen_GeneralSymbol self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDimen_GeneralSymbol self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDimen_GeneralSymbol self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDimen_GeneralSymbol self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDimen_GeneralSymbol self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDimen_GeneralSymbol self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDimen_GeneralSymbol self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDimen_GeneralSymbol self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDimen_GeneralSymbol self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDimen_GeneralSymbol self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDimen_GeneralSymbol self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDimen_GeneralSymbol self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDimen_GeneralSymbol self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDimen_GeneralSymbol self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDimen_GeneralSymbol self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDimen_GeneralSymbol self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDimen_GeneralSymbol self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDimen_GeneralSymbol self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDimen_GeneralSymbol self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDimen_GeneralSymbol self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDimen_GeneralSymbol self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDimen_GeneralSymbol self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDimen_GeneralSymbol self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDimen_GeneralSymbol self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDimen_GeneralSymbol self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDimen_GeneralSymbol self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDimen_GeneralSymbol self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDimen_GeneralSymbol self)

        Memory deallocator for transient classes


        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDimen_GeneralSymbol self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDimen_GeneralSymbol self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDimen_GeneralSymbol self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDimen_GeneralSymbol self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDimen_GeneralSymbol self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDimen_GeneralSymbol self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDimen_GeneralSymbol self)

        Increments the reference counter of this object


        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDimen_GeneralSymbol self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralSymbol_DecrementRefCounter(self, *args)

Handle_IGESDimen_GeneralSymbol_swigregister = _IGESDimen.Handle_IGESDimen_GeneralSymbol_swigregister
Handle_IGESDimen_GeneralSymbol_swigregister(Handle_IGESDimen_GeneralSymbol)

def Handle_IGESDimen_GeneralSymbol_DownCast(thing):
    return _IGESDimen.Handle_IGESDimen_GeneralSymbol_DownCast(thing)
Handle_IGESDimen_GeneralSymbol_DownCast = _IGESDimen.Handle_IGESDimen_GeneralSymbol_DownCast

class IGESDimen_ToolGeneralSymbol(object):
    """
    Tool to work on a GeneralSymbol. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDimen_ToolGeneralSymbol self) -> IGESDimen_ToolGeneralSymbol

        Returns a ToolGeneralSymbol, ready to work


        """
        this = _IGESDimen.new_IGESDimen_ToolGeneralSymbol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDimen_ToolGeneralSymbol self, Handle_IGESDimen_GeneralSymbol ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralSymbol
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDimen.IGESDimen_ToolGeneralSymbol_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDimen_ToolGeneralSymbol self, Handle_IGESDimen_GeneralSymbol ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralSymbol
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDimen.IGESDimen_ToolGeneralSymbol_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDimen_ToolGeneralSymbol self, Handle_IGESDimen_GeneralSymbol ent, Interface_EntityIterator iter)

        Lists the Entities shared by a GeneralSymbol <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralSymbol
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.IGESDimen_ToolGeneralSymbol_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDimen_ToolGeneralSymbol self, Handle_IGESDimen_GeneralSymbol ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralSymbol
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDimen.IGESDimen_ToolGeneralSymbol_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDimen_ToolGeneralSymbol self, Handle_IGESDimen_GeneralSymbol ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralSymbol
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDimen.IGESDimen_ToolGeneralSymbol_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDimen_ToolGeneralSymbol self, Handle_IGESDimen_GeneralSymbol entfrom, Handle_IGESDimen_GeneralSymbol entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralSymbol
        :type entto: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralSymbol
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDimen.IGESDimen_ToolGeneralSymbol_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDimen_ToolGeneralSymbol self, Handle_IGESDimen_GeneralSymbol ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralSymbol
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDimen.IGESDimen_ToolGeneralSymbol_OwnDump(self, *args)

    __swig_destroy__ = _IGESDimen.delete_IGESDimen_ToolGeneralSymbol
IGESDimen_ToolGeneralSymbol_swigregister = _IGESDimen.IGESDimen_ToolGeneralSymbol_swigregister
IGESDimen_ToolGeneralSymbol_swigregister(IGESDimen_ToolGeneralSymbol)

class IGESDimen_Protocol(IGESData.IGESData_Protocol):
    """Description of Protocol for IGESDimen"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDimen_Protocol
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDimen_Protocol(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDimen_Protocol self) -> IGESDimen_Protocol

        Description of Protocol for IGESDimen
        """
        this = _IGESDimen.new_IGESDimen_Protocol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NbResources(self, *args):
        """
        NbResources(IGESDimen_Protocol self) -> Standard_Integer

        Gives the count of Resource Protocol. Here, two
        (Protocols from IGESGraph and IGESGeom)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_Protocol_NbResources(self, *args)


    def Resource(self, *args):
        """
        Resource(IGESDimen_Protocol self, Standard_Integer const num) -> Handle_Interface_Protocol

        Returns a Resource, given a rank.

        :type num: int
        :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESDimen.IGESDimen_Protocol_Resource(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(IGESDimen_Protocol self, Handle_Standard_Type atype) -> Standard_Integer

        Returns a Case Number, specific of each recognized Type
        This Case Number is then used in Libraries : the various
        Modules attached to this class of Protocol must use them
        in accordance (for a given value of TypeNumber, they must
        consider the same Type as the Protocol defines)

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_Protocol_TypeNumber(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDimen.IGESDimen_Protocol_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDimen.IGESDimen_Protocol_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.IGESDimen_Protocol_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDimen.delete_IGESDimen_Protocol
IGESDimen_Protocol_swigregister = _IGESDimen.IGESDimen_Protocol_swigregister
IGESDimen_Protocol_swigregister(IGESDimen_Protocol)

def IGESDimen_Protocol_get_type_name(*args):
    """
    IGESDimen_Protocol_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDimen.IGESDimen_Protocol_get_type_name(*args)

def IGESDimen_Protocol_get_type_descriptor(*args):
    """
    IGESDimen_Protocol_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDimen.IGESDimen_Protocol_get_type_descriptor(*args)

class IGESDimen_ToolCurveDimension(object):
    """
    Tool to work on a CurveDimension. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDimen_ToolCurveDimension self) -> IGESDimen_ToolCurveDimension

        Returns a ToolCurveDimension, ready to work


        """
        this = _IGESDimen.new_IGESDimen_ToolCurveDimension(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDimen_ToolCurveDimension self, Handle_IGESDimen_CurveDimension ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_CurveDimension
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDimen.IGESDimen_ToolCurveDimension_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDimen_ToolCurveDimension self, Handle_IGESDimen_CurveDimension ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_CurveDimension
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDimen.IGESDimen_ToolCurveDimension_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDimen_ToolCurveDimension self, Handle_IGESDimen_CurveDimension ent, Interface_EntityIterator iter)

        Lists the Entities shared by a CurveDimension <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_CurveDimension
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.IGESDimen_ToolCurveDimension_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDimen_ToolCurveDimension self, Handle_IGESDimen_CurveDimension ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_CurveDimension
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDimen.IGESDimen_ToolCurveDimension_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDimen_ToolCurveDimension self, Handle_IGESDimen_CurveDimension ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_CurveDimension
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDimen.IGESDimen_ToolCurveDimension_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDimen_ToolCurveDimension self, Handle_IGESDimen_CurveDimension entfrom, Handle_IGESDimen_CurveDimension entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDimen.Handle_IGESDimen_CurveDimension
        :type entto: OCC.wrapper.IGESDimen.Handle_IGESDimen_CurveDimension
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDimen.IGESDimen_ToolCurveDimension_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDimen_ToolCurveDimension self, Handle_IGESDimen_CurveDimension ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_CurveDimension
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDimen.IGESDimen_ToolCurveDimension_OwnDump(self, *args)

    __swig_destroy__ = _IGESDimen.delete_IGESDimen_ToolCurveDimension
IGESDimen_ToolCurveDimension_swigregister = _IGESDimen.IGESDimen_ToolCurveDimension_swigregister
IGESDimen_ToolCurveDimension_swigregister(IGESDimen_ToolCurveDimension)

class IGESDimen_DimensionUnits(IGESData.IGESData_IGESEntity):
    """
    defines Dimension Units, Type <406>, Form <28>
    in package IGESDimen
    Describes the units and formatting details of the
    nominal value of a dimension.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDimen_DimensionUnits
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDimen_DimensionUnits(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDimen_DimensionUnits self) -> IGESDimen_DimensionUnits

        defines Dimension Units, Type <406>, Form <28>
        in package IGESDimen
        Describes the units and formatting details of the
        nominal value of a dimension.
        """
        this = _IGESDimen.new_IGESDimen_DimensionUnits(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDimen_DimensionUnits self, Standard_Integer const nbPropVal, Standard_Integer const aSecondPos, Standard_Integer const aUnitsInd, Standard_Integer const aCharSet, Handle_TCollection_HAsciiString aFormat, Standard_Integer const aFracFlag, Standard_Integer const aPrecision)

        This method is used to set the fields of the class
        DimensionUnits
        - nbPropVal  : Number of property values, always = 6
        - aSecondPos : Secondary Dimension Position
        0 = This is the main text
        1 = Before primary dimension
        2 = After primary dimension
        3 = Above primary dimension
        4 = Below primary dimension
        - aUnitsInd  : Units Indicator
        - aCharSet   : Character Set used
        - aFormat    : Format HAsciiString
        1 = Standard ASCII
        1001 = Symbol Font 1
        1002 = Symbol Font 2
        1003 = Drafting Font
        - aFracFlag  : Fraction Flag
        0 = Display values as decimal numbers
        1 = Display values as fractions
        - aPrecision : Precision Value

        :type nbPropVal: int
        :type aSecondPos: int
        :type aUnitsInd: int
        :type aCharSet: int
        :type aFormat: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aFracFlag: int
        :type aPrecision: int

        """
        return _IGESDimen.IGESDimen_DimensionUnits_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(IGESDimen_DimensionUnits self) -> Standard_Integer

        returns the number of property values

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_DimensionUnits_NbPropertyValues(self, *args)


    def SecondaryDimenPosition(self, *args):
        """
        SecondaryDimenPosition(IGESDimen_DimensionUnits self) -> Standard_Integer

        returns position of secondary dimension w.r.t. primary dimension

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_DimensionUnits_SecondaryDimenPosition(self, *args)


    def UnitsIndicator(self, *args):
        """
        UnitsIndicator(IGESDimen_DimensionUnits self) -> Standard_Integer

        returns the units indicator

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_DimensionUnits_UnitsIndicator(self, *args)


    def CharacterSet(self, *args):
        """
        CharacterSet(IGESDimen_DimensionUnits self) -> Standard_Integer

        returns the character set interpretation

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_DimensionUnits_CharacterSet(self, *args)


    def FormatString(self, *args):
        """
        FormatString(IGESDimen_DimensionUnits self) -> Handle_TCollection_HAsciiString

        returns the string used in formatting value

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.IGESDimen_DimensionUnits_FormatString(self, *args)


    def FractionFlag(self, *args):
        """
        FractionFlag(IGESDimen_DimensionUnits self) -> Standard_Integer

        returns the fraction flag

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_DimensionUnits_FractionFlag(self, *args)


    def PrecisionOrDenominator(self, *args):
        """
        PrecisionOrDenominator(IGESDimen_DimensionUnits self) -> Standard_Integer

        returns the precision/denominator
        number of decimal places when FractionFlag() = 0
        denominator of fraction when FractionFlag() = 1

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_DimensionUnits_PrecisionOrDenominator(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDimen.IGESDimen_DimensionUnits_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDimen.IGESDimen_DimensionUnits_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.IGESDimen_DimensionUnits_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDimen.delete_IGESDimen_DimensionUnits
IGESDimen_DimensionUnits_swigregister = _IGESDimen.IGESDimen_DimensionUnits_swigregister
IGESDimen_DimensionUnits_swigregister(IGESDimen_DimensionUnits)

def IGESDimen_DimensionUnits_get_type_name(*args):
    """
    IGESDimen_DimensionUnits_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDimen.IGESDimen_DimensionUnits_get_type_name(*args)

def IGESDimen_DimensionUnits_get_type_descriptor(*args):
    """
    IGESDimen_DimensionUnits_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDimen.IGESDimen_DimensionUnits_get_type_descriptor(*args)

class IGESDimen_ToolLeaderArrow(object):
    """
    Tool to work on a LeaderArrow. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDimen_ToolLeaderArrow self) -> IGESDimen_ToolLeaderArrow

        Returns a ToolLeaderArrow, ready to work


        """
        this = _IGESDimen.new_IGESDimen_ToolLeaderArrow(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDimen_ToolLeaderArrow self, Handle_IGESDimen_LeaderArrow ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDimen.IGESDimen_ToolLeaderArrow_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDimen_ToolLeaderArrow self, Handle_IGESDimen_LeaderArrow ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDimen.IGESDimen_ToolLeaderArrow_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDimen_ToolLeaderArrow self, Handle_IGESDimen_LeaderArrow ent, Interface_EntityIterator iter)

        Lists the Entities shared by a LeaderArrow <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.IGESDimen_ToolLeaderArrow_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDimen_ToolLeaderArrow self, Handle_IGESDimen_LeaderArrow ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDimen.IGESDimen_ToolLeaderArrow_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDimen_ToolLeaderArrow self, Handle_IGESDimen_LeaderArrow ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDimen.IGESDimen_ToolLeaderArrow_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDimen_ToolLeaderArrow self, Handle_IGESDimen_LeaderArrow entfrom, Handle_IGESDimen_LeaderArrow entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow
        :type entto: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDimen.IGESDimen_ToolLeaderArrow_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDimen_ToolLeaderArrow self, Handle_IGESDimen_LeaderArrow ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDimen.IGESDimen_ToolLeaderArrow_OwnDump(self, *args)

    __swig_destroy__ = _IGESDimen.delete_IGESDimen_ToolLeaderArrow
IGESDimen_ToolLeaderArrow_swigregister = _IGESDimen.IGESDimen_ToolLeaderArrow_swigregister
IGESDimen_ToolLeaderArrow_swigregister(IGESDimen_ToolLeaderArrow)

class Handle_IGESDimen_DimensionUnits(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDimen_DimensionUnits self)

        Nullify the handle


        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDimen_DimensionUnits self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDimen_DimensionUnits self, IGESDimen_DimensionUnits thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDimen_DimensionUnits self, Handle_IGESDimen_DimensionUnits theHandle) -> Handle_IGESDimen_DimensionUnits
        assign(Handle_IGESDimen_DimensionUnits self, IGESDimen_DimensionUnits thePtr) -> Handle_IGESDimen_DimensionUnits
        assign(Handle_IGESDimen_DimensionUnits self, Handle_IGESDimen_DimensionUnits theHandle) -> Handle_IGESDimen_DimensionUnits

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDimen_DimensionUnits self) -> IGESDimen_DimensionUnits

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDimen_DimensionUnits self) -> IGESDimen_DimensionUnits

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDimen_DimensionUnits self) -> IGESDimen_DimensionUnits

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits___ref__(self, *args)


    def __hash__(self):
        return _IGESDimen.Handle_IGESDimen_DimensionUnits___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDimen.Handle_IGESDimen_DimensionUnits___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDimen.new_Handle_IGESDimen_DimensionUnits(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDimen.Handle_IGESDimen_DimensionUnits_DownCast)
    __swig_destroy__ = _IGESDimen.delete_Handle_IGESDimen_DimensionUnits

    def Init(self, *args):
        """
        Init(Handle_IGESDimen_DimensionUnits self, Standard_Integer const nbPropVal, Standard_Integer const aSecondPos, Standard_Integer const aUnitsInd, Standard_Integer const aCharSet, Handle_TCollection_HAsciiString aFormat, Standard_Integer const aFracFlag, Standard_Integer const aPrecision)

        This method is used to set the fields of the class
        DimensionUnits
        - nbPropVal  : Number of property values, always = 6
        - aSecondPos : Secondary Dimension Position
        0 = This is the main text
        1 = Before primary dimension
        2 = After primary dimension
        3 = Above primary dimension
        4 = Below primary dimension
        - aUnitsInd  : Units Indicator
        - aCharSet   : Character Set used
        - aFormat    : Format HAsciiString
        1 = Standard ASCII
        1001 = Symbol Font 1
        1002 = Symbol Font 2
        1003 = Drafting Font
        - aFracFlag  : Fraction Flag
        0 = Display values as decimal numbers
        1 = Display values as fractions
        - aPrecision : Precision Value

        :type nbPropVal: int
        :type aSecondPos: int
        :type aUnitsInd: int
        :type aCharSet: int
        :type aFormat: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aFracFlag: int
        :type aPrecision: int

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(Handle_IGESDimen_DimensionUnits self) -> Standard_Integer

        returns the number of property values

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_NbPropertyValues(self, *args)


    def SecondaryDimenPosition(self, *args):
        """
        SecondaryDimenPosition(Handle_IGESDimen_DimensionUnits self) -> Standard_Integer

        returns position of secondary dimension w.r.t. primary dimension

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_SecondaryDimenPosition(self, *args)


    def UnitsIndicator(self, *args):
        """
        UnitsIndicator(Handle_IGESDimen_DimensionUnits self) -> Standard_Integer

        returns the units indicator

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_UnitsIndicator(self, *args)


    def CharacterSet(self, *args):
        """
        CharacterSet(Handle_IGESDimen_DimensionUnits self) -> Standard_Integer

        returns the character set interpretation

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_CharacterSet(self, *args)


    def FormatString(self, *args):
        """
        FormatString(Handle_IGESDimen_DimensionUnits self) -> Handle_TCollection_HAsciiString

        returns the string used in formatting value

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_FormatString(self, *args)


    def FractionFlag(self, *args):
        """
        FractionFlag(Handle_IGESDimen_DimensionUnits self) -> Standard_Integer

        returns the fraction flag

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_FractionFlag(self, *args)


    def PrecisionOrDenominator(self, *args):
        """
        PrecisionOrDenominator(Handle_IGESDimen_DimensionUnits self) -> Standard_Integer

        returns the precision/denominator
        number of decimal places when FractionFlag() = 0
        denominator of fraction when FractionFlag() = 1

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_PrecisionOrDenominator(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDimen_DimensionUnits self) -> char const *

        :rtype: const char *

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_DimensionUnits_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_DimensionUnits_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDimen_DimensionUnits self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDimen_DimensionUnits self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDimen_DimensionUnits self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDimen_DimensionUnits self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDimen_DimensionUnits self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDimen_DimensionUnits self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDimen_DimensionUnits self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDimen_DimensionUnits self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDimen_DimensionUnits self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDimen_DimensionUnits self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDimen_DimensionUnits self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDimen_DimensionUnits self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDimen_DimensionUnits self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDimen_DimensionUnits self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDimen_DimensionUnits self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDimen_DimensionUnits self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDimen_DimensionUnits self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDimen_DimensionUnits self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDimen_DimensionUnits self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDimen_DimensionUnits self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDimen_DimensionUnits self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDimen_DimensionUnits self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDimen_DimensionUnits self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDimen_DimensionUnits self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDimen_DimensionUnits self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDimen_DimensionUnits self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDimen_DimensionUnits self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDimen_DimensionUnits self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDimen_DimensionUnits self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDimen_DimensionUnits self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDimen_DimensionUnits self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDimen_DimensionUnits self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDimen_DimensionUnits self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDimen_DimensionUnits self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDimen_DimensionUnits self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDimen_DimensionUnits self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDimen_DimensionUnits self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDimen_DimensionUnits self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDimen_DimensionUnits self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDimen_DimensionUnits self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDimen_DimensionUnits self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDimen_DimensionUnits self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDimen_DimensionUnits self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDimen_DimensionUnits self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDimen_DimensionUnits self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDimen_DimensionUnits self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDimen_DimensionUnits self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDimen_DimensionUnits self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDimen_DimensionUnits self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDimen_DimensionUnits self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDimen_DimensionUnits self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDimen_DimensionUnits self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDimen_DimensionUnits self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDimen_DimensionUnits self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDimen_DimensionUnits self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDimen_DimensionUnits self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDimen_DimensionUnits self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDimen_DimensionUnits self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDimen_DimensionUnits self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDimen_DimensionUnits self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDimen_DimensionUnits self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDimen_DimensionUnits self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDimen_DimensionUnits self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDimen_DimensionUnits self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDimen_DimensionUnits self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDimen_DimensionUnits self)

        Memory deallocator for transient classes


        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDimen_DimensionUnits self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDimen_DimensionUnits self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDimen_DimensionUnits self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDimen_DimensionUnits self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDimen_DimensionUnits self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDimen_DimensionUnits self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDimen_DimensionUnits self)

        Increments the reference counter of this object


        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDimen_DimensionUnits self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionUnits_DecrementRefCounter(self, *args)

Handle_IGESDimen_DimensionUnits_swigregister = _IGESDimen.Handle_IGESDimen_DimensionUnits_swigregister
Handle_IGESDimen_DimensionUnits_swigregister(Handle_IGESDimen_DimensionUnits)

def Handle_IGESDimen_DimensionUnits_DownCast(thing):
    return _IGESDimen.Handle_IGESDimen_DimensionUnits_DownCast(thing)
Handle_IGESDimen_DimensionUnits_DownCast = _IGESDimen.Handle_IGESDimen_DimensionUnits_DownCast

class Handle_IGESDimen_GeneralNote(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDimen_GeneralNote self)

        Nullify the handle


        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDimen_GeneralNote self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDimen_GeneralNote self, IGESDimen_GeneralNote thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDimen_GeneralNote self, Handle_IGESDimen_GeneralNote theHandle) -> Handle_IGESDimen_GeneralNote
        assign(Handle_IGESDimen_GeneralNote self, IGESDimen_GeneralNote thePtr) -> Handle_IGESDimen_GeneralNote
        assign(Handle_IGESDimen_GeneralNote self, Handle_IGESDimen_GeneralNote theHandle) -> Handle_IGESDimen_GeneralNote

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDimen_GeneralNote self) -> IGESDimen_GeneralNote

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDimen_GeneralNote self) -> IGESDimen_GeneralNote

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDimen_GeneralNote self) -> IGESDimen_GeneralNote

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote___ref__(self, *args)


    def __hash__(self):
        return _IGESDimen.Handle_IGESDimen_GeneralNote___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDimen.Handle_IGESDimen_GeneralNote___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDimen.new_Handle_IGESDimen_GeneralNote(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDimen.Handle_IGESDimen_GeneralNote_DownCast)
    __swig_destroy__ = _IGESDimen.delete_Handle_IGESDimen_GeneralNote

    def Init(self, *args):
        """
        Init(Handle_IGESDimen_GeneralNote self, Handle_TColStd_HArray1OfInteger nbChars, Handle_TColStd_HArray1OfReal widths, Handle_TColStd_HArray1OfReal heights, Handle_TColStd_HArray1OfInteger fontCodes, Handle_IGESGraph_HArray1OfTextFontDef fonts, Handle_TColStd_HArray1OfReal slants, Handle_TColStd_HArray1OfReal rotations, Handle_TColStd_HArray1OfInteger mirrorFlags, Handle_TColStd_HArray1OfInteger rotFlags, Handle_TColgp_HArray1OfXYZ start, Handle_Interface_HArray1OfHAsciiString texts)

        This method is used to set the fields of the class
        GeneralNote
        - nNbChars      : number of chars strings
        - widths        : Box widths
        - heights       : Box heights
        - fontCodes     : Font codes, default = 1
        - fonts         : Text Font Definition Entities
        - slants        : Slant angles in radians
        - rotations     : Rotation angles in radians
        - mirrorFlags   : Mirror flags
        - rotFlags      : Rotation internal text flags
        - start         : Text start points
        - texts         : Text strings
        raises exception if there is mismatch between the various
        Array Lengths.

        :type nbChars: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type widths: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type heights: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type fontCodes: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type fonts: OCC.wrapper.IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef
        :type slants: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type rotations: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type mirrorFlags: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type rotFlags: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type start: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfXYZ
        :type texts: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_Init(self, *args)


    def SetFormNumber(self, *args):
        """
        SetFormNumber(Handle_IGESDimen_GeneralNote self, Standard_Integer const form)

        Changes FormNumber (indicates Graphical Representation)
        Error if not in ranges [0-8] or [100-102] or 105

        :type form: int

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_SetFormNumber(self, *args)


    def NbStrings(self, *args):
        """
        NbStrings(Handle_IGESDimen_GeneralNote self) -> Standard_Integer

        returns number of text strings in General Note

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_NbStrings(self, *args)


    def NbCharacters(self, *args):
        """
        NbCharacters(Handle_IGESDimen_GeneralNote self, Standard_Integer const Index) -> Standard_Integer

        returns number of characters of string or zero
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_NbCharacters(self, *args)


    def BoxWidth(self, *args):
        """
        BoxWidth(Handle_IGESDimen_GeneralNote self, Standard_Integer const Index) -> Standard_Real

        returns Box width of string
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_BoxWidth(self, *args)


    def BoxHeight(self, *args):
        """
        BoxHeight(Handle_IGESDimen_GeneralNote self, Standard_Integer const Index) -> Standard_Real

        returns Box height of string
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_BoxHeight(self, *args)


    def IsFontEntity(self, *args):
        """
        IsFontEntity(Handle_IGESDimen_GeneralNote self, Standard_Integer const Index) -> Standard_Boolean

        returns False if Value, True if Entity
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_IsFontEntity(self, *args)


    def FontCode(self, *args):
        """
        FontCode(Handle_IGESDimen_GeneralNote self, Standard_Integer const Index) -> Standard_Integer

        returns Font code (default = 1) of string
        returns 0 if IsFontEntity () is True
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_FontCode(self, *args)


    def FontEntity(self, *args):
        """
        FontEntity(Handle_IGESDimen_GeneralNote self, Standard_Integer const Index) -> Handle_IGESGraph_TextFontDef

        returns Text Font Definition Entity of string
        returns a Null Handle if IsFontEntity () returns False
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextFontDef

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_FontEntity(self, *args)


    def SlantAngle(self, *args):
        """
        SlantAngle(Handle_IGESDimen_GeneralNote self, Standard_Integer const Index) -> Standard_Real

        returns Slant angle of string in radians
        default value = PI/2
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_SlantAngle(self, *args)


    def RotationAngle(self, *args):
        """
        RotationAngle(Handle_IGESDimen_GeneralNote self, Standard_Integer const Index) -> Standard_Real

        returns Rotation angle of string in radians
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_RotationAngle(self, *args)


    def MirrorFlag(self, *args):
        """
        MirrorFlag(Handle_IGESDimen_GeneralNote self, Standard_Integer const Index) -> Standard_Integer

        returns Mirror Flag of string
        0 = no mirroring
        1 = mirror axis is perpendicular to the text base line
        2 = mirror axis is text base line
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_MirrorFlag(self, *args)


    def RotateFlag(self, *args):
        """
        RotateFlag(Handle_IGESDimen_GeneralNote self, Standard_Integer const Index) -> Standard_Integer

        returns Rotate internal text Flag of string
        0 = text horizontal
        1 = text vertical
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_RotateFlag(self, *args)


    def StartPoint(self, *args):
        """
        StartPoint(Handle_IGESDimen_GeneralNote self, Standard_Integer const Index) -> gp_Pnt

        returns text start point of Index'th string
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_StartPoint(self, *args)


    def TransformedStartPoint(self, *args):
        """
        TransformedStartPoint(Handle_IGESDimen_GeneralNote self, Standard_Integer const Index) -> gp_Pnt

        returns text start point of Index'th string after Transformation
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_TransformedStartPoint(self, *args)


    def ZDepthStartPoint(self, *args):
        """
        ZDepthStartPoint(Handle_IGESDimen_GeneralNote self, Standard_Integer const Index) -> Standard_Real

        returns distance from Start Point plane of string
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_ZDepthStartPoint(self, *args)


    def Text(self, *args):
        """
        Text(Handle_IGESDimen_GeneralNote self, Standard_Integer const Index) -> Handle_TCollection_HAsciiString

        returns text string
        raises exception if Index <= 0 or Index > NbStrings()

        :type Index: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_Text(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDimen_GeneralNote self) -> char const *

        :rtype: const char *

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_GeneralNote_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_GeneralNote_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDimen_GeneralNote self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDimen_GeneralNote self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDimen_GeneralNote self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDimen_GeneralNote self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDimen_GeneralNote self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDimen_GeneralNote self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDimen_GeneralNote self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDimen_GeneralNote self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDimen_GeneralNote self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDimen_GeneralNote self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDimen_GeneralNote self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDimen_GeneralNote self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDimen_GeneralNote self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDimen_GeneralNote self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDimen_GeneralNote self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDimen_GeneralNote self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDimen_GeneralNote self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDimen_GeneralNote self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDimen_GeneralNote self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDimen_GeneralNote self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDimen_GeneralNote self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDimen_GeneralNote self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDimen_GeneralNote self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDimen_GeneralNote self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDimen_GeneralNote self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDimen_GeneralNote self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDimen_GeneralNote self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDimen_GeneralNote self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDimen_GeneralNote self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDimen_GeneralNote self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDimen_GeneralNote self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDimen_GeneralNote self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDimen_GeneralNote self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDimen_GeneralNote self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDimen_GeneralNote self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDimen_GeneralNote self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDimen_GeneralNote self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDimen_GeneralNote self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDimen_GeneralNote self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDimen_GeneralNote self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDimen_GeneralNote self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDimen_GeneralNote self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDimen_GeneralNote self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDimen_GeneralNote self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDimen_GeneralNote self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDimen_GeneralNote self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDimen_GeneralNote self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDimen_GeneralNote self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDimen_GeneralNote self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDimen_GeneralNote self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDimen_GeneralNote self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDimen_GeneralNote self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDimen_GeneralNote self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDimen_GeneralNote self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDimen_GeneralNote self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDimen_GeneralNote self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDimen_GeneralNote self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDimen_GeneralNote self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDimen_GeneralNote self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDimen_GeneralNote self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDimen_GeneralNote self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDimen_GeneralNote self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDimen_GeneralNote self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDimen_GeneralNote self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDimen_GeneralNote self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDimen_GeneralNote self)

        Memory deallocator for transient classes


        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDimen_GeneralNote self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDimen_GeneralNote self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDimen_GeneralNote self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDimen_GeneralNote self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDimen_GeneralNote self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDimen_GeneralNote self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDimen_GeneralNote self)

        Increments the reference counter of this object


        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDimen_GeneralNote self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralNote_DecrementRefCounter(self, *args)

Handle_IGESDimen_GeneralNote_swigregister = _IGESDimen.Handle_IGESDimen_GeneralNote_swigregister
Handle_IGESDimen_GeneralNote_swigregister(Handle_IGESDimen_GeneralNote)

def Handle_IGESDimen_GeneralNote_DownCast(thing):
    return _IGESDimen.Handle_IGESDimen_GeneralNote_DownCast(thing)
Handle_IGESDimen_GeneralNote_DownCast = _IGESDimen.Handle_IGESDimen_GeneralNote_DownCast

class Handle_IGESDimen_DimensionedGeometry(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDimen_DimensionedGeometry self)

        Nullify the handle


        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDimen_DimensionedGeometry self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDimen_DimensionedGeometry self, IGESDimen_DimensionedGeometry thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDimen_DimensionedGeometry self, Handle_IGESDimen_DimensionedGeometry theHandle) -> Handle_IGESDimen_DimensionedGeometry
        assign(Handle_IGESDimen_DimensionedGeometry self, IGESDimen_DimensionedGeometry thePtr) -> Handle_IGESDimen_DimensionedGeometry
        assign(Handle_IGESDimen_DimensionedGeometry self, Handle_IGESDimen_DimensionedGeometry theHandle) -> Handle_IGESDimen_DimensionedGeometry

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDimen_DimensionedGeometry self) -> IGESDimen_DimensionedGeometry

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDimen_DimensionedGeometry self) -> IGESDimen_DimensionedGeometry

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDimen_DimensionedGeometry self) -> IGESDimen_DimensionedGeometry

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry___ref__(self, *args)


    def __hash__(self):
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDimen.Handle_IGESDimen_DimensionedGeometry___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDimen.new_Handle_IGESDimen_DimensionedGeometry(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDimen.Handle_IGESDimen_DimensionedGeometry_DownCast)
    __swig_destroy__ = _IGESDimen.delete_Handle_IGESDimen_DimensionedGeometry

    def Init(self, *args):
        """
        Init(Handle_IGESDimen_DimensionedGeometry self, Standard_Integer const nbDims, Handle_IGESData_IGESEntity aDimension, Handle_IGESData_HArray1OfIGESEntity entities)

        :type nbDims: int
        :type aDimension: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type entities: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_Init(self, *args)


    def NbDimensions(self, *args):
        """
        NbDimensions(Handle_IGESDimen_DimensionedGeometry self) -> Standard_Integer

        returns the number of dimensions

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_NbDimensions(self, *args)


    def NbGeometryEntities(self, *args):
        """
        NbGeometryEntities(Handle_IGESDimen_DimensionedGeometry self) -> Standard_Integer

        returns the number of associated geometry entities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_NbGeometryEntities(self, *args)


    def DimensionEntity(self, *args):
        """
        DimensionEntity(Handle_IGESDimen_DimensionedGeometry self) -> Handle_IGESData_IGESEntity

        returns the Dimension entity

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_DimensionEntity(self, *args)


    def GeometryEntity(self, *args):
        """
        GeometryEntity(Handle_IGESDimen_DimensionedGeometry self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns the num'th Geometry entity
        raises exception if Index <= 0 or Index > NbGeometryEntities()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_GeometryEntity(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDimen_DimensionedGeometry self) -> char const *

        :rtype: const char *

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_DimensionedGeometry_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_DimensionedGeometry_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDimen_DimensionedGeometry self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDimen_DimensionedGeometry self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDimen_DimensionedGeometry self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDimen_DimensionedGeometry self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDimen_DimensionedGeometry self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDimen_DimensionedGeometry self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDimen_DimensionedGeometry self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDimen_DimensionedGeometry self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDimen_DimensionedGeometry self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDimen_DimensionedGeometry self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDimen_DimensionedGeometry self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDimen_DimensionedGeometry self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDimen_DimensionedGeometry self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDimen_DimensionedGeometry self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDimen_DimensionedGeometry self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDimen_DimensionedGeometry self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDimen_DimensionedGeometry self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDimen_DimensionedGeometry self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDimen_DimensionedGeometry self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDimen_DimensionedGeometry self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDimen_DimensionedGeometry self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDimen_DimensionedGeometry self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDimen_DimensionedGeometry self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDimen_DimensionedGeometry self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDimen_DimensionedGeometry self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDimen_DimensionedGeometry self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDimen_DimensionedGeometry self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDimen_DimensionedGeometry self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDimen_DimensionedGeometry self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDimen_DimensionedGeometry self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDimen_DimensionedGeometry self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDimen_DimensionedGeometry self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDimen_DimensionedGeometry self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDimen_DimensionedGeometry self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDimen_DimensionedGeometry self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDimen_DimensionedGeometry self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDimen_DimensionedGeometry self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDimen_DimensionedGeometry self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDimen_DimensionedGeometry self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDimen_DimensionedGeometry self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDimen_DimensionedGeometry self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDimen_DimensionedGeometry self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDimen_DimensionedGeometry self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDimen_DimensionedGeometry self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDimen_DimensionedGeometry self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDimen_DimensionedGeometry self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDimen_DimensionedGeometry self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDimen_DimensionedGeometry self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDimen_DimensionedGeometry self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDimen_DimensionedGeometry self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDimen_DimensionedGeometry self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDimen_DimensionedGeometry self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDimen_DimensionedGeometry self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDimen_DimensionedGeometry self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDimen_DimensionedGeometry self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDimen_DimensionedGeometry self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDimen_DimensionedGeometry self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDimen_DimensionedGeometry self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDimen_DimensionedGeometry self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDimen_DimensionedGeometry self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDimen_DimensionedGeometry self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDimen_DimensionedGeometry self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDimen_DimensionedGeometry self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDimen_DimensionedGeometry self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDimen_DimensionedGeometry self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDimen_DimensionedGeometry self)

        Memory deallocator for transient classes


        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDimen_DimensionedGeometry self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDimen_DimensionedGeometry self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDimen_DimensionedGeometry self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDimen_DimensionedGeometry self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDimen_DimensionedGeometry self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDimen_DimensionedGeometry self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDimen_DimensionedGeometry self)

        Increments the reference counter of this object


        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDimen_DimensionedGeometry self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_DecrementRefCounter(self, *args)

Handle_IGESDimen_DimensionedGeometry_swigregister = _IGESDimen.Handle_IGESDimen_DimensionedGeometry_swigregister
Handle_IGESDimen_DimensionedGeometry_swigregister(Handle_IGESDimen_DimensionedGeometry)

def Handle_IGESDimen_DimensionedGeometry_DownCast(thing):
    return _IGESDimen.Handle_IGESDimen_DimensionedGeometry_DownCast(thing)
Handle_IGESDimen_DimensionedGeometry_DownCast = _IGESDimen.Handle_IGESDimen_DimensionedGeometry_DownCast

class IGESDimen_ToolNewDimensionedGeometry(object):
    """
    Tool to work on a NewDimensionedGeometry. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDimen_ToolNewDimensionedGeometry self) -> IGESDimen_ToolNewDimensionedGeometry

        Returns a ToolNewDimensionedGeometry, ready to work


        """
        this = _IGESDimen.new_IGESDimen_ToolNewDimensionedGeometry(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDimen_ToolNewDimensionedGeometry self, Handle_IGESDimen_NewDimensionedGeometry ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_NewDimensionedGeometry
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDimen.IGESDimen_ToolNewDimensionedGeometry_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDimen_ToolNewDimensionedGeometry self, Handle_IGESDimen_NewDimensionedGeometry ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_NewDimensionedGeometry
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDimen.IGESDimen_ToolNewDimensionedGeometry_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDimen_ToolNewDimensionedGeometry self, Handle_IGESDimen_NewDimensionedGeometry ent, Interface_EntityIterator iter)

        Lists the Entities shared by a NewDimensionedGeometry <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_NewDimensionedGeometry
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.IGESDimen_ToolNewDimensionedGeometry_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESDimen_ToolNewDimensionedGeometry self, Handle_IGESDimen_NewDimensionedGeometry ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a NewDimensionedGeometry
        (NbDimensions forced to 1, Transf Nullified in D.E.)

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_NewDimensionedGeometry
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.IGESDimen_ToolNewDimensionedGeometry_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDimen_ToolNewDimensionedGeometry self, Handle_IGESDimen_NewDimensionedGeometry ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_NewDimensionedGeometry
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDimen.IGESDimen_ToolNewDimensionedGeometry_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDimen_ToolNewDimensionedGeometry self, Handle_IGESDimen_NewDimensionedGeometry ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_NewDimensionedGeometry
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDimen.IGESDimen_ToolNewDimensionedGeometry_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDimen_ToolNewDimensionedGeometry self, Handle_IGESDimen_NewDimensionedGeometry entfrom, Handle_IGESDimen_NewDimensionedGeometry entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDimen.Handle_IGESDimen_NewDimensionedGeometry
        :type entto: OCC.wrapper.IGESDimen.Handle_IGESDimen_NewDimensionedGeometry
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDimen.IGESDimen_ToolNewDimensionedGeometry_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDimen_ToolNewDimensionedGeometry self, Handle_IGESDimen_NewDimensionedGeometry ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_NewDimensionedGeometry
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDimen.IGESDimen_ToolNewDimensionedGeometry_OwnDump(self, *args)

    __swig_destroy__ = _IGESDimen.delete_IGESDimen_ToolNewDimensionedGeometry
IGESDimen_ToolNewDimensionedGeometry_swigregister = _IGESDimen.IGESDimen_ToolNewDimensionedGeometry_swigregister
IGESDimen_ToolNewDimensionedGeometry_swigregister(IGESDimen_ToolNewDimensionedGeometry)

class IGESDimen_Section(IGESData.IGESData_IGESEntity):
    """
    defines Section, Type <106> Form <31-38>
    in package IGESDimen
    Contains information to display sectioned sides
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDimen_Section
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDimen_Section(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDimen_Section self) -> IGESDimen_Section

        defines Section, Type <106> Form <31-38>
        in package IGESDimen
        Contains information to display sectioned sides
        """
        this = _IGESDimen.new_IGESDimen_Section(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDimen_Section self, Standard_Integer const dataType, Standard_Real const aDisp, Handle_TColgp_HArray1OfXY dataPoints)

        This method is used to set the fields of the class
        Section
        - dataType   : Interpretation Flag, always = 1
        - aDisp      : Common z displacement
        - dataPoints : Data points

        :type dataType: int
        :type aDisp: float
        :type dataPoints: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfXY

        """
        return _IGESDimen.IGESDimen_Section_Init(self, *args)


    def SetFormNumber(self, *args):
        """
        SetFormNumber(IGESDimen_Section self, Standard_Integer const form)

        Changes FormNumber (indicates the Type of the Hatches)
        Error if not in range [31-38]

        :type form: int

        """
        return _IGESDimen.IGESDimen_Section_SetFormNumber(self, *args)


    def Datatype(self, *args):
        """
        Datatype(IGESDimen_Section self) -> Standard_Integer

        returns Interpretation Flag, always = 1

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_Section_Datatype(self, *args)


    def NbPoints(self, *args):
        """
        NbPoints(IGESDimen_Section self) -> Standard_Integer

        returns number of Data Points

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_Section_NbPoints(self, *args)


    def ZDisplacement(self, *args):
        """
        ZDisplacement(IGESDimen_Section self) -> Standard_Real

        returns common Z displacement

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_Section_ZDisplacement(self, *args)


    def Point(self, *args):
        """
        Point(IGESDimen_Section self, Standard_Integer const Index) -> gp_Pnt

        returns Index'th data point
        raises exception if Index <= 0 or Index > NbPoints()

        :type Index: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.IGESDimen_Section_Point(self, *args)


    def TransformedPoint(self, *args):
        """
        TransformedPoint(IGESDimen_Section self, Standard_Integer const Index) -> gp_Pnt

        returns Index'th data point after Transformation
        raises exception if Index <= 0 or Index > NbPoints()

        :type Index: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.IGESDimen_Section_TransformedPoint(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDimen.IGESDimen_Section_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDimen.IGESDimen_Section_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.IGESDimen_Section_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDimen.delete_IGESDimen_Section
IGESDimen_Section_swigregister = _IGESDimen.IGESDimen_Section_swigregister
IGESDimen_Section_swigregister(IGESDimen_Section)

def IGESDimen_Section_get_type_name(*args):
    """
    IGESDimen_Section_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDimen.IGESDimen_Section_get_type_name(*args)

def IGESDimen_Section_get_type_descriptor(*args):
    """
    IGESDimen_Section_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDimen.IGESDimen_Section_get_type_descriptor(*args)

class IGESDimen_ToolPointDimension(object):
    """
    Tool to work on a PointDimension. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDimen_ToolPointDimension self) -> IGESDimen_ToolPointDimension

        Returns a ToolPointDimension, ready to work


        """
        this = _IGESDimen.new_IGESDimen_ToolPointDimension(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDimen_ToolPointDimension self, Handle_IGESDimen_PointDimension ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_PointDimension
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDimen.IGESDimen_ToolPointDimension_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDimen_ToolPointDimension self, Handle_IGESDimen_PointDimension ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_PointDimension
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDimen.IGESDimen_ToolPointDimension_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDimen_ToolPointDimension self, Handle_IGESDimen_PointDimension ent, Interface_EntityIterator iter)

        Lists the Entities shared by a PointDimension <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_PointDimension
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.IGESDimen_ToolPointDimension_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDimen_ToolPointDimension self, Handle_IGESDimen_PointDimension ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_PointDimension
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDimen.IGESDimen_ToolPointDimension_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDimen_ToolPointDimension self, Handle_IGESDimen_PointDimension ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_PointDimension
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDimen.IGESDimen_ToolPointDimension_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDimen_ToolPointDimension self, Handle_IGESDimen_PointDimension entfrom, Handle_IGESDimen_PointDimension entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDimen.Handle_IGESDimen_PointDimension
        :type entto: OCC.wrapper.IGESDimen.Handle_IGESDimen_PointDimension
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDimen.IGESDimen_ToolPointDimension_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDimen_ToolPointDimension self, Handle_IGESDimen_PointDimension ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_PointDimension
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDimen.IGESDimen_ToolPointDimension_OwnDump(self, *args)

    __swig_destroy__ = _IGESDimen.delete_IGESDimen_ToolPointDimension
IGESDimen_ToolPointDimension_swigregister = _IGESDimen.IGESDimen_ToolPointDimension_swigregister
IGESDimen_ToolPointDimension_swigregister(IGESDimen_ToolPointDimension)

class Handle_IGESDimen_RadiusDimension(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDimen_RadiusDimension self)

        Nullify the handle


        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDimen_RadiusDimension self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDimen_RadiusDimension self, IGESDimen_RadiusDimension thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDimen_RadiusDimension self, Handle_IGESDimen_RadiusDimension theHandle) -> Handle_IGESDimen_RadiusDimension
        assign(Handle_IGESDimen_RadiusDimension self, IGESDimen_RadiusDimension thePtr) -> Handle_IGESDimen_RadiusDimension
        assign(Handle_IGESDimen_RadiusDimension self, Handle_IGESDimen_RadiusDimension theHandle) -> Handle_IGESDimen_RadiusDimension

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDimen_RadiusDimension self) -> IGESDimen_RadiusDimension

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDimen_RadiusDimension self) -> IGESDimen_RadiusDimension

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDimen_RadiusDimension self) -> IGESDimen_RadiusDimension

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension___ref__(self, *args)


    def __hash__(self):
        return _IGESDimen.Handle_IGESDimen_RadiusDimension___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDimen.Handle_IGESDimen_RadiusDimension___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDimen.new_Handle_IGESDimen_RadiusDimension(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDimen.Handle_IGESDimen_RadiusDimension_DownCast)
    __swig_destroy__ = _IGESDimen.delete_Handle_IGESDimen_RadiusDimension

    def Init(self, *args):
        """
        Init(Handle_IGESDimen_RadiusDimension self, Handle_IGESDimen_GeneralNote aNote, Handle_IGESDimen_LeaderArrow anArrow, gp_XY arcCenter, Handle_IGESDimen_LeaderArrow anotherArrow)

        :type aNote: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote
        :type anArrow: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow
        :type arcCenter: OCC.wrapper.gp.gp_XY
        :type anotherArrow: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_Init(self, *args)


    def InitForm(self, *args):
        """
        InitForm(Handle_IGESDimen_RadiusDimension self, Standard_Integer const form)

        Allows to change Form Number
        (1 admits null arrow)

        :type form: int

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_InitForm(self, *args)


    def Note(self, *args):
        """
        Note(Handle_IGESDimen_RadiusDimension self) -> Handle_IGESDimen_GeneralNote

        returns the General Note entity

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_Note(self, *args)


    def Leader(self, *args):
        """
        Leader(Handle_IGESDimen_RadiusDimension self) -> Handle_IGESDimen_LeaderArrow

        returns the Leader Arrow entity

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_Leader(self, *args)


    def Center(self, *args):
        """
        Center(Handle_IGESDimen_RadiusDimension self) -> gp_Pnt2d

        returns the coordinates of the Arc Center

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_Center(self, *args)


    def TransformedCenter(self, *args):
        """
        TransformedCenter(Handle_IGESDimen_RadiusDimension self) -> gp_Pnt

        returns the coordinates of the Arc Center after Transformation
        (Z coord taken from ZDepth of Leader Entity)

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_TransformedCenter(self, *args)


    def HasLeader2(self, *args):
        """
        HasLeader2(Handle_IGESDimen_RadiusDimension self) -> Standard_Boolean

        returns True if form is 1, False if 0

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_HasLeader2(self, *args)


    def Leader2(self, *args):
        """
        Leader2(Handle_IGESDimen_RadiusDimension self) -> Handle_IGESDimen_LeaderArrow

        returns Null handle if Form is 0

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_LeaderArrow

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_Leader2(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDimen_RadiusDimension self) -> char const *

        :rtype: const char *

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_RadiusDimension_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_RadiusDimension_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDimen_RadiusDimension self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDimen_RadiusDimension self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDimen_RadiusDimension self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDimen_RadiusDimension self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDimen_RadiusDimension self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDimen_RadiusDimension self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDimen_RadiusDimension self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDimen_RadiusDimension self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDimen_RadiusDimension self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDimen_RadiusDimension self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDimen_RadiusDimension self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDimen_RadiusDimension self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDimen_RadiusDimension self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDimen_RadiusDimension self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDimen_RadiusDimension self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDimen_RadiusDimension self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDimen_RadiusDimension self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDimen_RadiusDimension self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDimen_RadiusDimension self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDimen_RadiusDimension self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDimen_RadiusDimension self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDimen_RadiusDimension self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDimen_RadiusDimension self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDimen_RadiusDimension self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDimen_RadiusDimension self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDimen_RadiusDimension self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDimen_RadiusDimension self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDimen_RadiusDimension self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDimen_RadiusDimension self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDimen_RadiusDimension self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDimen_RadiusDimension self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDimen_RadiusDimension self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDimen_RadiusDimension self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDimen_RadiusDimension self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDimen_RadiusDimension self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDimen_RadiusDimension self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDimen_RadiusDimension self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDimen_RadiusDimension self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDimen_RadiusDimension self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDimen_RadiusDimension self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDimen_RadiusDimension self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDimen_RadiusDimension self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDimen_RadiusDimension self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDimen_RadiusDimension self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDimen_RadiusDimension self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDimen_RadiusDimension self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDimen_RadiusDimension self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDimen_RadiusDimension self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDimen_RadiusDimension self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDimen_RadiusDimension self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDimen_RadiusDimension self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDimen_RadiusDimension self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDimen_RadiusDimension self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDimen_RadiusDimension self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDimen_RadiusDimension self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDimen_RadiusDimension self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDimen_RadiusDimension self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDimen_RadiusDimension self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDimen_RadiusDimension self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDimen_RadiusDimension self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDimen_RadiusDimension self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDimen_RadiusDimension self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDimen_RadiusDimension self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDimen_RadiusDimension self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDimen_RadiusDimension self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDimen_RadiusDimension self)

        Memory deallocator for transient classes


        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDimen_RadiusDimension self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDimen_RadiusDimension self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDimen_RadiusDimension self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDimen_RadiusDimension self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDimen_RadiusDimension self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDimen_RadiusDimension self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDimen_RadiusDimension self)

        Increments the reference counter of this object


        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDimen_RadiusDimension self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_RadiusDimension_DecrementRefCounter(self, *args)

Handle_IGESDimen_RadiusDimension_swigregister = _IGESDimen.Handle_IGESDimen_RadiusDimension_swigregister
Handle_IGESDimen_RadiusDimension_swigregister(Handle_IGESDimen_RadiusDimension)

def Handle_IGESDimen_RadiusDimension_DownCast(thing):
    return _IGESDimen.Handle_IGESDimen_RadiusDimension_DownCast(thing)
Handle_IGESDimen_RadiusDimension_DownCast = _IGESDimen.Handle_IGESDimen_RadiusDimension_DownCast

class IGESDimen_ToolLinearDimension(object):
    """
    Tool to work on a LinearDimension. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDimen_ToolLinearDimension self) -> IGESDimen_ToolLinearDimension

        Returns a ToolLinearDimension, ready to work


        """
        this = _IGESDimen.new_IGESDimen_ToolLinearDimension(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDimen_ToolLinearDimension self, Handle_IGESDimen_LinearDimension ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_LinearDimension
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDimen.IGESDimen_ToolLinearDimension_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDimen_ToolLinearDimension self, Handle_IGESDimen_LinearDimension ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_LinearDimension
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDimen.IGESDimen_ToolLinearDimension_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDimen_ToolLinearDimension self, Handle_IGESDimen_LinearDimension ent, Interface_EntityIterator iter)

        Lists the Entities shared by a LinearDimension <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_LinearDimension
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.IGESDimen_ToolLinearDimension_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDimen_ToolLinearDimension self, Handle_IGESDimen_LinearDimension ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_LinearDimension
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDimen.IGESDimen_ToolLinearDimension_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDimen_ToolLinearDimension self, Handle_IGESDimen_LinearDimension ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_LinearDimension
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDimen.IGESDimen_ToolLinearDimension_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDimen_ToolLinearDimension self, Handle_IGESDimen_LinearDimension entfrom, Handle_IGESDimen_LinearDimension entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDimen.Handle_IGESDimen_LinearDimension
        :type entto: OCC.wrapper.IGESDimen.Handle_IGESDimen_LinearDimension
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDimen.IGESDimen_ToolLinearDimension_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDimen_ToolLinearDimension self, Handle_IGESDimen_LinearDimension ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_LinearDimension
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDimen.IGESDimen_ToolLinearDimension_OwnDump(self, *args)

    __swig_destroy__ = _IGESDimen.delete_IGESDimen_ToolLinearDimension
IGESDimen_ToolLinearDimension_swigregister = _IGESDimen.IGESDimen_ToolLinearDimension_swigregister
IGESDimen_ToolLinearDimension_swigregister(IGESDimen_ToolLinearDimension)

class Handle_IGESDimen_SpecificModule(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDimen_SpecificModule self)

        Nullify the handle


        """
        return _IGESDimen.Handle_IGESDimen_SpecificModule_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDimen_SpecificModule self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDimen.Handle_IGESDimen_SpecificModule_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDimen_SpecificModule self, IGESDimen_SpecificModule thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDimen.Handle_IGESDimen_SpecificModule_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDimen_SpecificModule self, Handle_IGESDimen_SpecificModule theHandle) -> Handle_IGESDimen_SpecificModule
        assign(Handle_IGESDimen_SpecificModule self, IGESDimen_SpecificModule thePtr) -> Handle_IGESDimen_SpecificModule
        assign(Handle_IGESDimen_SpecificModule self, Handle_IGESDimen_SpecificModule theHandle) -> Handle_IGESDimen_SpecificModule

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDimen.Handle_IGESDimen_SpecificModule_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDimen_SpecificModule self) -> IGESDimen_SpecificModule

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_SpecificModule_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDimen_SpecificModule self) -> IGESDimen_SpecificModule

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_SpecificModule___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDimen_SpecificModule self) -> IGESDimen_SpecificModule

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDimen.Handle_IGESDimen_SpecificModule___ref__(self, *args)


    def __hash__(self):
        return _IGESDimen.Handle_IGESDimen_SpecificModule___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDimen.Handle_IGESDimen_SpecificModule___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDimen.new_Handle_IGESDimen_SpecificModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDimen.Handle_IGESDimen_SpecificModule_DownCast)
    __swig_destroy__ = _IGESDimen.delete_Handle_IGESDimen_SpecificModule

    def OwnDump(self, *args):
        """
        OwnDump(Handle_IGESDimen_SpecificModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Specific Dump (own parameters) for IGESDimen

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDimen.Handle_IGESDimen_SpecificModule_OwnDump(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(Handle_IGESDimen_SpecificModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent) -> Standard_Boolean

        Performs non-ambiguous Corrections on Entities which support
        them (BasicDimension,CenterLine,DimensionDisplayData,
        DimensionTolerance,DimensionUnits,DimensionedGeometry,
        NewDimensionedGeometry,Section,WitnessLine)

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_SpecificModule_OwnCorrect(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDimen_SpecificModule self) -> char const *

        :rtype: const char *

        """
        return _IGESDimen.Handle_IGESDimen_SpecificModule_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_SpecificModule_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_SpecificModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESDimen_SpecificModule self)

        Memory deallocator for transient classes


        """
        return _IGESDimen.Handle_IGESDimen_SpecificModule_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDimen_SpecificModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDimen_SpecificModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_SpecificModule_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDimen_SpecificModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDimen_SpecificModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_SpecificModule_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDimen_SpecificModule self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDimen.Handle_IGESDimen_SpecificModule_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDimen_SpecificModule self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_SpecificModule_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDimen_SpecificModule self)

        Increments the reference counter of this object


        """
        return _IGESDimen.Handle_IGESDimen_SpecificModule_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDimen_SpecificModule self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_SpecificModule_DecrementRefCounter(self, *args)

Handle_IGESDimen_SpecificModule_swigregister = _IGESDimen.Handle_IGESDimen_SpecificModule_swigregister
Handle_IGESDimen_SpecificModule_swigregister(Handle_IGESDimen_SpecificModule)

def Handle_IGESDimen_SpecificModule_DownCast(thing):
    return _IGESDimen.Handle_IGESDimen_SpecificModule_DownCast(thing)
Handle_IGESDimen_SpecificModule_DownCast = _IGESDimen.Handle_IGESDimen_SpecificModule_DownCast

class IGESDimen_GeneralModule(IGESData.IGESData_GeneralModule):
    """
    Definition of General Services for IGESDimen (specific part)
    This Services comprise : Shared & Implied Lists, Copy, Check
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDimen_GeneralModule
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDimen_GeneralModule(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDimen_GeneralModule self) -> IGESDimen_GeneralModule

        Creates a GeneralModule from IGESDimen and puts it into GeneralLib


        """
        this = _IGESDimen.new_IGESDimen_GeneralModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def OwnSharedCase(self, *args):
        """
        OwnSharedCase(IGESDimen_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_EntityIterator iter)

        Lists the Entities shared by a given IGESEntity <ent>, from
        its specific parameters : specific for each type

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.IGESDimen_GeneralModule_OwnSharedCase(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDimen_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent) -> IGESData_DirChecker

        Returns a DirChecker, specific for each type of Entity
        (identified by its Case Number) : this DirChecker defines
        constraints which must be respected by the DirectoryPart

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDimen.IGESDimen_GeneralModule_DirChecker(self, *args)


    def OwnCheckCase(self, *args):
        """
        OwnCheckCase(IGESDimen_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check for each type of Entity

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDimen.IGESDimen_GeneralModule_OwnCheckCase(self, *args)


    def NewVoid(self, *args):
        """
        NewVoid(IGESDimen_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entto) -> Standard_Boolean

        Specific creation of a new void entity

        :type CN: int
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.IGESDimen_GeneralModule_NewVoid(self, *args)


    def OwnCopyCase(self, *args):
        """
        OwnCopyCase(IGESDimen_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity entfrom, Handle_IGESData_IGESEntity entto, Interface_CopyTool TC)

        Copies parameters which are specific of each Type of Entity

        :type CN: int
        :type entfrom: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type entto: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDimen.IGESDimen_GeneralModule_OwnCopyCase(self, *args)


    def CategoryNumber(self, *args):
        """
        CategoryNumber(IGESDimen_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares) -> Standard_Integer

        Returns a category number which characterizes an entity
        Drawing for all

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_GeneralModule_CategoryNumber(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDimen.IGESDimen_GeneralModule_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDimen.IGESDimen_GeneralModule_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.IGESDimen_GeneralModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDimen.delete_IGESDimen_GeneralModule
IGESDimen_GeneralModule_swigregister = _IGESDimen.IGESDimen_GeneralModule_swigregister
IGESDimen_GeneralModule_swigregister(IGESDimen_GeneralModule)

def IGESDimen_GeneralModule_get_type_name(*args):
    """
    IGESDimen_GeneralModule_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDimen.IGESDimen_GeneralModule_get_type_name(*args)

def IGESDimen_GeneralModule_get_type_descriptor(*args):
    """
    IGESDimen_GeneralModule_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDimen.IGESDimen_GeneralModule_get_type_descriptor(*args)

class Handle_IGESDimen_GeneralModule(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDimen_GeneralModule self)

        Nullify the handle


        """
        return _IGESDimen.Handle_IGESDimen_GeneralModule_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDimen_GeneralModule self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDimen.Handle_IGESDimen_GeneralModule_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDimen_GeneralModule self, IGESDimen_GeneralModule thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDimen.Handle_IGESDimen_GeneralModule_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDimen_GeneralModule self, Handle_IGESDimen_GeneralModule theHandle) -> Handle_IGESDimen_GeneralModule
        assign(Handle_IGESDimen_GeneralModule self, IGESDimen_GeneralModule thePtr) -> Handle_IGESDimen_GeneralModule
        assign(Handle_IGESDimen_GeneralModule self, Handle_IGESDimen_GeneralModule theHandle) -> Handle_IGESDimen_GeneralModule

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDimen.Handle_IGESDimen_GeneralModule_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDimen_GeneralModule self) -> IGESDimen_GeneralModule

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_GeneralModule_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDimen_GeneralModule self) -> IGESDimen_GeneralModule

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_GeneralModule___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDimen_GeneralModule self) -> IGESDimen_GeneralModule

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDimen.Handle_IGESDimen_GeneralModule___ref__(self, *args)


    def __hash__(self):
        return _IGESDimen.Handle_IGESDimen_GeneralModule___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDimen.Handle_IGESDimen_GeneralModule___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDimen.new_Handle_IGESDimen_GeneralModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDimen.Handle_IGESDimen_GeneralModule_DownCast)
    __swig_destroy__ = _IGESDimen.delete_Handle_IGESDimen_GeneralModule

    def OwnSharedCase(self, *args):
        """
        OwnSharedCase(Handle_IGESDimen_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_EntityIterator iter)

        Lists the Entities shared by a given IGESEntity <ent>, from
        its specific parameters : specific for each type

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_GeneralModule_OwnSharedCase(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(Handle_IGESDimen_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent) -> IGESData_DirChecker

        Returns a DirChecker, specific for each type of Entity
        (identified by its Case Number) : this DirChecker defines
        constraints which must be respected by the DirectoryPart

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDimen.Handle_IGESDimen_GeneralModule_DirChecker(self, *args)


    def OwnCheckCase(self, *args):
        """
        OwnCheckCase(Handle_IGESDimen_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check for each type of Entity

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDimen.Handle_IGESDimen_GeneralModule_OwnCheckCase(self, *args)


    def NewVoid(self, *args):
        """
        NewVoid(Handle_IGESDimen_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entto) -> Standard_Boolean

        Specific creation of a new void entity

        :type CN: int
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralModule_NewVoid(self, *args)


    def OwnCopyCase(self, *args):
        """
        OwnCopyCase(Handle_IGESDimen_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity entfrom, Handle_IGESData_IGESEntity entto, Interface_CopyTool TC)

        Copies parameters which are specific of each Type of Entity

        :type CN: int
        :type entfrom: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type entto: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDimen.Handle_IGESDimen_GeneralModule_OwnCopyCase(self, *args)


    def CategoryNumber(self, *args):
        """
        CategoryNumber(Handle_IGESDimen_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares) -> Standard_Integer

        Returns a category number which characterizes an entity
        Drawing for all

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralModule_CategoryNumber(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDimen_GeneralModule self) -> char const *

        :rtype: const char *

        """
        return _IGESDimen.Handle_IGESDimen_GeneralModule_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_GeneralModule_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_GeneralModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FillSharedCase(self, *args):
        """
        FillSharedCase(Handle_IGESDimen_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        Fills the list of Entities shared by an IGESEntity <ent>,
        according a Case Number <CN> (formerly computed by CaseNum).
        Considers Properties and Directory Part, and calls
        OwnSharedCase (which is adapted to each Type of Entity)

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_GeneralModule_FillSharedCase(self, *args)


    def ListImpliedCase(self, *args):
        """
        ListImpliedCase(Handle_IGESDimen_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        Lists the Implied References of <ent>. Here, these are the
        Associativities, plus the Entities defined by OwnSharedCase

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_GeneralModule_ListImpliedCase(self, *args)


    def OwnImpliedCase(self, *args):
        """
        OwnImpliedCase(Handle_IGESDimen_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_EntityIterator iter)

        Specific list of Entities implied by a given IGESEntity <ent>
        (in addition to Associativities). By default, there are none,
        but this method can be redefined as required

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_GeneralModule_OwnImpliedCase(self, *args)


    def CheckCase(self, *args):
        """
        CheckCase(Handle_IGESDimen_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Semantic Checking of an IGESEntity. Performs general Checks,
        which use DirChecker, then call OwnCheck which does a check
        specific for each type of Entity

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDimen.Handle_IGESDimen_GeneralModule_CheckCase(self, *args)


    def CanCopy(self, *args):
        """
        CanCopy(Handle_IGESDimen_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent) -> Standard_Boolean

        Specific answer to the question "is Copy properly implemented"
        For IGES, answer is always True

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralModule_CanCopy(self, *args)


    def CopyCase(self, *args):
        """
        CopyCase(Handle_IGESDimen_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC)

        Copy ("Deep") from <entfrom> to <entto> (same type)
        by using a CopyTool which provides its working Map.
        For IGESEntities, Copies general data (Directory Part, List of
        Properties) and call OwnCopyCase

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDimen.Handle_IGESDimen_GeneralModule_CopyCase(self, *args)


    def RenewImpliedCase(self, *args):
        """
        RenewImpliedCase(Handle_IGESDimen_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC)

        Renewing of Implied References.
        For IGESEntities, Copies general data(List of Associativities)
        and calls OwnRenewCase

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDimen.Handle_IGESDimen_GeneralModule_RenewImpliedCase(self, *args)


    def OwnRenewCase(self, *args):
        """
        OwnRenewCase(Handle_IGESDimen_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity entfrom, Handle_IGESData_IGESEntity entto, Interface_CopyTool TC)

        Renews parameters which are specific of each Type of Entity :
        the provided default does nothing, but this method may be
        redefined as required

        :type CN: int
        :type entfrom: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type entto: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDimen.Handle_IGESDimen_GeneralModule_OwnRenewCase(self, *args)


    def WhenDeleteCase(self, *args):
        """
        WhenDeleteCase(Handle_IGESDimen_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Standard_Boolean const dispatched)

        Prepares an IGES Entity for delete : works on directory part
        then calls OwnDeleteCase
        While dispatch requires to copy the entities, <dispatched> is
        ignored, entities are cleared in any case

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type dispatched: bool

        """
        return _IGESDimen.Handle_IGESDimen_GeneralModule_WhenDeleteCase(self, *args)


    def OwnDeleteCase(self, *args):
        """
        OwnDeleteCase(Handle_IGESDimen_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent)

        Specific preparation for delete, acts on own parameters
        Default does nothing, to be redefined as required

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_GeneralModule_OwnDeleteCase(self, *args)


    def Name(self, *args):
        """
        Name(Handle_IGESDimen_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares) -> Handle_TCollection_HAsciiString

        Returns the name of an IGES Entity (its NameValue)
        Can be redefined for an even more specific case ...

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_GeneralModule_Name(self, *args)


    def FillShared(self, *args):
        """
        FillShared(Handle_IGESDimen_GeneralModule self, Handle_Interface_InterfaceModel model, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        Specific filling of the list of Entities shared by an Entity
        <ent>, according a Case Number <CN> (formerly computed by
        CaseNum), considered in the context of a Model <model>
        Default calls FillSharedCase (i.e., ignores the model)
        Can be redefined to use the model for working

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_GeneralModule_FillShared(self, *args)


    def Share(self, *args):
        """
        Share(Handle_IGESDimen_GeneralModule self, Interface_EntityIterator iter, Handle_Standard_Transient shared)

        Adds an Entity to a Shared List (uses GetOneItem on <iter>)

        :type iter: OCC.wrapper.Interface.Interface_EntityIterator
        :type shared: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESDimen.Handle_IGESDimen_GeneralModule_Share(self, *args)


    def ListImplied(self, *args):
        """
        ListImplied(Handle_IGESDimen_GeneralModule self, Handle_Interface_InterfaceModel model, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        List the Implied References of <ent> considered in the context
        of a Model <model> : i.e. the Entities which are Referenced
        while not considered as Shared (not copied if <ent> is,
        references not renewed by CopyCase but by ImpliedCase, only
        if referenced Entities have been Copied too)
        FillShared + ListImplied give the complete list of References
        Default calls ListImpliedCase (i.e. ignores the model)
        Can be redefined to use the model for working

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_GeneralModule_ListImplied(self, *args)


    def Dispatch(self, *args):
        """
        Dispatch(Handle_IGESDimen_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC) -> Standard_Boolean

        Dispatches an entity
        Returns True if it works by copy, False if it just duplicates
        the starting Handle

        Dispatching means producing a new entity, image of the
        starting one, in order to be put into a new Model, this Model
        being itself the result of a dispatch from an original Model

        According to the cases, dispatch can either
        * just return <entto> as equating <entfrom>
        -> the new model designates the starting entity : it is
        lighter, but the dispatched entity being shared might not be
        modified for dispatch
        * copy <entfrom> to <entto>
        by calling NewVoid+CopyCase (two steps) or NewCopiedCase (1)
        -> the dispatched entity is a COPY, hence it can be modified

        The provided default just duplicates the handle without
        copying, then returns False. Can be redefined

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralModule_Dispatch(self, *args)


    def NewCopiedCase(self, *args):
        """
        NewCopiedCase(Handle_IGESDimen_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC) -> Standard_Boolean

        Specific operator (create+copy) defaulted to do nothing.
        It can be redefined : When it is not possible to work in two
        steps (NewVoid then CopyCase). This can occur when there is
        no default constructor : hence the result <entto> must be
        created with an effective definition.
        Remark : if NewCopiedCase is defined, CopyCase has nothing to do
        Returns True if it has produced something, false else

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralModule_NewCopiedCase(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDimen_GeneralModule self)

        Memory deallocator for transient classes


        """
        return _IGESDimen.Handle_IGESDimen_GeneralModule_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDimen_GeneralModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDimen_GeneralModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralModule_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDimen_GeneralModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDimen_GeneralModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_GeneralModule_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDimen_GeneralModule self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDimen.Handle_IGESDimen_GeneralModule_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDimen_GeneralModule self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralModule_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDimen_GeneralModule self)

        Increments the reference counter of this object


        """
        return _IGESDimen.Handle_IGESDimen_GeneralModule_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDimen_GeneralModule self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_GeneralModule_DecrementRefCounter(self, *args)

Handle_IGESDimen_GeneralModule_swigregister = _IGESDimen.Handle_IGESDimen_GeneralModule_swigregister
Handle_IGESDimen_GeneralModule_swigregister(Handle_IGESDimen_GeneralModule)

def Handle_IGESDimen_GeneralModule_DownCast(thing):
    return _IGESDimen.Handle_IGESDimen_GeneralModule_DownCast(thing)
Handle_IGESDimen_GeneralModule_DownCast = _IGESDimen.Handle_IGESDimen_GeneralModule_DownCast

class IGESDimen_ToolGeneralNote(object):
    """
    Tool to work on a GeneralNote. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDimen_ToolGeneralNote self) -> IGESDimen_ToolGeneralNote

        Returns a ToolGeneralNote, ready to work


        """
        this = _IGESDimen.new_IGESDimen_ToolGeneralNote(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDimen_ToolGeneralNote self, Handle_IGESDimen_GeneralNote ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDimen.IGESDimen_ToolGeneralNote_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDimen_ToolGeneralNote self, Handle_IGESDimen_GeneralNote ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDimen.IGESDimen_ToolGeneralNote_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDimen_ToolGeneralNote self, Handle_IGESDimen_GeneralNote ent, Interface_EntityIterator iter)

        Lists the Entities shared by a GeneralNote <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.IGESDimen_ToolGeneralNote_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDimen_ToolGeneralNote self, Handle_IGESDimen_GeneralNote ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDimen.IGESDimen_ToolGeneralNote_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDimen_ToolGeneralNote self, Handle_IGESDimen_GeneralNote ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDimen.IGESDimen_ToolGeneralNote_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDimen_ToolGeneralNote self, Handle_IGESDimen_GeneralNote entfrom, Handle_IGESDimen_GeneralNote entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote
        :type entto: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDimen.IGESDimen_ToolGeneralNote_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDimen_ToolGeneralNote self, Handle_IGESDimen_GeneralNote ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDimen.IGESDimen_ToolGeneralNote_OwnDump(self, *args)

    __swig_destroy__ = _IGESDimen.delete_IGESDimen_ToolGeneralNote
IGESDimen_ToolGeneralNote_swigregister = _IGESDimen.IGESDimen_ToolGeneralNote_swigregister
IGESDimen_ToolGeneralNote_swigregister(IGESDimen_ToolGeneralNote)

class IGESDimen_ToolGeneralLabel(object):
    """
    Tool to work on a GeneralLabel. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDimen_ToolGeneralLabel self) -> IGESDimen_ToolGeneralLabel

        Returns a ToolGeneralLabel, ready to work


        """
        this = _IGESDimen.new_IGESDimen_ToolGeneralLabel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDimen_ToolGeneralLabel self, Handle_IGESDimen_GeneralLabel ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralLabel
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDimen.IGESDimen_ToolGeneralLabel_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDimen_ToolGeneralLabel self, Handle_IGESDimen_GeneralLabel ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralLabel
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDimen.IGESDimen_ToolGeneralLabel_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDimen_ToolGeneralLabel self, Handle_IGESDimen_GeneralLabel ent, Interface_EntityIterator iter)

        Lists the Entities shared by a GeneralLabel <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralLabel
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.IGESDimen_ToolGeneralLabel_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDimen_ToolGeneralLabel self, Handle_IGESDimen_GeneralLabel ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralLabel
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDimen.IGESDimen_ToolGeneralLabel_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDimen_ToolGeneralLabel self, Handle_IGESDimen_GeneralLabel ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralLabel
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDimen.IGESDimen_ToolGeneralLabel_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDimen_ToolGeneralLabel self, Handle_IGESDimen_GeneralLabel entfrom, Handle_IGESDimen_GeneralLabel entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralLabel
        :type entto: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralLabel
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDimen.IGESDimen_ToolGeneralLabel_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDimen_ToolGeneralLabel self, Handle_IGESDimen_GeneralLabel ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralLabel
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDimen.IGESDimen_ToolGeneralLabel_OwnDump(self, *args)

    __swig_destroy__ = _IGESDimen.delete_IGESDimen_ToolGeneralLabel
IGESDimen_ToolGeneralLabel_swigregister = _IGESDimen.IGESDimen_ToolGeneralLabel_swigregister
IGESDimen_ToolGeneralLabel_swigregister(IGESDimen_ToolGeneralLabel)

class Handle_IGESDimen_ReadWriteModule(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDimen_ReadWriteModule self)

        Nullify the handle


        """
        return _IGESDimen.Handle_IGESDimen_ReadWriteModule_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDimen_ReadWriteModule self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDimen.Handle_IGESDimen_ReadWriteModule_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDimen_ReadWriteModule self, IGESDimen_ReadWriteModule thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDimen.Handle_IGESDimen_ReadWriteModule_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDimen_ReadWriteModule self, Handle_IGESDimen_ReadWriteModule theHandle) -> Handle_IGESDimen_ReadWriteModule
        assign(Handle_IGESDimen_ReadWriteModule self, IGESDimen_ReadWriteModule thePtr) -> Handle_IGESDimen_ReadWriteModule
        assign(Handle_IGESDimen_ReadWriteModule self, Handle_IGESDimen_ReadWriteModule theHandle) -> Handle_IGESDimen_ReadWriteModule

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDimen.Handle_IGESDimen_ReadWriteModule_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDimen_ReadWriteModule self) -> IGESDimen_ReadWriteModule

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_ReadWriteModule_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDimen_ReadWriteModule self) -> IGESDimen_ReadWriteModule

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_ReadWriteModule___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDimen_ReadWriteModule self) -> IGESDimen_ReadWriteModule

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDimen.Handle_IGESDimen_ReadWriteModule___ref__(self, *args)


    def __hash__(self):
        return _IGESDimen.Handle_IGESDimen_ReadWriteModule___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDimen.Handle_IGESDimen_ReadWriteModule___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDimen.new_Handle_IGESDimen_ReadWriteModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDimen.Handle_IGESDimen_ReadWriteModule_DownCast)
    __swig_destroy__ = _IGESDimen.delete_Handle_IGESDimen_ReadWriteModule

    def CaseIGES(self, *args):
        """
        CaseIGES(Handle_IGESDimen_ReadWriteModule self, Standard_Integer const typenum, Standard_Integer const formnum) -> Standard_Integer

        Defines Case Numbers for Entities of IGESDimen

        :type typenum: int
        :type formnum: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_ReadWriteModule_CaseIGES(self, *args)


    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(Handle_IGESDimen_ReadWriteModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file for an Entity of IGESDimen

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDimen.Handle_IGESDimen_ReadWriteModule_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(Handle_IGESDimen_ReadWriteModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDimen.Handle_IGESDimen_ReadWriteModule_WriteOwnParams(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDimen_ReadWriteModule self) -> char const *

        :rtype: const char *

        """
        return _IGESDimen.Handle_IGESDimen_ReadWriteModule_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_ReadWriteModule_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_ReadWriteModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def CaseNum(self, *args):
        """
        CaseNum(Handle_IGESDimen_ReadWriteModule self, Handle_Interface_FileReaderData data, Standard_Integer const num) -> Standard_Integer

        Translates the Type of record <num> in <data> to a positive
        Case Number, or 0 if failed.
        Works with IGESReaderData which provides Type & Form Numbers,
        and calls CaseIGES (see below)

        :type data: OCC.wrapper.Interface.Handle_Interface_FileReaderData
        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_ReadWriteModule_CaseNum(self, *args)


    def Read(self, *args):
        """
        Read(Handle_IGESDimen_ReadWriteModule self, Standard_Integer const CN, Handle_Interface_FileReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_Standard_Transient ent)

        General Read Function. See IGESReaderTool for more info

        :type CN: int
        :type data: OCC.wrapper.Interface.Handle_Interface_FileReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESDimen.Handle_IGESDimen_ReadWriteModule_Read(self, *args)


    def NewRead(self, *args):
        """
        NewRead(Handle_IGESDimen_ReadWriteModule self, Standard_Integer const casenum, Handle_Interface_FileReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_Standard_Transient ent) -> Standard_Boolean

        Specific operator (create+read) defaulted to do nothing.
        It can be redefined when it is not possible to work in two
        steps (NewVoid then Read). This occurs when no default
        constructor is defined : hence the result <ent> must be
        created with an effective definition from the reader.
        Remark : if NewRead is defined, Copy has nothing to do.

        Returns True if it has produced something, false else.
        If nothing was produced, <ach> should be filled : it will be
        treated as "Unrecognized case" by reader tool.

        :type casenum: int
        :type data: OCC.wrapper.Interface.Handle_Interface_FileReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_ReadWriteModule_NewRead(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDimen_ReadWriteModule self)

        Memory deallocator for transient classes


        """
        return _IGESDimen.Handle_IGESDimen_ReadWriteModule_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDimen_ReadWriteModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDimen_ReadWriteModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_ReadWriteModule_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDimen_ReadWriteModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDimen_ReadWriteModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_ReadWriteModule_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDimen_ReadWriteModule self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDimen.Handle_IGESDimen_ReadWriteModule_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDimen_ReadWriteModule self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_ReadWriteModule_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDimen_ReadWriteModule self)

        Increments the reference counter of this object


        """
        return _IGESDimen.Handle_IGESDimen_ReadWriteModule_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDimen_ReadWriteModule self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_ReadWriteModule_DecrementRefCounter(self, *args)

Handle_IGESDimen_ReadWriteModule_swigregister = _IGESDimen.Handle_IGESDimen_ReadWriteModule_swigregister
Handle_IGESDimen_ReadWriteModule_swigregister(Handle_IGESDimen_ReadWriteModule)

def Handle_IGESDimen_ReadWriteModule_DownCast(thing):
    return _IGESDimen.Handle_IGESDimen_ReadWriteModule_DownCast(thing)
Handle_IGESDimen_ReadWriteModule_DownCast = _IGESDimen.Handle_IGESDimen_ReadWriteModule_DownCast

class IGESDimen_ToolRadiusDimension(object):
    """
    Tool to work on a RadiusDimension. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDimen_ToolRadiusDimension self) -> IGESDimen_ToolRadiusDimension

        Returns a ToolRadiusDimension, ready to work


        """
        this = _IGESDimen.new_IGESDimen_ToolRadiusDimension(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDimen_ToolRadiusDimension self, Handle_IGESDimen_RadiusDimension ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_RadiusDimension
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDimen.IGESDimen_ToolRadiusDimension_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDimen_ToolRadiusDimension self, Handle_IGESDimen_RadiusDimension ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_RadiusDimension
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDimen.IGESDimen_ToolRadiusDimension_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDimen_ToolRadiusDimension self, Handle_IGESDimen_RadiusDimension ent, Interface_EntityIterator iter)

        Lists the Entities shared by a RadiusDimension <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_RadiusDimension
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.IGESDimen_ToolRadiusDimension_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDimen_ToolRadiusDimension self, Handle_IGESDimen_RadiusDimension ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_RadiusDimension
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDimen.IGESDimen_ToolRadiusDimension_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDimen_ToolRadiusDimension self, Handle_IGESDimen_RadiusDimension ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_RadiusDimension
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDimen.IGESDimen_ToolRadiusDimension_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDimen_ToolRadiusDimension self, Handle_IGESDimen_RadiusDimension entfrom, Handle_IGESDimen_RadiusDimension entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDimen.Handle_IGESDimen_RadiusDimension
        :type entto: OCC.wrapper.IGESDimen.Handle_IGESDimen_RadiusDimension
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDimen.IGESDimen_ToolRadiusDimension_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDimen_ToolRadiusDimension self, Handle_IGESDimen_RadiusDimension ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_RadiusDimension
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDimen.IGESDimen_ToolRadiusDimension_OwnDump(self, *args)

    __swig_destroy__ = _IGESDimen.delete_IGESDimen_ToolRadiusDimension
IGESDimen_ToolRadiusDimension_swigregister = _IGESDimen.IGESDimen_ToolRadiusDimension_swigregister
IGESDimen_ToolRadiusDimension_swigregister(IGESDimen_ToolRadiusDimension)

class Handle_IGESDimen_Protocol(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDimen_Protocol self)

        Nullify the handle


        """
        return _IGESDimen.Handle_IGESDimen_Protocol_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDimen_Protocol self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDimen.Handle_IGESDimen_Protocol_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDimen_Protocol self, IGESDimen_Protocol thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDimen.Handle_IGESDimen_Protocol_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDimen_Protocol self, Handle_IGESDimen_Protocol theHandle) -> Handle_IGESDimen_Protocol
        assign(Handle_IGESDimen_Protocol self, IGESDimen_Protocol thePtr) -> Handle_IGESDimen_Protocol
        assign(Handle_IGESDimen_Protocol self, Handle_IGESDimen_Protocol theHandle) -> Handle_IGESDimen_Protocol

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDimen.Handle_IGESDimen_Protocol_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDimen_Protocol self) -> IGESDimen_Protocol

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_Protocol_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDimen_Protocol self) -> IGESDimen_Protocol

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_Protocol___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDimen_Protocol self) -> IGESDimen_Protocol

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDimen.Handle_IGESDimen_Protocol___ref__(self, *args)


    def __hash__(self):
        return _IGESDimen.Handle_IGESDimen_Protocol___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDimen.Handle_IGESDimen_Protocol___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDimen.new_Handle_IGESDimen_Protocol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDimen.Handle_IGESDimen_Protocol_DownCast)
    __swig_destroy__ = _IGESDimen.delete_Handle_IGESDimen_Protocol

    def NbResources(self, *args):
        """
        NbResources(Handle_IGESDimen_Protocol self) -> Standard_Integer

        Gives the count of Resource Protocol. Here, two
        (Protocols from IGESGraph and IGESGeom)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_Protocol_NbResources(self, *args)


    def Resource(self, *args):
        """
        Resource(Handle_IGESDimen_Protocol self, Standard_Integer const num) -> Handle_Interface_Protocol

        Returns a Resource, given a rank.

        :type num: int
        :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESDimen.Handle_IGESDimen_Protocol_Resource(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDimen_Protocol self, Handle_Standard_Type atype) -> Standard_Integer

        Returns a Case Number, specific of each recognized Type
        This Case Number is then used in Libraries : the various
        Modules attached to this class of Protocol must use them
        in accordance (for a given value of TypeNumber, they must
        consider the same Type as the Protocol defines)

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_Protocol_TypeNumber(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDimen_Protocol self) -> char const *

        :rtype: const char *

        """
        return _IGESDimen.Handle_IGESDimen_Protocol_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_Protocol_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_Protocol_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NewModel(self, *args):
        """
        NewModel(Handle_IGESDimen_Protocol self) -> Handle_Interface_InterfaceModel

        Creates an empty Model for IGES Norm

        :rtype: OCC.wrapper.Interface.Handle_Interface_InterfaceModel

        """
        return _IGESDimen.Handle_IGESDimen_Protocol_NewModel(self, *args)


    def IsSuitableModel(self, *args):
        """
        IsSuitableModel(Handle_IGESDimen_Protocol self, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        Returns True if <model> is a Model of IGES Norm

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_Protocol_IsSuitableModel(self, *args)


    def UnknownEntity(self, *args):
        """
        UnknownEntity(Handle_IGESDimen_Protocol self) -> Handle_Standard_Transient

        Creates a new Unknown Entity for IGES (UndefinedEntity)

        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESDimen.Handle_IGESDimen_Protocol_UnknownEntity(self, *args)


    def IsUnknownEntity(self, *args):
        """
        IsUnknownEntity(Handle_IGESDimen_Protocol self, Handle_Standard_Transient ent) -> Standard_Boolean

        Returns True if <ent> is an Unknown Entity for the Norm, i.e.
        Type UndefinedEntity, status Unknown

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_Protocol_IsUnknownEntity(self, *args)


    def Active(self, *args):
        """
        Active(Handle_IGESDimen_Protocol self) -> Handle_Interface_Protocol

        Returns the Active Protocol, if defined (else, returns a
        Null Handle, which means "no defined active protocol")

        :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESDimen.Handle_IGESDimen_Protocol_Active(self, *args)


    def SetActive(self, *args):
        """
        SetActive(Handle_IGESDimen_Protocol self, Handle_Interface_Protocol aprotocol)

        Sets a given Protocol to be the Active one (for the users of
        Active, see just above). Applies to every sub-type of Protocol

        :type aprotocol: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESDimen.Handle_IGESDimen_Protocol_SetActive(self, *args)


    def ClearActive(self, *args):
        """
        ClearActive(Handle_IGESDimen_Protocol self)

        Erases the Active Protocol (hence it becomes undefined)


        """
        return _IGESDimen.Handle_IGESDimen_Protocol_ClearActive(self, *args)


    def CaseNumber(self, *args):
        """
        CaseNumber(Handle_IGESDimen_Protocol self, Handle_Standard_Transient obj) -> Standard_Integer

        Returns a unique positive CaseNumber for each Recognized
        Object. By default, recognition is based on Type(1)
        By default, calls the following one which is deferred.

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_Protocol_CaseNumber(self, *args)


    def IsDynamicType(self, *args):
        """
        IsDynamicType(Handle_IGESDimen_Protocol self, Handle_Standard_Transient obj) -> Standard_Boolean

        Returns True if type of <obj> is that defined from CDL
        This is the default but it may change according implementation

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_Protocol_IsDynamicType(self, *args)


    def NbTypes(self, *args):
        """
        NbTypes(Handle_IGESDimen_Protocol self, Handle_Standard_Transient obj) -> Standard_Integer

        Returns the count of DISTINCT types under which an entity may
        be processed. Each one is candidate to be recognized by
        TypeNumber, <obj> is then processed according it
        By default, returns 1 (the DynamicType)

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_Protocol_NbTypes(self, *args)


    def Type(self, *args):
        """
        Type(Handle_IGESDimen_Protocol self, Handle_Standard_Transient obj, Standard_Integer const nt=1) -> Handle_Standard_Type

        Returns a type under which <obj> can be recognized and
        processed, according its rank in its definition list (see
        NbTypes).
        By default, returns DynamicType

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :type nt: int
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDimen.Handle_IGESDimen_Protocol_Type(self, *args)


    def GlobalCheck(self, *args):
        """
        GlobalCheck(Handle_IGESDimen_Protocol self, Interface_Graph G, Handle_Interface_Check ach) -> Standard_Boolean

        Evaluates a Global Check for a model (with its Graph)
        Returns True when done, False if data in model do not apply

        Very specific of each norm, i.e. of each protocol : the
        uppest level Protocol assumes it, it can call GlobalCheck of
        its ressources only if it is necessary

        Default does nothing, can be redefined

        :type G: OCC.wrapper.Interface.Interface_Graph
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_Protocol_GlobalCheck(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDimen_Protocol self)

        Memory deallocator for transient classes


        """
        return _IGESDimen.Handle_IGESDimen_Protocol_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDimen_Protocol self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDimen_Protocol self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_Protocol_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDimen_Protocol self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDimen_Protocol self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_Protocol_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDimen_Protocol self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDimen.Handle_IGESDimen_Protocol_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDimen_Protocol self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_Protocol_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDimen_Protocol self)

        Increments the reference counter of this object


        """
        return _IGESDimen.Handle_IGESDimen_Protocol_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDimen_Protocol self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_Protocol_DecrementRefCounter(self, *args)

Handle_IGESDimen_Protocol_swigregister = _IGESDimen.Handle_IGESDimen_Protocol_swigregister
Handle_IGESDimen_Protocol_swigregister(Handle_IGESDimen_Protocol)

def Handle_IGESDimen_Protocol_DownCast(thing):
    return _IGESDimen.Handle_IGESDimen_Protocol_DownCast(thing)
Handle_IGESDimen_Protocol_DownCast = _IGESDimen.Handle_IGESDimen_Protocol_DownCast

class IGESDimen_DimensionDisplayData(IGESData.IGESData_IGESEntity):
    """
    Defines IGES Dimension Display Data, Type <406> Form <30>,
    in package IGESDimen
    The Dimensional Display Data Property is optional but when
    present must be referenced by a dimension entity.
    The information it contains could be extracted from the text,
    leader and witness line data with difficulty.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDimen_DimensionDisplayData
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDimen_DimensionDisplayData(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDimen_DimensionDisplayData self) -> IGESDimen_DimensionDisplayData

        Defines IGES Dimension Display Data, Type <406> Form <30>,
        in package IGESDimen
        The Dimensional Display Data Property is optional but when
        present must be referenced by a dimension entity.
        The information it contains could be extracted from the text,
        leader and witness line data with difficulty.
        """
        this = _IGESDimen.new_IGESDimen_DimensionDisplayData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDimen_DimensionDisplayData self, Standard_Integer const numProps, Standard_Integer const aDimType, Standard_Integer const aLabelPos, Standard_Integer const aCharSet, Handle_TCollection_HAsciiString aString, Standard_Integer const aSymbol, Standard_Real const anAng, Standard_Integer const anAlign, Standard_Integer const aLevel, Standard_Integer const aPlace, Standard_Integer const anOrient, Standard_Real const initVal, Handle_TColStd_HArray1OfInteger notes, Handle_TColStd_HArray1OfInteger startInd, Handle_TColStd_HArray1OfInteger endInd)

        :type numProps: int
        :type aDimType: int
        :type aLabelPos: int
        :type aCharSet: int
        :type aString: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aSymbol: int
        :type anAng: float
        :type anAlign: int
        :type aLevel: int
        :type aPlace: int
        :type anOrient: int
        :type initVal: float
        :type notes: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type startInd: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type endInd: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _IGESDimen.IGESDimen_DimensionDisplayData_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(IGESDimen_DimensionDisplayData self) -> Standard_Integer

        returns the number of property values (14)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_DimensionDisplayData_NbPropertyValues(self, *args)


    def DimensionType(self, *args):
        """
        DimensionType(IGESDimen_DimensionDisplayData self) -> Standard_Integer

        returns the dimension type

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_DimensionDisplayData_DimensionType(self, *args)


    def LabelPosition(self, *args):
        """
        LabelPosition(IGESDimen_DimensionDisplayData self) -> Standard_Integer

        returns the preferred label position

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_DimensionDisplayData_LabelPosition(self, *args)


    def CharacterSet(self, *args):
        """
        CharacterSet(IGESDimen_DimensionDisplayData self) -> Standard_Integer

        returns the character set interpretation

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_DimensionDisplayData_CharacterSet(self, *args)


    def LString(self, *args):
        """
        LString(IGESDimen_DimensionDisplayData self) -> Handle_TCollection_HAsciiString

        returns e.g., 8HDIAMETER

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.IGESDimen_DimensionDisplayData_LString(self, *args)


    def DecimalSymbol(self, *args):
        """
        DecimalSymbol(IGESDimen_DimensionDisplayData self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_DimensionDisplayData_DecimalSymbol(self, *args)


    def WitnessLineAngle(self, *args):
        """
        WitnessLineAngle(IGESDimen_DimensionDisplayData self) -> Standard_Real

        returns the witness line angle in radians

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_DimensionDisplayData_WitnessLineAngle(self, *args)


    def TextAlignment(self, *args):
        """
        TextAlignment(IGESDimen_DimensionDisplayData self) -> Standard_Integer

        returns the text alignment

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_DimensionDisplayData_TextAlignment(self, *args)


    def TextLevel(self, *args):
        """
        TextLevel(IGESDimen_DimensionDisplayData self) -> Standard_Integer

        returns the text level

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_DimensionDisplayData_TextLevel(self, *args)


    def TextPlacement(self, *args):
        """
        TextPlacement(IGESDimen_DimensionDisplayData self) -> Standard_Integer

        returns the preferred text placement

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_DimensionDisplayData_TextPlacement(self, *args)


    def ArrowHeadOrientation(self, *args):
        """
        ArrowHeadOrientation(IGESDimen_DimensionDisplayData self) -> Standard_Integer

        returns the arrowhead orientation

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_DimensionDisplayData_ArrowHeadOrientation(self, *args)


    def InitialValue(self, *args):
        """
        InitialValue(IGESDimen_DimensionDisplayData self) -> Standard_Real

        returns the primary dimension initial value

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.IGESDimen_DimensionDisplayData_InitialValue(self, *args)


    def NbSupplementaryNotes(self, *args):
        """
        NbSupplementaryNotes(IGESDimen_DimensionDisplayData self) -> Standard_Integer

        returns the number of supplementary notes or zero

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_DimensionDisplayData_NbSupplementaryNotes(self, *args)


    def SupplementaryNote(self, *args):
        """
        SupplementaryNote(IGESDimen_DimensionDisplayData self, Standard_Integer const Index) -> Standard_Integer

        returns the Index'th supplementary note
        raises exception if Index <= 0 or Index > NbSupplementaryNotes()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_DimensionDisplayData_SupplementaryNote(self, *args)


    def StartIndex(self, *args):
        """
        StartIndex(IGESDimen_DimensionDisplayData self, Standard_Integer const Index) -> Standard_Integer

        returns the Index'th note start index
        raises exception if Index <= 0 or Index > NbSupplementaryNotes()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_DimensionDisplayData_StartIndex(self, *args)


    def EndIndex(self, *args):
        """
        EndIndex(IGESDimen_DimensionDisplayData self, Standard_Integer const Index) -> Standard_Integer

        returns the Index'th note end index
        raises exception if Index <= 0 or Index > NbSupplemetaryNotes()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.IGESDimen_DimensionDisplayData_EndIndex(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDimen.IGESDimen_DimensionDisplayData_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDimen.IGESDimen_DimensionDisplayData_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.IGESDimen_DimensionDisplayData_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDimen.delete_IGESDimen_DimensionDisplayData
IGESDimen_DimensionDisplayData_swigregister = _IGESDimen.IGESDimen_DimensionDisplayData_swigregister
IGESDimen_DimensionDisplayData_swigregister(IGESDimen_DimensionDisplayData)

def IGESDimen_DimensionDisplayData_get_type_name(*args):
    """
    IGESDimen_DimensionDisplayData_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDimen.IGESDimen_DimensionDisplayData_get_type_name(*args)

def IGESDimen_DimensionDisplayData_get_type_descriptor(*args):
    """
    IGESDimen_DimensionDisplayData_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDimen.IGESDimen_DimensionDisplayData_get_type_descriptor(*args)

class Handle_IGESDimen_SectionedArea(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDimen_SectionedArea self)

        Nullify the handle


        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDimen_SectionedArea self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDimen_SectionedArea self, IGESDimen_SectionedArea thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDimen_SectionedArea self, Handle_IGESDimen_SectionedArea theHandle) -> Handle_IGESDimen_SectionedArea
        assign(Handle_IGESDimen_SectionedArea self, IGESDimen_SectionedArea thePtr) -> Handle_IGESDimen_SectionedArea
        assign(Handle_IGESDimen_SectionedArea self, Handle_IGESDimen_SectionedArea theHandle) -> Handle_IGESDimen_SectionedArea

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDimen_SectionedArea self) -> IGESDimen_SectionedArea

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDimen_SectionedArea self) -> IGESDimen_SectionedArea

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDimen_SectionedArea self) -> IGESDimen_SectionedArea

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea___ref__(self, *args)


    def __hash__(self):
        return _IGESDimen.Handle_IGESDimen_SectionedArea___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDimen.Handle_IGESDimen_SectionedArea___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDimen.new_Handle_IGESDimen_SectionedArea(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDimen.Handle_IGESDimen_SectionedArea_DownCast)
    __swig_destroy__ = _IGESDimen.delete_Handle_IGESDimen_SectionedArea

    def Init(self, *args):
        """
        Init(Handle_IGESDimen_SectionedArea self, Handle_IGESData_IGESEntity aCurve, Standard_Integer const aPattern, gp_XYZ aPoint, Standard_Real const aDistance, Standard_Real const anAngle, Handle_IGESData_HArray1OfIGESEntity someIslands)

        :type aCurve: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type aPattern: int
        :type aPoint: OCC.wrapper.gp.gp_XYZ
        :type aDistance: float
        :type anAngle: float
        :type someIslands: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_Init(self, *args)


    def SetInverted(self, *args):
        """
        SetInverted(Handle_IGESDimen_SectionedArea self, Standard_Boolean const mode)

        Sets the cross hatches to be inverted or not,
        according value of <mode> (corresponds to FormNumber)

        :type mode: bool

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_SetInverted(self, *args)


    def IsInverted(self, *args):
        """
        IsInverted(Handle_IGESDimen_SectionedArea self) -> Standard_Boolean

        Returns True if cross hatches as Inverted, else they are
        Standard (Inverted : Form=1, Standard : Form=0)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_IsInverted(self, *args)


    def ExteriorCurve(self, *args):
        """
        ExteriorCurve(Handle_IGESDimen_SectionedArea self) -> Handle_IGESData_IGESEntity

        returns the exterior definition curve

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_ExteriorCurve(self, *args)


    def Pattern(self, *args):
        """
        Pattern(Handle_IGESDimen_SectionedArea self) -> Standard_Integer

        returns fill pattern code

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_Pattern(self, *args)


    def PassingPoint(self, *args):
        """
        PassingPoint(Handle_IGESDimen_SectionedArea self) -> gp_Pnt

        returns point thru which line should pass

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_PassingPoint(self, *args)


    def TransformedPassingPoint(self, *args):
        """
        TransformedPassingPoint(Handle_IGESDimen_SectionedArea self) -> gp_Pnt

        returns point thru which line should pass after Transformation

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_TransformedPassingPoint(self, *args)


    def ZDepth(self, *args):
        """
        ZDepth(Handle_IGESDimen_SectionedArea self) -> Standard_Real

        returns the Z depth

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_ZDepth(self, *args)


    def Distance(self, *args):
        """
        Distance(Handle_IGESDimen_SectionedArea self) -> Standard_Real

        returns the normal distance between lines

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_Distance(self, *args)


    def Angle(self, *args):
        """
        Angle(Handle_IGESDimen_SectionedArea self) -> Standard_Real

        returns the angle of lines with XT axis

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_Angle(self, *args)


    def NbIslands(self, *args):
        """
        NbIslands(Handle_IGESDimen_SectionedArea self) -> Standard_Integer

        returns the number of island curves

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_NbIslands(self, *args)


    def IslandCurve(self, *args):
        """
        IslandCurve(Handle_IGESDimen_SectionedArea self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns the interior definition curves, returns Null Handle
        exception raised if Index <= 0 or Index > NbIslands()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_IslandCurve(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDimen_SectionedArea self) -> char const *

        :rtype: const char *

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_SectionedArea_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_SectionedArea_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDimen_SectionedArea self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDimen_SectionedArea self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDimen_SectionedArea self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDimen_SectionedArea self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDimen_SectionedArea self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDimen_SectionedArea self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDimen_SectionedArea self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDimen_SectionedArea self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDimen_SectionedArea self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDimen_SectionedArea self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDimen_SectionedArea self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDimen_SectionedArea self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDimen_SectionedArea self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDimen_SectionedArea self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDimen_SectionedArea self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDimen_SectionedArea self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDimen_SectionedArea self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDimen_SectionedArea self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDimen_SectionedArea self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDimen_SectionedArea self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDimen_SectionedArea self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDimen_SectionedArea self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDimen_SectionedArea self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDimen_SectionedArea self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDimen_SectionedArea self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDimen_SectionedArea self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDimen_SectionedArea self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDimen_SectionedArea self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDimen_SectionedArea self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDimen_SectionedArea self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDimen_SectionedArea self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDimen_SectionedArea self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDimen_SectionedArea self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDimen_SectionedArea self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDimen_SectionedArea self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDimen_SectionedArea self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDimen_SectionedArea self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDimen_SectionedArea self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDimen_SectionedArea self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDimen_SectionedArea self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDimen_SectionedArea self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDimen_SectionedArea self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDimen_SectionedArea self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDimen_SectionedArea self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDimen_SectionedArea self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDimen_SectionedArea self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDimen_SectionedArea self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDimen_SectionedArea self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDimen_SectionedArea self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDimen_SectionedArea self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDimen_SectionedArea self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDimen_SectionedArea self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDimen_SectionedArea self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDimen_SectionedArea self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDimen_SectionedArea self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDimen_SectionedArea self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDimen_SectionedArea self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDimen_SectionedArea self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDimen_SectionedArea self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDimen_SectionedArea self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDimen_SectionedArea self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDimen_SectionedArea self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDimen_SectionedArea self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDimen_SectionedArea self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDimen_SectionedArea self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDimen_SectionedArea self)

        Memory deallocator for transient classes


        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDimen_SectionedArea self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDimen_SectionedArea self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDimen_SectionedArea self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDimen_SectionedArea self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDimen_SectionedArea self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDimen_SectionedArea self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDimen_SectionedArea self)

        Increments the reference counter of this object


        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDimen_SectionedArea self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_SectionedArea_DecrementRefCounter(self, *args)

Handle_IGESDimen_SectionedArea_swigregister = _IGESDimen.Handle_IGESDimen_SectionedArea_swigregister
Handle_IGESDimen_SectionedArea_swigregister(Handle_IGESDimen_SectionedArea)

def Handle_IGESDimen_SectionedArea_DownCast(thing):
    return _IGESDimen.Handle_IGESDimen_SectionedArea_DownCast(thing)
Handle_IGESDimen_SectionedArea_DownCast = _IGESDimen.Handle_IGESDimen_SectionedArea_DownCast

class IGESDimen_ToolOrdinateDimension(object):
    """
    Tool to work on a OrdinateDimension. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDimen_ToolOrdinateDimension self) -> IGESDimen_ToolOrdinateDimension

        Returns a ToolOrdinateDimension, ready to work


        """
        this = _IGESDimen.new_IGESDimen_ToolOrdinateDimension(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDimen_ToolOrdinateDimension self, Handle_IGESDimen_OrdinateDimension ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_OrdinateDimension
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDimen.IGESDimen_ToolOrdinateDimension_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDimen_ToolOrdinateDimension self, Handle_IGESDimen_OrdinateDimension ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_OrdinateDimension
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDimen.IGESDimen_ToolOrdinateDimension_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDimen_ToolOrdinateDimension self, Handle_IGESDimen_OrdinateDimension ent, Interface_EntityIterator iter)

        Lists the Entities shared by a OrdinateDimension <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_OrdinateDimension
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.IGESDimen_ToolOrdinateDimension_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDimen_ToolOrdinateDimension self, Handle_IGESDimen_OrdinateDimension ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_OrdinateDimension
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDimen.IGESDimen_ToolOrdinateDimension_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDimen_ToolOrdinateDimension self, Handle_IGESDimen_OrdinateDimension ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_OrdinateDimension
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDimen.IGESDimen_ToolOrdinateDimension_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDimen_ToolOrdinateDimension self, Handle_IGESDimen_OrdinateDimension entfrom, Handle_IGESDimen_OrdinateDimension entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDimen.Handle_IGESDimen_OrdinateDimension
        :type entto: OCC.wrapper.IGESDimen.Handle_IGESDimen_OrdinateDimension
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDimen.IGESDimen_ToolOrdinateDimension_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDimen_ToolOrdinateDimension self, Handle_IGESDimen_OrdinateDimension ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_OrdinateDimension
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDimen.IGESDimen_ToolOrdinateDimension_OwnDump(self, *args)

    __swig_destroy__ = _IGESDimen.delete_IGESDimen_ToolOrdinateDimension
IGESDimen_ToolOrdinateDimension_swigregister = _IGESDimen.IGESDimen_ToolOrdinateDimension_swigregister
IGESDimen_ToolOrdinateDimension_swigregister(IGESDimen_ToolOrdinateDimension)

class IGESDimen_ToolWitnessLine(object):
    """
    Tool to work on a WitnessLine. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDimen_ToolWitnessLine self) -> IGESDimen_ToolWitnessLine

        Returns a ToolWitnessLine, ready to work


        """
        this = _IGESDimen.new_IGESDimen_ToolWitnessLine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDimen_ToolWitnessLine self, Handle_IGESDimen_WitnessLine ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_WitnessLine
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDimen.IGESDimen_ToolWitnessLine_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDimen_ToolWitnessLine self, Handle_IGESDimen_WitnessLine ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_WitnessLine
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDimen.IGESDimen_ToolWitnessLine_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDimen_ToolWitnessLine self, Handle_IGESDimen_WitnessLine ent, Interface_EntityIterator iter)

        Lists the Entities shared by a WitnessLine <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_WitnessLine
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.IGESDimen_ToolWitnessLine_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESDimen_ToolWitnessLine self, Handle_IGESDimen_WitnessLine ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a WitnessLine
        (LineFont forced to Rank = 1, DataType forced to 1)

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_WitnessLine
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.IGESDimen_ToolWitnessLine_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDimen_ToolWitnessLine self, Handle_IGESDimen_WitnessLine ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_WitnessLine
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDimen.IGESDimen_ToolWitnessLine_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDimen_ToolWitnessLine self, Handle_IGESDimen_WitnessLine ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_WitnessLine
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDimen.IGESDimen_ToolWitnessLine_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDimen_ToolWitnessLine self, Handle_IGESDimen_WitnessLine entfrom, Handle_IGESDimen_WitnessLine entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDimen.Handle_IGESDimen_WitnessLine
        :type entto: OCC.wrapper.IGESDimen.Handle_IGESDimen_WitnessLine
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDimen.IGESDimen_ToolWitnessLine_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDimen_ToolWitnessLine self, Handle_IGESDimen_WitnessLine ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDimen.Handle_IGESDimen_WitnessLine
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDimen.IGESDimen_ToolWitnessLine_OwnDump(self, *args)

    __swig_destroy__ = _IGESDimen.delete_IGESDimen_ToolWitnessLine
IGESDimen_ToolWitnessLine_swigregister = _IGESDimen.IGESDimen_ToolWitnessLine_swigregister
IGESDimen_ToolWitnessLine_swigregister(IGESDimen_ToolWitnessLine)

class Handle_IGESDimen_Section(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDimen_Section self)

        Nullify the handle


        """
        return _IGESDimen.Handle_IGESDimen_Section_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDimen_Section self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDimen.Handle_IGESDimen_Section_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDimen_Section self, IGESDimen_Section thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDimen.Handle_IGESDimen_Section_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDimen_Section self, Handle_IGESDimen_Section theHandle) -> Handle_IGESDimen_Section
        assign(Handle_IGESDimen_Section self, IGESDimen_Section thePtr) -> Handle_IGESDimen_Section
        assign(Handle_IGESDimen_Section self, Handle_IGESDimen_Section theHandle) -> Handle_IGESDimen_Section

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDimen.Handle_IGESDimen_Section_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDimen_Section self) -> IGESDimen_Section

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_Section_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDimen_Section self) -> IGESDimen_Section

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_Section___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDimen_Section self) -> IGESDimen_Section

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDimen.Handle_IGESDimen_Section___ref__(self, *args)


    def __hash__(self):
        return _IGESDimen.Handle_IGESDimen_Section___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDimen.Handle_IGESDimen_Section___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDimen.new_Handle_IGESDimen_Section(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDimen.Handle_IGESDimen_Section_DownCast)
    __swig_destroy__ = _IGESDimen.delete_Handle_IGESDimen_Section

    def Init(self, *args):
        """
        Init(Handle_IGESDimen_Section self, Standard_Integer const dataType, Standard_Real const aDisp, Handle_TColgp_HArray1OfXY dataPoints)

        This method is used to set the fields of the class
        Section
        - dataType   : Interpretation Flag, always = 1
        - aDisp      : Common z displacement
        - dataPoints : Data points

        :type dataType: int
        :type aDisp: float
        :type dataPoints: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfXY

        """
        return _IGESDimen.Handle_IGESDimen_Section_Init(self, *args)


    def SetFormNumber(self, *args):
        """
        SetFormNumber(Handle_IGESDimen_Section self, Standard_Integer const form)

        Changes FormNumber (indicates the Type of the Hatches)
        Error if not in range [31-38]

        :type form: int

        """
        return _IGESDimen.Handle_IGESDimen_Section_SetFormNumber(self, *args)


    def Datatype(self, *args):
        """
        Datatype(Handle_IGESDimen_Section self) -> Standard_Integer

        returns Interpretation Flag, always = 1

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_Section_Datatype(self, *args)


    def NbPoints(self, *args):
        """
        NbPoints(Handle_IGESDimen_Section self) -> Standard_Integer

        returns number of Data Points

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_Section_NbPoints(self, *args)


    def ZDisplacement(self, *args):
        """
        ZDisplacement(Handle_IGESDimen_Section self) -> Standard_Real

        returns common Z displacement

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_Section_ZDisplacement(self, *args)


    def Point(self, *args):
        """
        Point(Handle_IGESDimen_Section self, Standard_Integer const Index) -> gp_Pnt

        returns Index'th data point
        raises exception if Index <= 0 or Index > NbPoints()

        :type Index: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.Handle_IGESDimen_Section_Point(self, *args)


    def TransformedPoint(self, *args):
        """
        TransformedPoint(Handle_IGESDimen_Section self, Standard_Integer const Index) -> gp_Pnt

        returns Index'th data point after Transformation
        raises exception if Index <= 0 or Index > NbPoints()

        :type Index: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESDimen.Handle_IGESDimen_Section_TransformedPoint(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDimen_Section self) -> char const *

        :rtype: const char *

        """
        return _IGESDimen.Handle_IGESDimen_Section_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_Section_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_Section_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDimen_Section self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDimen.Handle_IGESDimen_Section_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDimen_Section self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_Section_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDimen_Section self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_Section_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDimen_Section self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_Section_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDimen_Section self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_Section_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDimen_Section self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_Section_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDimen_Section self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_Section_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDimen_Section self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_Section_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDimen_Section self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDimen.Handle_IGESDimen_Section_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDimen_Section self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_Section_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDimen_Section self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_Section_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDimen_Section self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDimen.Handle_IGESDimen_Section_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDimen_Section self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_Section_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDimen_Section self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_Section_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDimen_Section self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_Section_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDimen_Section self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_Section_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDimen_Section self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_Section_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDimen_Section self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_Section_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDimen_Section self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_Section_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDimen_Section self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDimen.Handle_IGESDimen_Section_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDimen_Section self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_Section_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDimen_Section self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_Section_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDimen_Section self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_Section_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDimen_Section self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_Section_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDimen_Section self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_Section_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDimen_Section self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_Section_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDimen_Section self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_Section_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDimen_Section self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_Section_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDimen_Section self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDimen.Handle_IGESDimen_Section_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDimen_Section self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_Section_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDimen_Section self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_Section_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDimen_Section self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_Section_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDimen_Section self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_Section_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDimen_Section self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_Section_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDimen_Section self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_Section_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDimen_Section self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_Section_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDimen_Section self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_Section_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDimen_Section self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_Section_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDimen_Section self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDimen.Handle_IGESDimen_Section_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDimen_Section self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_Section_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDimen_Section self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDimen.Handle_IGESDimen_Section_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDimen_Section self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDimen.Handle_IGESDimen_Section_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDimen_Section self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDimen.Handle_IGESDimen_Section_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDimen_Section self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_Section_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDimen_Section self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_Section_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDimen_Section self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_Section_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDimen_Section self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_Section_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDimen_Section self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_Section_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDimen_Section self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_Section_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDimen_Section self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_Section_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDimen_Section self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_Section_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDimen_Section self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_Section_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDimen_Section self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_Section_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDimen_Section self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_Section_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDimen_Section self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_Section_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDimen_Section self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_Section_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDimen_Section self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_Section_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDimen_Section self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_Section_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDimen_Section self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_Section_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDimen_Section self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_Section_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDimen_Section self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_Section_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDimen_Section self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_Section_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDimen_Section self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_Section_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDimen_Section self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_Section_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDimen_Section self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDimen.Handle_IGESDimen_Section_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDimen_Section self)

        Memory deallocator for transient classes


        """
        return _IGESDimen.Handle_IGESDimen_Section_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDimen_Section self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDimen_Section self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_Section_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDimen_Section self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDimen_Section self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_Section_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDimen_Section self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDimen.Handle_IGESDimen_Section_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDimen_Section self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_Section_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDimen_Section self)

        Increments the reference counter of this object


        """
        return _IGESDimen.Handle_IGESDimen_Section_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDimen_Section self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_Section_DecrementRefCounter(self, *args)

Handle_IGESDimen_Section_swigregister = _IGESDimen.Handle_IGESDimen_Section_swigregister
Handle_IGESDimen_Section_swigregister(Handle_IGESDimen_Section)

def Handle_IGESDimen_Section_DownCast(thing):
    return _IGESDimen.Handle_IGESDimen_Section_DownCast(thing)
Handle_IGESDimen_Section_DownCast = _IGESDimen.Handle_IGESDimen_Section_DownCast

class Handle_IGESDimen_DimensionDisplayData(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDimen_DimensionDisplayData self)

        Nullify the handle


        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDimen_DimensionDisplayData self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDimen_DimensionDisplayData self, IGESDimen_DimensionDisplayData thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDimen_DimensionDisplayData self, Handle_IGESDimen_DimensionDisplayData theHandle) -> Handle_IGESDimen_DimensionDisplayData
        assign(Handle_IGESDimen_DimensionDisplayData self, IGESDimen_DimensionDisplayData thePtr) -> Handle_IGESDimen_DimensionDisplayData
        assign(Handle_IGESDimen_DimensionDisplayData self, Handle_IGESDimen_DimensionDisplayData theHandle) -> Handle_IGESDimen_DimensionDisplayData

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDimen_DimensionDisplayData self) -> IGESDimen_DimensionDisplayData

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDimen_DimensionDisplayData self) -> IGESDimen_DimensionDisplayData

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDimen_DimensionDisplayData self) -> IGESDimen_DimensionDisplayData

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData___ref__(self, *args)


    def __hash__(self):
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDimen.Handle_IGESDimen_DimensionDisplayData___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDimen.new_Handle_IGESDimen_DimensionDisplayData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDimen.Handle_IGESDimen_DimensionDisplayData_DownCast)
    __swig_destroy__ = _IGESDimen.delete_Handle_IGESDimen_DimensionDisplayData

    def Init(self, *args):
        """
        Init(Handle_IGESDimen_DimensionDisplayData self, Standard_Integer const numProps, Standard_Integer const aDimType, Standard_Integer const aLabelPos, Standard_Integer const aCharSet, Handle_TCollection_HAsciiString aString, Standard_Integer const aSymbol, Standard_Real const anAng, Standard_Integer const anAlign, Standard_Integer const aLevel, Standard_Integer const aPlace, Standard_Integer const anOrient, Standard_Real const initVal, Handle_TColStd_HArray1OfInteger notes, Handle_TColStd_HArray1OfInteger startInd, Handle_TColStd_HArray1OfInteger endInd)

        :type numProps: int
        :type aDimType: int
        :type aLabelPos: int
        :type aCharSet: int
        :type aString: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aSymbol: int
        :type anAng: float
        :type anAlign: int
        :type aLevel: int
        :type aPlace: int
        :type anOrient: int
        :type initVal: float
        :type notes: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type startInd: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type endInd: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(Handle_IGESDimen_DimensionDisplayData self) -> Standard_Integer

        returns the number of property values (14)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_NbPropertyValues(self, *args)


    def DimensionType(self, *args):
        """
        DimensionType(Handle_IGESDimen_DimensionDisplayData self) -> Standard_Integer

        returns the dimension type

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_DimensionType(self, *args)


    def LabelPosition(self, *args):
        """
        LabelPosition(Handle_IGESDimen_DimensionDisplayData self) -> Standard_Integer

        returns the preferred label position

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_LabelPosition(self, *args)


    def CharacterSet(self, *args):
        """
        CharacterSet(Handle_IGESDimen_DimensionDisplayData self) -> Standard_Integer

        returns the character set interpretation

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_CharacterSet(self, *args)


    def LString(self, *args):
        """
        LString(Handle_IGESDimen_DimensionDisplayData self) -> Handle_TCollection_HAsciiString

        returns e.g., 8HDIAMETER

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_LString(self, *args)


    def DecimalSymbol(self, *args):
        """
        DecimalSymbol(Handle_IGESDimen_DimensionDisplayData self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_DecimalSymbol(self, *args)


    def WitnessLineAngle(self, *args):
        """
        WitnessLineAngle(Handle_IGESDimen_DimensionDisplayData self) -> Standard_Real

        returns the witness line angle in radians

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_WitnessLineAngle(self, *args)


    def TextAlignment(self, *args):
        """
        TextAlignment(Handle_IGESDimen_DimensionDisplayData self) -> Standard_Integer

        returns the text alignment

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_TextAlignment(self, *args)


    def TextLevel(self, *args):
        """
        TextLevel(Handle_IGESDimen_DimensionDisplayData self) -> Standard_Integer

        returns the text level

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_TextLevel(self, *args)


    def TextPlacement(self, *args):
        """
        TextPlacement(Handle_IGESDimen_DimensionDisplayData self) -> Standard_Integer

        returns the preferred text placement

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_TextPlacement(self, *args)


    def ArrowHeadOrientation(self, *args):
        """
        ArrowHeadOrientation(Handle_IGESDimen_DimensionDisplayData self) -> Standard_Integer

        returns the arrowhead orientation

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_ArrowHeadOrientation(self, *args)


    def InitialValue(self, *args):
        """
        InitialValue(Handle_IGESDimen_DimensionDisplayData self) -> Standard_Real

        returns the primary dimension initial value

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_InitialValue(self, *args)


    def NbSupplementaryNotes(self, *args):
        """
        NbSupplementaryNotes(Handle_IGESDimen_DimensionDisplayData self) -> Standard_Integer

        returns the number of supplementary notes or zero

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_NbSupplementaryNotes(self, *args)


    def SupplementaryNote(self, *args):
        """
        SupplementaryNote(Handle_IGESDimen_DimensionDisplayData self, Standard_Integer const Index) -> Standard_Integer

        returns the Index'th supplementary note
        raises exception if Index <= 0 or Index > NbSupplementaryNotes()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_SupplementaryNote(self, *args)


    def StartIndex(self, *args):
        """
        StartIndex(Handle_IGESDimen_DimensionDisplayData self, Standard_Integer const Index) -> Standard_Integer

        returns the Index'th note start index
        raises exception if Index <= 0 or Index > NbSupplementaryNotes()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_StartIndex(self, *args)


    def EndIndex(self, *args):
        """
        EndIndex(Handle_IGESDimen_DimensionDisplayData self, Standard_Integer const Index) -> Standard_Integer

        returns the Index'th note end index
        raises exception if Index <= 0 or Index > NbSupplemetaryNotes()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_EndIndex(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDimen_DimensionDisplayData self) -> char const *

        :rtype: const char *

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_DimensionDisplayData_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDimen.Handle_IGESDimen_DimensionDisplayData_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDimen_DimensionDisplayData self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDimen_DimensionDisplayData self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDimen_DimensionDisplayData self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDimen_DimensionDisplayData self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDimen_DimensionDisplayData self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDimen_DimensionDisplayData self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDimen_DimensionDisplayData self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDimen_DimensionDisplayData self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDimen_DimensionDisplayData self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDimen_DimensionDisplayData self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDimen_DimensionDisplayData self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDimen_DimensionDisplayData self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDimen_DimensionDisplayData self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDimen_DimensionDisplayData self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDimen_DimensionDisplayData self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDimen_DimensionDisplayData self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDimen_DimensionDisplayData self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDimen_DimensionDisplayData self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDimen_DimensionDisplayData self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDimen_DimensionDisplayData self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDimen_DimensionDisplayData self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDimen_DimensionDisplayData self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDimen_DimensionDisplayData self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDimen_DimensionDisplayData self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDimen_DimensionDisplayData self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDimen_DimensionDisplayData self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDimen_DimensionDisplayData self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDimen_DimensionDisplayData self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDimen_DimensionDisplayData self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDimen_DimensionDisplayData self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDimen_DimensionDisplayData self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDimen_DimensionDisplayData self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDimen_DimensionDisplayData self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDimen_DimensionDisplayData self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDimen_DimensionDisplayData self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDimen_DimensionDisplayData self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDimen_DimensionDisplayData self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDimen_DimensionDisplayData self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDimen_DimensionDisplayData self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDimen_DimensionDisplayData self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDimen_DimensionDisplayData self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDimen_DimensionDisplayData self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDimen_DimensionDisplayData self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDimen_DimensionDisplayData self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDimen_DimensionDisplayData self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDimen_DimensionDisplayData self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDimen_DimensionDisplayData self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDimen_DimensionDisplayData self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDimen_DimensionDisplayData self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDimen_DimensionDisplayData self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDimen_DimensionDisplayData self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDimen_DimensionDisplayData self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDimen_DimensionDisplayData self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDimen_DimensionDisplayData self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDimen_DimensionDisplayData self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDimen_DimensionDisplayData self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDimen_DimensionDisplayData self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDimen_DimensionDisplayData self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDimen_DimensionDisplayData self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDimen_DimensionDisplayData self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDimen_DimensionDisplayData self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDimen_DimensionDisplayData self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDimen_DimensionDisplayData self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDimen_DimensionDisplayData self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDimen_DimensionDisplayData self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDimen_DimensionDisplayData self)

        Memory deallocator for transient classes


        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDimen_DimensionDisplayData self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDimen_DimensionDisplayData self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDimen_DimensionDisplayData self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDimen_DimensionDisplayData self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDimen_DimensionDisplayData self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDimen_DimensionDisplayData self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDimen_DimensionDisplayData self)

        Increments the reference counter of this object


        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDimen_DimensionDisplayData self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_DecrementRefCounter(self, *args)

Handle_IGESDimen_DimensionDisplayData_swigregister = _IGESDimen.Handle_IGESDimen_DimensionDisplayData_swigregister
Handle_IGESDimen_DimensionDisplayData_swigregister(Handle_IGESDimen_DimensionDisplayData)

def Handle_IGESDimen_DimensionDisplayData_DownCast(thing):
    return _IGESDimen.Handle_IGESDimen_DimensionDisplayData_DownCast(thing)
Handle_IGESDimen_DimensionDisplayData_DownCast = _IGESDimen.Handle_IGESDimen_DimensionDisplayData_DownCast



