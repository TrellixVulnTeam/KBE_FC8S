# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Vrml')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Vrml')
    _Vrml = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Vrml', [dirname(__file__)])
        except ImportError:
            import _Vrml
            return _Vrml
        try:
            _mod = imp.load_module('_Vrml', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Vrml = swig_import_helper()
    del swig_import_helper
else:
    import _Vrml
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Vrml.delete_SwigPyIterator

    def value(self):
        return _Vrml.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Vrml.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Vrml.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Vrml.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Vrml.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Vrml.SwigPyIterator_copy(self)

    def next(self):
        return _Vrml.SwigPyIterator_next(self)

    def __next__(self):
        return _Vrml.SwigPyIterator___next__(self)

    def previous(self):
        return _Vrml.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Vrml.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Vrml.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Vrml.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Vrml.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Vrml.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Vrml.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Vrml.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Vrml.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _Vrml.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_Vrml.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _Vrml.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _Vrml.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Vrml.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _Vrml.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _Vrml.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _Vrml.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _Vrml.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_Vrml.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _Vrml.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _Vrml.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Vrml.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _Vrml.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _Vrml.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _Vrml.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _Vrml.ptr_to_number(item)
ptr_to_number = _Vrml.ptr_to_number

def HashCode(*args):
    return _Vrml.HashCode(*args)
HashCode = _Vrml.HashCode

def ptr_equal(a, b):
    return _Vrml.ptr_equal(a, b)
ptr_equal = _Vrml.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
Vrml_LEFT = _Vrml.Vrml_LEFT
Vrml_CENTER = _Vrml.Vrml_CENTER
Vrml_RIGHT = _Vrml.Vrml_RIGHT
Vrml_ConeSIDES = _Vrml.Vrml_ConeSIDES
Vrml_ConeBOTTOM = _Vrml.Vrml_ConeBOTTOM
Vrml_ConeALL = _Vrml.Vrml_ConeALL
Vrml_CylinderSIDES = _Vrml.Vrml_CylinderSIDES
Vrml_CylinderTOP = _Vrml.Vrml_CylinderTOP
Vrml_CylinderBOTTOM = _Vrml.Vrml_CylinderBOTTOM
Vrml_CylinderALL = _Vrml.Vrml_CylinderALL
Vrml_UNKNOWN_FACE_TYPE = _Vrml.Vrml_UNKNOWN_FACE_TYPE
Vrml_CONVEX = _Vrml.Vrml_CONVEX
Vrml_SERIF = _Vrml.Vrml_SERIF
Vrml_SANS = _Vrml.Vrml_SANS
Vrml_TYPEWRITER = _Vrml.Vrml_TYPEWRITER
Vrml_NONE = _Vrml.Vrml_NONE
Vrml_BOLD = _Vrml.Vrml_BOLD
Vrml_ITALIC = _Vrml.Vrml_ITALIC
Vrml_DEFAULT = _Vrml.Vrml_DEFAULT
Vrml_OVERALL = _Vrml.Vrml_OVERALL
Vrml_PER_PART = _Vrml.Vrml_PER_PART
Vrml_PER_PART_INDEXED = _Vrml.Vrml_PER_PART_INDEXED
Vrml_PER_FACE = _Vrml.Vrml_PER_FACE
Vrml_PER_FACE_INDEXED = _Vrml.Vrml_PER_FACE_INDEXED
Vrml_PER_VERTEX = _Vrml.Vrml_PER_VERTEX
Vrml_PER_VERTEX_INDEXED = _Vrml.Vrml_PER_VERTEX_INDEXED
Vrml_OFF = _Vrml.Vrml_OFF
Vrml_ON = _Vrml.Vrml_ON
Vrml_AUTO = _Vrml.Vrml_AUTO
Vrml_NULL = _Vrml.Vrml_NULL
Vrml_ONE = _Vrml.Vrml_ONE
Vrml_TWO = _Vrml.Vrml_TWO
Vrml_THREE = _Vrml.Vrml_THREE
Vrml_FOUR = _Vrml.Vrml_FOUR
Vrml_UNKNOWN_ORDERING = _Vrml.Vrml_UNKNOWN_ORDERING
Vrml_CLOCKWISE = _Vrml.Vrml_CLOCKWISE
Vrml_COUNTERCLOCKWISE = _Vrml.Vrml_COUNTERCLOCKWISE
Vrml_UNKNOWN_SHAPE_TYPE = _Vrml.Vrml_UNKNOWN_SHAPE_TYPE
Vrml_SOLID = _Vrml.Vrml_SOLID
Vrml_REPEAT = _Vrml.Vrml_REPEAT
Vrml_CLAMP = _Vrml.Vrml_CLAMP
Vrml_MAP_NONE = _Vrml.Vrml_MAP_NONE
Vrml_POINT = _Vrml.Vrml_POINT
class Vrml_AsciiText(Standard.Standard_Transient):
    """
    defines a AsciiText node of VRML specifying geometry shapes.
    This  node  represents  strings  of  text  characters  from  ASCII  coded
    character  set. All subsequent strings advance y by -( size * spacing).
    The justification field determines the placement of the strings in the x
    dimension. LEFT (the default) places the left edge of each string at x=0.
    CENTER places the center of each string at x=0. RIGHT places the right edge
    of each string at x=0. Text is rendered from left to right, top to
    bottom in the font set by FontStyle.
    The  default  value  for  the  wigth  field  indicates  the  natural  width
    should  be  used  for  that  string.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Vrml_AsciiText
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Vrml_AsciiText(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Vrml_AsciiText self) -> Vrml_AsciiText
        __init__(Vrml_AsciiText self, Handle_TColStd_HArray1OfAsciiString aString, Standard_Real const aSpacing, Vrml_AsciiTextJustification const aJustification, Standard_Real const aWidth) -> Vrml_AsciiText

        :type aString: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfAsciiString
        :type aSpacing: float
        :type aJustification: OCC.wrapper.Vrml.Vrml_AsciiTextJustification
        :type aWidth: float

        """
        this = _Vrml.new_Vrml_AsciiText(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetString(self, *args):
        """
        SetString(Vrml_AsciiText self, Handle_TColStd_HArray1OfAsciiString aString)

        :type aString: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfAsciiString

        """
        return _Vrml.Vrml_AsciiText_SetString(self, *args)


    def String(self, *args):
        """
        String(Vrml_AsciiText self) -> Handle_TColStd_HArray1OfAsciiString

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfAsciiString

        """
        return _Vrml.Vrml_AsciiText_String(self, *args)


    def SetSpacing(self, *args):
        """
        SetSpacing(Vrml_AsciiText self, Standard_Real const aSpacing)

        :type aSpacing: float

        """
        return _Vrml.Vrml_AsciiText_SetSpacing(self, *args)


    def Spacing(self, *args):
        """
        Spacing(Vrml_AsciiText self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Vrml.Vrml_AsciiText_Spacing(self, *args)


    def SetJustification(self, *args):
        """
        SetJustification(Vrml_AsciiText self, Vrml_AsciiTextJustification const aJustification)

        :type aJustification: OCC.wrapper.Vrml.Vrml_AsciiTextJustification

        """
        return _Vrml.Vrml_AsciiText_SetJustification(self, *args)


    def Justification(self, *args):
        """
        Justification(Vrml_AsciiText self) -> Vrml_AsciiTextJustification

        :rtype: OCC.wrapper.Vrml.Vrml_AsciiTextJustification

        """
        return _Vrml.Vrml_AsciiText_Justification(self, *args)


    def SetWidth(self, *args):
        """
        SetWidth(Vrml_AsciiText self, Standard_Real const aWidth)

        :type aWidth: float

        """
        return _Vrml.Vrml_AsciiText_SetWidth(self, *args)


    def Width(self, *args):
        """
        Width(Vrml_AsciiText self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Vrml.Vrml_AsciiText_Width(self, *args)


    def Print(self, *args):
        """
        Print(Vrml_AsciiText self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Vrml_AsciiText_Print(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Vrml.Vrml_AsciiText_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Vrml.Vrml_AsciiText_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Vrml.Vrml_AsciiText_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Vrml.delete_Vrml_AsciiText
Vrml_AsciiText_swigregister = _Vrml.Vrml_AsciiText_swigregister
Vrml_AsciiText_swigregister(Vrml_AsciiText)

def Vrml_AsciiText_get_type_name(*args):
    """
    Vrml_AsciiText_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Vrml.Vrml_AsciiText_get_type_name(*args)

def Vrml_AsciiText_get_type_descriptor(*args):
    """
    Vrml_AsciiText_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Vrml.Vrml_AsciiText_get_type_descriptor(*args)

class Vrml_TextureCoordinate2(Standard.Standard_Transient):
    """
    defines a TextureCoordinate2 node of VRML specifying properties of geometry
    and its appearance.
    This  node  defines  a  set  of  2D  coordinates  to  be  used  to  map  textures
    to  the  vertices  of  subsequent  PointSet,  IndexedLineSet,  or  IndexedFaceSet
    objects.  It  replaces  the  current  texture  coordinates  in  the  rendering
    state  for  the  shapes  to  use.
    Texture  coordinates  range  from  0  to  1  across  the  texture.
    The  horizontal  coordinate,  called  S,  is  specified  first,  followed
    by  vertical  coordinate,  T.
    By  default  :
    myPoint (0 0)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Vrml_TextureCoordinate2
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Vrml_TextureCoordinate2(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Vrml_TextureCoordinate2 self) -> Vrml_TextureCoordinate2
        __init__(Vrml_TextureCoordinate2 self, Handle_TColgp_HArray1OfVec2d aPoint) -> Vrml_TextureCoordinate2

        :type aPoint: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfVec2d

        """
        this = _Vrml.new_Vrml_TextureCoordinate2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetPoint(self, *args):
        """
        SetPoint(Vrml_TextureCoordinate2 self, Handle_TColgp_HArray1OfVec2d aPoint)

        :type aPoint: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfVec2d

        """
        return _Vrml.Vrml_TextureCoordinate2_SetPoint(self, *args)


    def Point(self, *args):
        """
        Point(Vrml_TextureCoordinate2 self) -> Handle_TColgp_HArray1OfVec2d

        :rtype: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfVec2d

        """
        return _Vrml.Vrml_TextureCoordinate2_Point(self, *args)


    def Print(self, *args):
        """
        Print(Vrml_TextureCoordinate2 self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Vrml_TextureCoordinate2_Print(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Vrml.Vrml_TextureCoordinate2_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Vrml.Vrml_TextureCoordinate2_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Vrml.Vrml_TextureCoordinate2_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Vrml.delete_Vrml_TextureCoordinate2
Vrml_TextureCoordinate2_swigregister = _Vrml.Vrml_TextureCoordinate2_swigregister
Vrml_TextureCoordinate2_swigregister(Vrml_TextureCoordinate2)

def Vrml_TextureCoordinate2_get_type_name(*args):
    """
    Vrml_TextureCoordinate2_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Vrml.Vrml_TextureCoordinate2_get_type_name(*args)

def Vrml_TextureCoordinate2_get_type_descriptor(*args):
    """
    Vrml_TextureCoordinate2_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Vrml.Vrml_TextureCoordinate2_get_type_descriptor(*args)

class Vrml_Normal(Standard.Standard_Transient):
    """
    defines a Normal node of VRML specifying properties of geometry
    and its appearance.
    This node defines a set of 3D surface normal vectors to be used by vertex-based shape
    nodes (IndexedFaceSet, IndexedLineSet, PointSet) that follow it in the scene graph. This
    node does not produce a visible result during rendering; it simply replaces the current
    normals in the rendering state for subsequent nodes to use. This node contains one
    multiple-valued field that contains the normal vectors.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Vrml_Normal
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Vrml_Normal(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Vrml_Normal self, Handle_TColgp_HArray1OfVec aVector) -> Vrml_Normal
        __init__(Vrml_Normal self) -> Vrml_Normal

        :type aVector: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfVec

        """
        this = _Vrml.new_Vrml_Normal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetVector(self, *args):
        """
        SetVector(Vrml_Normal self, Handle_TColgp_HArray1OfVec aVector)

        :type aVector: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfVec

        """
        return _Vrml.Vrml_Normal_SetVector(self, *args)


    def Vector(self, *args):
        """
        Vector(Vrml_Normal self) -> Handle_TColgp_HArray1OfVec

        :rtype: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfVec

        """
        return _Vrml.Vrml_Normal_Vector(self, *args)


    def Print(self, *args):
        """
        Print(Vrml_Normal self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Vrml_Normal_Print(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Vrml.Vrml_Normal_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Vrml.Vrml_Normal_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Vrml.Vrml_Normal_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Vrml.delete_Vrml_Normal
Vrml_Normal_swigregister = _Vrml.Vrml_Normal_swigregister
Vrml_Normal_swigregister(Vrml_Normal)

def Vrml_Normal_get_type_name(*args):
    """
    Vrml_Normal_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Vrml.Vrml_Normal_get_type_name(*args)

def Vrml_Normal_get_type_descriptor(*args):
    """
    Vrml_Normal_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Vrml.Vrml_Normal_get_type_descriptor(*args)

class Vrml_IndexedFaceSet(Standard.Standard_Transient):
    """
    defines a IndexedFaceSet node of VRML specifying geometry shapes.
    This node represents a 3D shape formed by constructing faces (polygons) from
    vertices located at the current coordinates. IndexedFaceSet uses the indices
    in its coordIndex to define polygonal faces. An index of -1 separates faces
    (so a -1 at the end of the list is optional).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Vrml_IndexedFaceSet
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Vrml_IndexedFaceSet(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Vrml_IndexedFaceSet self, Handle_TColStd_HArray1OfInteger aCoordIndex, Handle_TColStd_HArray1OfInteger aMaterialIndex, Handle_TColStd_HArray1OfInteger aNormalIndex, Handle_TColStd_HArray1OfInteger aTextureCoordIndex) -> Vrml_IndexedFaceSet
        __init__(Vrml_IndexedFaceSet self) -> Vrml_IndexedFaceSet

        :type aCoordIndex: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type aMaterialIndex: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type aNormalIndex: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type aTextureCoordIndex: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        this = _Vrml.new_Vrml_IndexedFaceSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetCoordIndex(self, *args):
        """
        SetCoordIndex(Vrml_IndexedFaceSet self, Handle_TColStd_HArray1OfInteger aCoordIndex)

        :type aCoordIndex: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _Vrml.Vrml_IndexedFaceSet_SetCoordIndex(self, *args)


    def CoordIndex(self, *args):
        """
        CoordIndex(Vrml_IndexedFaceSet self) -> Handle_TColStd_HArray1OfInteger

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _Vrml.Vrml_IndexedFaceSet_CoordIndex(self, *args)


    def SetMaterialIndex(self, *args):
        """
        SetMaterialIndex(Vrml_IndexedFaceSet self, Handle_TColStd_HArray1OfInteger aMaterialIndex)

        :type aMaterialIndex: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _Vrml.Vrml_IndexedFaceSet_SetMaterialIndex(self, *args)


    def MaterialIndex(self, *args):
        """
        MaterialIndex(Vrml_IndexedFaceSet self) -> Handle_TColStd_HArray1OfInteger

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _Vrml.Vrml_IndexedFaceSet_MaterialIndex(self, *args)


    def SetNormalIndex(self, *args):
        """
        SetNormalIndex(Vrml_IndexedFaceSet self, Handle_TColStd_HArray1OfInteger aNormalIndex)

        :type aNormalIndex: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _Vrml.Vrml_IndexedFaceSet_SetNormalIndex(self, *args)


    def NormalIndex(self, *args):
        """
        NormalIndex(Vrml_IndexedFaceSet self) -> Handle_TColStd_HArray1OfInteger

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _Vrml.Vrml_IndexedFaceSet_NormalIndex(self, *args)


    def SetTextureCoordIndex(self, *args):
        """
        SetTextureCoordIndex(Vrml_IndexedFaceSet self, Handle_TColStd_HArray1OfInteger aTextureCoordIndex)

        :type aTextureCoordIndex: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _Vrml.Vrml_IndexedFaceSet_SetTextureCoordIndex(self, *args)


    def TextureCoordIndex(self, *args):
        """
        TextureCoordIndex(Vrml_IndexedFaceSet self) -> Handle_TColStd_HArray1OfInteger

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _Vrml.Vrml_IndexedFaceSet_TextureCoordIndex(self, *args)


    def Print(self, *args):
        """
        Print(Vrml_IndexedFaceSet self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Vrml_IndexedFaceSet_Print(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Vrml.Vrml_IndexedFaceSet_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Vrml.Vrml_IndexedFaceSet_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Vrml.Vrml_IndexedFaceSet_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Vrml.delete_Vrml_IndexedFaceSet
Vrml_IndexedFaceSet_swigregister = _Vrml.Vrml_IndexedFaceSet_swigregister
Vrml_IndexedFaceSet_swigregister(Vrml_IndexedFaceSet)

def Vrml_IndexedFaceSet_get_type_name(*args):
    """
    Vrml_IndexedFaceSet_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Vrml.Vrml_IndexedFaceSet_get_type_name(*args)

def Vrml_IndexedFaceSet_get_type_descriptor(*args):
    """
    Vrml_IndexedFaceSet_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Vrml.Vrml_IndexedFaceSet_get_type_descriptor(*args)

class Vrml_LOD(Standard.Standard_Transient):
    """
    defines a LOD (level of detailization) node of VRML specifying properties
    of geometry  and its appearance.
    This  group  node  is  used  to  allow  applications  to  switch  between
    various  representations  of  objects  automatically. The  children  of  this
    node  typically  represent  the  same  object  or  objects  at  the  varying
    of  Levels  Of  Detail  (LOD),  from  highest  detail  to  lowest.

    The  specified  center  point  of  the  LOD  is  transformed  by  current
    transformation  into  world  space,  and  yhe  distancefrom  the  transformed
    center  to  the  world-space  eye  point  is  calculated.
    If  thedistance  is  less  than  the  first  value  in  the  ranges  array,
    than  the  first  child  of  the  LOD  group  is  drawn.  If  between
    the  first  and  second  values  in  the  range  array,  the  second  child
    is  drawn,  etc.
    If  there  are  N  values  in  the  range  array,  the  LOD  group  should
    have  N+1  children.
    Specifying  too  few  children  will  result  in  the  last  child  being
    used  repeatedly  for  the  lowest  lewels  of  detail;  if  too  many  children
    are  specified,  the  extra  children  w ll  be  ignored.
    Each  value  in  the  ranges  array  should  be  greater  than  the previous
    value,  otherwise  results  are  undefined.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Vrml_LOD
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Vrml_LOD(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Vrml_LOD self) -> Vrml_LOD
        __init__(Vrml_LOD self, Handle_TColStd_HArray1OfReal aRange, gp_Vec aCenter) -> Vrml_LOD

        :type aRange: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type aCenter: OCC.wrapper.gp.gp_Vec

        """
        this = _Vrml.new_Vrml_LOD(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetRange(self, *args):
        """
        SetRange(Vrml_LOD self, Handle_TColStd_HArray1OfReal aRange)

        :type aRange: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _Vrml.Vrml_LOD_SetRange(self, *args)


    def Range(self, *args):
        """
        Range(Vrml_LOD self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _Vrml.Vrml_LOD_Range(self, *args)


    def SetCenter(self, *args):
        """
        SetCenter(Vrml_LOD self, gp_Vec aCenter)

        :type aCenter: OCC.wrapper.gp.gp_Vec

        """
        return _Vrml.Vrml_LOD_SetCenter(self, *args)


    def Center(self, *args):
        """
        Center(Vrml_LOD self) -> gp_Vec

        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _Vrml.Vrml_LOD_Center(self, *args)


    def Print(self, *args):
        """
        Print(Vrml_LOD self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Vrml_LOD_Print(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Vrml.Vrml_LOD_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Vrml.Vrml_LOD_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Vrml.Vrml_LOD_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Vrml.delete_Vrml_LOD
Vrml_LOD_swigregister = _Vrml.Vrml_LOD_swigregister
Vrml_LOD_swigregister(Vrml_LOD)

def Vrml_LOD_get_type_name(*args):
    """
    Vrml_LOD_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Vrml.Vrml_LOD_get_type_name(*args)

def Vrml_LOD_get_type_descriptor(*args):
    """
    Vrml_LOD_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Vrml.Vrml_LOD_get_type_descriptor(*args)

class Vrml_Material(Standard.Standard_Transient):
    """
    defines a Material node of VRML specifying properties of geometry
    and its appearance.
    This node defines the current surface material properties for all subsequent shapes.
    Material sets several components of the current material during traversal. Different shapes
    interpret materials with multiple values differently. To bind materials to shapes, use a
    MaterialBinding node.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Vrml_Material
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Vrml_Material(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Vrml_Material self, Handle_Quantity_HArray1OfColor aAmbientColor, Handle_Quantity_HArray1OfColor aDiffuseColor, Handle_Quantity_HArray1OfColor aSpecularColor, Handle_Quantity_HArray1OfColor aEmissiveColor, Handle_TColStd_HArray1OfReal aShininess, Handle_TColStd_HArray1OfReal aTransparency) -> Vrml_Material
        __init__(Vrml_Material self) -> Vrml_Material

        :type aAmbientColor: OCC.wrapper.Quantity.Handle_Quantity_HArray1OfColor
        :type aDiffuseColor: OCC.wrapper.Quantity.Handle_Quantity_HArray1OfColor
        :type aSpecularColor: OCC.wrapper.Quantity.Handle_Quantity_HArray1OfColor
        :type aEmissiveColor: OCC.wrapper.Quantity.Handle_Quantity_HArray1OfColor
        :type aShininess: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type aTransparency: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        this = _Vrml.new_Vrml_Material(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetAmbientColor(self, *args):
        """
        SetAmbientColor(Vrml_Material self, Handle_Quantity_HArray1OfColor aAmbientColor)

        :type aAmbientColor: OCC.wrapper.Quantity.Handle_Quantity_HArray1OfColor

        """
        return _Vrml.Vrml_Material_SetAmbientColor(self, *args)


    def AmbientColor(self, *args):
        """
        AmbientColor(Vrml_Material self) -> Handle_Quantity_HArray1OfColor

        :rtype: OCC.wrapper.Quantity.Handle_Quantity_HArray1OfColor

        """
        return _Vrml.Vrml_Material_AmbientColor(self, *args)


    def SetDiffuseColor(self, *args):
        """
        SetDiffuseColor(Vrml_Material self, Handle_Quantity_HArray1OfColor aDiffuseColor)

        :type aDiffuseColor: OCC.wrapper.Quantity.Handle_Quantity_HArray1OfColor

        """
        return _Vrml.Vrml_Material_SetDiffuseColor(self, *args)


    def DiffuseColor(self, *args):
        """
        DiffuseColor(Vrml_Material self) -> Handle_Quantity_HArray1OfColor

        :rtype: OCC.wrapper.Quantity.Handle_Quantity_HArray1OfColor

        """
        return _Vrml.Vrml_Material_DiffuseColor(self, *args)


    def SetSpecularColor(self, *args):
        """
        SetSpecularColor(Vrml_Material self, Handle_Quantity_HArray1OfColor aSpecularColor)

        :type aSpecularColor: OCC.wrapper.Quantity.Handle_Quantity_HArray1OfColor

        """
        return _Vrml.Vrml_Material_SetSpecularColor(self, *args)


    def SpecularColor(self, *args):
        """
        SpecularColor(Vrml_Material self) -> Handle_Quantity_HArray1OfColor

        :rtype: OCC.wrapper.Quantity.Handle_Quantity_HArray1OfColor

        """
        return _Vrml.Vrml_Material_SpecularColor(self, *args)


    def SetEmissiveColor(self, *args):
        """
        SetEmissiveColor(Vrml_Material self, Handle_Quantity_HArray1OfColor aEmissiveColor)

        :type aEmissiveColor: OCC.wrapper.Quantity.Handle_Quantity_HArray1OfColor

        """
        return _Vrml.Vrml_Material_SetEmissiveColor(self, *args)


    def EmissiveColor(self, *args):
        """
        EmissiveColor(Vrml_Material self) -> Handle_Quantity_HArray1OfColor

        :rtype: OCC.wrapper.Quantity.Handle_Quantity_HArray1OfColor

        """
        return _Vrml.Vrml_Material_EmissiveColor(self, *args)


    def SetShininess(self, *args):
        """
        SetShininess(Vrml_Material self, Handle_TColStd_HArray1OfReal aShininess)

        :type aShininess: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _Vrml.Vrml_Material_SetShininess(self, *args)


    def Shininess(self, *args):
        """
        Shininess(Vrml_Material self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _Vrml.Vrml_Material_Shininess(self, *args)


    def SetTransparency(self, *args):
        """
        SetTransparency(Vrml_Material self, Handle_TColStd_HArray1OfReal aTransparency)

        :type aTransparency: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _Vrml.Vrml_Material_SetTransparency(self, *args)


    def Transparency(self, *args):
        """
        Transparency(Vrml_Material self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _Vrml.Vrml_Material_Transparency(self, *args)


    def Print(self, *args):
        """
        Print(Vrml_Material self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Vrml_Material_Print(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Vrml.Vrml_Material_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Vrml.Vrml_Material_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Vrml.Vrml_Material_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Vrml.delete_Vrml_Material
Vrml_Material_swigregister = _Vrml.Vrml_Material_swigregister
Vrml_Material_swigregister(Vrml_Material)

def Vrml_Material_get_type_name(*args):
    """
    Vrml_Material_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Vrml.Vrml_Material_get_type_name(*args)

def Vrml_Material_get_type_descriptor(*args):
    """
    Vrml_Material_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Vrml.Vrml_Material_get_type_descriptor(*args)

class Vrml_WWWAnchor(object):
    """
    defines a WWWAnchor node of VRML specifying group properties.
    The  WWWAnchor  group  node  loads  a  new  scene  into  a  VRML  browser
    when  one  of  its  children  is  closen.  Exactly  how  a  user  "chooses"
    a  child  of  the  WWWAnchor  is  up  to  the  VRML browser.
    WWWAnchor  with  an  empty  ("")  name  does  nothing  when  its
    children  are  chosen.
    WWWAnchor  behaves  like  a  Separator,  pushing  the  traversal  state
    before  traversing  its  children  and  popping  it  afterwards.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Vrml_WWWAnchor self, TCollection_AsciiString aName, TCollection_AsciiString aDescription, Vrml_WWWAnchorMap const aMap=Vrml_MAP_NONE) -> Vrml_WWWAnchor

        :type aName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type aDescription: OCC.wrapper.TCollection.TCollection_AsciiString
        :type aMap: OCC.wrapper.Vrml.Vrml_WWWAnchorMap

        """
        this = _Vrml.new_Vrml_WWWAnchor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetName(self, *args):
        """
        SetName(Vrml_WWWAnchor self, TCollection_AsciiString aName)

        :type aName: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Vrml.Vrml_WWWAnchor_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Vrml_WWWAnchor self) -> TCollection_AsciiString

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Vrml.Vrml_WWWAnchor_Name(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Vrml_WWWAnchor self, TCollection_AsciiString aDescription)

        :type aDescription: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Vrml.Vrml_WWWAnchor_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(Vrml_WWWAnchor self) -> TCollection_AsciiString

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Vrml.Vrml_WWWAnchor_Description(self, *args)


    def SetMap(self, *args):
        """
        SetMap(Vrml_WWWAnchor self, Vrml_WWWAnchorMap const aMap)

        :type aMap: OCC.wrapper.Vrml.Vrml_WWWAnchorMap

        """
        return _Vrml.Vrml_WWWAnchor_SetMap(self, *args)


    def Map(self, *args):
        """
        Map(Vrml_WWWAnchor self) -> Vrml_WWWAnchorMap

        :rtype: OCC.wrapper.Vrml.Vrml_WWWAnchorMap

        """
        return _Vrml.Vrml_WWWAnchor_Map(self, *args)


    def Print(self, *args):
        """
        Print(Vrml_WWWAnchor self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Vrml_WWWAnchor_Print(self, *args)

    __swig_destroy__ = _Vrml.delete_Vrml_WWWAnchor
Vrml_WWWAnchor_swigregister = _Vrml.Vrml_WWWAnchor_swigregister
Vrml_WWWAnchor_swigregister(Vrml_WWWAnchor)

class Vrml_Group(object):
    """
    defines a Group node of VRML specifying group properties.
    This node defines the base class for all group nodes. Group is a node that
    contains an ordered list of child nodes. This node is simply a container for
    the child nodes and does not alter the traversal state in any way.
    During traversal, state accumulated for a child is passed on to each successive
    child and then to the parents of the group (Group does not push or pop traversal
    state as separator does).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Vrml_Group self) -> Vrml_Group

        defines a Group node of VRML specifying group properties.
        This node defines the base class for all group nodes. Group is a node that
        contains an ordered list of child nodes. This node is simply a container for
        the child nodes and does not alter the traversal state in any way.
        During traversal, state accumulated for a child is passed on to each successive
        child and then to the parents of the group (Group does not push or pop traversal
        state as separator does).
        """
        this = _Vrml.new_Vrml_Group(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Print(self, *args):
        """
        Print(Vrml_Group self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Vrml_Group_Print(self, *args)

    __swig_destroy__ = _Vrml.delete_Vrml_Group
Vrml_Group_swigregister = _Vrml.Vrml_Group_swigregister
Vrml_Group_swigregister(Vrml_Group)

class Vrml_IndexedLineSet(Standard.Standard_Transient):
    """
    defines a IndexedLineSet node of VRML specifying geometry shapes.
    This node represents a 3D shape formed by constructing polylines from vertices
    located at the current coordinates. IndexedLineSet uses the indices in its coordIndex
    field to specify the polylines. An index of -1 separates one polyline from the next
    (thus, a final -1 is optional). the current polyline has ended and the next one begins.
    Treatment of the current material and normal binding is as follows: The PER_PART binding
    specifies a material or normal for each segment of the line. The PER_FACE binding
    specifies a material or normal for each polyline. PER_VERTEX specifies a material or
    normal for each vertex. The corresponding _INDEXED bindings are the same, but use
    the materialIndex or normalIndex indices. The DEFAULT material binding is equal
    to OVERALL. The DEFAULT normal binding is equal to  PER_VERTEX_INDEXED;
    if insufficient normals exist in the state, the lines will be drawn unlit. The same
    rules for texture coordinate generation as IndexedFaceSet are used.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Vrml_IndexedLineSet
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Vrml_IndexedLineSet(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Vrml_IndexedLineSet self, Handle_TColStd_HArray1OfInteger aCoordIndex, Handle_TColStd_HArray1OfInteger aMaterialIndex, Handle_TColStd_HArray1OfInteger aNormalIndex, Handle_TColStd_HArray1OfInteger aTextureCoordIndex) -> Vrml_IndexedLineSet
        __init__(Vrml_IndexedLineSet self) -> Vrml_IndexedLineSet

        :type aCoordIndex: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type aMaterialIndex: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type aNormalIndex: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type aTextureCoordIndex: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        this = _Vrml.new_Vrml_IndexedLineSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetCoordIndex(self, *args):
        """
        SetCoordIndex(Vrml_IndexedLineSet self, Handle_TColStd_HArray1OfInteger aCoordIndex)

        :type aCoordIndex: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _Vrml.Vrml_IndexedLineSet_SetCoordIndex(self, *args)


    def CoordIndex(self, *args):
        """
        CoordIndex(Vrml_IndexedLineSet self) -> Handle_TColStd_HArray1OfInteger

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _Vrml.Vrml_IndexedLineSet_CoordIndex(self, *args)


    def SetMaterialIndex(self, *args):
        """
        SetMaterialIndex(Vrml_IndexedLineSet self, Handle_TColStd_HArray1OfInteger aMaterialIndex)

        :type aMaterialIndex: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _Vrml.Vrml_IndexedLineSet_SetMaterialIndex(self, *args)


    def MaterialIndex(self, *args):
        """
        MaterialIndex(Vrml_IndexedLineSet self) -> Handle_TColStd_HArray1OfInteger

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _Vrml.Vrml_IndexedLineSet_MaterialIndex(self, *args)


    def SetNormalIndex(self, *args):
        """
        SetNormalIndex(Vrml_IndexedLineSet self, Handle_TColStd_HArray1OfInteger aNormalIndex)

        :type aNormalIndex: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _Vrml.Vrml_IndexedLineSet_SetNormalIndex(self, *args)


    def NormalIndex(self, *args):
        """
        NormalIndex(Vrml_IndexedLineSet self) -> Handle_TColStd_HArray1OfInteger

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _Vrml.Vrml_IndexedLineSet_NormalIndex(self, *args)


    def SetTextureCoordIndex(self, *args):
        """
        SetTextureCoordIndex(Vrml_IndexedLineSet self, Handle_TColStd_HArray1OfInteger aTextureCoordIndex)

        :type aTextureCoordIndex: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _Vrml.Vrml_IndexedLineSet_SetTextureCoordIndex(self, *args)


    def TextureCoordIndex(self, *args):
        """
        TextureCoordIndex(Vrml_IndexedLineSet self) -> Handle_TColStd_HArray1OfInteger

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _Vrml.Vrml_IndexedLineSet_TextureCoordIndex(self, *args)


    def Print(self, *args):
        """
        Print(Vrml_IndexedLineSet self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Vrml_IndexedLineSet_Print(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Vrml.Vrml_IndexedLineSet_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Vrml.Vrml_IndexedLineSet_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Vrml.Vrml_IndexedLineSet_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Vrml.delete_Vrml_IndexedLineSet
Vrml_IndexedLineSet_swigregister = _Vrml.Vrml_IndexedLineSet_swigregister
Vrml_IndexedLineSet_swigregister(Vrml_IndexedLineSet)

def Vrml_IndexedLineSet_get_type_name(*args):
    """
    Vrml_IndexedLineSet_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Vrml.Vrml_IndexedLineSet_get_type_name(*args)

def Vrml_IndexedLineSet_get_type_descriptor(*args):
    """
    Vrml_IndexedLineSet_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Vrml.Vrml_IndexedLineSet_get_type_descriptor(*args)

class Vrml_DirectionalLight(object):
    """
    defines a directional  light node of VRML specifying
    properties of lights.
    This  node  defines  a  directional  light  source  that  illuminates
    along  rays  parallel  to  a  given  3-dimentional  vector
    Color is  written  as  an  RGB  triple.
    Light intensity must be in the range 0.0 to 1.0, inclusive.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Vrml_DirectionalLight self) -> Vrml_DirectionalLight
        __init__(Vrml_DirectionalLight self, Standard_Boolean const aOnOff, Standard_Real const aIntensity, Quantity_Color aColor, gp_Vec aDirection) -> Vrml_DirectionalLight

        :type aOnOff: bool
        :type aIntensity: float
        :type aColor: OCC.wrapper.Quantity.Quantity_Color
        :type aDirection: OCC.wrapper.gp.gp_Vec

        """
        this = _Vrml.new_Vrml_DirectionalLight(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetOnOff(self, *args):
        """
        SetOnOff(Vrml_DirectionalLight self, Standard_Boolean const aOnOff)

        :type aOnOff: bool

        """
        return _Vrml.Vrml_DirectionalLight_SetOnOff(self, *args)


    def OnOff(self, *args):
        """
        OnOff(Vrml_DirectionalLight self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Vrml.Vrml_DirectionalLight_OnOff(self, *args)


    def SetIntensity(self, *args):
        """
        SetIntensity(Vrml_DirectionalLight self, Standard_Real const aIntensity)

        :type aIntensity: float

        """
        return _Vrml.Vrml_DirectionalLight_SetIntensity(self, *args)


    def Intensity(self, *args):
        """
        Intensity(Vrml_DirectionalLight self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Vrml.Vrml_DirectionalLight_Intensity(self, *args)


    def SetColor(self, *args):
        """
        SetColor(Vrml_DirectionalLight self, Quantity_Color aColor)

        :type aColor: OCC.wrapper.Quantity.Quantity_Color

        """
        return _Vrml.Vrml_DirectionalLight_SetColor(self, *args)


    def Color(self, *args):
        """
        Color(Vrml_DirectionalLight self) -> Quantity_Color

        :rtype: OCC.wrapper.Quantity.Quantity_Color

        """
        return _Vrml.Vrml_DirectionalLight_Color(self, *args)


    def SetDirection(self, *args):
        """
        SetDirection(Vrml_DirectionalLight self, gp_Vec aDirection)

        :type aDirection: OCC.wrapper.gp.gp_Vec

        """
        return _Vrml.Vrml_DirectionalLight_SetDirection(self, *args)


    def Direction(self, *args):
        """
        Direction(Vrml_DirectionalLight self) -> gp_Vec

        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _Vrml.Vrml_DirectionalLight_Direction(self, *args)


    def Print(self, *args):
        """
        Print(Vrml_DirectionalLight self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Vrml_DirectionalLight_Print(self, *args)

    __swig_destroy__ = _Vrml.delete_Vrml_DirectionalLight
Vrml_DirectionalLight_swigregister = _Vrml.Vrml_DirectionalLight_swigregister
Vrml_DirectionalLight_swigregister(Vrml_DirectionalLight)

class Handle_Vrml_LOD(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Vrml_LOD self)

        Nullify the handle


        """
        return _Vrml.Handle_Vrml_LOD_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Vrml_LOD self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Vrml.Handle_Vrml_LOD_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Vrml_LOD self, Vrml_LOD thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Vrml.Handle_Vrml_LOD_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Vrml_LOD self, Handle_Vrml_LOD theHandle) -> Handle_Vrml_LOD
        assign(Handle_Vrml_LOD self, Vrml_LOD thePtr) -> Handle_Vrml_LOD
        assign(Handle_Vrml_LOD self, Handle_Vrml_LOD theHandle) -> Handle_Vrml_LOD

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Vrml.Handle_Vrml_LOD_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Vrml_LOD self) -> Vrml_LOD

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Vrml.Handle_Vrml_LOD_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Vrml_LOD self) -> Vrml_LOD

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Vrml.Handle_Vrml_LOD___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Vrml_LOD self) -> Vrml_LOD

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Vrml.Handle_Vrml_LOD___ref__(self, *args)


    def __hash__(self):
        return _Vrml.Handle_Vrml_LOD___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Vrml.Handle_Vrml_LOD___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Vrml.new_Handle_Vrml_LOD(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Vrml.Handle_Vrml_LOD_DownCast)
    __swig_destroy__ = _Vrml.delete_Handle_Vrml_LOD

    def SetRange(self, *args):
        """
        SetRange(Handle_Vrml_LOD self, Handle_TColStd_HArray1OfReal aRange)

        :type aRange: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _Vrml.Handle_Vrml_LOD_SetRange(self, *args)


    def Range(self, *args):
        """
        Range(Handle_Vrml_LOD self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _Vrml.Handle_Vrml_LOD_Range(self, *args)


    def SetCenter(self, *args):
        """
        SetCenter(Handle_Vrml_LOD self, gp_Vec aCenter)

        :type aCenter: OCC.wrapper.gp.gp_Vec

        """
        return _Vrml.Handle_Vrml_LOD_SetCenter(self, *args)


    def Center(self, *args):
        """
        Center(Handle_Vrml_LOD self) -> gp_Vec

        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _Vrml.Handle_Vrml_LOD_Center(self, *args)


    def Print(self, *args):
        """
        Print(Handle_Vrml_LOD self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Handle_Vrml_LOD_Print(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Vrml_LOD self) -> char const *

        :rtype: const char *

        """
        return _Vrml.Handle_Vrml_LOD_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Vrml.Handle_Vrml_LOD_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Vrml.Handle_Vrml_LOD_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Vrml_LOD self)

        Memory deallocator for transient classes


        """
        return _Vrml.Handle_Vrml_LOD_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Vrml_LOD self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Vrml_LOD self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Vrml.Handle_Vrml_LOD_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Vrml_LOD self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Vrml_LOD self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Vrml.Handle_Vrml_LOD_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Vrml_LOD self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Vrml.Handle_Vrml_LOD_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Vrml_LOD self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Vrml.Handle_Vrml_LOD_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Vrml_LOD self)

        Increments the reference counter of this object


        """
        return _Vrml.Handle_Vrml_LOD_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Vrml_LOD self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Vrml.Handle_Vrml_LOD_DecrementRefCounter(self, *args)

Handle_Vrml_LOD_swigregister = _Vrml.Handle_Vrml_LOD_swigregister
Handle_Vrml_LOD_swigregister(Handle_Vrml_LOD)

def Handle_Vrml_LOD_DownCast(thing):
    return _Vrml.Handle_Vrml_LOD_DownCast(thing)
Handle_Vrml_LOD_DownCast = _Vrml.Handle_Vrml_LOD_DownCast

class Vrml_SFImage(Standard.Standard_Transient):
    """defines SFImage type of VRML field types."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Vrml_SFImage
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Vrml_SFImage(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Vrml_SFImage self) -> Vrml_SFImage
        __init__(Vrml_SFImage self, Standard_Integer const aWidth, Standard_Integer const aHeight, Vrml_SFImageNumber const aNumber, Handle_TColStd_HArray1OfInteger anArray) -> Vrml_SFImage

        :type aWidth: int
        :type aHeight: int
        :type aNumber: OCC.wrapper.Vrml.Vrml_SFImageNumber
        :type anArray: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        this = _Vrml.new_Vrml_SFImage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetWidth(self, *args):
        """
        SetWidth(Vrml_SFImage self, Standard_Integer const aWidth)

        :type aWidth: int

        """
        return _Vrml.Vrml_SFImage_SetWidth(self, *args)


    def Width(self, *args):
        """
        Width(Vrml_SFImage self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Vrml.Vrml_SFImage_Width(self, *args)


    def SetHeight(self, *args):
        """
        SetHeight(Vrml_SFImage self, Standard_Integer const aHeight)

        :type aHeight: int

        """
        return _Vrml.Vrml_SFImage_SetHeight(self, *args)


    def Height(self, *args):
        """
        Height(Vrml_SFImage self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Vrml.Vrml_SFImage_Height(self, *args)


    def SetNumber(self, *args):
        """
        SetNumber(Vrml_SFImage self, Vrml_SFImageNumber const aNumber)

        :type aNumber: OCC.wrapper.Vrml.Vrml_SFImageNumber

        """
        return _Vrml.Vrml_SFImage_SetNumber(self, *args)


    def Number(self, *args):
        """
        Number(Vrml_SFImage self) -> Vrml_SFImageNumber

        :rtype: OCC.wrapper.Vrml.Vrml_SFImageNumber

        """
        return _Vrml.Vrml_SFImage_Number(self, *args)


    def SetArray(self, *args):
        """
        SetArray(Vrml_SFImage self, Handle_TColStd_HArray1OfInteger anArray)

        :type anArray: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _Vrml.Vrml_SFImage_SetArray(self, *args)


    def Array(self, *args):
        """
        Array(Vrml_SFImage self) -> Handle_TColStd_HArray1OfInteger

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _Vrml.Vrml_SFImage_Array(self, *args)


    def ArrayFlag(self, *args):
        """
        ArrayFlag(Vrml_SFImage self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Vrml.Vrml_SFImage_ArrayFlag(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Vrml.Vrml_SFImage_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Vrml.Vrml_SFImage_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Vrml.Vrml_SFImage_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Vrml.delete_Vrml_SFImage
Vrml_SFImage_swigregister = _Vrml.Vrml_SFImage_swigregister
Vrml_SFImage_swigregister(Vrml_SFImage)

def Vrml_SFImage_get_type_name(*args):
    """
    Vrml_SFImage_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Vrml.Vrml_SFImage_get_type_name(*args)

def Vrml_SFImage_get_type_descriptor(*args):
    """
    Vrml_SFImage_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Vrml.Vrml_SFImage_get_type_descriptor(*args)

class Vrml_Texture2(object):
    """
    defines a Texture2 node of VRML specifying properties of geometry
    and its appearance.
    This  property  node  defines  a  texture  map  and  parameters  for  that  map
    The  texture  can  be  read  from  the  URL  specified  by  the  filename  field.
    To  turn  off  texturing,  set  the  filename  field  to  an  empty  string  ("").
    Textures  can  alsobe  specified  inline  by  setting  the  image  field
    to  contain  the  texture  data.
    By  default  :
    myFilename ("")
    myImage (0 0 0)
    myWrapS (Vrml_REPEAT)
    myWrapT (Vrml_REPEAT)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Vrml_Texture2 self) -> Vrml_Texture2
        __init__(Vrml_Texture2 self, TCollection_AsciiString aFilename, Handle_Vrml_SFImage aImage, Vrml_Texture2Wrap const aWrapS, Vrml_Texture2Wrap const aWrapT) -> Vrml_Texture2

        :type aFilename: OCC.wrapper.TCollection.TCollection_AsciiString
        :type aImage: OCC.wrapper.Vrml.Handle_Vrml_SFImage
        :type aWrapS: OCC.wrapper.Vrml.Vrml_Texture2Wrap
        :type aWrapT: OCC.wrapper.Vrml.Vrml_Texture2Wrap

        """
        this = _Vrml.new_Vrml_Texture2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetFilename(self, *args):
        """
        SetFilename(Vrml_Texture2 self, TCollection_AsciiString aFilename)

        :type aFilename: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Vrml.Vrml_Texture2_SetFilename(self, *args)


    def Filename(self, *args):
        """
        Filename(Vrml_Texture2 self) -> TCollection_AsciiString

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Vrml.Vrml_Texture2_Filename(self, *args)


    def SetImage(self, *args):
        """
        SetImage(Vrml_Texture2 self, Handle_Vrml_SFImage aImage)

        :type aImage: OCC.wrapper.Vrml.Handle_Vrml_SFImage

        """
        return _Vrml.Vrml_Texture2_SetImage(self, *args)


    def Image(self, *args):
        """
        Image(Vrml_Texture2 self) -> Handle_Vrml_SFImage

        :rtype: OCC.wrapper.Vrml.Handle_Vrml_SFImage

        """
        return _Vrml.Vrml_Texture2_Image(self, *args)


    def SetWrapS(self, *args):
        """
        SetWrapS(Vrml_Texture2 self, Vrml_Texture2Wrap const aWrapS)

        :type aWrapS: OCC.wrapper.Vrml.Vrml_Texture2Wrap

        """
        return _Vrml.Vrml_Texture2_SetWrapS(self, *args)


    def WrapS(self, *args):
        """
        WrapS(Vrml_Texture2 self) -> Vrml_Texture2Wrap

        :rtype: OCC.wrapper.Vrml.Vrml_Texture2Wrap

        """
        return _Vrml.Vrml_Texture2_WrapS(self, *args)


    def SetWrapT(self, *args):
        """
        SetWrapT(Vrml_Texture2 self, Vrml_Texture2Wrap const aWrapT)

        :type aWrapT: OCC.wrapper.Vrml.Vrml_Texture2Wrap

        """
        return _Vrml.Vrml_Texture2_SetWrapT(self, *args)


    def WrapT(self, *args):
        """
        WrapT(Vrml_Texture2 self) -> Vrml_Texture2Wrap

        :rtype: OCC.wrapper.Vrml.Vrml_Texture2Wrap

        """
        return _Vrml.Vrml_Texture2_WrapT(self, *args)


    def Print(self, *args):
        """
        Print(Vrml_Texture2 self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Vrml_Texture2_Print(self, *args)

    __swig_destroy__ = _Vrml.delete_Vrml_Texture2
Vrml_Texture2_swigregister = _Vrml.Vrml_Texture2_swigregister
Vrml_Texture2_swigregister(Vrml_Texture2)

class Vrml_Coordinate3(Standard.Standard_Transient):
    """
    defines a Coordinate3 node of VRML specifying
    properties of geometry and its appearance.
    This node defines a set of 3D coordinates to be used by a subsequent IndexedFaceSet,
    IndexedLineSet, or PointSet node. This node does not produce a visible result
    during rendering; it simply replaces the current coordinates in the rendering
    state for subsequent nodes to use.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Vrml_Coordinate3
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Vrml_Coordinate3(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Vrml_Coordinate3 self, Handle_TColgp_HArray1OfVec aPoint) -> Vrml_Coordinate3
        __init__(Vrml_Coordinate3 self) -> Vrml_Coordinate3

        :type aPoint: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfVec

        """
        this = _Vrml.new_Vrml_Coordinate3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetPoint(self, *args):
        """
        SetPoint(Vrml_Coordinate3 self, Handle_TColgp_HArray1OfVec aPoint)

        :type aPoint: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfVec

        """
        return _Vrml.Vrml_Coordinate3_SetPoint(self, *args)


    def Point(self, *args):
        """
        Point(Vrml_Coordinate3 self) -> Handle_TColgp_HArray1OfVec

        :rtype: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfVec

        """
        return _Vrml.Vrml_Coordinate3_Point(self, *args)


    def Print(self, *args):
        """
        Print(Vrml_Coordinate3 self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Vrml_Coordinate3_Print(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Vrml.Vrml_Coordinate3_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Vrml.Vrml_Coordinate3_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Vrml.Vrml_Coordinate3_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Vrml.delete_Vrml_Coordinate3
Vrml_Coordinate3_swigregister = _Vrml.Vrml_Coordinate3_swigregister
Vrml_Coordinate3_swigregister(Vrml_Coordinate3)

def Vrml_Coordinate3_get_type_name(*args):
    """
    Vrml_Coordinate3_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Vrml.Vrml_Coordinate3_get_type_name(*args)

def Vrml_Coordinate3_get_type_descriptor(*args):
    """
    Vrml_Coordinate3_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Vrml.Vrml_Coordinate3_get_type_descriptor(*args)

class Vrml_Transform(object):
    """
    defines a Transform of VRML specifying transform
    properties.
    This  node  defines  a  geometric  3D  transformation   consisting   of  (in  order)
    a  (possibly)  non-uniform  scale  about  an  arbitrary  point,  a  rotation  about
    an arbitrary point  and  axis  and  translation.
    By  default  :
    myTranslation (0,0,0)
    myRotation  (0,0,1,0)
    myScaleFactor (1,1,1)
    myScaleOrientation (0,0,1,0)
    myCenter (0,0,0)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Vrml_Transform self) -> Vrml_Transform
        __init__(Vrml_Transform self, gp_Vec aTranslation, Vrml_SFRotation aRotation, gp_Vec aScaleFactor, Vrml_SFRotation aScaleOrientation, gp_Vec aCenter) -> Vrml_Transform

        :type aTranslation: OCC.wrapper.gp.gp_Vec
        :type aRotation: OCC.wrapper.Vrml.Vrml_SFRotation
        :type aScaleFactor: OCC.wrapper.gp.gp_Vec
        :type aScaleOrientation: OCC.wrapper.Vrml.Vrml_SFRotation
        :type aCenter: OCC.wrapper.gp.gp_Vec

        """
        this = _Vrml.new_Vrml_Transform(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetTranslation(self, *args):
        """
        SetTranslation(Vrml_Transform self, gp_Vec aTranslation)

        :type aTranslation: OCC.wrapper.gp.gp_Vec

        """
        return _Vrml.Vrml_Transform_SetTranslation(self, *args)


    def Translation(self, *args):
        """
        Translation(Vrml_Transform self) -> gp_Vec

        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _Vrml.Vrml_Transform_Translation(self, *args)


    def SetRotation(self, *args):
        """
        SetRotation(Vrml_Transform self, Vrml_SFRotation aRotation)

        :type aRotation: OCC.wrapper.Vrml.Vrml_SFRotation

        """
        return _Vrml.Vrml_Transform_SetRotation(self, *args)


    def Rotation(self, *args):
        """
        Rotation(Vrml_Transform self) -> Vrml_SFRotation

        :rtype: OCC.wrapper.Vrml.Vrml_SFRotation

        """
        return _Vrml.Vrml_Transform_Rotation(self, *args)


    def SetScaleFactor(self, *args):
        """
        SetScaleFactor(Vrml_Transform self, gp_Vec aScaleFactor)

        :type aScaleFactor: OCC.wrapper.gp.gp_Vec

        """
        return _Vrml.Vrml_Transform_SetScaleFactor(self, *args)


    def ScaleFactor(self, *args):
        """
        ScaleFactor(Vrml_Transform self) -> gp_Vec

        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _Vrml.Vrml_Transform_ScaleFactor(self, *args)


    def SetScaleOrientation(self, *args):
        """
        SetScaleOrientation(Vrml_Transform self, Vrml_SFRotation aScaleOrientation)

        :type aScaleOrientation: OCC.wrapper.Vrml.Vrml_SFRotation

        """
        return _Vrml.Vrml_Transform_SetScaleOrientation(self, *args)


    def ScaleOrientation(self, *args):
        """
        ScaleOrientation(Vrml_Transform self) -> Vrml_SFRotation

        :rtype: OCC.wrapper.Vrml.Vrml_SFRotation

        """
        return _Vrml.Vrml_Transform_ScaleOrientation(self, *args)


    def SetCenter(self, *args):
        """
        SetCenter(Vrml_Transform self, gp_Vec aCenter)

        :type aCenter: OCC.wrapper.gp.gp_Vec

        """
        return _Vrml.Vrml_Transform_SetCenter(self, *args)


    def Center(self, *args):
        """
        Center(Vrml_Transform self) -> gp_Vec

        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _Vrml.Vrml_Transform_Center(self, *args)


    def Print(self, *args):
        """
        Print(Vrml_Transform self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Vrml_Transform_Print(self, *args)

    __swig_destroy__ = _Vrml.delete_Vrml_Transform
Vrml_Transform_swigregister = _Vrml.Vrml_Transform_swigregister
Vrml_Transform_swigregister(Vrml_Transform)

class Handle_Vrml_AsciiText(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Vrml_AsciiText self)

        Nullify the handle


        """
        return _Vrml.Handle_Vrml_AsciiText_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Vrml_AsciiText self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Vrml.Handle_Vrml_AsciiText_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Vrml_AsciiText self, Vrml_AsciiText thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Vrml.Handle_Vrml_AsciiText_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Vrml_AsciiText self, Handle_Vrml_AsciiText theHandle) -> Handle_Vrml_AsciiText
        assign(Handle_Vrml_AsciiText self, Vrml_AsciiText thePtr) -> Handle_Vrml_AsciiText
        assign(Handle_Vrml_AsciiText self, Handle_Vrml_AsciiText theHandle) -> Handle_Vrml_AsciiText

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Vrml.Handle_Vrml_AsciiText_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Vrml_AsciiText self) -> Vrml_AsciiText

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Vrml.Handle_Vrml_AsciiText_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Vrml_AsciiText self) -> Vrml_AsciiText

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Vrml.Handle_Vrml_AsciiText___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Vrml_AsciiText self) -> Vrml_AsciiText

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Vrml.Handle_Vrml_AsciiText___ref__(self, *args)


    def __hash__(self):
        return _Vrml.Handle_Vrml_AsciiText___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Vrml.Handle_Vrml_AsciiText___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Vrml.new_Handle_Vrml_AsciiText(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Vrml.Handle_Vrml_AsciiText_DownCast)
    __swig_destroy__ = _Vrml.delete_Handle_Vrml_AsciiText

    def SetString(self, *args):
        """
        SetString(Handle_Vrml_AsciiText self, Handle_TColStd_HArray1OfAsciiString aString)

        :type aString: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfAsciiString

        """
        return _Vrml.Handle_Vrml_AsciiText_SetString(self, *args)


    def String(self, *args):
        """
        String(Handle_Vrml_AsciiText self) -> Handle_TColStd_HArray1OfAsciiString

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfAsciiString

        """
        return _Vrml.Handle_Vrml_AsciiText_String(self, *args)


    def SetSpacing(self, *args):
        """
        SetSpacing(Handle_Vrml_AsciiText self, Standard_Real const aSpacing)

        :type aSpacing: float

        """
        return _Vrml.Handle_Vrml_AsciiText_SetSpacing(self, *args)


    def Spacing(self, *args):
        """
        Spacing(Handle_Vrml_AsciiText self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Vrml.Handle_Vrml_AsciiText_Spacing(self, *args)


    def SetJustification(self, *args):
        """
        SetJustification(Handle_Vrml_AsciiText self, Vrml_AsciiTextJustification const aJustification)

        :type aJustification: OCC.wrapper.Vrml.Vrml_AsciiTextJustification

        """
        return _Vrml.Handle_Vrml_AsciiText_SetJustification(self, *args)


    def Justification(self, *args):
        """
        Justification(Handle_Vrml_AsciiText self) -> Vrml_AsciiTextJustification

        :rtype: OCC.wrapper.Vrml.Vrml_AsciiTextJustification

        """
        return _Vrml.Handle_Vrml_AsciiText_Justification(self, *args)


    def SetWidth(self, *args):
        """
        SetWidth(Handle_Vrml_AsciiText self, Standard_Real const aWidth)

        :type aWidth: float

        """
        return _Vrml.Handle_Vrml_AsciiText_SetWidth(self, *args)


    def Width(self, *args):
        """
        Width(Handle_Vrml_AsciiText self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Vrml.Handle_Vrml_AsciiText_Width(self, *args)


    def Print(self, *args):
        """
        Print(Handle_Vrml_AsciiText self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Handle_Vrml_AsciiText_Print(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Vrml_AsciiText self) -> char const *

        :rtype: const char *

        """
        return _Vrml.Handle_Vrml_AsciiText_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Vrml.Handle_Vrml_AsciiText_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Vrml.Handle_Vrml_AsciiText_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Vrml_AsciiText self)

        Memory deallocator for transient classes


        """
        return _Vrml.Handle_Vrml_AsciiText_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Vrml_AsciiText self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Vrml_AsciiText self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Vrml.Handle_Vrml_AsciiText_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Vrml_AsciiText self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Vrml_AsciiText self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Vrml.Handle_Vrml_AsciiText_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Vrml_AsciiText self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Vrml.Handle_Vrml_AsciiText_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Vrml_AsciiText self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Vrml.Handle_Vrml_AsciiText_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Vrml_AsciiText self)

        Increments the reference counter of this object


        """
        return _Vrml.Handle_Vrml_AsciiText_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Vrml_AsciiText self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Vrml.Handle_Vrml_AsciiText_DecrementRefCounter(self, *args)

Handle_Vrml_AsciiText_swigregister = _Vrml.Handle_Vrml_AsciiText_swigregister
Handle_Vrml_AsciiText_swigregister(Handle_Vrml_AsciiText)

def Handle_Vrml_AsciiText_DownCast(thing):
    return _Vrml.Handle_Vrml_AsciiText_DownCast(thing)
Handle_Vrml_AsciiText_DownCast = _Vrml.Handle_Vrml_AsciiText_DownCast

class Vrml_FontStyle(object):
    """
    defines a FontStyle node of VRML of properties of geometry
    and its appearance.
    The  size  field  specifies  the  height  (in  object  space  units)
    of  glyphs  rendered  and  determines  the  vertical  spacing  of
    adjacent  lines  of  text.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Vrml_FontStyle self, Standard_Real const aSize=10, Vrml_FontStyleFamily const aFamily=Vrml_SERIF, Vrml_FontStyleStyle const aStyle=Vrml_NONE) -> Vrml_FontStyle

        :type aSize: float
        :type aFamily: OCC.wrapper.Vrml.Vrml_FontStyleFamily
        :type aStyle: OCC.wrapper.Vrml.Vrml_FontStyleStyle

        """
        this = _Vrml.new_Vrml_FontStyle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetSize(self, *args):
        """
        SetSize(Vrml_FontStyle self, Standard_Real const aSize)

        :type aSize: float

        """
        return _Vrml.Vrml_FontStyle_SetSize(self, *args)


    def Size(self, *args):
        """
        Size(Vrml_FontStyle self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Vrml.Vrml_FontStyle_Size(self, *args)


    def SetFamily(self, *args):
        """
        SetFamily(Vrml_FontStyle self, Vrml_FontStyleFamily const aFamily)

        :type aFamily: OCC.wrapper.Vrml.Vrml_FontStyleFamily

        """
        return _Vrml.Vrml_FontStyle_SetFamily(self, *args)


    def Family(self, *args):
        """
        Family(Vrml_FontStyle self) -> Vrml_FontStyleFamily

        :rtype: OCC.wrapper.Vrml.Vrml_FontStyleFamily

        """
        return _Vrml.Vrml_FontStyle_Family(self, *args)


    def SetStyle(self, *args):
        """
        SetStyle(Vrml_FontStyle self, Vrml_FontStyleStyle const aStyle)

        :type aStyle: OCC.wrapper.Vrml.Vrml_FontStyleStyle

        """
        return _Vrml.Vrml_FontStyle_SetStyle(self, *args)


    def Style(self, *args):
        """
        Style(Vrml_FontStyle self) -> Vrml_FontStyleStyle

        :rtype: OCC.wrapper.Vrml.Vrml_FontStyleStyle

        """
        return _Vrml.Vrml_FontStyle_Style(self, *args)


    def Print(self, *args):
        """
        Print(Vrml_FontStyle self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Vrml_FontStyle_Print(self, *args)

    __swig_destroy__ = _Vrml.delete_Vrml_FontStyle
Vrml_FontStyle_swigregister = _Vrml.Vrml_FontStyle_swigregister
Vrml_FontStyle_swigregister(Vrml_FontStyle)

class Vrml_Scale(object):
    """
    defines a Scale node of VRML specifying transform
    properties.
    This  node  defines  a  3D  scaling  about  the  origin.
    By  default  :
    myRotation  =  (1 1 1)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Vrml_Scale self) -> Vrml_Scale
        __init__(Vrml_Scale self, gp_Vec aScaleFactor) -> Vrml_Scale

        :type aScaleFactor: OCC.wrapper.gp.gp_Vec

        """
        this = _Vrml.new_Vrml_Scale(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetScaleFactor(self, *args):
        """
        SetScaleFactor(Vrml_Scale self, gp_Vec aScaleFactor)

        :type aScaleFactor: OCC.wrapper.gp.gp_Vec

        """
        return _Vrml.Vrml_Scale_SetScaleFactor(self, *args)


    def ScaleFactor(self, *args):
        """
        ScaleFactor(Vrml_Scale self) -> gp_Vec

        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _Vrml.Vrml_Scale_ScaleFactor(self, *args)


    def Print(self, *args):
        """
        Print(Vrml_Scale self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Vrml_Scale_Print(self, *args)

    __swig_destroy__ = _Vrml.delete_Vrml_Scale
Vrml_Scale_swigregister = _Vrml.Vrml_Scale_swigregister
Vrml_Scale_swigregister(Vrml_Scale)

class Vrml_MaterialBinding(object):
    """
    defines a MaterialBinding node of VRML specifying properties of geometry
    and its appearance.
    Material nodes may contain more than one material. This node specifies how the current
    materials are bound to shapes that follow in the scene graph. Each shape node may
    interpret bindings differently. For example, a Sphere node is always drawn using the first
    material in the material node, no matter what the current MaterialBinding, while a Cube
    node may use six different materials to draw each of its six faces, depending on the
    MaterialBinding.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Vrml_MaterialBinding self, Vrml_MaterialBindingAndNormalBinding const aValue) -> Vrml_MaterialBinding
        __init__(Vrml_MaterialBinding self) -> Vrml_MaterialBinding

        :type aValue: OCC.wrapper.Vrml.Vrml_MaterialBindingAndNormalBinding

        """
        this = _Vrml.new_Vrml_MaterialBinding(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetValue(self, *args):
        """
        SetValue(Vrml_MaterialBinding self, Vrml_MaterialBindingAndNormalBinding const aValue)

        :type aValue: OCC.wrapper.Vrml.Vrml_MaterialBindingAndNormalBinding

        """
        return _Vrml.Vrml_MaterialBinding_SetValue(self, *args)


    def Value(self, *args):
        """
        Value(Vrml_MaterialBinding self) -> Vrml_MaterialBindingAndNormalBinding

        :rtype: OCC.wrapper.Vrml.Vrml_MaterialBindingAndNormalBinding

        """
        return _Vrml.Vrml_MaterialBinding_Value(self, *args)


    def Print(self, *args):
        """
        Print(Vrml_MaterialBinding self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Vrml_MaterialBinding_Print(self, *args)

    __swig_destroy__ = _Vrml.delete_Vrml_MaterialBinding
Vrml_MaterialBinding_swigregister = _Vrml.Vrml_MaterialBinding_swigregister
Vrml_MaterialBinding_swigregister(Vrml_MaterialBinding)

class Vrml_Texture2Transform(object):
    """
    defines a Texture2Transform node of VRML specifying properties of geometry
    and its appearance.
    This  node  defines  a 2D  transformation  applied  to  texture  coordinates.
    This  affect  the  way  textures  are  applied  to  the  surfaces  of  subsequent
    shapes.
    Transformation  consisits  of(in  order)  a  non-uniform  scale  about  an
    arbitrary  center  point,  a  rotation  about  that  same  point,  and
    a  translation.  This  allows  a  user  to  change  the  size  and  position  of
    the  textures  on  the  shape.
    By  default  :
    myTranslation (0 0)
    myRotation (0)
    myScaleFactor (1 1)
    myCenter (0 0)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Vrml_Texture2Transform self) -> Vrml_Texture2Transform
        __init__(Vrml_Texture2Transform self, gp_Vec2d aTranslation, Standard_Real const aRotation, gp_Vec2d aScaleFactor, gp_Vec2d aCenter) -> Vrml_Texture2Transform

        :type aTranslation: OCC.wrapper.gp.gp_Vec2d
        :type aRotation: float
        :type aScaleFactor: OCC.wrapper.gp.gp_Vec2d
        :type aCenter: OCC.wrapper.gp.gp_Vec2d

        """
        this = _Vrml.new_Vrml_Texture2Transform(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetTranslation(self, *args):
        """
        SetTranslation(Vrml_Texture2Transform self, gp_Vec2d aTranslation)

        :type aTranslation: OCC.wrapper.gp.gp_Vec2d

        """
        return _Vrml.Vrml_Texture2Transform_SetTranslation(self, *args)


    def Translation(self, *args):
        """
        Translation(Vrml_Texture2Transform self) -> gp_Vec2d

        :rtype: OCC.wrapper.gp.gp_Vec2d

        """
        return _Vrml.Vrml_Texture2Transform_Translation(self, *args)


    def SetRotation(self, *args):
        """
        SetRotation(Vrml_Texture2Transform self, Standard_Real const aRotation)

        :type aRotation: float

        """
        return _Vrml.Vrml_Texture2Transform_SetRotation(self, *args)


    def Rotation(self, *args):
        """
        Rotation(Vrml_Texture2Transform self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Vrml.Vrml_Texture2Transform_Rotation(self, *args)


    def SetScaleFactor(self, *args):
        """
        SetScaleFactor(Vrml_Texture2Transform self, gp_Vec2d aScaleFactor)

        :type aScaleFactor: OCC.wrapper.gp.gp_Vec2d

        """
        return _Vrml.Vrml_Texture2Transform_SetScaleFactor(self, *args)


    def ScaleFactor(self, *args):
        """
        ScaleFactor(Vrml_Texture2Transform self) -> gp_Vec2d

        :rtype: OCC.wrapper.gp.gp_Vec2d

        """
        return _Vrml.Vrml_Texture2Transform_ScaleFactor(self, *args)


    def SetCenter(self, *args):
        """
        SetCenter(Vrml_Texture2Transform self, gp_Vec2d aCenter)

        :type aCenter: OCC.wrapper.gp.gp_Vec2d

        """
        return _Vrml.Vrml_Texture2Transform_SetCenter(self, *args)


    def Center(self, *args):
        """
        Center(Vrml_Texture2Transform self) -> gp_Vec2d

        :rtype: OCC.wrapper.gp.gp_Vec2d

        """
        return _Vrml.Vrml_Texture2Transform_Center(self, *args)


    def Print(self, *args):
        """
        Print(Vrml_Texture2Transform self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Vrml_Texture2Transform_Print(self, *args)

    __swig_destroy__ = _Vrml.delete_Vrml_Texture2Transform
Vrml_Texture2Transform_swigregister = _Vrml.Vrml_Texture2Transform_swigregister
Vrml_Texture2Transform_swigregister(Vrml_Texture2Transform)

class Vrml_SFRotation(object):
    """
    defines SFRotation type of VRML field types.
    The  4  values  represent  an  axis  of  rotation  followed  by  amount  of
    right-handed  rotation  about  the  that  axis, in  radians.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Vrml_SFRotation self) -> Vrml_SFRotation
        __init__(Vrml_SFRotation self, Standard_Real const aRotationX, Standard_Real const aRotationY, Standard_Real const aRotationZ, Standard_Real const anAngle) -> Vrml_SFRotation

        :type aRotationX: float
        :type aRotationY: float
        :type aRotationZ: float
        :type anAngle: float

        """
        this = _Vrml.new_Vrml_SFRotation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetRotationX(self, *args):
        """
        SetRotationX(Vrml_SFRotation self, Standard_Real const aRotationX)

        :type aRotationX: float

        """
        return _Vrml.Vrml_SFRotation_SetRotationX(self, *args)


    def RotationX(self, *args):
        """
        RotationX(Vrml_SFRotation self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Vrml.Vrml_SFRotation_RotationX(self, *args)


    def SetRotationY(self, *args):
        """
        SetRotationY(Vrml_SFRotation self, Standard_Real const aRotationY)

        :type aRotationY: float

        """
        return _Vrml.Vrml_SFRotation_SetRotationY(self, *args)


    def RotationY(self, *args):
        """
        RotationY(Vrml_SFRotation self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Vrml.Vrml_SFRotation_RotationY(self, *args)


    def SetRotationZ(self, *args):
        """
        SetRotationZ(Vrml_SFRotation self, Standard_Real const aRotationZ)

        :type aRotationZ: float

        """
        return _Vrml.Vrml_SFRotation_SetRotationZ(self, *args)


    def RotationZ(self, *args):
        """
        RotationZ(Vrml_SFRotation self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Vrml.Vrml_SFRotation_RotationZ(self, *args)


    def SetAngle(self, *args):
        """
        SetAngle(Vrml_SFRotation self, Standard_Real const anAngle)

        :type anAngle: float

        """
        return _Vrml.Vrml_SFRotation_SetAngle(self, *args)


    def Angle(self, *args):
        """
        Angle(Vrml_SFRotation self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Vrml.Vrml_SFRotation_Angle(self, *args)

    __swig_destroy__ = _Vrml.delete_Vrml_SFRotation
Vrml_SFRotation_swigregister = _Vrml.Vrml_SFRotation_swigregister
Vrml_SFRotation_swigregister(Vrml_SFRotation)

class Vrml_Translation(object):
    """
    defines a Translation of VRML specifying transform
    properties.
    This  node  defines  a  translation  by  3D  vector.
    By  default  :
    myTranslation (0,0,0)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Vrml_Translation self) -> Vrml_Translation
        __init__(Vrml_Translation self, gp_Vec aTranslation) -> Vrml_Translation

        :type aTranslation: OCC.wrapper.gp.gp_Vec

        """
        this = _Vrml.new_Vrml_Translation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetTranslation(self, *args):
        """
        SetTranslation(Vrml_Translation self, gp_Vec aTranslation)

        :type aTranslation: OCC.wrapper.gp.gp_Vec

        """
        return _Vrml.Vrml_Translation_SetTranslation(self, *args)


    def Translation(self, *args):
        """
        Translation(Vrml_Translation self) -> gp_Vec

        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _Vrml.Vrml_Translation_Translation(self, *args)


    def Print(self, *args):
        """
        Print(Vrml_Translation self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Vrml_Translation_Print(self, *args)

    __swig_destroy__ = _Vrml.delete_Vrml_Translation
Vrml_Translation_swigregister = _Vrml.Vrml_Translation_swigregister
Vrml_Translation_swigregister(Vrml_Translation)

class Handle_Vrml_TextureCoordinate2(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Vrml_TextureCoordinate2 self)

        Nullify the handle


        """
        return _Vrml.Handle_Vrml_TextureCoordinate2_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Vrml_TextureCoordinate2 self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Vrml.Handle_Vrml_TextureCoordinate2_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Vrml_TextureCoordinate2 self, Vrml_TextureCoordinate2 thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Vrml.Handle_Vrml_TextureCoordinate2_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Vrml_TextureCoordinate2 self, Handle_Vrml_TextureCoordinate2 theHandle) -> Handle_Vrml_TextureCoordinate2
        assign(Handle_Vrml_TextureCoordinate2 self, Vrml_TextureCoordinate2 thePtr) -> Handle_Vrml_TextureCoordinate2
        assign(Handle_Vrml_TextureCoordinate2 self, Handle_Vrml_TextureCoordinate2 theHandle) -> Handle_Vrml_TextureCoordinate2

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Vrml.Handle_Vrml_TextureCoordinate2_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Vrml_TextureCoordinate2 self) -> Vrml_TextureCoordinate2

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Vrml.Handle_Vrml_TextureCoordinate2_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Vrml_TextureCoordinate2 self) -> Vrml_TextureCoordinate2

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Vrml.Handle_Vrml_TextureCoordinate2___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Vrml_TextureCoordinate2 self) -> Vrml_TextureCoordinate2

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Vrml.Handle_Vrml_TextureCoordinate2___ref__(self, *args)


    def __hash__(self):
        return _Vrml.Handle_Vrml_TextureCoordinate2___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Vrml.Handle_Vrml_TextureCoordinate2___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Vrml.new_Handle_Vrml_TextureCoordinate2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Vrml.Handle_Vrml_TextureCoordinate2_DownCast)
    __swig_destroy__ = _Vrml.delete_Handle_Vrml_TextureCoordinate2

    def SetPoint(self, *args):
        """
        SetPoint(Handle_Vrml_TextureCoordinate2 self, Handle_TColgp_HArray1OfVec2d aPoint)

        :type aPoint: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfVec2d

        """
        return _Vrml.Handle_Vrml_TextureCoordinate2_SetPoint(self, *args)


    def Point(self, *args):
        """
        Point(Handle_Vrml_TextureCoordinate2 self) -> Handle_TColgp_HArray1OfVec2d

        :rtype: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfVec2d

        """
        return _Vrml.Handle_Vrml_TextureCoordinate2_Point(self, *args)


    def Print(self, *args):
        """
        Print(Handle_Vrml_TextureCoordinate2 self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Handle_Vrml_TextureCoordinate2_Print(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Vrml_TextureCoordinate2 self) -> char const *

        :rtype: const char *

        """
        return _Vrml.Handle_Vrml_TextureCoordinate2_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Vrml.Handle_Vrml_TextureCoordinate2_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Vrml.Handle_Vrml_TextureCoordinate2_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Vrml_TextureCoordinate2 self)

        Memory deallocator for transient classes


        """
        return _Vrml.Handle_Vrml_TextureCoordinate2_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Vrml_TextureCoordinate2 self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Vrml_TextureCoordinate2 self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Vrml.Handle_Vrml_TextureCoordinate2_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Vrml_TextureCoordinate2 self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Vrml_TextureCoordinate2 self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Vrml.Handle_Vrml_TextureCoordinate2_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Vrml_TextureCoordinate2 self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Vrml.Handle_Vrml_TextureCoordinate2_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Vrml_TextureCoordinate2 self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Vrml.Handle_Vrml_TextureCoordinate2_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Vrml_TextureCoordinate2 self)

        Increments the reference counter of this object


        """
        return _Vrml.Handle_Vrml_TextureCoordinate2_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Vrml_TextureCoordinate2 self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Vrml.Handle_Vrml_TextureCoordinate2_DecrementRefCounter(self, *args)

Handle_Vrml_TextureCoordinate2_swigregister = _Vrml.Handle_Vrml_TextureCoordinate2_swigregister
Handle_Vrml_TextureCoordinate2_swigregister(Handle_Vrml_TextureCoordinate2)

def Handle_Vrml_TextureCoordinate2_DownCast(thing):
    return _Vrml.Handle_Vrml_TextureCoordinate2_DownCast(thing)
Handle_Vrml_TextureCoordinate2_DownCast = _Vrml.Handle_Vrml_TextureCoordinate2_DownCast

class Vrml_Sphere(object):
    """
    defines a Sphere node of VRML specifying geometry shapes.
    This  node  represents  a  sphere.
    By  default ,  the  sphere  is  centred  at  (0,0,0) and  has  a  radius  of  1.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Vrml_Sphere self, Standard_Real const aRadius=1) -> Vrml_Sphere

        :type aRadius: float

        """
        this = _Vrml.new_Vrml_Sphere(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetRadius(self, *args):
        """
        SetRadius(Vrml_Sphere self, Standard_Real const aRadius)

        :type aRadius: float

        """
        return _Vrml.Vrml_Sphere_SetRadius(self, *args)


    def Radius(self, *args):
        """
        Radius(Vrml_Sphere self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Vrml.Vrml_Sphere_Radius(self, *args)


    def Print(self, *args):
        """
        Print(Vrml_Sphere self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Vrml_Sphere_Print(self, *args)

    __swig_destroy__ = _Vrml.delete_Vrml_Sphere
Vrml_Sphere_swigregister = _Vrml.Vrml_Sphere_swigregister
Vrml_Sphere_swigregister(Vrml_Sphere)

class Vrml_PointSet(object):
    """defines a PointSet node of VRML specifying geometry shapes."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Vrml_PointSet self, Standard_Integer const aStartIndex=0, Standard_Integer const aNumPoints=-1) -> Vrml_PointSet

        :type aStartIndex: int
        :type aNumPoints: int

        """
        this = _Vrml.new_Vrml_PointSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetStartIndex(self, *args):
        """
        SetStartIndex(Vrml_PointSet self, Standard_Integer const aStartIndex)

        :type aStartIndex: int

        """
        return _Vrml.Vrml_PointSet_SetStartIndex(self, *args)


    def StartIndex(self, *args):
        """
        StartIndex(Vrml_PointSet self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Vrml.Vrml_PointSet_StartIndex(self, *args)


    def SetNumPoints(self, *args):
        """
        SetNumPoints(Vrml_PointSet self, Standard_Integer const aNumPoints)

        :type aNumPoints: int

        """
        return _Vrml.Vrml_PointSet_SetNumPoints(self, *args)


    def NumPoints(self, *args):
        """
        NumPoints(Vrml_PointSet self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Vrml.Vrml_PointSet_NumPoints(self, *args)


    def Print(self, *args):
        """
        Print(Vrml_PointSet self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Vrml_PointSet_Print(self, *args)

    __swig_destroy__ = _Vrml.delete_Vrml_PointSet
Vrml_PointSet_swigregister = _Vrml.Vrml_PointSet_swigregister
Vrml_PointSet_swigregister(Vrml_PointSet)

class Handle_Vrml_Material(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Vrml_Material self)

        Nullify the handle


        """
        return _Vrml.Handle_Vrml_Material_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Vrml_Material self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Vrml.Handle_Vrml_Material_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Vrml_Material self, Vrml_Material thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Vrml.Handle_Vrml_Material_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Vrml_Material self, Handle_Vrml_Material theHandle) -> Handle_Vrml_Material
        assign(Handle_Vrml_Material self, Vrml_Material thePtr) -> Handle_Vrml_Material
        assign(Handle_Vrml_Material self, Handle_Vrml_Material theHandle) -> Handle_Vrml_Material

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Vrml.Handle_Vrml_Material_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Vrml_Material self) -> Vrml_Material

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Vrml.Handle_Vrml_Material_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Vrml_Material self) -> Vrml_Material

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Vrml.Handle_Vrml_Material___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Vrml_Material self) -> Vrml_Material

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Vrml.Handle_Vrml_Material___ref__(self, *args)


    def __hash__(self):
        return _Vrml.Handle_Vrml_Material___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Vrml.Handle_Vrml_Material___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Vrml.new_Handle_Vrml_Material(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Vrml.Handle_Vrml_Material_DownCast)
    __swig_destroy__ = _Vrml.delete_Handle_Vrml_Material

    def SetAmbientColor(self, *args):
        """
        SetAmbientColor(Handle_Vrml_Material self, Handle_Quantity_HArray1OfColor aAmbientColor)

        :type aAmbientColor: OCC.wrapper.Quantity.Handle_Quantity_HArray1OfColor

        """
        return _Vrml.Handle_Vrml_Material_SetAmbientColor(self, *args)


    def AmbientColor(self, *args):
        """
        AmbientColor(Handle_Vrml_Material self) -> Handle_Quantity_HArray1OfColor

        :rtype: OCC.wrapper.Quantity.Handle_Quantity_HArray1OfColor

        """
        return _Vrml.Handle_Vrml_Material_AmbientColor(self, *args)


    def SetDiffuseColor(self, *args):
        """
        SetDiffuseColor(Handle_Vrml_Material self, Handle_Quantity_HArray1OfColor aDiffuseColor)

        :type aDiffuseColor: OCC.wrapper.Quantity.Handle_Quantity_HArray1OfColor

        """
        return _Vrml.Handle_Vrml_Material_SetDiffuseColor(self, *args)


    def DiffuseColor(self, *args):
        """
        DiffuseColor(Handle_Vrml_Material self) -> Handle_Quantity_HArray1OfColor

        :rtype: OCC.wrapper.Quantity.Handle_Quantity_HArray1OfColor

        """
        return _Vrml.Handle_Vrml_Material_DiffuseColor(self, *args)


    def SetSpecularColor(self, *args):
        """
        SetSpecularColor(Handle_Vrml_Material self, Handle_Quantity_HArray1OfColor aSpecularColor)

        :type aSpecularColor: OCC.wrapper.Quantity.Handle_Quantity_HArray1OfColor

        """
        return _Vrml.Handle_Vrml_Material_SetSpecularColor(self, *args)


    def SpecularColor(self, *args):
        """
        SpecularColor(Handle_Vrml_Material self) -> Handle_Quantity_HArray1OfColor

        :rtype: OCC.wrapper.Quantity.Handle_Quantity_HArray1OfColor

        """
        return _Vrml.Handle_Vrml_Material_SpecularColor(self, *args)


    def SetEmissiveColor(self, *args):
        """
        SetEmissiveColor(Handle_Vrml_Material self, Handle_Quantity_HArray1OfColor aEmissiveColor)

        :type aEmissiveColor: OCC.wrapper.Quantity.Handle_Quantity_HArray1OfColor

        """
        return _Vrml.Handle_Vrml_Material_SetEmissiveColor(self, *args)


    def EmissiveColor(self, *args):
        """
        EmissiveColor(Handle_Vrml_Material self) -> Handle_Quantity_HArray1OfColor

        :rtype: OCC.wrapper.Quantity.Handle_Quantity_HArray1OfColor

        """
        return _Vrml.Handle_Vrml_Material_EmissiveColor(self, *args)


    def SetShininess(self, *args):
        """
        SetShininess(Handle_Vrml_Material self, Handle_TColStd_HArray1OfReal aShininess)

        :type aShininess: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _Vrml.Handle_Vrml_Material_SetShininess(self, *args)


    def Shininess(self, *args):
        """
        Shininess(Handle_Vrml_Material self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _Vrml.Handle_Vrml_Material_Shininess(self, *args)


    def SetTransparency(self, *args):
        """
        SetTransparency(Handle_Vrml_Material self, Handle_TColStd_HArray1OfReal aTransparency)

        :type aTransparency: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _Vrml.Handle_Vrml_Material_SetTransparency(self, *args)


    def Transparency(self, *args):
        """
        Transparency(Handle_Vrml_Material self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _Vrml.Handle_Vrml_Material_Transparency(self, *args)


    def Print(self, *args):
        """
        Print(Handle_Vrml_Material self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Handle_Vrml_Material_Print(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Vrml_Material self) -> char const *

        :rtype: const char *

        """
        return _Vrml.Handle_Vrml_Material_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Vrml.Handle_Vrml_Material_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Vrml.Handle_Vrml_Material_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Vrml_Material self)

        Memory deallocator for transient classes


        """
        return _Vrml.Handle_Vrml_Material_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Vrml_Material self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Vrml_Material self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Vrml.Handle_Vrml_Material_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Vrml_Material self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Vrml_Material self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Vrml.Handle_Vrml_Material_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Vrml_Material self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Vrml.Handle_Vrml_Material_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Vrml_Material self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Vrml.Handle_Vrml_Material_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Vrml_Material self)

        Increments the reference counter of this object


        """
        return _Vrml.Handle_Vrml_Material_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Vrml_Material self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Vrml.Handle_Vrml_Material_DecrementRefCounter(self, *args)

Handle_Vrml_Material_swigregister = _Vrml.Handle_Vrml_Material_swigregister
Handle_Vrml_Material_swigregister(Handle_Vrml_Material)

def Handle_Vrml_Material_DownCast(thing):
    return _Vrml.Handle_Vrml_Material_DownCast(thing)
Handle_Vrml_Material_DownCast = _Vrml.Handle_Vrml_Material_DownCast

class Vrml_MatrixTransform(object):
    """
    defines a MatrixTransform node of VRML specifying matrix and transform
    properties.
    This  node  defines  3D  transformation  with  a  4  by  4  matrix.
    By  default  :
    a11=1  a12=0  a13=0  a14=0
    a21=0  a22=1  a23=0  a24=0
    a31=0  a32=0  a33=1  a34=0
    a41=0  a42=0  a43=0  a44=1
    It  is  written  to  the  file  in  row-major  order  as  16  Real numbers
    separated  by  whitespace.  For  example ,  matrix  expressing  a  translation
    of  7.3  units  along  the  X  axis  is  written  as:
    1  0  0  0   0  1  0  0   0  0  1  0   7.3 0  0  1
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Vrml_MatrixTransform self) -> Vrml_MatrixTransform
        __init__(Vrml_MatrixTransform self, gp_Trsf aMatrix) -> Vrml_MatrixTransform

        :type aMatrix: OCC.wrapper.gp.gp_Trsf

        """
        this = _Vrml.new_Vrml_MatrixTransform(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetMatrix(self, *args):
        """
        SetMatrix(Vrml_MatrixTransform self, gp_Trsf aMatrix)

        :type aMatrix: OCC.wrapper.gp.gp_Trsf

        """
        return _Vrml.Vrml_MatrixTransform_SetMatrix(self, *args)


    def Matrix(self, *args):
        """
        Matrix(Vrml_MatrixTransform self) -> gp_Trsf

        :rtype: OCC.wrapper.gp.gp_Trsf

        """
        return _Vrml.Vrml_MatrixTransform_Matrix(self, *args)


    def Print(self, *args):
        """
        Print(Vrml_MatrixTransform self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Vrml_MatrixTransform_Print(self, *args)

    __swig_destroy__ = _Vrml.delete_Vrml_MatrixTransform
Vrml_MatrixTransform_swigregister = _Vrml.Vrml_MatrixTransform_swigregister
Vrml_MatrixTransform_swigregister(Vrml_MatrixTransform)

class Vrml_Instancing(object):
    """
    defines  "instancing" - using  the  same  instance  of  a  node
    multiple  times.
    It  is  accomplished  by  using  the  "DEF"  and  "USE"  keywords.
    The  DEF  keyword  both  defines  a  named  node,  and  creates  a  single
    instance  of  it.
    The  USE  keyword  indicates  that  the  most  recently  defined  instance
    should  be  used  again.
    If  several  nades  were  given  the  same  name,  then  the  last  DEF
    encountered  during  parsing  "wins".
    DEF/USE  is  limited  to  a  single  file.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Vrml_Instancing self, TCollection_AsciiString aString) -> Vrml_Instancing

        Adds "DEF  <myName>" in  anOStream  (VRML  file).

        :type aString: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        this = _Vrml.new_Vrml_Instancing(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def DEF(self, *args):
        """
        DEF(Vrml_Instancing self, Standard_OStream & anOStream) -> Standard_OStream &

        Adds "USE  <myName>" in  anOStream (VRML  file).

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Vrml_Instancing_DEF(self, *args)


    def USE(self, *args):
        """
        USE(Vrml_Instancing self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Vrml_Instancing_USE(self, *args)

    __swig_destroy__ = _Vrml.delete_Vrml_Instancing
Vrml_Instancing_swigregister = _Vrml.Vrml_Instancing_swigregister
Vrml_Instancing_swigregister(Vrml_Instancing)

class Vrml_Cube(object):
    """
    defines a Cube node of VRML specifying geometry shapes.
    This  node  represents  a  cuboid aligned with  the coordinate  axes.
    By  default ,  the  cube  is  centred  at  (0,0,0) and  measures  2  units
    in  each  dimension, from -1  to  +1.
    A cube's width is its extent along its object-space X axis, its height is
    its extent along the object-space Y axis, and its depth is its extent along its
    object-space Z axis.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Vrml_Cube self, Standard_Real const aWidth=2, Standard_Real const aHeight=2, Standard_Real const aDepth=2) -> Vrml_Cube

        :type aWidth: float
        :type aHeight: float
        :type aDepth: float

        """
        this = _Vrml.new_Vrml_Cube(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetWidth(self, *args):
        """
        SetWidth(Vrml_Cube self, Standard_Real const aWidth)

        :type aWidth: float

        """
        return _Vrml.Vrml_Cube_SetWidth(self, *args)


    def Width(self, *args):
        """
        Width(Vrml_Cube self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Vrml.Vrml_Cube_Width(self, *args)


    def SetHeight(self, *args):
        """
        SetHeight(Vrml_Cube self, Standard_Real const aHeight)

        :type aHeight: float

        """
        return _Vrml.Vrml_Cube_SetHeight(self, *args)


    def Height(self, *args):
        """
        Height(Vrml_Cube self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Vrml.Vrml_Cube_Height(self, *args)


    def SetDepth(self, *args):
        """
        SetDepth(Vrml_Cube self, Standard_Real const aDepth)

        :type aDepth: float

        """
        return _Vrml.Vrml_Cube_SetDepth(self, *args)


    def Depth(self, *args):
        """
        Depth(Vrml_Cube self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Vrml.Vrml_Cube_Depth(self, *args)


    def Print(self, *args):
        """
        Print(Vrml_Cube self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Vrml_Cube_Print(self, *args)

    __swig_destroy__ = _Vrml.delete_Vrml_Cube
Vrml_Cube_swigregister = _Vrml.Vrml_Cube_swigregister
Vrml_Cube_swigregister(Vrml_Cube)

class Handle_Vrml_Normal(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Vrml_Normal self)

        Nullify the handle


        """
        return _Vrml.Handle_Vrml_Normal_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Vrml_Normal self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Vrml.Handle_Vrml_Normal_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Vrml_Normal self, Vrml_Normal thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Vrml.Handle_Vrml_Normal_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Vrml_Normal self, Handle_Vrml_Normal theHandle) -> Handle_Vrml_Normal
        assign(Handle_Vrml_Normal self, Vrml_Normal thePtr) -> Handle_Vrml_Normal
        assign(Handle_Vrml_Normal self, Handle_Vrml_Normal theHandle) -> Handle_Vrml_Normal

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Vrml.Handle_Vrml_Normal_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Vrml_Normal self) -> Vrml_Normal

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Vrml.Handle_Vrml_Normal_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Vrml_Normal self) -> Vrml_Normal

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Vrml.Handle_Vrml_Normal___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Vrml_Normal self) -> Vrml_Normal

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Vrml.Handle_Vrml_Normal___ref__(self, *args)


    def __hash__(self):
        return _Vrml.Handle_Vrml_Normal___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Vrml.Handle_Vrml_Normal___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Vrml.new_Handle_Vrml_Normal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Vrml.Handle_Vrml_Normal_DownCast)
    __swig_destroy__ = _Vrml.delete_Handle_Vrml_Normal

    def SetVector(self, *args):
        """
        SetVector(Handle_Vrml_Normal self, Handle_TColgp_HArray1OfVec aVector)

        :type aVector: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfVec

        """
        return _Vrml.Handle_Vrml_Normal_SetVector(self, *args)


    def Vector(self, *args):
        """
        Vector(Handle_Vrml_Normal self) -> Handle_TColgp_HArray1OfVec

        :rtype: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfVec

        """
        return _Vrml.Handle_Vrml_Normal_Vector(self, *args)


    def Print(self, *args):
        """
        Print(Handle_Vrml_Normal self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Handle_Vrml_Normal_Print(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Vrml_Normal self) -> char const *

        :rtype: const char *

        """
        return _Vrml.Handle_Vrml_Normal_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Vrml.Handle_Vrml_Normal_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Vrml.Handle_Vrml_Normal_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Vrml_Normal self)

        Memory deallocator for transient classes


        """
        return _Vrml.Handle_Vrml_Normal_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Vrml_Normal self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Vrml_Normal self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Vrml.Handle_Vrml_Normal_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Vrml_Normal self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Vrml_Normal self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Vrml.Handle_Vrml_Normal_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Vrml_Normal self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Vrml.Handle_Vrml_Normal_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Vrml_Normal self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Vrml.Handle_Vrml_Normal_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Vrml_Normal self)

        Increments the reference counter of this object


        """
        return _Vrml.Handle_Vrml_Normal_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Vrml_Normal self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Vrml.Handle_Vrml_Normal_DecrementRefCounter(self, *args)

Handle_Vrml_Normal_swigregister = _Vrml.Handle_Vrml_Normal_swigregister
Handle_Vrml_Normal_swigregister(Handle_Vrml_Normal)

def Handle_Vrml_Normal_DownCast(thing):
    return _Vrml.Handle_Vrml_Normal_DownCast(thing)
Handle_Vrml_Normal_DownCast = _Vrml.Handle_Vrml_Normal_DownCast

class Vrml_Rotation(object):
    """
    defines a Rotation node of VRML specifying matrix and transform properties.
    This  node  defines  a  3D  rotation  about  an  arbitrary  axis  through  the  origin.
    By  default  :  myRotation  =  (0 0 1 0)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Vrml_Rotation self) -> Vrml_Rotation
        __init__(Vrml_Rotation self, Vrml_SFRotation aRotation) -> Vrml_Rotation

        :type aRotation: OCC.wrapper.Vrml.Vrml_SFRotation

        """
        this = _Vrml.new_Vrml_Rotation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetRotation(self, *args):
        """
        SetRotation(Vrml_Rotation self, Vrml_SFRotation aRotation)

        :type aRotation: OCC.wrapper.Vrml.Vrml_SFRotation

        """
        return _Vrml.Vrml_Rotation_SetRotation(self, *args)


    def Rotation(self, *args):
        """
        Rotation(Vrml_Rotation self) -> Vrml_SFRotation

        :rtype: OCC.wrapper.Vrml.Vrml_SFRotation

        """
        return _Vrml.Vrml_Rotation_Rotation(self, *args)


    def Print(self, *args):
        """
        Print(Vrml_Rotation self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Vrml_Rotation_Print(self, *args)

    __swig_destroy__ = _Vrml.delete_Vrml_Rotation
Vrml_Rotation_swigregister = _Vrml.Vrml_Rotation_swigregister
Vrml_Rotation_swigregister(Vrml_Rotation)

class Vrml_OrthographicCamera(object):
    """
    specifies a OrthographicCamera node of VRML specifying properties of cameras.
    An orthographic camera defines a parallel projection from a viewpoint. This camera does
    not diminish objects with distance, as a PerspectiveCamera does. The viewing volume for
    an orthographic camera is a rectangular parallelepiped (a box).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Vrml_OrthographicCamera self) -> Vrml_OrthographicCamera
        __init__(Vrml_OrthographicCamera self, gp_Vec aPosition, Vrml_SFRotation aOrientation, Standard_Real const aFocalDistance, Standard_Real const aHeight) -> Vrml_OrthographicCamera

        :type aPosition: OCC.wrapper.gp.gp_Vec
        :type aOrientation: OCC.wrapper.Vrml.Vrml_SFRotation
        :type aFocalDistance: float
        :type aHeight: float

        """
        this = _Vrml.new_Vrml_OrthographicCamera(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetPosition(self, *args):
        """
        SetPosition(Vrml_OrthographicCamera self, gp_Vec aPosition)

        :type aPosition: OCC.wrapper.gp.gp_Vec

        """
        return _Vrml.Vrml_OrthographicCamera_SetPosition(self, *args)


    def Position(self, *args):
        """
        Position(Vrml_OrthographicCamera self) -> gp_Vec

        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _Vrml.Vrml_OrthographicCamera_Position(self, *args)


    def SetOrientation(self, *args):
        """
        SetOrientation(Vrml_OrthographicCamera self, Vrml_SFRotation aOrientation)

        :type aOrientation: OCC.wrapper.Vrml.Vrml_SFRotation

        """
        return _Vrml.Vrml_OrthographicCamera_SetOrientation(self, *args)


    def Orientation(self, *args):
        """
        Orientation(Vrml_OrthographicCamera self) -> Vrml_SFRotation

        :rtype: OCC.wrapper.Vrml.Vrml_SFRotation

        """
        return _Vrml.Vrml_OrthographicCamera_Orientation(self, *args)


    def SetFocalDistance(self, *args):
        """
        SetFocalDistance(Vrml_OrthographicCamera self, Standard_Real const aFocalDistance)

        :type aFocalDistance: float

        """
        return _Vrml.Vrml_OrthographicCamera_SetFocalDistance(self, *args)


    def FocalDistance(self, *args):
        """
        FocalDistance(Vrml_OrthographicCamera self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Vrml.Vrml_OrthographicCamera_FocalDistance(self, *args)


    def SetHeight(self, *args):
        """
        SetHeight(Vrml_OrthographicCamera self, Standard_Real const aHeight)

        :type aHeight: float

        """
        return _Vrml.Vrml_OrthographicCamera_SetHeight(self, *args)


    def Height(self, *args):
        """
        Height(Vrml_OrthographicCamera self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Vrml.Vrml_OrthographicCamera_Height(self, *args)


    def Print(self, *args):
        """
        Print(Vrml_OrthographicCamera self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Vrml_OrthographicCamera_Print(self, *args)

    __swig_destroy__ = _Vrml.delete_Vrml_OrthographicCamera
Vrml_OrthographicCamera_swigregister = _Vrml.Vrml_OrthographicCamera_swigregister
Vrml_OrthographicCamera_swigregister(Vrml_OrthographicCamera)

class Vrml_WWWInline(object):
    """
    defines a WWWInline node of VRML specifying group properties.
    The  WWWInline  group  node  reads  its  children  from  anywhere  in  the
    World  Wide  Web.
    Exactly  when  its  children  are  read  is  not  defined;
    reading  the  children  may  be  delayed  until  the  WWWInline  is  actually
    displayed.
    WWWInline  with  an  empty  ("")  name  does  nothing.
    WWWInline  behaves  like  a  Separator,  pushing  the  traversal  state
    before  traversing  its  children  and  popping  it  afterwards.
    By  defaults:
    myName  ("")
    myBboxSize (0,0,0)
    myBboxCenter  (0,0,0)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Vrml_WWWInline self) -> Vrml_WWWInline
        __init__(Vrml_WWWInline self, TCollection_AsciiString aName, gp_Vec aBboxSize, gp_Vec aBboxCenter) -> Vrml_WWWInline

        :type aName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type aBboxSize: OCC.wrapper.gp.gp_Vec
        :type aBboxCenter: OCC.wrapper.gp.gp_Vec

        """
        this = _Vrml.new_Vrml_WWWInline(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetName(self, *args):
        """
        SetName(Vrml_WWWInline self, TCollection_AsciiString aName)

        :type aName: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Vrml.Vrml_WWWInline_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Vrml_WWWInline self) -> TCollection_AsciiString

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Vrml.Vrml_WWWInline_Name(self, *args)


    def SetBboxSize(self, *args):
        """
        SetBboxSize(Vrml_WWWInline self, gp_Vec aBboxSize)

        :type aBboxSize: OCC.wrapper.gp.gp_Vec

        """
        return _Vrml.Vrml_WWWInline_SetBboxSize(self, *args)


    def BboxSize(self, *args):
        """
        BboxSize(Vrml_WWWInline self) -> gp_Vec

        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _Vrml.Vrml_WWWInline_BboxSize(self, *args)


    def SetBboxCenter(self, *args):
        """
        SetBboxCenter(Vrml_WWWInline self, gp_Vec aBboxCenter)

        :type aBboxCenter: OCC.wrapper.gp.gp_Vec

        """
        return _Vrml.Vrml_WWWInline_SetBboxCenter(self, *args)


    def BboxCenter(self, *args):
        """
        BboxCenter(Vrml_WWWInline self) -> gp_Vec

        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _Vrml.Vrml_WWWInline_BboxCenter(self, *args)


    def Print(self, *args):
        """
        Print(Vrml_WWWInline self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Vrml_WWWInline_Print(self, *args)

    __swig_destroy__ = _Vrml.delete_Vrml_WWWInline
Vrml_WWWInline_swigregister = _Vrml.Vrml_WWWInline_swigregister
Vrml_WWWInline_swigregister(Vrml_WWWInline)

class Vrml_PointLight(object):
    """
    defines a point  light node of VRML specifying
    properties of lights.
    This  node  defines  a  point  light  source   at  a  fixed  3D  location
    A  point  source  illuminates equally  in  all  directions;
    that  is  omni-directional.
    Color is  written  as  an  RGB  triple.
    Light intensity must be in the range 0.0 to 1.0, inclusive.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Vrml_PointLight self) -> Vrml_PointLight
        __init__(Vrml_PointLight self, Standard_Boolean const aOnOff, Standard_Real const aIntensity, Quantity_Color aColor, gp_Vec aLocation) -> Vrml_PointLight

        :type aOnOff: bool
        :type aIntensity: float
        :type aColor: OCC.wrapper.Quantity.Quantity_Color
        :type aLocation: OCC.wrapper.gp.gp_Vec

        """
        this = _Vrml.new_Vrml_PointLight(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetOnOff(self, *args):
        """
        SetOnOff(Vrml_PointLight self, Standard_Boolean const aOnOff)

        :type aOnOff: bool

        """
        return _Vrml.Vrml_PointLight_SetOnOff(self, *args)


    def OnOff(self, *args):
        """
        OnOff(Vrml_PointLight self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Vrml.Vrml_PointLight_OnOff(self, *args)


    def SetIntensity(self, *args):
        """
        SetIntensity(Vrml_PointLight self, Standard_Real const aIntensity)

        :type aIntensity: float

        """
        return _Vrml.Vrml_PointLight_SetIntensity(self, *args)


    def Intensity(self, *args):
        """
        Intensity(Vrml_PointLight self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Vrml.Vrml_PointLight_Intensity(self, *args)


    def SetColor(self, *args):
        """
        SetColor(Vrml_PointLight self, Quantity_Color aColor)

        :type aColor: OCC.wrapper.Quantity.Quantity_Color

        """
        return _Vrml.Vrml_PointLight_SetColor(self, *args)


    def Color(self, *args):
        """
        Color(Vrml_PointLight self) -> Quantity_Color

        :rtype: OCC.wrapper.Quantity.Quantity_Color

        """
        return _Vrml.Vrml_PointLight_Color(self, *args)


    def SetLocation(self, *args):
        """
        SetLocation(Vrml_PointLight self, gp_Vec aLocation)

        :type aLocation: OCC.wrapper.gp.gp_Vec

        """
        return _Vrml.Vrml_PointLight_SetLocation(self, *args)


    def Location(self, *args):
        """
        Location(Vrml_PointLight self) -> gp_Vec

        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _Vrml.Vrml_PointLight_Location(self, *args)


    def Print(self, *args):
        """
        Print(Vrml_PointLight self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Vrml_PointLight_Print(self, *args)

    __swig_destroy__ = _Vrml.delete_Vrml_PointLight
Vrml_PointLight_swigregister = _Vrml.Vrml_PointLight_swigregister
Vrml_PointLight_swigregister(Vrml_PointLight)

class Vrml_PerspectiveCamera(object):
    """
    specifies a PerspectiveCamera node of VRML specifying properties of cameras.
    A perspective camera defines a perspective projection from a viewpoint. The viewing
    volume for a perspective camera is a truncated right pyramid.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Vrml_PerspectiveCamera self) -> Vrml_PerspectiveCamera
        __init__(Vrml_PerspectiveCamera self, gp_Vec aPosition, Vrml_SFRotation aOrientation, Standard_Real const aFocalDistance, Standard_Real const aHeightAngle) -> Vrml_PerspectiveCamera

        :type aPosition: OCC.wrapper.gp.gp_Vec
        :type aOrientation: OCC.wrapper.Vrml.Vrml_SFRotation
        :type aFocalDistance: float
        :type aHeightAngle: float

        """
        this = _Vrml.new_Vrml_PerspectiveCamera(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetPosition(self, *args):
        """
        SetPosition(Vrml_PerspectiveCamera self, gp_Vec aPosition)

        :type aPosition: OCC.wrapper.gp.gp_Vec

        """
        return _Vrml.Vrml_PerspectiveCamera_SetPosition(self, *args)


    def Position(self, *args):
        """
        Position(Vrml_PerspectiveCamera self) -> gp_Vec

        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _Vrml.Vrml_PerspectiveCamera_Position(self, *args)


    def SetOrientation(self, *args):
        """
        SetOrientation(Vrml_PerspectiveCamera self, Vrml_SFRotation aOrientation)

        :type aOrientation: OCC.wrapper.Vrml.Vrml_SFRotation

        """
        return _Vrml.Vrml_PerspectiveCamera_SetOrientation(self, *args)


    def Orientation(self, *args):
        """
        Orientation(Vrml_PerspectiveCamera self) -> Vrml_SFRotation

        :rtype: OCC.wrapper.Vrml.Vrml_SFRotation

        """
        return _Vrml.Vrml_PerspectiveCamera_Orientation(self, *args)


    def SetFocalDistance(self, *args):
        """
        SetFocalDistance(Vrml_PerspectiveCamera self, Standard_Real const aFocalDistance)

        :type aFocalDistance: float

        """
        return _Vrml.Vrml_PerspectiveCamera_SetFocalDistance(self, *args)


    def FocalDistance(self, *args):
        """
        FocalDistance(Vrml_PerspectiveCamera self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Vrml.Vrml_PerspectiveCamera_FocalDistance(self, *args)


    def SetAngle(self, *args):
        """
        SetAngle(Vrml_PerspectiveCamera self, Standard_Real const aHeightAngle)

        :type aHeightAngle: float

        """
        return _Vrml.Vrml_PerspectiveCamera_SetAngle(self, *args)


    def Angle(self, *args):
        """
        Angle(Vrml_PerspectiveCamera self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Vrml.Vrml_PerspectiveCamera_Angle(self, *args)


    def Print(self, *args):
        """
        Print(Vrml_PerspectiveCamera self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Vrml_PerspectiveCamera_Print(self, *args)

    __swig_destroy__ = _Vrml.delete_Vrml_PerspectiveCamera
Vrml_PerspectiveCamera_swigregister = _Vrml.Vrml_PerspectiveCamera_swigregister
Vrml_PerspectiveCamera_swigregister(Vrml_PerspectiveCamera)

class Vrml_Cone(object):
    """
    defines a Cone node of VRML specifying geometry shapes.
    This  node  represents  a  simple  cone,  whose  central  axis  is  aligned
    with  the  y-axis.  By  default ,  the  cone  is  centred  at  (0,0,0)
    and  has  size  of  -1  to  +1  in  the  all  three  directions.
    the  cone  has  a  radius  of  1  at  the  bottom  and  height  of  2,
    with  its  apex  at  1  and  its  bottom  at  -1.  The  cone  has  two  parts:
    the  sides  and  the  bottom
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Vrml_Cone self, Vrml_ConeParts const aParts=Vrml_ConeALL, Standard_Real const aBottomRadius=1, Standard_Real const aHeight=2) -> Vrml_Cone

        :type aParts: OCC.wrapper.Vrml.Vrml_ConeParts
        :type aBottomRadius: float
        :type aHeight: float

        """
        this = _Vrml.new_Vrml_Cone(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetParts(self, *args):
        """
        SetParts(Vrml_Cone self, Vrml_ConeParts const aParts)

        :type aParts: OCC.wrapper.Vrml.Vrml_ConeParts

        """
        return _Vrml.Vrml_Cone_SetParts(self, *args)


    def Parts(self, *args):
        """
        Parts(Vrml_Cone self) -> Vrml_ConeParts

        :rtype: OCC.wrapper.Vrml.Vrml_ConeParts

        """
        return _Vrml.Vrml_Cone_Parts(self, *args)


    def SetBottomRadius(self, *args):
        """
        SetBottomRadius(Vrml_Cone self, Standard_Real const aBottomRadius)

        :type aBottomRadius: float

        """
        return _Vrml.Vrml_Cone_SetBottomRadius(self, *args)


    def BottomRadius(self, *args):
        """
        BottomRadius(Vrml_Cone self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Vrml.Vrml_Cone_BottomRadius(self, *args)


    def SetHeight(self, *args):
        """
        SetHeight(Vrml_Cone self, Standard_Real const aHeight)

        :type aHeight: float

        """
        return _Vrml.Vrml_Cone_SetHeight(self, *args)


    def Height(self, *args):
        """
        Height(Vrml_Cone self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Vrml.Vrml_Cone_Height(self, *args)


    def Print(self, *args):
        """
        Print(Vrml_Cone self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Vrml_Cone_Print(self, *args)

    __swig_destroy__ = _Vrml.delete_Vrml_Cone
Vrml_Cone_swigregister = _Vrml.Vrml_Cone_swigregister
Vrml_Cone_swigregister(Vrml_Cone)

class Vrml_Cylinder(object):
    """
    defines a Cylinder node of VRML specifying geometry shapes.
    This  node  represents  a  simple  capped  cylinder  centred  around the  y-axis.
    By  default ,  the  cylinder  is  centred  at  (0,0,0)
    and  has  size  of  -1  to  +1  in  the  all  three  dimensions.
    The  cylinder  has  three  parts:
    the  sides,  the  top  (y=+1)  and  the  bottom (y=-1)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Vrml_Cylinder self, Vrml_CylinderParts const aParts=Vrml_CylinderALL, Standard_Real const aRadius=1, Standard_Real const aHeight=2) -> Vrml_Cylinder

        :type aParts: OCC.wrapper.Vrml.Vrml_CylinderParts
        :type aRadius: float
        :type aHeight: float

        """
        this = _Vrml.new_Vrml_Cylinder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetParts(self, *args):
        """
        SetParts(Vrml_Cylinder self, Vrml_CylinderParts const aParts)

        :type aParts: OCC.wrapper.Vrml.Vrml_CylinderParts

        """
        return _Vrml.Vrml_Cylinder_SetParts(self, *args)


    def Parts(self, *args):
        """
        Parts(Vrml_Cylinder self) -> Vrml_CylinderParts

        :rtype: OCC.wrapper.Vrml.Vrml_CylinderParts

        """
        return _Vrml.Vrml_Cylinder_Parts(self, *args)


    def SetRadius(self, *args):
        """
        SetRadius(Vrml_Cylinder self, Standard_Real const aRadius)

        :type aRadius: float

        """
        return _Vrml.Vrml_Cylinder_SetRadius(self, *args)


    def Radius(self, *args):
        """
        Radius(Vrml_Cylinder self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Vrml.Vrml_Cylinder_Radius(self, *args)


    def SetHeight(self, *args):
        """
        SetHeight(Vrml_Cylinder self, Standard_Real const aHeight)

        :type aHeight: float

        """
        return _Vrml.Vrml_Cylinder_SetHeight(self, *args)


    def Height(self, *args):
        """
        Height(Vrml_Cylinder self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Vrml.Vrml_Cylinder_Height(self, *args)


    def Print(self, *args):
        """
        Print(Vrml_Cylinder self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Vrml_Cylinder_Print(self, *args)

    __swig_destroy__ = _Vrml.delete_Vrml_Cylinder
Vrml_Cylinder_swigregister = _Vrml.Vrml_Cylinder_swigregister
Vrml_Cylinder_swigregister(Vrml_Cylinder)

class Vrml_TransformSeparator(object):
    """
    defines a TransformSeparator node of VRML specifying group properties.
    This  group  node  is  similar  to  separator  node  in  that it  saves state
    before  traversing  its  children  and  restores  it  afterwards.
    This  node  can  be  used  to  isolate  transformations  to  light  sources
    or  objects.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Vrml_TransformSeparator self) -> Vrml_TransformSeparator

        defines a TransformSeparator node of VRML specifying group properties.
        This  group  node  is  similar  to  separator  node  in  that it  saves state
        before  traversing  its  children  and  restores  it  afterwards.
        This  node  can  be  used  to  isolate  transformations  to  light  sources
        or  objects.
        """
        this = _Vrml.new_Vrml_TransformSeparator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Print(self, *args):
        """
        Print(Vrml_TransformSeparator self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Vrml_TransformSeparator_Print(self, *args)

    __swig_destroy__ = _Vrml.delete_Vrml_TransformSeparator
Vrml_TransformSeparator_swigregister = _Vrml.Vrml_TransformSeparator_swigregister
Vrml_TransformSeparator_swigregister(Vrml_TransformSeparator)

class Vrml_NormalBinding(object):
    """
    defines a NormalBinding node of VRML specifying properties of geometry
    and its appearance.
    This node specifies how the current normals are bound to shapes that follow in the scene
    graph. Each shape node may interpret bindings differently.
    The bindings for faces and vertices are meaningful only for shapes that are made from
    faces and vertices. Similarly, the indexed bindings are only used by the shapes that allow
    indexing. For bindings that require multiple normals, be sure to have at least as many
    normals defined as are necessary; otherwise, errors will occur.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Vrml_NormalBinding self, Vrml_MaterialBindingAndNormalBinding const aValue) -> Vrml_NormalBinding
        __init__(Vrml_NormalBinding self) -> Vrml_NormalBinding

        :type aValue: OCC.wrapper.Vrml.Vrml_MaterialBindingAndNormalBinding

        """
        this = _Vrml.new_Vrml_NormalBinding(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetValue(self, *args):
        """
        SetValue(Vrml_NormalBinding self, Vrml_MaterialBindingAndNormalBinding const aValue)

        :type aValue: OCC.wrapper.Vrml.Vrml_MaterialBindingAndNormalBinding

        """
        return _Vrml.Vrml_NormalBinding_SetValue(self, *args)


    def Value(self, *args):
        """
        Value(Vrml_NormalBinding self) -> Vrml_MaterialBindingAndNormalBinding

        :rtype: OCC.wrapper.Vrml.Vrml_MaterialBindingAndNormalBinding

        """
        return _Vrml.Vrml_NormalBinding_Value(self, *args)


    def Print(self, *args):
        """
        Print(Vrml_NormalBinding self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Vrml_NormalBinding_Print(self, *args)

    __swig_destroy__ = _Vrml.delete_Vrml_NormalBinding
Vrml_NormalBinding_swigregister = _Vrml.Vrml_NormalBinding_swigregister
Vrml_NormalBinding_swigregister(Vrml_NormalBinding)

class Handle_Vrml_Coordinate3(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Vrml_Coordinate3 self)

        Nullify the handle


        """
        return _Vrml.Handle_Vrml_Coordinate3_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Vrml_Coordinate3 self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Vrml.Handle_Vrml_Coordinate3_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Vrml_Coordinate3 self, Vrml_Coordinate3 thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Vrml.Handle_Vrml_Coordinate3_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Vrml_Coordinate3 self, Handle_Vrml_Coordinate3 theHandle) -> Handle_Vrml_Coordinate3
        assign(Handle_Vrml_Coordinate3 self, Vrml_Coordinate3 thePtr) -> Handle_Vrml_Coordinate3
        assign(Handle_Vrml_Coordinate3 self, Handle_Vrml_Coordinate3 theHandle) -> Handle_Vrml_Coordinate3

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Vrml.Handle_Vrml_Coordinate3_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Vrml_Coordinate3 self) -> Vrml_Coordinate3

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Vrml.Handle_Vrml_Coordinate3_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Vrml_Coordinate3 self) -> Vrml_Coordinate3

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Vrml.Handle_Vrml_Coordinate3___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Vrml_Coordinate3 self) -> Vrml_Coordinate3

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Vrml.Handle_Vrml_Coordinate3___ref__(self, *args)


    def __hash__(self):
        return _Vrml.Handle_Vrml_Coordinate3___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Vrml.Handle_Vrml_Coordinate3___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Vrml.new_Handle_Vrml_Coordinate3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Vrml.Handle_Vrml_Coordinate3_DownCast)
    __swig_destroy__ = _Vrml.delete_Handle_Vrml_Coordinate3

    def SetPoint(self, *args):
        """
        SetPoint(Handle_Vrml_Coordinate3 self, Handle_TColgp_HArray1OfVec aPoint)

        :type aPoint: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfVec

        """
        return _Vrml.Handle_Vrml_Coordinate3_SetPoint(self, *args)


    def Point(self, *args):
        """
        Point(Handle_Vrml_Coordinate3 self) -> Handle_TColgp_HArray1OfVec

        :rtype: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfVec

        """
        return _Vrml.Handle_Vrml_Coordinate3_Point(self, *args)


    def Print(self, *args):
        """
        Print(Handle_Vrml_Coordinate3 self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Handle_Vrml_Coordinate3_Print(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Vrml_Coordinate3 self) -> char const *

        :rtype: const char *

        """
        return _Vrml.Handle_Vrml_Coordinate3_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Vrml.Handle_Vrml_Coordinate3_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Vrml.Handle_Vrml_Coordinate3_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Vrml_Coordinate3 self)

        Memory deallocator for transient classes


        """
        return _Vrml.Handle_Vrml_Coordinate3_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Vrml_Coordinate3 self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Vrml_Coordinate3 self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Vrml.Handle_Vrml_Coordinate3_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Vrml_Coordinate3 self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Vrml_Coordinate3 self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Vrml.Handle_Vrml_Coordinate3_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Vrml_Coordinate3 self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Vrml.Handle_Vrml_Coordinate3_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Vrml_Coordinate3 self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Vrml.Handle_Vrml_Coordinate3_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Vrml_Coordinate3 self)

        Increments the reference counter of this object


        """
        return _Vrml.Handle_Vrml_Coordinate3_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Vrml_Coordinate3 self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Vrml.Handle_Vrml_Coordinate3_DecrementRefCounter(self, *args)

Handle_Vrml_Coordinate3_swigregister = _Vrml.Handle_Vrml_Coordinate3_swigregister
Handle_Vrml_Coordinate3_swigregister(Handle_Vrml_Coordinate3)

def Handle_Vrml_Coordinate3_DownCast(thing):
    return _Vrml.Handle_Vrml_Coordinate3_DownCast(thing)
Handle_Vrml_Coordinate3_DownCast = _Vrml.Handle_Vrml_Coordinate3_DownCast

class Handle_Vrml_IndexedFaceSet(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Vrml_IndexedFaceSet self)

        Nullify the handle


        """
        return _Vrml.Handle_Vrml_IndexedFaceSet_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Vrml_IndexedFaceSet self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Vrml.Handle_Vrml_IndexedFaceSet_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Vrml_IndexedFaceSet self, Vrml_IndexedFaceSet thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Vrml.Handle_Vrml_IndexedFaceSet_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Vrml_IndexedFaceSet self, Handle_Vrml_IndexedFaceSet theHandle) -> Handle_Vrml_IndexedFaceSet
        assign(Handle_Vrml_IndexedFaceSet self, Vrml_IndexedFaceSet thePtr) -> Handle_Vrml_IndexedFaceSet
        assign(Handle_Vrml_IndexedFaceSet self, Handle_Vrml_IndexedFaceSet theHandle) -> Handle_Vrml_IndexedFaceSet

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Vrml.Handle_Vrml_IndexedFaceSet_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Vrml_IndexedFaceSet self) -> Vrml_IndexedFaceSet

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Vrml.Handle_Vrml_IndexedFaceSet_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Vrml_IndexedFaceSet self) -> Vrml_IndexedFaceSet

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Vrml.Handle_Vrml_IndexedFaceSet___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Vrml_IndexedFaceSet self) -> Vrml_IndexedFaceSet

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Vrml.Handle_Vrml_IndexedFaceSet___ref__(self, *args)


    def __hash__(self):
        return _Vrml.Handle_Vrml_IndexedFaceSet___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Vrml.Handle_Vrml_IndexedFaceSet___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Vrml.new_Handle_Vrml_IndexedFaceSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Vrml.Handle_Vrml_IndexedFaceSet_DownCast)
    __swig_destroy__ = _Vrml.delete_Handle_Vrml_IndexedFaceSet

    def SetCoordIndex(self, *args):
        """
        SetCoordIndex(Handle_Vrml_IndexedFaceSet self, Handle_TColStd_HArray1OfInteger aCoordIndex)

        :type aCoordIndex: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _Vrml.Handle_Vrml_IndexedFaceSet_SetCoordIndex(self, *args)


    def CoordIndex(self, *args):
        """
        CoordIndex(Handle_Vrml_IndexedFaceSet self) -> Handle_TColStd_HArray1OfInteger

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _Vrml.Handle_Vrml_IndexedFaceSet_CoordIndex(self, *args)


    def SetMaterialIndex(self, *args):
        """
        SetMaterialIndex(Handle_Vrml_IndexedFaceSet self, Handle_TColStd_HArray1OfInteger aMaterialIndex)

        :type aMaterialIndex: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _Vrml.Handle_Vrml_IndexedFaceSet_SetMaterialIndex(self, *args)


    def MaterialIndex(self, *args):
        """
        MaterialIndex(Handle_Vrml_IndexedFaceSet self) -> Handle_TColStd_HArray1OfInteger

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _Vrml.Handle_Vrml_IndexedFaceSet_MaterialIndex(self, *args)


    def SetNormalIndex(self, *args):
        """
        SetNormalIndex(Handle_Vrml_IndexedFaceSet self, Handle_TColStd_HArray1OfInteger aNormalIndex)

        :type aNormalIndex: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _Vrml.Handle_Vrml_IndexedFaceSet_SetNormalIndex(self, *args)


    def NormalIndex(self, *args):
        """
        NormalIndex(Handle_Vrml_IndexedFaceSet self) -> Handle_TColStd_HArray1OfInteger

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _Vrml.Handle_Vrml_IndexedFaceSet_NormalIndex(self, *args)


    def SetTextureCoordIndex(self, *args):
        """
        SetTextureCoordIndex(Handle_Vrml_IndexedFaceSet self, Handle_TColStd_HArray1OfInteger aTextureCoordIndex)

        :type aTextureCoordIndex: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _Vrml.Handle_Vrml_IndexedFaceSet_SetTextureCoordIndex(self, *args)


    def TextureCoordIndex(self, *args):
        """
        TextureCoordIndex(Handle_Vrml_IndexedFaceSet self) -> Handle_TColStd_HArray1OfInteger

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _Vrml.Handle_Vrml_IndexedFaceSet_TextureCoordIndex(self, *args)


    def Print(self, *args):
        """
        Print(Handle_Vrml_IndexedFaceSet self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Handle_Vrml_IndexedFaceSet_Print(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Vrml_IndexedFaceSet self) -> char const *

        :rtype: const char *

        """
        return _Vrml.Handle_Vrml_IndexedFaceSet_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Vrml.Handle_Vrml_IndexedFaceSet_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Vrml.Handle_Vrml_IndexedFaceSet_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Vrml_IndexedFaceSet self)

        Memory deallocator for transient classes


        """
        return _Vrml.Handle_Vrml_IndexedFaceSet_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Vrml_IndexedFaceSet self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Vrml_IndexedFaceSet self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Vrml.Handle_Vrml_IndexedFaceSet_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Vrml_IndexedFaceSet self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Vrml_IndexedFaceSet self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Vrml.Handle_Vrml_IndexedFaceSet_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Vrml_IndexedFaceSet self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Vrml.Handle_Vrml_IndexedFaceSet_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Vrml_IndexedFaceSet self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Vrml.Handle_Vrml_IndexedFaceSet_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Vrml_IndexedFaceSet self)

        Increments the reference counter of this object


        """
        return _Vrml.Handle_Vrml_IndexedFaceSet_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Vrml_IndexedFaceSet self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Vrml.Handle_Vrml_IndexedFaceSet_DecrementRefCounter(self, *args)

Handle_Vrml_IndexedFaceSet_swigregister = _Vrml.Handle_Vrml_IndexedFaceSet_swigregister
Handle_Vrml_IndexedFaceSet_swigregister(Handle_Vrml_IndexedFaceSet)

def Handle_Vrml_IndexedFaceSet_DownCast(thing):
    return _Vrml.Handle_Vrml_IndexedFaceSet_DownCast(thing)
Handle_Vrml_IndexedFaceSet_DownCast = _Vrml.Handle_Vrml_IndexedFaceSet_DownCast

class Vrml_SpotLight(object):
    """
    specifies a spot light node of VRML nodes specifying
    properties of lights.
    This  node  defines  a  spotlight  light  source.
    A  spotlight  is  placed  at  a  fixed  location  in  3D-space
    and  illuminates in  a  cone  along  a  particular  direction.
    The  intensity  of  the  illumination  drops  off  exponentially
    as  a  ray  of  light  diverges  from  this  direction  toward
    the  edges  of  cone.
    The  rate  of  drop-off  and  agle  of  the  cone  are  controlled
    by  the  dropOfRate  and  cutOffAngle
    Color is  written  as  an  RGB  triple.
    Light intensity must be in the range 0.0 to 1.0, inclusive.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Vrml_SpotLight self) -> Vrml_SpotLight
        __init__(Vrml_SpotLight self, Standard_Boolean const aOnOff, Standard_Real const aIntensity, Quantity_Color aColor, gp_Vec aLocation, gp_Vec aDirection, Standard_Real const aDropOffRate, Standard_Real const aCutOffAngle) -> Vrml_SpotLight

        :type aOnOff: bool
        :type aIntensity: float
        :type aColor: OCC.wrapper.Quantity.Quantity_Color
        :type aLocation: OCC.wrapper.gp.gp_Vec
        :type aDirection: OCC.wrapper.gp.gp_Vec
        :type aDropOffRate: float
        :type aCutOffAngle: float

        """
        this = _Vrml.new_Vrml_SpotLight(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetOnOff(self, *args):
        """
        SetOnOff(Vrml_SpotLight self, Standard_Boolean const anOnOff)

        :type anOnOff: bool

        """
        return _Vrml.Vrml_SpotLight_SetOnOff(self, *args)


    def OnOff(self, *args):
        """
        OnOff(Vrml_SpotLight self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Vrml.Vrml_SpotLight_OnOff(self, *args)


    def SetIntensity(self, *args):
        """
        SetIntensity(Vrml_SpotLight self, Standard_Real const aIntensity)

        :type aIntensity: float

        """
        return _Vrml.Vrml_SpotLight_SetIntensity(self, *args)


    def Intensity(self, *args):
        """
        Intensity(Vrml_SpotLight self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Vrml.Vrml_SpotLight_Intensity(self, *args)


    def SetColor(self, *args):
        """
        SetColor(Vrml_SpotLight self, Quantity_Color aColor)

        :type aColor: OCC.wrapper.Quantity.Quantity_Color

        """
        return _Vrml.Vrml_SpotLight_SetColor(self, *args)


    def Color(self, *args):
        """
        Color(Vrml_SpotLight self) -> Quantity_Color

        :rtype: OCC.wrapper.Quantity.Quantity_Color

        """
        return _Vrml.Vrml_SpotLight_Color(self, *args)


    def SetLocation(self, *args):
        """
        SetLocation(Vrml_SpotLight self, gp_Vec aLocation)

        :type aLocation: OCC.wrapper.gp.gp_Vec

        """
        return _Vrml.Vrml_SpotLight_SetLocation(self, *args)


    def Location(self, *args):
        """
        Location(Vrml_SpotLight self) -> gp_Vec

        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _Vrml.Vrml_SpotLight_Location(self, *args)


    def SetDirection(self, *args):
        """
        SetDirection(Vrml_SpotLight self, gp_Vec aDirection)

        :type aDirection: OCC.wrapper.gp.gp_Vec

        """
        return _Vrml.Vrml_SpotLight_SetDirection(self, *args)


    def Direction(self, *args):
        """
        Direction(Vrml_SpotLight self) -> gp_Vec

        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _Vrml.Vrml_SpotLight_Direction(self, *args)


    def SetDropOffRate(self, *args):
        """
        SetDropOffRate(Vrml_SpotLight self, Standard_Real const aDropOffRate)

        :type aDropOffRate: float

        """
        return _Vrml.Vrml_SpotLight_SetDropOffRate(self, *args)


    def DropOffRate(self, *args):
        """
        DropOffRate(Vrml_SpotLight self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Vrml.Vrml_SpotLight_DropOffRate(self, *args)


    def SetCutOffAngle(self, *args):
        """
        SetCutOffAngle(Vrml_SpotLight self, Standard_Real const aCutOffAngle)

        :type aCutOffAngle: float

        """
        return _Vrml.Vrml_SpotLight_SetCutOffAngle(self, *args)


    def CutOffAngle(self, *args):
        """
        CutOffAngle(Vrml_SpotLight self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Vrml.Vrml_SpotLight_CutOffAngle(self, *args)


    def Print(self, *args):
        """
        Print(Vrml_SpotLight self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Vrml_SpotLight_Print(self, *args)

    __swig_destroy__ = _Vrml.delete_Vrml_SpotLight
Vrml_SpotLight_swigregister = _Vrml.Vrml_SpotLight_swigregister
Vrml_SpotLight_swigregister(Vrml_SpotLight)

class Vrml_Switch(object):
    """
    defines a Switch node of VRML specifying group properties.
    This  group  node  traverses  one,  none,  or  all  of  its  children.
    One  can  use  this  node  to  switch  on  and  off  the  effects  of  some
    properties  or  to  switch  between  different  properties.
    The  whichChild  field  specifies  the  index  of  the  child  to  traverse,
    where  the  first  child  has  index  0.
    A  value  of  -1  (the  default)  means  do  not  traverse  any  children.
    A  value  of  -3  traverses  all  children,  making  the  switch  behave  exactly
    like  a  regular  Group.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Vrml_Switch self, Standard_Integer const aWhichChild=-1) -> Vrml_Switch

        :type aWhichChild: int

        """
        this = _Vrml.new_Vrml_Switch(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetWhichChild(self, *args):
        """
        SetWhichChild(Vrml_Switch self, Standard_Integer const aWhichChild)

        :type aWhichChild: int

        """
        return _Vrml.Vrml_Switch_SetWhichChild(self, *args)


    def WhichChild(self, *args):
        """
        WhichChild(Vrml_Switch self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Vrml.Vrml_Switch_WhichChild(self, *args)


    def Print(self, *args):
        """
        Print(Vrml_Switch self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Vrml_Switch_Print(self, *args)

    __swig_destroy__ = _Vrml.delete_Vrml_Switch
Vrml_Switch_swigregister = _Vrml.Vrml_Switch_swigregister
Vrml_Switch_swigregister(Vrml_Switch)

class Vrml_Separator(object):
    """
    defines a Separator node of VRML specifying group properties.
    This group node performs a push (save) of the traversal state before traversing its children
    and a pop (restore) after traversing them. This isolates the separator's children from the
    rest of the scene graph. A separator can include lights, cameras, coordinates, normals,
    bindings, and all other properties.
    Separators can also perform render culling. Render culling skips over traversal of the
    separator's children if they are not going to be rendered, based on the comparison of the
    separator's bounding box with the current view volume. Culling is controlled by the
    renderCulling field. These are set to AUTO by default, allowing the implementation to
    decide whether or not to cull.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Vrml_Separator self, Vrml_SeparatorRenderCulling const aRenderCulling) -> Vrml_Separator
        __init__(Vrml_Separator self) -> Vrml_Separator

        :type aRenderCulling: OCC.wrapper.Vrml.Vrml_SeparatorRenderCulling

        """
        this = _Vrml.new_Vrml_Separator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetRenderCulling(self, *args):
        """
        SetRenderCulling(Vrml_Separator self, Vrml_SeparatorRenderCulling const aRenderCulling)

        :type aRenderCulling: OCC.wrapper.Vrml.Vrml_SeparatorRenderCulling

        """
        return _Vrml.Vrml_Separator_SetRenderCulling(self, *args)


    def RenderCulling(self, *args):
        """
        RenderCulling(Vrml_Separator self) -> Vrml_SeparatorRenderCulling

        :rtype: OCC.wrapper.Vrml.Vrml_SeparatorRenderCulling

        """
        return _Vrml.Vrml_Separator_RenderCulling(self, *args)


    def Print(self, *args):
        """
        Print(Vrml_Separator self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Vrml_Separator_Print(self, *args)

    __swig_destroy__ = _Vrml.delete_Vrml_Separator
Vrml_Separator_swigregister = _Vrml.Vrml_Separator_swigregister
Vrml_Separator_swigregister(Vrml_Separator)

class Handle_Vrml_IndexedLineSet(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Vrml_IndexedLineSet self)

        Nullify the handle


        """
        return _Vrml.Handle_Vrml_IndexedLineSet_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Vrml_IndexedLineSet self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Vrml.Handle_Vrml_IndexedLineSet_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Vrml_IndexedLineSet self, Vrml_IndexedLineSet thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Vrml.Handle_Vrml_IndexedLineSet_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Vrml_IndexedLineSet self, Handle_Vrml_IndexedLineSet theHandle) -> Handle_Vrml_IndexedLineSet
        assign(Handle_Vrml_IndexedLineSet self, Vrml_IndexedLineSet thePtr) -> Handle_Vrml_IndexedLineSet
        assign(Handle_Vrml_IndexedLineSet self, Handle_Vrml_IndexedLineSet theHandle) -> Handle_Vrml_IndexedLineSet

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Vrml.Handle_Vrml_IndexedLineSet_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Vrml_IndexedLineSet self) -> Vrml_IndexedLineSet

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Vrml.Handle_Vrml_IndexedLineSet_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Vrml_IndexedLineSet self) -> Vrml_IndexedLineSet

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Vrml.Handle_Vrml_IndexedLineSet___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Vrml_IndexedLineSet self) -> Vrml_IndexedLineSet

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Vrml.Handle_Vrml_IndexedLineSet___ref__(self, *args)


    def __hash__(self):
        return _Vrml.Handle_Vrml_IndexedLineSet___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Vrml.Handle_Vrml_IndexedLineSet___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Vrml.new_Handle_Vrml_IndexedLineSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Vrml.Handle_Vrml_IndexedLineSet_DownCast)
    __swig_destroy__ = _Vrml.delete_Handle_Vrml_IndexedLineSet

    def SetCoordIndex(self, *args):
        """
        SetCoordIndex(Handle_Vrml_IndexedLineSet self, Handle_TColStd_HArray1OfInteger aCoordIndex)

        :type aCoordIndex: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _Vrml.Handle_Vrml_IndexedLineSet_SetCoordIndex(self, *args)


    def CoordIndex(self, *args):
        """
        CoordIndex(Handle_Vrml_IndexedLineSet self) -> Handle_TColStd_HArray1OfInteger

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _Vrml.Handle_Vrml_IndexedLineSet_CoordIndex(self, *args)


    def SetMaterialIndex(self, *args):
        """
        SetMaterialIndex(Handle_Vrml_IndexedLineSet self, Handle_TColStd_HArray1OfInteger aMaterialIndex)

        :type aMaterialIndex: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _Vrml.Handle_Vrml_IndexedLineSet_SetMaterialIndex(self, *args)


    def MaterialIndex(self, *args):
        """
        MaterialIndex(Handle_Vrml_IndexedLineSet self) -> Handle_TColStd_HArray1OfInteger

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _Vrml.Handle_Vrml_IndexedLineSet_MaterialIndex(self, *args)


    def SetNormalIndex(self, *args):
        """
        SetNormalIndex(Handle_Vrml_IndexedLineSet self, Handle_TColStd_HArray1OfInteger aNormalIndex)

        :type aNormalIndex: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _Vrml.Handle_Vrml_IndexedLineSet_SetNormalIndex(self, *args)


    def NormalIndex(self, *args):
        """
        NormalIndex(Handle_Vrml_IndexedLineSet self) -> Handle_TColStd_HArray1OfInteger

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _Vrml.Handle_Vrml_IndexedLineSet_NormalIndex(self, *args)


    def SetTextureCoordIndex(self, *args):
        """
        SetTextureCoordIndex(Handle_Vrml_IndexedLineSet self, Handle_TColStd_HArray1OfInteger aTextureCoordIndex)

        :type aTextureCoordIndex: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _Vrml.Handle_Vrml_IndexedLineSet_SetTextureCoordIndex(self, *args)


    def TextureCoordIndex(self, *args):
        """
        TextureCoordIndex(Handle_Vrml_IndexedLineSet self) -> Handle_TColStd_HArray1OfInteger

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _Vrml.Handle_Vrml_IndexedLineSet_TextureCoordIndex(self, *args)


    def Print(self, *args):
        """
        Print(Handle_Vrml_IndexedLineSet self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Handle_Vrml_IndexedLineSet_Print(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Vrml_IndexedLineSet self) -> char const *

        :rtype: const char *

        """
        return _Vrml.Handle_Vrml_IndexedLineSet_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Vrml.Handle_Vrml_IndexedLineSet_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Vrml.Handle_Vrml_IndexedLineSet_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Vrml_IndexedLineSet self)

        Memory deallocator for transient classes


        """
        return _Vrml.Handle_Vrml_IndexedLineSet_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Vrml_IndexedLineSet self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Vrml_IndexedLineSet self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Vrml.Handle_Vrml_IndexedLineSet_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Vrml_IndexedLineSet self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Vrml_IndexedLineSet self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Vrml.Handle_Vrml_IndexedLineSet_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Vrml_IndexedLineSet self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Vrml.Handle_Vrml_IndexedLineSet_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Vrml_IndexedLineSet self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Vrml.Handle_Vrml_IndexedLineSet_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Vrml_IndexedLineSet self)

        Increments the reference counter of this object


        """
        return _Vrml.Handle_Vrml_IndexedLineSet_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Vrml_IndexedLineSet self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Vrml.Handle_Vrml_IndexedLineSet_DecrementRefCounter(self, *args)

Handle_Vrml_IndexedLineSet_swigregister = _Vrml.Handle_Vrml_IndexedLineSet_swigregister
Handle_Vrml_IndexedLineSet_swigregister(Handle_Vrml_IndexedLineSet)

def Handle_Vrml_IndexedLineSet_DownCast(thing):
    return _Vrml.Handle_Vrml_IndexedLineSet_DownCast(thing)
Handle_Vrml_IndexedLineSet_DownCast = _Vrml.Handle_Vrml_IndexedLineSet_DownCast

class Vrml_ShapeHints(object):
    """
    defines a ShapeHints node of VRML specifying properties of geometry and its appearance.
    The ShapeHints node indicates that IndexedFaceSets are solid, contain ordered vertices, or
    contain convex faces.
    These hints allow VRML implementations to optimize certain rendering features.
    Optimizations that may be performed include enabling back-face culling and disabling
    two-sided lighting. For example, if an object is solid and has ordered vertices, an
    implementation may turn on backface culling and turn off two-sided lighting. To ensure
    that an IndexedFaceSet can be viewed from either direction, set shapeType to be
    UNKNOWN_SHAPE_TYPE.
    If you know that your shapes are closed and will alwsys be viewed from the outside, set
    vertexOrdering to be either CLOCKWISE or COUNTERCLOCKWISE (depending on
    how you built your object), and set shapeType to be SOLID. Placing this near the top of
    your VRML file will allow the scene to be rendered much faster.
    The ShapeHints node also affects how default normals are generated. When an
    IndexedFaceSet has to generate default normals, it uses the creaseAngle field to determine
    which edges should be smoothly shaded and which ones should have a sharp crease. The
    crease angle is the angle between surface normals on adjacent polygons. For example, a
    crease angle of .5 radians (the default value) means that an edge between two adjacent
    polygonal faces will be smooth shaded if the normals to the two faces form an angle that is
    less than .5 radians (about 30 degrees). Otherwise, it will be faceted.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Vrml_ShapeHints self, Vrml_VertexOrdering const aVertexOrdering=Vrml_UNKNOWN_ORDERING, Vrml_ShapeType const aShapeType=Vrml_UNKNOWN_SHAPE_TYPE, Vrml_FaceType const aFaceType=Vrml_CONVEX, Standard_Real const aAngle=0.5) -> Vrml_ShapeHints

        :type aVertexOrdering: OCC.wrapper.Vrml.Vrml_VertexOrdering
        :type aShapeType: OCC.wrapper.Vrml.Vrml_ShapeType
        :type aFaceType: OCC.wrapper.Vrml.Vrml_FaceType
        :type aAngle: float

        """
        this = _Vrml.new_Vrml_ShapeHints(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetVertexOrdering(self, *args):
        """
        SetVertexOrdering(Vrml_ShapeHints self, Vrml_VertexOrdering const aVertexOrdering)

        :type aVertexOrdering: OCC.wrapper.Vrml.Vrml_VertexOrdering

        """
        return _Vrml.Vrml_ShapeHints_SetVertexOrdering(self, *args)


    def VertexOrdering(self, *args):
        """
        VertexOrdering(Vrml_ShapeHints self) -> Vrml_VertexOrdering

        :rtype: OCC.wrapper.Vrml.Vrml_VertexOrdering

        """
        return _Vrml.Vrml_ShapeHints_VertexOrdering(self, *args)


    def SetShapeType(self, *args):
        """
        SetShapeType(Vrml_ShapeHints self, Vrml_ShapeType const aShapeType)

        :type aShapeType: OCC.wrapper.Vrml.Vrml_ShapeType

        """
        return _Vrml.Vrml_ShapeHints_SetShapeType(self, *args)


    def ShapeType(self, *args):
        """
        ShapeType(Vrml_ShapeHints self) -> Vrml_ShapeType

        :rtype: OCC.wrapper.Vrml.Vrml_ShapeType

        """
        return _Vrml.Vrml_ShapeHints_ShapeType(self, *args)


    def SetFaceType(self, *args):
        """
        SetFaceType(Vrml_ShapeHints self, Vrml_FaceType const aFaceType)

        :type aFaceType: OCC.wrapper.Vrml.Vrml_FaceType

        """
        return _Vrml.Vrml_ShapeHints_SetFaceType(self, *args)


    def FaceType(self, *args):
        """
        FaceType(Vrml_ShapeHints self) -> Vrml_FaceType

        :rtype: OCC.wrapper.Vrml.Vrml_FaceType

        """
        return _Vrml.Vrml_ShapeHints_FaceType(self, *args)


    def SetAngle(self, *args):
        """
        SetAngle(Vrml_ShapeHints self, Standard_Real const aAngle)

        :type aAngle: float

        """
        return _Vrml.Vrml_ShapeHints_SetAngle(self, *args)


    def Angle(self, *args):
        """
        Angle(Vrml_ShapeHints self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Vrml.Vrml_ShapeHints_Angle(self, *args)


    def Print(self, *args):
        """
        Print(Vrml_ShapeHints self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Vrml_ShapeHints_Print(self, *args)

    __swig_destroy__ = _Vrml.delete_Vrml_ShapeHints
Vrml_ShapeHints_swigregister = _Vrml.Vrml_ShapeHints_swigregister
Vrml_ShapeHints_swigregister(Vrml_ShapeHints)

class Handle_Vrml_SFImage(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Vrml_SFImage self)

        Nullify the handle


        """
        return _Vrml.Handle_Vrml_SFImage_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Vrml_SFImage self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Vrml.Handle_Vrml_SFImage_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Vrml_SFImage self, Vrml_SFImage thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Vrml.Handle_Vrml_SFImage_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Vrml_SFImage self, Handle_Vrml_SFImage theHandle) -> Handle_Vrml_SFImage
        assign(Handle_Vrml_SFImage self, Vrml_SFImage thePtr) -> Handle_Vrml_SFImage
        assign(Handle_Vrml_SFImage self, Handle_Vrml_SFImage theHandle) -> Handle_Vrml_SFImage

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Vrml.Handle_Vrml_SFImage_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Vrml_SFImage self) -> Vrml_SFImage

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Vrml.Handle_Vrml_SFImage_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Vrml_SFImage self) -> Vrml_SFImage

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Vrml.Handle_Vrml_SFImage___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Vrml_SFImage self) -> Vrml_SFImage

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Vrml.Handle_Vrml_SFImage___ref__(self, *args)


    def __hash__(self):
        return _Vrml.Handle_Vrml_SFImage___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Vrml.Handle_Vrml_SFImage___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Vrml.new_Handle_Vrml_SFImage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Vrml.Handle_Vrml_SFImage_DownCast)
    __swig_destroy__ = _Vrml.delete_Handle_Vrml_SFImage

    def SetWidth(self, *args):
        """
        SetWidth(Handle_Vrml_SFImage self, Standard_Integer const aWidth)

        :type aWidth: int

        """
        return _Vrml.Handle_Vrml_SFImage_SetWidth(self, *args)


    def Width(self, *args):
        """
        Width(Handle_Vrml_SFImage self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Vrml.Handle_Vrml_SFImage_Width(self, *args)


    def SetHeight(self, *args):
        """
        SetHeight(Handle_Vrml_SFImage self, Standard_Integer const aHeight)

        :type aHeight: int

        """
        return _Vrml.Handle_Vrml_SFImage_SetHeight(self, *args)


    def Height(self, *args):
        """
        Height(Handle_Vrml_SFImage self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Vrml.Handle_Vrml_SFImage_Height(self, *args)


    def SetNumber(self, *args):
        """
        SetNumber(Handle_Vrml_SFImage self, Vrml_SFImageNumber const aNumber)

        :type aNumber: OCC.wrapper.Vrml.Vrml_SFImageNumber

        """
        return _Vrml.Handle_Vrml_SFImage_SetNumber(self, *args)


    def Number(self, *args):
        """
        Number(Handle_Vrml_SFImage self) -> Vrml_SFImageNumber

        :rtype: OCC.wrapper.Vrml.Vrml_SFImageNumber

        """
        return _Vrml.Handle_Vrml_SFImage_Number(self, *args)


    def SetArray(self, *args):
        """
        SetArray(Handle_Vrml_SFImage self, Handle_TColStd_HArray1OfInteger anArray)

        :type anArray: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _Vrml.Handle_Vrml_SFImage_SetArray(self, *args)


    def Array(self, *args):
        """
        Array(Handle_Vrml_SFImage self) -> Handle_TColStd_HArray1OfInteger

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _Vrml.Handle_Vrml_SFImage_Array(self, *args)


    def ArrayFlag(self, *args):
        """
        ArrayFlag(Handle_Vrml_SFImage self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Vrml.Handle_Vrml_SFImage_ArrayFlag(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Vrml_SFImage self) -> char const *

        :rtype: const char *

        """
        return _Vrml.Handle_Vrml_SFImage_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Vrml.Handle_Vrml_SFImage_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Vrml.Handle_Vrml_SFImage_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Vrml_SFImage self)

        Memory deallocator for transient classes


        """
        return _Vrml.Handle_Vrml_SFImage_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Vrml_SFImage self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Vrml_SFImage self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Vrml.Handle_Vrml_SFImage_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Vrml_SFImage self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Vrml_SFImage self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Vrml.Handle_Vrml_SFImage_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Vrml_SFImage self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Vrml.Handle_Vrml_SFImage_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Vrml_SFImage self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Vrml.Handle_Vrml_SFImage_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Vrml_SFImage self)

        Increments the reference counter of this object


        """
        return _Vrml.Handle_Vrml_SFImage_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Vrml_SFImage self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Vrml.Handle_Vrml_SFImage_DecrementRefCounter(self, *args)

Handle_Vrml_SFImage_swigregister = _Vrml.Handle_Vrml_SFImage_swigregister
Handle_Vrml_SFImage_swigregister(Handle_Vrml_SFImage)

def Handle_Vrml_SFImage_DownCast(thing):
    return _Vrml.Handle_Vrml_SFImage_DownCast(thing)
Handle_Vrml_SFImage_DownCast = _Vrml.Handle_Vrml_SFImage_DownCast

class Vrml_Info(object):
    """
    defines a Info node of VRML specifying properties of geometry
    and its appearance.
    It  is  used  to  store  information  in  the  scene  graph,
    Typically  for  application-specific  purposes,  copyright  messages,
    or  other  strings.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Vrml_Info self, TCollection_AsciiString aString) -> Vrml_Info

        :type aString: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        this = _Vrml.new_Vrml_Info(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetString(self, *args):
        """
        SetString(Vrml_Info self, TCollection_AsciiString aString)

        :type aString: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Vrml.Vrml_Info_SetString(self, *args)


    def String(self, *args):
        """
        String(Vrml_Info self) -> TCollection_AsciiString

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Vrml.Vrml_Info_String(self, *args)


    def Print(self, *args):
        """
        Print(Vrml_Info self, Standard_OStream & anOStream) -> Standard_OStream &

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Vrml_Info_Print(self, *args)

    __swig_destroy__ = _Vrml.delete_Vrml_Info
Vrml_Info_swigregister = _Vrml.Vrml_Info_swigregister
Vrml_Info_swigregister(Vrml_Info)

class Vrml_(object):
    """
    Vrml package  implements the specification  of the
    VRML ( Virtual  Reality Modeling Language ).  VRML
    is a standard  language for describing interactive
    3-D objects and  worlds delivered across Internet.
    Actual version of Vrml package have made for objects
    of VRML version 1.0.
    This package is used by VrmlConverter package.
    The developer should  already be familiar with VRML
    specification before using this package.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def VrmlHeaderWriter(*args):
        """
        VrmlHeaderWriter(Standard_OStream & anOStream) -> Standard_OStream &

        Writes a header in anOStream (VRML file).
        Writes one line of commentary in  anOStream (VRML file).

        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Vrml__VrmlHeaderWriter(*args)

    VrmlHeaderWriter = staticmethod(VrmlHeaderWriter)

    def CommentWriter(*args):
        """
        CommentWriter(Standard_CString const aComment, Standard_OStream & anOStream) -> Standard_OStream &

        :type aComment: OCC.wrapper.Standard.Standard_CString
        :type anOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _Vrml.Vrml__CommentWriter(*args)

    CommentWriter = staticmethod(CommentWriter)

    def __init__(self):
        """
        Vrml package  implements the specification  of the
        VRML ( Virtual  Reality Modeling Language ).  VRML
        is a standard  language for describing interactive
        3-D objects and  worlds delivered across Internet.
        Actual version of Vrml package have made for objects
        of VRML version 1.0.
        This package is used by VrmlConverter package.
        The developer should  already be familiar with VRML
        specification before using this package.
        """
        this = _Vrml.new_Vrml_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Vrml.delete_Vrml_
Vrml__swigregister = _Vrml.Vrml__swigregister
Vrml__swigregister(Vrml_)

def Vrml__VrmlHeaderWriter(*args):
    """
    Vrml__VrmlHeaderWriter(Standard_OStream & anOStream) -> Standard_OStream &

    Writes a header in anOStream (VRML file).
    Writes one line of commentary in  anOStream (VRML file).

    :type anOStream: OCC.wrapper.Standard.Standard_OStream
    :rtype: OCC.wrapper.Standard.Standard_OStream

    """
    return _Vrml.Vrml__VrmlHeaderWriter(*args)

def Vrml__CommentWriter(*args):
    """
    Vrml__CommentWriter(Standard_CString const aComment, Standard_OStream & anOStream) -> Standard_OStream &

    :type aComment: OCC.wrapper.Standard.Standard_CString
    :type anOStream: OCC.wrapper.Standard.Standard_OStream
    :rtype: OCC.wrapper.Standard.Standard_OStream

    """
    return _Vrml.Vrml__CommentWriter(*args)



