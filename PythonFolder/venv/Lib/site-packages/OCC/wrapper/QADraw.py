# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_QADraw')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_QADraw')
    _QADraw = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_QADraw', [dirname(__file__)])
        except ImportError:
            import _QADraw
            return _QADraw
        try:
            _mod = imp.load_module('_QADraw', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _QADraw = swig_import_helper()
    del swig_import_helper
else:
    import _QADraw
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _QADraw.delete_SwigPyIterator

    def value(self):
        return _QADraw.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _QADraw.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _QADraw.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _QADraw.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _QADraw.SwigPyIterator_equal(self, x)

    def copy(self):
        return _QADraw.SwigPyIterator_copy(self)

    def next(self):
        return _QADraw.SwigPyIterator_next(self)

    def __next__(self):
        return _QADraw.SwigPyIterator___next__(self)

    def previous(self):
        return _QADraw.SwigPyIterator_previous(self)

    def advance(self, n):
        return _QADraw.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _QADraw.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _QADraw.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _QADraw.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _QADraw.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _QADraw.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _QADraw.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _QADraw.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _QADraw.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_QADraw.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _QADraw.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _QADraw.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QADraw.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _QADraw.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _QADraw.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _QADraw.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _QADraw.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_QADraw.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _QADraw.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _QADraw.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QADraw.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _QADraw.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _QADraw.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _QADraw.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _QADraw.ptr_to_number(item)
ptr_to_number = _QADraw.ptr_to_number

def HashCode(*args):
    return _QADraw.HashCode(*args)
HashCode = _QADraw.HashCode

def ptr_equal(a, b):
    return _QADraw.ptr_equal(a, b)
ptr_equal = _QADraw.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Draw
else:
    import Draw
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
class QADraw_(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CommonCommands(*args):
        """
        CommonCommands(Draw_Interpretor DI)

        Define specicial commands for AIS.

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _QADraw.QADraw__CommonCommands(*args)

    CommonCommands = staticmethod(CommonCommands)

    def AdditionalCommands(*args):
        """
        AdditionalCommands(Draw_Interpretor DI)

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _QADraw.QADraw__AdditionalCommands(*args)

    AdditionalCommands = staticmethod(AdditionalCommands)

    def Factory(*args):
        """
        Factory(Draw_Interpretor DI)

        Loads all QA Draw commands. Used for plugin.

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _QADraw.QADraw__Factory(*args)

    Factory = staticmethod(Factory)

    def __init__(self):
        this = _QADraw.new_QADraw_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QADraw.delete_QADraw_
QADraw__swigregister = _QADraw.QADraw__swigregister
QADraw__swigregister(QADraw_)

def QADraw__CommonCommands(*args):
    """
    QADraw__CommonCommands(Draw_Interpretor DI)

    Define specicial commands for AIS.

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _QADraw.QADraw__CommonCommands(*args)

def QADraw__AdditionalCommands(*args):
    """
    QADraw__AdditionalCommands(Draw_Interpretor DI)

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _QADraw.QADraw__AdditionalCommands(*args)

def QADraw__Factory(*args):
    """
    QADraw__Factory(Draw_Interpretor DI)

    Loads all QA Draw commands. Used for plugin.

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _QADraw.QADraw__Factory(*args)



