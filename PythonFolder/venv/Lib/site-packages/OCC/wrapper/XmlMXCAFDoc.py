# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_XmlMXCAFDoc')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_XmlMXCAFDoc')
    _XmlMXCAFDoc = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_XmlMXCAFDoc', [dirname(__file__)])
        except ImportError:
            import _XmlMXCAFDoc
            return _XmlMXCAFDoc
        try:
            _mod = imp.load_module('_XmlMXCAFDoc', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _XmlMXCAFDoc = swig_import_helper()
    del swig_import_helper
else:
    import _XmlMXCAFDoc
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XmlMXCAFDoc.delete_SwigPyIterator

    def value(self):
        return _XmlMXCAFDoc.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _XmlMXCAFDoc.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _XmlMXCAFDoc.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _XmlMXCAFDoc.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _XmlMXCAFDoc.SwigPyIterator_equal(self, x)

    def copy(self):
        return _XmlMXCAFDoc.SwigPyIterator_copy(self)

    def next(self):
        return _XmlMXCAFDoc.SwigPyIterator_next(self)

    def __next__(self):
        return _XmlMXCAFDoc.SwigPyIterator___next__(self)

    def previous(self):
        return _XmlMXCAFDoc.SwigPyIterator_previous(self)

    def advance(self, n):
        return _XmlMXCAFDoc.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _XmlMXCAFDoc.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _XmlMXCAFDoc.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _XmlMXCAFDoc.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _XmlMXCAFDoc.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _XmlMXCAFDoc.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _XmlMXCAFDoc.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _XmlMXCAFDoc.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _XmlMXCAFDoc.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_XmlMXCAFDoc.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _XmlMXCAFDoc.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _XmlMXCAFDoc.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlMXCAFDoc.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _XmlMXCAFDoc.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _XmlMXCAFDoc.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _XmlMXCAFDoc.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _XmlMXCAFDoc.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_XmlMXCAFDoc.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _XmlMXCAFDoc.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _XmlMXCAFDoc.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlMXCAFDoc.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _XmlMXCAFDoc.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _XmlMXCAFDoc.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _XmlMXCAFDoc.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _XmlMXCAFDoc.ptr_to_number(item)
ptr_to_number = _XmlMXCAFDoc.ptr_to_number

def HashCode(*args):
    return _XmlMXCAFDoc.HashCode(*args)
HashCode = _XmlMXCAFDoc.HashCode

def ptr_equal(a, b):
    return _XmlMXCAFDoc.ptr_equal(a, b)
ptr_equal = _XmlMXCAFDoc.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDF
else:
    import TDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import XmlObjMgt
else:
    import XmlObjMgt
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import LDOM
else:
    import LDOM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import XmlMDF
else:
    import XmlMDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
class XmlMXCAFDoc_NoteDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMXCAFDoc_NoteDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMXCAFDoc_NoteDriver(self) 
            return h


    def Paste(self, *args):
        """
        Paste(XmlMXCAFDoc_NoteDriver self, XmlObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher theRelocTable) -> Standard_Boolean
        Paste(XmlMXCAFDoc_NoteDriver self, Handle_TDF_Attribute theSource, XmlObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_NoteDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_NoteDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_NoteDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.XmlMXCAFDoc_NoteDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMXCAFDoc.delete_XmlMXCAFDoc_NoteDriver
XmlMXCAFDoc_NoteDriver_swigregister = _XmlMXCAFDoc.XmlMXCAFDoc_NoteDriver_swigregister
XmlMXCAFDoc_NoteDriver_swigregister(XmlMXCAFDoc_NoteDriver)

def XmlMXCAFDoc_NoteDriver_get_type_name(*args):
    """
    XmlMXCAFDoc_NoteDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_NoteDriver_get_type_name(*args)

def XmlMXCAFDoc_NoteDriver_get_type_descriptor(*args):
    """
    XmlMXCAFDoc_NoteDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_NoteDriver_get_type_descriptor(*args)

class XmlMXCAFDoc_DimTolToolDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMXCAFDoc_DimTolToolDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMXCAFDoc_DimTolToolDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMXCAFDoc_DimTolToolDriver self, Handle_Message_Messenger theMsgDriver) -> XmlMXCAFDoc_DimTolToolDriver

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMXCAFDoc.new_XmlMXCAFDoc_DimTolToolDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMXCAFDoc_DimTolToolDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_DimTolToolDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMXCAFDoc_DimTolToolDriver self, XmlObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher theRelocTable) -> Standard_Boolean
        Paste(XmlMXCAFDoc_DimTolToolDriver self, Handle_TDF_Attribute theSource, XmlObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_DimTolToolDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_DimTolToolDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_DimTolToolDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.XmlMXCAFDoc_DimTolToolDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMXCAFDoc.delete_XmlMXCAFDoc_DimTolToolDriver
XmlMXCAFDoc_DimTolToolDriver_swigregister = _XmlMXCAFDoc.XmlMXCAFDoc_DimTolToolDriver_swigregister
XmlMXCAFDoc_DimTolToolDriver_swigregister(XmlMXCAFDoc_DimTolToolDriver)

def XmlMXCAFDoc_DimTolToolDriver_get_type_name(*args):
    """
    XmlMXCAFDoc_DimTolToolDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_DimTolToolDriver_get_type_name(*args)

def XmlMXCAFDoc_DimTolToolDriver_get_type_descriptor(*args):
    """
    XmlMXCAFDoc_DimTolToolDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_DimTolToolDriver_get_type_descriptor(*args)

class XmlMXCAFDoc_CentroidDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMXCAFDoc_CentroidDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMXCAFDoc_CentroidDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMXCAFDoc_CentroidDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMXCAFDoc_CentroidDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMXCAFDoc.new_XmlMXCAFDoc_CentroidDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMXCAFDoc_CentroidDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_CentroidDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMXCAFDoc_CentroidDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMXCAFDoc_CentroidDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_CentroidDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_CentroidDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_CentroidDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.XmlMXCAFDoc_CentroidDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMXCAFDoc.delete_XmlMXCAFDoc_CentroidDriver
XmlMXCAFDoc_CentroidDriver_swigregister = _XmlMXCAFDoc.XmlMXCAFDoc_CentroidDriver_swigregister
XmlMXCAFDoc_CentroidDriver_swigregister(XmlMXCAFDoc_CentroidDriver)

def XmlMXCAFDoc_CentroidDriver_get_type_name(*args):
    """
    XmlMXCAFDoc_CentroidDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_CentroidDriver_get_type_name(*args)

def XmlMXCAFDoc_CentroidDriver_get_type_descriptor(*args):
    """
    XmlMXCAFDoc_CentroidDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_CentroidDriver_get_type_descriptor(*args)

class XmlMXCAFDoc_DimTolDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMXCAFDoc_DimTolDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMXCAFDoc_DimTolDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMXCAFDoc_DimTolDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMXCAFDoc_DimTolDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMXCAFDoc.new_XmlMXCAFDoc_DimTolDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMXCAFDoc_DimTolDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_DimTolDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMXCAFDoc_DimTolDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMXCAFDoc_DimTolDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_DimTolDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_DimTolDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_DimTolDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.XmlMXCAFDoc_DimTolDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMXCAFDoc.delete_XmlMXCAFDoc_DimTolDriver
XmlMXCAFDoc_DimTolDriver_swigregister = _XmlMXCAFDoc.XmlMXCAFDoc_DimTolDriver_swigregister
XmlMXCAFDoc_DimTolDriver_swigregister(XmlMXCAFDoc_DimTolDriver)

def XmlMXCAFDoc_DimTolDriver_get_type_name(*args):
    """
    XmlMXCAFDoc_DimTolDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_DimTolDriver_get_type_name(*args)

def XmlMXCAFDoc_DimTolDriver_get_type_descriptor(*args):
    """
    XmlMXCAFDoc_DimTolDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_DimTolDriver_get_type_descriptor(*args)

class XmlMXCAFDoc_LayerToolDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMXCAFDoc_LayerToolDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMXCAFDoc_LayerToolDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMXCAFDoc_LayerToolDriver self, Handle_Message_Messenger theMsgDriver) -> XmlMXCAFDoc_LayerToolDriver

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMXCAFDoc.new_XmlMXCAFDoc_LayerToolDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMXCAFDoc_LayerToolDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_LayerToolDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMXCAFDoc_LayerToolDriver self, XmlObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher theRelocTable) -> Standard_Boolean
        Paste(XmlMXCAFDoc_LayerToolDriver self, Handle_TDF_Attribute theSource, XmlObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_LayerToolDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_LayerToolDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_LayerToolDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.XmlMXCAFDoc_LayerToolDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMXCAFDoc.delete_XmlMXCAFDoc_LayerToolDriver
XmlMXCAFDoc_LayerToolDriver_swigregister = _XmlMXCAFDoc.XmlMXCAFDoc_LayerToolDriver_swigregister
XmlMXCAFDoc_LayerToolDriver_swigregister(XmlMXCAFDoc_LayerToolDriver)

def XmlMXCAFDoc_LayerToolDriver_get_type_name(*args):
    """
    XmlMXCAFDoc_LayerToolDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_LayerToolDriver_get_type_name(*args)

def XmlMXCAFDoc_LayerToolDriver_get_type_descriptor(*args):
    """
    XmlMXCAFDoc_LayerToolDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_LayerToolDriver_get_type_descriptor(*args)

class XmlMXCAFDoc_ClippingPlaneToolDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMXCAFDoc_ClippingPlaneToolDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMXCAFDoc_ClippingPlaneToolDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMXCAFDoc_ClippingPlaneToolDriver self, Handle_Message_Messenger theMsgDriver) -> XmlMXCAFDoc_ClippingPlaneToolDriver

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMXCAFDoc.new_XmlMXCAFDoc_ClippingPlaneToolDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMXCAFDoc_ClippingPlaneToolDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_ClippingPlaneToolDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMXCAFDoc_ClippingPlaneToolDriver self, XmlObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher theRelocTable) -> Standard_Boolean
        Paste(XmlMXCAFDoc_ClippingPlaneToolDriver self, Handle_TDF_Attribute theSource, XmlObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_ClippingPlaneToolDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_ClippingPlaneToolDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_ClippingPlaneToolDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.XmlMXCAFDoc_ClippingPlaneToolDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMXCAFDoc.delete_XmlMXCAFDoc_ClippingPlaneToolDriver
XmlMXCAFDoc_ClippingPlaneToolDriver_swigregister = _XmlMXCAFDoc.XmlMXCAFDoc_ClippingPlaneToolDriver_swigregister
XmlMXCAFDoc_ClippingPlaneToolDriver_swigregister(XmlMXCAFDoc_ClippingPlaneToolDriver)

def XmlMXCAFDoc_ClippingPlaneToolDriver_get_type_name(*args):
    """
    XmlMXCAFDoc_ClippingPlaneToolDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_ClippingPlaneToolDriver_get_type_name(*args)

def XmlMXCAFDoc_ClippingPlaneToolDriver_get_type_descriptor(*args):
    """
    XmlMXCAFDoc_ClippingPlaneToolDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_ClippingPlaneToolDriver_get_type_descriptor(*args)

class XmlMXCAFDoc_ShapeToolDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMXCAFDoc_ShapeToolDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMXCAFDoc_ShapeToolDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMXCAFDoc_ShapeToolDriver self, Handle_Message_Messenger theMsgDriver) -> XmlMXCAFDoc_ShapeToolDriver

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMXCAFDoc.new_XmlMXCAFDoc_ShapeToolDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMXCAFDoc_ShapeToolDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_ShapeToolDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMXCAFDoc_ShapeToolDriver self, XmlObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher theRelocTable) -> Standard_Boolean
        Paste(XmlMXCAFDoc_ShapeToolDriver self, Handle_TDF_Attribute theSource, XmlObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_ShapeToolDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_ShapeToolDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_ShapeToolDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.XmlMXCAFDoc_ShapeToolDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMXCAFDoc.delete_XmlMXCAFDoc_ShapeToolDriver
XmlMXCAFDoc_ShapeToolDriver_swigregister = _XmlMXCAFDoc.XmlMXCAFDoc_ShapeToolDriver_swigregister
XmlMXCAFDoc_ShapeToolDriver_swigregister(XmlMXCAFDoc_ShapeToolDriver)

def XmlMXCAFDoc_ShapeToolDriver_get_type_name(*args):
    """
    XmlMXCAFDoc_ShapeToolDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_ShapeToolDriver_get_type_name(*args)

def XmlMXCAFDoc_ShapeToolDriver_get_type_descriptor(*args):
    """
    XmlMXCAFDoc_ShapeToolDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_ShapeToolDriver_get_type_descriptor(*args)

class XmlMXCAFDoc_ViewToolDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMXCAFDoc_ViewToolDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMXCAFDoc_ViewToolDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMXCAFDoc_ViewToolDriver self, Handle_Message_Messenger theMsgDriver) -> XmlMXCAFDoc_ViewToolDriver

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMXCAFDoc.new_XmlMXCAFDoc_ViewToolDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMXCAFDoc_ViewToolDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_ViewToolDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMXCAFDoc_ViewToolDriver self, XmlObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher theRelocTable) -> Standard_Boolean
        Paste(XmlMXCAFDoc_ViewToolDriver self, Handle_TDF_Attribute theSource, XmlObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_ViewToolDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_ViewToolDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_ViewToolDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.XmlMXCAFDoc_ViewToolDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMXCAFDoc.delete_XmlMXCAFDoc_ViewToolDriver
XmlMXCAFDoc_ViewToolDriver_swigregister = _XmlMXCAFDoc.XmlMXCAFDoc_ViewToolDriver_swigregister
XmlMXCAFDoc_ViewToolDriver_swigregister(XmlMXCAFDoc_ViewToolDriver)

def XmlMXCAFDoc_ViewToolDriver_get_type_name(*args):
    """
    XmlMXCAFDoc_ViewToolDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_ViewToolDriver_get_type_name(*args)

def XmlMXCAFDoc_ViewToolDriver_get_type_descriptor(*args):
    """
    XmlMXCAFDoc_ViewToolDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_ViewToolDriver_get_type_descriptor(*args)

class XmlMXCAFDoc_MaterialDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMXCAFDoc_MaterialDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMXCAFDoc_MaterialDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMXCAFDoc_MaterialDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMXCAFDoc_MaterialDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMXCAFDoc.new_XmlMXCAFDoc_MaterialDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMXCAFDoc_MaterialDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_MaterialDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMXCAFDoc_MaterialDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMXCAFDoc_MaterialDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_MaterialDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_MaterialDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_MaterialDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.XmlMXCAFDoc_MaterialDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMXCAFDoc.delete_XmlMXCAFDoc_MaterialDriver
XmlMXCAFDoc_MaterialDriver_swigregister = _XmlMXCAFDoc.XmlMXCAFDoc_MaterialDriver_swigregister
XmlMXCAFDoc_MaterialDriver_swigregister(XmlMXCAFDoc_MaterialDriver)

def XmlMXCAFDoc_MaterialDriver_get_type_name(*args):
    """
    XmlMXCAFDoc_MaterialDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_MaterialDriver_get_type_name(*args)

def XmlMXCAFDoc_MaterialDriver_get_type_descriptor(*args):
    """
    XmlMXCAFDoc_MaterialDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_MaterialDriver_get_type_descriptor(*args)

class XmlMXCAFDoc_NoteCommentDriver(XmlMXCAFDoc_NoteDriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMXCAFDoc_NoteCommentDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMXCAFDoc_NoteCommentDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMXCAFDoc_NoteCommentDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMXCAFDoc_NoteCommentDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMXCAFDoc.new_XmlMXCAFDoc_NoteCommentDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMXCAFDoc_NoteCommentDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_NoteCommentDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMXCAFDoc_NoteCommentDriver self, XmlObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher theRelocTable) -> Standard_Boolean
        Paste(XmlMXCAFDoc_NoteCommentDriver self, Handle_TDF_Attribute theSource, XmlObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_NoteCommentDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_NoteCommentDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_NoteCommentDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.XmlMXCAFDoc_NoteCommentDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMXCAFDoc.delete_XmlMXCAFDoc_NoteCommentDriver
XmlMXCAFDoc_NoteCommentDriver_swigregister = _XmlMXCAFDoc.XmlMXCAFDoc_NoteCommentDriver_swigregister
XmlMXCAFDoc_NoteCommentDriver_swigregister(XmlMXCAFDoc_NoteCommentDriver)

def XmlMXCAFDoc_NoteCommentDriver_get_type_name(*args):
    """
    XmlMXCAFDoc_NoteCommentDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_NoteCommentDriver_get_type_name(*args)

def XmlMXCAFDoc_NoteCommentDriver_get_type_descriptor(*args):
    """
    XmlMXCAFDoc_NoteCommentDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_NoteCommentDriver_get_type_descriptor(*args)

class XmlMXCAFDoc_AssemblyItemRefDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMXCAFDoc_AssemblyItemRefDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMXCAFDoc_AssemblyItemRefDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMXCAFDoc_AssemblyItemRefDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMXCAFDoc_AssemblyItemRefDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMXCAFDoc.new_XmlMXCAFDoc_AssemblyItemRefDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMXCAFDoc_AssemblyItemRefDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_AssemblyItemRefDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMXCAFDoc_AssemblyItemRefDriver self, XmlObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher theRelocTable) -> Standard_Boolean
        Paste(XmlMXCAFDoc_AssemblyItemRefDriver self, Handle_TDF_Attribute theSource, XmlObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_AssemblyItemRefDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_AssemblyItemRefDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_AssemblyItemRefDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.XmlMXCAFDoc_AssemblyItemRefDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMXCAFDoc.delete_XmlMXCAFDoc_AssemblyItemRefDriver
XmlMXCAFDoc_AssemblyItemRefDriver_swigregister = _XmlMXCAFDoc.XmlMXCAFDoc_AssemblyItemRefDriver_swigregister
XmlMXCAFDoc_AssemblyItemRefDriver_swigregister(XmlMXCAFDoc_AssemblyItemRefDriver)

def XmlMXCAFDoc_AssemblyItemRefDriver_get_type_name(*args):
    """
    XmlMXCAFDoc_AssemblyItemRefDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_AssemblyItemRefDriver_get_type_name(*args)

def XmlMXCAFDoc_AssemblyItemRefDriver_get_type_descriptor(*args):
    """
    XmlMXCAFDoc_AssemblyItemRefDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_AssemblyItemRefDriver_get_type_descriptor(*args)

class XmlMXCAFDoc_LocationDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMXCAFDoc_LocationDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMXCAFDoc_LocationDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMXCAFDoc_LocationDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMXCAFDoc_LocationDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMXCAFDoc.new_XmlMXCAFDoc_LocationDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMXCAFDoc_LocationDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_LocationDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMXCAFDoc_LocationDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMXCAFDoc_LocationDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_LocationDriver_Paste(self, *args)


    def Translate(self, *args):
        """
        Translate(XmlMXCAFDoc_LocationDriver self, TopLoc_Location theLoc, LDOM_Element theParent, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theMap)
        Translate(XmlMXCAFDoc_LocationDriver self, LDOM_Element theParent, TopLoc_Location theLoc, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher theMap) -> Standard_Boolean

        Translate a storable Location to a non storable Location.

        :type theParent: OCC.wrapper.XmlObjMgt.XmlObjMgt_Element
        :type theLoc: OCC.wrapper.TopLoc.TopLoc_Location
        :type theMap: OCC.wrapper.XmlObjMgt.XmlObjMgt_RRelocationTable
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_LocationDriver_Translate(self, *args)


    def SetSharedLocations(self, *args):
        """
        SetSharedLocations(XmlMXCAFDoc_LocationDriver self, TopTools_LocationSet theLocations)

        :type theLocations: OCC.wrapper.TopTools.TopTools_LocationSetPtr

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_LocationDriver_SetSharedLocations(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_LocationDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_LocationDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.XmlMXCAFDoc_LocationDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMXCAFDoc.delete_XmlMXCAFDoc_LocationDriver
XmlMXCAFDoc_LocationDriver_swigregister = _XmlMXCAFDoc.XmlMXCAFDoc_LocationDriver_swigregister
XmlMXCAFDoc_LocationDriver_swigregister(XmlMXCAFDoc_LocationDriver)

def XmlMXCAFDoc_LocationDriver_get_type_name(*args):
    """
    XmlMXCAFDoc_LocationDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_LocationDriver_get_type_name(*args)

def XmlMXCAFDoc_LocationDriver_get_type_descriptor(*args):
    """
    XmlMXCAFDoc_LocationDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_LocationDriver_get_type_descriptor(*args)

class XmlMXCAFDoc_ColorToolDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMXCAFDoc_ColorToolDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMXCAFDoc_ColorToolDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMXCAFDoc_ColorToolDriver self, Handle_Message_Messenger theMsgDriver) -> XmlMXCAFDoc_ColorToolDriver

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMXCAFDoc.new_XmlMXCAFDoc_ColorToolDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMXCAFDoc_ColorToolDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_ColorToolDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMXCAFDoc_ColorToolDriver self, XmlObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher theRelocTable) -> Standard_Boolean
        Paste(XmlMXCAFDoc_ColorToolDriver self, Handle_TDF_Attribute theSource, XmlObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_ColorToolDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_ColorToolDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_ColorToolDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.XmlMXCAFDoc_ColorToolDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMXCAFDoc.delete_XmlMXCAFDoc_ColorToolDriver
XmlMXCAFDoc_ColorToolDriver_swigregister = _XmlMXCAFDoc.XmlMXCAFDoc_ColorToolDriver_swigregister
XmlMXCAFDoc_ColorToolDriver_swigregister(XmlMXCAFDoc_ColorToolDriver)

def XmlMXCAFDoc_ColorToolDriver_get_type_name(*args):
    """
    XmlMXCAFDoc_ColorToolDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_ColorToolDriver_get_type_name(*args)

def XmlMXCAFDoc_ColorToolDriver_get_type_descriptor(*args):
    """
    XmlMXCAFDoc_ColorToolDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_ColorToolDriver_get_type_descriptor(*args)

class XmlMXCAFDoc_NoteBalloonDriver(XmlMXCAFDoc_NoteCommentDriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMXCAFDoc_NoteBalloonDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMXCAFDoc_NoteBalloonDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMXCAFDoc_NoteBalloonDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMXCAFDoc_NoteBalloonDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMXCAFDoc.new_XmlMXCAFDoc_NoteBalloonDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMXCAFDoc_NoteBalloonDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_NoteBalloonDriver_NewEmpty(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_NoteBalloonDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_NoteBalloonDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.XmlMXCAFDoc_NoteBalloonDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMXCAFDoc.delete_XmlMXCAFDoc_NoteBalloonDriver
XmlMXCAFDoc_NoteBalloonDriver_swigregister = _XmlMXCAFDoc.XmlMXCAFDoc_NoteBalloonDriver_swigregister
XmlMXCAFDoc_NoteBalloonDriver_swigregister(XmlMXCAFDoc_NoteBalloonDriver)

def XmlMXCAFDoc_NoteBalloonDriver_get_type_name(*args):
    """
    XmlMXCAFDoc_NoteBalloonDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_NoteBalloonDriver_get_type_name(*args)

def XmlMXCAFDoc_NoteBalloonDriver_get_type_descriptor(*args):
    """
    XmlMXCAFDoc_NoteBalloonDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_NoteBalloonDriver_get_type_descriptor(*args)

class XmlMXCAFDoc_GraphNodeDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMXCAFDoc_GraphNodeDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMXCAFDoc_GraphNodeDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMXCAFDoc_GraphNodeDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMXCAFDoc_GraphNodeDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMXCAFDoc.new_XmlMXCAFDoc_GraphNodeDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMXCAFDoc_GraphNodeDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_GraphNodeDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMXCAFDoc_GraphNodeDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMXCAFDoc_GraphNodeDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_GraphNodeDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_GraphNodeDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_GraphNodeDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.XmlMXCAFDoc_GraphNodeDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMXCAFDoc.delete_XmlMXCAFDoc_GraphNodeDriver
XmlMXCAFDoc_GraphNodeDriver_swigregister = _XmlMXCAFDoc.XmlMXCAFDoc_GraphNodeDriver_swigregister
XmlMXCAFDoc_GraphNodeDriver_swigregister(XmlMXCAFDoc_GraphNodeDriver)

def XmlMXCAFDoc_GraphNodeDriver_get_type_name(*args):
    """
    XmlMXCAFDoc_GraphNodeDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_GraphNodeDriver_get_type_name(*args)

def XmlMXCAFDoc_GraphNodeDriver_get_type_descriptor(*args):
    """
    XmlMXCAFDoc_GraphNodeDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_GraphNodeDriver_get_type_descriptor(*args)

class XmlMXCAFDoc_DatumDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMXCAFDoc_DatumDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMXCAFDoc_DatumDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMXCAFDoc_DatumDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMXCAFDoc_DatumDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMXCAFDoc.new_XmlMXCAFDoc_DatumDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMXCAFDoc_DatumDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_DatumDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMXCAFDoc_DatumDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMXCAFDoc_DatumDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_DatumDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_DatumDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_DatumDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.XmlMXCAFDoc_DatumDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMXCAFDoc.delete_XmlMXCAFDoc_DatumDriver
XmlMXCAFDoc_DatumDriver_swigregister = _XmlMXCAFDoc.XmlMXCAFDoc_DatumDriver_swigregister
XmlMXCAFDoc_DatumDriver_swigregister(XmlMXCAFDoc_DatumDriver)

def XmlMXCAFDoc_DatumDriver_get_type_name(*args):
    """
    XmlMXCAFDoc_DatumDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_DatumDriver_get_type_name(*args)

def XmlMXCAFDoc_DatumDriver_get_type_descriptor(*args):
    """
    XmlMXCAFDoc_DatumDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_DatumDriver_get_type_descriptor(*args)

class XmlMXCAFDoc_NoteBinDataDriver(XmlMXCAFDoc_NoteDriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMXCAFDoc_NoteBinDataDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMXCAFDoc_NoteBinDataDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMXCAFDoc_NoteBinDataDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMXCAFDoc_NoteBinDataDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMXCAFDoc.new_XmlMXCAFDoc_NoteBinDataDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMXCAFDoc_NoteBinDataDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_NoteBinDataDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMXCAFDoc_NoteBinDataDriver self, XmlObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher theRelocTable) -> Standard_Boolean
        Paste(XmlMXCAFDoc_NoteBinDataDriver self, Handle_TDF_Attribute theSource, XmlObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_NoteBinDataDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_NoteBinDataDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_NoteBinDataDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.XmlMXCAFDoc_NoteBinDataDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMXCAFDoc.delete_XmlMXCAFDoc_NoteBinDataDriver
XmlMXCAFDoc_NoteBinDataDriver_swigregister = _XmlMXCAFDoc.XmlMXCAFDoc_NoteBinDataDriver_swigregister
XmlMXCAFDoc_NoteBinDataDriver_swigregister(XmlMXCAFDoc_NoteBinDataDriver)

def XmlMXCAFDoc_NoteBinDataDriver_get_type_name(*args):
    """
    XmlMXCAFDoc_NoteBinDataDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_NoteBinDataDriver_get_type_name(*args)

def XmlMXCAFDoc_NoteBinDataDriver_get_type_descriptor(*args):
    """
    XmlMXCAFDoc_NoteBinDataDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_NoteBinDataDriver_get_type_descriptor(*args)

class XmlMXCAFDoc_MaterialToolDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMXCAFDoc_MaterialToolDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMXCAFDoc_MaterialToolDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMXCAFDoc_MaterialToolDriver self, Handle_Message_Messenger theMsgDriver) -> XmlMXCAFDoc_MaterialToolDriver

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMXCAFDoc.new_XmlMXCAFDoc_MaterialToolDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMXCAFDoc_MaterialToolDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_MaterialToolDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMXCAFDoc_MaterialToolDriver self, XmlObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher theRelocTable) -> Standard_Boolean
        Paste(XmlMXCAFDoc_MaterialToolDriver self, Handle_TDF_Attribute theSource, XmlObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_MaterialToolDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_MaterialToolDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_MaterialToolDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.XmlMXCAFDoc_MaterialToolDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMXCAFDoc.delete_XmlMXCAFDoc_MaterialToolDriver
XmlMXCAFDoc_MaterialToolDriver_swigregister = _XmlMXCAFDoc.XmlMXCAFDoc_MaterialToolDriver_swigregister
XmlMXCAFDoc_MaterialToolDriver_swigregister(XmlMXCAFDoc_MaterialToolDriver)

def XmlMXCAFDoc_MaterialToolDriver_get_type_name(*args):
    """
    XmlMXCAFDoc_MaterialToolDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_MaterialToolDriver_get_type_name(*args)

def XmlMXCAFDoc_MaterialToolDriver_get_type_descriptor(*args):
    """
    XmlMXCAFDoc_MaterialToolDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_MaterialToolDriver_get_type_descriptor(*args)

class XmlMXCAFDoc_NotesToolDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMXCAFDoc_NotesToolDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMXCAFDoc_NotesToolDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMXCAFDoc_NotesToolDriver self, Handle_Message_Messenger theMsgDriver) -> XmlMXCAFDoc_NotesToolDriver

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMXCAFDoc.new_XmlMXCAFDoc_NotesToolDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMXCAFDoc_NotesToolDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_NotesToolDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMXCAFDoc_NotesToolDriver self, XmlObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher theRelocTable) -> Standard_Boolean
        Paste(XmlMXCAFDoc_NotesToolDriver self, Handle_TDF_Attribute theSource, XmlObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_NotesToolDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_NotesToolDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_NotesToolDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.XmlMXCAFDoc_NotesToolDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMXCAFDoc.delete_XmlMXCAFDoc_NotesToolDriver
XmlMXCAFDoc_NotesToolDriver_swigregister = _XmlMXCAFDoc.XmlMXCAFDoc_NotesToolDriver_swigregister
XmlMXCAFDoc_NotesToolDriver_swigregister(XmlMXCAFDoc_NotesToolDriver)

def XmlMXCAFDoc_NotesToolDriver_get_type_name(*args):
    """
    XmlMXCAFDoc_NotesToolDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_NotesToolDriver_get_type_name(*args)

def XmlMXCAFDoc_NotesToolDriver_get_type_descriptor(*args):
    """
    XmlMXCAFDoc_NotesToolDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_NotesToolDriver_get_type_descriptor(*args)

class Handle_XmlMXCAFDoc_ClippingPlaneToolDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMXCAFDoc_ClippingPlaneToolDriver self)

        Nullify the handle


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ClippingPlaneToolDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMXCAFDoc_ClippingPlaneToolDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ClippingPlaneToolDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMXCAFDoc_ClippingPlaneToolDriver self, XmlMXCAFDoc_ClippingPlaneToolDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ClippingPlaneToolDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMXCAFDoc_ClippingPlaneToolDriver self, Handle_XmlMXCAFDoc_ClippingPlaneToolDriver theHandle) -> Handle_XmlMXCAFDoc_ClippingPlaneToolDriver
        assign(Handle_XmlMXCAFDoc_ClippingPlaneToolDriver self, XmlMXCAFDoc_ClippingPlaneToolDriver thePtr) -> Handle_XmlMXCAFDoc_ClippingPlaneToolDriver
        assign(Handle_XmlMXCAFDoc_ClippingPlaneToolDriver self, Handle_XmlMXCAFDoc_ClippingPlaneToolDriver theHandle) -> Handle_XmlMXCAFDoc_ClippingPlaneToolDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ClippingPlaneToolDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMXCAFDoc_ClippingPlaneToolDriver self) -> XmlMXCAFDoc_ClippingPlaneToolDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ClippingPlaneToolDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMXCAFDoc_ClippingPlaneToolDriver self) -> XmlMXCAFDoc_ClippingPlaneToolDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ClippingPlaneToolDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMXCAFDoc_ClippingPlaneToolDriver self) -> XmlMXCAFDoc_ClippingPlaneToolDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ClippingPlaneToolDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ClippingPlaneToolDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ClippingPlaneToolDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMXCAFDoc.new_Handle_XmlMXCAFDoc_ClippingPlaneToolDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMXCAFDoc.Handle_XmlMXCAFDoc_ClippingPlaneToolDriver_DownCast)
    __swig_destroy__ = _XmlMXCAFDoc.delete_Handle_XmlMXCAFDoc_ClippingPlaneToolDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMXCAFDoc_ClippingPlaneToolDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ClippingPlaneToolDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMXCAFDoc_ClippingPlaneToolDriver self, XmlObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher theRelocTable) -> Standard_Boolean
        Paste(Handle_XmlMXCAFDoc_ClippingPlaneToolDriver self, Handle_TDF_Attribute theSource, XmlObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ClippingPlaneToolDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMXCAFDoc_ClippingPlaneToolDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ClippingPlaneToolDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ClippingPlaneToolDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ClippingPlaneToolDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMXCAFDoc_ClippingPlaneToolDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ClippingPlaneToolDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMXCAFDoc_ClippingPlaneToolDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ClippingPlaneToolDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ClippingPlaneToolDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMXCAFDoc_ClippingPlaneToolDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ClippingPlaneToolDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMXCAFDoc_ClippingPlaneToolDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMXCAFDoc_ClippingPlaneToolDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ClippingPlaneToolDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMXCAFDoc_ClippingPlaneToolDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMXCAFDoc_ClippingPlaneToolDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ClippingPlaneToolDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMXCAFDoc_ClippingPlaneToolDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ClippingPlaneToolDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMXCAFDoc_ClippingPlaneToolDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ClippingPlaneToolDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMXCAFDoc_ClippingPlaneToolDriver self)

        Increments the reference counter of this object


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ClippingPlaneToolDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMXCAFDoc_ClippingPlaneToolDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ClippingPlaneToolDriver_DecrementRefCounter(self, *args)

Handle_XmlMXCAFDoc_ClippingPlaneToolDriver_swigregister = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ClippingPlaneToolDriver_swigregister
Handle_XmlMXCAFDoc_ClippingPlaneToolDriver_swigregister(Handle_XmlMXCAFDoc_ClippingPlaneToolDriver)

def Handle_XmlMXCAFDoc_ClippingPlaneToolDriver_DownCast(thing):
    return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ClippingPlaneToolDriver_DownCast(thing)
Handle_XmlMXCAFDoc_ClippingPlaneToolDriver_DownCast = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ClippingPlaneToolDriver_DownCast

class Handle_XmlMXCAFDoc_MaterialDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMXCAFDoc_MaterialDriver self)

        Nullify the handle


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMXCAFDoc_MaterialDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMXCAFDoc_MaterialDriver self, XmlMXCAFDoc_MaterialDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMXCAFDoc_MaterialDriver self, Handle_XmlMXCAFDoc_MaterialDriver theHandle) -> Handle_XmlMXCAFDoc_MaterialDriver
        assign(Handle_XmlMXCAFDoc_MaterialDriver self, XmlMXCAFDoc_MaterialDriver thePtr) -> Handle_XmlMXCAFDoc_MaterialDriver
        assign(Handle_XmlMXCAFDoc_MaterialDriver self, Handle_XmlMXCAFDoc_MaterialDriver theHandle) -> Handle_XmlMXCAFDoc_MaterialDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMXCAFDoc_MaterialDriver self) -> XmlMXCAFDoc_MaterialDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMXCAFDoc_MaterialDriver self) -> XmlMXCAFDoc_MaterialDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMXCAFDoc_MaterialDriver self) -> XmlMXCAFDoc_MaterialDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMXCAFDoc.new_Handle_XmlMXCAFDoc_MaterialDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialDriver_DownCast)
    __swig_destroy__ = _XmlMXCAFDoc.delete_Handle_XmlMXCAFDoc_MaterialDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMXCAFDoc_MaterialDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMXCAFDoc_MaterialDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMXCAFDoc_MaterialDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMXCAFDoc_MaterialDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMXCAFDoc_MaterialDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMXCAFDoc_MaterialDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMXCAFDoc_MaterialDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMXCAFDoc_MaterialDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMXCAFDoc_MaterialDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMXCAFDoc_MaterialDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMXCAFDoc_MaterialDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMXCAFDoc_MaterialDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMXCAFDoc_MaterialDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMXCAFDoc_MaterialDriver self)

        Increments the reference counter of this object


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMXCAFDoc_MaterialDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialDriver_DecrementRefCounter(self, *args)

Handle_XmlMXCAFDoc_MaterialDriver_swigregister = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialDriver_swigregister
Handle_XmlMXCAFDoc_MaterialDriver_swigregister(Handle_XmlMXCAFDoc_MaterialDriver)

def Handle_XmlMXCAFDoc_MaterialDriver_DownCast(thing):
    return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialDriver_DownCast(thing)
Handle_XmlMXCAFDoc_MaterialDriver_DownCast = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialDriver_DownCast

class Handle_XmlMXCAFDoc_ColorToolDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMXCAFDoc_ColorToolDriver self)

        Nullify the handle


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorToolDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMXCAFDoc_ColorToolDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorToolDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMXCAFDoc_ColorToolDriver self, XmlMXCAFDoc_ColorToolDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorToolDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMXCAFDoc_ColorToolDriver self, Handle_XmlMXCAFDoc_ColorToolDriver theHandle) -> Handle_XmlMXCAFDoc_ColorToolDriver
        assign(Handle_XmlMXCAFDoc_ColorToolDriver self, XmlMXCAFDoc_ColorToolDriver thePtr) -> Handle_XmlMXCAFDoc_ColorToolDriver
        assign(Handle_XmlMXCAFDoc_ColorToolDriver self, Handle_XmlMXCAFDoc_ColorToolDriver theHandle) -> Handle_XmlMXCAFDoc_ColorToolDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorToolDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMXCAFDoc_ColorToolDriver self) -> XmlMXCAFDoc_ColorToolDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorToolDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMXCAFDoc_ColorToolDriver self) -> XmlMXCAFDoc_ColorToolDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorToolDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMXCAFDoc_ColorToolDriver self) -> XmlMXCAFDoc_ColorToolDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorToolDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorToolDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorToolDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMXCAFDoc.new_Handle_XmlMXCAFDoc_ColorToolDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorToolDriver_DownCast)
    __swig_destroy__ = _XmlMXCAFDoc.delete_Handle_XmlMXCAFDoc_ColorToolDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMXCAFDoc_ColorToolDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorToolDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMXCAFDoc_ColorToolDriver self, XmlObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher theRelocTable) -> Standard_Boolean
        Paste(Handle_XmlMXCAFDoc_ColorToolDriver self, Handle_TDF_Attribute theSource, XmlObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorToolDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMXCAFDoc_ColorToolDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorToolDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorToolDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorToolDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMXCAFDoc_ColorToolDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorToolDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMXCAFDoc_ColorToolDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorToolDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorToolDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMXCAFDoc_ColorToolDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorToolDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMXCAFDoc_ColorToolDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMXCAFDoc_ColorToolDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorToolDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMXCAFDoc_ColorToolDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMXCAFDoc_ColorToolDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorToolDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMXCAFDoc_ColorToolDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorToolDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMXCAFDoc_ColorToolDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorToolDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMXCAFDoc_ColorToolDriver self)

        Increments the reference counter of this object


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorToolDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMXCAFDoc_ColorToolDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorToolDriver_DecrementRefCounter(self, *args)

Handle_XmlMXCAFDoc_ColorToolDriver_swigregister = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorToolDriver_swigregister
Handle_XmlMXCAFDoc_ColorToolDriver_swigregister(Handle_XmlMXCAFDoc_ColorToolDriver)

def Handle_XmlMXCAFDoc_ColorToolDriver_DownCast(thing):
    return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorToolDriver_DownCast(thing)
Handle_XmlMXCAFDoc_ColorToolDriver_DownCast = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorToolDriver_DownCast

class Handle_XmlMXCAFDoc_DimTolToolDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMXCAFDoc_DimTolToolDriver self)

        Nullify the handle


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolToolDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMXCAFDoc_DimTolToolDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolToolDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMXCAFDoc_DimTolToolDriver self, XmlMXCAFDoc_DimTolToolDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolToolDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMXCAFDoc_DimTolToolDriver self, Handle_XmlMXCAFDoc_DimTolToolDriver theHandle) -> Handle_XmlMXCAFDoc_DimTolToolDriver
        assign(Handle_XmlMXCAFDoc_DimTolToolDriver self, XmlMXCAFDoc_DimTolToolDriver thePtr) -> Handle_XmlMXCAFDoc_DimTolToolDriver
        assign(Handle_XmlMXCAFDoc_DimTolToolDriver self, Handle_XmlMXCAFDoc_DimTolToolDriver theHandle) -> Handle_XmlMXCAFDoc_DimTolToolDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolToolDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMXCAFDoc_DimTolToolDriver self) -> XmlMXCAFDoc_DimTolToolDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolToolDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMXCAFDoc_DimTolToolDriver self) -> XmlMXCAFDoc_DimTolToolDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolToolDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMXCAFDoc_DimTolToolDriver self) -> XmlMXCAFDoc_DimTolToolDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolToolDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolToolDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolToolDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMXCAFDoc.new_Handle_XmlMXCAFDoc_DimTolToolDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolToolDriver_DownCast)
    __swig_destroy__ = _XmlMXCAFDoc.delete_Handle_XmlMXCAFDoc_DimTolToolDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMXCAFDoc_DimTolToolDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolToolDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMXCAFDoc_DimTolToolDriver self, XmlObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher theRelocTable) -> Standard_Boolean
        Paste(Handle_XmlMXCAFDoc_DimTolToolDriver self, Handle_TDF_Attribute theSource, XmlObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolToolDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMXCAFDoc_DimTolToolDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolToolDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolToolDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolToolDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMXCAFDoc_DimTolToolDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolToolDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMXCAFDoc_DimTolToolDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolToolDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolToolDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMXCAFDoc_DimTolToolDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolToolDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMXCAFDoc_DimTolToolDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMXCAFDoc_DimTolToolDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolToolDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMXCAFDoc_DimTolToolDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMXCAFDoc_DimTolToolDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolToolDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMXCAFDoc_DimTolToolDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolToolDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMXCAFDoc_DimTolToolDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolToolDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMXCAFDoc_DimTolToolDriver self)

        Increments the reference counter of this object


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolToolDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMXCAFDoc_DimTolToolDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolToolDriver_DecrementRefCounter(self, *args)

Handle_XmlMXCAFDoc_DimTolToolDriver_swigregister = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolToolDriver_swigregister
Handle_XmlMXCAFDoc_DimTolToolDriver_swigregister(Handle_XmlMXCAFDoc_DimTolToolDriver)

def Handle_XmlMXCAFDoc_DimTolToolDriver_DownCast(thing):
    return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolToolDriver_DownCast(thing)
Handle_XmlMXCAFDoc_DimTolToolDriver_DownCast = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolToolDriver_DownCast

class Handle_XmlMXCAFDoc_NoteDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMXCAFDoc_NoteDriver self)

        Nullify the handle


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMXCAFDoc_NoteDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMXCAFDoc_NoteDriver self, XmlMXCAFDoc_NoteDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMXCAFDoc_NoteDriver self, Handle_XmlMXCAFDoc_NoteDriver theHandle) -> Handle_XmlMXCAFDoc_NoteDriver
        assign(Handle_XmlMXCAFDoc_NoteDriver self, XmlMXCAFDoc_NoteDriver thePtr) -> Handle_XmlMXCAFDoc_NoteDriver
        assign(Handle_XmlMXCAFDoc_NoteDriver self, Handle_XmlMXCAFDoc_NoteDriver theHandle) -> Handle_XmlMXCAFDoc_NoteDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMXCAFDoc_NoteDriver self) -> XmlMXCAFDoc_NoteDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMXCAFDoc_NoteDriver self) -> XmlMXCAFDoc_NoteDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMXCAFDoc_NoteDriver self) -> XmlMXCAFDoc_NoteDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMXCAFDoc.new_Handle_XmlMXCAFDoc_NoteDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteDriver_DownCast)
    __swig_destroy__ = _XmlMXCAFDoc.delete_Handle_XmlMXCAFDoc_NoteDriver

    def Paste(self, *args):
        """
        Paste(Handle_XmlMXCAFDoc_NoteDriver self, XmlObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher theRelocTable) -> Standard_Boolean
        Paste(Handle_XmlMXCAFDoc_NoteDriver self, Handle_TDF_Attribute theSource, XmlObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMXCAFDoc_NoteDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMXCAFDoc_NoteDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteDriver_VersionNumber(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMXCAFDoc_NoteDriver self) -> Handle_TDF_Attribute

        Creates a new attribute from TDF.

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteDriver_NewEmpty(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMXCAFDoc_NoteDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMXCAFDoc_NoteDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMXCAFDoc_NoteDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMXCAFDoc_NoteDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMXCAFDoc_NoteDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMXCAFDoc_NoteDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMXCAFDoc_NoteDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMXCAFDoc_NoteDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMXCAFDoc_NoteDriver self)

        Increments the reference counter of this object


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMXCAFDoc_NoteDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteDriver_DecrementRefCounter(self, *args)

Handle_XmlMXCAFDoc_NoteDriver_swigregister = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteDriver_swigregister
Handle_XmlMXCAFDoc_NoteDriver_swigregister(Handle_XmlMXCAFDoc_NoteDriver)

def Handle_XmlMXCAFDoc_NoteDriver_DownCast(thing):
    return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteDriver_DownCast(thing)
Handle_XmlMXCAFDoc_NoteDriver_DownCast = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteDriver_DownCast

class XmlMXCAFDoc_DocumentToolDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMXCAFDoc_DocumentToolDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMXCAFDoc_DocumentToolDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMXCAFDoc_DocumentToolDriver self, Handle_Message_Messenger theMsgDriver) -> XmlMXCAFDoc_DocumentToolDriver

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMXCAFDoc.new_XmlMXCAFDoc_DocumentToolDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMXCAFDoc_DocumentToolDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_DocumentToolDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMXCAFDoc_DocumentToolDriver self, XmlObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher theRelocTable) -> Standard_Boolean
        Paste(XmlMXCAFDoc_DocumentToolDriver self, Handle_TDF_Attribute theSource, XmlObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_DocumentToolDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_DocumentToolDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_DocumentToolDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.XmlMXCAFDoc_DocumentToolDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMXCAFDoc.delete_XmlMXCAFDoc_DocumentToolDriver
XmlMXCAFDoc_DocumentToolDriver_swigregister = _XmlMXCAFDoc.XmlMXCAFDoc_DocumentToolDriver_swigregister
XmlMXCAFDoc_DocumentToolDriver_swigregister(XmlMXCAFDoc_DocumentToolDriver)

def XmlMXCAFDoc_DocumentToolDriver_get_type_name(*args):
    """
    XmlMXCAFDoc_DocumentToolDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_DocumentToolDriver_get_type_name(*args)

def XmlMXCAFDoc_DocumentToolDriver_get_type_descriptor(*args):
    """
    XmlMXCAFDoc_DocumentToolDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_DocumentToolDriver_get_type_descriptor(*args)

class Handle_XmlMXCAFDoc_ViewToolDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMXCAFDoc_ViewToolDriver self)

        Nullify the handle


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ViewToolDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMXCAFDoc_ViewToolDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ViewToolDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMXCAFDoc_ViewToolDriver self, XmlMXCAFDoc_ViewToolDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ViewToolDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMXCAFDoc_ViewToolDriver self, Handle_XmlMXCAFDoc_ViewToolDriver theHandle) -> Handle_XmlMXCAFDoc_ViewToolDriver
        assign(Handle_XmlMXCAFDoc_ViewToolDriver self, XmlMXCAFDoc_ViewToolDriver thePtr) -> Handle_XmlMXCAFDoc_ViewToolDriver
        assign(Handle_XmlMXCAFDoc_ViewToolDriver self, Handle_XmlMXCAFDoc_ViewToolDriver theHandle) -> Handle_XmlMXCAFDoc_ViewToolDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ViewToolDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMXCAFDoc_ViewToolDriver self) -> XmlMXCAFDoc_ViewToolDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ViewToolDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMXCAFDoc_ViewToolDriver self) -> XmlMXCAFDoc_ViewToolDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ViewToolDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMXCAFDoc_ViewToolDriver self) -> XmlMXCAFDoc_ViewToolDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ViewToolDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ViewToolDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ViewToolDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMXCAFDoc.new_Handle_XmlMXCAFDoc_ViewToolDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMXCAFDoc.Handle_XmlMXCAFDoc_ViewToolDriver_DownCast)
    __swig_destroy__ = _XmlMXCAFDoc.delete_Handle_XmlMXCAFDoc_ViewToolDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMXCAFDoc_ViewToolDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ViewToolDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMXCAFDoc_ViewToolDriver self, XmlObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher theRelocTable) -> Standard_Boolean
        Paste(Handle_XmlMXCAFDoc_ViewToolDriver self, Handle_TDF_Attribute theSource, XmlObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ViewToolDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMXCAFDoc_ViewToolDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ViewToolDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ViewToolDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ViewToolDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMXCAFDoc_ViewToolDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ViewToolDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMXCAFDoc_ViewToolDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ViewToolDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ViewToolDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMXCAFDoc_ViewToolDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ViewToolDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMXCAFDoc_ViewToolDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMXCAFDoc_ViewToolDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ViewToolDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMXCAFDoc_ViewToolDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMXCAFDoc_ViewToolDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ViewToolDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMXCAFDoc_ViewToolDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ViewToolDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMXCAFDoc_ViewToolDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ViewToolDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMXCAFDoc_ViewToolDriver self)

        Increments the reference counter of this object


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ViewToolDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMXCAFDoc_ViewToolDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ViewToolDriver_DecrementRefCounter(self, *args)

Handle_XmlMXCAFDoc_ViewToolDriver_swigregister = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ViewToolDriver_swigregister
Handle_XmlMXCAFDoc_ViewToolDriver_swigregister(Handle_XmlMXCAFDoc_ViewToolDriver)

def Handle_XmlMXCAFDoc_ViewToolDriver_DownCast(thing):
    return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ViewToolDriver_DownCast(thing)
Handle_XmlMXCAFDoc_ViewToolDriver_DownCast = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ViewToolDriver_DownCast

class Handle_XmlMXCAFDoc_DimTolDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMXCAFDoc_DimTolDriver self)

        Nullify the handle


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMXCAFDoc_DimTolDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMXCAFDoc_DimTolDriver self, XmlMXCAFDoc_DimTolDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMXCAFDoc_DimTolDriver self, Handle_XmlMXCAFDoc_DimTolDriver theHandle) -> Handle_XmlMXCAFDoc_DimTolDriver
        assign(Handle_XmlMXCAFDoc_DimTolDriver self, XmlMXCAFDoc_DimTolDriver thePtr) -> Handle_XmlMXCAFDoc_DimTolDriver
        assign(Handle_XmlMXCAFDoc_DimTolDriver self, Handle_XmlMXCAFDoc_DimTolDriver theHandle) -> Handle_XmlMXCAFDoc_DimTolDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMXCAFDoc_DimTolDriver self) -> XmlMXCAFDoc_DimTolDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMXCAFDoc_DimTolDriver self) -> XmlMXCAFDoc_DimTolDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMXCAFDoc_DimTolDriver self) -> XmlMXCAFDoc_DimTolDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMXCAFDoc.new_Handle_XmlMXCAFDoc_DimTolDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolDriver_DownCast)
    __swig_destroy__ = _XmlMXCAFDoc.delete_Handle_XmlMXCAFDoc_DimTolDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMXCAFDoc_DimTolDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMXCAFDoc_DimTolDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMXCAFDoc_DimTolDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMXCAFDoc_DimTolDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMXCAFDoc_DimTolDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMXCAFDoc_DimTolDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMXCAFDoc_DimTolDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMXCAFDoc_DimTolDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMXCAFDoc_DimTolDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMXCAFDoc_DimTolDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMXCAFDoc_DimTolDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMXCAFDoc_DimTolDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMXCAFDoc_DimTolDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMXCAFDoc_DimTolDriver self)

        Increments the reference counter of this object


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMXCAFDoc_DimTolDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolDriver_DecrementRefCounter(self, *args)

Handle_XmlMXCAFDoc_DimTolDriver_swigregister = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolDriver_swigregister
Handle_XmlMXCAFDoc_DimTolDriver_swigregister(Handle_XmlMXCAFDoc_DimTolDriver)

def Handle_XmlMXCAFDoc_DimTolDriver_DownCast(thing):
    return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolDriver_DownCast(thing)
Handle_XmlMXCAFDoc_DimTolDriver_DownCast = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DimTolDriver_DownCast

class Handle_XmlMXCAFDoc_LocationDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMXCAFDoc_LocationDriver self)

        Nullify the handle


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LocationDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMXCAFDoc_LocationDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LocationDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMXCAFDoc_LocationDriver self, XmlMXCAFDoc_LocationDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LocationDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMXCAFDoc_LocationDriver self, Handle_XmlMXCAFDoc_LocationDriver theHandle) -> Handle_XmlMXCAFDoc_LocationDriver
        assign(Handle_XmlMXCAFDoc_LocationDriver self, XmlMXCAFDoc_LocationDriver thePtr) -> Handle_XmlMXCAFDoc_LocationDriver
        assign(Handle_XmlMXCAFDoc_LocationDriver self, Handle_XmlMXCAFDoc_LocationDriver theHandle) -> Handle_XmlMXCAFDoc_LocationDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LocationDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMXCAFDoc_LocationDriver self) -> XmlMXCAFDoc_LocationDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LocationDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMXCAFDoc_LocationDriver self) -> XmlMXCAFDoc_LocationDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LocationDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMXCAFDoc_LocationDriver self) -> XmlMXCAFDoc_LocationDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LocationDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LocationDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LocationDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMXCAFDoc.new_Handle_XmlMXCAFDoc_LocationDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMXCAFDoc.Handle_XmlMXCAFDoc_LocationDriver_DownCast)
    __swig_destroy__ = _XmlMXCAFDoc.delete_Handle_XmlMXCAFDoc_LocationDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMXCAFDoc_LocationDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LocationDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMXCAFDoc_LocationDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMXCAFDoc_LocationDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LocationDriver_Paste(self, *args)


    def Translate(self, *args):
        """
        Translate(Handle_XmlMXCAFDoc_LocationDriver self, TopLoc_Location theLoc, LDOM_Element theParent, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theMap)
        Translate(Handle_XmlMXCAFDoc_LocationDriver self, LDOM_Element theParent, TopLoc_Location theLoc, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher theMap) -> Standard_Boolean

        Translate a storable Location to a non storable Location.

        :type theParent: OCC.wrapper.XmlObjMgt.XmlObjMgt_Element
        :type theLoc: OCC.wrapper.TopLoc.TopLoc_Location
        :type theMap: OCC.wrapper.XmlObjMgt.XmlObjMgt_RRelocationTable
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LocationDriver_Translate(self, *args)


    def SetSharedLocations(self, *args):
        """
        SetSharedLocations(Handle_XmlMXCAFDoc_LocationDriver self, TopTools_LocationSet theLocations)

        :type theLocations: OCC.wrapper.TopTools.TopTools_LocationSetPtr

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LocationDriver_SetSharedLocations(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMXCAFDoc_LocationDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LocationDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LocationDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LocationDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMXCAFDoc_LocationDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LocationDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMXCAFDoc_LocationDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LocationDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LocationDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMXCAFDoc_LocationDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LocationDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMXCAFDoc_LocationDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMXCAFDoc_LocationDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LocationDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMXCAFDoc_LocationDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMXCAFDoc_LocationDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LocationDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMXCAFDoc_LocationDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LocationDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMXCAFDoc_LocationDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LocationDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMXCAFDoc_LocationDriver self)

        Increments the reference counter of this object


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LocationDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMXCAFDoc_LocationDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LocationDriver_DecrementRefCounter(self, *args)

Handle_XmlMXCAFDoc_LocationDriver_swigregister = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LocationDriver_swigregister
Handle_XmlMXCAFDoc_LocationDriver_swigregister(Handle_XmlMXCAFDoc_LocationDriver)

def Handle_XmlMXCAFDoc_LocationDriver_DownCast(thing):
    return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LocationDriver_DownCast(thing)
Handle_XmlMXCAFDoc_LocationDriver_DownCast = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LocationDriver_DownCast

class Handle_XmlMXCAFDoc_MaterialToolDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMXCAFDoc_MaterialToolDriver self)

        Nullify the handle


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialToolDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMXCAFDoc_MaterialToolDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialToolDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMXCAFDoc_MaterialToolDriver self, XmlMXCAFDoc_MaterialToolDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialToolDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMXCAFDoc_MaterialToolDriver self, Handle_XmlMXCAFDoc_MaterialToolDriver theHandle) -> Handle_XmlMXCAFDoc_MaterialToolDriver
        assign(Handle_XmlMXCAFDoc_MaterialToolDriver self, XmlMXCAFDoc_MaterialToolDriver thePtr) -> Handle_XmlMXCAFDoc_MaterialToolDriver
        assign(Handle_XmlMXCAFDoc_MaterialToolDriver self, Handle_XmlMXCAFDoc_MaterialToolDriver theHandle) -> Handle_XmlMXCAFDoc_MaterialToolDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialToolDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMXCAFDoc_MaterialToolDriver self) -> XmlMXCAFDoc_MaterialToolDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialToolDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMXCAFDoc_MaterialToolDriver self) -> XmlMXCAFDoc_MaterialToolDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialToolDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMXCAFDoc_MaterialToolDriver self) -> XmlMXCAFDoc_MaterialToolDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialToolDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialToolDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialToolDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMXCAFDoc.new_Handle_XmlMXCAFDoc_MaterialToolDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialToolDriver_DownCast)
    __swig_destroy__ = _XmlMXCAFDoc.delete_Handle_XmlMXCAFDoc_MaterialToolDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMXCAFDoc_MaterialToolDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialToolDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMXCAFDoc_MaterialToolDriver self, XmlObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher theRelocTable) -> Standard_Boolean
        Paste(Handle_XmlMXCAFDoc_MaterialToolDriver self, Handle_TDF_Attribute theSource, XmlObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialToolDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMXCAFDoc_MaterialToolDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialToolDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialToolDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialToolDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMXCAFDoc_MaterialToolDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialToolDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMXCAFDoc_MaterialToolDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialToolDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialToolDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMXCAFDoc_MaterialToolDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialToolDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMXCAFDoc_MaterialToolDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMXCAFDoc_MaterialToolDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialToolDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMXCAFDoc_MaterialToolDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMXCAFDoc_MaterialToolDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialToolDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMXCAFDoc_MaterialToolDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialToolDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMXCAFDoc_MaterialToolDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialToolDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMXCAFDoc_MaterialToolDriver self)

        Increments the reference counter of this object


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialToolDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMXCAFDoc_MaterialToolDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialToolDriver_DecrementRefCounter(self, *args)

Handle_XmlMXCAFDoc_MaterialToolDriver_swigregister = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialToolDriver_swigregister
Handle_XmlMXCAFDoc_MaterialToolDriver_swigregister(Handle_XmlMXCAFDoc_MaterialToolDriver)

def Handle_XmlMXCAFDoc_MaterialToolDriver_DownCast(thing):
    return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialToolDriver_DownCast(thing)
Handle_XmlMXCAFDoc_MaterialToolDriver_DownCast = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_MaterialToolDriver_DownCast

class Handle_XmlMXCAFDoc_NoteCommentDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMXCAFDoc_NoteCommentDriver self)

        Nullify the handle


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteCommentDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMXCAFDoc_NoteCommentDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteCommentDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMXCAFDoc_NoteCommentDriver self, XmlMXCAFDoc_NoteCommentDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteCommentDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMXCAFDoc_NoteCommentDriver self, Handle_XmlMXCAFDoc_NoteCommentDriver theHandle) -> Handle_XmlMXCAFDoc_NoteCommentDriver
        assign(Handle_XmlMXCAFDoc_NoteCommentDriver self, XmlMXCAFDoc_NoteCommentDriver thePtr) -> Handle_XmlMXCAFDoc_NoteCommentDriver
        assign(Handle_XmlMXCAFDoc_NoteCommentDriver self, Handle_XmlMXCAFDoc_NoteCommentDriver theHandle) -> Handle_XmlMXCAFDoc_NoteCommentDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteCommentDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMXCAFDoc_NoteCommentDriver self) -> XmlMXCAFDoc_NoteCommentDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteCommentDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMXCAFDoc_NoteCommentDriver self) -> XmlMXCAFDoc_NoteCommentDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteCommentDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMXCAFDoc_NoteCommentDriver self) -> XmlMXCAFDoc_NoteCommentDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteCommentDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteCommentDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteCommentDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMXCAFDoc.new_Handle_XmlMXCAFDoc_NoteCommentDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteCommentDriver_DownCast)
    __swig_destroy__ = _XmlMXCAFDoc.delete_Handle_XmlMXCAFDoc_NoteCommentDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMXCAFDoc_NoteCommentDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteCommentDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMXCAFDoc_NoteCommentDriver self, XmlObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher theRelocTable) -> Standard_Boolean
        Paste(Handle_XmlMXCAFDoc_NoteCommentDriver self, Handle_TDF_Attribute theSource, XmlObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteCommentDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMXCAFDoc_NoteCommentDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteCommentDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteCommentDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteCommentDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMXCAFDoc_NoteCommentDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteCommentDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMXCAFDoc_NoteCommentDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteCommentDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteCommentDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMXCAFDoc_NoteCommentDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteCommentDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMXCAFDoc_NoteCommentDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMXCAFDoc_NoteCommentDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteCommentDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMXCAFDoc_NoteCommentDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMXCAFDoc_NoteCommentDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteCommentDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMXCAFDoc_NoteCommentDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteCommentDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMXCAFDoc_NoteCommentDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteCommentDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMXCAFDoc_NoteCommentDriver self)

        Increments the reference counter of this object


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteCommentDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMXCAFDoc_NoteCommentDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteCommentDriver_DecrementRefCounter(self, *args)

Handle_XmlMXCAFDoc_NoteCommentDriver_swigregister = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteCommentDriver_swigregister
Handle_XmlMXCAFDoc_NoteCommentDriver_swigregister(Handle_XmlMXCAFDoc_NoteCommentDriver)

def Handle_XmlMXCAFDoc_NoteCommentDriver_DownCast(thing):
    return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteCommentDriver_DownCast(thing)
Handle_XmlMXCAFDoc_NoteCommentDriver_DownCast = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteCommentDriver_DownCast

class Handle_XmlMXCAFDoc_NoteBinDataDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMXCAFDoc_NoteBinDataDriver self)

        Nullify the handle


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBinDataDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMXCAFDoc_NoteBinDataDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBinDataDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMXCAFDoc_NoteBinDataDriver self, XmlMXCAFDoc_NoteBinDataDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBinDataDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMXCAFDoc_NoteBinDataDriver self, Handle_XmlMXCAFDoc_NoteBinDataDriver theHandle) -> Handle_XmlMXCAFDoc_NoteBinDataDriver
        assign(Handle_XmlMXCAFDoc_NoteBinDataDriver self, XmlMXCAFDoc_NoteBinDataDriver thePtr) -> Handle_XmlMXCAFDoc_NoteBinDataDriver
        assign(Handle_XmlMXCAFDoc_NoteBinDataDriver self, Handle_XmlMXCAFDoc_NoteBinDataDriver theHandle) -> Handle_XmlMXCAFDoc_NoteBinDataDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBinDataDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMXCAFDoc_NoteBinDataDriver self) -> XmlMXCAFDoc_NoteBinDataDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBinDataDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMXCAFDoc_NoteBinDataDriver self) -> XmlMXCAFDoc_NoteBinDataDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBinDataDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMXCAFDoc_NoteBinDataDriver self) -> XmlMXCAFDoc_NoteBinDataDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBinDataDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBinDataDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBinDataDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMXCAFDoc.new_Handle_XmlMXCAFDoc_NoteBinDataDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBinDataDriver_DownCast)
    __swig_destroy__ = _XmlMXCAFDoc.delete_Handle_XmlMXCAFDoc_NoteBinDataDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMXCAFDoc_NoteBinDataDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBinDataDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMXCAFDoc_NoteBinDataDriver self, XmlObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher theRelocTable) -> Standard_Boolean
        Paste(Handle_XmlMXCAFDoc_NoteBinDataDriver self, Handle_TDF_Attribute theSource, XmlObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBinDataDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMXCAFDoc_NoteBinDataDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBinDataDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBinDataDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBinDataDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMXCAFDoc_NoteBinDataDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBinDataDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMXCAFDoc_NoteBinDataDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBinDataDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBinDataDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMXCAFDoc_NoteBinDataDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBinDataDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMXCAFDoc_NoteBinDataDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMXCAFDoc_NoteBinDataDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBinDataDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMXCAFDoc_NoteBinDataDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMXCAFDoc_NoteBinDataDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBinDataDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMXCAFDoc_NoteBinDataDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBinDataDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMXCAFDoc_NoteBinDataDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBinDataDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMXCAFDoc_NoteBinDataDriver self)

        Increments the reference counter of this object


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBinDataDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMXCAFDoc_NoteBinDataDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBinDataDriver_DecrementRefCounter(self, *args)

Handle_XmlMXCAFDoc_NoteBinDataDriver_swigregister = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBinDataDriver_swigregister
Handle_XmlMXCAFDoc_NoteBinDataDriver_swigregister(Handle_XmlMXCAFDoc_NoteBinDataDriver)

def Handle_XmlMXCAFDoc_NoteBinDataDriver_DownCast(thing):
    return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBinDataDriver_DownCast(thing)
Handle_XmlMXCAFDoc_NoteBinDataDriver_DownCast = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBinDataDriver_DownCast

class Handle_XmlMXCAFDoc_CentroidDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMXCAFDoc_CentroidDriver self)

        Nullify the handle


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_CentroidDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMXCAFDoc_CentroidDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_CentroidDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMXCAFDoc_CentroidDriver self, XmlMXCAFDoc_CentroidDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_CentroidDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMXCAFDoc_CentroidDriver self, Handle_XmlMXCAFDoc_CentroidDriver theHandle) -> Handle_XmlMXCAFDoc_CentroidDriver
        assign(Handle_XmlMXCAFDoc_CentroidDriver self, XmlMXCAFDoc_CentroidDriver thePtr) -> Handle_XmlMXCAFDoc_CentroidDriver
        assign(Handle_XmlMXCAFDoc_CentroidDriver self, Handle_XmlMXCAFDoc_CentroidDriver theHandle) -> Handle_XmlMXCAFDoc_CentroidDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_CentroidDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMXCAFDoc_CentroidDriver self) -> XmlMXCAFDoc_CentroidDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_CentroidDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMXCAFDoc_CentroidDriver self) -> XmlMXCAFDoc_CentroidDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_CentroidDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMXCAFDoc_CentroidDriver self) -> XmlMXCAFDoc_CentroidDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_CentroidDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_CentroidDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_CentroidDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMXCAFDoc.new_Handle_XmlMXCAFDoc_CentroidDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMXCAFDoc.Handle_XmlMXCAFDoc_CentroidDriver_DownCast)
    __swig_destroy__ = _XmlMXCAFDoc.delete_Handle_XmlMXCAFDoc_CentroidDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMXCAFDoc_CentroidDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_CentroidDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMXCAFDoc_CentroidDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMXCAFDoc_CentroidDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_CentroidDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMXCAFDoc_CentroidDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_CentroidDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_CentroidDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_CentroidDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMXCAFDoc_CentroidDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_CentroidDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMXCAFDoc_CentroidDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_CentroidDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_CentroidDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMXCAFDoc_CentroidDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_CentroidDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMXCAFDoc_CentroidDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMXCAFDoc_CentroidDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_CentroidDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMXCAFDoc_CentroidDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMXCAFDoc_CentroidDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_CentroidDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMXCAFDoc_CentroidDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_CentroidDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMXCAFDoc_CentroidDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_CentroidDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMXCAFDoc_CentroidDriver self)

        Increments the reference counter of this object


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_CentroidDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMXCAFDoc_CentroidDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_CentroidDriver_DecrementRefCounter(self, *args)

Handle_XmlMXCAFDoc_CentroidDriver_swigregister = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_CentroidDriver_swigregister
Handle_XmlMXCAFDoc_CentroidDriver_swigregister(Handle_XmlMXCAFDoc_CentroidDriver)

def Handle_XmlMXCAFDoc_CentroidDriver_DownCast(thing):
    return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_CentroidDriver_DownCast(thing)
Handle_XmlMXCAFDoc_CentroidDriver_DownCast = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_CentroidDriver_DownCast

class XmlMXCAFDoc_VolumeDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMXCAFDoc_VolumeDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMXCAFDoc_VolumeDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMXCAFDoc_VolumeDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMXCAFDoc_VolumeDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMXCAFDoc.new_XmlMXCAFDoc_VolumeDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMXCAFDoc_VolumeDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_VolumeDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMXCAFDoc_VolumeDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMXCAFDoc_VolumeDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_VolumeDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_VolumeDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_VolumeDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.XmlMXCAFDoc_VolumeDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMXCAFDoc.delete_XmlMXCAFDoc_VolumeDriver
XmlMXCAFDoc_VolumeDriver_swigregister = _XmlMXCAFDoc.XmlMXCAFDoc_VolumeDriver_swigregister
XmlMXCAFDoc_VolumeDriver_swigregister(XmlMXCAFDoc_VolumeDriver)

def XmlMXCAFDoc_VolumeDriver_get_type_name(*args):
    """
    XmlMXCAFDoc_VolumeDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_VolumeDriver_get_type_name(*args)

def XmlMXCAFDoc_VolumeDriver_get_type_descriptor(*args):
    """
    XmlMXCAFDoc_VolumeDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_VolumeDriver_get_type_descriptor(*args)

class Handle_XmlMXCAFDoc_GraphNodeDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMXCAFDoc_GraphNodeDriver self)

        Nullify the handle


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_GraphNodeDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMXCAFDoc_GraphNodeDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_GraphNodeDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMXCAFDoc_GraphNodeDriver self, XmlMXCAFDoc_GraphNodeDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_GraphNodeDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMXCAFDoc_GraphNodeDriver self, Handle_XmlMXCAFDoc_GraphNodeDriver theHandle) -> Handle_XmlMXCAFDoc_GraphNodeDriver
        assign(Handle_XmlMXCAFDoc_GraphNodeDriver self, XmlMXCAFDoc_GraphNodeDriver thePtr) -> Handle_XmlMXCAFDoc_GraphNodeDriver
        assign(Handle_XmlMXCAFDoc_GraphNodeDriver self, Handle_XmlMXCAFDoc_GraphNodeDriver theHandle) -> Handle_XmlMXCAFDoc_GraphNodeDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_GraphNodeDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMXCAFDoc_GraphNodeDriver self) -> XmlMXCAFDoc_GraphNodeDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_GraphNodeDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMXCAFDoc_GraphNodeDriver self) -> XmlMXCAFDoc_GraphNodeDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_GraphNodeDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMXCAFDoc_GraphNodeDriver self) -> XmlMXCAFDoc_GraphNodeDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_GraphNodeDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_GraphNodeDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_GraphNodeDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMXCAFDoc.new_Handle_XmlMXCAFDoc_GraphNodeDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMXCAFDoc.Handle_XmlMXCAFDoc_GraphNodeDriver_DownCast)
    __swig_destroy__ = _XmlMXCAFDoc.delete_Handle_XmlMXCAFDoc_GraphNodeDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMXCAFDoc_GraphNodeDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_GraphNodeDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMXCAFDoc_GraphNodeDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMXCAFDoc_GraphNodeDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_GraphNodeDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMXCAFDoc_GraphNodeDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_GraphNodeDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_GraphNodeDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_GraphNodeDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMXCAFDoc_GraphNodeDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_GraphNodeDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMXCAFDoc_GraphNodeDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_GraphNodeDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_GraphNodeDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMXCAFDoc_GraphNodeDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_GraphNodeDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMXCAFDoc_GraphNodeDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMXCAFDoc_GraphNodeDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_GraphNodeDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMXCAFDoc_GraphNodeDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMXCAFDoc_GraphNodeDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_GraphNodeDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMXCAFDoc_GraphNodeDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_GraphNodeDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMXCAFDoc_GraphNodeDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_GraphNodeDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMXCAFDoc_GraphNodeDriver self)

        Increments the reference counter of this object


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_GraphNodeDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMXCAFDoc_GraphNodeDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_GraphNodeDriver_DecrementRefCounter(self, *args)

Handle_XmlMXCAFDoc_GraphNodeDriver_swigregister = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_GraphNodeDriver_swigregister
Handle_XmlMXCAFDoc_GraphNodeDriver_swigregister(Handle_XmlMXCAFDoc_GraphNodeDriver)

def Handle_XmlMXCAFDoc_GraphNodeDriver_DownCast(thing):
    return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_GraphNodeDriver_DownCast(thing)
Handle_XmlMXCAFDoc_GraphNodeDriver_DownCast = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_GraphNodeDriver_DownCast

class Handle_XmlMXCAFDoc_LayerToolDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMXCAFDoc_LayerToolDriver self)

        Nullify the handle


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LayerToolDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMXCAFDoc_LayerToolDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LayerToolDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMXCAFDoc_LayerToolDriver self, XmlMXCAFDoc_LayerToolDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LayerToolDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMXCAFDoc_LayerToolDriver self, Handle_XmlMXCAFDoc_LayerToolDriver theHandle) -> Handle_XmlMXCAFDoc_LayerToolDriver
        assign(Handle_XmlMXCAFDoc_LayerToolDriver self, XmlMXCAFDoc_LayerToolDriver thePtr) -> Handle_XmlMXCAFDoc_LayerToolDriver
        assign(Handle_XmlMXCAFDoc_LayerToolDriver self, Handle_XmlMXCAFDoc_LayerToolDriver theHandle) -> Handle_XmlMXCAFDoc_LayerToolDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LayerToolDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMXCAFDoc_LayerToolDriver self) -> XmlMXCAFDoc_LayerToolDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LayerToolDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMXCAFDoc_LayerToolDriver self) -> XmlMXCAFDoc_LayerToolDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LayerToolDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMXCAFDoc_LayerToolDriver self) -> XmlMXCAFDoc_LayerToolDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LayerToolDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LayerToolDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LayerToolDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMXCAFDoc.new_Handle_XmlMXCAFDoc_LayerToolDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMXCAFDoc.Handle_XmlMXCAFDoc_LayerToolDriver_DownCast)
    __swig_destroy__ = _XmlMXCAFDoc.delete_Handle_XmlMXCAFDoc_LayerToolDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMXCAFDoc_LayerToolDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LayerToolDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMXCAFDoc_LayerToolDriver self, XmlObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher theRelocTable) -> Standard_Boolean
        Paste(Handle_XmlMXCAFDoc_LayerToolDriver self, Handle_TDF_Attribute theSource, XmlObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LayerToolDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMXCAFDoc_LayerToolDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LayerToolDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LayerToolDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LayerToolDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMXCAFDoc_LayerToolDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LayerToolDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMXCAFDoc_LayerToolDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LayerToolDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LayerToolDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMXCAFDoc_LayerToolDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LayerToolDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMXCAFDoc_LayerToolDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMXCAFDoc_LayerToolDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LayerToolDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMXCAFDoc_LayerToolDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMXCAFDoc_LayerToolDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LayerToolDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMXCAFDoc_LayerToolDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LayerToolDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMXCAFDoc_LayerToolDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LayerToolDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMXCAFDoc_LayerToolDriver self)

        Increments the reference counter of this object


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LayerToolDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMXCAFDoc_LayerToolDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LayerToolDriver_DecrementRefCounter(self, *args)

Handle_XmlMXCAFDoc_LayerToolDriver_swigregister = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LayerToolDriver_swigregister
Handle_XmlMXCAFDoc_LayerToolDriver_swigregister(Handle_XmlMXCAFDoc_LayerToolDriver)

def Handle_XmlMXCAFDoc_LayerToolDriver_DownCast(thing):
    return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LayerToolDriver_DownCast(thing)
Handle_XmlMXCAFDoc_LayerToolDriver_DownCast = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_LayerToolDriver_DownCast

class Handle_XmlMXCAFDoc_ShapeToolDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMXCAFDoc_ShapeToolDriver self)

        Nullify the handle


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ShapeToolDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMXCAFDoc_ShapeToolDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ShapeToolDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMXCAFDoc_ShapeToolDriver self, XmlMXCAFDoc_ShapeToolDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ShapeToolDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMXCAFDoc_ShapeToolDriver self, Handle_XmlMXCAFDoc_ShapeToolDriver theHandle) -> Handle_XmlMXCAFDoc_ShapeToolDriver
        assign(Handle_XmlMXCAFDoc_ShapeToolDriver self, XmlMXCAFDoc_ShapeToolDriver thePtr) -> Handle_XmlMXCAFDoc_ShapeToolDriver
        assign(Handle_XmlMXCAFDoc_ShapeToolDriver self, Handle_XmlMXCAFDoc_ShapeToolDriver theHandle) -> Handle_XmlMXCAFDoc_ShapeToolDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ShapeToolDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMXCAFDoc_ShapeToolDriver self) -> XmlMXCAFDoc_ShapeToolDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ShapeToolDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMXCAFDoc_ShapeToolDriver self) -> XmlMXCAFDoc_ShapeToolDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ShapeToolDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMXCAFDoc_ShapeToolDriver self) -> XmlMXCAFDoc_ShapeToolDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ShapeToolDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ShapeToolDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ShapeToolDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMXCAFDoc.new_Handle_XmlMXCAFDoc_ShapeToolDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMXCAFDoc.Handle_XmlMXCAFDoc_ShapeToolDriver_DownCast)
    __swig_destroy__ = _XmlMXCAFDoc.delete_Handle_XmlMXCAFDoc_ShapeToolDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMXCAFDoc_ShapeToolDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ShapeToolDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMXCAFDoc_ShapeToolDriver self, XmlObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher theRelocTable) -> Standard_Boolean
        Paste(Handle_XmlMXCAFDoc_ShapeToolDriver self, Handle_TDF_Attribute theSource, XmlObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ShapeToolDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMXCAFDoc_ShapeToolDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ShapeToolDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ShapeToolDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ShapeToolDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMXCAFDoc_ShapeToolDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ShapeToolDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMXCAFDoc_ShapeToolDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ShapeToolDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ShapeToolDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMXCAFDoc_ShapeToolDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ShapeToolDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMXCAFDoc_ShapeToolDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMXCAFDoc_ShapeToolDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ShapeToolDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMXCAFDoc_ShapeToolDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMXCAFDoc_ShapeToolDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ShapeToolDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMXCAFDoc_ShapeToolDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ShapeToolDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMXCAFDoc_ShapeToolDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ShapeToolDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMXCAFDoc_ShapeToolDriver self)

        Increments the reference counter of this object


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ShapeToolDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMXCAFDoc_ShapeToolDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ShapeToolDriver_DecrementRefCounter(self, *args)

Handle_XmlMXCAFDoc_ShapeToolDriver_swigregister = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ShapeToolDriver_swigregister
Handle_XmlMXCAFDoc_ShapeToolDriver_swigregister(Handle_XmlMXCAFDoc_ShapeToolDriver)

def Handle_XmlMXCAFDoc_ShapeToolDriver_DownCast(thing):
    return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ShapeToolDriver_DownCast(thing)
Handle_XmlMXCAFDoc_ShapeToolDriver_DownCast = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ShapeToolDriver_DownCast

class XmlMXCAFDoc_AreaDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMXCAFDoc_AreaDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMXCAFDoc_AreaDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMXCAFDoc_AreaDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMXCAFDoc_AreaDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMXCAFDoc.new_XmlMXCAFDoc_AreaDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMXCAFDoc_AreaDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_AreaDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMXCAFDoc_AreaDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMXCAFDoc_AreaDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_AreaDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_AreaDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_AreaDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.XmlMXCAFDoc_AreaDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMXCAFDoc.delete_XmlMXCAFDoc_AreaDriver
XmlMXCAFDoc_AreaDriver_swigregister = _XmlMXCAFDoc.XmlMXCAFDoc_AreaDriver_swigregister
XmlMXCAFDoc_AreaDriver_swigregister(XmlMXCAFDoc_AreaDriver)

def XmlMXCAFDoc_AreaDriver_get_type_name(*args):
    """
    XmlMXCAFDoc_AreaDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_AreaDriver_get_type_name(*args)

def XmlMXCAFDoc_AreaDriver_get_type_descriptor(*args):
    """
    XmlMXCAFDoc_AreaDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_AreaDriver_get_type_descriptor(*args)

class Handle_XmlMXCAFDoc_DocumentToolDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMXCAFDoc_DocumentToolDriver self)

        Nullify the handle


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DocumentToolDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMXCAFDoc_DocumentToolDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DocumentToolDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMXCAFDoc_DocumentToolDriver self, XmlMXCAFDoc_DocumentToolDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DocumentToolDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMXCAFDoc_DocumentToolDriver self, Handle_XmlMXCAFDoc_DocumentToolDriver theHandle) -> Handle_XmlMXCAFDoc_DocumentToolDriver
        assign(Handle_XmlMXCAFDoc_DocumentToolDriver self, XmlMXCAFDoc_DocumentToolDriver thePtr) -> Handle_XmlMXCAFDoc_DocumentToolDriver
        assign(Handle_XmlMXCAFDoc_DocumentToolDriver self, Handle_XmlMXCAFDoc_DocumentToolDriver theHandle) -> Handle_XmlMXCAFDoc_DocumentToolDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DocumentToolDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMXCAFDoc_DocumentToolDriver self) -> XmlMXCAFDoc_DocumentToolDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DocumentToolDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMXCAFDoc_DocumentToolDriver self) -> XmlMXCAFDoc_DocumentToolDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DocumentToolDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMXCAFDoc_DocumentToolDriver self) -> XmlMXCAFDoc_DocumentToolDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DocumentToolDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DocumentToolDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DocumentToolDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMXCAFDoc.new_Handle_XmlMXCAFDoc_DocumentToolDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMXCAFDoc.Handle_XmlMXCAFDoc_DocumentToolDriver_DownCast)
    __swig_destroy__ = _XmlMXCAFDoc.delete_Handle_XmlMXCAFDoc_DocumentToolDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMXCAFDoc_DocumentToolDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DocumentToolDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMXCAFDoc_DocumentToolDriver self, XmlObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher theRelocTable) -> Standard_Boolean
        Paste(Handle_XmlMXCAFDoc_DocumentToolDriver self, Handle_TDF_Attribute theSource, XmlObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DocumentToolDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMXCAFDoc_DocumentToolDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DocumentToolDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DocumentToolDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DocumentToolDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMXCAFDoc_DocumentToolDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DocumentToolDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMXCAFDoc_DocumentToolDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DocumentToolDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DocumentToolDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMXCAFDoc_DocumentToolDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DocumentToolDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMXCAFDoc_DocumentToolDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMXCAFDoc_DocumentToolDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DocumentToolDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMXCAFDoc_DocumentToolDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMXCAFDoc_DocumentToolDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DocumentToolDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMXCAFDoc_DocumentToolDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DocumentToolDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMXCAFDoc_DocumentToolDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DocumentToolDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMXCAFDoc_DocumentToolDriver self)

        Increments the reference counter of this object


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DocumentToolDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMXCAFDoc_DocumentToolDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DocumentToolDriver_DecrementRefCounter(self, *args)

Handle_XmlMXCAFDoc_DocumentToolDriver_swigregister = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DocumentToolDriver_swigregister
Handle_XmlMXCAFDoc_DocumentToolDriver_swigregister(Handle_XmlMXCAFDoc_DocumentToolDriver)

def Handle_XmlMXCAFDoc_DocumentToolDriver_DownCast(thing):
    return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DocumentToolDriver_DownCast(thing)
Handle_XmlMXCAFDoc_DocumentToolDriver_DownCast = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DocumentToolDriver_DownCast

class Handle_XmlMXCAFDoc_DatumDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMXCAFDoc_DatumDriver self)

        Nullify the handle


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DatumDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMXCAFDoc_DatumDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DatumDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMXCAFDoc_DatumDriver self, XmlMXCAFDoc_DatumDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DatumDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMXCAFDoc_DatumDriver self, Handle_XmlMXCAFDoc_DatumDriver theHandle) -> Handle_XmlMXCAFDoc_DatumDriver
        assign(Handle_XmlMXCAFDoc_DatumDriver self, XmlMXCAFDoc_DatumDriver thePtr) -> Handle_XmlMXCAFDoc_DatumDriver
        assign(Handle_XmlMXCAFDoc_DatumDriver self, Handle_XmlMXCAFDoc_DatumDriver theHandle) -> Handle_XmlMXCAFDoc_DatumDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DatumDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMXCAFDoc_DatumDriver self) -> XmlMXCAFDoc_DatumDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DatumDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMXCAFDoc_DatumDriver self) -> XmlMXCAFDoc_DatumDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DatumDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMXCAFDoc_DatumDriver self) -> XmlMXCAFDoc_DatumDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DatumDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DatumDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DatumDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMXCAFDoc.new_Handle_XmlMXCAFDoc_DatumDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMXCAFDoc.Handle_XmlMXCAFDoc_DatumDriver_DownCast)
    __swig_destroy__ = _XmlMXCAFDoc.delete_Handle_XmlMXCAFDoc_DatumDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMXCAFDoc_DatumDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DatumDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMXCAFDoc_DatumDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMXCAFDoc_DatumDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DatumDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMXCAFDoc_DatumDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DatumDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DatumDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DatumDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMXCAFDoc_DatumDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DatumDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMXCAFDoc_DatumDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DatumDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DatumDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMXCAFDoc_DatumDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DatumDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMXCAFDoc_DatumDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMXCAFDoc_DatumDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DatumDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMXCAFDoc_DatumDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMXCAFDoc_DatumDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DatumDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMXCAFDoc_DatumDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DatumDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMXCAFDoc_DatumDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DatumDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMXCAFDoc_DatumDriver self)

        Increments the reference counter of this object


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DatumDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMXCAFDoc_DatumDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DatumDriver_DecrementRefCounter(self, *args)

Handle_XmlMXCAFDoc_DatumDriver_swigregister = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DatumDriver_swigregister
Handle_XmlMXCAFDoc_DatumDriver_swigregister(Handle_XmlMXCAFDoc_DatumDriver)

def Handle_XmlMXCAFDoc_DatumDriver_DownCast(thing):
    return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DatumDriver_DownCast(thing)
Handle_XmlMXCAFDoc_DatumDriver_DownCast = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_DatumDriver_DownCast

class XmlMXCAFDoc_ColorDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMXCAFDoc_ColorDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMXCAFDoc_ColorDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMXCAFDoc_ColorDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMXCAFDoc_ColorDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMXCAFDoc.new_XmlMXCAFDoc_ColorDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMXCAFDoc_ColorDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_ColorDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMXCAFDoc_ColorDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMXCAFDoc_ColorDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_ColorDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_ColorDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc_ColorDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.XmlMXCAFDoc_ColorDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMXCAFDoc.delete_XmlMXCAFDoc_ColorDriver
XmlMXCAFDoc_ColorDriver_swigregister = _XmlMXCAFDoc.XmlMXCAFDoc_ColorDriver_swigregister
XmlMXCAFDoc_ColorDriver_swigregister(XmlMXCAFDoc_ColorDriver)

def XmlMXCAFDoc_ColorDriver_get_type_name(*args):
    """
    XmlMXCAFDoc_ColorDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_ColorDriver_get_type_name(*args)

def XmlMXCAFDoc_ColorDriver_get_type_descriptor(*args):
    """
    XmlMXCAFDoc_ColorDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc_ColorDriver_get_type_descriptor(*args)

class Handle_XmlMXCAFDoc_VolumeDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMXCAFDoc_VolumeDriver self)

        Nullify the handle


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_VolumeDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMXCAFDoc_VolumeDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_VolumeDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMXCAFDoc_VolumeDriver self, XmlMXCAFDoc_VolumeDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_VolumeDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMXCAFDoc_VolumeDriver self, Handle_XmlMXCAFDoc_VolumeDriver theHandle) -> Handle_XmlMXCAFDoc_VolumeDriver
        assign(Handle_XmlMXCAFDoc_VolumeDriver self, XmlMXCAFDoc_VolumeDriver thePtr) -> Handle_XmlMXCAFDoc_VolumeDriver
        assign(Handle_XmlMXCAFDoc_VolumeDriver self, Handle_XmlMXCAFDoc_VolumeDriver theHandle) -> Handle_XmlMXCAFDoc_VolumeDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_VolumeDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMXCAFDoc_VolumeDriver self) -> XmlMXCAFDoc_VolumeDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_VolumeDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMXCAFDoc_VolumeDriver self) -> XmlMXCAFDoc_VolumeDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_VolumeDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMXCAFDoc_VolumeDriver self) -> XmlMXCAFDoc_VolumeDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_VolumeDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_VolumeDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_VolumeDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMXCAFDoc.new_Handle_XmlMXCAFDoc_VolumeDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMXCAFDoc.Handle_XmlMXCAFDoc_VolumeDriver_DownCast)
    __swig_destroy__ = _XmlMXCAFDoc.delete_Handle_XmlMXCAFDoc_VolumeDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMXCAFDoc_VolumeDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_VolumeDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMXCAFDoc_VolumeDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMXCAFDoc_VolumeDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_VolumeDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMXCAFDoc_VolumeDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_VolumeDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_VolumeDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_VolumeDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMXCAFDoc_VolumeDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_VolumeDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMXCAFDoc_VolumeDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_VolumeDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_VolumeDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMXCAFDoc_VolumeDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_VolumeDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMXCAFDoc_VolumeDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMXCAFDoc_VolumeDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_VolumeDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMXCAFDoc_VolumeDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMXCAFDoc_VolumeDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_VolumeDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMXCAFDoc_VolumeDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_VolumeDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMXCAFDoc_VolumeDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_VolumeDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMXCAFDoc_VolumeDriver self)

        Increments the reference counter of this object


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_VolumeDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMXCAFDoc_VolumeDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_VolumeDriver_DecrementRefCounter(self, *args)

Handle_XmlMXCAFDoc_VolumeDriver_swigregister = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_VolumeDriver_swigregister
Handle_XmlMXCAFDoc_VolumeDriver_swigregister(Handle_XmlMXCAFDoc_VolumeDriver)

def Handle_XmlMXCAFDoc_VolumeDriver_DownCast(thing):
    return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_VolumeDriver_DownCast(thing)
Handle_XmlMXCAFDoc_VolumeDriver_DownCast = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_VolumeDriver_DownCast

class XmlMXCAFDoc_(object):
    """
    Storage and Retrieval drivers for modelling attributes.
    Transient attributes are defined in package XCAFDoc
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddDrivers(*args):
        """
        AddDrivers(Handle_XmlMDF_ADriverTable aDriverTable, Handle_Message_Messenger anMsgDrv)

        Adds the attribute drivers to <aDriverTable>.

        :type aDriverTable: OCC.wrapper.XmlMDF.Handle_XmlMDF_ADriverTable
        :type anMsgDrv: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _XmlMXCAFDoc.XmlMXCAFDoc__AddDrivers(*args)

    AddDrivers = staticmethod(AddDrivers)

    def __init__(self):
        """
        Storage and Retrieval drivers for modelling attributes.
        Transient attributes are defined in package XCAFDoc
        """
        this = _XmlMXCAFDoc.new_XmlMXCAFDoc_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlMXCAFDoc.delete_XmlMXCAFDoc_
XmlMXCAFDoc__swigregister = _XmlMXCAFDoc.XmlMXCAFDoc__swigregister
XmlMXCAFDoc__swigregister(XmlMXCAFDoc_)

def XmlMXCAFDoc__AddDrivers(*args):
    """
    XmlMXCAFDoc__AddDrivers(Handle_XmlMDF_ADriverTable aDriverTable, Handle_Message_Messenger anMsgDrv)

    Adds the attribute drivers to <aDriverTable>.

    :type aDriverTable: OCC.wrapper.XmlMDF.Handle_XmlMDF_ADriverTable
    :type anMsgDrv: OCC.wrapper.Message.Handle_Message_Messenger

    """
    return _XmlMXCAFDoc.XmlMXCAFDoc__AddDrivers(*args)

class Handle_XmlMXCAFDoc_AssemblyItemRefDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMXCAFDoc_AssemblyItemRefDriver self)

        Nullify the handle


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AssemblyItemRefDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMXCAFDoc_AssemblyItemRefDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AssemblyItemRefDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMXCAFDoc_AssemblyItemRefDriver self, XmlMXCAFDoc_AssemblyItemRefDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AssemblyItemRefDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMXCAFDoc_AssemblyItemRefDriver self, Handle_XmlMXCAFDoc_AssemblyItemRefDriver theHandle) -> Handle_XmlMXCAFDoc_AssemblyItemRefDriver
        assign(Handle_XmlMXCAFDoc_AssemblyItemRefDriver self, XmlMXCAFDoc_AssemblyItemRefDriver thePtr) -> Handle_XmlMXCAFDoc_AssemblyItemRefDriver
        assign(Handle_XmlMXCAFDoc_AssemblyItemRefDriver self, Handle_XmlMXCAFDoc_AssemblyItemRefDriver theHandle) -> Handle_XmlMXCAFDoc_AssemblyItemRefDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AssemblyItemRefDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMXCAFDoc_AssemblyItemRefDriver self) -> XmlMXCAFDoc_AssemblyItemRefDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AssemblyItemRefDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMXCAFDoc_AssemblyItemRefDriver self) -> XmlMXCAFDoc_AssemblyItemRefDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AssemblyItemRefDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMXCAFDoc_AssemblyItemRefDriver self) -> XmlMXCAFDoc_AssemblyItemRefDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AssemblyItemRefDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AssemblyItemRefDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AssemblyItemRefDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMXCAFDoc.new_Handle_XmlMXCAFDoc_AssemblyItemRefDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMXCAFDoc.Handle_XmlMXCAFDoc_AssemblyItemRefDriver_DownCast)
    __swig_destroy__ = _XmlMXCAFDoc.delete_Handle_XmlMXCAFDoc_AssemblyItemRefDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMXCAFDoc_AssemblyItemRefDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AssemblyItemRefDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMXCAFDoc_AssemblyItemRefDriver self, XmlObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher theRelocTable) -> Standard_Boolean
        Paste(Handle_XmlMXCAFDoc_AssemblyItemRefDriver self, Handle_TDF_Attribute theSource, XmlObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AssemblyItemRefDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMXCAFDoc_AssemblyItemRefDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AssemblyItemRefDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AssemblyItemRefDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AssemblyItemRefDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMXCAFDoc_AssemblyItemRefDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AssemblyItemRefDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMXCAFDoc_AssemblyItemRefDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AssemblyItemRefDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AssemblyItemRefDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMXCAFDoc_AssemblyItemRefDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AssemblyItemRefDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMXCAFDoc_AssemblyItemRefDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMXCAFDoc_AssemblyItemRefDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AssemblyItemRefDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMXCAFDoc_AssemblyItemRefDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMXCAFDoc_AssemblyItemRefDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AssemblyItemRefDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMXCAFDoc_AssemblyItemRefDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AssemblyItemRefDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMXCAFDoc_AssemblyItemRefDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AssemblyItemRefDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMXCAFDoc_AssemblyItemRefDriver self)

        Increments the reference counter of this object


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AssemblyItemRefDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMXCAFDoc_AssemblyItemRefDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AssemblyItemRefDriver_DecrementRefCounter(self, *args)

Handle_XmlMXCAFDoc_AssemblyItemRefDriver_swigregister = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AssemblyItemRefDriver_swigregister
Handle_XmlMXCAFDoc_AssemblyItemRefDriver_swigregister(Handle_XmlMXCAFDoc_AssemblyItemRefDriver)

def Handle_XmlMXCAFDoc_AssemblyItemRefDriver_DownCast(thing):
    return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AssemblyItemRefDriver_DownCast(thing)
Handle_XmlMXCAFDoc_AssemblyItemRefDriver_DownCast = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AssemblyItemRefDriver_DownCast

class Handle_XmlMXCAFDoc_AreaDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMXCAFDoc_AreaDriver self)

        Nullify the handle


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AreaDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMXCAFDoc_AreaDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AreaDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMXCAFDoc_AreaDriver self, XmlMXCAFDoc_AreaDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AreaDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMXCAFDoc_AreaDriver self, Handle_XmlMXCAFDoc_AreaDriver theHandle) -> Handle_XmlMXCAFDoc_AreaDriver
        assign(Handle_XmlMXCAFDoc_AreaDriver self, XmlMXCAFDoc_AreaDriver thePtr) -> Handle_XmlMXCAFDoc_AreaDriver
        assign(Handle_XmlMXCAFDoc_AreaDriver self, Handle_XmlMXCAFDoc_AreaDriver theHandle) -> Handle_XmlMXCAFDoc_AreaDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AreaDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMXCAFDoc_AreaDriver self) -> XmlMXCAFDoc_AreaDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AreaDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMXCAFDoc_AreaDriver self) -> XmlMXCAFDoc_AreaDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AreaDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMXCAFDoc_AreaDriver self) -> XmlMXCAFDoc_AreaDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AreaDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AreaDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AreaDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMXCAFDoc.new_Handle_XmlMXCAFDoc_AreaDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMXCAFDoc.Handle_XmlMXCAFDoc_AreaDriver_DownCast)
    __swig_destroy__ = _XmlMXCAFDoc.delete_Handle_XmlMXCAFDoc_AreaDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMXCAFDoc_AreaDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AreaDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMXCAFDoc_AreaDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMXCAFDoc_AreaDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AreaDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMXCAFDoc_AreaDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AreaDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AreaDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AreaDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMXCAFDoc_AreaDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AreaDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMXCAFDoc_AreaDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AreaDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AreaDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMXCAFDoc_AreaDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AreaDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMXCAFDoc_AreaDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMXCAFDoc_AreaDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AreaDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMXCAFDoc_AreaDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMXCAFDoc_AreaDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AreaDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMXCAFDoc_AreaDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AreaDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMXCAFDoc_AreaDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AreaDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMXCAFDoc_AreaDriver self)

        Increments the reference counter of this object


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AreaDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMXCAFDoc_AreaDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AreaDriver_DecrementRefCounter(self, *args)

Handle_XmlMXCAFDoc_AreaDriver_swigregister = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AreaDriver_swigregister
Handle_XmlMXCAFDoc_AreaDriver_swigregister(Handle_XmlMXCAFDoc_AreaDriver)

def Handle_XmlMXCAFDoc_AreaDriver_DownCast(thing):
    return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AreaDriver_DownCast(thing)
Handle_XmlMXCAFDoc_AreaDriver_DownCast = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_AreaDriver_DownCast

class Handle_XmlMXCAFDoc_NoteBalloonDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMXCAFDoc_NoteBalloonDriver self)

        Nullify the handle


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBalloonDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMXCAFDoc_NoteBalloonDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBalloonDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMXCAFDoc_NoteBalloonDriver self, XmlMXCAFDoc_NoteBalloonDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBalloonDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMXCAFDoc_NoteBalloonDriver self, Handle_XmlMXCAFDoc_NoteBalloonDriver theHandle) -> Handle_XmlMXCAFDoc_NoteBalloonDriver
        assign(Handle_XmlMXCAFDoc_NoteBalloonDriver self, XmlMXCAFDoc_NoteBalloonDriver thePtr) -> Handle_XmlMXCAFDoc_NoteBalloonDriver
        assign(Handle_XmlMXCAFDoc_NoteBalloonDriver self, Handle_XmlMXCAFDoc_NoteBalloonDriver theHandle) -> Handle_XmlMXCAFDoc_NoteBalloonDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBalloonDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMXCAFDoc_NoteBalloonDriver self) -> XmlMXCAFDoc_NoteBalloonDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBalloonDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMXCAFDoc_NoteBalloonDriver self) -> XmlMXCAFDoc_NoteBalloonDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBalloonDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMXCAFDoc_NoteBalloonDriver self) -> XmlMXCAFDoc_NoteBalloonDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBalloonDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBalloonDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBalloonDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMXCAFDoc.new_Handle_XmlMXCAFDoc_NoteBalloonDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBalloonDriver_DownCast)
    __swig_destroy__ = _XmlMXCAFDoc.delete_Handle_XmlMXCAFDoc_NoteBalloonDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMXCAFDoc_NoteBalloonDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBalloonDriver_NewEmpty(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMXCAFDoc_NoteBalloonDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBalloonDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBalloonDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBalloonDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Paste(self, *args):
        """
        Paste(Handle_XmlMXCAFDoc_NoteBalloonDriver self, XmlObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher theRelocTable) -> Standard_Boolean
        Paste(Handle_XmlMXCAFDoc_NoteBalloonDriver self, Handle_TDF_Attribute theSource, XmlObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBalloonDriver_Paste(self, *args)


    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMXCAFDoc_NoteBalloonDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBalloonDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMXCAFDoc_NoteBalloonDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBalloonDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBalloonDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMXCAFDoc_NoteBalloonDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBalloonDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMXCAFDoc_NoteBalloonDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMXCAFDoc_NoteBalloonDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBalloonDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMXCAFDoc_NoteBalloonDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMXCAFDoc_NoteBalloonDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBalloonDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMXCAFDoc_NoteBalloonDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBalloonDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMXCAFDoc_NoteBalloonDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBalloonDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMXCAFDoc_NoteBalloonDriver self)

        Increments the reference counter of this object


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBalloonDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMXCAFDoc_NoteBalloonDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBalloonDriver_DecrementRefCounter(self, *args)

Handle_XmlMXCAFDoc_NoteBalloonDriver_swigregister = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBalloonDriver_swigregister
Handle_XmlMXCAFDoc_NoteBalloonDriver_swigregister(Handle_XmlMXCAFDoc_NoteBalloonDriver)

def Handle_XmlMXCAFDoc_NoteBalloonDriver_DownCast(thing):
    return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBalloonDriver_DownCast(thing)
Handle_XmlMXCAFDoc_NoteBalloonDriver_DownCast = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NoteBalloonDriver_DownCast

class Handle_XmlMXCAFDoc_ColorDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMXCAFDoc_ColorDriver self)

        Nullify the handle


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMXCAFDoc_ColorDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMXCAFDoc_ColorDriver self, XmlMXCAFDoc_ColorDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMXCAFDoc_ColorDriver self, Handle_XmlMXCAFDoc_ColorDriver theHandle) -> Handle_XmlMXCAFDoc_ColorDriver
        assign(Handle_XmlMXCAFDoc_ColorDriver self, XmlMXCAFDoc_ColorDriver thePtr) -> Handle_XmlMXCAFDoc_ColorDriver
        assign(Handle_XmlMXCAFDoc_ColorDriver self, Handle_XmlMXCAFDoc_ColorDriver theHandle) -> Handle_XmlMXCAFDoc_ColorDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMXCAFDoc_ColorDriver self) -> XmlMXCAFDoc_ColorDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMXCAFDoc_ColorDriver self) -> XmlMXCAFDoc_ColorDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMXCAFDoc_ColorDriver self) -> XmlMXCAFDoc_ColorDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMXCAFDoc.new_Handle_XmlMXCAFDoc_ColorDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorDriver_DownCast)
    __swig_destroy__ = _XmlMXCAFDoc.delete_Handle_XmlMXCAFDoc_ColorDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMXCAFDoc_ColorDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMXCAFDoc_ColorDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMXCAFDoc_ColorDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMXCAFDoc_ColorDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMXCAFDoc_ColorDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMXCAFDoc_ColorDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMXCAFDoc_ColorDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMXCAFDoc_ColorDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMXCAFDoc_ColorDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMXCAFDoc_ColorDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMXCAFDoc_ColorDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMXCAFDoc_ColorDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMXCAFDoc_ColorDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMXCAFDoc_ColorDriver self)

        Increments the reference counter of this object


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMXCAFDoc_ColorDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorDriver_DecrementRefCounter(self, *args)

Handle_XmlMXCAFDoc_ColorDriver_swigregister = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorDriver_swigregister
Handle_XmlMXCAFDoc_ColorDriver_swigregister(Handle_XmlMXCAFDoc_ColorDriver)

def Handle_XmlMXCAFDoc_ColorDriver_DownCast(thing):
    return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorDriver_DownCast(thing)
Handle_XmlMXCAFDoc_ColorDriver_DownCast = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_ColorDriver_DownCast

class Handle_XmlMXCAFDoc_NotesToolDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMXCAFDoc_NotesToolDriver self)

        Nullify the handle


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NotesToolDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMXCAFDoc_NotesToolDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NotesToolDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMXCAFDoc_NotesToolDriver self, XmlMXCAFDoc_NotesToolDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NotesToolDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMXCAFDoc_NotesToolDriver self, Handle_XmlMXCAFDoc_NotesToolDriver theHandle) -> Handle_XmlMXCAFDoc_NotesToolDriver
        assign(Handle_XmlMXCAFDoc_NotesToolDriver self, XmlMXCAFDoc_NotesToolDriver thePtr) -> Handle_XmlMXCAFDoc_NotesToolDriver
        assign(Handle_XmlMXCAFDoc_NotesToolDriver self, Handle_XmlMXCAFDoc_NotesToolDriver theHandle) -> Handle_XmlMXCAFDoc_NotesToolDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NotesToolDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMXCAFDoc_NotesToolDriver self) -> XmlMXCAFDoc_NotesToolDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NotesToolDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMXCAFDoc_NotesToolDriver self) -> XmlMXCAFDoc_NotesToolDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NotesToolDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMXCAFDoc_NotesToolDriver self) -> XmlMXCAFDoc_NotesToolDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NotesToolDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NotesToolDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NotesToolDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMXCAFDoc.new_Handle_XmlMXCAFDoc_NotesToolDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMXCAFDoc.Handle_XmlMXCAFDoc_NotesToolDriver_DownCast)
    __swig_destroy__ = _XmlMXCAFDoc.delete_Handle_XmlMXCAFDoc_NotesToolDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMXCAFDoc_NotesToolDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NotesToolDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMXCAFDoc_NotesToolDriver self, XmlObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher theRelocTable) -> Standard_Boolean
        Paste(Handle_XmlMXCAFDoc_NotesToolDriver self, Handle_TDF_Attribute theSource, XmlObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NotesToolDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMXCAFDoc_NotesToolDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NotesToolDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NotesToolDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NotesToolDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMXCAFDoc_NotesToolDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NotesToolDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMXCAFDoc_NotesToolDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NotesToolDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NotesToolDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMXCAFDoc_NotesToolDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NotesToolDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMXCAFDoc_NotesToolDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMXCAFDoc_NotesToolDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NotesToolDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMXCAFDoc_NotesToolDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMXCAFDoc_NotesToolDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NotesToolDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMXCAFDoc_NotesToolDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NotesToolDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMXCAFDoc_NotesToolDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NotesToolDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMXCAFDoc_NotesToolDriver self)

        Increments the reference counter of this object


        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NotesToolDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMXCAFDoc_NotesToolDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NotesToolDriver_DecrementRefCounter(self, *args)

Handle_XmlMXCAFDoc_NotesToolDriver_swigregister = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NotesToolDriver_swigregister
Handle_XmlMXCAFDoc_NotesToolDriver_swigregister(Handle_XmlMXCAFDoc_NotesToolDriver)

def Handle_XmlMXCAFDoc_NotesToolDriver_DownCast(thing):
    return _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NotesToolDriver_DownCast(thing)
Handle_XmlMXCAFDoc_NotesToolDriver_DownCast = _XmlMXCAFDoc.Handle_XmlMXCAFDoc_NotesToolDriver_DownCast



