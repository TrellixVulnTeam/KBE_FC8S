# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BinMXCAFDoc')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BinMXCAFDoc')
    _BinMXCAFDoc = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BinMXCAFDoc', [dirname(__file__)])
        except ImportError:
            import _BinMXCAFDoc
            return _BinMXCAFDoc
        try:
            _mod = imp.load_module('_BinMXCAFDoc', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BinMXCAFDoc = swig_import_helper()
    del swig_import_helper
else:
    import _BinMXCAFDoc
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BinMXCAFDoc.delete_SwigPyIterator

    def value(self):
        return _BinMXCAFDoc.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _BinMXCAFDoc.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _BinMXCAFDoc.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _BinMXCAFDoc.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _BinMXCAFDoc.SwigPyIterator_equal(self, x)

    def copy(self):
        return _BinMXCAFDoc.SwigPyIterator_copy(self)

    def next(self):
        return _BinMXCAFDoc.SwigPyIterator_next(self)

    def __next__(self):
        return _BinMXCAFDoc.SwigPyIterator___next__(self)

    def previous(self):
        return _BinMXCAFDoc.SwigPyIterator_previous(self)

    def advance(self, n):
        return _BinMXCAFDoc.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _BinMXCAFDoc.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _BinMXCAFDoc.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _BinMXCAFDoc.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _BinMXCAFDoc.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _BinMXCAFDoc.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _BinMXCAFDoc.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _BinMXCAFDoc.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BinMXCAFDoc.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_BinMXCAFDoc.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _BinMXCAFDoc.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BinMXCAFDoc.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BinMXCAFDoc.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _BinMXCAFDoc.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _BinMXCAFDoc.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _BinMXCAFDoc.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BinMXCAFDoc.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_BinMXCAFDoc.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _BinMXCAFDoc.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BinMXCAFDoc.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BinMXCAFDoc.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _BinMXCAFDoc.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _BinMXCAFDoc.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _BinMXCAFDoc.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _BinMXCAFDoc.ptr_to_number(item)
ptr_to_number = _BinMXCAFDoc.ptr_to_number

def HashCode(*args):
    return _BinMXCAFDoc.HashCode(*args)
HashCode = _BinMXCAFDoc.HashCode

def ptr_equal(a, b):
    return _BinMXCAFDoc.ptr_equal(a, b)
ptr_equal = _BinMXCAFDoc.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDF
else:
    import TDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BinTools
else:
    import BinTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BinObjMgt
else:
    import BinObjMgt
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Storage
else:
    import Storage
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BinMDF
else:
    import BinMDF
del _swig_python_version_info
class BinMXCAFDoc_NoteDriver(BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMXCAFDoc_NoteDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMXCAFDoc_NoteDriver(self) 
            return h


    def Paste(self, *args):
        """
        Paste(BinMXCAFDoc_NoteDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(BinMXCAFDoc_NoteDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.BinMXCAFDoc_NoteDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.BinMXCAFDoc_NoteDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMXCAFDoc.BinMXCAFDoc_NoteDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.BinMXCAFDoc_NoteDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMXCAFDoc.delete_BinMXCAFDoc_NoteDriver
BinMXCAFDoc_NoteDriver_swigregister = _BinMXCAFDoc.BinMXCAFDoc_NoteDriver_swigregister
BinMXCAFDoc_NoteDriver_swigregister(BinMXCAFDoc_NoteDriver)

def BinMXCAFDoc_NoteDriver_get_type_name(*args):
    """
    BinMXCAFDoc_NoteDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMXCAFDoc.BinMXCAFDoc_NoteDriver_get_type_name(*args)

def BinMXCAFDoc_NoteDriver_get_type_descriptor(*args):
    """
    BinMXCAFDoc_NoteDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMXCAFDoc.BinMXCAFDoc_NoteDriver_get_type_descriptor(*args)

class BinMXCAFDoc_LocationDriver(BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMXCAFDoc_LocationDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMXCAFDoc_LocationDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMXCAFDoc_LocationDriver self, Handle_Message_Messenger theMsgDriver) -> BinMXCAFDoc_LocationDriver

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMXCAFDoc.new_BinMXCAFDoc_LocationDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMXCAFDoc_LocationDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.BinMXCAFDoc_LocationDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMXCAFDoc_LocationDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(BinMXCAFDoc_LocationDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.BinMXCAFDoc_LocationDriver_Paste(self, *args)


    def Translate(self, *args):
        """
        Translate(BinMXCAFDoc_LocationDriver self, BinObjMgt_Persistent theSource, TopLoc_Location theLoc, BinObjMgt_RRelocationTable theMap) -> Standard_Boolean
        Translate(BinMXCAFDoc_LocationDriver self, TopLoc_Location theLoc, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theMap)

        Translate transient location to storable

        :type theLoc: OCC.wrapper.TopLoc.TopLoc_Location
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theMap: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.BinMXCAFDoc_LocationDriver_Translate(self, *args)


    def SetSharedLocations(self, *args):
        """
        SetSharedLocations(BinMXCAFDoc_LocationDriver self, BinTools_LocationSet theLocations)

        :type theLocations: OCC.wrapper.BinTools.BinTools_LocationSetPtr

        """
        return _BinMXCAFDoc.BinMXCAFDoc_LocationDriver_SetSharedLocations(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.BinMXCAFDoc_LocationDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMXCAFDoc.BinMXCAFDoc_LocationDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.BinMXCAFDoc_LocationDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMXCAFDoc.delete_BinMXCAFDoc_LocationDriver
BinMXCAFDoc_LocationDriver_swigregister = _BinMXCAFDoc.BinMXCAFDoc_LocationDriver_swigregister
BinMXCAFDoc_LocationDriver_swigregister(BinMXCAFDoc_LocationDriver)

def BinMXCAFDoc_LocationDriver_get_type_name(*args):
    """
    BinMXCAFDoc_LocationDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMXCAFDoc.BinMXCAFDoc_LocationDriver_get_type_name(*args)

def BinMXCAFDoc_LocationDriver_get_type_descriptor(*args):
    """
    BinMXCAFDoc_LocationDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMXCAFDoc.BinMXCAFDoc_LocationDriver_get_type_descriptor(*args)

class BinMXCAFDoc_AssemblyItemRefDriver(BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMXCAFDoc_AssemblyItemRefDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMXCAFDoc_AssemblyItemRefDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMXCAFDoc_AssemblyItemRefDriver self, Handle_Message_Messenger theMsgDriver) -> BinMXCAFDoc_AssemblyItemRefDriver

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMXCAFDoc.new_BinMXCAFDoc_AssemblyItemRefDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMXCAFDoc_AssemblyItemRefDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.BinMXCAFDoc_AssemblyItemRefDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMXCAFDoc_AssemblyItemRefDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(BinMXCAFDoc_AssemblyItemRefDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.BinMXCAFDoc_AssemblyItemRefDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.BinMXCAFDoc_AssemblyItemRefDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMXCAFDoc.BinMXCAFDoc_AssemblyItemRefDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.BinMXCAFDoc_AssemblyItemRefDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMXCAFDoc.delete_BinMXCAFDoc_AssemblyItemRefDriver
BinMXCAFDoc_AssemblyItemRefDriver_swigregister = _BinMXCAFDoc.BinMXCAFDoc_AssemblyItemRefDriver_swigregister
BinMXCAFDoc_AssemblyItemRefDriver_swigregister(BinMXCAFDoc_AssemblyItemRefDriver)

def BinMXCAFDoc_AssemblyItemRefDriver_get_type_name(*args):
    """
    BinMXCAFDoc_AssemblyItemRefDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMXCAFDoc.BinMXCAFDoc_AssemblyItemRefDriver_get_type_name(*args)

def BinMXCAFDoc_AssemblyItemRefDriver_get_type_descriptor(*args):
    """
    BinMXCAFDoc_AssemblyItemRefDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMXCAFDoc.BinMXCAFDoc_AssemblyItemRefDriver_get_type_descriptor(*args)

class BinMXCAFDoc_NoteBinDataDriver(BinMXCAFDoc_NoteDriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMXCAFDoc_NoteBinDataDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMXCAFDoc_NoteBinDataDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMXCAFDoc_NoteBinDataDriver self, Handle_Message_Messenger theMsgDriver) -> BinMXCAFDoc_NoteBinDataDriver

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMXCAFDoc.new_BinMXCAFDoc_NoteBinDataDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMXCAFDoc_NoteBinDataDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.BinMXCAFDoc_NoteBinDataDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMXCAFDoc_NoteBinDataDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(BinMXCAFDoc_NoteBinDataDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.BinMXCAFDoc_NoteBinDataDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.BinMXCAFDoc_NoteBinDataDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMXCAFDoc.BinMXCAFDoc_NoteBinDataDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.BinMXCAFDoc_NoteBinDataDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMXCAFDoc.delete_BinMXCAFDoc_NoteBinDataDriver
BinMXCAFDoc_NoteBinDataDriver_swigregister = _BinMXCAFDoc.BinMXCAFDoc_NoteBinDataDriver_swigregister
BinMXCAFDoc_NoteBinDataDriver_swigregister(BinMXCAFDoc_NoteBinDataDriver)

def BinMXCAFDoc_NoteBinDataDriver_get_type_name(*args):
    """
    BinMXCAFDoc_NoteBinDataDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMXCAFDoc.BinMXCAFDoc_NoteBinDataDriver_get_type_name(*args)

def BinMXCAFDoc_NoteBinDataDriver_get_type_descriptor(*args):
    """
    BinMXCAFDoc_NoteBinDataDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMXCAFDoc.BinMXCAFDoc_NoteBinDataDriver_get_type_descriptor(*args)

class BinMXCAFDoc_MaterialToolDriver(BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMXCAFDoc_MaterialToolDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMXCAFDoc_MaterialToolDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMXCAFDoc_MaterialToolDriver self, Handle_Message_Messenger theMsgDriver) -> BinMXCAFDoc_MaterialToolDriver

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMXCAFDoc.new_BinMXCAFDoc_MaterialToolDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMXCAFDoc_MaterialToolDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.BinMXCAFDoc_MaterialToolDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMXCAFDoc_MaterialToolDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(BinMXCAFDoc_MaterialToolDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.BinMXCAFDoc_MaterialToolDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.BinMXCAFDoc_MaterialToolDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMXCAFDoc.BinMXCAFDoc_MaterialToolDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.BinMXCAFDoc_MaterialToolDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMXCAFDoc.delete_BinMXCAFDoc_MaterialToolDriver
BinMXCAFDoc_MaterialToolDriver_swigregister = _BinMXCAFDoc.BinMXCAFDoc_MaterialToolDriver_swigregister
BinMXCAFDoc_MaterialToolDriver_swigregister(BinMXCAFDoc_MaterialToolDriver)

def BinMXCAFDoc_MaterialToolDriver_get_type_name(*args):
    """
    BinMXCAFDoc_MaterialToolDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMXCAFDoc.BinMXCAFDoc_MaterialToolDriver_get_type_name(*args)

def BinMXCAFDoc_MaterialToolDriver_get_type_descriptor(*args):
    """
    BinMXCAFDoc_MaterialToolDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMXCAFDoc.BinMXCAFDoc_MaterialToolDriver_get_type_descriptor(*args)

class BinMXCAFDoc_NoteCommentDriver(BinMXCAFDoc_NoteDriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMXCAFDoc_NoteCommentDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMXCAFDoc_NoteCommentDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMXCAFDoc_NoteCommentDriver self, Handle_Message_Messenger theMsgDriver) -> BinMXCAFDoc_NoteCommentDriver

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMXCAFDoc.new_BinMXCAFDoc_NoteCommentDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMXCAFDoc_NoteCommentDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.BinMXCAFDoc_NoteCommentDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMXCAFDoc_NoteCommentDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(BinMXCAFDoc_NoteCommentDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.BinMXCAFDoc_NoteCommentDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.BinMXCAFDoc_NoteCommentDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMXCAFDoc.BinMXCAFDoc_NoteCommentDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.BinMXCAFDoc_NoteCommentDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMXCAFDoc.delete_BinMXCAFDoc_NoteCommentDriver
BinMXCAFDoc_NoteCommentDriver_swigregister = _BinMXCAFDoc.BinMXCAFDoc_NoteCommentDriver_swigregister
BinMXCAFDoc_NoteCommentDriver_swigregister(BinMXCAFDoc_NoteCommentDriver)

def BinMXCAFDoc_NoteCommentDriver_get_type_name(*args):
    """
    BinMXCAFDoc_NoteCommentDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMXCAFDoc.BinMXCAFDoc_NoteCommentDriver_get_type_name(*args)

def BinMXCAFDoc_NoteCommentDriver_get_type_descriptor(*args):
    """
    BinMXCAFDoc_NoteCommentDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMXCAFDoc.BinMXCAFDoc_NoteCommentDriver_get_type_descriptor(*args)

class BinMXCAFDoc_ColorDriver(BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMXCAFDoc_ColorDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMXCAFDoc_ColorDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMXCAFDoc_ColorDriver self, Handle_Message_Messenger theMsgDriver) -> BinMXCAFDoc_ColorDriver

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMXCAFDoc.new_BinMXCAFDoc_ColorDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMXCAFDoc_ColorDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.BinMXCAFDoc_ColorDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMXCAFDoc_ColorDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(BinMXCAFDoc_ColorDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.BinMXCAFDoc_ColorDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.BinMXCAFDoc_ColorDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMXCAFDoc.BinMXCAFDoc_ColorDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.BinMXCAFDoc_ColorDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMXCAFDoc.delete_BinMXCAFDoc_ColorDriver
BinMXCAFDoc_ColorDriver_swigregister = _BinMXCAFDoc.BinMXCAFDoc_ColorDriver_swigregister
BinMXCAFDoc_ColorDriver_swigregister(BinMXCAFDoc_ColorDriver)

def BinMXCAFDoc_ColorDriver_get_type_name(*args):
    """
    BinMXCAFDoc_ColorDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMXCAFDoc.BinMXCAFDoc_ColorDriver_get_type_name(*args)

def BinMXCAFDoc_ColorDriver_get_type_descriptor(*args):
    """
    BinMXCAFDoc_ColorDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMXCAFDoc.BinMXCAFDoc_ColorDriver_get_type_descriptor(*args)

class BinMXCAFDoc_ShapeToolDriver(BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMXCAFDoc_ShapeToolDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMXCAFDoc_ShapeToolDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMXCAFDoc_ShapeToolDriver self, Handle_Message_Messenger theMsgDriver) -> BinMXCAFDoc_ShapeToolDriver

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMXCAFDoc.new_BinMXCAFDoc_ShapeToolDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMXCAFDoc_ShapeToolDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.BinMXCAFDoc_ShapeToolDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMXCAFDoc_ShapeToolDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(BinMXCAFDoc_ShapeToolDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.BinMXCAFDoc_ShapeToolDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.BinMXCAFDoc_ShapeToolDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMXCAFDoc.BinMXCAFDoc_ShapeToolDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.BinMXCAFDoc_ShapeToolDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMXCAFDoc.delete_BinMXCAFDoc_ShapeToolDriver
BinMXCAFDoc_ShapeToolDriver_swigregister = _BinMXCAFDoc.BinMXCAFDoc_ShapeToolDriver_swigregister
BinMXCAFDoc_ShapeToolDriver_swigregister(BinMXCAFDoc_ShapeToolDriver)

def BinMXCAFDoc_ShapeToolDriver_get_type_name(*args):
    """
    BinMXCAFDoc_ShapeToolDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMXCAFDoc.BinMXCAFDoc_ShapeToolDriver_get_type_name(*args)

def BinMXCAFDoc_ShapeToolDriver_get_type_descriptor(*args):
    """
    BinMXCAFDoc_ShapeToolDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMXCAFDoc.BinMXCAFDoc_ShapeToolDriver_get_type_descriptor(*args)

class BinMXCAFDoc_CentroidDriver(BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMXCAFDoc_CentroidDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMXCAFDoc_CentroidDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMXCAFDoc_CentroidDriver self, Handle_Message_Messenger theMsgDriver) -> BinMXCAFDoc_CentroidDriver

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMXCAFDoc.new_BinMXCAFDoc_CentroidDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMXCAFDoc_CentroidDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.BinMXCAFDoc_CentroidDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMXCAFDoc_CentroidDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(BinMXCAFDoc_CentroidDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.BinMXCAFDoc_CentroidDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.BinMXCAFDoc_CentroidDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMXCAFDoc.BinMXCAFDoc_CentroidDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.BinMXCAFDoc_CentroidDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMXCAFDoc.delete_BinMXCAFDoc_CentroidDriver
BinMXCAFDoc_CentroidDriver_swigregister = _BinMXCAFDoc.BinMXCAFDoc_CentroidDriver_swigregister
BinMXCAFDoc_CentroidDriver_swigregister(BinMXCAFDoc_CentroidDriver)

def BinMXCAFDoc_CentroidDriver_get_type_name(*args):
    """
    BinMXCAFDoc_CentroidDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMXCAFDoc.BinMXCAFDoc_CentroidDriver_get_type_name(*args)

def BinMXCAFDoc_CentroidDriver_get_type_descriptor(*args):
    """
    BinMXCAFDoc_CentroidDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMXCAFDoc.BinMXCAFDoc_CentroidDriver_get_type_descriptor(*args)

class BinMXCAFDoc_DatumDriver(BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMXCAFDoc_DatumDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMXCAFDoc_DatumDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMXCAFDoc_DatumDriver self, Handle_Message_Messenger theMsgDriver) -> BinMXCAFDoc_DatumDriver

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMXCAFDoc.new_BinMXCAFDoc_DatumDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMXCAFDoc_DatumDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.BinMXCAFDoc_DatumDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMXCAFDoc_DatumDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(BinMXCAFDoc_DatumDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.BinMXCAFDoc_DatumDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.BinMXCAFDoc_DatumDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMXCAFDoc.BinMXCAFDoc_DatumDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.BinMXCAFDoc_DatumDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMXCAFDoc.delete_BinMXCAFDoc_DatumDriver
BinMXCAFDoc_DatumDriver_swigregister = _BinMXCAFDoc.BinMXCAFDoc_DatumDriver_swigregister
BinMXCAFDoc_DatumDriver_swigregister(BinMXCAFDoc_DatumDriver)

def BinMXCAFDoc_DatumDriver_get_type_name(*args):
    """
    BinMXCAFDoc_DatumDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMXCAFDoc.BinMXCAFDoc_DatumDriver_get_type_name(*args)

def BinMXCAFDoc_DatumDriver_get_type_descriptor(*args):
    """
    BinMXCAFDoc_DatumDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMXCAFDoc.BinMXCAFDoc_DatumDriver_get_type_descriptor(*args)

class BinMXCAFDoc_ColorToolDriver(BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMXCAFDoc_ColorToolDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMXCAFDoc_ColorToolDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMXCAFDoc_ColorToolDriver self, Handle_Message_Messenger theMsgDriver) -> BinMXCAFDoc_ColorToolDriver

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMXCAFDoc.new_BinMXCAFDoc_ColorToolDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMXCAFDoc_ColorToolDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.BinMXCAFDoc_ColorToolDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMXCAFDoc_ColorToolDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(BinMXCAFDoc_ColorToolDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.BinMXCAFDoc_ColorToolDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.BinMXCAFDoc_ColorToolDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMXCAFDoc.BinMXCAFDoc_ColorToolDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.BinMXCAFDoc_ColorToolDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMXCAFDoc.delete_BinMXCAFDoc_ColorToolDriver
BinMXCAFDoc_ColorToolDriver_swigregister = _BinMXCAFDoc.BinMXCAFDoc_ColorToolDriver_swigregister
BinMXCAFDoc_ColorToolDriver_swigregister(BinMXCAFDoc_ColorToolDriver)

def BinMXCAFDoc_ColorToolDriver_get_type_name(*args):
    """
    BinMXCAFDoc_ColorToolDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMXCAFDoc.BinMXCAFDoc_ColorToolDriver_get_type_name(*args)

def BinMXCAFDoc_ColorToolDriver_get_type_descriptor(*args):
    """
    BinMXCAFDoc_ColorToolDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMXCAFDoc.BinMXCAFDoc_ColorToolDriver_get_type_descriptor(*args)

class BinMXCAFDoc_GraphNodeDriver(BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMXCAFDoc_GraphNodeDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMXCAFDoc_GraphNodeDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMXCAFDoc_GraphNodeDriver self, Handle_Message_Messenger theMsgDriver) -> BinMXCAFDoc_GraphNodeDriver

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMXCAFDoc.new_BinMXCAFDoc_GraphNodeDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMXCAFDoc_GraphNodeDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.BinMXCAFDoc_GraphNodeDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMXCAFDoc_GraphNodeDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(BinMXCAFDoc_GraphNodeDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.BinMXCAFDoc_GraphNodeDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.BinMXCAFDoc_GraphNodeDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMXCAFDoc.BinMXCAFDoc_GraphNodeDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.BinMXCAFDoc_GraphNodeDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMXCAFDoc.delete_BinMXCAFDoc_GraphNodeDriver
BinMXCAFDoc_GraphNodeDriver_swigregister = _BinMXCAFDoc.BinMXCAFDoc_GraphNodeDriver_swigregister
BinMXCAFDoc_GraphNodeDriver_swigregister(BinMXCAFDoc_GraphNodeDriver)

def BinMXCAFDoc_GraphNodeDriver_get_type_name(*args):
    """
    BinMXCAFDoc_GraphNodeDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMXCAFDoc.BinMXCAFDoc_GraphNodeDriver_get_type_name(*args)

def BinMXCAFDoc_GraphNodeDriver_get_type_descriptor(*args):
    """
    BinMXCAFDoc_GraphNodeDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMXCAFDoc.BinMXCAFDoc_GraphNodeDriver_get_type_descriptor(*args)

class BinMXCAFDoc_DimTolToolDriver(BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMXCAFDoc_DimTolToolDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMXCAFDoc_DimTolToolDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMXCAFDoc_DimTolToolDriver self, Handle_Message_Messenger theMsgDriver) -> BinMXCAFDoc_DimTolToolDriver

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMXCAFDoc.new_BinMXCAFDoc_DimTolToolDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMXCAFDoc_DimTolToolDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.BinMXCAFDoc_DimTolToolDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMXCAFDoc_DimTolToolDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(BinMXCAFDoc_DimTolToolDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.BinMXCAFDoc_DimTolToolDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.BinMXCAFDoc_DimTolToolDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMXCAFDoc.BinMXCAFDoc_DimTolToolDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.BinMXCAFDoc_DimTolToolDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMXCAFDoc.delete_BinMXCAFDoc_DimTolToolDriver
BinMXCAFDoc_DimTolToolDriver_swigregister = _BinMXCAFDoc.BinMXCAFDoc_DimTolToolDriver_swigregister
BinMXCAFDoc_DimTolToolDriver_swigregister(BinMXCAFDoc_DimTolToolDriver)

def BinMXCAFDoc_DimTolToolDriver_get_type_name(*args):
    """
    BinMXCAFDoc_DimTolToolDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMXCAFDoc.BinMXCAFDoc_DimTolToolDriver_get_type_name(*args)

def BinMXCAFDoc_DimTolToolDriver_get_type_descriptor(*args):
    """
    BinMXCAFDoc_DimTolToolDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMXCAFDoc.BinMXCAFDoc_DimTolToolDriver_get_type_descriptor(*args)

class BinMXCAFDoc_DimensionDriver(BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMXCAFDoc_DimensionDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMXCAFDoc_DimensionDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMXCAFDoc_DimensionDriver self, Handle_Message_Messenger theMsgDriver) -> BinMXCAFDoc_DimensionDriver

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMXCAFDoc.new_BinMXCAFDoc_DimensionDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMXCAFDoc_DimensionDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.BinMXCAFDoc_DimensionDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMXCAFDoc_DimensionDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(BinMXCAFDoc_DimensionDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.BinMXCAFDoc_DimensionDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.BinMXCAFDoc_DimensionDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMXCAFDoc.BinMXCAFDoc_DimensionDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.BinMXCAFDoc_DimensionDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMXCAFDoc.delete_BinMXCAFDoc_DimensionDriver
BinMXCAFDoc_DimensionDriver_swigregister = _BinMXCAFDoc.BinMXCAFDoc_DimensionDriver_swigregister
BinMXCAFDoc_DimensionDriver_swigregister(BinMXCAFDoc_DimensionDriver)

def BinMXCAFDoc_DimensionDriver_get_type_name(*args):
    """
    BinMXCAFDoc_DimensionDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMXCAFDoc.BinMXCAFDoc_DimensionDriver_get_type_name(*args)

def BinMXCAFDoc_DimensionDriver_get_type_descriptor(*args):
    """
    BinMXCAFDoc_DimensionDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMXCAFDoc.BinMXCAFDoc_DimensionDriver_get_type_descriptor(*args)

class BinMXCAFDoc_GeomToleranceDriver(BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMXCAFDoc_GeomToleranceDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMXCAFDoc_GeomToleranceDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMXCAFDoc_GeomToleranceDriver self, Handle_Message_Messenger theMsgDriver) -> BinMXCAFDoc_GeomToleranceDriver

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMXCAFDoc.new_BinMXCAFDoc_GeomToleranceDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMXCAFDoc_GeomToleranceDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.BinMXCAFDoc_GeomToleranceDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMXCAFDoc_GeomToleranceDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(BinMXCAFDoc_GeomToleranceDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.BinMXCAFDoc_GeomToleranceDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.BinMXCAFDoc_GeomToleranceDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMXCAFDoc.BinMXCAFDoc_GeomToleranceDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.BinMXCAFDoc_GeomToleranceDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMXCAFDoc.delete_BinMXCAFDoc_GeomToleranceDriver
BinMXCAFDoc_GeomToleranceDriver_swigregister = _BinMXCAFDoc.BinMXCAFDoc_GeomToleranceDriver_swigregister
BinMXCAFDoc_GeomToleranceDriver_swigregister(BinMXCAFDoc_GeomToleranceDriver)

def BinMXCAFDoc_GeomToleranceDriver_get_type_name(*args):
    """
    BinMXCAFDoc_GeomToleranceDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMXCAFDoc.BinMXCAFDoc_GeomToleranceDriver_get_type_name(*args)

def BinMXCAFDoc_GeomToleranceDriver_get_type_descriptor(*args):
    """
    BinMXCAFDoc_GeomToleranceDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMXCAFDoc.BinMXCAFDoc_GeomToleranceDriver_get_type_descriptor(*args)

class Handle_BinMXCAFDoc_LocationDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMXCAFDoc_LocationDriver self)

        Nullify the handle


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_LocationDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMXCAFDoc_LocationDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_LocationDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMXCAFDoc_LocationDriver self, BinMXCAFDoc_LocationDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_LocationDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMXCAFDoc_LocationDriver self, Handle_BinMXCAFDoc_LocationDriver theHandle) -> Handle_BinMXCAFDoc_LocationDriver
        assign(Handle_BinMXCAFDoc_LocationDriver self, BinMXCAFDoc_LocationDriver thePtr) -> Handle_BinMXCAFDoc_LocationDriver
        assign(Handle_BinMXCAFDoc_LocationDriver self, Handle_BinMXCAFDoc_LocationDriver theHandle) -> Handle_BinMXCAFDoc_LocationDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_LocationDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMXCAFDoc_LocationDriver self) -> BinMXCAFDoc_LocationDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_LocationDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMXCAFDoc_LocationDriver self) -> BinMXCAFDoc_LocationDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_LocationDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMXCAFDoc_LocationDriver self) -> BinMXCAFDoc_LocationDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_LocationDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_LocationDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMXCAFDoc.Handle_BinMXCAFDoc_LocationDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMXCAFDoc.new_Handle_BinMXCAFDoc_LocationDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMXCAFDoc.Handle_BinMXCAFDoc_LocationDriver_DownCast)
    __swig_destroy__ = _BinMXCAFDoc.delete_Handle_BinMXCAFDoc_LocationDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMXCAFDoc_LocationDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_LocationDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMXCAFDoc_LocationDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(Handle_BinMXCAFDoc_LocationDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_LocationDriver_Paste(self, *args)


    def Translate(self, *args):
        """
        Translate(Handle_BinMXCAFDoc_LocationDriver self, BinObjMgt_Persistent theSource, TopLoc_Location theLoc, BinObjMgt_RRelocationTable theMap) -> Standard_Boolean
        Translate(Handle_BinMXCAFDoc_LocationDriver self, TopLoc_Location theLoc, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theMap)

        Translate transient location to storable

        :type theLoc: OCC.wrapper.TopLoc.TopLoc_Location
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theMap: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_LocationDriver_Translate(self, *args)


    def SetSharedLocations(self, *args):
        """
        SetSharedLocations(Handle_BinMXCAFDoc_LocationDriver self, BinTools_LocationSet theLocations)

        :type theLocations: OCC.wrapper.BinTools.BinTools_LocationSetPtr

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_LocationDriver_SetSharedLocations(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMXCAFDoc_LocationDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_LocationDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_LocationDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_LocationDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_LocationDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_LocationDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMXCAFDoc_LocationDriver self)

        Memory deallocator for transient classes


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_LocationDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMXCAFDoc_LocationDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMXCAFDoc_LocationDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_LocationDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMXCAFDoc_LocationDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMXCAFDoc_LocationDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_LocationDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMXCAFDoc_LocationDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_LocationDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMXCAFDoc_LocationDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_LocationDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMXCAFDoc_LocationDriver self)

        Increments the reference counter of this object


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_LocationDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMXCAFDoc_LocationDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_LocationDriver_DecrementRefCounter(self, *args)

Handle_BinMXCAFDoc_LocationDriver_swigregister = _BinMXCAFDoc.Handle_BinMXCAFDoc_LocationDriver_swigregister
Handle_BinMXCAFDoc_LocationDriver_swigregister(Handle_BinMXCAFDoc_LocationDriver)

def Handle_BinMXCAFDoc_LocationDriver_DownCast(thing):
    return _BinMXCAFDoc.Handle_BinMXCAFDoc_LocationDriver_DownCast(thing)
Handle_BinMXCAFDoc_LocationDriver_DownCast = _BinMXCAFDoc.Handle_BinMXCAFDoc_LocationDriver_DownCast

class Handle_BinMXCAFDoc_CentroidDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMXCAFDoc_CentroidDriver self)

        Nullify the handle


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_CentroidDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMXCAFDoc_CentroidDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_CentroidDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMXCAFDoc_CentroidDriver self, BinMXCAFDoc_CentroidDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_CentroidDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMXCAFDoc_CentroidDriver self, Handle_BinMXCAFDoc_CentroidDriver theHandle) -> Handle_BinMXCAFDoc_CentroidDriver
        assign(Handle_BinMXCAFDoc_CentroidDriver self, BinMXCAFDoc_CentroidDriver thePtr) -> Handle_BinMXCAFDoc_CentroidDriver
        assign(Handle_BinMXCAFDoc_CentroidDriver self, Handle_BinMXCAFDoc_CentroidDriver theHandle) -> Handle_BinMXCAFDoc_CentroidDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_CentroidDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMXCAFDoc_CentroidDriver self) -> BinMXCAFDoc_CentroidDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_CentroidDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMXCAFDoc_CentroidDriver self) -> BinMXCAFDoc_CentroidDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_CentroidDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMXCAFDoc_CentroidDriver self) -> BinMXCAFDoc_CentroidDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_CentroidDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_CentroidDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMXCAFDoc.Handle_BinMXCAFDoc_CentroidDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMXCAFDoc.new_Handle_BinMXCAFDoc_CentroidDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMXCAFDoc.Handle_BinMXCAFDoc_CentroidDriver_DownCast)
    __swig_destroy__ = _BinMXCAFDoc.delete_Handle_BinMXCAFDoc_CentroidDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMXCAFDoc_CentroidDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_CentroidDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMXCAFDoc_CentroidDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(Handle_BinMXCAFDoc_CentroidDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_CentroidDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMXCAFDoc_CentroidDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_CentroidDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_CentroidDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_CentroidDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_CentroidDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_CentroidDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMXCAFDoc_CentroidDriver self)

        Memory deallocator for transient classes


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_CentroidDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMXCAFDoc_CentroidDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMXCAFDoc_CentroidDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_CentroidDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMXCAFDoc_CentroidDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMXCAFDoc_CentroidDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_CentroidDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMXCAFDoc_CentroidDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_CentroidDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMXCAFDoc_CentroidDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_CentroidDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMXCAFDoc_CentroidDriver self)

        Increments the reference counter of this object


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_CentroidDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMXCAFDoc_CentroidDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_CentroidDriver_DecrementRefCounter(self, *args)

Handle_BinMXCAFDoc_CentroidDriver_swigregister = _BinMXCAFDoc.Handle_BinMXCAFDoc_CentroidDriver_swigregister
Handle_BinMXCAFDoc_CentroidDriver_swigregister(Handle_BinMXCAFDoc_CentroidDriver)

def Handle_BinMXCAFDoc_CentroidDriver_DownCast(thing):
    return _BinMXCAFDoc.Handle_BinMXCAFDoc_CentroidDriver_DownCast(thing)
Handle_BinMXCAFDoc_CentroidDriver_DownCast = _BinMXCAFDoc.Handle_BinMXCAFDoc_CentroidDriver_DownCast

class Handle_BinMXCAFDoc_MaterialToolDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMXCAFDoc_MaterialToolDriver self)

        Nullify the handle


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialToolDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMXCAFDoc_MaterialToolDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialToolDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMXCAFDoc_MaterialToolDriver self, BinMXCAFDoc_MaterialToolDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialToolDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMXCAFDoc_MaterialToolDriver self, Handle_BinMXCAFDoc_MaterialToolDriver theHandle) -> Handle_BinMXCAFDoc_MaterialToolDriver
        assign(Handle_BinMXCAFDoc_MaterialToolDriver self, BinMXCAFDoc_MaterialToolDriver thePtr) -> Handle_BinMXCAFDoc_MaterialToolDriver
        assign(Handle_BinMXCAFDoc_MaterialToolDriver self, Handle_BinMXCAFDoc_MaterialToolDriver theHandle) -> Handle_BinMXCAFDoc_MaterialToolDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialToolDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMXCAFDoc_MaterialToolDriver self) -> BinMXCAFDoc_MaterialToolDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialToolDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMXCAFDoc_MaterialToolDriver self) -> BinMXCAFDoc_MaterialToolDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialToolDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMXCAFDoc_MaterialToolDriver self) -> BinMXCAFDoc_MaterialToolDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialToolDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialToolDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialToolDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMXCAFDoc.new_Handle_BinMXCAFDoc_MaterialToolDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialToolDriver_DownCast)
    __swig_destroy__ = _BinMXCAFDoc.delete_Handle_BinMXCAFDoc_MaterialToolDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMXCAFDoc_MaterialToolDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialToolDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMXCAFDoc_MaterialToolDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(Handle_BinMXCAFDoc_MaterialToolDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialToolDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMXCAFDoc_MaterialToolDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialToolDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialToolDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialToolDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialToolDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialToolDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMXCAFDoc_MaterialToolDriver self)

        Memory deallocator for transient classes


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialToolDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMXCAFDoc_MaterialToolDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMXCAFDoc_MaterialToolDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialToolDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMXCAFDoc_MaterialToolDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMXCAFDoc_MaterialToolDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialToolDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMXCAFDoc_MaterialToolDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialToolDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMXCAFDoc_MaterialToolDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialToolDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMXCAFDoc_MaterialToolDriver self)

        Increments the reference counter of this object


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialToolDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMXCAFDoc_MaterialToolDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialToolDriver_DecrementRefCounter(self, *args)

Handle_BinMXCAFDoc_MaterialToolDriver_swigregister = _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialToolDriver_swigregister
Handle_BinMXCAFDoc_MaterialToolDriver_swigregister(Handle_BinMXCAFDoc_MaterialToolDriver)

def Handle_BinMXCAFDoc_MaterialToolDriver_DownCast(thing):
    return _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialToolDriver_DownCast(thing)
Handle_BinMXCAFDoc_MaterialToolDriver_DownCast = _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialToolDriver_DownCast

class Handle_BinMXCAFDoc_DimensionDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMXCAFDoc_DimensionDriver self)

        Nullify the handle


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimensionDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMXCAFDoc_DimensionDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimensionDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMXCAFDoc_DimensionDriver self, BinMXCAFDoc_DimensionDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimensionDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMXCAFDoc_DimensionDriver self, Handle_BinMXCAFDoc_DimensionDriver theHandle) -> Handle_BinMXCAFDoc_DimensionDriver
        assign(Handle_BinMXCAFDoc_DimensionDriver self, BinMXCAFDoc_DimensionDriver thePtr) -> Handle_BinMXCAFDoc_DimensionDriver
        assign(Handle_BinMXCAFDoc_DimensionDriver self, Handle_BinMXCAFDoc_DimensionDriver theHandle) -> Handle_BinMXCAFDoc_DimensionDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimensionDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMXCAFDoc_DimensionDriver self) -> BinMXCAFDoc_DimensionDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimensionDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMXCAFDoc_DimensionDriver self) -> BinMXCAFDoc_DimensionDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimensionDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMXCAFDoc_DimensionDriver self) -> BinMXCAFDoc_DimensionDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimensionDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimensionDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimensionDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMXCAFDoc.new_Handle_BinMXCAFDoc_DimensionDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMXCAFDoc.Handle_BinMXCAFDoc_DimensionDriver_DownCast)
    __swig_destroy__ = _BinMXCAFDoc.delete_Handle_BinMXCAFDoc_DimensionDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMXCAFDoc_DimensionDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimensionDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMXCAFDoc_DimensionDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(Handle_BinMXCAFDoc_DimensionDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimensionDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMXCAFDoc_DimensionDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimensionDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_DimensionDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_DimensionDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_DimensionDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_DimensionDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMXCAFDoc_DimensionDriver self)

        Memory deallocator for transient classes


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimensionDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMXCAFDoc_DimensionDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMXCAFDoc_DimensionDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimensionDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMXCAFDoc_DimensionDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMXCAFDoc_DimensionDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimensionDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMXCAFDoc_DimensionDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimensionDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMXCAFDoc_DimensionDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimensionDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMXCAFDoc_DimensionDriver self)

        Increments the reference counter of this object


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimensionDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMXCAFDoc_DimensionDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimensionDriver_DecrementRefCounter(self, *args)

Handle_BinMXCAFDoc_DimensionDriver_swigregister = _BinMXCAFDoc.Handle_BinMXCAFDoc_DimensionDriver_swigregister
Handle_BinMXCAFDoc_DimensionDriver_swigregister(Handle_BinMXCAFDoc_DimensionDriver)

def Handle_BinMXCAFDoc_DimensionDriver_DownCast(thing):
    return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimensionDriver_DownCast(thing)
Handle_BinMXCAFDoc_DimensionDriver_DownCast = _BinMXCAFDoc.Handle_BinMXCAFDoc_DimensionDriver_DownCast

class BinMXCAFDoc_NoteBalloonDriver(BinMXCAFDoc_NoteCommentDriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMXCAFDoc_NoteBalloonDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMXCAFDoc_NoteBalloonDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMXCAFDoc_NoteBalloonDriver self, Handle_Message_Messenger theMsgDriver) -> BinMXCAFDoc_NoteBalloonDriver

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMXCAFDoc.new_BinMXCAFDoc_NoteBalloonDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMXCAFDoc_NoteBalloonDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.BinMXCAFDoc_NoteBalloonDriver_NewEmpty(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.BinMXCAFDoc_NoteBalloonDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMXCAFDoc.BinMXCAFDoc_NoteBalloonDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.BinMXCAFDoc_NoteBalloonDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMXCAFDoc.delete_BinMXCAFDoc_NoteBalloonDriver
BinMXCAFDoc_NoteBalloonDriver_swigregister = _BinMXCAFDoc.BinMXCAFDoc_NoteBalloonDriver_swigregister
BinMXCAFDoc_NoteBalloonDriver_swigregister(BinMXCAFDoc_NoteBalloonDriver)

def BinMXCAFDoc_NoteBalloonDriver_get_type_name(*args):
    """
    BinMXCAFDoc_NoteBalloonDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMXCAFDoc.BinMXCAFDoc_NoteBalloonDriver_get_type_name(*args)

def BinMXCAFDoc_NoteBalloonDriver_get_type_descriptor(*args):
    """
    BinMXCAFDoc_NoteBalloonDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMXCAFDoc.BinMXCAFDoc_NoteBalloonDriver_get_type_descriptor(*args)

class Handle_BinMXCAFDoc_ColorDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMXCAFDoc_ColorDriver self)

        Nullify the handle


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMXCAFDoc_ColorDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMXCAFDoc_ColorDriver self, BinMXCAFDoc_ColorDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMXCAFDoc_ColorDriver self, Handle_BinMXCAFDoc_ColorDriver theHandle) -> Handle_BinMXCAFDoc_ColorDriver
        assign(Handle_BinMXCAFDoc_ColorDriver self, BinMXCAFDoc_ColorDriver thePtr) -> Handle_BinMXCAFDoc_ColorDriver
        assign(Handle_BinMXCAFDoc_ColorDriver self, Handle_BinMXCAFDoc_ColorDriver theHandle) -> Handle_BinMXCAFDoc_ColorDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMXCAFDoc_ColorDriver self) -> BinMXCAFDoc_ColorDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMXCAFDoc_ColorDriver self) -> BinMXCAFDoc_ColorDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMXCAFDoc_ColorDriver self) -> BinMXCAFDoc_ColorDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMXCAFDoc.new_Handle_BinMXCAFDoc_ColorDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMXCAFDoc.Handle_BinMXCAFDoc_ColorDriver_DownCast)
    __swig_destroy__ = _BinMXCAFDoc.delete_Handle_BinMXCAFDoc_ColorDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMXCAFDoc_ColorDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMXCAFDoc_ColorDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(Handle_BinMXCAFDoc_ColorDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMXCAFDoc_ColorDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMXCAFDoc_ColorDriver self)

        Memory deallocator for transient classes


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMXCAFDoc_ColorDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMXCAFDoc_ColorDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMXCAFDoc_ColorDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMXCAFDoc_ColorDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMXCAFDoc_ColorDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMXCAFDoc_ColorDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMXCAFDoc_ColorDriver self)

        Increments the reference counter of this object


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMXCAFDoc_ColorDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorDriver_DecrementRefCounter(self, *args)

Handle_BinMXCAFDoc_ColorDriver_swigregister = _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorDriver_swigregister
Handle_BinMXCAFDoc_ColorDriver_swigregister(Handle_BinMXCAFDoc_ColorDriver)

def Handle_BinMXCAFDoc_ColorDriver_DownCast(thing):
    return _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorDriver_DownCast(thing)
Handle_BinMXCAFDoc_ColorDriver_DownCast = _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorDriver_DownCast

class Handle_BinMXCAFDoc_NoteCommentDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMXCAFDoc_NoteCommentDriver self)

        Nullify the handle


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteCommentDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMXCAFDoc_NoteCommentDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteCommentDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMXCAFDoc_NoteCommentDriver self, BinMXCAFDoc_NoteCommentDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteCommentDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMXCAFDoc_NoteCommentDriver self, Handle_BinMXCAFDoc_NoteCommentDriver theHandle) -> Handle_BinMXCAFDoc_NoteCommentDriver
        assign(Handle_BinMXCAFDoc_NoteCommentDriver self, BinMXCAFDoc_NoteCommentDriver thePtr) -> Handle_BinMXCAFDoc_NoteCommentDriver
        assign(Handle_BinMXCAFDoc_NoteCommentDriver self, Handle_BinMXCAFDoc_NoteCommentDriver theHandle) -> Handle_BinMXCAFDoc_NoteCommentDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteCommentDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMXCAFDoc_NoteCommentDriver self) -> BinMXCAFDoc_NoteCommentDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteCommentDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMXCAFDoc_NoteCommentDriver self) -> BinMXCAFDoc_NoteCommentDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteCommentDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMXCAFDoc_NoteCommentDriver self) -> BinMXCAFDoc_NoteCommentDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteCommentDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteCommentDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteCommentDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMXCAFDoc.new_Handle_BinMXCAFDoc_NoteCommentDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMXCAFDoc.Handle_BinMXCAFDoc_NoteCommentDriver_DownCast)
    __swig_destroy__ = _BinMXCAFDoc.delete_Handle_BinMXCAFDoc_NoteCommentDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMXCAFDoc_NoteCommentDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteCommentDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMXCAFDoc_NoteCommentDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(Handle_BinMXCAFDoc_NoteCommentDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteCommentDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMXCAFDoc_NoteCommentDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteCommentDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteCommentDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteCommentDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteCommentDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteCommentDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMXCAFDoc_NoteCommentDriver self)

        Memory deallocator for transient classes


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteCommentDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMXCAFDoc_NoteCommentDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMXCAFDoc_NoteCommentDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteCommentDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMXCAFDoc_NoteCommentDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMXCAFDoc_NoteCommentDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteCommentDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMXCAFDoc_NoteCommentDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteCommentDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMXCAFDoc_NoteCommentDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteCommentDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMXCAFDoc_NoteCommentDriver self)

        Increments the reference counter of this object


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteCommentDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMXCAFDoc_NoteCommentDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteCommentDriver_DecrementRefCounter(self, *args)

Handle_BinMXCAFDoc_NoteCommentDriver_swigregister = _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteCommentDriver_swigregister
Handle_BinMXCAFDoc_NoteCommentDriver_swigregister(Handle_BinMXCAFDoc_NoteCommentDriver)

def Handle_BinMXCAFDoc_NoteCommentDriver_DownCast(thing):
    return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteCommentDriver_DownCast(thing)
Handle_BinMXCAFDoc_NoteCommentDriver_DownCast = _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteCommentDriver_DownCast

class Handle_BinMXCAFDoc_DimTolToolDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMXCAFDoc_DimTolToolDriver self)

        Nullify the handle


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolToolDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMXCAFDoc_DimTolToolDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolToolDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMXCAFDoc_DimTolToolDriver self, BinMXCAFDoc_DimTolToolDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolToolDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMXCAFDoc_DimTolToolDriver self, Handle_BinMXCAFDoc_DimTolToolDriver theHandle) -> Handle_BinMXCAFDoc_DimTolToolDriver
        assign(Handle_BinMXCAFDoc_DimTolToolDriver self, BinMXCAFDoc_DimTolToolDriver thePtr) -> Handle_BinMXCAFDoc_DimTolToolDriver
        assign(Handle_BinMXCAFDoc_DimTolToolDriver self, Handle_BinMXCAFDoc_DimTolToolDriver theHandle) -> Handle_BinMXCAFDoc_DimTolToolDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolToolDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMXCAFDoc_DimTolToolDriver self) -> BinMXCAFDoc_DimTolToolDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolToolDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMXCAFDoc_DimTolToolDriver self) -> BinMXCAFDoc_DimTolToolDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolToolDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMXCAFDoc_DimTolToolDriver self) -> BinMXCAFDoc_DimTolToolDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolToolDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolToolDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolToolDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMXCAFDoc.new_Handle_BinMXCAFDoc_DimTolToolDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolToolDriver_DownCast)
    __swig_destroy__ = _BinMXCAFDoc.delete_Handle_BinMXCAFDoc_DimTolToolDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMXCAFDoc_DimTolToolDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolToolDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMXCAFDoc_DimTolToolDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(Handle_BinMXCAFDoc_DimTolToolDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolToolDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMXCAFDoc_DimTolToolDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolToolDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolToolDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolToolDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolToolDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolToolDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMXCAFDoc_DimTolToolDriver self)

        Memory deallocator for transient classes


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolToolDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMXCAFDoc_DimTolToolDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMXCAFDoc_DimTolToolDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolToolDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMXCAFDoc_DimTolToolDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMXCAFDoc_DimTolToolDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolToolDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMXCAFDoc_DimTolToolDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolToolDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMXCAFDoc_DimTolToolDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolToolDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMXCAFDoc_DimTolToolDriver self)

        Increments the reference counter of this object


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolToolDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMXCAFDoc_DimTolToolDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolToolDriver_DecrementRefCounter(self, *args)

Handle_BinMXCAFDoc_DimTolToolDriver_swigregister = _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolToolDriver_swigregister
Handle_BinMXCAFDoc_DimTolToolDriver_swigregister(Handle_BinMXCAFDoc_DimTolToolDriver)

def Handle_BinMXCAFDoc_DimTolToolDriver_DownCast(thing):
    return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolToolDriver_DownCast(thing)
Handle_BinMXCAFDoc_DimTolToolDriver_DownCast = _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolToolDriver_DownCast

class BinMXCAFDoc_DimTolDriver(BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMXCAFDoc_DimTolDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMXCAFDoc_DimTolDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMXCAFDoc_DimTolDriver self, Handle_Message_Messenger theMsgDriver) -> BinMXCAFDoc_DimTolDriver

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMXCAFDoc.new_BinMXCAFDoc_DimTolDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMXCAFDoc_DimTolDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.BinMXCAFDoc_DimTolDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMXCAFDoc_DimTolDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(BinMXCAFDoc_DimTolDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.BinMXCAFDoc_DimTolDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.BinMXCAFDoc_DimTolDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMXCAFDoc.BinMXCAFDoc_DimTolDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.BinMXCAFDoc_DimTolDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMXCAFDoc.delete_BinMXCAFDoc_DimTolDriver
BinMXCAFDoc_DimTolDriver_swigregister = _BinMXCAFDoc.BinMXCAFDoc_DimTolDriver_swigregister
BinMXCAFDoc_DimTolDriver_swigregister(BinMXCAFDoc_DimTolDriver)

def BinMXCAFDoc_DimTolDriver_get_type_name(*args):
    """
    BinMXCAFDoc_DimTolDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMXCAFDoc.BinMXCAFDoc_DimTolDriver_get_type_name(*args)

def BinMXCAFDoc_DimTolDriver_get_type_descriptor(*args):
    """
    BinMXCAFDoc_DimTolDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMXCAFDoc.BinMXCAFDoc_DimTolDriver_get_type_descriptor(*args)

class BinMXCAFDoc_DocumentToolDriver(BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMXCAFDoc_DocumentToolDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMXCAFDoc_DocumentToolDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMXCAFDoc_DocumentToolDriver self, Handle_Message_Messenger theMsgDriver) -> BinMXCAFDoc_DocumentToolDriver

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMXCAFDoc.new_BinMXCAFDoc_DocumentToolDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMXCAFDoc_DocumentToolDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.BinMXCAFDoc_DocumentToolDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMXCAFDoc_DocumentToolDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(BinMXCAFDoc_DocumentToolDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.BinMXCAFDoc_DocumentToolDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.BinMXCAFDoc_DocumentToolDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMXCAFDoc.BinMXCAFDoc_DocumentToolDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.BinMXCAFDoc_DocumentToolDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMXCAFDoc.delete_BinMXCAFDoc_DocumentToolDriver
BinMXCAFDoc_DocumentToolDriver_swigregister = _BinMXCAFDoc.BinMXCAFDoc_DocumentToolDriver_swigregister
BinMXCAFDoc_DocumentToolDriver_swigregister(BinMXCAFDoc_DocumentToolDriver)

def BinMXCAFDoc_DocumentToolDriver_get_type_name(*args):
    """
    BinMXCAFDoc_DocumentToolDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMXCAFDoc.BinMXCAFDoc_DocumentToolDriver_get_type_name(*args)

def BinMXCAFDoc_DocumentToolDriver_get_type_descriptor(*args):
    """
    BinMXCAFDoc_DocumentToolDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMXCAFDoc.BinMXCAFDoc_DocumentToolDriver_get_type_descriptor(*args)

class Handle_BinMXCAFDoc_NoteBinDataDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMXCAFDoc_NoteBinDataDriver self)

        Nullify the handle


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBinDataDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMXCAFDoc_NoteBinDataDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBinDataDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMXCAFDoc_NoteBinDataDriver self, BinMXCAFDoc_NoteBinDataDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBinDataDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMXCAFDoc_NoteBinDataDriver self, Handle_BinMXCAFDoc_NoteBinDataDriver theHandle) -> Handle_BinMXCAFDoc_NoteBinDataDriver
        assign(Handle_BinMXCAFDoc_NoteBinDataDriver self, BinMXCAFDoc_NoteBinDataDriver thePtr) -> Handle_BinMXCAFDoc_NoteBinDataDriver
        assign(Handle_BinMXCAFDoc_NoteBinDataDriver self, Handle_BinMXCAFDoc_NoteBinDataDriver theHandle) -> Handle_BinMXCAFDoc_NoteBinDataDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBinDataDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMXCAFDoc_NoteBinDataDriver self) -> BinMXCAFDoc_NoteBinDataDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBinDataDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMXCAFDoc_NoteBinDataDriver self) -> BinMXCAFDoc_NoteBinDataDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBinDataDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMXCAFDoc_NoteBinDataDriver self) -> BinMXCAFDoc_NoteBinDataDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBinDataDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBinDataDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBinDataDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMXCAFDoc.new_Handle_BinMXCAFDoc_NoteBinDataDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBinDataDriver_DownCast)
    __swig_destroy__ = _BinMXCAFDoc.delete_Handle_BinMXCAFDoc_NoteBinDataDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMXCAFDoc_NoteBinDataDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBinDataDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMXCAFDoc_NoteBinDataDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(Handle_BinMXCAFDoc_NoteBinDataDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBinDataDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMXCAFDoc_NoteBinDataDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBinDataDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBinDataDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBinDataDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBinDataDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBinDataDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMXCAFDoc_NoteBinDataDriver self)

        Memory deallocator for transient classes


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBinDataDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMXCAFDoc_NoteBinDataDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMXCAFDoc_NoteBinDataDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBinDataDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMXCAFDoc_NoteBinDataDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMXCAFDoc_NoteBinDataDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBinDataDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMXCAFDoc_NoteBinDataDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBinDataDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMXCAFDoc_NoteBinDataDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBinDataDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMXCAFDoc_NoteBinDataDriver self)

        Increments the reference counter of this object


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBinDataDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMXCAFDoc_NoteBinDataDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBinDataDriver_DecrementRefCounter(self, *args)

Handle_BinMXCAFDoc_NoteBinDataDriver_swigregister = _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBinDataDriver_swigregister
Handle_BinMXCAFDoc_NoteBinDataDriver_swigregister(Handle_BinMXCAFDoc_NoteBinDataDriver)

def Handle_BinMXCAFDoc_NoteBinDataDriver_DownCast(thing):
    return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBinDataDriver_DownCast(thing)
Handle_BinMXCAFDoc_NoteBinDataDriver_DownCast = _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBinDataDriver_DownCast

class Handle_BinMXCAFDoc_AssemblyItemRefDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMXCAFDoc_AssemblyItemRefDriver self)

        Nullify the handle


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_AssemblyItemRefDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMXCAFDoc_AssemblyItemRefDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_AssemblyItemRefDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMXCAFDoc_AssemblyItemRefDriver self, BinMXCAFDoc_AssemblyItemRefDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_AssemblyItemRefDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMXCAFDoc_AssemblyItemRefDriver self, Handle_BinMXCAFDoc_AssemblyItemRefDriver theHandle) -> Handle_BinMXCAFDoc_AssemblyItemRefDriver
        assign(Handle_BinMXCAFDoc_AssemblyItemRefDriver self, BinMXCAFDoc_AssemblyItemRefDriver thePtr) -> Handle_BinMXCAFDoc_AssemblyItemRefDriver
        assign(Handle_BinMXCAFDoc_AssemblyItemRefDriver self, Handle_BinMXCAFDoc_AssemblyItemRefDriver theHandle) -> Handle_BinMXCAFDoc_AssemblyItemRefDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_AssemblyItemRefDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMXCAFDoc_AssemblyItemRefDriver self) -> BinMXCAFDoc_AssemblyItemRefDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_AssemblyItemRefDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMXCAFDoc_AssemblyItemRefDriver self) -> BinMXCAFDoc_AssemblyItemRefDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_AssemblyItemRefDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMXCAFDoc_AssemblyItemRefDriver self) -> BinMXCAFDoc_AssemblyItemRefDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_AssemblyItemRefDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_AssemblyItemRefDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMXCAFDoc.Handle_BinMXCAFDoc_AssemblyItemRefDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMXCAFDoc.new_Handle_BinMXCAFDoc_AssemblyItemRefDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMXCAFDoc.Handle_BinMXCAFDoc_AssemblyItemRefDriver_DownCast)
    __swig_destroy__ = _BinMXCAFDoc.delete_Handle_BinMXCAFDoc_AssemblyItemRefDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMXCAFDoc_AssemblyItemRefDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_AssemblyItemRefDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMXCAFDoc_AssemblyItemRefDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(Handle_BinMXCAFDoc_AssemblyItemRefDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_AssemblyItemRefDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMXCAFDoc_AssemblyItemRefDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_AssemblyItemRefDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_AssemblyItemRefDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_AssemblyItemRefDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_AssemblyItemRefDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_AssemblyItemRefDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMXCAFDoc_AssemblyItemRefDriver self)

        Memory deallocator for transient classes


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_AssemblyItemRefDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMXCAFDoc_AssemblyItemRefDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMXCAFDoc_AssemblyItemRefDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_AssemblyItemRefDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMXCAFDoc_AssemblyItemRefDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMXCAFDoc_AssemblyItemRefDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_AssemblyItemRefDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMXCAFDoc_AssemblyItemRefDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_AssemblyItemRefDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMXCAFDoc_AssemblyItemRefDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_AssemblyItemRefDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMXCAFDoc_AssemblyItemRefDriver self)

        Increments the reference counter of this object


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_AssemblyItemRefDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMXCAFDoc_AssemblyItemRefDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_AssemblyItemRefDriver_DecrementRefCounter(self, *args)

Handle_BinMXCAFDoc_AssemblyItemRefDriver_swigregister = _BinMXCAFDoc.Handle_BinMXCAFDoc_AssemblyItemRefDriver_swigregister
Handle_BinMXCAFDoc_AssemblyItemRefDriver_swigregister(Handle_BinMXCAFDoc_AssemblyItemRefDriver)

def Handle_BinMXCAFDoc_AssemblyItemRefDriver_DownCast(thing):
    return _BinMXCAFDoc.Handle_BinMXCAFDoc_AssemblyItemRefDriver_DownCast(thing)
Handle_BinMXCAFDoc_AssemblyItemRefDriver_DownCast = _BinMXCAFDoc.Handle_BinMXCAFDoc_AssemblyItemRefDriver_DownCast

class BinMXCAFDoc_LayerToolDriver(BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMXCAFDoc_LayerToolDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMXCAFDoc_LayerToolDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMXCAFDoc_LayerToolDriver self, Handle_Message_Messenger theMsgDriver) -> BinMXCAFDoc_LayerToolDriver

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMXCAFDoc.new_BinMXCAFDoc_LayerToolDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMXCAFDoc_LayerToolDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.BinMXCAFDoc_LayerToolDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMXCAFDoc_LayerToolDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(BinMXCAFDoc_LayerToolDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.BinMXCAFDoc_LayerToolDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.BinMXCAFDoc_LayerToolDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMXCAFDoc.BinMXCAFDoc_LayerToolDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.BinMXCAFDoc_LayerToolDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMXCAFDoc.delete_BinMXCAFDoc_LayerToolDriver
BinMXCAFDoc_LayerToolDriver_swigregister = _BinMXCAFDoc.BinMXCAFDoc_LayerToolDriver_swigregister
BinMXCAFDoc_LayerToolDriver_swigregister(BinMXCAFDoc_LayerToolDriver)

def BinMXCAFDoc_LayerToolDriver_get_type_name(*args):
    """
    BinMXCAFDoc_LayerToolDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMXCAFDoc.BinMXCAFDoc_LayerToolDriver_get_type_name(*args)

def BinMXCAFDoc_LayerToolDriver_get_type_descriptor(*args):
    """
    BinMXCAFDoc_LayerToolDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMXCAFDoc.BinMXCAFDoc_LayerToolDriver_get_type_descriptor(*args)

class Handle_BinMXCAFDoc_GraphNodeDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMXCAFDoc_GraphNodeDriver self)

        Nullify the handle


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_GraphNodeDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMXCAFDoc_GraphNodeDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_GraphNodeDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMXCAFDoc_GraphNodeDriver self, BinMXCAFDoc_GraphNodeDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_GraphNodeDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMXCAFDoc_GraphNodeDriver self, Handle_BinMXCAFDoc_GraphNodeDriver theHandle) -> Handle_BinMXCAFDoc_GraphNodeDriver
        assign(Handle_BinMXCAFDoc_GraphNodeDriver self, BinMXCAFDoc_GraphNodeDriver thePtr) -> Handle_BinMXCAFDoc_GraphNodeDriver
        assign(Handle_BinMXCAFDoc_GraphNodeDriver self, Handle_BinMXCAFDoc_GraphNodeDriver theHandle) -> Handle_BinMXCAFDoc_GraphNodeDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_GraphNodeDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMXCAFDoc_GraphNodeDriver self) -> BinMXCAFDoc_GraphNodeDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_GraphNodeDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMXCAFDoc_GraphNodeDriver self) -> BinMXCAFDoc_GraphNodeDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_GraphNodeDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMXCAFDoc_GraphNodeDriver self) -> BinMXCAFDoc_GraphNodeDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_GraphNodeDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_GraphNodeDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMXCAFDoc.Handle_BinMXCAFDoc_GraphNodeDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMXCAFDoc.new_Handle_BinMXCAFDoc_GraphNodeDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMXCAFDoc.Handle_BinMXCAFDoc_GraphNodeDriver_DownCast)
    __swig_destroy__ = _BinMXCAFDoc.delete_Handle_BinMXCAFDoc_GraphNodeDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMXCAFDoc_GraphNodeDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_GraphNodeDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMXCAFDoc_GraphNodeDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(Handle_BinMXCAFDoc_GraphNodeDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_GraphNodeDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMXCAFDoc_GraphNodeDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_GraphNodeDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_GraphNodeDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_GraphNodeDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_GraphNodeDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_GraphNodeDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMXCAFDoc_GraphNodeDriver self)

        Memory deallocator for transient classes


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_GraphNodeDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMXCAFDoc_GraphNodeDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMXCAFDoc_GraphNodeDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_GraphNodeDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMXCAFDoc_GraphNodeDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMXCAFDoc_GraphNodeDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_GraphNodeDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMXCAFDoc_GraphNodeDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_GraphNodeDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMXCAFDoc_GraphNodeDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_GraphNodeDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMXCAFDoc_GraphNodeDriver self)

        Increments the reference counter of this object


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_GraphNodeDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMXCAFDoc_GraphNodeDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_GraphNodeDriver_DecrementRefCounter(self, *args)

Handle_BinMXCAFDoc_GraphNodeDriver_swigregister = _BinMXCAFDoc.Handle_BinMXCAFDoc_GraphNodeDriver_swigregister
Handle_BinMXCAFDoc_GraphNodeDriver_swigregister(Handle_BinMXCAFDoc_GraphNodeDriver)

def Handle_BinMXCAFDoc_GraphNodeDriver_DownCast(thing):
    return _BinMXCAFDoc.Handle_BinMXCAFDoc_GraphNodeDriver_DownCast(thing)
Handle_BinMXCAFDoc_GraphNodeDriver_DownCast = _BinMXCAFDoc.Handle_BinMXCAFDoc_GraphNodeDriver_DownCast

class Handle_BinMXCAFDoc_NoteBalloonDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMXCAFDoc_NoteBalloonDriver self)

        Nullify the handle


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBalloonDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMXCAFDoc_NoteBalloonDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBalloonDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMXCAFDoc_NoteBalloonDriver self, BinMXCAFDoc_NoteBalloonDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBalloonDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMXCAFDoc_NoteBalloonDriver self, Handle_BinMXCAFDoc_NoteBalloonDriver theHandle) -> Handle_BinMXCAFDoc_NoteBalloonDriver
        assign(Handle_BinMXCAFDoc_NoteBalloonDriver self, BinMXCAFDoc_NoteBalloonDriver thePtr) -> Handle_BinMXCAFDoc_NoteBalloonDriver
        assign(Handle_BinMXCAFDoc_NoteBalloonDriver self, Handle_BinMXCAFDoc_NoteBalloonDriver theHandle) -> Handle_BinMXCAFDoc_NoteBalloonDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBalloonDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMXCAFDoc_NoteBalloonDriver self) -> BinMXCAFDoc_NoteBalloonDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBalloonDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMXCAFDoc_NoteBalloonDriver self) -> BinMXCAFDoc_NoteBalloonDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBalloonDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMXCAFDoc_NoteBalloonDriver self) -> BinMXCAFDoc_NoteBalloonDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBalloonDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBalloonDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBalloonDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMXCAFDoc.new_Handle_BinMXCAFDoc_NoteBalloonDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBalloonDriver_DownCast)
    __swig_destroy__ = _BinMXCAFDoc.delete_Handle_BinMXCAFDoc_NoteBalloonDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMXCAFDoc_NoteBalloonDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBalloonDriver_NewEmpty(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMXCAFDoc_NoteBalloonDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBalloonDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBalloonDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBalloonDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Paste(self, *args):
        """
        Paste(Handle_BinMXCAFDoc_NoteBalloonDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(Handle_BinMXCAFDoc_NoteBalloonDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBalloonDriver_Paste(self, *args)


    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBalloonDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBalloonDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMXCAFDoc_NoteBalloonDriver self)

        Memory deallocator for transient classes


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBalloonDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMXCAFDoc_NoteBalloonDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMXCAFDoc_NoteBalloonDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBalloonDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMXCAFDoc_NoteBalloonDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMXCAFDoc_NoteBalloonDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBalloonDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMXCAFDoc_NoteBalloonDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBalloonDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMXCAFDoc_NoteBalloonDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBalloonDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMXCAFDoc_NoteBalloonDriver self)

        Increments the reference counter of this object


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBalloonDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMXCAFDoc_NoteBalloonDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBalloonDriver_DecrementRefCounter(self, *args)

Handle_BinMXCAFDoc_NoteBalloonDriver_swigregister = _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBalloonDriver_swigregister
Handle_BinMXCAFDoc_NoteBalloonDriver_swigregister(Handle_BinMXCAFDoc_NoteBalloonDriver)

def Handle_BinMXCAFDoc_NoteBalloonDriver_DownCast(thing):
    return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBalloonDriver_DownCast(thing)
Handle_BinMXCAFDoc_NoteBalloonDriver_DownCast = _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteBalloonDriver_DownCast

class Handle_BinMXCAFDoc_ShapeToolDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMXCAFDoc_ShapeToolDriver self)

        Nullify the handle


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ShapeToolDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMXCAFDoc_ShapeToolDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ShapeToolDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMXCAFDoc_ShapeToolDriver self, BinMXCAFDoc_ShapeToolDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ShapeToolDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMXCAFDoc_ShapeToolDriver self, Handle_BinMXCAFDoc_ShapeToolDriver theHandle) -> Handle_BinMXCAFDoc_ShapeToolDriver
        assign(Handle_BinMXCAFDoc_ShapeToolDriver self, BinMXCAFDoc_ShapeToolDriver thePtr) -> Handle_BinMXCAFDoc_ShapeToolDriver
        assign(Handle_BinMXCAFDoc_ShapeToolDriver self, Handle_BinMXCAFDoc_ShapeToolDriver theHandle) -> Handle_BinMXCAFDoc_ShapeToolDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ShapeToolDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMXCAFDoc_ShapeToolDriver self) -> BinMXCAFDoc_ShapeToolDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ShapeToolDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMXCAFDoc_ShapeToolDriver self) -> BinMXCAFDoc_ShapeToolDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ShapeToolDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMXCAFDoc_ShapeToolDriver self) -> BinMXCAFDoc_ShapeToolDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ShapeToolDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ShapeToolDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMXCAFDoc.Handle_BinMXCAFDoc_ShapeToolDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMXCAFDoc.new_Handle_BinMXCAFDoc_ShapeToolDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMXCAFDoc.Handle_BinMXCAFDoc_ShapeToolDriver_DownCast)
    __swig_destroy__ = _BinMXCAFDoc.delete_Handle_BinMXCAFDoc_ShapeToolDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMXCAFDoc_ShapeToolDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ShapeToolDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMXCAFDoc_ShapeToolDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(Handle_BinMXCAFDoc_ShapeToolDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ShapeToolDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMXCAFDoc_ShapeToolDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ShapeToolDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_ShapeToolDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_ShapeToolDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_ShapeToolDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_ShapeToolDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMXCAFDoc_ShapeToolDriver self)

        Memory deallocator for transient classes


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ShapeToolDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMXCAFDoc_ShapeToolDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMXCAFDoc_ShapeToolDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ShapeToolDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMXCAFDoc_ShapeToolDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMXCAFDoc_ShapeToolDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ShapeToolDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMXCAFDoc_ShapeToolDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ShapeToolDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMXCAFDoc_ShapeToolDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ShapeToolDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMXCAFDoc_ShapeToolDriver self)

        Increments the reference counter of this object


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ShapeToolDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMXCAFDoc_ShapeToolDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ShapeToolDriver_DecrementRefCounter(self, *args)

Handle_BinMXCAFDoc_ShapeToolDriver_swigregister = _BinMXCAFDoc.Handle_BinMXCAFDoc_ShapeToolDriver_swigregister
Handle_BinMXCAFDoc_ShapeToolDriver_swigregister(Handle_BinMXCAFDoc_ShapeToolDriver)

def Handle_BinMXCAFDoc_ShapeToolDriver_DownCast(thing):
    return _BinMXCAFDoc.Handle_BinMXCAFDoc_ShapeToolDriver_DownCast(thing)
Handle_BinMXCAFDoc_ShapeToolDriver_DownCast = _BinMXCAFDoc.Handle_BinMXCAFDoc_ShapeToolDriver_DownCast

class BinMXCAFDoc_VolumeDriver(BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMXCAFDoc_VolumeDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMXCAFDoc_VolumeDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMXCAFDoc_VolumeDriver self, Handle_Message_Messenger theMsgDriver) -> BinMXCAFDoc_VolumeDriver

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMXCAFDoc.new_BinMXCAFDoc_VolumeDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMXCAFDoc_VolumeDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.BinMXCAFDoc_VolumeDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMXCAFDoc_VolumeDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(BinMXCAFDoc_VolumeDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.BinMXCAFDoc_VolumeDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.BinMXCAFDoc_VolumeDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMXCAFDoc.BinMXCAFDoc_VolumeDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.BinMXCAFDoc_VolumeDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMXCAFDoc.delete_BinMXCAFDoc_VolumeDriver
BinMXCAFDoc_VolumeDriver_swigregister = _BinMXCAFDoc.BinMXCAFDoc_VolumeDriver_swigregister
BinMXCAFDoc_VolumeDriver_swigregister(BinMXCAFDoc_VolumeDriver)

def BinMXCAFDoc_VolumeDriver_get_type_name(*args):
    """
    BinMXCAFDoc_VolumeDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMXCAFDoc.BinMXCAFDoc_VolumeDriver_get_type_name(*args)

def BinMXCAFDoc_VolumeDriver_get_type_descriptor(*args):
    """
    BinMXCAFDoc_VolumeDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMXCAFDoc.BinMXCAFDoc_VolumeDriver_get_type_descriptor(*args)

class BinMXCAFDoc_ViewDriver(BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMXCAFDoc_ViewDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMXCAFDoc_ViewDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMXCAFDoc_ViewDriver self, Handle_Message_Messenger theMsgDriver) -> BinMXCAFDoc_ViewDriver

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMXCAFDoc.new_BinMXCAFDoc_ViewDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMXCAFDoc_ViewDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.BinMXCAFDoc_ViewDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMXCAFDoc_ViewDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(BinMXCAFDoc_ViewDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.BinMXCAFDoc_ViewDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.BinMXCAFDoc_ViewDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMXCAFDoc.BinMXCAFDoc_ViewDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.BinMXCAFDoc_ViewDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMXCAFDoc.delete_BinMXCAFDoc_ViewDriver
BinMXCAFDoc_ViewDriver_swigregister = _BinMXCAFDoc.BinMXCAFDoc_ViewDriver_swigregister
BinMXCAFDoc_ViewDriver_swigregister(BinMXCAFDoc_ViewDriver)

def BinMXCAFDoc_ViewDriver_get_type_name(*args):
    """
    BinMXCAFDoc_ViewDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMXCAFDoc.BinMXCAFDoc_ViewDriver_get_type_name(*args)

def BinMXCAFDoc_ViewDriver_get_type_descriptor(*args):
    """
    BinMXCAFDoc_ViewDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMXCAFDoc.BinMXCAFDoc_ViewDriver_get_type_descriptor(*args)

class BinMXCAFDoc_ClippingPlaneToolDriver(BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMXCAFDoc_ClippingPlaneToolDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMXCAFDoc_ClippingPlaneToolDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMXCAFDoc_ClippingPlaneToolDriver self, Handle_Message_Messenger theMsgDriver) -> BinMXCAFDoc_ClippingPlaneToolDriver

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMXCAFDoc.new_BinMXCAFDoc_ClippingPlaneToolDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMXCAFDoc_ClippingPlaneToolDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.BinMXCAFDoc_ClippingPlaneToolDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMXCAFDoc_ClippingPlaneToolDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(BinMXCAFDoc_ClippingPlaneToolDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.BinMXCAFDoc_ClippingPlaneToolDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.BinMXCAFDoc_ClippingPlaneToolDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMXCAFDoc.BinMXCAFDoc_ClippingPlaneToolDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.BinMXCAFDoc_ClippingPlaneToolDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMXCAFDoc.delete_BinMXCAFDoc_ClippingPlaneToolDriver
BinMXCAFDoc_ClippingPlaneToolDriver_swigregister = _BinMXCAFDoc.BinMXCAFDoc_ClippingPlaneToolDriver_swigregister
BinMXCAFDoc_ClippingPlaneToolDriver_swigregister(BinMXCAFDoc_ClippingPlaneToolDriver)

def BinMXCAFDoc_ClippingPlaneToolDriver_get_type_name(*args):
    """
    BinMXCAFDoc_ClippingPlaneToolDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMXCAFDoc.BinMXCAFDoc_ClippingPlaneToolDriver_get_type_name(*args)

def BinMXCAFDoc_ClippingPlaneToolDriver_get_type_descriptor(*args):
    """
    BinMXCAFDoc_ClippingPlaneToolDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMXCAFDoc.BinMXCAFDoc_ClippingPlaneToolDriver_get_type_descriptor(*args)

class BinMXCAFDoc_AreaDriver(BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMXCAFDoc_AreaDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMXCAFDoc_AreaDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMXCAFDoc_AreaDriver self, Handle_Message_Messenger theMsgDriver) -> BinMXCAFDoc_AreaDriver

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMXCAFDoc.new_BinMXCAFDoc_AreaDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMXCAFDoc_AreaDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.BinMXCAFDoc_AreaDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMXCAFDoc_AreaDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(BinMXCAFDoc_AreaDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.BinMXCAFDoc_AreaDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.BinMXCAFDoc_AreaDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMXCAFDoc.BinMXCAFDoc_AreaDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.BinMXCAFDoc_AreaDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMXCAFDoc.delete_BinMXCAFDoc_AreaDriver
BinMXCAFDoc_AreaDriver_swigregister = _BinMXCAFDoc.BinMXCAFDoc_AreaDriver_swigregister
BinMXCAFDoc_AreaDriver_swigregister(BinMXCAFDoc_AreaDriver)

def BinMXCAFDoc_AreaDriver_get_type_name(*args):
    """
    BinMXCAFDoc_AreaDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMXCAFDoc.BinMXCAFDoc_AreaDriver_get_type_name(*args)

def BinMXCAFDoc_AreaDriver_get_type_descriptor(*args):
    """
    BinMXCAFDoc_AreaDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMXCAFDoc.BinMXCAFDoc_AreaDriver_get_type_descriptor(*args)

class Handle_BinMXCAFDoc_VolumeDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMXCAFDoc_VolumeDriver self)

        Nullify the handle


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_VolumeDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMXCAFDoc_VolumeDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_VolumeDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMXCAFDoc_VolumeDriver self, BinMXCAFDoc_VolumeDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_VolumeDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMXCAFDoc_VolumeDriver self, Handle_BinMXCAFDoc_VolumeDriver theHandle) -> Handle_BinMXCAFDoc_VolumeDriver
        assign(Handle_BinMXCAFDoc_VolumeDriver self, BinMXCAFDoc_VolumeDriver thePtr) -> Handle_BinMXCAFDoc_VolumeDriver
        assign(Handle_BinMXCAFDoc_VolumeDriver self, Handle_BinMXCAFDoc_VolumeDriver theHandle) -> Handle_BinMXCAFDoc_VolumeDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_VolumeDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMXCAFDoc_VolumeDriver self) -> BinMXCAFDoc_VolumeDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_VolumeDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMXCAFDoc_VolumeDriver self) -> BinMXCAFDoc_VolumeDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_VolumeDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMXCAFDoc_VolumeDriver self) -> BinMXCAFDoc_VolumeDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_VolumeDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_VolumeDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMXCAFDoc.Handle_BinMXCAFDoc_VolumeDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMXCAFDoc.new_Handle_BinMXCAFDoc_VolumeDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMXCAFDoc.Handle_BinMXCAFDoc_VolumeDriver_DownCast)
    __swig_destroy__ = _BinMXCAFDoc.delete_Handle_BinMXCAFDoc_VolumeDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMXCAFDoc_VolumeDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_VolumeDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMXCAFDoc_VolumeDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(Handle_BinMXCAFDoc_VolumeDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_VolumeDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMXCAFDoc_VolumeDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_VolumeDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_VolumeDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_VolumeDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_VolumeDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_VolumeDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMXCAFDoc_VolumeDriver self)

        Memory deallocator for transient classes


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_VolumeDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMXCAFDoc_VolumeDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMXCAFDoc_VolumeDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_VolumeDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMXCAFDoc_VolumeDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMXCAFDoc_VolumeDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_VolumeDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMXCAFDoc_VolumeDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_VolumeDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMXCAFDoc_VolumeDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_VolumeDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMXCAFDoc_VolumeDriver self)

        Increments the reference counter of this object


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_VolumeDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMXCAFDoc_VolumeDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_VolumeDriver_DecrementRefCounter(self, *args)

Handle_BinMXCAFDoc_VolumeDriver_swigregister = _BinMXCAFDoc.Handle_BinMXCAFDoc_VolumeDriver_swigregister
Handle_BinMXCAFDoc_VolumeDriver_swigregister(Handle_BinMXCAFDoc_VolumeDriver)

def Handle_BinMXCAFDoc_VolumeDriver_DownCast(thing):
    return _BinMXCAFDoc.Handle_BinMXCAFDoc_VolumeDriver_DownCast(thing)
Handle_BinMXCAFDoc_VolumeDriver_DownCast = _BinMXCAFDoc.Handle_BinMXCAFDoc_VolumeDriver_DownCast

class Handle_BinMXCAFDoc_GeomToleranceDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMXCAFDoc_GeomToleranceDriver self)

        Nullify the handle


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_GeomToleranceDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMXCAFDoc_GeomToleranceDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_GeomToleranceDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMXCAFDoc_GeomToleranceDriver self, BinMXCAFDoc_GeomToleranceDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_GeomToleranceDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMXCAFDoc_GeomToleranceDriver self, Handle_BinMXCAFDoc_GeomToleranceDriver theHandle) -> Handle_BinMXCAFDoc_GeomToleranceDriver
        assign(Handle_BinMXCAFDoc_GeomToleranceDriver self, BinMXCAFDoc_GeomToleranceDriver thePtr) -> Handle_BinMXCAFDoc_GeomToleranceDriver
        assign(Handle_BinMXCAFDoc_GeomToleranceDriver self, Handle_BinMXCAFDoc_GeomToleranceDriver theHandle) -> Handle_BinMXCAFDoc_GeomToleranceDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_GeomToleranceDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMXCAFDoc_GeomToleranceDriver self) -> BinMXCAFDoc_GeomToleranceDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_GeomToleranceDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMXCAFDoc_GeomToleranceDriver self) -> BinMXCAFDoc_GeomToleranceDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_GeomToleranceDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMXCAFDoc_GeomToleranceDriver self) -> BinMXCAFDoc_GeomToleranceDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_GeomToleranceDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_GeomToleranceDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMXCAFDoc.Handle_BinMXCAFDoc_GeomToleranceDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMXCAFDoc.new_Handle_BinMXCAFDoc_GeomToleranceDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMXCAFDoc.Handle_BinMXCAFDoc_GeomToleranceDriver_DownCast)
    __swig_destroy__ = _BinMXCAFDoc.delete_Handle_BinMXCAFDoc_GeomToleranceDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMXCAFDoc_GeomToleranceDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_GeomToleranceDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMXCAFDoc_GeomToleranceDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(Handle_BinMXCAFDoc_GeomToleranceDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_GeomToleranceDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMXCAFDoc_GeomToleranceDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_GeomToleranceDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_GeomToleranceDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_GeomToleranceDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_GeomToleranceDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_GeomToleranceDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMXCAFDoc_GeomToleranceDriver self)

        Memory deallocator for transient classes


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_GeomToleranceDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMXCAFDoc_GeomToleranceDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMXCAFDoc_GeomToleranceDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_GeomToleranceDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMXCAFDoc_GeomToleranceDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMXCAFDoc_GeomToleranceDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_GeomToleranceDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMXCAFDoc_GeomToleranceDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_GeomToleranceDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMXCAFDoc_GeomToleranceDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_GeomToleranceDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMXCAFDoc_GeomToleranceDriver self)

        Increments the reference counter of this object


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_GeomToleranceDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMXCAFDoc_GeomToleranceDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_GeomToleranceDriver_DecrementRefCounter(self, *args)

Handle_BinMXCAFDoc_GeomToleranceDriver_swigregister = _BinMXCAFDoc.Handle_BinMXCAFDoc_GeomToleranceDriver_swigregister
Handle_BinMXCAFDoc_GeomToleranceDriver_swigregister(Handle_BinMXCAFDoc_GeomToleranceDriver)

def Handle_BinMXCAFDoc_GeomToleranceDriver_DownCast(thing):
    return _BinMXCAFDoc.Handle_BinMXCAFDoc_GeomToleranceDriver_DownCast(thing)
Handle_BinMXCAFDoc_GeomToleranceDriver_DownCast = _BinMXCAFDoc.Handle_BinMXCAFDoc_GeomToleranceDriver_DownCast

class BinMXCAFDoc_ViewToolDriver(BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMXCAFDoc_ViewToolDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMXCAFDoc_ViewToolDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMXCAFDoc_ViewToolDriver self, Handle_Message_Messenger theMsgDriver) -> BinMXCAFDoc_ViewToolDriver

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMXCAFDoc.new_BinMXCAFDoc_ViewToolDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMXCAFDoc_ViewToolDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.BinMXCAFDoc_ViewToolDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMXCAFDoc_ViewToolDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(BinMXCAFDoc_ViewToolDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.BinMXCAFDoc_ViewToolDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.BinMXCAFDoc_ViewToolDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMXCAFDoc.BinMXCAFDoc_ViewToolDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.BinMXCAFDoc_ViewToolDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMXCAFDoc.delete_BinMXCAFDoc_ViewToolDriver
BinMXCAFDoc_ViewToolDriver_swigregister = _BinMXCAFDoc.BinMXCAFDoc_ViewToolDriver_swigregister
BinMXCAFDoc_ViewToolDriver_swigregister(BinMXCAFDoc_ViewToolDriver)

def BinMXCAFDoc_ViewToolDriver_get_type_name(*args):
    """
    BinMXCAFDoc_ViewToolDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMXCAFDoc.BinMXCAFDoc_ViewToolDriver_get_type_name(*args)

def BinMXCAFDoc_ViewToolDriver_get_type_descriptor(*args):
    """
    BinMXCAFDoc_ViewToolDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMXCAFDoc.BinMXCAFDoc_ViewToolDriver_get_type_descriptor(*args)

class BinMXCAFDoc_MaterialDriver(BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMXCAFDoc_MaterialDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMXCAFDoc_MaterialDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMXCAFDoc_MaterialDriver self, Handle_Message_Messenger theMsgDriver) -> BinMXCAFDoc_MaterialDriver

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMXCAFDoc.new_BinMXCAFDoc_MaterialDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMXCAFDoc_MaterialDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.BinMXCAFDoc_MaterialDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMXCAFDoc_MaterialDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(BinMXCAFDoc_MaterialDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.BinMXCAFDoc_MaterialDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.BinMXCAFDoc_MaterialDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMXCAFDoc.BinMXCAFDoc_MaterialDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.BinMXCAFDoc_MaterialDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMXCAFDoc.delete_BinMXCAFDoc_MaterialDriver
BinMXCAFDoc_MaterialDriver_swigregister = _BinMXCAFDoc.BinMXCAFDoc_MaterialDriver_swigregister
BinMXCAFDoc_MaterialDriver_swigregister(BinMXCAFDoc_MaterialDriver)

def BinMXCAFDoc_MaterialDriver_get_type_name(*args):
    """
    BinMXCAFDoc_MaterialDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMXCAFDoc.BinMXCAFDoc_MaterialDriver_get_type_name(*args)

def BinMXCAFDoc_MaterialDriver_get_type_descriptor(*args):
    """
    BinMXCAFDoc_MaterialDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMXCAFDoc.BinMXCAFDoc_MaterialDriver_get_type_descriptor(*args)

class Handle_BinMXCAFDoc_LayerToolDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMXCAFDoc_LayerToolDriver self)

        Nullify the handle


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_LayerToolDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMXCAFDoc_LayerToolDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_LayerToolDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMXCAFDoc_LayerToolDriver self, BinMXCAFDoc_LayerToolDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_LayerToolDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMXCAFDoc_LayerToolDriver self, Handle_BinMXCAFDoc_LayerToolDriver theHandle) -> Handle_BinMXCAFDoc_LayerToolDriver
        assign(Handle_BinMXCAFDoc_LayerToolDriver self, BinMXCAFDoc_LayerToolDriver thePtr) -> Handle_BinMXCAFDoc_LayerToolDriver
        assign(Handle_BinMXCAFDoc_LayerToolDriver self, Handle_BinMXCAFDoc_LayerToolDriver theHandle) -> Handle_BinMXCAFDoc_LayerToolDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_LayerToolDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMXCAFDoc_LayerToolDriver self) -> BinMXCAFDoc_LayerToolDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_LayerToolDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMXCAFDoc_LayerToolDriver self) -> BinMXCAFDoc_LayerToolDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_LayerToolDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMXCAFDoc_LayerToolDriver self) -> BinMXCAFDoc_LayerToolDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_LayerToolDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_LayerToolDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMXCAFDoc.Handle_BinMXCAFDoc_LayerToolDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMXCAFDoc.new_Handle_BinMXCAFDoc_LayerToolDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMXCAFDoc.Handle_BinMXCAFDoc_LayerToolDriver_DownCast)
    __swig_destroy__ = _BinMXCAFDoc.delete_Handle_BinMXCAFDoc_LayerToolDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMXCAFDoc_LayerToolDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_LayerToolDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMXCAFDoc_LayerToolDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(Handle_BinMXCAFDoc_LayerToolDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_LayerToolDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMXCAFDoc_LayerToolDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_LayerToolDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_LayerToolDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_LayerToolDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_LayerToolDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_LayerToolDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMXCAFDoc_LayerToolDriver self)

        Memory deallocator for transient classes


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_LayerToolDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMXCAFDoc_LayerToolDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMXCAFDoc_LayerToolDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_LayerToolDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMXCAFDoc_LayerToolDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMXCAFDoc_LayerToolDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_LayerToolDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMXCAFDoc_LayerToolDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_LayerToolDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMXCAFDoc_LayerToolDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_LayerToolDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMXCAFDoc_LayerToolDriver self)

        Increments the reference counter of this object


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_LayerToolDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMXCAFDoc_LayerToolDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_LayerToolDriver_DecrementRefCounter(self, *args)

Handle_BinMXCAFDoc_LayerToolDriver_swigregister = _BinMXCAFDoc.Handle_BinMXCAFDoc_LayerToolDriver_swigregister
Handle_BinMXCAFDoc_LayerToolDriver_swigregister(Handle_BinMXCAFDoc_LayerToolDriver)

def Handle_BinMXCAFDoc_LayerToolDriver_DownCast(thing):
    return _BinMXCAFDoc.Handle_BinMXCAFDoc_LayerToolDriver_DownCast(thing)
Handle_BinMXCAFDoc_LayerToolDriver_DownCast = _BinMXCAFDoc.Handle_BinMXCAFDoc_LayerToolDriver_DownCast

class Handle_BinMXCAFDoc_AreaDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMXCAFDoc_AreaDriver self)

        Nullify the handle


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_AreaDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMXCAFDoc_AreaDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_AreaDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMXCAFDoc_AreaDriver self, BinMXCAFDoc_AreaDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_AreaDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMXCAFDoc_AreaDriver self, Handle_BinMXCAFDoc_AreaDriver theHandle) -> Handle_BinMXCAFDoc_AreaDriver
        assign(Handle_BinMXCAFDoc_AreaDriver self, BinMXCAFDoc_AreaDriver thePtr) -> Handle_BinMXCAFDoc_AreaDriver
        assign(Handle_BinMXCAFDoc_AreaDriver self, Handle_BinMXCAFDoc_AreaDriver theHandle) -> Handle_BinMXCAFDoc_AreaDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_AreaDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMXCAFDoc_AreaDriver self) -> BinMXCAFDoc_AreaDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_AreaDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMXCAFDoc_AreaDriver self) -> BinMXCAFDoc_AreaDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_AreaDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMXCAFDoc_AreaDriver self) -> BinMXCAFDoc_AreaDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_AreaDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_AreaDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMXCAFDoc.Handle_BinMXCAFDoc_AreaDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMXCAFDoc.new_Handle_BinMXCAFDoc_AreaDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMXCAFDoc.Handle_BinMXCAFDoc_AreaDriver_DownCast)
    __swig_destroy__ = _BinMXCAFDoc.delete_Handle_BinMXCAFDoc_AreaDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMXCAFDoc_AreaDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_AreaDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMXCAFDoc_AreaDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(Handle_BinMXCAFDoc_AreaDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_AreaDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMXCAFDoc_AreaDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_AreaDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_AreaDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_AreaDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_AreaDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_AreaDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMXCAFDoc_AreaDriver self)

        Memory deallocator for transient classes


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_AreaDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMXCAFDoc_AreaDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMXCAFDoc_AreaDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_AreaDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMXCAFDoc_AreaDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMXCAFDoc_AreaDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_AreaDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMXCAFDoc_AreaDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_AreaDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMXCAFDoc_AreaDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_AreaDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMXCAFDoc_AreaDriver self)

        Increments the reference counter of this object


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_AreaDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMXCAFDoc_AreaDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_AreaDriver_DecrementRefCounter(self, *args)

Handle_BinMXCAFDoc_AreaDriver_swigregister = _BinMXCAFDoc.Handle_BinMXCAFDoc_AreaDriver_swigregister
Handle_BinMXCAFDoc_AreaDriver_swigregister(Handle_BinMXCAFDoc_AreaDriver)

def Handle_BinMXCAFDoc_AreaDriver_DownCast(thing):
    return _BinMXCAFDoc.Handle_BinMXCAFDoc_AreaDriver_DownCast(thing)
Handle_BinMXCAFDoc_AreaDriver_DownCast = _BinMXCAFDoc.Handle_BinMXCAFDoc_AreaDriver_DownCast

class Handle_BinMXCAFDoc_ViewToolDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMXCAFDoc_ViewToolDriver self)

        Nullify the handle


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewToolDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMXCAFDoc_ViewToolDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewToolDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMXCAFDoc_ViewToolDriver self, BinMXCAFDoc_ViewToolDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewToolDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMXCAFDoc_ViewToolDriver self, Handle_BinMXCAFDoc_ViewToolDriver theHandle) -> Handle_BinMXCAFDoc_ViewToolDriver
        assign(Handle_BinMXCAFDoc_ViewToolDriver self, BinMXCAFDoc_ViewToolDriver thePtr) -> Handle_BinMXCAFDoc_ViewToolDriver
        assign(Handle_BinMXCAFDoc_ViewToolDriver self, Handle_BinMXCAFDoc_ViewToolDriver theHandle) -> Handle_BinMXCAFDoc_ViewToolDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewToolDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMXCAFDoc_ViewToolDriver self) -> BinMXCAFDoc_ViewToolDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewToolDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMXCAFDoc_ViewToolDriver self) -> BinMXCAFDoc_ViewToolDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewToolDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMXCAFDoc_ViewToolDriver self) -> BinMXCAFDoc_ViewToolDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewToolDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewToolDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewToolDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMXCAFDoc.new_Handle_BinMXCAFDoc_ViewToolDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMXCAFDoc.Handle_BinMXCAFDoc_ViewToolDriver_DownCast)
    __swig_destroy__ = _BinMXCAFDoc.delete_Handle_BinMXCAFDoc_ViewToolDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMXCAFDoc_ViewToolDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewToolDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMXCAFDoc_ViewToolDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(Handle_BinMXCAFDoc_ViewToolDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewToolDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMXCAFDoc_ViewToolDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewToolDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewToolDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewToolDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewToolDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewToolDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMXCAFDoc_ViewToolDriver self)

        Memory deallocator for transient classes


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewToolDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMXCAFDoc_ViewToolDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMXCAFDoc_ViewToolDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewToolDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMXCAFDoc_ViewToolDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMXCAFDoc_ViewToolDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewToolDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMXCAFDoc_ViewToolDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewToolDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMXCAFDoc_ViewToolDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewToolDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMXCAFDoc_ViewToolDriver self)

        Increments the reference counter of this object


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewToolDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMXCAFDoc_ViewToolDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewToolDriver_DecrementRefCounter(self, *args)

Handle_BinMXCAFDoc_ViewToolDriver_swigregister = _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewToolDriver_swigregister
Handle_BinMXCAFDoc_ViewToolDriver_swigregister(Handle_BinMXCAFDoc_ViewToolDriver)

def Handle_BinMXCAFDoc_ViewToolDriver_DownCast(thing):
    return _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewToolDriver_DownCast(thing)
Handle_BinMXCAFDoc_ViewToolDriver_DownCast = _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewToolDriver_DownCast

class Handle_BinMXCAFDoc_MaterialDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMXCAFDoc_MaterialDriver self)

        Nullify the handle


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMXCAFDoc_MaterialDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMXCAFDoc_MaterialDriver self, BinMXCAFDoc_MaterialDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMXCAFDoc_MaterialDriver self, Handle_BinMXCAFDoc_MaterialDriver theHandle) -> Handle_BinMXCAFDoc_MaterialDriver
        assign(Handle_BinMXCAFDoc_MaterialDriver self, BinMXCAFDoc_MaterialDriver thePtr) -> Handle_BinMXCAFDoc_MaterialDriver
        assign(Handle_BinMXCAFDoc_MaterialDriver self, Handle_BinMXCAFDoc_MaterialDriver theHandle) -> Handle_BinMXCAFDoc_MaterialDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMXCAFDoc_MaterialDriver self) -> BinMXCAFDoc_MaterialDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMXCAFDoc_MaterialDriver self) -> BinMXCAFDoc_MaterialDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMXCAFDoc_MaterialDriver self) -> BinMXCAFDoc_MaterialDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMXCAFDoc.new_Handle_BinMXCAFDoc_MaterialDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialDriver_DownCast)
    __swig_destroy__ = _BinMXCAFDoc.delete_Handle_BinMXCAFDoc_MaterialDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMXCAFDoc_MaterialDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMXCAFDoc_MaterialDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(Handle_BinMXCAFDoc_MaterialDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMXCAFDoc_MaterialDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMXCAFDoc_MaterialDriver self)

        Memory deallocator for transient classes


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMXCAFDoc_MaterialDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMXCAFDoc_MaterialDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMXCAFDoc_MaterialDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMXCAFDoc_MaterialDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMXCAFDoc_MaterialDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMXCAFDoc_MaterialDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMXCAFDoc_MaterialDriver self)

        Increments the reference counter of this object


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMXCAFDoc_MaterialDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialDriver_DecrementRefCounter(self, *args)

Handle_BinMXCAFDoc_MaterialDriver_swigregister = _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialDriver_swigregister
Handle_BinMXCAFDoc_MaterialDriver_swigregister(Handle_BinMXCAFDoc_MaterialDriver)

def Handle_BinMXCAFDoc_MaterialDriver_DownCast(thing):
    return _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialDriver_DownCast(thing)
Handle_BinMXCAFDoc_MaterialDriver_DownCast = _BinMXCAFDoc.Handle_BinMXCAFDoc_MaterialDriver_DownCast

class Handle_BinMXCAFDoc_ViewDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMXCAFDoc_ViewDriver self)

        Nullify the handle


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMXCAFDoc_ViewDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMXCAFDoc_ViewDriver self, BinMXCAFDoc_ViewDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMXCAFDoc_ViewDriver self, Handle_BinMXCAFDoc_ViewDriver theHandle) -> Handle_BinMXCAFDoc_ViewDriver
        assign(Handle_BinMXCAFDoc_ViewDriver self, BinMXCAFDoc_ViewDriver thePtr) -> Handle_BinMXCAFDoc_ViewDriver
        assign(Handle_BinMXCAFDoc_ViewDriver self, Handle_BinMXCAFDoc_ViewDriver theHandle) -> Handle_BinMXCAFDoc_ViewDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMXCAFDoc_ViewDriver self) -> BinMXCAFDoc_ViewDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMXCAFDoc_ViewDriver self) -> BinMXCAFDoc_ViewDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMXCAFDoc_ViewDriver self) -> BinMXCAFDoc_ViewDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMXCAFDoc.new_Handle_BinMXCAFDoc_ViewDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMXCAFDoc.Handle_BinMXCAFDoc_ViewDriver_DownCast)
    __swig_destroy__ = _BinMXCAFDoc.delete_Handle_BinMXCAFDoc_ViewDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMXCAFDoc_ViewDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMXCAFDoc_ViewDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(Handle_BinMXCAFDoc_ViewDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMXCAFDoc_ViewDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMXCAFDoc_ViewDriver self)

        Memory deallocator for transient classes


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMXCAFDoc_ViewDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMXCAFDoc_ViewDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMXCAFDoc_ViewDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMXCAFDoc_ViewDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMXCAFDoc_ViewDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMXCAFDoc_ViewDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMXCAFDoc_ViewDriver self)

        Increments the reference counter of this object


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMXCAFDoc_ViewDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewDriver_DecrementRefCounter(self, *args)

Handle_BinMXCAFDoc_ViewDriver_swigregister = _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewDriver_swigregister
Handle_BinMXCAFDoc_ViewDriver_swigregister(Handle_BinMXCAFDoc_ViewDriver)

def Handle_BinMXCAFDoc_ViewDriver_DownCast(thing):
    return _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewDriver_DownCast(thing)
Handle_BinMXCAFDoc_ViewDriver_DownCast = _BinMXCAFDoc.Handle_BinMXCAFDoc_ViewDriver_DownCast

class Handle_BinMXCAFDoc_ColorToolDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMXCAFDoc_ColorToolDriver self)

        Nullify the handle


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorToolDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMXCAFDoc_ColorToolDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorToolDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMXCAFDoc_ColorToolDriver self, BinMXCAFDoc_ColorToolDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorToolDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMXCAFDoc_ColorToolDriver self, Handle_BinMXCAFDoc_ColorToolDriver theHandle) -> Handle_BinMXCAFDoc_ColorToolDriver
        assign(Handle_BinMXCAFDoc_ColorToolDriver self, BinMXCAFDoc_ColorToolDriver thePtr) -> Handle_BinMXCAFDoc_ColorToolDriver
        assign(Handle_BinMXCAFDoc_ColorToolDriver self, Handle_BinMXCAFDoc_ColorToolDriver theHandle) -> Handle_BinMXCAFDoc_ColorToolDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorToolDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMXCAFDoc_ColorToolDriver self) -> BinMXCAFDoc_ColorToolDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorToolDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMXCAFDoc_ColorToolDriver self) -> BinMXCAFDoc_ColorToolDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorToolDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMXCAFDoc_ColorToolDriver self) -> BinMXCAFDoc_ColorToolDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorToolDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorToolDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorToolDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMXCAFDoc.new_Handle_BinMXCAFDoc_ColorToolDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMXCAFDoc.Handle_BinMXCAFDoc_ColorToolDriver_DownCast)
    __swig_destroy__ = _BinMXCAFDoc.delete_Handle_BinMXCAFDoc_ColorToolDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMXCAFDoc_ColorToolDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorToolDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMXCAFDoc_ColorToolDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(Handle_BinMXCAFDoc_ColorToolDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorToolDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMXCAFDoc_ColorToolDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorToolDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorToolDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorToolDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorToolDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorToolDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMXCAFDoc_ColorToolDriver self)

        Memory deallocator for transient classes


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorToolDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMXCAFDoc_ColorToolDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMXCAFDoc_ColorToolDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorToolDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMXCAFDoc_ColorToolDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMXCAFDoc_ColorToolDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorToolDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMXCAFDoc_ColorToolDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorToolDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMXCAFDoc_ColorToolDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorToolDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMXCAFDoc_ColorToolDriver self)

        Increments the reference counter of this object


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorToolDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMXCAFDoc_ColorToolDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorToolDriver_DecrementRefCounter(self, *args)

Handle_BinMXCAFDoc_ColorToolDriver_swigregister = _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorToolDriver_swigregister
Handle_BinMXCAFDoc_ColorToolDriver_swigregister(Handle_BinMXCAFDoc_ColorToolDriver)

def Handle_BinMXCAFDoc_ColorToolDriver_DownCast(thing):
    return _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorToolDriver_DownCast(thing)
Handle_BinMXCAFDoc_ColorToolDriver_DownCast = _BinMXCAFDoc.Handle_BinMXCAFDoc_ColorToolDriver_DownCast

class Handle_BinMXCAFDoc_DatumDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMXCAFDoc_DatumDriver self)

        Nullify the handle


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DatumDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMXCAFDoc_DatumDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DatumDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMXCAFDoc_DatumDriver self, BinMXCAFDoc_DatumDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DatumDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMXCAFDoc_DatumDriver self, Handle_BinMXCAFDoc_DatumDriver theHandle) -> Handle_BinMXCAFDoc_DatumDriver
        assign(Handle_BinMXCAFDoc_DatumDriver self, BinMXCAFDoc_DatumDriver thePtr) -> Handle_BinMXCAFDoc_DatumDriver
        assign(Handle_BinMXCAFDoc_DatumDriver self, Handle_BinMXCAFDoc_DatumDriver theHandle) -> Handle_BinMXCAFDoc_DatumDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DatumDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMXCAFDoc_DatumDriver self) -> BinMXCAFDoc_DatumDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DatumDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMXCAFDoc_DatumDriver self) -> BinMXCAFDoc_DatumDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DatumDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMXCAFDoc_DatumDriver self) -> BinMXCAFDoc_DatumDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DatumDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DatumDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMXCAFDoc.Handle_BinMXCAFDoc_DatumDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMXCAFDoc.new_Handle_BinMXCAFDoc_DatumDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMXCAFDoc.Handle_BinMXCAFDoc_DatumDriver_DownCast)
    __swig_destroy__ = _BinMXCAFDoc.delete_Handle_BinMXCAFDoc_DatumDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMXCAFDoc_DatumDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DatumDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMXCAFDoc_DatumDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(Handle_BinMXCAFDoc_DatumDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DatumDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMXCAFDoc_DatumDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DatumDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_DatumDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_DatumDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_DatumDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_DatumDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMXCAFDoc_DatumDriver self)

        Memory deallocator for transient classes


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DatumDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMXCAFDoc_DatumDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMXCAFDoc_DatumDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DatumDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMXCAFDoc_DatumDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMXCAFDoc_DatumDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DatumDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMXCAFDoc_DatumDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DatumDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMXCAFDoc_DatumDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DatumDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMXCAFDoc_DatumDriver self)

        Increments the reference counter of this object


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DatumDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMXCAFDoc_DatumDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DatumDriver_DecrementRefCounter(self, *args)

Handle_BinMXCAFDoc_DatumDriver_swigregister = _BinMXCAFDoc.Handle_BinMXCAFDoc_DatumDriver_swigregister
Handle_BinMXCAFDoc_DatumDriver_swigregister(Handle_BinMXCAFDoc_DatumDriver)

def Handle_BinMXCAFDoc_DatumDriver_DownCast(thing):
    return _BinMXCAFDoc.Handle_BinMXCAFDoc_DatumDriver_DownCast(thing)
Handle_BinMXCAFDoc_DatumDriver_DownCast = _BinMXCAFDoc.Handle_BinMXCAFDoc_DatumDriver_DownCast

class Handle_BinMXCAFDoc_DimTolDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMXCAFDoc_DimTolDriver self)

        Nullify the handle


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMXCAFDoc_DimTolDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMXCAFDoc_DimTolDriver self, BinMXCAFDoc_DimTolDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMXCAFDoc_DimTolDriver self, Handle_BinMXCAFDoc_DimTolDriver theHandle) -> Handle_BinMXCAFDoc_DimTolDriver
        assign(Handle_BinMXCAFDoc_DimTolDriver self, BinMXCAFDoc_DimTolDriver thePtr) -> Handle_BinMXCAFDoc_DimTolDriver
        assign(Handle_BinMXCAFDoc_DimTolDriver self, Handle_BinMXCAFDoc_DimTolDriver theHandle) -> Handle_BinMXCAFDoc_DimTolDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMXCAFDoc_DimTolDriver self) -> BinMXCAFDoc_DimTolDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMXCAFDoc_DimTolDriver self) -> BinMXCAFDoc_DimTolDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMXCAFDoc_DimTolDriver self) -> BinMXCAFDoc_DimTolDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMXCAFDoc.new_Handle_BinMXCAFDoc_DimTolDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolDriver_DownCast)
    __swig_destroy__ = _BinMXCAFDoc.delete_Handle_BinMXCAFDoc_DimTolDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMXCAFDoc_DimTolDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMXCAFDoc_DimTolDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(Handle_BinMXCAFDoc_DimTolDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMXCAFDoc_DimTolDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMXCAFDoc_DimTolDriver self)

        Memory deallocator for transient classes


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMXCAFDoc_DimTolDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMXCAFDoc_DimTolDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMXCAFDoc_DimTolDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMXCAFDoc_DimTolDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMXCAFDoc_DimTolDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMXCAFDoc_DimTolDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMXCAFDoc_DimTolDriver self)

        Increments the reference counter of this object


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMXCAFDoc_DimTolDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolDriver_DecrementRefCounter(self, *args)

Handle_BinMXCAFDoc_DimTolDriver_swigregister = _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolDriver_swigregister
Handle_BinMXCAFDoc_DimTolDriver_swigregister(Handle_BinMXCAFDoc_DimTolDriver)

def Handle_BinMXCAFDoc_DimTolDriver_DownCast(thing):
    return _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolDriver_DownCast(thing)
Handle_BinMXCAFDoc_DimTolDriver_DownCast = _BinMXCAFDoc.Handle_BinMXCAFDoc_DimTolDriver_DownCast

class Handle_BinMXCAFDoc_NoteDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMXCAFDoc_NoteDriver self)

        Nullify the handle


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMXCAFDoc_NoteDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMXCAFDoc_NoteDriver self, BinMXCAFDoc_NoteDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMXCAFDoc_NoteDriver self, Handle_BinMXCAFDoc_NoteDriver theHandle) -> Handle_BinMXCAFDoc_NoteDriver
        assign(Handle_BinMXCAFDoc_NoteDriver self, BinMXCAFDoc_NoteDriver thePtr) -> Handle_BinMXCAFDoc_NoteDriver
        assign(Handle_BinMXCAFDoc_NoteDriver self, Handle_BinMXCAFDoc_NoteDriver theHandle) -> Handle_BinMXCAFDoc_NoteDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMXCAFDoc_NoteDriver self) -> BinMXCAFDoc_NoteDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMXCAFDoc_NoteDriver self) -> BinMXCAFDoc_NoteDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMXCAFDoc_NoteDriver self) -> BinMXCAFDoc_NoteDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMXCAFDoc.new_Handle_BinMXCAFDoc_NoteDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMXCAFDoc.Handle_BinMXCAFDoc_NoteDriver_DownCast)
    __swig_destroy__ = _BinMXCAFDoc.delete_Handle_BinMXCAFDoc_NoteDriver

    def Paste(self, *args):
        """
        Paste(Handle_BinMXCAFDoc_NoteDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(Handle_BinMXCAFDoc_NoteDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMXCAFDoc_NoteDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMXCAFDoc_NoteDriver self) -> Handle_TDF_Attribute

        Creates a new attribute from TDF.

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteDriver_NewEmpty(self, *args)


    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMXCAFDoc_NoteDriver self)

        Memory deallocator for transient classes


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMXCAFDoc_NoteDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMXCAFDoc_NoteDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMXCAFDoc_NoteDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMXCAFDoc_NoteDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMXCAFDoc_NoteDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMXCAFDoc_NoteDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMXCAFDoc_NoteDriver self)

        Increments the reference counter of this object


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMXCAFDoc_NoteDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteDriver_DecrementRefCounter(self, *args)

Handle_BinMXCAFDoc_NoteDriver_swigregister = _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteDriver_swigregister
Handle_BinMXCAFDoc_NoteDriver_swigregister(Handle_BinMXCAFDoc_NoteDriver)

def Handle_BinMXCAFDoc_NoteDriver_DownCast(thing):
    return _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteDriver_DownCast(thing)
Handle_BinMXCAFDoc_NoteDriver_DownCast = _BinMXCAFDoc.Handle_BinMXCAFDoc_NoteDriver_DownCast

class BinMXCAFDoc_(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddDrivers(*args):
        """
        AddDrivers(Handle_BinMDF_ADriverTable theDriverTable, Handle_Message_Messenger theMsgDrv)

        Adds the attribute drivers to <theDriverTable>.

        :type theDriverTable: OCC.wrapper.BinMDF.Handle_BinMDF_ADriverTable
        :type theMsgDrv: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _BinMXCAFDoc.BinMXCAFDoc__AddDrivers(*args)

    AddDrivers = staticmethod(AddDrivers)

    def __init__(self):
        this = _BinMXCAFDoc.new_BinMXCAFDoc_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BinMXCAFDoc.delete_BinMXCAFDoc_
BinMXCAFDoc__swigregister = _BinMXCAFDoc.BinMXCAFDoc__swigregister
BinMXCAFDoc__swigregister(BinMXCAFDoc_)

def BinMXCAFDoc__AddDrivers(*args):
    """
    BinMXCAFDoc__AddDrivers(Handle_BinMDF_ADriverTable theDriverTable, Handle_Message_Messenger theMsgDrv)

    Adds the attribute drivers to <theDriverTable>.

    :type theDriverTable: OCC.wrapper.BinMDF.Handle_BinMDF_ADriverTable
    :type theMsgDrv: OCC.wrapper.Message.Handle_Message_Messenger

    """
    return _BinMXCAFDoc.BinMXCAFDoc__AddDrivers(*args)

class BinMXCAFDoc_NotesToolDriver(BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMXCAFDoc_NotesToolDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMXCAFDoc_NotesToolDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMXCAFDoc_NotesToolDriver self, Handle_Message_Messenger theMsgDriver) -> BinMXCAFDoc_NotesToolDriver

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMXCAFDoc.new_BinMXCAFDoc_NotesToolDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMXCAFDoc_NotesToolDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.BinMXCAFDoc_NotesToolDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMXCAFDoc_NotesToolDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(BinMXCAFDoc_NotesToolDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.BinMXCAFDoc_NotesToolDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.BinMXCAFDoc_NotesToolDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMXCAFDoc.BinMXCAFDoc_NotesToolDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.BinMXCAFDoc_NotesToolDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMXCAFDoc.delete_BinMXCAFDoc_NotesToolDriver
BinMXCAFDoc_NotesToolDriver_swigregister = _BinMXCAFDoc.BinMXCAFDoc_NotesToolDriver_swigregister
BinMXCAFDoc_NotesToolDriver_swigregister(BinMXCAFDoc_NotesToolDriver)

def BinMXCAFDoc_NotesToolDriver_get_type_name(*args):
    """
    BinMXCAFDoc_NotesToolDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMXCAFDoc.BinMXCAFDoc_NotesToolDriver_get_type_name(*args)

def BinMXCAFDoc_NotesToolDriver_get_type_descriptor(*args):
    """
    BinMXCAFDoc_NotesToolDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMXCAFDoc.BinMXCAFDoc_NotesToolDriver_get_type_descriptor(*args)

class Handle_BinMXCAFDoc_NotesToolDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMXCAFDoc_NotesToolDriver self)

        Nullify the handle


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NotesToolDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMXCAFDoc_NotesToolDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NotesToolDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMXCAFDoc_NotesToolDriver self, BinMXCAFDoc_NotesToolDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NotesToolDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMXCAFDoc_NotesToolDriver self, Handle_BinMXCAFDoc_NotesToolDriver theHandle) -> Handle_BinMXCAFDoc_NotesToolDriver
        assign(Handle_BinMXCAFDoc_NotesToolDriver self, BinMXCAFDoc_NotesToolDriver thePtr) -> Handle_BinMXCAFDoc_NotesToolDriver
        assign(Handle_BinMXCAFDoc_NotesToolDriver self, Handle_BinMXCAFDoc_NotesToolDriver theHandle) -> Handle_BinMXCAFDoc_NotesToolDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NotesToolDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMXCAFDoc_NotesToolDriver self) -> BinMXCAFDoc_NotesToolDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NotesToolDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMXCAFDoc_NotesToolDriver self) -> BinMXCAFDoc_NotesToolDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NotesToolDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMXCAFDoc_NotesToolDriver self) -> BinMXCAFDoc_NotesToolDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NotesToolDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NotesToolDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMXCAFDoc.Handle_BinMXCAFDoc_NotesToolDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMXCAFDoc.new_Handle_BinMXCAFDoc_NotesToolDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMXCAFDoc.Handle_BinMXCAFDoc_NotesToolDriver_DownCast)
    __swig_destroy__ = _BinMXCAFDoc.delete_Handle_BinMXCAFDoc_NotesToolDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMXCAFDoc_NotesToolDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NotesToolDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMXCAFDoc_NotesToolDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(Handle_BinMXCAFDoc_NotesToolDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NotesToolDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMXCAFDoc_NotesToolDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NotesToolDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_NotesToolDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_NotesToolDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_NotesToolDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_NotesToolDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMXCAFDoc_NotesToolDriver self)

        Memory deallocator for transient classes


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NotesToolDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMXCAFDoc_NotesToolDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMXCAFDoc_NotesToolDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NotesToolDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMXCAFDoc_NotesToolDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMXCAFDoc_NotesToolDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NotesToolDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMXCAFDoc_NotesToolDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NotesToolDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMXCAFDoc_NotesToolDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NotesToolDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMXCAFDoc_NotesToolDriver self)

        Increments the reference counter of this object


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NotesToolDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMXCAFDoc_NotesToolDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_NotesToolDriver_DecrementRefCounter(self, *args)

Handle_BinMXCAFDoc_NotesToolDriver_swigregister = _BinMXCAFDoc.Handle_BinMXCAFDoc_NotesToolDriver_swigregister
Handle_BinMXCAFDoc_NotesToolDriver_swigregister(Handle_BinMXCAFDoc_NotesToolDriver)

def Handle_BinMXCAFDoc_NotesToolDriver_DownCast(thing):
    return _BinMXCAFDoc.Handle_BinMXCAFDoc_NotesToolDriver_DownCast(thing)
Handle_BinMXCAFDoc_NotesToolDriver_DownCast = _BinMXCAFDoc.Handle_BinMXCAFDoc_NotesToolDriver_DownCast

class Handle_BinMXCAFDoc_ClippingPlaneToolDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMXCAFDoc_ClippingPlaneToolDriver self)

        Nullify the handle


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ClippingPlaneToolDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMXCAFDoc_ClippingPlaneToolDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ClippingPlaneToolDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMXCAFDoc_ClippingPlaneToolDriver self, BinMXCAFDoc_ClippingPlaneToolDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ClippingPlaneToolDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMXCAFDoc_ClippingPlaneToolDriver self, Handle_BinMXCAFDoc_ClippingPlaneToolDriver theHandle) -> Handle_BinMXCAFDoc_ClippingPlaneToolDriver
        assign(Handle_BinMXCAFDoc_ClippingPlaneToolDriver self, BinMXCAFDoc_ClippingPlaneToolDriver thePtr) -> Handle_BinMXCAFDoc_ClippingPlaneToolDriver
        assign(Handle_BinMXCAFDoc_ClippingPlaneToolDriver self, Handle_BinMXCAFDoc_ClippingPlaneToolDriver theHandle) -> Handle_BinMXCAFDoc_ClippingPlaneToolDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ClippingPlaneToolDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMXCAFDoc_ClippingPlaneToolDriver self) -> BinMXCAFDoc_ClippingPlaneToolDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ClippingPlaneToolDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMXCAFDoc_ClippingPlaneToolDriver self) -> BinMXCAFDoc_ClippingPlaneToolDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ClippingPlaneToolDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMXCAFDoc_ClippingPlaneToolDriver self) -> BinMXCAFDoc_ClippingPlaneToolDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ClippingPlaneToolDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ClippingPlaneToolDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMXCAFDoc.Handle_BinMXCAFDoc_ClippingPlaneToolDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMXCAFDoc.new_Handle_BinMXCAFDoc_ClippingPlaneToolDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMXCAFDoc.Handle_BinMXCAFDoc_ClippingPlaneToolDriver_DownCast)
    __swig_destroy__ = _BinMXCAFDoc.delete_Handle_BinMXCAFDoc_ClippingPlaneToolDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMXCAFDoc_ClippingPlaneToolDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ClippingPlaneToolDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMXCAFDoc_ClippingPlaneToolDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(Handle_BinMXCAFDoc_ClippingPlaneToolDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ClippingPlaneToolDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMXCAFDoc_ClippingPlaneToolDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ClippingPlaneToolDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_ClippingPlaneToolDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_ClippingPlaneToolDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_ClippingPlaneToolDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_ClippingPlaneToolDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMXCAFDoc_ClippingPlaneToolDriver self)

        Memory deallocator for transient classes


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ClippingPlaneToolDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMXCAFDoc_ClippingPlaneToolDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMXCAFDoc_ClippingPlaneToolDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ClippingPlaneToolDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMXCAFDoc_ClippingPlaneToolDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMXCAFDoc_ClippingPlaneToolDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ClippingPlaneToolDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMXCAFDoc_ClippingPlaneToolDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ClippingPlaneToolDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMXCAFDoc_ClippingPlaneToolDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ClippingPlaneToolDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMXCAFDoc_ClippingPlaneToolDriver self)

        Increments the reference counter of this object


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ClippingPlaneToolDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMXCAFDoc_ClippingPlaneToolDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_ClippingPlaneToolDriver_DecrementRefCounter(self, *args)

Handle_BinMXCAFDoc_ClippingPlaneToolDriver_swigregister = _BinMXCAFDoc.Handle_BinMXCAFDoc_ClippingPlaneToolDriver_swigregister
Handle_BinMXCAFDoc_ClippingPlaneToolDriver_swigregister(Handle_BinMXCAFDoc_ClippingPlaneToolDriver)

def Handle_BinMXCAFDoc_ClippingPlaneToolDriver_DownCast(thing):
    return _BinMXCAFDoc.Handle_BinMXCAFDoc_ClippingPlaneToolDriver_DownCast(thing)
Handle_BinMXCAFDoc_ClippingPlaneToolDriver_DownCast = _BinMXCAFDoc.Handle_BinMXCAFDoc_ClippingPlaneToolDriver_DownCast

class Handle_BinMXCAFDoc_DocumentToolDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMXCAFDoc_DocumentToolDriver self)

        Nullify the handle


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DocumentToolDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMXCAFDoc_DocumentToolDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DocumentToolDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMXCAFDoc_DocumentToolDriver self, BinMXCAFDoc_DocumentToolDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DocumentToolDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMXCAFDoc_DocumentToolDriver self, Handle_BinMXCAFDoc_DocumentToolDriver theHandle) -> Handle_BinMXCAFDoc_DocumentToolDriver
        assign(Handle_BinMXCAFDoc_DocumentToolDriver self, BinMXCAFDoc_DocumentToolDriver thePtr) -> Handle_BinMXCAFDoc_DocumentToolDriver
        assign(Handle_BinMXCAFDoc_DocumentToolDriver self, Handle_BinMXCAFDoc_DocumentToolDriver theHandle) -> Handle_BinMXCAFDoc_DocumentToolDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DocumentToolDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMXCAFDoc_DocumentToolDriver self) -> BinMXCAFDoc_DocumentToolDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DocumentToolDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMXCAFDoc_DocumentToolDriver self) -> BinMXCAFDoc_DocumentToolDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DocumentToolDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMXCAFDoc_DocumentToolDriver self) -> BinMXCAFDoc_DocumentToolDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DocumentToolDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DocumentToolDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMXCAFDoc.Handle_BinMXCAFDoc_DocumentToolDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMXCAFDoc.new_Handle_BinMXCAFDoc_DocumentToolDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMXCAFDoc.Handle_BinMXCAFDoc_DocumentToolDriver_DownCast)
    __swig_destroy__ = _BinMXCAFDoc.delete_Handle_BinMXCAFDoc_DocumentToolDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMXCAFDoc_DocumentToolDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DocumentToolDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMXCAFDoc_DocumentToolDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(Handle_BinMXCAFDoc_DocumentToolDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DocumentToolDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMXCAFDoc_DocumentToolDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DocumentToolDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_DocumentToolDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_DocumentToolDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_DocumentToolDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMXCAFDoc.Handle_BinMXCAFDoc_DocumentToolDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMXCAFDoc_DocumentToolDriver self)

        Memory deallocator for transient classes


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DocumentToolDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMXCAFDoc_DocumentToolDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMXCAFDoc_DocumentToolDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DocumentToolDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMXCAFDoc_DocumentToolDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMXCAFDoc_DocumentToolDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DocumentToolDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMXCAFDoc_DocumentToolDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DocumentToolDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMXCAFDoc_DocumentToolDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DocumentToolDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMXCAFDoc_DocumentToolDriver self)

        Increments the reference counter of this object


        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DocumentToolDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMXCAFDoc_DocumentToolDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMXCAFDoc.Handle_BinMXCAFDoc_DocumentToolDriver_DecrementRefCounter(self, *args)

Handle_BinMXCAFDoc_DocumentToolDriver_swigregister = _BinMXCAFDoc.Handle_BinMXCAFDoc_DocumentToolDriver_swigregister
Handle_BinMXCAFDoc_DocumentToolDriver_swigregister(Handle_BinMXCAFDoc_DocumentToolDriver)

def Handle_BinMXCAFDoc_DocumentToolDriver_DownCast(thing):
    return _BinMXCAFDoc.Handle_BinMXCAFDoc_DocumentToolDriver_DownCast(thing)
Handle_BinMXCAFDoc_DocumentToolDriver_DownCast = _BinMXCAFDoc.Handle_BinMXCAFDoc_DocumentToolDriver_DownCast



