# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BinMDataStd')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BinMDataStd')
    _BinMDataStd = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BinMDataStd', [dirname(__file__)])
        except ImportError:
            import _BinMDataStd
            return _BinMDataStd
        try:
            _mod = imp.load_module('_BinMDataStd', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BinMDataStd = swig_import_helper()
    del swig_import_helper
else:
    import _BinMDataStd
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BinMDataStd.delete_SwigPyIterator

    def value(self):
        return _BinMDataStd.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _BinMDataStd.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _BinMDataStd.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _BinMDataStd.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _BinMDataStd.SwigPyIterator_equal(self, x)

    def copy(self):
        return _BinMDataStd.SwigPyIterator_copy(self)

    def next(self):
        return _BinMDataStd.SwigPyIterator_next(self)

    def __next__(self):
        return _BinMDataStd.SwigPyIterator___next__(self)

    def previous(self):
        return _BinMDataStd.SwigPyIterator_previous(self)

    def advance(self, n):
        return _BinMDataStd.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _BinMDataStd.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _BinMDataStd.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _BinMDataStd.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _BinMDataStd.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _BinMDataStd.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _BinMDataStd.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _BinMDataStd.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BinMDataStd.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_BinMDataStd.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _BinMDataStd.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BinMDataStd.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BinMDataStd.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _BinMDataStd.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _BinMDataStd.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _BinMDataStd.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BinMDataStd.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_BinMDataStd.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _BinMDataStd.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BinMDataStd.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BinMDataStd.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _BinMDataStd.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _BinMDataStd.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _BinMDataStd.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _BinMDataStd.ptr_to_number(item)
ptr_to_number = _BinMDataStd.ptr_to_number

def HashCode(*args):
    return _BinMDataStd.HashCode(*args)
HashCode = _BinMDataStd.HashCode

def ptr_equal(a, b):
    return _BinMDataStd.ptr_equal(a, b)
ptr_equal = _BinMDataStd.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDF
else:
    import TDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BinObjMgt
else:
    import BinObjMgt
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Storage
else:
    import Storage
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BinMDF
else:
    import BinMDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
class BinMDataStd_TickDriver(BinMDF.BinMDF_ADriver):
    """Tick attribute driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMDataStd_TickDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMDataStd_TickDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMDataStd_TickDriver self, Handle_Message_Messenger theMessageDriver) -> BinMDataStd_TickDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMDataStd.new_BinMDataStd_TickDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMDataStd_TickDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.BinMDataStd_TickDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMDataStd_TickDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMDataStd_TickDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.BinMDataStd_TickDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.BinMDataStd_TickDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMDataStd.BinMDataStd_TickDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.BinMDataStd_TickDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMDataStd.delete_BinMDataStd_TickDriver
BinMDataStd_TickDriver_swigregister = _BinMDataStd.BinMDataStd_TickDriver_swigregister
BinMDataStd_TickDriver_swigregister(BinMDataStd_TickDriver)

def BinMDataStd_TickDriver_get_type_name(*args):
    """
    BinMDataStd_TickDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMDataStd.BinMDataStd_TickDriver_get_type_name(*args)

def BinMDataStd_TickDriver_get_type_descriptor(*args):
    """
    BinMDataStd_TickDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMDataStd.BinMDataStd_TickDriver_get_type_descriptor(*args)

class BinMDataStd_ExtStringListDriver(BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMDataStd_ExtStringListDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMDataStd_ExtStringListDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMDataStd_ExtStringListDriver self, Handle_Message_Messenger theMessageDriver) -> BinMDataStd_ExtStringListDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMDataStd.new_BinMDataStd_ExtStringListDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMDataStd_ExtStringListDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.BinMDataStd_ExtStringListDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMDataStd_ExtStringListDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMDataStd_ExtStringListDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.BinMDataStd_ExtStringListDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.BinMDataStd_ExtStringListDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMDataStd.BinMDataStd_ExtStringListDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.BinMDataStd_ExtStringListDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMDataStd.delete_BinMDataStd_ExtStringListDriver
BinMDataStd_ExtStringListDriver_swigregister = _BinMDataStd.BinMDataStd_ExtStringListDriver_swigregister
BinMDataStd_ExtStringListDriver_swigregister(BinMDataStd_ExtStringListDriver)

def BinMDataStd_ExtStringListDriver_get_type_name(*args):
    """
    BinMDataStd_ExtStringListDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMDataStd.BinMDataStd_ExtStringListDriver_get_type_name(*args)

def BinMDataStd_ExtStringListDriver_get_type_descriptor(*args):
    """
    BinMDataStd_ExtStringListDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMDataStd.BinMDataStd_ExtStringListDriver_get_type_descriptor(*args)

class BinMDataStd_ExpressionDriver(BinMDF.BinMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMDataStd_ExpressionDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMDataStd_ExpressionDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMDataStd_ExpressionDriver self, Handle_Message_Messenger theMessageDriver) -> BinMDataStd_ExpressionDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMDataStd.new_BinMDataStd_ExpressionDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMDataStd_ExpressionDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.BinMDataStd_ExpressionDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMDataStd_ExpressionDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMDataStd_ExpressionDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.BinMDataStd_ExpressionDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.BinMDataStd_ExpressionDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMDataStd.BinMDataStd_ExpressionDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.BinMDataStd_ExpressionDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMDataStd.delete_BinMDataStd_ExpressionDriver
BinMDataStd_ExpressionDriver_swigregister = _BinMDataStd.BinMDataStd_ExpressionDriver_swigregister
BinMDataStd_ExpressionDriver_swigregister(BinMDataStd_ExpressionDriver)

def BinMDataStd_ExpressionDriver_get_type_name(*args):
    """
    BinMDataStd_ExpressionDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMDataStd.BinMDataStd_ExpressionDriver_get_type_name(*args)

def BinMDataStd_ExpressionDriver_get_type_descriptor(*args):
    """
    BinMDataStd_ExpressionDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMDataStd.BinMDataStd_ExpressionDriver_get_type_descriptor(*args)

class BinMDataStd_BooleanListDriver(BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMDataStd_BooleanListDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMDataStd_BooleanListDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMDataStd_BooleanListDriver self, Handle_Message_Messenger theMessageDriver) -> BinMDataStd_BooleanListDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMDataStd.new_BinMDataStd_BooleanListDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMDataStd_BooleanListDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.BinMDataStd_BooleanListDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMDataStd_BooleanListDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMDataStd_BooleanListDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.BinMDataStd_BooleanListDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.BinMDataStd_BooleanListDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMDataStd.BinMDataStd_BooleanListDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.BinMDataStd_BooleanListDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMDataStd.delete_BinMDataStd_BooleanListDriver
BinMDataStd_BooleanListDriver_swigregister = _BinMDataStd.BinMDataStd_BooleanListDriver_swigregister
BinMDataStd_BooleanListDriver_swigregister(BinMDataStd_BooleanListDriver)

def BinMDataStd_BooleanListDriver_get_type_name(*args):
    """
    BinMDataStd_BooleanListDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMDataStd.BinMDataStd_BooleanListDriver_get_type_name(*args)

def BinMDataStd_BooleanListDriver_get_type_descriptor(*args):
    """
    BinMDataStd_BooleanListDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMDataStd.BinMDataStd_BooleanListDriver_get_type_descriptor(*args)

class BinMDataStd_ReferenceArrayDriver(BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMDataStd_ReferenceArrayDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMDataStd_ReferenceArrayDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMDataStd_ReferenceArrayDriver self, Handle_Message_Messenger theMessageDriver) -> BinMDataStd_ReferenceArrayDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMDataStd.new_BinMDataStd_ReferenceArrayDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMDataStd_ReferenceArrayDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.BinMDataStd_ReferenceArrayDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMDataStd_ReferenceArrayDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMDataStd_ReferenceArrayDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.BinMDataStd_ReferenceArrayDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.BinMDataStd_ReferenceArrayDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMDataStd.BinMDataStd_ReferenceArrayDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.BinMDataStd_ReferenceArrayDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMDataStd.delete_BinMDataStd_ReferenceArrayDriver
BinMDataStd_ReferenceArrayDriver_swigregister = _BinMDataStd.BinMDataStd_ReferenceArrayDriver_swigregister
BinMDataStd_ReferenceArrayDriver_swigregister(BinMDataStd_ReferenceArrayDriver)

def BinMDataStd_ReferenceArrayDriver_get_type_name(*args):
    """
    BinMDataStd_ReferenceArrayDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMDataStd.BinMDataStd_ReferenceArrayDriver_get_type_name(*args)

def BinMDataStd_ReferenceArrayDriver_get_type_descriptor(*args):
    """
    BinMDataStd_ReferenceArrayDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMDataStd.BinMDataStd_ReferenceArrayDriver_get_type_descriptor(*args)

class BinMDataStd_BooleanArrayDriver(BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMDataStd_BooleanArrayDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMDataStd_BooleanArrayDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMDataStd_BooleanArrayDriver self, Handle_Message_Messenger theMessageDriver) -> BinMDataStd_BooleanArrayDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMDataStd.new_BinMDataStd_BooleanArrayDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMDataStd_BooleanArrayDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.BinMDataStd_BooleanArrayDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMDataStd_BooleanArrayDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMDataStd_BooleanArrayDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.BinMDataStd_BooleanArrayDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.BinMDataStd_BooleanArrayDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMDataStd.BinMDataStd_BooleanArrayDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.BinMDataStd_BooleanArrayDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMDataStd.delete_BinMDataStd_BooleanArrayDriver
BinMDataStd_BooleanArrayDriver_swigregister = _BinMDataStd.BinMDataStd_BooleanArrayDriver_swigregister
BinMDataStd_BooleanArrayDriver_swigregister(BinMDataStd_BooleanArrayDriver)

def BinMDataStd_BooleanArrayDriver_get_type_name(*args):
    """
    BinMDataStd_BooleanArrayDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMDataStd.BinMDataStd_BooleanArrayDriver_get_type_name(*args)

def BinMDataStd_BooleanArrayDriver_get_type_descriptor(*args):
    """
    BinMDataStd_BooleanArrayDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMDataStd.BinMDataStd_BooleanArrayDriver_get_type_descriptor(*args)

class BinMDataStd_RealArrayDriver(BinMDF.BinMDF_ADriver):
    """Array of Real attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMDataStd_RealArrayDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMDataStd_RealArrayDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMDataStd_RealArrayDriver self, Handle_Message_Messenger theMessageDriver) -> BinMDataStd_RealArrayDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMDataStd.new_BinMDataStd_RealArrayDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMDataStd_RealArrayDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.BinMDataStd_RealArrayDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMDataStd_RealArrayDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMDataStd_RealArrayDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.BinMDataStd_RealArrayDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.BinMDataStd_RealArrayDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMDataStd.BinMDataStd_RealArrayDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.BinMDataStd_RealArrayDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMDataStd.delete_BinMDataStd_RealArrayDriver
BinMDataStd_RealArrayDriver_swigregister = _BinMDataStd.BinMDataStd_RealArrayDriver_swigregister
BinMDataStd_RealArrayDriver_swigregister(BinMDataStd_RealArrayDriver)

def BinMDataStd_RealArrayDriver_get_type_name(*args):
    """
    BinMDataStd_RealArrayDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMDataStd.BinMDataStd_RealArrayDriver_get_type_name(*args)

def BinMDataStd_RealArrayDriver_get_type_descriptor(*args):
    """
    BinMDataStd_RealArrayDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMDataStd.BinMDataStd_RealArrayDriver_get_type_descriptor(*args)

class BinMDataStd_RelationDriver(BinMDF.BinMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMDataStd_RelationDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMDataStd_RelationDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMDataStd_RelationDriver self, Handle_Message_Messenger theMessageDriver) -> BinMDataStd_RelationDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMDataStd.new_BinMDataStd_RelationDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMDataStd_RelationDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.BinMDataStd_RelationDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMDataStd_RelationDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMDataStd_RelationDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.BinMDataStd_RelationDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.BinMDataStd_RelationDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMDataStd.BinMDataStd_RelationDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.BinMDataStd_RelationDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMDataStd.delete_BinMDataStd_RelationDriver
BinMDataStd_RelationDriver_swigregister = _BinMDataStd.BinMDataStd_RelationDriver_swigregister
BinMDataStd_RelationDriver_swigregister(BinMDataStd_RelationDriver)

def BinMDataStd_RelationDriver_get_type_name(*args):
    """
    BinMDataStd_RelationDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMDataStd.BinMDataStd_RelationDriver_get_type_name(*args)

def BinMDataStd_RelationDriver_get_type_descriptor(*args):
    """
    BinMDataStd_RelationDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMDataStd.BinMDataStd_RelationDriver_get_type_descriptor(*args)

class BinMDataStd_TreeNodeDriver(BinMDF.BinMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMDataStd_TreeNodeDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMDataStd_TreeNodeDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMDataStd_TreeNodeDriver self, Handle_Message_Messenger theMessageDriver) -> BinMDataStd_TreeNodeDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMDataStd.new_BinMDataStd_TreeNodeDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMDataStd_TreeNodeDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.BinMDataStd_TreeNodeDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMDataStd_TreeNodeDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMDataStd_TreeNodeDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.BinMDataStd_TreeNodeDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.BinMDataStd_TreeNodeDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMDataStd.BinMDataStd_TreeNodeDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.BinMDataStd_TreeNodeDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMDataStd.delete_BinMDataStd_TreeNodeDriver
BinMDataStd_TreeNodeDriver_swigregister = _BinMDataStd.BinMDataStd_TreeNodeDriver_swigregister
BinMDataStd_TreeNodeDriver_swigregister(BinMDataStd_TreeNodeDriver)

def BinMDataStd_TreeNodeDriver_get_type_name(*args):
    """
    BinMDataStd_TreeNodeDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMDataStd.BinMDataStd_TreeNodeDriver_get_type_name(*args)

def BinMDataStd_TreeNodeDriver_get_type_descriptor(*args):
    """
    BinMDataStd_TreeNodeDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMDataStd.BinMDataStd_TreeNodeDriver_get_type_descriptor(*args)

class Handle_BinMDataStd_TickDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMDataStd_TickDriver self)

        Nullify the handle


        """
        return _BinMDataStd.Handle_BinMDataStd_TickDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMDataStd_TickDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMDataStd.Handle_BinMDataStd_TickDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMDataStd_TickDriver self, BinMDataStd_TickDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_TickDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMDataStd_TickDriver self, Handle_BinMDataStd_TickDriver theHandle) -> Handle_BinMDataStd_TickDriver
        assign(Handle_BinMDataStd_TickDriver self, BinMDataStd_TickDriver thePtr) -> Handle_BinMDataStd_TickDriver
        assign(Handle_BinMDataStd_TickDriver self, Handle_BinMDataStd_TickDriver theHandle) -> Handle_BinMDataStd_TickDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMDataStd.Handle_BinMDataStd_TickDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMDataStd_TickDriver self) -> BinMDataStd_TickDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_TickDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMDataStd_TickDriver self) -> BinMDataStd_TickDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_TickDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMDataStd_TickDriver self) -> BinMDataStd_TickDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMDataStd.Handle_BinMDataStd_TickDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMDataStd.Handle_BinMDataStd_TickDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMDataStd.Handle_BinMDataStd_TickDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMDataStd.new_Handle_BinMDataStd_TickDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMDataStd.Handle_BinMDataStd_TickDriver_DownCast)
    __swig_destroy__ = _BinMDataStd.delete_Handle_BinMDataStd_TickDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMDataStd_TickDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.Handle_BinMDataStd_TickDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMDataStd_TickDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMDataStd_TickDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.Handle_BinMDataStd_TickDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMDataStd_TickDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.Handle_BinMDataStd_TickDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_TickDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_TickDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_TickDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMDataStd.Handle_BinMDataStd_TickDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMDataStd_TickDriver self)

        Memory deallocator for transient classes


        """
        return _BinMDataStd.Handle_BinMDataStd_TickDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMDataStd_TickDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMDataStd_TickDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_TickDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMDataStd_TickDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMDataStd_TickDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_TickDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMDataStd_TickDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMDataStd.Handle_BinMDataStd_TickDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMDataStd_TickDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_TickDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMDataStd_TickDriver self)

        Increments the reference counter of this object


        """
        return _BinMDataStd.Handle_BinMDataStd_TickDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMDataStd_TickDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_TickDriver_DecrementRefCounter(self, *args)

Handle_BinMDataStd_TickDriver_swigregister = _BinMDataStd.Handle_BinMDataStd_TickDriver_swigregister
Handle_BinMDataStd_TickDriver_swigregister(Handle_BinMDataStd_TickDriver)

def Handle_BinMDataStd_TickDriver_DownCast(thing):
    return _BinMDataStd.Handle_BinMDataStd_TickDriver_DownCast(thing)
Handle_BinMDataStd_TickDriver_DownCast = _BinMDataStd.Handle_BinMDataStd_TickDriver_DownCast

class BinMDataStd_RealListDriver(BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMDataStd_RealListDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMDataStd_RealListDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMDataStd_RealListDriver self, Handle_Message_Messenger theMessageDriver) -> BinMDataStd_RealListDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMDataStd.new_BinMDataStd_RealListDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMDataStd_RealListDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.BinMDataStd_RealListDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMDataStd_RealListDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMDataStd_RealListDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.BinMDataStd_RealListDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.BinMDataStd_RealListDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMDataStd.BinMDataStd_RealListDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.BinMDataStd_RealListDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMDataStd.delete_BinMDataStd_RealListDriver
BinMDataStd_RealListDriver_swigregister = _BinMDataStd.BinMDataStd_RealListDriver_swigregister
BinMDataStd_RealListDriver_swigregister(BinMDataStd_RealListDriver)

def BinMDataStd_RealListDriver_get_type_name(*args):
    """
    BinMDataStd_RealListDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMDataStd.BinMDataStd_RealListDriver_get_type_name(*args)

def BinMDataStd_RealListDriver_get_type_descriptor(*args):
    """
    BinMDataStd_RealListDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMDataStd.BinMDataStd_RealListDriver_get_type_descriptor(*args)

class BinMDataStd_CommentDriver(BinMDF.BinMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMDataStd_CommentDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMDataStd_CommentDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMDataStd_CommentDriver self, Handle_Message_Messenger theMessageDriver) -> BinMDataStd_CommentDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMDataStd.new_BinMDataStd_CommentDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMDataStd_CommentDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.BinMDataStd_CommentDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMDataStd_CommentDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMDataStd_CommentDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.BinMDataStd_CommentDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.BinMDataStd_CommentDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMDataStd.BinMDataStd_CommentDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.BinMDataStd_CommentDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMDataStd.delete_BinMDataStd_CommentDriver
BinMDataStd_CommentDriver_swigregister = _BinMDataStd.BinMDataStd_CommentDriver_swigregister
BinMDataStd_CommentDriver_swigregister(BinMDataStd_CommentDriver)

def BinMDataStd_CommentDriver_get_type_name(*args):
    """
    BinMDataStd_CommentDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMDataStd.BinMDataStd_CommentDriver_get_type_name(*args)

def BinMDataStd_CommentDriver_get_type_descriptor(*args):
    """
    BinMDataStd_CommentDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMDataStd.BinMDataStd_CommentDriver_get_type_descriptor(*args)

class Handle_BinMDataStd_ExpressionDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMDataStd_ExpressionDriver self)

        Nullify the handle


        """
        return _BinMDataStd.Handle_BinMDataStd_ExpressionDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMDataStd_ExpressionDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMDataStd.Handle_BinMDataStd_ExpressionDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMDataStd_ExpressionDriver self, BinMDataStd_ExpressionDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_ExpressionDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMDataStd_ExpressionDriver self, Handle_BinMDataStd_ExpressionDriver theHandle) -> Handle_BinMDataStd_ExpressionDriver
        assign(Handle_BinMDataStd_ExpressionDriver self, BinMDataStd_ExpressionDriver thePtr) -> Handle_BinMDataStd_ExpressionDriver
        assign(Handle_BinMDataStd_ExpressionDriver self, Handle_BinMDataStd_ExpressionDriver theHandle) -> Handle_BinMDataStd_ExpressionDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMDataStd.Handle_BinMDataStd_ExpressionDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMDataStd_ExpressionDriver self) -> BinMDataStd_ExpressionDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_ExpressionDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMDataStd_ExpressionDriver self) -> BinMDataStd_ExpressionDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_ExpressionDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMDataStd_ExpressionDriver self) -> BinMDataStd_ExpressionDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMDataStd.Handle_BinMDataStd_ExpressionDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMDataStd.Handle_BinMDataStd_ExpressionDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMDataStd.Handle_BinMDataStd_ExpressionDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMDataStd.new_Handle_BinMDataStd_ExpressionDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMDataStd.Handle_BinMDataStd_ExpressionDriver_DownCast)
    __swig_destroy__ = _BinMDataStd.delete_Handle_BinMDataStd_ExpressionDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMDataStd_ExpressionDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.Handle_BinMDataStd_ExpressionDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMDataStd_ExpressionDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMDataStd_ExpressionDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.Handle_BinMDataStd_ExpressionDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMDataStd_ExpressionDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.Handle_BinMDataStd_ExpressionDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_ExpressionDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_ExpressionDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_ExpressionDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMDataStd.Handle_BinMDataStd_ExpressionDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMDataStd_ExpressionDriver self)

        Memory deallocator for transient classes


        """
        return _BinMDataStd.Handle_BinMDataStd_ExpressionDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMDataStd_ExpressionDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMDataStd_ExpressionDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_ExpressionDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMDataStd_ExpressionDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMDataStd_ExpressionDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_ExpressionDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMDataStd_ExpressionDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMDataStd.Handle_BinMDataStd_ExpressionDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMDataStd_ExpressionDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_ExpressionDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMDataStd_ExpressionDriver self)

        Increments the reference counter of this object


        """
        return _BinMDataStd.Handle_BinMDataStd_ExpressionDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMDataStd_ExpressionDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_ExpressionDriver_DecrementRefCounter(self, *args)

Handle_BinMDataStd_ExpressionDriver_swigregister = _BinMDataStd.Handle_BinMDataStd_ExpressionDriver_swigregister
Handle_BinMDataStd_ExpressionDriver_swigregister(Handle_BinMDataStd_ExpressionDriver)

def Handle_BinMDataStd_ExpressionDriver_DownCast(thing):
    return _BinMDataStd.Handle_BinMDataStd_ExpressionDriver_DownCast(thing)
Handle_BinMDataStd_ExpressionDriver_DownCast = _BinMDataStd.Handle_BinMDataStd_ExpressionDriver_DownCast

class BinMDataStd_ReferenceListDriver(BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMDataStd_ReferenceListDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMDataStd_ReferenceListDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMDataStd_ReferenceListDriver self, Handle_Message_Messenger theMessageDriver) -> BinMDataStd_ReferenceListDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMDataStd.new_BinMDataStd_ReferenceListDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMDataStd_ReferenceListDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.BinMDataStd_ReferenceListDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMDataStd_ReferenceListDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMDataStd_ReferenceListDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.BinMDataStd_ReferenceListDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.BinMDataStd_ReferenceListDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMDataStd.BinMDataStd_ReferenceListDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.BinMDataStd_ReferenceListDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMDataStd.delete_BinMDataStd_ReferenceListDriver
BinMDataStd_ReferenceListDriver_swigregister = _BinMDataStd.BinMDataStd_ReferenceListDriver_swigregister
BinMDataStd_ReferenceListDriver_swigregister(BinMDataStd_ReferenceListDriver)

def BinMDataStd_ReferenceListDriver_get_type_name(*args):
    """
    BinMDataStd_ReferenceListDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMDataStd.BinMDataStd_ReferenceListDriver_get_type_name(*args)

def BinMDataStd_ReferenceListDriver_get_type_descriptor(*args):
    """
    BinMDataStd_ReferenceListDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMDataStd.BinMDataStd_ReferenceListDriver_get_type_descriptor(*args)

class Handle_BinMDataStd_TreeNodeDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMDataStd_TreeNodeDriver self)

        Nullify the handle


        """
        return _BinMDataStd.Handle_BinMDataStd_TreeNodeDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMDataStd_TreeNodeDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMDataStd.Handle_BinMDataStd_TreeNodeDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMDataStd_TreeNodeDriver self, BinMDataStd_TreeNodeDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_TreeNodeDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMDataStd_TreeNodeDriver self, Handle_BinMDataStd_TreeNodeDriver theHandle) -> Handle_BinMDataStd_TreeNodeDriver
        assign(Handle_BinMDataStd_TreeNodeDriver self, BinMDataStd_TreeNodeDriver thePtr) -> Handle_BinMDataStd_TreeNodeDriver
        assign(Handle_BinMDataStd_TreeNodeDriver self, Handle_BinMDataStd_TreeNodeDriver theHandle) -> Handle_BinMDataStd_TreeNodeDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMDataStd.Handle_BinMDataStd_TreeNodeDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMDataStd_TreeNodeDriver self) -> BinMDataStd_TreeNodeDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_TreeNodeDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMDataStd_TreeNodeDriver self) -> BinMDataStd_TreeNodeDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_TreeNodeDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMDataStd_TreeNodeDriver self) -> BinMDataStd_TreeNodeDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMDataStd.Handle_BinMDataStd_TreeNodeDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMDataStd.Handle_BinMDataStd_TreeNodeDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMDataStd.Handle_BinMDataStd_TreeNodeDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMDataStd.new_Handle_BinMDataStd_TreeNodeDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMDataStd.Handle_BinMDataStd_TreeNodeDriver_DownCast)
    __swig_destroy__ = _BinMDataStd.delete_Handle_BinMDataStd_TreeNodeDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMDataStd_TreeNodeDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.Handle_BinMDataStd_TreeNodeDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMDataStd_TreeNodeDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMDataStd_TreeNodeDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.Handle_BinMDataStd_TreeNodeDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMDataStd_TreeNodeDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.Handle_BinMDataStd_TreeNodeDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_TreeNodeDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_TreeNodeDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_TreeNodeDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMDataStd.Handle_BinMDataStd_TreeNodeDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMDataStd_TreeNodeDriver self)

        Memory deallocator for transient classes


        """
        return _BinMDataStd.Handle_BinMDataStd_TreeNodeDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMDataStd_TreeNodeDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMDataStd_TreeNodeDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_TreeNodeDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMDataStd_TreeNodeDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMDataStd_TreeNodeDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_TreeNodeDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMDataStd_TreeNodeDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMDataStd.Handle_BinMDataStd_TreeNodeDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMDataStd_TreeNodeDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_TreeNodeDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMDataStd_TreeNodeDriver self)

        Increments the reference counter of this object


        """
        return _BinMDataStd.Handle_BinMDataStd_TreeNodeDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMDataStd_TreeNodeDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_TreeNodeDriver_DecrementRefCounter(self, *args)

Handle_BinMDataStd_TreeNodeDriver_swigregister = _BinMDataStd.Handle_BinMDataStd_TreeNodeDriver_swigregister
Handle_BinMDataStd_TreeNodeDriver_swigregister(Handle_BinMDataStd_TreeNodeDriver)

def Handle_BinMDataStd_TreeNodeDriver_DownCast(thing):
    return _BinMDataStd.Handle_BinMDataStd_TreeNodeDriver_DownCast(thing)
Handle_BinMDataStd_TreeNodeDriver_DownCast = _BinMDataStd.Handle_BinMDataStd_TreeNodeDriver_DownCast

class BinMDataStd_IntegerDriver(BinMDF.BinMDF_ADriver):
    """Integer attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMDataStd_IntegerDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMDataStd_IntegerDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMDataStd_IntegerDriver self, Handle_Message_Messenger theMessageDriver) -> BinMDataStd_IntegerDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMDataStd.new_BinMDataStd_IntegerDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMDataStd_IntegerDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.BinMDataStd_IntegerDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMDataStd_IntegerDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMDataStd_IntegerDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.BinMDataStd_IntegerDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.BinMDataStd_IntegerDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMDataStd.BinMDataStd_IntegerDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.BinMDataStd_IntegerDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMDataStd.delete_BinMDataStd_IntegerDriver
BinMDataStd_IntegerDriver_swigregister = _BinMDataStd.BinMDataStd_IntegerDriver_swigregister
BinMDataStd_IntegerDriver_swigregister(BinMDataStd_IntegerDriver)

def BinMDataStd_IntegerDriver_get_type_name(*args):
    """
    BinMDataStd_IntegerDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMDataStd.BinMDataStd_IntegerDriver_get_type_name(*args)

def BinMDataStd_IntegerDriver_get_type_descriptor(*args):
    """
    BinMDataStd_IntegerDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMDataStd.BinMDataStd_IntegerDriver_get_type_descriptor(*args)

class Handle_BinMDataStd_BooleanListDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMDataStd_BooleanListDriver self)

        Nullify the handle


        """
        return _BinMDataStd.Handle_BinMDataStd_BooleanListDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMDataStd_BooleanListDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMDataStd.Handle_BinMDataStd_BooleanListDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMDataStd_BooleanListDriver self, BinMDataStd_BooleanListDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_BooleanListDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMDataStd_BooleanListDriver self, Handle_BinMDataStd_BooleanListDriver theHandle) -> Handle_BinMDataStd_BooleanListDriver
        assign(Handle_BinMDataStd_BooleanListDriver self, BinMDataStd_BooleanListDriver thePtr) -> Handle_BinMDataStd_BooleanListDriver
        assign(Handle_BinMDataStd_BooleanListDriver self, Handle_BinMDataStd_BooleanListDriver theHandle) -> Handle_BinMDataStd_BooleanListDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMDataStd.Handle_BinMDataStd_BooleanListDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMDataStd_BooleanListDriver self) -> BinMDataStd_BooleanListDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_BooleanListDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMDataStd_BooleanListDriver self) -> BinMDataStd_BooleanListDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_BooleanListDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMDataStd_BooleanListDriver self) -> BinMDataStd_BooleanListDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMDataStd.Handle_BinMDataStd_BooleanListDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMDataStd.Handle_BinMDataStd_BooleanListDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMDataStd.Handle_BinMDataStd_BooleanListDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMDataStd.new_Handle_BinMDataStd_BooleanListDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMDataStd.Handle_BinMDataStd_BooleanListDriver_DownCast)
    __swig_destroy__ = _BinMDataStd.delete_Handle_BinMDataStd_BooleanListDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMDataStd_BooleanListDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.Handle_BinMDataStd_BooleanListDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMDataStd_BooleanListDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMDataStd_BooleanListDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.Handle_BinMDataStd_BooleanListDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMDataStd_BooleanListDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.Handle_BinMDataStd_BooleanListDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_BooleanListDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_BooleanListDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_BooleanListDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMDataStd.Handle_BinMDataStd_BooleanListDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMDataStd_BooleanListDriver self)

        Memory deallocator for transient classes


        """
        return _BinMDataStd.Handle_BinMDataStd_BooleanListDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMDataStd_BooleanListDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMDataStd_BooleanListDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_BooleanListDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMDataStd_BooleanListDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMDataStd_BooleanListDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_BooleanListDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMDataStd_BooleanListDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMDataStd.Handle_BinMDataStd_BooleanListDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMDataStd_BooleanListDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_BooleanListDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMDataStd_BooleanListDriver self)

        Increments the reference counter of this object


        """
        return _BinMDataStd.Handle_BinMDataStd_BooleanListDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMDataStd_BooleanListDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_BooleanListDriver_DecrementRefCounter(self, *args)

Handle_BinMDataStd_BooleanListDriver_swigregister = _BinMDataStd.Handle_BinMDataStd_BooleanListDriver_swigregister
Handle_BinMDataStd_BooleanListDriver_swigregister(Handle_BinMDataStd_BooleanListDriver)

def Handle_BinMDataStd_BooleanListDriver_DownCast(thing):
    return _BinMDataStd.Handle_BinMDataStd_BooleanListDriver_DownCast(thing)
Handle_BinMDataStd_BooleanListDriver_DownCast = _BinMDataStd.Handle_BinMDataStd_BooleanListDriver_DownCast

class BinMDataStd_ExtStringArrayDriver(BinMDF.BinMDF_ADriver):
    """Array of extended string attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMDataStd_ExtStringArrayDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMDataStd_ExtStringArrayDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMDataStd_ExtStringArrayDriver self, Handle_Message_Messenger theMessageDriver) -> BinMDataStd_ExtStringArrayDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMDataStd.new_BinMDataStd_ExtStringArrayDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMDataStd_ExtStringArrayDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.BinMDataStd_ExtStringArrayDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMDataStd_ExtStringArrayDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMDataStd_ExtStringArrayDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.BinMDataStd_ExtStringArrayDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.BinMDataStd_ExtStringArrayDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMDataStd.BinMDataStd_ExtStringArrayDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.BinMDataStd_ExtStringArrayDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMDataStd.delete_BinMDataStd_ExtStringArrayDriver
BinMDataStd_ExtStringArrayDriver_swigregister = _BinMDataStd.BinMDataStd_ExtStringArrayDriver_swigregister
BinMDataStd_ExtStringArrayDriver_swigregister(BinMDataStd_ExtStringArrayDriver)

def BinMDataStd_ExtStringArrayDriver_get_type_name(*args):
    """
    BinMDataStd_ExtStringArrayDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMDataStd.BinMDataStd_ExtStringArrayDriver_get_type_name(*args)

def BinMDataStd_ExtStringArrayDriver_get_type_descriptor(*args):
    """
    BinMDataStd_ExtStringArrayDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMDataStd.BinMDataStd_ExtStringArrayDriver_get_type_descriptor(*args)

class Handle_BinMDataStd_IntegerDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMDataStd_IntegerDriver self)

        Nullify the handle


        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMDataStd_IntegerDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMDataStd_IntegerDriver self, BinMDataStd_IntegerDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMDataStd_IntegerDriver self, Handle_BinMDataStd_IntegerDriver theHandle) -> Handle_BinMDataStd_IntegerDriver
        assign(Handle_BinMDataStd_IntegerDriver self, BinMDataStd_IntegerDriver thePtr) -> Handle_BinMDataStd_IntegerDriver
        assign(Handle_BinMDataStd_IntegerDriver self, Handle_BinMDataStd_IntegerDriver theHandle) -> Handle_BinMDataStd_IntegerDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMDataStd_IntegerDriver self) -> BinMDataStd_IntegerDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMDataStd_IntegerDriver self) -> BinMDataStd_IntegerDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMDataStd_IntegerDriver self) -> BinMDataStd_IntegerDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMDataStd.Handle_BinMDataStd_IntegerDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMDataStd.Handle_BinMDataStd_IntegerDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMDataStd.new_Handle_BinMDataStd_IntegerDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMDataStd.Handle_BinMDataStd_IntegerDriver_DownCast)
    __swig_destroy__ = _BinMDataStd.delete_Handle_BinMDataStd_IntegerDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMDataStd_IntegerDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMDataStd_IntegerDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMDataStd_IntegerDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMDataStd_IntegerDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_IntegerDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_IntegerDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_IntegerDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMDataStd.Handle_BinMDataStd_IntegerDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMDataStd_IntegerDriver self)

        Memory deallocator for transient classes


        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMDataStd_IntegerDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMDataStd_IntegerDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMDataStd_IntegerDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMDataStd_IntegerDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMDataStd_IntegerDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMDataStd_IntegerDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMDataStd_IntegerDriver self)

        Increments the reference counter of this object


        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMDataStd_IntegerDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerDriver_DecrementRefCounter(self, *args)

Handle_BinMDataStd_IntegerDriver_swigregister = _BinMDataStd.Handle_BinMDataStd_IntegerDriver_swigregister
Handle_BinMDataStd_IntegerDriver_swigregister(Handle_BinMDataStd_IntegerDriver)

def Handle_BinMDataStd_IntegerDriver_DownCast(thing):
    return _BinMDataStd.Handle_BinMDataStd_IntegerDriver_DownCast(thing)
Handle_BinMDataStd_IntegerDriver_DownCast = _BinMDataStd.Handle_BinMDataStd_IntegerDriver_DownCast

class BinMDataStd_IntegerListDriver(BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMDataStd_IntegerListDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMDataStd_IntegerListDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMDataStd_IntegerListDriver self, Handle_Message_Messenger theMessageDriver) -> BinMDataStd_IntegerListDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMDataStd.new_BinMDataStd_IntegerListDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMDataStd_IntegerListDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.BinMDataStd_IntegerListDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMDataStd_IntegerListDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMDataStd_IntegerListDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.BinMDataStd_IntegerListDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.BinMDataStd_IntegerListDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMDataStd.BinMDataStd_IntegerListDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.BinMDataStd_IntegerListDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMDataStd.delete_BinMDataStd_IntegerListDriver
BinMDataStd_IntegerListDriver_swigregister = _BinMDataStd.BinMDataStd_IntegerListDriver_swigregister
BinMDataStd_IntegerListDriver_swigregister(BinMDataStd_IntegerListDriver)

def BinMDataStd_IntegerListDriver_get_type_name(*args):
    """
    BinMDataStd_IntegerListDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMDataStd.BinMDataStd_IntegerListDriver_get_type_name(*args)

def BinMDataStd_IntegerListDriver_get_type_descriptor(*args):
    """
    BinMDataStd_IntegerListDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMDataStd.BinMDataStd_IntegerListDriver_get_type_descriptor(*args)

class Handle_BinMDataStd_RealArrayDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMDataStd_RealArrayDriver self)

        Nullify the handle


        """
        return _BinMDataStd.Handle_BinMDataStd_RealArrayDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMDataStd_RealArrayDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMDataStd.Handle_BinMDataStd_RealArrayDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMDataStd_RealArrayDriver self, BinMDataStd_RealArrayDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_RealArrayDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMDataStd_RealArrayDriver self, Handle_BinMDataStd_RealArrayDriver theHandle) -> Handle_BinMDataStd_RealArrayDriver
        assign(Handle_BinMDataStd_RealArrayDriver self, BinMDataStd_RealArrayDriver thePtr) -> Handle_BinMDataStd_RealArrayDriver
        assign(Handle_BinMDataStd_RealArrayDriver self, Handle_BinMDataStd_RealArrayDriver theHandle) -> Handle_BinMDataStd_RealArrayDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMDataStd.Handle_BinMDataStd_RealArrayDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMDataStd_RealArrayDriver self) -> BinMDataStd_RealArrayDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_RealArrayDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMDataStd_RealArrayDriver self) -> BinMDataStd_RealArrayDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_RealArrayDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMDataStd_RealArrayDriver self) -> BinMDataStd_RealArrayDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMDataStd.Handle_BinMDataStd_RealArrayDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMDataStd.Handle_BinMDataStd_RealArrayDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMDataStd.Handle_BinMDataStd_RealArrayDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMDataStd.new_Handle_BinMDataStd_RealArrayDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMDataStd.Handle_BinMDataStd_RealArrayDriver_DownCast)
    __swig_destroy__ = _BinMDataStd.delete_Handle_BinMDataStd_RealArrayDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMDataStd_RealArrayDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.Handle_BinMDataStd_RealArrayDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMDataStd_RealArrayDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMDataStd_RealArrayDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.Handle_BinMDataStd_RealArrayDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMDataStd_RealArrayDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.Handle_BinMDataStd_RealArrayDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_RealArrayDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_RealArrayDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_RealArrayDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMDataStd.Handle_BinMDataStd_RealArrayDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMDataStd_RealArrayDriver self)

        Memory deallocator for transient classes


        """
        return _BinMDataStd.Handle_BinMDataStd_RealArrayDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMDataStd_RealArrayDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMDataStd_RealArrayDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_RealArrayDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMDataStd_RealArrayDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMDataStd_RealArrayDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_RealArrayDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMDataStd_RealArrayDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMDataStd.Handle_BinMDataStd_RealArrayDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMDataStd_RealArrayDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_RealArrayDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMDataStd_RealArrayDriver self)

        Increments the reference counter of this object


        """
        return _BinMDataStd.Handle_BinMDataStd_RealArrayDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMDataStd_RealArrayDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_RealArrayDriver_DecrementRefCounter(self, *args)

Handle_BinMDataStd_RealArrayDriver_swigregister = _BinMDataStd.Handle_BinMDataStd_RealArrayDriver_swigregister
Handle_BinMDataStd_RealArrayDriver_swigregister(Handle_BinMDataStd_RealArrayDriver)

def Handle_BinMDataStd_RealArrayDriver_DownCast(thing):
    return _BinMDataStd.Handle_BinMDataStd_RealArrayDriver_DownCast(thing)
Handle_BinMDataStd_RealArrayDriver_DownCast = _BinMDataStd.Handle_BinMDataStd_RealArrayDriver_DownCast

class BinMDataStd_UAttributeDriver(BinMDF.BinMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMDataStd_UAttributeDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMDataStd_UAttributeDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMDataStd_UAttributeDriver self, Handle_Message_Messenger theMessageDriver) -> BinMDataStd_UAttributeDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMDataStd.new_BinMDataStd_UAttributeDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMDataStd_UAttributeDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.BinMDataStd_UAttributeDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMDataStd_UAttributeDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMDataStd_UAttributeDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.BinMDataStd_UAttributeDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.BinMDataStd_UAttributeDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMDataStd.BinMDataStd_UAttributeDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.BinMDataStd_UAttributeDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMDataStd.delete_BinMDataStd_UAttributeDriver
BinMDataStd_UAttributeDriver_swigregister = _BinMDataStd.BinMDataStd_UAttributeDriver_swigregister
BinMDataStd_UAttributeDriver_swigregister(BinMDataStd_UAttributeDriver)

def BinMDataStd_UAttributeDriver_get_type_name(*args):
    """
    BinMDataStd_UAttributeDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMDataStd.BinMDataStd_UAttributeDriver_get_type_name(*args)

def BinMDataStd_UAttributeDriver_get_type_descriptor(*args):
    """
    BinMDataStd_UAttributeDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMDataStd.BinMDataStd_UAttributeDriver_get_type_descriptor(*args)

class Handle_BinMDataStd_UAttributeDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMDataStd_UAttributeDriver self)

        Nullify the handle


        """
        return _BinMDataStd.Handle_BinMDataStd_UAttributeDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMDataStd_UAttributeDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMDataStd.Handle_BinMDataStd_UAttributeDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMDataStd_UAttributeDriver self, BinMDataStd_UAttributeDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_UAttributeDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMDataStd_UAttributeDriver self, Handle_BinMDataStd_UAttributeDriver theHandle) -> Handle_BinMDataStd_UAttributeDriver
        assign(Handle_BinMDataStd_UAttributeDriver self, BinMDataStd_UAttributeDriver thePtr) -> Handle_BinMDataStd_UAttributeDriver
        assign(Handle_BinMDataStd_UAttributeDriver self, Handle_BinMDataStd_UAttributeDriver theHandle) -> Handle_BinMDataStd_UAttributeDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMDataStd.Handle_BinMDataStd_UAttributeDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMDataStd_UAttributeDriver self) -> BinMDataStd_UAttributeDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_UAttributeDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMDataStd_UAttributeDriver self) -> BinMDataStd_UAttributeDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_UAttributeDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMDataStd_UAttributeDriver self) -> BinMDataStd_UAttributeDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMDataStd.Handle_BinMDataStd_UAttributeDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMDataStd.Handle_BinMDataStd_UAttributeDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMDataStd.Handle_BinMDataStd_UAttributeDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMDataStd.new_Handle_BinMDataStd_UAttributeDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMDataStd.Handle_BinMDataStd_UAttributeDriver_DownCast)
    __swig_destroy__ = _BinMDataStd.delete_Handle_BinMDataStd_UAttributeDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMDataStd_UAttributeDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.Handle_BinMDataStd_UAttributeDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMDataStd_UAttributeDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMDataStd_UAttributeDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.Handle_BinMDataStd_UAttributeDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMDataStd_UAttributeDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.Handle_BinMDataStd_UAttributeDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_UAttributeDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_UAttributeDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_UAttributeDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMDataStd.Handle_BinMDataStd_UAttributeDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMDataStd_UAttributeDriver self)

        Memory deallocator for transient classes


        """
        return _BinMDataStd.Handle_BinMDataStd_UAttributeDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMDataStd_UAttributeDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMDataStd_UAttributeDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_UAttributeDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMDataStd_UAttributeDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMDataStd_UAttributeDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_UAttributeDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMDataStd_UAttributeDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMDataStd.Handle_BinMDataStd_UAttributeDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMDataStd_UAttributeDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_UAttributeDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMDataStd_UAttributeDriver self)

        Increments the reference counter of this object


        """
        return _BinMDataStd.Handle_BinMDataStd_UAttributeDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMDataStd_UAttributeDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_UAttributeDriver_DecrementRefCounter(self, *args)

Handle_BinMDataStd_UAttributeDriver_swigregister = _BinMDataStd.Handle_BinMDataStd_UAttributeDriver_swigregister
Handle_BinMDataStd_UAttributeDriver_swigregister(Handle_BinMDataStd_UAttributeDriver)

def Handle_BinMDataStd_UAttributeDriver_DownCast(thing):
    return _BinMDataStd.Handle_BinMDataStd_UAttributeDriver_DownCast(thing)
Handle_BinMDataStd_UAttributeDriver_DownCast = _BinMDataStd.Handle_BinMDataStd_UAttributeDriver_DownCast

class BinMDataStd_AsciiStringDriver(BinMDF.BinMDF_ADriver):
    """TDataStd_AsciiString attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMDataStd_AsciiStringDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMDataStd_AsciiStringDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMDataStd_AsciiStringDriver self, Handle_Message_Messenger theMessageDriver) -> BinMDataStd_AsciiStringDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMDataStd.new_BinMDataStd_AsciiStringDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMDataStd_AsciiStringDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.BinMDataStd_AsciiStringDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMDataStd_AsciiStringDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMDataStd_AsciiStringDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        transient -> persistent (store)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.BinMDataStd_AsciiStringDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.BinMDataStd_AsciiStringDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMDataStd.BinMDataStd_AsciiStringDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.BinMDataStd_AsciiStringDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMDataStd.delete_BinMDataStd_AsciiStringDriver
BinMDataStd_AsciiStringDriver_swigregister = _BinMDataStd.BinMDataStd_AsciiStringDriver_swigregister
BinMDataStd_AsciiStringDriver_swigregister(BinMDataStd_AsciiStringDriver)

def BinMDataStd_AsciiStringDriver_get_type_name(*args):
    """
    BinMDataStd_AsciiStringDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMDataStd.BinMDataStd_AsciiStringDriver_get_type_name(*args)

def BinMDataStd_AsciiStringDriver_get_type_descriptor(*args):
    """
    BinMDataStd_AsciiStringDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMDataStd.BinMDataStd_AsciiStringDriver_get_type_descriptor(*args)

class BinMDataStd_NameDriver(BinMDF.BinMDF_ADriver):
    """TDataStd_Name attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMDataStd_NameDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMDataStd_NameDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMDataStd_NameDriver self, Handle_Message_Messenger theMessageDriver) -> BinMDataStd_NameDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMDataStd.new_BinMDataStd_NameDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMDataStd_NameDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.BinMDataStd_NameDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMDataStd_NameDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMDataStd_NameDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        transient -> persistent (store)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.BinMDataStd_NameDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.BinMDataStd_NameDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMDataStd.BinMDataStd_NameDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.BinMDataStd_NameDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMDataStd.delete_BinMDataStd_NameDriver
BinMDataStd_NameDriver_swigregister = _BinMDataStd.BinMDataStd_NameDriver_swigregister
BinMDataStd_NameDriver_swigregister(BinMDataStd_NameDriver)

def BinMDataStd_NameDriver_get_type_name(*args):
    """
    BinMDataStd_NameDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMDataStd.BinMDataStd_NameDriver_get_type_name(*args)

def BinMDataStd_NameDriver_get_type_descriptor(*args):
    """
    BinMDataStd_NameDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMDataStd.BinMDataStd_NameDriver_get_type_descriptor(*args)

class Handle_BinMDataStd_ReferenceListDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMDataStd_ReferenceListDriver self)

        Nullify the handle


        """
        return _BinMDataStd.Handle_BinMDataStd_ReferenceListDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMDataStd_ReferenceListDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMDataStd.Handle_BinMDataStd_ReferenceListDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMDataStd_ReferenceListDriver self, BinMDataStd_ReferenceListDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_ReferenceListDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMDataStd_ReferenceListDriver self, Handle_BinMDataStd_ReferenceListDriver theHandle) -> Handle_BinMDataStd_ReferenceListDriver
        assign(Handle_BinMDataStd_ReferenceListDriver self, BinMDataStd_ReferenceListDriver thePtr) -> Handle_BinMDataStd_ReferenceListDriver
        assign(Handle_BinMDataStd_ReferenceListDriver self, Handle_BinMDataStd_ReferenceListDriver theHandle) -> Handle_BinMDataStd_ReferenceListDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMDataStd.Handle_BinMDataStd_ReferenceListDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMDataStd_ReferenceListDriver self) -> BinMDataStd_ReferenceListDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_ReferenceListDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMDataStd_ReferenceListDriver self) -> BinMDataStd_ReferenceListDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_ReferenceListDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMDataStd_ReferenceListDriver self) -> BinMDataStd_ReferenceListDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMDataStd.Handle_BinMDataStd_ReferenceListDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMDataStd.Handle_BinMDataStd_ReferenceListDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMDataStd.Handle_BinMDataStd_ReferenceListDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMDataStd.new_Handle_BinMDataStd_ReferenceListDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMDataStd.Handle_BinMDataStd_ReferenceListDriver_DownCast)
    __swig_destroy__ = _BinMDataStd.delete_Handle_BinMDataStd_ReferenceListDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMDataStd_ReferenceListDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.Handle_BinMDataStd_ReferenceListDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMDataStd_ReferenceListDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMDataStd_ReferenceListDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.Handle_BinMDataStd_ReferenceListDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMDataStd_ReferenceListDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.Handle_BinMDataStd_ReferenceListDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_ReferenceListDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_ReferenceListDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_ReferenceListDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMDataStd.Handle_BinMDataStd_ReferenceListDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMDataStd_ReferenceListDriver self)

        Memory deallocator for transient classes


        """
        return _BinMDataStd.Handle_BinMDataStd_ReferenceListDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMDataStd_ReferenceListDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMDataStd_ReferenceListDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_ReferenceListDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMDataStd_ReferenceListDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMDataStd_ReferenceListDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_ReferenceListDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMDataStd_ReferenceListDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMDataStd.Handle_BinMDataStd_ReferenceListDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMDataStd_ReferenceListDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_ReferenceListDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMDataStd_ReferenceListDriver self)

        Increments the reference counter of this object


        """
        return _BinMDataStd.Handle_BinMDataStd_ReferenceListDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMDataStd_ReferenceListDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_ReferenceListDriver_DecrementRefCounter(self, *args)

Handle_BinMDataStd_ReferenceListDriver_swigregister = _BinMDataStd.Handle_BinMDataStd_ReferenceListDriver_swigregister
Handle_BinMDataStd_ReferenceListDriver_swigregister(Handle_BinMDataStd_ReferenceListDriver)

def Handle_BinMDataStd_ReferenceListDriver_DownCast(thing):
    return _BinMDataStd.Handle_BinMDataStd_ReferenceListDriver_DownCast(thing)
Handle_BinMDataStd_ReferenceListDriver_DownCast = _BinMDataStd.Handle_BinMDataStd_ReferenceListDriver_DownCast

class Handle_BinMDataStd_IntegerListDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMDataStd_IntegerListDriver self)

        Nullify the handle


        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerListDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMDataStd_IntegerListDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerListDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMDataStd_IntegerListDriver self, BinMDataStd_IntegerListDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerListDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMDataStd_IntegerListDriver self, Handle_BinMDataStd_IntegerListDriver theHandle) -> Handle_BinMDataStd_IntegerListDriver
        assign(Handle_BinMDataStd_IntegerListDriver self, BinMDataStd_IntegerListDriver thePtr) -> Handle_BinMDataStd_IntegerListDriver
        assign(Handle_BinMDataStd_IntegerListDriver self, Handle_BinMDataStd_IntegerListDriver theHandle) -> Handle_BinMDataStd_IntegerListDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerListDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMDataStd_IntegerListDriver self) -> BinMDataStd_IntegerListDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerListDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMDataStd_IntegerListDriver self) -> BinMDataStd_IntegerListDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerListDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMDataStd_IntegerListDriver self) -> BinMDataStd_IntegerListDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerListDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMDataStd.Handle_BinMDataStd_IntegerListDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMDataStd.Handle_BinMDataStd_IntegerListDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMDataStd.new_Handle_BinMDataStd_IntegerListDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMDataStd.Handle_BinMDataStd_IntegerListDriver_DownCast)
    __swig_destroy__ = _BinMDataStd.delete_Handle_BinMDataStd_IntegerListDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMDataStd_IntegerListDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerListDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMDataStd_IntegerListDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMDataStd_IntegerListDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerListDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMDataStd_IntegerListDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerListDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_IntegerListDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_IntegerListDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_IntegerListDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMDataStd.Handle_BinMDataStd_IntegerListDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMDataStd_IntegerListDriver self)

        Memory deallocator for transient classes


        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerListDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMDataStd_IntegerListDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMDataStd_IntegerListDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerListDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMDataStd_IntegerListDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMDataStd_IntegerListDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerListDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMDataStd_IntegerListDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerListDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMDataStd_IntegerListDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerListDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMDataStd_IntegerListDriver self)

        Increments the reference counter of this object


        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerListDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMDataStd_IntegerListDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerListDriver_DecrementRefCounter(self, *args)

Handle_BinMDataStd_IntegerListDriver_swigregister = _BinMDataStd.Handle_BinMDataStd_IntegerListDriver_swigregister
Handle_BinMDataStd_IntegerListDriver_swigregister(Handle_BinMDataStd_IntegerListDriver)

def Handle_BinMDataStd_IntegerListDriver_DownCast(thing):
    return _BinMDataStd.Handle_BinMDataStd_IntegerListDriver_DownCast(thing)
Handle_BinMDataStd_IntegerListDriver_DownCast = _BinMDataStd.Handle_BinMDataStd_IntegerListDriver_DownCast

class Handle_BinMDataStd_ExtStringListDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMDataStd_ExtStringListDriver self)

        Nullify the handle


        """
        return _BinMDataStd.Handle_BinMDataStd_ExtStringListDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMDataStd_ExtStringListDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMDataStd.Handle_BinMDataStd_ExtStringListDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMDataStd_ExtStringListDriver self, BinMDataStd_ExtStringListDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_ExtStringListDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMDataStd_ExtStringListDriver self, Handle_BinMDataStd_ExtStringListDriver theHandle) -> Handle_BinMDataStd_ExtStringListDriver
        assign(Handle_BinMDataStd_ExtStringListDriver self, BinMDataStd_ExtStringListDriver thePtr) -> Handle_BinMDataStd_ExtStringListDriver
        assign(Handle_BinMDataStd_ExtStringListDriver self, Handle_BinMDataStd_ExtStringListDriver theHandle) -> Handle_BinMDataStd_ExtStringListDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMDataStd.Handle_BinMDataStd_ExtStringListDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMDataStd_ExtStringListDriver self) -> BinMDataStd_ExtStringListDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_ExtStringListDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMDataStd_ExtStringListDriver self) -> BinMDataStd_ExtStringListDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_ExtStringListDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMDataStd_ExtStringListDriver self) -> BinMDataStd_ExtStringListDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMDataStd.Handle_BinMDataStd_ExtStringListDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMDataStd.Handle_BinMDataStd_ExtStringListDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMDataStd.Handle_BinMDataStd_ExtStringListDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMDataStd.new_Handle_BinMDataStd_ExtStringListDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMDataStd.Handle_BinMDataStd_ExtStringListDriver_DownCast)
    __swig_destroy__ = _BinMDataStd.delete_Handle_BinMDataStd_ExtStringListDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMDataStd_ExtStringListDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.Handle_BinMDataStd_ExtStringListDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMDataStd_ExtStringListDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMDataStd_ExtStringListDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.Handle_BinMDataStd_ExtStringListDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMDataStd_ExtStringListDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.Handle_BinMDataStd_ExtStringListDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_ExtStringListDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_ExtStringListDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_ExtStringListDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMDataStd.Handle_BinMDataStd_ExtStringListDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMDataStd_ExtStringListDriver self)

        Memory deallocator for transient classes


        """
        return _BinMDataStd.Handle_BinMDataStd_ExtStringListDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMDataStd_ExtStringListDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMDataStd_ExtStringListDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_ExtStringListDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMDataStd_ExtStringListDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMDataStd_ExtStringListDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_ExtStringListDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMDataStd_ExtStringListDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMDataStd.Handle_BinMDataStd_ExtStringListDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMDataStd_ExtStringListDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_ExtStringListDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMDataStd_ExtStringListDriver self)

        Increments the reference counter of this object


        """
        return _BinMDataStd.Handle_BinMDataStd_ExtStringListDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMDataStd_ExtStringListDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_ExtStringListDriver_DecrementRefCounter(self, *args)

Handle_BinMDataStd_ExtStringListDriver_swigregister = _BinMDataStd.Handle_BinMDataStd_ExtStringListDriver_swigregister
Handle_BinMDataStd_ExtStringListDriver_swigregister(Handle_BinMDataStd_ExtStringListDriver)

def Handle_BinMDataStd_ExtStringListDriver_DownCast(thing):
    return _BinMDataStd.Handle_BinMDataStd_ExtStringListDriver_DownCast(thing)
Handle_BinMDataStd_ExtStringListDriver_DownCast = _BinMDataStd.Handle_BinMDataStd_ExtStringListDriver_DownCast

class BinMDataStd_(object):
    """Storage and Retrieval drivers for modelling attributes."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddDrivers(*args):
        """
        AddDrivers(Handle_BinMDF_ADriverTable theDriverTable, Handle_Message_Messenger aMsgDrv)

        Adds the attribute drivers to <theDriverTable>.

        :type theDriverTable: OCC.wrapper.BinMDF.Handle_BinMDF_ADriverTable
        :type aMsgDrv: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _BinMDataStd.BinMDataStd__AddDrivers(*args)

    AddDrivers = staticmethod(AddDrivers)

    def SetDocumentVersion(*args):
        """
        SetDocumentVersion(Standard_Integer const DocVersion)

        :type DocVersion: int

        """
        return _BinMDataStd.BinMDataStd__SetDocumentVersion(*args)

    SetDocumentVersion = staticmethod(SetDocumentVersion)

    def DocumentVersion(*args):
        """
        DocumentVersion() -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.BinMDataStd__DocumentVersion(*args)

    DocumentVersion = staticmethod(DocumentVersion)

    def __init__(self):
        """Storage and Retrieval drivers for modelling attributes."""
        this = _BinMDataStd.new_BinMDataStd_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BinMDataStd.delete_BinMDataStd_
BinMDataStd__swigregister = _BinMDataStd.BinMDataStd__swigregister
BinMDataStd__swigregister(BinMDataStd_)

def BinMDataStd__AddDrivers(*args):
    """
    BinMDataStd__AddDrivers(Handle_BinMDF_ADriverTable theDriverTable, Handle_Message_Messenger aMsgDrv)

    Adds the attribute drivers to <theDriverTable>.

    :type theDriverTable: OCC.wrapper.BinMDF.Handle_BinMDF_ADriverTable
    :type aMsgDrv: OCC.wrapper.Message.Handle_Message_Messenger

    """
    return _BinMDataStd.BinMDataStd__AddDrivers(*args)

def BinMDataStd__SetDocumentVersion(*args):
    """
    BinMDataStd__SetDocumentVersion(Standard_Integer const DocVersion)

    :type DocVersion: int

    """
    return _BinMDataStd.BinMDataStd__SetDocumentVersion(*args)

def BinMDataStd__DocumentVersion(*args):
    """
    BinMDataStd__DocumentVersion() -> Standard_Integer

    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _BinMDataStd.BinMDataStd__DocumentVersion(*args)

class BinMDataStd_ByteArrayDriver(BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMDataStd_ByteArrayDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMDataStd_ByteArrayDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMDataStd_ByteArrayDriver self, Handle_Message_Messenger theMessageDriver) -> BinMDataStd_ByteArrayDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMDataStd.new_BinMDataStd_ByteArrayDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMDataStd_ByteArrayDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.BinMDataStd_ByteArrayDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMDataStd_ByteArrayDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMDataStd_ByteArrayDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.BinMDataStd_ByteArrayDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.BinMDataStd_ByteArrayDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMDataStd.BinMDataStd_ByteArrayDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.BinMDataStd_ByteArrayDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMDataStd.delete_BinMDataStd_ByteArrayDriver
BinMDataStd_ByteArrayDriver_swigregister = _BinMDataStd.BinMDataStd_ByteArrayDriver_swigregister
BinMDataStd_ByteArrayDriver_swigregister(BinMDataStd_ByteArrayDriver)

def BinMDataStd_ByteArrayDriver_get_type_name(*args):
    """
    BinMDataStd_ByteArrayDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMDataStd.BinMDataStd_ByteArrayDriver_get_type_name(*args)

def BinMDataStd_ByteArrayDriver_get_type_descriptor(*args):
    """
    BinMDataStd_ByteArrayDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMDataStd.BinMDataStd_ByteArrayDriver_get_type_descriptor(*args)

class BinMDataStd_NoteBookDriver(BinMDF.BinMDF_ADriver):
    """NoteBook attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMDataStd_NoteBookDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMDataStd_NoteBookDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMDataStd_NoteBookDriver self, Handle_Message_Messenger theMessageDriver) -> BinMDataStd_NoteBookDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMDataStd.new_BinMDataStd_NoteBookDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMDataStd_NoteBookDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.BinMDataStd_NoteBookDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMDataStd_NoteBookDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMDataStd_NoteBookDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.BinMDataStd_NoteBookDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.BinMDataStd_NoteBookDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMDataStd.BinMDataStd_NoteBookDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.BinMDataStd_NoteBookDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMDataStd.delete_BinMDataStd_NoteBookDriver
BinMDataStd_NoteBookDriver_swigregister = _BinMDataStd.BinMDataStd_NoteBookDriver_swigregister
BinMDataStd_NoteBookDriver_swigregister(BinMDataStd_NoteBookDriver)

def BinMDataStd_NoteBookDriver_get_type_name(*args):
    """
    BinMDataStd_NoteBookDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMDataStd.BinMDataStd_NoteBookDriver_get_type_name(*args)

def BinMDataStd_NoteBookDriver_get_type_descriptor(*args):
    """
    BinMDataStd_NoteBookDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMDataStd.BinMDataStd_NoteBookDriver_get_type_descriptor(*args)

class BinMDataStd_RealDriver(BinMDF.BinMDF_ADriver):
    """Real attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMDataStd_RealDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMDataStd_RealDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMDataStd_RealDriver self, Handle_Message_Messenger theMessageDriver) -> BinMDataStd_RealDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMDataStd.new_BinMDataStd_RealDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMDataStd_RealDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.BinMDataStd_RealDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMDataStd_RealDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMDataStd_RealDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.BinMDataStd_RealDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.BinMDataStd_RealDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMDataStd.BinMDataStd_RealDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.BinMDataStd_RealDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMDataStd.delete_BinMDataStd_RealDriver
BinMDataStd_RealDriver_swigregister = _BinMDataStd.BinMDataStd_RealDriver_swigregister
BinMDataStd_RealDriver_swigregister(BinMDataStd_RealDriver)

def BinMDataStd_RealDriver_get_type_name(*args):
    """
    BinMDataStd_RealDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMDataStd.BinMDataStd_RealDriver_get_type_name(*args)

def BinMDataStd_RealDriver_get_type_descriptor(*args):
    """
    BinMDataStd_RealDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMDataStd.BinMDataStd_RealDriver_get_type_descriptor(*args)

class Handle_BinMDataStd_NoteBookDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMDataStd_NoteBookDriver self)

        Nullify the handle


        """
        return _BinMDataStd.Handle_BinMDataStd_NoteBookDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMDataStd_NoteBookDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMDataStd.Handle_BinMDataStd_NoteBookDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMDataStd_NoteBookDriver self, BinMDataStd_NoteBookDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_NoteBookDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMDataStd_NoteBookDriver self, Handle_BinMDataStd_NoteBookDriver theHandle) -> Handle_BinMDataStd_NoteBookDriver
        assign(Handle_BinMDataStd_NoteBookDriver self, BinMDataStd_NoteBookDriver thePtr) -> Handle_BinMDataStd_NoteBookDriver
        assign(Handle_BinMDataStd_NoteBookDriver self, Handle_BinMDataStd_NoteBookDriver theHandle) -> Handle_BinMDataStd_NoteBookDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMDataStd.Handle_BinMDataStd_NoteBookDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMDataStd_NoteBookDriver self) -> BinMDataStd_NoteBookDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_NoteBookDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMDataStd_NoteBookDriver self) -> BinMDataStd_NoteBookDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_NoteBookDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMDataStd_NoteBookDriver self) -> BinMDataStd_NoteBookDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMDataStd.Handle_BinMDataStd_NoteBookDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMDataStd.Handle_BinMDataStd_NoteBookDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMDataStd.Handle_BinMDataStd_NoteBookDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMDataStd.new_Handle_BinMDataStd_NoteBookDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMDataStd.Handle_BinMDataStd_NoteBookDriver_DownCast)
    __swig_destroy__ = _BinMDataStd.delete_Handle_BinMDataStd_NoteBookDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMDataStd_NoteBookDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.Handle_BinMDataStd_NoteBookDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMDataStd_NoteBookDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMDataStd_NoteBookDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.Handle_BinMDataStd_NoteBookDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMDataStd_NoteBookDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.Handle_BinMDataStd_NoteBookDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_NoteBookDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_NoteBookDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_NoteBookDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMDataStd.Handle_BinMDataStd_NoteBookDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMDataStd_NoteBookDriver self)

        Memory deallocator for transient classes


        """
        return _BinMDataStd.Handle_BinMDataStd_NoteBookDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMDataStd_NoteBookDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMDataStd_NoteBookDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_NoteBookDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMDataStd_NoteBookDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMDataStd_NoteBookDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_NoteBookDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMDataStd_NoteBookDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMDataStd.Handle_BinMDataStd_NoteBookDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMDataStd_NoteBookDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_NoteBookDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMDataStd_NoteBookDriver self)

        Increments the reference counter of this object


        """
        return _BinMDataStd.Handle_BinMDataStd_NoteBookDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMDataStd_NoteBookDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_NoteBookDriver_DecrementRefCounter(self, *args)

Handle_BinMDataStd_NoteBookDriver_swigregister = _BinMDataStd.Handle_BinMDataStd_NoteBookDriver_swigregister
Handle_BinMDataStd_NoteBookDriver_swigregister(Handle_BinMDataStd_NoteBookDriver)

def Handle_BinMDataStd_NoteBookDriver_DownCast(thing):
    return _BinMDataStd.Handle_BinMDataStd_NoteBookDriver_DownCast(thing)
Handle_BinMDataStd_NoteBookDriver_DownCast = _BinMDataStd.Handle_BinMDataStd_NoteBookDriver_DownCast

class Handle_BinMDataStd_BooleanArrayDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMDataStd_BooleanArrayDriver self)

        Nullify the handle


        """
        return _BinMDataStd.Handle_BinMDataStd_BooleanArrayDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMDataStd_BooleanArrayDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMDataStd.Handle_BinMDataStd_BooleanArrayDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMDataStd_BooleanArrayDriver self, BinMDataStd_BooleanArrayDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_BooleanArrayDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMDataStd_BooleanArrayDriver self, Handle_BinMDataStd_BooleanArrayDriver theHandle) -> Handle_BinMDataStd_BooleanArrayDriver
        assign(Handle_BinMDataStd_BooleanArrayDriver self, BinMDataStd_BooleanArrayDriver thePtr) -> Handle_BinMDataStd_BooleanArrayDriver
        assign(Handle_BinMDataStd_BooleanArrayDriver self, Handle_BinMDataStd_BooleanArrayDriver theHandle) -> Handle_BinMDataStd_BooleanArrayDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMDataStd.Handle_BinMDataStd_BooleanArrayDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMDataStd_BooleanArrayDriver self) -> BinMDataStd_BooleanArrayDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_BooleanArrayDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMDataStd_BooleanArrayDriver self) -> BinMDataStd_BooleanArrayDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_BooleanArrayDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMDataStd_BooleanArrayDriver self) -> BinMDataStd_BooleanArrayDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMDataStd.Handle_BinMDataStd_BooleanArrayDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMDataStd.Handle_BinMDataStd_BooleanArrayDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMDataStd.Handle_BinMDataStd_BooleanArrayDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMDataStd.new_Handle_BinMDataStd_BooleanArrayDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMDataStd.Handle_BinMDataStd_BooleanArrayDriver_DownCast)
    __swig_destroy__ = _BinMDataStd.delete_Handle_BinMDataStd_BooleanArrayDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMDataStd_BooleanArrayDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.Handle_BinMDataStd_BooleanArrayDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMDataStd_BooleanArrayDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMDataStd_BooleanArrayDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.Handle_BinMDataStd_BooleanArrayDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMDataStd_BooleanArrayDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.Handle_BinMDataStd_BooleanArrayDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_BooleanArrayDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_BooleanArrayDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_BooleanArrayDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMDataStd.Handle_BinMDataStd_BooleanArrayDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMDataStd_BooleanArrayDriver self)

        Memory deallocator for transient classes


        """
        return _BinMDataStd.Handle_BinMDataStd_BooleanArrayDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMDataStd_BooleanArrayDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMDataStd_BooleanArrayDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_BooleanArrayDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMDataStd_BooleanArrayDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMDataStd_BooleanArrayDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_BooleanArrayDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMDataStd_BooleanArrayDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMDataStd.Handle_BinMDataStd_BooleanArrayDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMDataStd_BooleanArrayDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_BooleanArrayDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMDataStd_BooleanArrayDriver self)

        Increments the reference counter of this object


        """
        return _BinMDataStd.Handle_BinMDataStd_BooleanArrayDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMDataStd_BooleanArrayDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_BooleanArrayDriver_DecrementRefCounter(self, *args)

Handle_BinMDataStd_BooleanArrayDriver_swigregister = _BinMDataStd.Handle_BinMDataStd_BooleanArrayDriver_swigregister
Handle_BinMDataStd_BooleanArrayDriver_swigregister(Handle_BinMDataStd_BooleanArrayDriver)

def Handle_BinMDataStd_BooleanArrayDriver_DownCast(thing):
    return _BinMDataStd.Handle_BinMDataStd_BooleanArrayDriver_DownCast(thing)
Handle_BinMDataStd_BooleanArrayDriver_DownCast = _BinMDataStd.Handle_BinMDataStd_BooleanArrayDriver_DownCast

class BinMDataStd_IntegerArrayDriver(BinMDF.BinMDF_ADriver):
    """Array of Integer attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMDataStd_IntegerArrayDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMDataStd_IntegerArrayDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMDataStd_IntegerArrayDriver self, Handle_Message_Messenger theMessageDriver) -> BinMDataStd_IntegerArrayDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMDataStd.new_BinMDataStd_IntegerArrayDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMDataStd_IntegerArrayDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.BinMDataStd_IntegerArrayDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMDataStd_IntegerArrayDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMDataStd_IntegerArrayDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.BinMDataStd_IntegerArrayDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.BinMDataStd_IntegerArrayDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMDataStd.BinMDataStd_IntegerArrayDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.BinMDataStd_IntegerArrayDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMDataStd.delete_BinMDataStd_IntegerArrayDriver
BinMDataStd_IntegerArrayDriver_swigregister = _BinMDataStd.BinMDataStd_IntegerArrayDriver_swigregister
BinMDataStd_IntegerArrayDriver_swigregister(BinMDataStd_IntegerArrayDriver)

def BinMDataStd_IntegerArrayDriver_get_type_name(*args):
    """
    BinMDataStd_IntegerArrayDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMDataStd.BinMDataStd_IntegerArrayDriver_get_type_name(*args)

def BinMDataStd_IntegerArrayDriver_get_type_descriptor(*args):
    """
    BinMDataStd_IntegerArrayDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMDataStd.BinMDataStd_IntegerArrayDriver_get_type_descriptor(*args)

class Handle_BinMDataStd_RelationDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMDataStd_RelationDriver self)

        Nullify the handle


        """
        return _BinMDataStd.Handle_BinMDataStd_RelationDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMDataStd_RelationDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMDataStd.Handle_BinMDataStd_RelationDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMDataStd_RelationDriver self, BinMDataStd_RelationDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_RelationDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMDataStd_RelationDriver self, Handle_BinMDataStd_RelationDriver theHandle) -> Handle_BinMDataStd_RelationDriver
        assign(Handle_BinMDataStd_RelationDriver self, BinMDataStd_RelationDriver thePtr) -> Handle_BinMDataStd_RelationDriver
        assign(Handle_BinMDataStd_RelationDriver self, Handle_BinMDataStd_RelationDriver theHandle) -> Handle_BinMDataStd_RelationDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMDataStd.Handle_BinMDataStd_RelationDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMDataStd_RelationDriver self) -> BinMDataStd_RelationDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_RelationDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMDataStd_RelationDriver self) -> BinMDataStd_RelationDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_RelationDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMDataStd_RelationDriver self) -> BinMDataStd_RelationDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMDataStd.Handle_BinMDataStd_RelationDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMDataStd.Handle_BinMDataStd_RelationDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMDataStd.Handle_BinMDataStd_RelationDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMDataStd.new_Handle_BinMDataStd_RelationDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMDataStd.Handle_BinMDataStd_RelationDriver_DownCast)
    __swig_destroy__ = _BinMDataStd.delete_Handle_BinMDataStd_RelationDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMDataStd_RelationDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.Handle_BinMDataStd_RelationDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMDataStd_RelationDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMDataStd_RelationDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.Handle_BinMDataStd_RelationDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMDataStd_RelationDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.Handle_BinMDataStd_RelationDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_RelationDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_RelationDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_RelationDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMDataStd.Handle_BinMDataStd_RelationDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMDataStd_RelationDriver self)

        Memory deallocator for transient classes


        """
        return _BinMDataStd.Handle_BinMDataStd_RelationDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMDataStd_RelationDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMDataStd_RelationDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_RelationDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMDataStd_RelationDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMDataStd_RelationDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_RelationDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMDataStd_RelationDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMDataStd.Handle_BinMDataStd_RelationDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMDataStd_RelationDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_RelationDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMDataStd_RelationDriver self)

        Increments the reference counter of this object


        """
        return _BinMDataStd.Handle_BinMDataStd_RelationDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMDataStd_RelationDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_RelationDriver_DecrementRefCounter(self, *args)

Handle_BinMDataStd_RelationDriver_swigregister = _BinMDataStd.Handle_BinMDataStd_RelationDriver_swigregister
Handle_BinMDataStd_RelationDriver_swigregister(Handle_BinMDataStd_RelationDriver)

def Handle_BinMDataStd_RelationDriver_DownCast(thing):
    return _BinMDataStd.Handle_BinMDataStd_RelationDriver_DownCast(thing)
Handle_BinMDataStd_RelationDriver_DownCast = _BinMDataStd.Handle_BinMDataStd_RelationDriver_DownCast

class Handle_BinMDataStd_IntegerArrayDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMDataStd_IntegerArrayDriver self)

        Nullify the handle


        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerArrayDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMDataStd_IntegerArrayDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerArrayDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMDataStd_IntegerArrayDriver self, BinMDataStd_IntegerArrayDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerArrayDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMDataStd_IntegerArrayDriver self, Handle_BinMDataStd_IntegerArrayDriver theHandle) -> Handle_BinMDataStd_IntegerArrayDriver
        assign(Handle_BinMDataStd_IntegerArrayDriver self, BinMDataStd_IntegerArrayDriver thePtr) -> Handle_BinMDataStd_IntegerArrayDriver
        assign(Handle_BinMDataStd_IntegerArrayDriver self, Handle_BinMDataStd_IntegerArrayDriver theHandle) -> Handle_BinMDataStd_IntegerArrayDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerArrayDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMDataStd_IntegerArrayDriver self) -> BinMDataStd_IntegerArrayDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerArrayDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMDataStd_IntegerArrayDriver self) -> BinMDataStd_IntegerArrayDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerArrayDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMDataStd_IntegerArrayDriver self) -> BinMDataStd_IntegerArrayDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerArrayDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMDataStd.Handle_BinMDataStd_IntegerArrayDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMDataStd.Handle_BinMDataStd_IntegerArrayDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMDataStd.new_Handle_BinMDataStd_IntegerArrayDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMDataStd.Handle_BinMDataStd_IntegerArrayDriver_DownCast)
    __swig_destroy__ = _BinMDataStd.delete_Handle_BinMDataStd_IntegerArrayDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMDataStd_IntegerArrayDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerArrayDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMDataStd_IntegerArrayDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMDataStd_IntegerArrayDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerArrayDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMDataStd_IntegerArrayDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerArrayDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_IntegerArrayDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_IntegerArrayDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_IntegerArrayDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMDataStd.Handle_BinMDataStd_IntegerArrayDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMDataStd_IntegerArrayDriver self)

        Memory deallocator for transient classes


        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerArrayDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMDataStd_IntegerArrayDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMDataStd_IntegerArrayDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerArrayDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMDataStd_IntegerArrayDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMDataStd_IntegerArrayDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerArrayDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMDataStd_IntegerArrayDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerArrayDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMDataStd_IntegerArrayDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerArrayDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMDataStd_IntegerArrayDriver self)

        Increments the reference counter of this object


        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerArrayDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMDataStd_IntegerArrayDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_IntegerArrayDriver_DecrementRefCounter(self, *args)

Handle_BinMDataStd_IntegerArrayDriver_swigregister = _BinMDataStd.Handle_BinMDataStd_IntegerArrayDriver_swigregister
Handle_BinMDataStd_IntegerArrayDriver_swigregister(Handle_BinMDataStd_IntegerArrayDriver)

def Handle_BinMDataStd_IntegerArrayDriver_DownCast(thing):
    return _BinMDataStd.Handle_BinMDataStd_IntegerArrayDriver_DownCast(thing)
Handle_BinMDataStd_IntegerArrayDriver_DownCast = _BinMDataStd.Handle_BinMDataStd_IntegerArrayDriver_DownCast

class Handle_BinMDataStd_ReferenceArrayDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMDataStd_ReferenceArrayDriver self)

        Nullify the handle


        """
        return _BinMDataStd.Handle_BinMDataStd_ReferenceArrayDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMDataStd_ReferenceArrayDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMDataStd.Handle_BinMDataStd_ReferenceArrayDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMDataStd_ReferenceArrayDriver self, BinMDataStd_ReferenceArrayDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_ReferenceArrayDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMDataStd_ReferenceArrayDriver self, Handle_BinMDataStd_ReferenceArrayDriver theHandle) -> Handle_BinMDataStd_ReferenceArrayDriver
        assign(Handle_BinMDataStd_ReferenceArrayDriver self, BinMDataStd_ReferenceArrayDriver thePtr) -> Handle_BinMDataStd_ReferenceArrayDriver
        assign(Handle_BinMDataStd_ReferenceArrayDriver self, Handle_BinMDataStd_ReferenceArrayDriver theHandle) -> Handle_BinMDataStd_ReferenceArrayDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMDataStd.Handle_BinMDataStd_ReferenceArrayDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMDataStd_ReferenceArrayDriver self) -> BinMDataStd_ReferenceArrayDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_ReferenceArrayDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMDataStd_ReferenceArrayDriver self) -> BinMDataStd_ReferenceArrayDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_ReferenceArrayDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMDataStd_ReferenceArrayDriver self) -> BinMDataStd_ReferenceArrayDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMDataStd.Handle_BinMDataStd_ReferenceArrayDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMDataStd.Handle_BinMDataStd_ReferenceArrayDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMDataStd.Handle_BinMDataStd_ReferenceArrayDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMDataStd.new_Handle_BinMDataStd_ReferenceArrayDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMDataStd.Handle_BinMDataStd_ReferenceArrayDriver_DownCast)
    __swig_destroy__ = _BinMDataStd.delete_Handle_BinMDataStd_ReferenceArrayDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMDataStd_ReferenceArrayDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.Handle_BinMDataStd_ReferenceArrayDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMDataStd_ReferenceArrayDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMDataStd_ReferenceArrayDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.Handle_BinMDataStd_ReferenceArrayDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMDataStd_ReferenceArrayDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.Handle_BinMDataStd_ReferenceArrayDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_ReferenceArrayDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_ReferenceArrayDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_ReferenceArrayDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMDataStd.Handle_BinMDataStd_ReferenceArrayDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMDataStd_ReferenceArrayDriver self)

        Memory deallocator for transient classes


        """
        return _BinMDataStd.Handle_BinMDataStd_ReferenceArrayDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMDataStd_ReferenceArrayDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMDataStd_ReferenceArrayDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_ReferenceArrayDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMDataStd_ReferenceArrayDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMDataStd_ReferenceArrayDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_ReferenceArrayDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMDataStd_ReferenceArrayDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMDataStd.Handle_BinMDataStd_ReferenceArrayDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMDataStd_ReferenceArrayDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_ReferenceArrayDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMDataStd_ReferenceArrayDriver self)

        Increments the reference counter of this object


        """
        return _BinMDataStd.Handle_BinMDataStd_ReferenceArrayDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMDataStd_ReferenceArrayDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_ReferenceArrayDriver_DecrementRefCounter(self, *args)

Handle_BinMDataStd_ReferenceArrayDriver_swigregister = _BinMDataStd.Handle_BinMDataStd_ReferenceArrayDriver_swigregister
Handle_BinMDataStd_ReferenceArrayDriver_swigregister(Handle_BinMDataStd_ReferenceArrayDriver)

def Handle_BinMDataStd_ReferenceArrayDriver_DownCast(thing):
    return _BinMDataStd.Handle_BinMDataStd_ReferenceArrayDriver_DownCast(thing)
Handle_BinMDataStd_ReferenceArrayDriver_DownCast = _BinMDataStd.Handle_BinMDataStd_ReferenceArrayDriver_DownCast

class Handle_BinMDataStd_RealDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMDataStd_RealDriver self)

        Nullify the handle


        """
        return _BinMDataStd.Handle_BinMDataStd_RealDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMDataStd_RealDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMDataStd.Handle_BinMDataStd_RealDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMDataStd_RealDriver self, BinMDataStd_RealDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_RealDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMDataStd_RealDriver self, Handle_BinMDataStd_RealDriver theHandle) -> Handle_BinMDataStd_RealDriver
        assign(Handle_BinMDataStd_RealDriver self, BinMDataStd_RealDriver thePtr) -> Handle_BinMDataStd_RealDriver
        assign(Handle_BinMDataStd_RealDriver self, Handle_BinMDataStd_RealDriver theHandle) -> Handle_BinMDataStd_RealDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMDataStd.Handle_BinMDataStd_RealDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMDataStd_RealDriver self) -> BinMDataStd_RealDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_RealDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMDataStd_RealDriver self) -> BinMDataStd_RealDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_RealDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMDataStd_RealDriver self) -> BinMDataStd_RealDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMDataStd.Handle_BinMDataStd_RealDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMDataStd.Handle_BinMDataStd_RealDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMDataStd.Handle_BinMDataStd_RealDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMDataStd.new_Handle_BinMDataStd_RealDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMDataStd.Handle_BinMDataStd_RealDriver_DownCast)
    __swig_destroy__ = _BinMDataStd.delete_Handle_BinMDataStd_RealDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMDataStd_RealDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.Handle_BinMDataStd_RealDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMDataStd_RealDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMDataStd_RealDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.Handle_BinMDataStd_RealDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMDataStd_RealDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.Handle_BinMDataStd_RealDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_RealDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_RealDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_RealDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMDataStd.Handle_BinMDataStd_RealDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMDataStd_RealDriver self)

        Memory deallocator for transient classes


        """
        return _BinMDataStd.Handle_BinMDataStd_RealDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMDataStd_RealDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMDataStd_RealDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_RealDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMDataStd_RealDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMDataStd_RealDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_RealDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMDataStd_RealDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMDataStd.Handle_BinMDataStd_RealDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMDataStd_RealDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_RealDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMDataStd_RealDriver self)

        Increments the reference counter of this object


        """
        return _BinMDataStd.Handle_BinMDataStd_RealDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMDataStd_RealDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_RealDriver_DecrementRefCounter(self, *args)

Handle_BinMDataStd_RealDriver_swigregister = _BinMDataStd.Handle_BinMDataStd_RealDriver_swigregister
Handle_BinMDataStd_RealDriver_swigregister(Handle_BinMDataStd_RealDriver)

def Handle_BinMDataStd_RealDriver_DownCast(thing):
    return _BinMDataStd.Handle_BinMDataStd_RealDriver_DownCast(thing)
Handle_BinMDataStd_RealDriver_DownCast = _BinMDataStd.Handle_BinMDataStd_RealDriver_DownCast

class BinMDataStd_DirectoryDriver(BinMDF.BinMDF_ADriver):
    """Directory attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMDataStd_DirectoryDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMDataStd_DirectoryDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMDataStd_DirectoryDriver self, Handle_Message_Messenger theMessageDriver) -> BinMDataStd_DirectoryDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMDataStd.new_BinMDataStd_DirectoryDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMDataStd_DirectoryDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.BinMDataStd_DirectoryDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMDataStd_DirectoryDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMDataStd_DirectoryDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.BinMDataStd_DirectoryDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.BinMDataStd_DirectoryDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMDataStd.BinMDataStd_DirectoryDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.BinMDataStd_DirectoryDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMDataStd.delete_BinMDataStd_DirectoryDriver
BinMDataStd_DirectoryDriver_swigregister = _BinMDataStd.BinMDataStd_DirectoryDriver_swigregister
BinMDataStd_DirectoryDriver_swigregister(BinMDataStd_DirectoryDriver)

def BinMDataStd_DirectoryDriver_get_type_name(*args):
    """
    BinMDataStd_DirectoryDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMDataStd.BinMDataStd_DirectoryDriver_get_type_name(*args)

def BinMDataStd_DirectoryDriver_get_type_descriptor(*args):
    """
    BinMDataStd_DirectoryDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMDataStd.BinMDataStd_DirectoryDriver_get_type_descriptor(*args)

class BinMDataStd_VariableDriver(BinMDF.BinMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMDataStd_VariableDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMDataStd_VariableDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMDataStd_VariableDriver self, Handle_Message_Messenger theMessageDriver) -> BinMDataStd_VariableDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMDataStd.new_BinMDataStd_VariableDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMDataStd_VariableDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.BinMDataStd_VariableDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMDataStd_VariableDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMDataStd_VariableDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.BinMDataStd_VariableDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.BinMDataStd_VariableDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMDataStd.BinMDataStd_VariableDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.BinMDataStd_VariableDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMDataStd.delete_BinMDataStd_VariableDriver
BinMDataStd_VariableDriver_swigregister = _BinMDataStd.BinMDataStd_VariableDriver_swigregister
BinMDataStd_VariableDriver_swigregister(BinMDataStd_VariableDriver)

def BinMDataStd_VariableDriver_get_type_name(*args):
    """
    BinMDataStd_VariableDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMDataStd.BinMDataStd_VariableDriver_get_type_name(*args)

def BinMDataStd_VariableDriver_get_type_descriptor(*args):
    """
    BinMDataStd_VariableDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMDataStd.BinMDataStd_VariableDriver_get_type_descriptor(*args)

class BinMDataStd_NamedDataDriver(BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMDataStd_NamedDataDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMDataStd_NamedDataDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMDataStd_NamedDataDriver self, Handle_Message_Messenger theMessageDriver) -> BinMDataStd_NamedDataDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMDataStd.new_BinMDataStd_NamedDataDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMDataStd_NamedDataDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.BinMDataStd_NamedDataDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMDataStd_NamedDataDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMDataStd_NamedDataDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.BinMDataStd_NamedDataDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.BinMDataStd_NamedDataDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMDataStd.BinMDataStd_NamedDataDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.BinMDataStd_NamedDataDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMDataStd.delete_BinMDataStd_NamedDataDriver
BinMDataStd_NamedDataDriver_swigregister = _BinMDataStd.BinMDataStd_NamedDataDriver_swigregister
BinMDataStd_NamedDataDriver_swigregister(BinMDataStd_NamedDataDriver)

def BinMDataStd_NamedDataDriver_get_type_name(*args):
    """
    BinMDataStd_NamedDataDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMDataStd.BinMDataStd_NamedDataDriver_get_type_name(*args)

def BinMDataStd_NamedDataDriver_get_type_descriptor(*args):
    """
    BinMDataStd_NamedDataDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMDataStd.BinMDataStd_NamedDataDriver_get_type_descriptor(*args)

class BinMDataStd_IntPackedMapDriver(BinMDF.BinMDF_ADriver):
    """TDataStd_IntPackedMap attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMDataStd_IntPackedMapDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMDataStd_IntPackedMapDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMDataStd_IntPackedMapDriver self, Handle_Message_Messenger theMessageDriver) -> BinMDataStd_IntPackedMapDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMDataStd.new_BinMDataStd_IntPackedMapDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMDataStd_IntPackedMapDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.BinMDataStd_IntPackedMapDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMDataStd_IntPackedMapDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMDataStd_IntPackedMapDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        transient -> persistent (store)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.BinMDataStd_IntPackedMapDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.BinMDataStd_IntPackedMapDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMDataStd.BinMDataStd_IntPackedMapDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.BinMDataStd_IntPackedMapDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMDataStd.delete_BinMDataStd_IntPackedMapDriver
BinMDataStd_IntPackedMapDriver_swigregister = _BinMDataStd.BinMDataStd_IntPackedMapDriver_swigregister
BinMDataStd_IntPackedMapDriver_swigregister(BinMDataStd_IntPackedMapDriver)

def BinMDataStd_IntPackedMapDriver_get_type_name(*args):
    """
    BinMDataStd_IntPackedMapDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMDataStd.BinMDataStd_IntPackedMapDriver_get_type_name(*args)

def BinMDataStd_IntPackedMapDriver_get_type_descriptor(*args):
    """
    BinMDataStd_IntPackedMapDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMDataStd.BinMDataStd_IntPackedMapDriver_get_type_descriptor(*args)

class Handle_BinMDataStd_ByteArrayDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMDataStd_ByteArrayDriver self)

        Nullify the handle


        """
        return _BinMDataStd.Handle_BinMDataStd_ByteArrayDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMDataStd_ByteArrayDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMDataStd.Handle_BinMDataStd_ByteArrayDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMDataStd_ByteArrayDriver self, BinMDataStd_ByteArrayDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_ByteArrayDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMDataStd_ByteArrayDriver self, Handle_BinMDataStd_ByteArrayDriver theHandle) -> Handle_BinMDataStd_ByteArrayDriver
        assign(Handle_BinMDataStd_ByteArrayDriver self, BinMDataStd_ByteArrayDriver thePtr) -> Handle_BinMDataStd_ByteArrayDriver
        assign(Handle_BinMDataStd_ByteArrayDriver self, Handle_BinMDataStd_ByteArrayDriver theHandle) -> Handle_BinMDataStd_ByteArrayDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMDataStd.Handle_BinMDataStd_ByteArrayDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMDataStd_ByteArrayDriver self) -> BinMDataStd_ByteArrayDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_ByteArrayDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMDataStd_ByteArrayDriver self) -> BinMDataStd_ByteArrayDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_ByteArrayDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMDataStd_ByteArrayDriver self) -> BinMDataStd_ByteArrayDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMDataStd.Handle_BinMDataStd_ByteArrayDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMDataStd.Handle_BinMDataStd_ByteArrayDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMDataStd.Handle_BinMDataStd_ByteArrayDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMDataStd.new_Handle_BinMDataStd_ByteArrayDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMDataStd.Handle_BinMDataStd_ByteArrayDriver_DownCast)
    __swig_destroy__ = _BinMDataStd.delete_Handle_BinMDataStd_ByteArrayDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMDataStd_ByteArrayDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.Handle_BinMDataStd_ByteArrayDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMDataStd_ByteArrayDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMDataStd_ByteArrayDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.Handle_BinMDataStd_ByteArrayDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMDataStd_ByteArrayDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.Handle_BinMDataStd_ByteArrayDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_ByteArrayDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_ByteArrayDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_ByteArrayDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMDataStd.Handle_BinMDataStd_ByteArrayDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMDataStd_ByteArrayDriver self)

        Memory deallocator for transient classes


        """
        return _BinMDataStd.Handle_BinMDataStd_ByteArrayDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMDataStd_ByteArrayDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMDataStd_ByteArrayDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_ByteArrayDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMDataStd_ByteArrayDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMDataStd_ByteArrayDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_ByteArrayDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMDataStd_ByteArrayDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMDataStd.Handle_BinMDataStd_ByteArrayDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMDataStd_ByteArrayDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_ByteArrayDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMDataStd_ByteArrayDriver self)

        Increments the reference counter of this object


        """
        return _BinMDataStd.Handle_BinMDataStd_ByteArrayDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMDataStd_ByteArrayDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_ByteArrayDriver_DecrementRefCounter(self, *args)

Handle_BinMDataStd_ByteArrayDriver_swigregister = _BinMDataStd.Handle_BinMDataStd_ByteArrayDriver_swigregister
Handle_BinMDataStd_ByteArrayDriver_swigregister(Handle_BinMDataStd_ByteArrayDriver)

def Handle_BinMDataStd_ByteArrayDriver_DownCast(thing):
    return _BinMDataStd.Handle_BinMDataStd_ByteArrayDriver_DownCast(thing)
Handle_BinMDataStd_ByteArrayDriver_DownCast = _BinMDataStd.Handle_BinMDataStd_ByteArrayDriver_DownCast

class Handle_BinMDataStd_AsciiStringDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMDataStd_AsciiStringDriver self)

        Nullify the handle


        """
        return _BinMDataStd.Handle_BinMDataStd_AsciiStringDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMDataStd_AsciiStringDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMDataStd.Handle_BinMDataStd_AsciiStringDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMDataStd_AsciiStringDriver self, BinMDataStd_AsciiStringDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_AsciiStringDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMDataStd_AsciiStringDriver self, Handle_BinMDataStd_AsciiStringDriver theHandle) -> Handle_BinMDataStd_AsciiStringDriver
        assign(Handle_BinMDataStd_AsciiStringDriver self, BinMDataStd_AsciiStringDriver thePtr) -> Handle_BinMDataStd_AsciiStringDriver
        assign(Handle_BinMDataStd_AsciiStringDriver self, Handle_BinMDataStd_AsciiStringDriver theHandle) -> Handle_BinMDataStd_AsciiStringDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMDataStd.Handle_BinMDataStd_AsciiStringDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMDataStd_AsciiStringDriver self) -> BinMDataStd_AsciiStringDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_AsciiStringDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMDataStd_AsciiStringDriver self) -> BinMDataStd_AsciiStringDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_AsciiStringDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMDataStd_AsciiStringDriver self) -> BinMDataStd_AsciiStringDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMDataStd.Handle_BinMDataStd_AsciiStringDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMDataStd.Handle_BinMDataStd_AsciiStringDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMDataStd.Handle_BinMDataStd_AsciiStringDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMDataStd.new_Handle_BinMDataStd_AsciiStringDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMDataStd.Handle_BinMDataStd_AsciiStringDriver_DownCast)
    __swig_destroy__ = _BinMDataStd.delete_Handle_BinMDataStd_AsciiStringDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMDataStd_AsciiStringDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.Handle_BinMDataStd_AsciiStringDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMDataStd_AsciiStringDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMDataStd_AsciiStringDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        transient -> persistent (store)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.Handle_BinMDataStd_AsciiStringDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMDataStd_AsciiStringDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.Handle_BinMDataStd_AsciiStringDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_AsciiStringDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_AsciiStringDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_AsciiStringDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMDataStd.Handle_BinMDataStd_AsciiStringDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMDataStd_AsciiStringDriver self)

        Memory deallocator for transient classes


        """
        return _BinMDataStd.Handle_BinMDataStd_AsciiStringDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMDataStd_AsciiStringDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMDataStd_AsciiStringDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_AsciiStringDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMDataStd_AsciiStringDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMDataStd_AsciiStringDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_AsciiStringDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMDataStd_AsciiStringDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMDataStd.Handle_BinMDataStd_AsciiStringDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMDataStd_AsciiStringDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_AsciiStringDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMDataStd_AsciiStringDriver self)

        Increments the reference counter of this object


        """
        return _BinMDataStd.Handle_BinMDataStd_AsciiStringDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMDataStd_AsciiStringDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_AsciiStringDriver_DecrementRefCounter(self, *args)

Handle_BinMDataStd_AsciiStringDriver_swigregister = _BinMDataStd.Handle_BinMDataStd_AsciiStringDriver_swigregister
Handle_BinMDataStd_AsciiStringDriver_swigregister(Handle_BinMDataStd_AsciiStringDriver)

def Handle_BinMDataStd_AsciiStringDriver_DownCast(thing):
    return _BinMDataStd.Handle_BinMDataStd_AsciiStringDriver_DownCast(thing)
Handle_BinMDataStd_AsciiStringDriver_DownCast = _BinMDataStd.Handle_BinMDataStd_AsciiStringDriver_DownCast

class Handle_BinMDataStd_CommentDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMDataStd_CommentDriver self)

        Nullify the handle


        """
        return _BinMDataStd.Handle_BinMDataStd_CommentDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMDataStd_CommentDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMDataStd.Handle_BinMDataStd_CommentDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMDataStd_CommentDriver self, BinMDataStd_CommentDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_CommentDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMDataStd_CommentDriver self, Handle_BinMDataStd_CommentDriver theHandle) -> Handle_BinMDataStd_CommentDriver
        assign(Handle_BinMDataStd_CommentDriver self, BinMDataStd_CommentDriver thePtr) -> Handle_BinMDataStd_CommentDriver
        assign(Handle_BinMDataStd_CommentDriver self, Handle_BinMDataStd_CommentDriver theHandle) -> Handle_BinMDataStd_CommentDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMDataStd.Handle_BinMDataStd_CommentDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMDataStd_CommentDriver self) -> BinMDataStd_CommentDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_CommentDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMDataStd_CommentDriver self) -> BinMDataStd_CommentDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_CommentDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMDataStd_CommentDriver self) -> BinMDataStd_CommentDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMDataStd.Handle_BinMDataStd_CommentDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMDataStd.Handle_BinMDataStd_CommentDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMDataStd.Handle_BinMDataStd_CommentDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMDataStd.new_Handle_BinMDataStd_CommentDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMDataStd.Handle_BinMDataStd_CommentDriver_DownCast)
    __swig_destroy__ = _BinMDataStd.delete_Handle_BinMDataStd_CommentDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMDataStd_CommentDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.Handle_BinMDataStd_CommentDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMDataStd_CommentDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMDataStd_CommentDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.Handle_BinMDataStd_CommentDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMDataStd_CommentDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.Handle_BinMDataStd_CommentDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_CommentDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_CommentDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_CommentDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMDataStd.Handle_BinMDataStd_CommentDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMDataStd_CommentDriver self)

        Memory deallocator for transient classes


        """
        return _BinMDataStd.Handle_BinMDataStd_CommentDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMDataStd_CommentDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMDataStd_CommentDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_CommentDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMDataStd_CommentDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMDataStd_CommentDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_CommentDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMDataStd_CommentDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMDataStd.Handle_BinMDataStd_CommentDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMDataStd_CommentDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_CommentDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMDataStd_CommentDriver self)

        Increments the reference counter of this object


        """
        return _BinMDataStd.Handle_BinMDataStd_CommentDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMDataStd_CommentDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_CommentDriver_DecrementRefCounter(self, *args)

Handle_BinMDataStd_CommentDriver_swigregister = _BinMDataStd.Handle_BinMDataStd_CommentDriver_swigregister
Handle_BinMDataStd_CommentDriver_swigregister(Handle_BinMDataStd_CommentDriver)

def Handle_BinMDataStd_CommentDriver_DownCast(thing):
    return _BinMDataStd.Handle_BinMDataStd_CommentDriver_DownCast(thing)
Handle_BinMDataStd_CommentDriver_DownCast = _BinMDataStd.Handle_BinMDataStd_CommentDriver_DownCast

class Handle_BinMDataStd_IntPackedMapDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMDataStd_IntPackedMapDriver self)

        Nullify the handle


        """
        return _BinMDataStd.Handle_BinMDataStd_IntPackedMapDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMDataStd_IntPackedMapDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMDataStd.Handle_BinMDataStd_IntPackedMapDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMDataStd_IntPackedMapDriver self, BinMDataStd_IntPackedMapDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_IntPackedMapDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMDataStd_IntPackedMapDriver self, Handle_BinMDataStd_IntPackedMapDriver theHandle) -> Handle_BinMDataStd_IntPackedMapDriver
        assign(Handle_BinMDataStd_IntPackedMapDriver self, BinMDataStd_IntPackedMapDriver thePtr) -> Handle_BinMDataStd_IntPackedMapDriver
        assign(Handle_BinMDataStd_IntPackedMapDriver self, Handle_BinMDataStd_IntPackedMapDriver theHandle) -> Handle_BinMDataStd_IntPackedMapDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMDataStd.Handle_BinMDataStd_IntPackedMapDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMDataStd_IntPackedMapDriver self) -> BinMDataStd_IntPackedMapDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_IntPackedMapDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMDataStd_IntPackedMapDriver self) -> BinMDataStd_IntPackedMapDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_IntPackedMapDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMDataStd_IntPackedMapDriver self) -> BinMDataStd_IntPackedMapDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMDataStd.Handle_BinMDataStd_IntPackedMapDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMDataStd.Handle_BinMDataStd_IntPackedMapDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMDataStd.Handle_BinMDataStd_IntPackedMapDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMDataStd.new_Handle_BinMDataStd_IntPackedMapDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMDataStd.Handle_BinMDataStd_IntPackedMapDriver_DownCast)
    __swig_destroy__ = _BinMDataStd.delete_Handle_BinMDataStd_IntPackedMapDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMDataStd_IntPackedMapDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.Handle_BinMDataStd_IntPackedMapDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMDataStd_IntPackedMapDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMDataStd_IntPackedMapDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        transient -> persistent (store)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.Handle_BinMDataStd_IntPackedMapDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMDataStd_IntPackedMapDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.Handle_BinMDataStd_IntPackedMapDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_IntPackedMapDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_IntPackedMapDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_IntPackedMapDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMDataStd.Handle_BinMDataStd_IntPackedMapDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMDataStd_IntPackedMapDriver self)

        Memory deallocator for transient classes


        """
        return _BinMDataStd.Handle_BinMDataStd_IntPackedMapDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMDataStd_IntPackedMapDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMDataStd_IntPackedMapDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_IntPackedMapDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMDataStd_IntPackedMapDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMDataStd_IntPackedMapDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_IntPackedMapDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMDataStd_IntPackedMapDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMDataStd.Handle_BinMDataStd_IntPackedMapDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMDataStd_IntPackedMapDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_IntPackedMapDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMDataStd_IntPackedMapDriver self)

        Increments the reference counter of this object


        """
        return _BinMDataStd.Handle_BinMDataStd_IntPackedMapDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMDataStd_IntPackedMapDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_IntPackedMapDriver_DecrementRefCounter(self, *args)

Handle_BinMDataStd_IntPackedMapDriver_swigregister = _BinMDataStd.Handle_BinMDataStd_IntPackedMapDriver_swigregister
Handle_BinMDataStd_IntPackedMapDriver_swigregister(Handle_BinMDataStd_IntPackedMapDriver)

def Handle_BinMDataStd_IntPackedMapDriver_DownCast(thing):
    return _BinMDataStd.Handle_BinMDataStd_IntPackedMapDriver_DownCast(thing)
Handle_BinMDataStd_IntPackedMapDriver_DownCast = _BinMDataStd.Handle_BinMDataStd_IntPackedMapDriver_DownCast

class Handle_BinMDataStd_NamedDataDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMDataStd_NamedDataDriver self)

        Nullify the handle


        """
        return _BinMDataStd.Handle_BinMDataStd_NamedDataDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMDataStd_NamedDataDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMDataStd.Handle_BinMDataStd_NamedDataDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMDataStd_NamedDataDriver self, BinMDataStd_NamedDataDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_NamedDataDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMDataStd_NamedDataDriver self, Handle_BinMDataStd_NamedDataDriver theHandle) -> Handle_BinMDataStd_NamedDataDriver
        assign(Handle_BinMDataStd_NamedDataDriver self, BinMDataStd_NamedDataDriver thePtr) -> Handle_BinMDataStd_NamedDataDriver
        assign(Handle_BinMDataStd_NamedDataDriver self, Handle_BinMDataStd_NamedDataDriver theHandle) -> Handle_BinMDataStd_NamedDataDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMDataStd.Handle_BinMDataStd_NamedDataDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMDataStd_NamedDataDriver self) -> BinMDataStd_NamedDataDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_NamedDataDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMDataStd_NamedDataDriver self) -> BinMDataStd_NamedDataDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_NamedDataDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMDataStd_NamedDataDriver self) -> BinMDataStd_NamedDataDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMDataStd.Handle_BinMDataStd_NamedDataDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMDataStd.Handle_BinMDataStd_NamedDataDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMDataStd.Handle_BinMDataStd_NamedDataDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMDataStd.new_Handle_BinMDataStd_NamedDataDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMDataStd.Handle_BinMDataStd_NamedDataDriver_DownCast)
    __swig_destroy__ = _BinMDataStd.delete_Handle_BinMDataStd_NamedDataDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMDataStd_NamedDataDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.Handle_BinMDataStd_NamedDataDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMDataStd_NamedDataDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMDataStd_NamedDataDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.Handle_BinMDataStd_NamedDataDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMDataStd_NamedDataDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.Handle_BinMDataStd_NamedDataDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_NamedDataDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_NamedDataDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_NamedDataDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMDataStd.Handle_BinMDataStd_NamedDataDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMDataStd_NamedDataDriver self)

        Memory deallocator for transient classes


        """
        return _BinMDataStd.Handle_BinMDataStd_NamedDataDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMDataStd_NamedDataDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMDataStd_NamedDataDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_NamedDataDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMDataStd_NamedDataDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMDataStd_NamedDataDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_NamedDataDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMDataStd_NamedDataDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMDataStd.Handle_BinMDataStd_NamedDataDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMDataStd_NamedDataDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_NamedDataDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMDataStd_NamedDataDriver self)

        Increments the reference counter of this object


        """
        return _BinMDataStd.Handle_BinMDataStd_NamedDataDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMDataStd_NamedDataDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_NamedDataDriver_DecrementRefCounter(self, *args)

Handle_BinMDataStd_NamedDataDriver_swigregister = _BinMDataStd.Handle_BinMDataStd_NamedDataDriver_swigregister
Handle_BinMDataStd_NamedDataDriver_swigregister(Handle_BinMDataStd_NamedDataDriver)

def Handle_BinMDataStd_NamedDataDriver_DownCast(thing):
    return _BinMDataStd.Handle_BinMDataStd_NamedDataDriver_DownCast(thing)
Handle_BinMDataStd_NamedDataDriver_DownCast = _BinMDataStd.Handle_BinMDataStd_NamedDataDriver_DownCast

class Handle_BinMDataStd_VariableDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMDataStd_VariableDriver self)

        Nullify the handle


        """
        return _BinMDataStd.Handle_BinMDataStd_VariableDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMDataStd_VariableDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMDataStd.Handle_BinMDataStd_VariableDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMDataStd_VariableDriver self, BinMDataStd_VariableDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_VariableDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMDataStd_VariableDriver self, Handle_BinMDataStd_VariableDriver theHandle) -> Handle_BinMDataStd_VariableDriver
        assign(Handle_BinMDataStd_VariableDriver self, BinMDataStd_VariableDriver thePtr) -> Handle_BinMDataStd_VariableDriver
        assign(Handle_BinMDataStd_VariableDriver self, Handle_BinMDataStd_VariableDriver theHandle) -> Handle_BinMDataStd_VariableDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMDataStd.Handle_BinMDataStd_VariableDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMDataStd_VariableDriver self) -> BinMDataStd_VariableDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_VariableDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMDataStd_VariableDriver self) -> BinMDataStd_VariableDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_VariableDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMDataStd_VariableDriver self) -> BinMDataStd_VariableDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMDataStd.Handle_BinMDataStd_VariableDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMDataStd.Handle_BinMDataStd_VariableDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMDataStd.Handle_BinMDataStd_VariableDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMDataStd.new_Handle_BinMDataStd_VariableDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMDataStd.Handle_BinMDataStd_VariableDriver_DownCast)
    __swig_destroy__ = _BinMDataStd.delete_Handle_BinMDataStd_VariableDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMDataStd_VariableDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.Handle_BinMDataStd_VariableDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMDataStd_VariableDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMDataStd_VariableDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.Handle_BinMDataStd_VariableDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMDataStd_VariableDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.Handle_BinMDataStd_VariableDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_VariableDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_VariableDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_VariableDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMDataStd.Handle_BinMDataStd_VariableDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMDataStd_VariableDriver self)

        Memory deallocator for transient classes


        """
        return _BinMDataStd.Handle_BinMDataStd_VariableDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMDataStd_VariableDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMDataStd_VariableDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_VariableDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMDataStd_VariableDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMDataStd_VariableDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_VariableDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMDataStd_VariableDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMDataStd.Handle_BinMDataStd_VariableDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMDataStd_VariableDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_VariableDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMDataStd_VariableDriver self)

        Increments the reference counter of this object


        """
        return _BinMDataStd.Handle_BinMDataStd_VariableDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMDataStd_VariableDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_VariableDriver_DecrementRefCounter(self, *args)

Handle_BinMDataStd_VariableDriver_swigregister = _BinMDataStd.Handle_BinMDataStd_VariableDriver_swigregister
Handle_BinMDataStd_VariableDriver_swigregister(Handle_BinMDataStd_VariableDriver)

def Handle_BinMDataStd_VariableDriver_DownCast(thing):
    return _BinMDataStd.Handle_BinMDataStd_VariableDriver_DownCast(thing)
Handle_BinMDataStd_VariableDriver_DownCast = _BinMDataStd.Handle_BinMDataStd_VariableDriver_DownCast

class Handle_BinMDataStd_RealListDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMDataStd_RealListDriver self)

        Nullify the handle


        """
        return _BinMDataStd.Handle_BinMDataStd_RealListDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMDataStd_RealListDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMDataStd.Handle_BinMDataStd_RealListDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMDataStd_RealListDriver self, BinMDataStd_RealListDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_RealListDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMDataStd_RealListDriver self, Handle_BinMDataStd_RealListDriver theHandle) -> Handle_BinMDataStd_RealListDriver
        assign(Handle_BinMDataStd_RealListDriver self, BinMDataStd_RealListDriver thePtr) -> Handle_BinMDataStd_RealListDriver
        assign(Handle_BinMDataStd_RealListDriver self, Handle_BinMDataStd_RealListDriver theHandle) -> Handle_BinMDataStd_RealListDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMDataStd.Handle_BinMDataStd_RealListDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMDataStd_RealListDriver self) -> BinMDataStd_RealListDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_RealListDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMDataStd_RealListDriver self) -> BinMDataStd_RealListDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_RealListDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMDataStd_RealListDriver self) -> BinMDataStd_RealListDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMDataStd.Handle_BinMDataStd_RealListDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMDataStd.Handle_BinMDataStd_RealListDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMDataStd.Handle_BinMDataStd_RealListDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMDataStd.new_Handle_BinMDataStd_RealListDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMDataStd.Handle_BinMDataStd_RealListDriver_DownCast)
    __swig_destroy__ = _BinMDataStd.delete_Handle_BinMDataStd_RealListDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMDataStd_RealListDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.Handle_BinMDataStd_RealListDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMDataStd_RealListDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMDataStd_RealListDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.Handle_BinMDataStd_RealListDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMDataStd_RealListDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.Handle_BinMDataStd_RealListDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_RealListDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_RealListDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_RealListDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMDataStd.Handle_BinMDataStd_RealListDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMDataStd_RealListDriver self)

        Memory deallocator for transient classes


        """
        return _BinMDataStd.Handle_BinMDataStd_RealListDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMDataStd_RealListDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMDataStd_RealListDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_RealListDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMDataStd_RealListDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMDataStd_RealListDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_RealListDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMDataStd_RealListDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMDataStd.Handle_BinMDataStd_RealListDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMDataStd_RealListDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_RealListDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMDataStd_RealListDriver self)

        Increments the reference counter of this object


        """
        return _BinMDataStd.Handle_BinMDataStd_RealListDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMDataStd_RealListDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_RealListDriver_DecrementRefCounter(self, *args)

Handle_BinMDataStd_RealListDriver_swigregister = _BinMDataStd.Handle_BinMDataStd_RealListDriver_swigregister
Handle_BinMDataStd_RealListDriver_swigregister(Handle_BinMDataStd_RealListDriver)

def Handle_BinMDataStd_RealListDriver_DownCast(thing):
    return _BinMDataStd.Handle_BinMDataStd_RealListDriver_DownCast(thing)
Handle_BinMDataStd_RealListDriver_DownCast = _BinMDataStd.Handle_BinMDataStd_RealListDriver_DownCast

class Handle_BinMDataStd_ExtStringArrayDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMDataStd_ExtStringArrayDriver self)

        Nullify the handle


        """
        return _BinMDataStd.Handle_BinMDataStd_ExtStringArrayDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMDataStd_ExtStringArrayDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMDataStd.Handle_BinMDataStd_ExtStringArrayDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMDataStd_ExtStringArrayDriver self, BinMDataStd_ExtStringArrayDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_ExtStringArrayDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMDataStd_ExtStringArrayDriver self, Handle_BinMDataStd_ExtStringArrayDriver theHandle) -> Handle_BinMDataStd_ExtStringArrayDriver
        assign(Handle_BinMDataStd_ExtStringArrayDriver self, BinMDataStd_ExtStringArrayDriver thePtr) -> Handle_BinMDataStd_ExtStringArrayDriver
        assign(Handle_BinMDataStd_ExtStringArrayDriver self, Handle_BinMDataStd_ExtStringArrayDriver theHandle) -> Handle_BinMDataStd_ExtStringArrayDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMDataStd.Handle_BinMDataStd_ExtStringArrayDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMDataStd_ExtStringArrayDriver self) -> BinMDataStd_ExtStringArrayDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_ExtStringArrayDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMDataStd_ExtStringArrayDriver self) -> BinMDataStd_ExtStringArrayDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_ExtStringArrayDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMDataStd_ExtStringArrayDriver self) -> BinMDataStd_ExtStringArrayDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMDataStd.Handle_BinMDataStd_ExtStringArrayDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMDataStd.Handle_BinMDataStd_ExtStringArrayDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMDataStd.Handle_BinMDataStd_ExtStringArrayDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMDataStd.new_Handle_BinMDataStd_ExtStringArrayDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMDataStd.Handle_BinMDataStd_ExtStringArrayDriver_DownCast)
    __swig_destroy__ = _BinMDataStd.delete_Handle_BinMDataStd_ExtStringArrayDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMDataStd_ExtStringArrayDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.Handle_BinMDataStd_ExtStringArrayDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMDataStd_ExtStringArrayDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMDataStd_ExtStringArrayDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.Handle_BinMDataStd_ExtStringArrayDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMDataStd_ExtStringArrayDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.Handle_BinMDataStd_ExtStringArrayDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_ExtStringArrayDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_ExtStringArrayDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_ExtStringArrayDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMDataStd.Handle_BinMDataStd_ExtStringArrayDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMDataStd_ExtStringArrayDriver self)

        Memory deallocator for transient classes


        """
        return _BinMDataStd.Handle_BinMDataStd_ExtStringArrayDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMDataStd_ExtStringArrayDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMDataStd_ExtStringArrayDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_ExtStringArrayDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMDataStd_ExtStringArrayDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMDataStd_ExtStringArrayDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_ExtStringArrayDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMDataStd_ExtStringArrayDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMDataStd.Handle_BinMDataStd_ExtStringArrayDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMDataStd_ExtStringArrayDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_ExtStringArrayDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMDataStd_ExtStringArrayDriver self)

        Increments the reference counter of this object


        """
        return _BinMDataStd.Handle_BinMDataStd_ExtStringArrayDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMDataStd_ExtStringArrayDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_ExtStringArrayDriver_DecrementRefCounter(self, *args)

Handle_BinMDataStd_ExtStringArrayDriver_swigregister = _BinMDataStd.Handle_BinMDataStd_ExtStringArrayDriver_swigregister
Handle_BinMDataStd_ExtStringArrayDriver_swigregister(Handle_BinMDataStd_ExtStringArrayDriver)

def Handle_BinMDataStd_ExtStringArrayDriver_DownCast(thing):
    return _BinMDataStd.Handle_BinMDataStd_ExtStringArrayDriver_DownCast(thing)
Handle_BinMDataStd_ExtStringArrayDriver_DownCast = _BinMDataStd.Handle_BinMDataStd_ExtStringArrayDriver_DownCast

class Handle_BinMDataStd_DirectoryDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMDataStd_DirectoryDriver self)

        Nullify the handle


        """
        return _BinMDataStd.Handle_BinMDataStd_DirectoryDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMDataStd_DirectoryDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMDataStd.Handle_BinMDataStd_DirectoryDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMDataStd_DirectoryDriver self, BinMDataStd_DirectoryDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_DirectoryDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMDataStd_DirectoryDriver self, Handle_BinMDataStd_DirectoryDriver theHandle) -> Handle_BinMDataStd_DirectoryDriver
        assign(Handle_BinMDataStd_DirectoryDriver self, BinMDataStd_DirectoryDriver thePtr) -> Handle_BinMDataStd_DirectoryDriver
        assign(Handle_BinMDataStd_DirectoryDriver self, Handle_BinMDataStd_DirectoryDriver theHandle) -> Handle_BinMDataStd_DirectoryDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMDataStd.Handle_BinMDataStd_DirectoryDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMDataStd_DirectoryDriver self) -> BinMDataStd_DirectoryDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_DirectoryDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMDataStd_DirectoryDriver self) -> BinMDataStd_DirectoryDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_DirectoryDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMDataStd_DirectoryDriver self) -> BinMDataStd_DirectoryDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMDataStd.Handle_BinMDataStd_DirectoryDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMDataStd.Handle_BinMDataStd_DirectoryDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMDataStd.Handle_BinMDataStd_DirectoryDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMDataStd.new_Handle_BinMDataStd_DirectoryDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMDataStd.Handle_BinMDataStd_DirectoryDriver_DownCast)
    __swig_destroy__ = _BinMDataStd.delete_Handle_BinMDataStd_DirectoryDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMDataStd_DirectoryDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.Handle_BinMDataStd_DirectoryDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMDataStd_DirectoryDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMDataStd_DirectoryDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.Handle_BinMDataStd_DirectoryDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMDataStd_DirectoryDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.Handle_BinMDataStd_DirectoryDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_DirectoryDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_DirectoryDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_DirectoryDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMDataStd.Handle_BinMDataStd_DirectoryDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMDataStd_DirectoryDriver self)

        Memory deallocator for transient classes


        """
        return _BinMDataStd.Handle_BinMDataStd_DirectoryDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMDataStd_DirectoryDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMDataStd_DirectoryDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_DirectoryDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMDataStd_DirectoryDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMDataStd_DirectoryDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_DirectoryDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMDataStd_DirectoryDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMDataStd.Handle_BinMDataStd_DirectoryDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMDataStd_DirectoryDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_DirectoryDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMDataStd_DirectoryDriver self)

        Increments the reference counter of this object


        """
        return _BinMDataStd.Handle_BinMDataStd_DirectoryDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMDataStd_DirectoryDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_DirectoryDriver_DecrementRefCounter(self, *args)

Handle_BinMDataStd_DirectoryDriver_swigregister = _BinMDataStd.Handle_BinMDataStd_DirectoryDriver_swigregister
Handle_BinMDataStd_DirectoryDriver_swigregister(Handle_BinMDataStd_DirectoryDriver)

def Handle_BinMDataStd_DirectoryDriver_DownCast(thing):
    return _BinMDataStd.Handle_BinMDataStd_DirectoryDriver_DownCast(thing)
Handle_BinMDataStd_DirectoryDriver_DownCast = _BinMDataStd.Handle_BinMDataStd_DirectoryDriver_DownCast

class Handle_BinMDataStd_NameDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMDataStd_NameDriver self)

        Nullify the handle


        """
        return _BinMDataStd.Handle_BinMDataStd_NameDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMDataStd_NameDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMDataStd.Handle_BinMDataStd_NameDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMDataStd_NameDriver self, BinMDataStd_NameDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_NameDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMDataStd_NameDriver self, Handle_BinMDataStd_NameDriver theHandle) -> Handle_BinMDataStd_NameDriver
        assign(Handle_BinMDataStd_NameDriver self, BinMDataStd_NameDriver thePtr) -> Handle_BinMDataStd_NameDriver
        assign(Handle_BinMDataStd_NameDriver self, Handle_BinMDataStd_NameDriver theHandle) -> Handle_BinMDataStd_NameDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMDataStd.Handle_BinMDataStd_NameDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMDataStd_NameDriver self) -> BinMDataStd_NameDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_NameDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMDataStd_NameDriver self) -> BinMDataStd_NameDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMDataStd.Handle_BinMDataStd_NameDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMDataStd_NameDriver self) -> BinMDataStd_NameDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMDataStd.Handle_BinMDataStd_NameDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMDataStd.Handle_BinMDataStd_NameDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMDataStd.Handle_BinMDataStd_NameDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMDataStd.new_Handle_BinMDataStd_NameDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMDataStd.Handle_BinMDataStd_NameDriver_DownCast)
    __swig_destroy__ = _BinMDataStd.delete_Handle_BinMDataStd_NameDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMDataStd_NameDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataStd.Handle_BinMDataStd_NameDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMDataStd_NameDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMDataStd_NameDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        transient -> persistent (store)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataStd.Handle_BinMDataStd_NameDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMDataStd_NameDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMDataStd.Handle_BinMDataStd_NameDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_NameDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_NameDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataStd.Handle_BinMDataStd_NameDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMDataStd.Handle_BinMDataStd_NameDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMDataStd_NameDriver self)

        Memory deallocator for transient classes


        """
        return _BinMDataStd.Handle_BinMDataStd_NameDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMDataStd_NameDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMDataStd_NameDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_NameDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMDataStd_NameDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMDataStd_NameDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataStd.Handle_BinMDataStd_NameDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMDataStd_NameDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMDataStd.Handle_BinMDataStd_NameDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMDataStd_NameDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_NameDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMDataStd_NameDriver self)

        Increments the reference counter of this object


        """
        return _BinMDataStd.Handle_BinMDataStd_NameDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMDataStd_NameDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataStd.Handle_BinMDataStd_NameDriver_DecrementRefCounter(self, *args)

Handle_BinMDataStd_NameDriver_swigregister = _BinMDataStd.Handle_BinMDataStd_NameDriver_swigregister
Handle_BinMDataStd_NameDriver_swigregister(Handle_BinMDataStd_NameDriver)

def Handle_BinMDataStd_NameDriver_DownCast(thing):
    return _BinMDataStd.Handle_BinMDataStd_NameDriver_DownCast(thing)
Handle_BinMDataStd_NameDriver_DownCast = _BinMDataStd.Handle_BinMDataStd_NameDriver_DownCast



