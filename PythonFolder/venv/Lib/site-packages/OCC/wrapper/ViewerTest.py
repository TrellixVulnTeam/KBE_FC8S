# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ViewerTest')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ViewerTest')
    _ViewerTest = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ViewerTest', [dirname(__file__)])
        except ImportError:
            import _ViewerTest
            return _ViewerTest
        try:
            _mod = imp.load_module('_ViewerTest', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ViewerTest = swig_import_helper()
    del swig_import_helper
else:
    import _ViewerTest
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ViewerTest.delete_SwigPyIterator

    def value(self):
        return _ViewerTest.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ViewerTest.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ViewerTest.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ViewerTest.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ViewerTest.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ViewerTest.SwigPyIterator_copy(self)

    def next(self):
        return _ViewerTest.SwigPyIterator_next(self)

    def __next__(self):
        return _ViewerTest.SwigPyIterator___next__(self)

    def previous(self):
        return _ViewerTest.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ViewerTest.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ViewerTest.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ViewerTest.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ViewerTest.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ViewerTest.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ViewerTest.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ViewerTest.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _ViewerTest.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _ViewerTest.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_ViewerTest.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _ViewerTest.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _ViewerTest.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ViewerTest.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _ViewerTest.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _ViewerTest.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _ViewerTest.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _ViewerTest.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_ViewerTest.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _ViewerTest.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _ViewerTest.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ViewerTest.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _ViewerTest.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _ViewerTest.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _ViewerTest.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _ViewerTest.ptr_to_number(item)
ptr_to_number = _ViewerTest.ptr_to_number

def HashCode(*args):
    return _ViewerTest.HashCode(*args)
HashCode = _ViewerTest.HashCode

def ptr_equal(a, b):
    return _ViewerTest.ptr_equal(a, b)
ptr_equal = _ViewerTest.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Draw
else:
    import Draw
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import AIS
else:
    import AIS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import PrsMgr
else:
    import PrsMgr
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Graphic3d
else:
    import Graphic3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BVH
else:
    import BVH
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Image
else:
    import Image
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Aspect
else:
    import Aspect
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Font
else:
    import Font
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import V3d
else:
    import V3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Prs3d
else:
    import Prs3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import HLRAlgo
else:
    import HLRAlgo
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Poly
else:
    import Poly
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TShort
else:
    import TShort
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import DsgPrs
else:
    import DsgPrs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Select3D
else:
    import Select3D
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import SelectBasics
else:
    import SelectBasics
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import SelectMgr
else:
    import SelectMgr
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StdSelect
else:
    import StdSelect
del _swig_python_version_info
class ViewerTest_EventManager(Standard.Standard_Transient):
    """
    used to manage mouse event (move,select,shiftselect)
    By default the events are transmitted to interactive context.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_ViewerTest_EventManager
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_ViewerTest_EventManager(self) 
            return h


    def __init__(self, *args):
        """
        __init__(ViewerTest_EventManager self, Handle_V3d_View aView, Handle_AIS_InteractiveContext aCtx) -> ViewerTest_EventManager

        :type aView: OCC.wrapper.V3d.Handle_V3d_View
        :type aCtx: OCC.wrapper.AIS.Handle_AIS_InteractiveContext

        """
        this = _ViewerTest.new_ViewerTest_EventManager(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def MoveTo(self, *args):
        """
        MoveTo(ViewerTest_EventManager self, Standard_Integer const xpix, Standard_Integer const ypix)

        :type xpix: int
        :type ypix: int

        """
        return _ViewerTest.ViewerTest_EventManager_MoveTo(self, *args)


    def Select(self, *args):
        """
        Select(ViewerTest_EventManager self)
        Select(ViewerTest_EventManager self, Standard_Integer const theXPressed, Standard_Integer const theYPressed, Standard_Integer const theXMotion, Standard_Integer const theYMotion, Standard_Boolean const theIsAutoAllowOverlap)
        Select(ViewerTest_EventManager self, NCollection_Array1_gp_Pnt2d thePolyline)

        :type thePolyline: OCC.wrapper.TColgp.TColgp_Array1OfPnt2d

        """
        return _ViewerTest.ViewerTest_EventManager_Select(self, *args)


    def ShiftSelect(self, *args):
        """
        ShiftSelect(ViewerTest_EventManager self)
        ShiftSelect(ViewerTest_EventManager self, Standard_Integer const theXPressed, Standard_Integer const theYPressed, Standard_Integer const theXMotion, Standard_Integer const theYMotion, Standard_Boolean const theIsAutoAllowOverlap)
        ShiftSelect(ViewerTest_EventManager self, NCollection_Array1_gp_Pnt2d thePolyline)

        :type thePolyline: OCC.wrapper.TColgp.TColgp_Array1OfPnt2d

        """
        return _ViewerTest.ViewerTest_EventManager_ShiftSelect(self, *args)


    def Context(self, *args):
        """
        :rtype: OCC.wrapper.AIS.Handle_AIS_InteractiveContext

        """
        res = _ViewerTest.ViewerTest_EventManager_Context(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetCurrentPosition(self, *args):
        """
        GetCurrentPosition(ViewerTest_EventManager self)

        Gets current mouse position. It tracks change of mouse position
        with mouse drugging or with DRAW command call (vmoveto).

        :type theXPix: int
        :type theYPix: int

        """
        return _ViewerTest.ViewerTest_EventManager_GetCurrentPosition(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _ViewerTest.ViewerTest_EventManager_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _ViewerTest.ViewerTest_EventManager_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _ViewerTest.ViewerTest_EventManager_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _ViewerTest.delete_ViewerTest_EventManager
ViewerTest_EventManager_swigregister = _ViewerTest.ViewerTest_EventManager_swigregister
ViewerTest_EventManager_swigregister(ViewerTest_EventManager)

def ViewerTest_EventManager_get_type_name(*args):
    """
    ViewerTest_EventManager_get_type_name() -> char const *

    :rtype: const char *

    """
    return _ViewerTest.ViewerTest_EventManager_get_type_name(*args)

def ViewerTest_EventManager_get_type_descriptor(*args):
    """
    ViewerTest_EventManager_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _ViewerTest.ViewerTest_EventManager_get_type_descriptor(*args)

class Handle_ViewerTest_EventManager(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_ViewerTest_EventManager self)

        Nullify the handle


        """
        return _ViewerTest.Handle_ViewerTest_EventManager_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_ViewerTest_EventManager self) -> bool

        Check for being null

        :rtype: bool

        """
        return _ViewerTest.Handle_ViewerTest_EventManager_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_ViewerTest_EventManager self, ViewerTest_EventManager thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _ViewerTest.Handle_ViewerTest_EventManager_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_ViewerTest_EventManager self, Handle_ViewerTest_EventManager theHandle) -> Handle_ViewerTest_EventManager
        assign(Handle_ViewerTest_EventManager self, ViewerTest_EventManager thePtr) -> Handle_ViewerTest_EventManager
        assign(Handle_ViewerTest_EventManager self, Handle_ViewerTest_EventManager theHandle) -> Handle_ViewerTest_EventManager

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _ViewerTest.Handle_ViewerTest_EventManager_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_ViewerTest_EventManager self) -> ViewerTest_EventManager

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _ViewerTest.Handle_ViewerTest_EventManager_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_ViewerTest_EventManager self) -> ViewerTest_EventManager

        Member access operator (note non-const)

        :rtype: T *

        """
        return _ViewerTest.Handle_ViewerTest_EventManager___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_ViewerTest_EventManager self) -> ViewerTest_EventManager

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _ViewerTest.Handle_ViewerTest_EventManager___ref__(self, *args)


    def __hash__(self):
        return _ViewerTest.Handle_ViewerTest_EventManager___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _ViewerTest.Handle_ViewerTest_EventManager___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _ViewerTest.new_Handle_ViewerTest_EventManager(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_ViewerTest.Handle_ViewerTest_EventManager_DownCast)
    __swig_destroy__ = _ViewerTest.delete_Handle_ViewerTest_EventManager

    def MoveTo(self, *args):
        """
        MoveTo(Handle_ViewerTest_EventManager self, Standard_Integer const xpix, Standard_Integer const ypix)

        :type xpix: int
        :type ypix: int

        """
        return _ViewerTest.Handle_ViewerTest_EventManager_MoveTo(self, *args)


    def Select(self, *args):
        """
        Select(Handle_ViewerTest_EventManager self)
        Select(Handle_ViewerTest_EventManager self, Standard_Integer const theXPressed, Standard_Integer const theYPressed, Standard_Integer const theXMotion, Standard_Integer const theYMotion, Standard_Boolean const theIsAutoAllowOverlap)
        Select(Handle_ViewerTest_EventManager self, NCollection_Array1_gp_Pnt2d thePolyline)

        :type thePolyline: OCC.wrapper.TColgp.TColgp_Array1OfPnt2d

        """
        return _ViewerTest.Handle_ViewerTest_EventManager_Select(self, *args)


    def ShiftSelect(self, *args):
        """
        ShiftSelect(Handle_ViewerTest_EventManager self)
        ShiftSelect(Handle_ViewerTest_EventManager self, Standard_Integer const theXPressed, Standard_Integer const theYPressed, Standard_Integer const theXMotion, Standard_Integer const theYMotion, Standard_Boolean const theIsAutoAllowOverlap)
        ShiftSelect(Handle_ViewerTest_EventManager self, NCollection_Array1_gp_Pnt2d thePolyline)

        :type thePolyline: OCC.wrapper.TColgp.TColgp_Array1OfPnt2d

        """
        return _ViewerTest.Handle_ViewerTest_EventManager_ShiftSelect(self, *args)


    def Context(self, *args):
        """
        :rtype: OCC.wrapper.AIS.Handle_AIS_InteractiveContext

        """
        res = _ViewerTest.Handle_ViewerTest_EventManager_Context(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetCurrentPosition(self, *args):
        """
        GetCurrentPosition(Handle_ViewerTest_EventManager self)

        Gets current mouse position. It tracks change of mouse position
        with mouse drugging or with DRAW command call (vmoveto).

        :type theXPix: int
        :type theYPix: int

        """
        return _ViewerTest.Handle_ViewerTest_EventManager_GetCurrentPosition(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_ViewerTest_EventManager self) -> char const *

        :rtype: const char *

        """
        return _ViewerTest.Handle_ViewerTest_EventManager_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _ViewerTest.Handle_ViewerTest_EventManager_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _ViewerTest.Handle_ViewerTest_EventManager_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_ViewerTest_EventManager self)

        Memory deallocator for transient classes


        """
        return _ViewerTest.Handle_ViewerTest_EventManager_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_ViewerTest_EventManager self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_ViewerTest_EventManager self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ViewerTest.Handle_ViewerTest_EventManager_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_ViewerTest_EventManager self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_ViewerTest_EventManager self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ViewerTest.Handle_ViewerTest_EventManager_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_ViewerTest_EventManager self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _ViewerTest.Handle_ViewerTest_EventManager_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_ViewerTest_EventManager self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ViewerTest.Handle_ViewerTest_EventManager_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_ViewerTest_EventManager self)

        Increments the reference counter of this object


        """
        return _ViewerTest.Handle_ViewerTest_EventManager_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_ViewerTest_EventManager self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ViewerTest.Handle_ViewerTest_EventManager_DecrementRefCounter(self, *args)

Handle_ViewerTest_EventManager_swigregister = _ViewerTest.Handle_ViewerTest_EventManager_swigregister
Handle_ViewerTest_EventManager_swigregister(Handle_ViewerTest_EventManager)

def Handle_ViewerTest_EventManager_DownCast(thing):
    return _ViewerTest.Handle_ViewerTest_EventManager_DownCast(thing)
Handle_ViewerTest_EventManager_DownCast = _ViewerTest.Handle_ViewerTest_EventManager_DownCast

class NCollection_DoubleMap_Handle_Standard_Transient_TCollection_AsciiString_TColStd_MapTransientHasher_TCollection_AsciiString(NCollection.NCollection_BaseMap):
    """
    Purpose:     The DoubleMap  is used to  bind  pairs (Key1,Key2)
    and retrieve them in linear time.

    See Map from NCollection for a discussion about the number
    of buckets
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Purpose:     The DoubleMap  is used to  bind  pairs (Key1,Key2)
        and retrieve them in linear time.

        See Map from NCollection for a discussion about the number
        of buckets
        """
        this = _ViewerTest.new_NCollection_DoubleMap_Handle_Standard_Transient_TCollection_AsciiString_TColStd_MapTransientHasher_TCollection_AsciiString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, *args):
        """
        Exchange(NCollection_DoubleMap_Handle_Standard_Transient_TCollection_AsciiString_TColStd_MapTransientHasher_TCollection_AsciiString self, NCollection_DoubleMap_Handle_Standard_Transient_TCollection_AsciiString_TColStd_MapTransientHasher_TCollection_AsciiString theOther)

        Exchange the content of two maps without re-allocations.
        Notice that allocators will be swapped as well!

        :type theOther: OCC.wrapper.NCollection.NCollection_DoubleMap

        """
        return _ViewerTest.NCollection_DoubleMap_Handle_Standard_Transient_TCollection_AsciiString_TColStd_MapTransientHasher_TCollection_AsciiString_Exchange(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_DoubleMap_Handle_Standard_Transient_TCollection_AsciiString_TColStd_MapTransientHasher_TCollection_AsciiString self, NCollection_DoubleMap_Handle_Standard_Transient_TCollection_AsciiString_TColStd_MapTransientHasher_TCollection_AsciiString theOther) -> NCollection_DoubleMap_Handle_Standard_Transient_TCollection_AsciiString_TColStd_MapTransientHasher_TCollection_AsciiString

        Assignment.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_DoubleMap
        :rtype: OCC.wrapper.NCollection.NCollection_DoubleMap

        """
        return _ViewerTest.NCollection_DoubleMap_Handle_Standard_Transient_TCollection_AsciiString_TColStd_MapTransientHasher_TCollection_AsciiString_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_DoubleMap_Handle_Standard_Transient_TCollection_AsciiString_TColStd_MapTransientHasher_TCollection_AsciiString self, NCollection_DoubleMap_Handle_Standard_Transient_TCollection_AsciiString_TColStd_MapTransientHasher_TCollection_AsciiString theOther) -> NCollection_DoubleMap_Handle_Standard_Transient_TCollection_AsciiString_TColStd_MapTransientHasher_TCollection_AsciiString

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_DoubleMap
        :rtype: OCC.wrapper.NCollection.NCollection_DoubleMap

        """
        return _ViewerTest.NCollection_DoubleMap_Handle_Standard_Transient_TCollection_AsciiString_TColStd_MapTransientHasher_TCollection_AsciiString_assign(self, *args)


    def ReSize(self, *args):
        """
        ReSize(NCollection_DoubleMap_Handle_Standard_Transient_TCollection_AsciiString_TColStd_MapTransientHasher_TCollection_AsciiString self, Standard_Integer const N)

        ReSize

        :type N: int

        """
        return _ViewerTest.NCollection_DoubleMap_Handle_Standard_Transient_TCollection_AsciiString_TColStd_MapTransientHasher_TCollection_AsciiString_ReSize(self, *args)


    def Bind(self, *args):
        """
        Bind(NCollection_DoubleMap_Handle_Standard_Transient_TCollection_AsciiString_TColStd_MapTransientHasher_TCollection_AsciiString self, Handle_Standard_Transient theKey1, TCollection_AsciiString theKey2)

        Bind

        :type theKey1: const TheKey1Type &
        :type theKey2: const TheKey2Type &

        """
        return _ViewerTest.NCollection_DoubleMap_Handle_Standard_Transient_TCollection_AsciiString_TColStd_MapTransientHasher_TCollection_AsciiString_Bind(self, *args)


    def AreBound(self, *args):
        """
        AreBound(NCollection_DoubleMap_Handle_Standard_Transient_TCollection_AsciiString_TColStd_MapTransientHasher_TCollection_AsciiString self, Handle_Standard_Transient theKey1, TCollection_AsciiString theKey2) -> Standard_Boolean

        * AreBound

        :type theKey1: const TheKey1Type &
        :type theKey2: const TheKey2Type &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ViewerTest.NCollection_DoubleMap_Handle_Standard_Transient_TCollection_AsciiString_TColStd_MapTransientHasher_TCollection_AsciiString_AreBound(self, *args)


    def IsBound1(self, *args):
        """
        IsBound1(NCollection_DoubleMap_Handle_Standard_Transient_TCollection_AsciiString_TColStd_MapTransientHasher_TCollection_AsciiString self, Handle_Standard_Transient theKey1) -> Standard_Boolean

        IsBound1

        :type theKey1: const TheKey1Type &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ViewerTest.NCollection_DoubleMap_Handle_Standard_Transient_TCollection_AsciiString_TColStd_MapTransientHasher_TCollection_AsciiString_IsBound1(self, *args)


    def IsBound2(self, *args):
        """
        IsBound2(NCollection_DoubleMap_Handle_Standard_Transient_TCollection_AsciiString_TColStd_MapTransientHasher_TCollection_AsciiString self, TCollection_AsciiString theKey2) -> Standard_Boolean

        IsBound2

        :type theKey2: const TheKey2Type &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ViewerTest.NCollection_DoubleMap_Handle_Standard_Transient_TCollection_AsciiString_TColStd_MapTransientHasher_TCollection_AsciiString_IsBound2(self, *args)


    def UnBind1(self, *args):
        """
        UnBind1(NCollection_DoubleMap_Handle_Standard_Transient_TCollection_AsciiString_TColStd_MapTransientHasher_TCollection_AsciiString self, Handle_Standard_Transient theKey1) -> Standard_Boolean

        UnBind1

        :type theKey1: const TheKey1Type &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ViewerTest.NCollection_DoubleMap_Handle_Standard_Transient_TCollection_AsciiString_TColStd_MapTransientHasher_TCollection_AsciiString_UnBind1(self, *args)


    def UnBind2(self, *args):
        """
        UnBind2(NCollection_DoubleMap_Handle_Standard_Transient_TCollection_AsciiString_TColStd_MapTransientHasher_TCollection_AsciiString self, TCollection_AsciiString theKey2) -> Standard_Boolean

        UnBind2

        :type theKey2: const TheKey2Type &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ViewerTest.NCollection_DoubleMap_Handle_Standard_Transient_TCollection_AsciiString_TColStd_MapTransientHasher_TCollection_AsciiString_UnBind2(self, *args)


    def Find1(self, *args):
        """
        Find1

        :type theKey1: const TheKey1Type &
        :rtype: const TheKey2Type &

        """
        res = _ViewerTest.NCollection_DoubleMap_Handle_Standard_Transient_TCollection_AsciiString_TColStd_MapTransientHasher_TCollection_AsciiString_Find1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Find2(self, *args):
        """
        Find2

        :type theKey2: const TheKey2Type &
        :rtype: const TheKey1Type &

        """
        res = _ViewerTest.NCollection_DoubleMap_Handle_Standard_Transient_TCollection_AsciiString_TColStd_MapTransientHasher_TCollection_AsciiString_Find2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Clear(self, *args):
        """
        Clear(NCollection_DoubleMap_Handle_Standard_Transient_TCollection_AsciiString_TColStd_MapTransientHasher_TCollection_AsciiString self, Standard_Boolean const doReleaseMemory)
        Clear(NCollection_DoubleMap_Handle_Standard_Transient_TCollection_AsciiString_TColStd_MapTransientHasher_TCollection_AsciiString self, Handle_NCollection_BaseAllocator theAllocator)

        Clear data and reset allocator

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _ViewerTest.NCollection_DoubleMap_Handle_Standard_Transient_TCollection_AsciiString_TColStd_MapTransientHasher_TCollection_AsciiString_Clear(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_DoubleMap_Handle_Standard_Transient_TCollection_AsciiString_TColStd_MapTransientHasher_TCollection_AsciiString self) -> Standard_Integer

        Size

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ViewerTest.NCollection_DoubleMap_Handle_Standard_Transient_TCollection_AsciiString_TColStd_MapTransientHasher_TCollection_AsciiString_Size(self, *args)

    __swig_destroy__ = _ViewerTest.delete_NCollection_DoubleMap_Handle_Standard_Transient_TCollection_AsciiString_TColStd_MapTransientHasher_TCollection_AsciiString
NCollection_DoubleMap_Handle_Standard_Transient_TCollection_AsciiString_TColStd_MapTransientHasher_TCollection_AsciiString_swigregister = _ViewerTest.NCollection_DoubleMap_Handle_Standard_Transient_TCollection_AsciiString_TColStd_MapTransientHasher_TCollection_AsciiString_swigregister
NCollection_DoubleMap_Handle_Standard_Transient_TCollection_AsciiString_TColStd_MapTransientHasher_TCollection_AsciiString_swigregister(NCollection_DoubleMap_Handle_Standard_Transient_TCollection_AsciiString_TColStd_MapTransientHasher_TCollection_AsciiString)


try:
	ViewerTest_DoubleMapOfInteractiveAndName = NCollection_DoubleMap_Handle_Standard_Transient_TCollection_AsciiString_TColStd_MapTransientHasher_TCollection_AsciiString
except NameError:
	pass # does not exist, probably ignored

class ViewerTest_CmdParser(object):
    """Command parser."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def AddDescription(self, *args):
        """
        AddDescription(ViewerTest_CmdParser self, std::string const & theDescription)

        Sets description for command.

        :type theDescription: string

        """
        return _ViewerTest.ViewerTest_CmdParser_AddDescription(self, *args)

    __swig_destroy__ = _ViewerTest.delete_ViewerTest_CmdParser
ViewerTest_CmdParser_swigregister = _ViewerTest.ViewerTest_CmdParser_swigregister
ViewerTest_CmdParser_swigregister(ViewerTest_CmdParser)

class ViewerTest_AutoUpdater(object):
    """Auxiliary tool to control view updates."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    RedrawMode_Auto = _ViewerTest.ViewerTest_AutoUpdater_RedrawMode_Auto
    RedrawMode_Forced = _ViewerTest.ViewerTest_AutoUpdater_RedrawMode_Forced
    RedrawMode_Suppressed = _ViewerTest.ViewerTest_AutoUpdater_RedrawMode_Suppressed

    def __init__(self, *args):
        """
        __init__(ViewerTest_AutoUpdater self, Handle_AIS_InteractiveContext theContext, Handle_V3d_View theView) -> ViewerTest_AutoUpdater

        Constructor

        :type theContext: OCC.wrapper.AIS.Handle_AIS_InteractiveContext
        :type theView: OCC.wrapper.V3d.Handle_V3d_View

        """
        this = _ViewerTest.new_ViewerTest_AutoUpdater(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def parseRedrawMode(self, *args):
        """
        parseRedrawMode(ViewerTest_AutoUpdater self, TCollection_AsciiString theArg) -> Standard_Boolean

        Parse redraw mode argument

        :type theArg: OCC.wrapper.TCollection.TCollection_AsciiString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ViewerTest.ViewerTest_AutoUpdater_parseRedrawMode(self, *args)


    def Invalidate(self, *args):
        """
        Invalidate(ViewerTest_AutoUpdater self)

        Disable autoupdate


        """
        return _ViewerTest.ViewerTest_AutoUpdater_Invalidate(self, *args)


    def Update(self, *args):
        """
        Update(ViewerTest_AutoUpdater self)

        Finally update view


        """
        return _ViewerTest.ViewerTest_AutoUpdater_Update(self, *args)

    __swig_destroy__ = _ViewerTest.delete_ViewerTest_AutoUpdater
ViewerTest_AutoUpdater_swigregister = _ViewerTest.ViewerTest_AutoUpdater_swigregister
ViewerTest_AutoUpdater_swigregister(ViewerTest_AutoUpdater)

class ViewerTest_(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Factory(*args):
        """
        Factory(Draw_Interpretor theDI)

        Loads all Draw commands of  V2d & V3d. Used for plugin.

        :type theDI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _ViewerTest.ViewerTest__Factory(*args)

    Factory = staticmethod(Factory)

    def ViewerInit(*args):
        """
        ViewerInit(Standard_Integer const thePxLeft=0, Standard_Integer const thePxTop=0, Standard_Integer const thePxWidth=0, Standard_Integer const thePxHeight=0, TCollection_AsciiString theViewName, TCollection_AsciiString theDisplayName, Handle_V3d_View theViewToClone) -> TCollection_AsciiString

        Creates view with default or custom name
        and adds this name in map to manage multiple views.
        Implemented in ViewerTest_ViewerCommands.cxx.
        @param thePxLeft      left position of newly created window
        @param thePxTop       top  position of newly created window
        @param thePxWidth     width of newly created window
        @param thePxHeight    height of newly created window
        @param theViewName    name of newly created View
        @oaram theDisplayName display name
        @param theViewToClone when specified, the new View will copy properties of existing one

        :type thePxLeft: int
        :type thePxTop: int
        :type thePxWidth: int
        :type thePxHeight: int
        :type theViewName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theDisplayName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theViewToClone: OCC.wrapper.V3d.Handle_V3d_View
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _ViewerTest.ViewerTest__ViewerInit(*args)

    ViewerInit = staticmethod(ViewerInit)

    def RemoveViewName(*args):
        """
        RemoveViewName(TCollection_AsciiString theName)

        :type theName: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _ViewerTest.ViewerTest__RemoveViewName(*args)

    RemoveViewName = staticmethod(RemoveViewName)

    def InitViewName(*args):
        """
        InitViewName(TCollection_AsciiString theName, Handle_V3d_View theView)

        :type theName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theView: OCC.wrapper.V3d.Handle_V3d_View

        """
        return _ViewerTest.ViewerTest__InitViewName(*args)

    InitViewName = staticmethod(InitViewName)

    def GetCurrentViewName(*args):
        """
        GetCurrentViewName() -> TCollection_AsciiString

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _ViewerTest.ViewerTest__GetCurrentViewName(*args)

    GetCurrentViewName = staticmethod(GetCurrentViewName)

    def RemoveView(*args):
        """
        RemoveView(TCollection_AsciiString theViewName, Standard_Boolean const theToRemoveContext)
        RemoveView(Handle_V3d_View theView, Standard_Boolean const theToRemoveContext)

        Removes view and clear all maps
        with information about its resources if necessary

        :type theView: OCC.wrapper.V3d.Handle_V3d_View
        :type theToRemoveContext: bool

        """
        return _ViewerTest.ViewerTest__RemoveView(*args)

    RemoveView = staticmethod(RemoveView)

    def Display(*args):
        """
        Display(TCollection_AsciiString theName, Handle_AIS_InteractiveObject theObject, Standard_Boolean const theToUpdate, Standard_Boolean const theReplaceIfExists) -> Standard_Boolean

        Display AIS object in active Viewer and register it in the map of Interactive Objects with specified name.
        @param theName            key to be associated to displayed interactive object
        @param theObject          object to display
        @param theToUpdate        redraw viewer after displaying object
        @param theReplaceIfExists replace the object assigned to specified key
        @return true if new object has been displayed

        :type theName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theObject: OCC.wrapper.AIS.Handle_AIS_InteractiveObject
        :type theToUpdate: bool
        :type theReplaceIfExists: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ViewerTest.ViewerTest__Display(*args)

    Display = staticmethod(Display)

    def PickShape(*args):
        """
        PickShape(TopAbs_ShapeEnum const aType, Standard_Integer const MaxPick=5) -> TopoDS_Shape

        waits until a shape of type <aType> is picked in the AIS Viewer and returns it.
        if <aType> == TopAbs_Shape, any shape can be picked...
        MaxPick  is the Max number before exiting, if no pick is successful

        :type aType: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :type MaxPick: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _ViewerTest.ViewerTest__PickShape(*args)

    PickShape = staticmethod(PickShape)

    def PickShapes(*args):
        """
        PickShapes(TopAbs_ShapeEnum const aType, Handle_TopTools_HArray1OfShape thepicked, Standard_Integer const MaxPick=5) -> Standard_Boolean

        wait until the array is filled with picked shapes.
        returns True if the array is filled.
        exit if number of unsuccessful picks =  <MaxPick>

        :type aType: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :type thepicked: OCC.wrapper.TopTools.Handle_TopTools_HArray1OfShape
        :type MaxPick: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ViewerTest.ViewerTest__PickShapes(*args)

    PickShapes = staticmethod(PickShapes)

    def Commands(*args):
        """
        Commands(Draw_Interpretor theCommands)

        :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _ViewerTest.ViewerTest__Commands(*args)

    Commands = staticmethod(Commands)

    def ViewerCommands(*args):
        """
        ViewerCommands(Draw_Interpretor theCommands)

        :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _ViewerTest.ViewerTest__ViewerCommands(*args)

    ViewerCommands = staticmethod(ViewerCommands)

    def MyCommands(*args):
        """
        MyCommands(Draw_Interpretor theCommands)

        :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _ViewerTest.ViewerTest__MyCommands(*args)

    MyCommands = staticmethod(MyCommands)

    def RelationCommands(*args):
        """
        RelationCommands(Draw_Interpretor theCommands)

        :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _ViewerTest.ViewerTest__RelationCommands(*args)

    RelationCommands = staticmethod(RelationCommands)

    def ObjectCommands(*args):
        """
        ObjectCommands(Draw_Interpretor theCommands)

        :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _ViewerTest.ViewerTest__ObjectCommands(*args)

    ObjectCommands = staticmethod(ObjectCommands)

    def FilletCommands(*args):
        """
        FilletCommands(Draw_Interpretor theCommands)

        :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _ViewerTest.ViewerTest__FilletCommands(*args)

    FilletCommands = staticmethod(FilletCommands)

    def OpenGlCommands(*args):
        """
        OpenGlCommands(Draw_Interpretor theCommands)

        :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _ViewerTest.ViewerTest__OpenGlCommands(*args)

    OpenGlCommands = staticmethod(OpenGlCommands)

    def GetMousePosition(*args):
        """
        GetMousePosition()

        :type xpix: int
        :type ypix: int

        """
        return _ViewerTest.ViewerTest__GetMousePosition(*args)

    GetMousePosition = staticmethod(GetMousePosition)

    def GetViewerFromContext(*args):
        """
        GetViewerFromContext() -> Handle_V3d_Viewer

        :rtype: OCC.wrapper.V3d.Handle_V3d_Viewer

        """
        return _ViewerTest.ViewerTest__GetViewerFromContext(*args)

    GetViewerFromContext = staticmethod(GetViewerFromContext)

    def GetCollectorFromContext(*args):
        """
        GetCollectorFromContext() -> Handle_V3d_Viewer

        :rtype: OCC.wrapper.V3d.Handle_V3d_Viewer

        """
        return _ViewerTest.ViewerTest__GetCollectorFromContext(*args)

    GetCollectorFromContext = staticmethod(GetCollectorFromContext)

    def GetAISContext(*args):
        """
        GetAISContext() -> Handle_AIS_InteractiveContext

        :rtype: OCC.wrapper.AIS.Handle_AIS_InteractiveContext

        """
        return _ViewerTest.ViewerTest__GetAISContext(*args)

    GetAISContext = staticmethod(GetAISContext)

    def SetAISContext(*args):
        """
        SetAISContext(Handle_AIS_InteractiveContext aContext)

        :type aContext: OCC.wrapper.AIS.Handle_AIS_InteractiveContext

        """
        return _ViewerTest.ViewerTest__SetAISContext(*args)

    SetAISContext = staticmethod(SetAISContext)

    def CurrentView(*args):
        """
        CurrentView() -> Handle_V3d_View
        CurrentView(Handle_V3d_View aViou)

        :type aViou: OCC.wrapper.V3d.Handle_V3d_View

        """
        return _ViewerTest.ViewerTest__CurrentView(*args)

    CurrentView = staticmethod(CurrentView)

    def Clear(*args):
        """Clear()"""
        return _ViewerTest.ViewerTest__Clear(*args)

    Clear = staticmethod(Clear)

    def SetEventManager(*args):
        """
        SetEventManager(Handle_ViewerTest_EventManager theMgr)

        puts theMgr as current eventmanager (the move,select,...will be applied to theMgr)

        :type theMgr: OCC.wrapper.ViewerTest.Handle_ViewerTest_EventManager

        """
        return _ViewerTest.ViewerTest__SetEventManager(*args)

    SetEventManager = staticmethod(SetEventManager)

    def UnsetEventManager(*args):
        """
        UnsetEventManager()

        removes the last EventManager from the list.


        """
        return _ViewerTest.ViewerTest__UnsetEventManager(*args)

    UnsetEventManager = staticmethod(UnsetEventManager)

    def ResetEventManager(*args):
        """
        ResetEventManager()

        clear the list of EventManagers and
        sets the default EventManager as current


        """
        return _ViewerTest.ViewerTest__ResetEventManager(*args)

    ResetEventManager = staticmethod(ResetEventManager)

    def CurrentEventManager(*args):
        """
        CurrentEventManager() -> Handle_ViewerTest_EventManager

        :rtype: OCC.wrapper.ViewerTest.Handle_ViewerTest_EventManager

        """
        return _ViewerTest.ViewerTest__CurrentEventManager(*args)

    CurrentEventManager = staticmethod(CurrentEventManager)

    def GetColorFromName(*args):
        """
        GetColorFromName(Standard_CString const name) -> Quantity_NameOfColor

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Quantity.Quantity_NameOfColor

        """
        return _ViewerTest.ViewerTest__GetColorFromName(*args)

    GetColorFromName = staticmethod(GetColorFromName)

    def ParseColor(*args):
        """
        ParseColor(Standard_Integer theArgNb, char const ** theArgVec, Quantity_Color theColor) -> Standard_Integer

        Parses color argument(s) specified within theArgVec[0], theArgVec[1] and theArgVec[2].
        Handles either color specified by name (single argument)
        or by RGB components (3 arguments) in range 0..1.
        The result is stored in theColor on success.
        Returns number of handled arguments (1 or 3) or 0 on syntax error.

        :type theArgNb: int
        :type theArgVec: const char **
        :type theColor: OCC.wrapper.Quantity.Quantity_Color
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ViewerTest.ViewerTest__ParseColor(*args)

    ParseColor = staticmethod(ParseColor)

    def RedrawAllViews(*args):
        """
        RedrawAllViews()

        redraws all defined views.


        """
        return _ViewerTest.ViewerTest__RedrawAllViews(*args)

    RedrawAllViews = staticmethod(RedrawAllViews)

    def SplitParameter(*args):
        """
        SplitParameter(TCollection_AsciiString theString, TCollection_AsciiString theName, TCollection_AsciiString theValue) -> Standard_Boolean

        Splits "parameter=value" string into separate
        parameter and value strings.
        @return TRUE if the string matches pattern "<string>=<empty or string>"

        :type theString: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theValue: OCC.wrapper.TCollection.TCollection_AsciiString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ViewerTest.ViewerTest__SplitParameter(*args)

    SplitParameter = staticmethod(SplitParameter)

    def ParseOnOff(*args):
        """
        ParseOnOff(Standard_CString theArg) -> Standard_Boolean

        Parses boolean argument.
        Handles either flag specified by 0|1 or on|off.

        :type theArg: OCC.wrapper.Standard.Standard_CString
        :type theIsOn: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ViewerTest.ViewerTest__ParseOnOff(*args)

    ParseOnOff = staticmethod(ParseOnOff)

    def GetSelectedShapes(*args):
        """
        GetSelectedShapes(NCollection_List_TopoDS_Shape theShapes)

        Returns list of selected shapes.

        :type theShapes: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _ViewerTest.ViewerTest__GetSelectedShapes(*args)

    GetSelectedShapes = staticmethod(GetSelectedShapes)

    def ParseLineType(*args):
        """
        ParseLineType(Standard_CString theArg) -> Standard_Boolean

        Parses line type argument.
        Handles either enumeration (integer) value or string constant.

        :type theArg: OCC.wrapper.Standard.Standard_CString
        :type theType: OCC.wrapper.Aspect.Aspect_TypeOfLine
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ViewerTest.ViewerTest__ParseLineType(*args)

    ParseLineType = staticmethod(ParseLineType)

    def ParseMarkerType(*args):
        """
        ParseMarkerType(Standard_CString theArg, Handle_Image_PixMap theImage) -> Standard_Boolean

        Parses marker type argument.
        Handles either enumeration (integer) value or string constant.

        :type theArg: OCC.wrapper.Standard.Standard_CString
        :type theType: OCC.wrapper.Aspect.Aspect_TypeOfMarker
        :type theImage: OCC.wrapper.Image.Handle_Image_PixMap
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ViewerTest.ViewerTest__ParseMarkerType(*args)

    ParseMarkerType = staticmethod(ParseMarkerType)

    def ParseShadingModel(*args):
        """
        ParseShadingModel(Standard_CString theArg) -> Standard_Boolean

        Parses shading model argument.
        Handles either enumeration (integer) value or string constant.

        :type theArg: OCC.wrapper.Standard.Standard_CString
        :type theModel: OCC.wrapper.Graphic3d.Graphic3d_TypeOfShadingModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ViewerTest.ViewerTest__ParseShadingModel(*args)

    ParseShadingModel = staticmethod(ParseShadingModel)

    def __init__(self):
        this = _ViewerTest.new_ViewerTest_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ViewerTest.delete_ViewerTest_
ViewerTest__swigregister = _ViewerTest.ViewerTest__swigregister
ViewerTest__swigregister(ViewerTest_)

def ViewerTest__Factory(*args):
    """
    ViewerTest__Factory(Draw_Interpretor theDI)

    Loads all Draw commands of  V2d & V3d. Used for plugin.

    :type theDI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _ViewerTest.ViewerTest__Factory(*args)

def ViewerTest__ViewerInit(*args):
    """
    ViewerTest__ViewerInit(Standard_Integer const thePxLeft=0, Standard_Integer const thePxTop=0, Standard_Integer const thePxWidth=0, Standard_Integer const thePxHeight=0, TCollection_AsciiString theViewName, TCollection_AsciiString theDisplayName, Handle_V3d_View theViewToClone) -> TCollection_AsciiString

    Creates view with default or custom name
    and adds this name in map to manage multiple views.
    Implemented in ViewerTest_ViewerCommands.cxx.
    @param thePxLeft      left position of newly created window
    @param thePxTop       top  position of newly created window
    @param thePxWidth     width of newly created window
    @param thePxHeight    height of newly created window
    @param theViewName    name of newly created View
    @oaram theDisplayName display name
    @param theViewToClone when specified, the new View will copy properties of existing one

    :type thePxLeft: int
    :type thePxTop: int
    :type thePxWidth: int
    :type thePxHeight: int
    :type theViewName: OCC.wrapper.TCollection.TCollection_AsciiString
    :type theDisplayName: OCC.wrapper.TCollection.TCollection_AsciiString
    :type theViewToClone: OCC.wrapper.V3d.Handle_V3d_View
    :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

    """
    return _ViewerTest.ViewerTest__ViewerInit(*args)

def ViewerTest__RemoveViewName(*args):
    """
    ViewerTest__RemoveViewName(TCollection_AsciiString theName)

    :type theName: OCC.wrapper.TCollection.TCollection_AsciiString

    """
    return _ViewerTest.ViewerTest__RemoveViewName(*args)

def ViewerTest__InitViewName(*args):
    """
    ViewerTest__InitViewName(TCollection_AsciiString theName, Handle_V3d_View theView)

    :type theName: OCC.wrapper.TCollection.TCollection_AsciiString
    :type theView: OCC.wrapper.V3d.Handle_V3d_View

    """
    return _ViewerTest.ViewerTest__InitViewName(*args)

def ViewerTest__GetCurrentViewName(*args):
    """
    ViewerTest__GetCurrentViewName() -> TCollection_AsciiString

    :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

    """
    return _ViewerTest.ViewerTest__GetCurrentViewName(*args)

def ViewerTest__RemoveView(*args):
    """
    RemoveView(TCollection_AsciiString theViewName, Standard_Boolean const theToRemoveContext)
    ViewerTest__RemoveView(Handle_V3d_View theView, Standard_Boolean const theToRemoveContext)

    Removes view and clear all maps
    with information about its resources if necessary

    :type theView: OCC.wrapper.V3d.Handle_V3d_View
    :type theToRemoveContext: bool

    """
    return _ViewerTest.ViewerTest__RemoveView(*args)

def ViewerTest__Display(*args):
    """
    ViewerTest__Display(TCollection_AsciiString theName, Handle_AIS_InteractiveObject theObject, Standard_Boolean const theToUpdate, Standard_Boolean const theReplaceIfExists) -> Standard_Boolean

    Display AIS object in active Viewer and register it in the map of Interactive Objects with specified name.
    @param theName            key to be associated to displayed interactive object
    @param theObject          object to display
    @param theToUpdate        redraw viewer after displaying object
    @param theReplaceIfExists replace the object assigned to specified key
    @return true if new object has been displayed

    :type theName: OCC.wrapper.TCollection.TCollection_AsciiString
    :type theObject: OCC.wrapper.AIS.Handle_AIS_InteractiveObject
    :type theToUpdate: bool
    :type theReplaceIfExists: bool
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _ViewerTest.ViewerTest__Display(*args)

def ViewerTest__PickShape(*args):
    """
    ViewerTest__PickShape(TopAbs_ShapeEnum const aType, Standard_Integer const MaxPick=5) -> TopoDS_Shape

    waits until a shape of type <aType> is picked in the AIS Viewer and returns it.
    if <aType> == TopAbs_Shape, any shape can be picked...
    MaxPick  is the Max number before exiting, if no pick is successful

    :type aType: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
    :type MaxPick: int
    :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

    """
    return _ViewerTest.ViewerTest__PickShape(*args)

def ViewerTest__PickShapes(*args):
    """
    ViewerTest__PickShapes(TopAbs_ShapeEnum const aType, Handle_TopTools_HArray1OfShape thepicked, Standard_Integer const MaxPick=5) -> Standard_Boolean

    wait until the array is filled with picked shapes.
    returns True if the array is filled.
    exit if number of unsuccessful picks =  <MaxPick>

    :type aType: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
    :type thepicked: OCC.wrapper.TopTools.Handle_TopTools_HArray1OfShape
    :type MaxPick: int
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _ViewerTest.ViewerTest__PickShapes(*args)

def ViewerTest__Commands(*args):
    """
    ViewerTest__Commands(Draw_Interpretor theCommands)

    :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _ViewerTest.ViewerTest__Commands(*args)

def ViewerTest__ViewerCommands(*args):
    """
    ViewerTest__ViewerCommands(Draw_Interpretor theCommands)

    :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _ViewerTest.ViewerTest__ViewerCommands(*args)

def ViewerTest__MyCommands(*args):
    """
    ViewerTest__MyCommands(Draw_Interpretor theCommands)

    :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _ViewerTest.ViewerTest__MyCommands(*args)

def ViewerTest__RelationCommands(*args):
    """
    ViewerTest__RelationCommands(Draw_Interpretor theCommands)

    :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _ViewerTest.ViewerTest__RelationCommands(*args)

def ViewerTest__ObjectCommands(*args):
    """
    ViewerTest__ObjectCommands(Draw_Interpretor theCommands)

    :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _ViewerTest.ViewerTest__ObjectCommands(*args)

def ViewerTest__FilletCommands(*args):
    """
    ViewerTest__FilletCommands(Draw_Interpretor theCommands)

    :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _ViewerTest.ViewerTest__FilletCommands(*args)

def ViewerTest__OpenGlCommands(*args):
    """
    ViewerTest__OpenGlCommands(Draw_Interpretor theCommands)

    :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _ViewerTest.ViewerTest__OpenGlCommands(*args)

def ViewerTest__GetMousePosition(*args):
    """
    ViewerTest__GetMousePosition()

    :type xpix: int
    :type ypix: int

    """
    return _ViewerTest.ViewerTest__GetMousePosition(*args)

def ViewerTest__GetViewerFromContext(*args):
    """
    ViewerTest__GetViewerFromContext() -> Handle_V3d_Viewer

    :rtype: OCC.wrapper.V3d.Handle_V3d_Viewer

    """
    return _ViewerTest.ViewerTest__GetViewerFromContext(*args)

def ViewerTest__GetCollectorFromContext(*args):
    """
    ViewerTest__GetCollectorFromContext() -> Handle_V3d_Viewer

    :rtype: OCC.wrapper.V3d.Handle_V3d_Viewer

    """
    return _ViewerTest.ViewerTest__GetCollectorFromContext(*args)

def ViewerTest__GetAISContext(*args):
    """
    ViewerTest__GetAISContext() -> Handle_AIS_InteractiveContext

    :rtype: OCC.wrapper.AIS.Handle_AIS_InteractiveContext

    """
    return _ViewerTest.ViewerTest__GetAISContext(*args)

def ViewerTest__SetAISContext(*args):
    """
    ViewerTest__SetAISContext(Handle_AIS_InteractiveContext aContext)

    :type aContext: OCC.wrapper.AIS.Handle_AIS_InteractiveContext

    """
    return _ViewerTest.ViewerTest__SetAISContext(*args)

def ViewerTest__CurrentView(*args):
    """
    CurrentView() -> Handle_V3d_View
    ViewerTest__CurrentView(Handle_V3d_View aViou)

    :type aViou: OCC.wrapper.V3d.Handle_V3d_View

    """
    return _ViewerTest.ViewerTest__CurrentView(*args)

def ViewerTest__Clear(*args):
    """ViewerTest__Clear()"""
    return _ViewerTest.ViewerTest__Clear(*args)

def ViewerTest__SetEventManager(*args):
    """
    ViewerTest__SetEventManager(Handle_ViewerTest_EventManager theMgr)

    puts theMgr as current eventmanager (the move,select,...will be applied to theMgr)

    :type theMgr: OCC.wrapper.ViewerTest.Handle_ViewerTest_EventManager

    """
    return _ViewerTest.ViewerTest__SetEventManager(*args)

def ViewerTest__UnsetEventManager(*args):
    """
    ViewerTest__UnsetEventManager()

    removes the last EventManager from the list.


    """
    return _ViewerTest.ViewerTest__UnsetEventManager(*args)

def ViewerTest__ResetEventManager(*args):
    """
    ViewerTest__ResetEventManager()

    clear the list of EventManagers and
    sets the default EventManager as current


    """
    return _ViewerTest.ViewerTest__ResetEventManager(*args)

def ViewerTest__CurrentEventManager(*args):
    """
    ViewerTest__CurrentEventManager() -> Handle_ViewerTest_EventManager

    :rtype: OCC.wrapper.ViewerTest.Handle_ViewerTest_EventManager

    """
    return _ViewerTest.ViewerTest__CurrentEventManager(*args)

def ViewerTest__GetColorFromName(*args):
    """
    ViewerTest__GetColorFromName(Standard_CString const name) -> Quantity_NameOfColor

    :type name: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Quantity.Quantity_NameOfColor

    """
    return _ViewerTest.ViewerTest__GetColorFromName(*args)

def ViewerTest__ParseColor(*args):
    """
    ViewerTest__ParseColor(Standard_Integer theArgNb, char const ** theArgVec, Quantity_Color theColor) -> Standard_Integer

    Parses color argument(s) specified within theArgVec[0], theArgVec[1] and theArgVec[2].
    Handles either color specified by name (single argument)
    or by RGB components (3 arguments) in range 0..1.
    The result is stored in theColor on success.
    Returns number of handled arguments (1 or 3) or 0 on syntax error.

    :type theArgNb: int
    :type theArgVec: const char **
    :type theColor: OCC.wrapper.Quantity.Quantity_Color
    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _ViewerTest.ViewerTest__ParseColor(*args)

def ViewerTest__RedrawAllViews(*args):
    """
    ViewerTest__RedrawAllViews()

    redraws all defined views.


    """
    return _ViewerTest.ViewerTest__RedrawAllViews(*args)

def ViewerTest__SplitParameter(*args):
    """
    ViewerTest__SplitParameter(TCollection_AsciiString theString, TCollection_AsciiString theName, TCollection_AsciiString theValue) -> Standard_Boolean

    Splits "parameter=value" string into separate
    parameter and value strings.
    @return TRUE if the string matches pattern "<string>=<empty or string>"

    :type theString: OCC.wrapper.TCollection.TCollection_AsciiString
    :type theName: OCC.wrapper.TCollection.TCollection_AsciiString
    :type theValue: OCC.wrapper.TCollection.TCollection_AsciiString
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _ViewerTest.ViewerTest__SplitParameter(*args)

def ViewerTest__ParseOnOff(*args):
    """
    ViewerTest__ParseOnOff(Standard_CString theArg) -> Standard_Boolean

    Parses boolean argument.
    Handles either flag specified by 0|1 or on|off.

    :type theArg: OCC.wrapper.Standard.Standard_CString
    :type theIsOn: bool
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _ViewerTest.ViewerTest__ParseOnOff(*args)

def ViewerTest__GetSelectedShapes(*args):
    """
    ViewerTest__GetSelectedShapes(NCollection_List_TopoDS_Shape theShapes)

    Returns list of selected shapes.

    :type theShapes: OCC.wrapper.TopTools.TopTools_ListOfShape

    """
    return _ViewerTest.ViewerTest__GetSelectedShapes(*args)

def ViewerTest__ParseLineType(*args):
    """
    ViewerTest__ParseLineType(Standard_CString theArg) -> Standard_Boolean

    Parses line type argument.
    Handles either enumeration (integer) value or string constant.

    :type theArg: OCC.wrapper.Standard.Standard_CString
    :type theType: OCC.wrapper.Aspect.Aspect_TypeOfLine
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _ViewerTest.ViewerTest__ParseLineType(*args)

def ViewerTest__ParseMarkerType(*args):
    """
    ViewerTest__ParseMarkerType(Standard_CString theArg, Handle_Image_PixMap theImage) -> Standard_Boolean

    Parses marker type argument.
    Handles either enumeration (integer) value or string constant.

    :type theArg: OCC.wrapper.Standard.Standard_CString
    :type theType: OCC.wrapper.Aspect.Aspect_TypeOfMarker
    :type theImage: OCC.wrapper.Image.Handle_Image_PixMap
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _ViewerTest.ViewerTest__ParseMarkerType(*args)

def ViewerTest__ParseShadingModel(*args):
    """
    ViewerTest__ParseShadingModel(Standard_CString theArg) -> Standard_Boolean

    Parses shading model argument.
    Handles either enumeration (integer) value or string constant.

    :type theArg: OCC.wrapper.Standard.Standard_CString
    :type theModel: OCC.wrapper.Graphic3d.Graphic3d_TypeOfShadingModel
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _ViewerTest.ViewerTest__ParseShadingModel(*args)


try:
	TColStd_MapTransientHasher = TColStd.NCollection_DefaultHasher_Handle_Standard_Transient
except AttributeError:
	pass # does not exist, probably ignored



