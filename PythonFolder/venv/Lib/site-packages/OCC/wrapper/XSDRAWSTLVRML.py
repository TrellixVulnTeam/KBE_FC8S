# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_XSDRAWSTLVRML')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_XSDRAWSTLVRML')
    _XSDRAWSTLVRML = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_XSDRAWSTLVRML', [dirname(__file__)])
        except ImportError:
            import _XSDRAWSTLVRML
            return _XSDRAWSTLVRML
        try:
            _mod = imp.load_module('_XSDRAWSTLVRML', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _XSDRAWSTLVRML = swig_import_helper()
    del swig_import_helper
else:
    import _XSDRAWSTLVRML
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XSDRAWSTLVRML.delete_SwigPyIterator

    def value(self):
        return _XSDRAWSTLVRML.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _XSDRAWSTLVRML.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _XSDRAWSTLVRML.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _XSDRAWSTLVRML.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _XSDRAWSTLVRML.SwigPyIterator_equal(self, x)

    def copy(self):
        return _XSDRAWSTLVRML.SwigPyIterator_copy(self)

    def next(self):
        return _XSDRAWSTLVRML.SwigPyIterator_next(self)

    def __next__(self):
        return _XSDRAWSTLVRML.SwigPyIterator___next__(self)

    def previous(self):
        return _XSDRAWSTLVRML.SwigPyIterator_previous(self)

    def advance(self, n):
        return _XSDRAWSTLVRML.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _XSDRAWSTLVRML.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _XSDRAWSTLVRML.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _XSDRAWSTLVRML.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _XSDRAWSTLVRML.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _XSDRAWSTLVRML.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _XSDRAWSTLVRML.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _XSDRAWSTLVRML.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _XSDRAWSTLVRML.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_XSDRAWSTLVRML.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _XSDRAWSTLVRML.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _XSDRAWSTLVRML.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XSDRAWSTLVRML.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _XSDRAWSTLVRML.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _XSDRAWSTLVRML.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _XSDRAWSTLVRML.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _XSDRAWSTLVRML.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_XSDRAWSTLVRML.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _XSDRAWSTLVRML.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _XSDRAWSTLVRML.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XSDRAWSTLVRML.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _XSDRAWSTLVRML.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _XSDRAWSTLVRML.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _XSDRAWSTLVRML.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _XSDRAWSTLVRML.ptr_to_number(item)
ptr_to_number = _XSDRAWSTLVRML.ptr_to_number

def HashCode(*args):
    return _XSDRAWSTLVRML.HashCode(*args)
HashCode = _XSDRAWSTLVRML.HashCode

def ptr_equal(a, b):
    return _XSDRAWSTLVRML.ptr_equal(a, b)
ptr_equal = _XSDRAWSTLVRML.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MeshVS
else:
    import MeshVS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import SelectBasics
else:
    import SelectBasics
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Select3D
else:
    import Select3D
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BVH
else:
    import BVH
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Poly
else:
    import Poly
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TShort
else:
    import TShort
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Graphic3d
else:
    import Graphic3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Image
else:
    import Image
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Aspect
else:
    import Aspect
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Font
else:
    import Font
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import SelectMgr
else:
    import SelectMgr
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import PrsMgr
else:
    import PrsMgr
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import V3d
else:
    import V3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Prs3d
else:
    import Prs3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import HLRAlgo
else:
    import HLRAlgo
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import AIS
else:
    import AIS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import DsgPrs
else:
    import DsgPrs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StdSelect
else:
    import StdSelect
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Draw
else:
    import Draw
del _swig_python_version_info
class XSDRAWSTLVRML_DataSource3D(MeshVS.MeshVS_DataSource):
    """The sample DataSource3D for working with STLMesh_Mesh"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XSDRAWSTLVRML_DataSource3D
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XSDRAWSTLVRML_DataSource3D(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XSDRAWSTLVRML_DataSource3D self) -> XSDRAWSTLVRML_DataSource3D

        Constructor


        """
        this = _XSDRAWSTLVRML.new_XSDRAWSTLVRML_DataSource3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def GetGeom(self, *args):
        """
        GetGeom(XSDRAWSTLVRML_DataSource3D self, Standard_Integer const theID, Standard_Boolean const theIsElement, NCollection_Array1_Standard_Real theCoords) -> Standard_Boolean

        Returns geometry information about node ( if IsElement is False ) or element ( IsElement is True )
        by co-ordinates. For element this method must return all its nodes co-ordinates in the strict order: X, Y, Z and
        with nodes order is the same as in wire bounding the face or link. NbNodes is number of nodes of element.
        It is recommended to return 1 for node. Type is an element type.

        :type theID: int
        :type theIsElement: bool
        :type theCoords: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type theNbNodes: int
        :type theType: OCC.wrapper.MeshVS.MeshVS_EntityType
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.XSDRAWSTLVRML_DataSource3D_GetGeom(self, *args)


    def Get3DGeom(self, *args):
        """
        Get3DGeom(XSDRAWSTLVRML_DataSource3D self, Standard_Integer const theID, Handle_MeshVS_HArray1OfSequenceOfInteger theData) -> Standard_Boolean

        This method returns topology information about 3D-element
        Returns false if element with ID isn't 3D or because other troubles

        :type theID: int
        :type theNbNodes: int
        :type theData: OCC.wrapper.MeshVS.Handle_MeshVS_HArray1OfSequenceOfInteger
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.XSDRAWSTLVRML_DataSource3D_Get3DGeom(self, *args)


    def GetGeomType(self, *args):
        """
        GetGeomType(XSDRAWSTLVRML_DataSource3D self, Standard_Integer const theID, Standard_Boolean const theIsElement) -> Standard_Boolean

        This method is similar to GetGeom, but returns only element or node type. This method is provided for
        a fine performance.

        :type theID: int
        :type theIsElement: bool
        :type theType: OCC.wrapper.MeshVS.MeshVS_EntityType
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.XSDRAWSTLVRML_DataSource3D_GetGeomType(self, *args)


    def GetAddr(self, *args):
        """
        GetAddr(XSDRAWSTLVRML_DataSource3D self, Standard_Integer const theID, Standard_Boolean const theIsElement) -> Standard_Address

        This method returns by number an address of any entity which represents element or node data structure.

        :type theID: int
        :type theIsElement: bool
        :rtype: OCC.wrapper.Standard.Standard_Address

        """
        return _XSDRAWSTLVRML.XSDRAWSTLVRML_DataSource3D_GetAddr(self, *args)


    def GetNodesByElement(self, *args):
        """
        GetNodesByElement(XSDRAWSTLVRML_DataSource3D self, Standard_Integer const theID, NCollection_Array1_Standard_Integer theNodeIDs) -> Standard_Boolean

        This method returns information about what node this element consist of.

        :type theID: int
        :type theNodeIDs: OCC.wrapper.TColStd.TColStd_Array1OfInteger
        :type theNbNodes: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.XSDRAWSTLVRML_DataSource3D_GetNodesByElement(self, *args)


    def GetAllNodes(self, *args):
        """
        This method returns map of all nodes the object consist of.

        :rtype: OCC.wrapper.TColStd.TColStd_PackedMapOfInteger

        """
        res = _XSDRAWSTLVRML.XSDRAWSTLVRML_DataSource3D_GetAllNodes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetAllElements(self, *args):
        """
        This method returns map of all elements the object consist of.

        :rtype: OCC.wrapper.TColStd.TColStd_PackedMapOfInteger

        """
        res = _XSDRAWSTLVRML.XSDRAWSTLVRML_DataSource3D_GetAllElements(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetNormal(self, *args):
        """
        GetNormal(XSDRAWSTLVRML_DataSource3D self, Standard_Integer const theID, Standard_Integer const theMax) -> Standard_Boolean

        This method calculates normal of face, which is using for correct reflection presentation.
        There is default method, for advance reflection this method can be redefined.

        :type theID: int
        :type theMax: int
        :type theNx: float
        :type theNy: float
        :type theNz: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.XSDRAWSTLVRML_DataSource3D_GetNormal(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XSDRAWSTLVRML.XSDRAWSTLVRML_DataSource3D_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XSDRAWSTLVRML.XSDRAWSTLVRML_DataSource3D_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XSDRAWSTLVRML.XSDRAWSTLVRML_DataSource3D_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XSDRAWSTLVRML.delete_XSDRAWSTLVRML_DataSource3D
XSDRAWSTLVRML_DataSource3D_swigregister = _XSDRAWSTLVRML.XSDRAWSTLVRML_DataSource3D_swigregister
XSDRAWSTLVRML_DataSource3D_swigregister(XSDRAWSTLVRML_DataSource3D)

def XSDRAWSTLVRML_DataSource3D_get_type_name(*args):
    """
    XSDRAWSTLVRML_DataSource3D_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XSDRAWSTLVRML.XSDRAWSTLVRML_DataSource3D_get_type_name(*args)

def XSDRAWSTLVRML_DataSource3D_get_type_descriptor(*args):
    """
    XSDRAWSTLVRML_DataSource3D_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XSDRAWSTLVRML.XSDRAWSTLVRML_DataSource3D_get_type_descriptor(*args)

class XSDRAWSTLVRML_DrawableMesh(Draw.Draw_Drawable3D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XSDRAWSTLVRML_DrawableMesh
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XSDRAWSTLVRML_DrawableMesh(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XSDRAWSTLVRML_DrawableMesh self, Handle_MeshVS_Mesh aMesh) -> XSDRAWSTLVRML_DrawableMesh

        :type aMesh: OCC.wrapper.MeshVS.Handle_MeshVS_Mesh

        """
        this = _XSDRAWSTLVRML.new_XSDRAWSTLVRML_DrawableMesh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def DrawOn(self, *args):
        """
        DrawOn(XSDRAWSTLVRML_DrawableMesh self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _XSDRAWSTLVRML.XSDRAWSTLVRML_DrawableMesh_DrawOn(self, *args)


    def GetMesh(self, *args):
        """
        GetMesh(XSDRAWSTLVRML_DrawableMesh self) -> Handle_MeshVS_Mesh

        :rtype: OCC.wrapper.MeshVS.Handle_MeshVS_Mesh

        """
        return _XSDRAWSTLVRML.XSDRAWSTLVRML_DrawableMesh_GetMesh(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XSDRAWSTLVRML.XSDRAWSTLVRML_DrawableMesh_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XSDRAWSTLVRML.XSDRAWSTLVRML_DrawableMesh_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XSDRAWSTLVRML.XSDRAWSTLVRML_DrawableMesh_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XSDRAWSTLVRML.delete_XSDRAWSTLVRML_DrawableMesh
XSDRAWSTLVRML_DrawableMesh_swigregister = _XSDRAWSTLVRML.XSDRAWSTLVRML_DrawableMesh_swigregister
XSDRAWSTLVRML_DrawableMesh_swigregister(XSDRAWSTLVRML_DrawableMesh)

def XSDRAWSTLVRML_DrawableMesh_get_type_name(*args):
    """
    XSDRAWSTLVRML_DrawableMesh_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XSDRAWSTLVRML.XSDRAWSTLVRML_DrawableMesh_get_type_name(*args)

def XSDRAWSTLVRML_DrawableMesh_get_type_descriptor(*args):
    """
    XSDRAWSTLVRML_DrawableMesh_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XSDRAWSTLVRML.XSDRAWSTLVRML_DrawableMesh_get_type_descriptor(*args)

class XSDRAWSTLVRML_DataSource(MeshVS.MeshVS_DataSource):
    """The sample DataSource for working with STLMesh_Mesh"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XSDRAWSTLVRML_DataSource
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XSDRAWSTLVRML_DataSource(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XSDRAWSTLVRML_DataSource self, Handle_Poly_Triangulation aMesh) -> XSDRAWSTLVRML_DataSource

        Constructor

        :type aMesh: OCC.wrapper.Poly.Handle_Poly_Triangulation

        """
        this = _XSDRAWSTLVRML.new_XSDRAWSTLVRML_DataSource(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def GetGeom(self, *args):
        """
        GetGeom(XSDRAWSTLVRML_DataSource self, Standard_Integer const ID, Standard_Boolean const IsElement, NCollection_Array1_Standard_Real Coords) -> Standard_Boolean

        Returns geometry information about node ( if IsElement is False ) or element ( IsElement is True )
        by co-ordinates. For element this method must return all its nodes co-ordinates in the strict order: X, Y, Z and
        with nodes order is the same as in wire bounding the face or link. NbNodes is number of nodes of element.
        It is recommended to return 1 for node. Type is an element type.

        :type ID: int
        :type IsElement: bool
        :type Coords: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type NbNodes: int
        :type Type: OCC.wrapper.MeshVS.MeshVS_EntityType
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.XSDRAWSTLVRML_DataSource_GetGeom(self, *args)


    def GetGeomType(self, *args):
        """
        GetGeomType(XSDRAWSTLVRML_DataSource self, Standard_Integer const ID, Standard_Boolean const IsElement) -> Standard_Boolean

        This method is similar to GetGeom, but returns only element or node type. This method is provided for
        a fine performance.

        :type ID: int
        :type IsElement: bool
        :type Type: OCC.wrapper.MeshVS.MeshVS_EntityType
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.XSDRAWSTLVRML_DataSource_GetGeomType(self, *args)


    def GetAddr(self, *args):
        """
        GetAddr(XSDRAWSTLVRML_DataSource self, Standard_Integer const ID, Standard_Boolean const IsElement) -> Standard_Address

        This method returns by number an address of any entity which represents element or node data structure.

        :type ID: int
        :type IsElement: bool
        :rtype: OCC.wrapper.Standard.Standard_Address

        """
        return _XSDRAWSTLVRML.XSDRAWSTLVRML_DataSource_GetAddr(self, *args)


    def GetNodesByElement(self, *args):
        """
        GetNodesByElement(XSDRAWSTLVRML_DataSource self, Standard_Integer const ID, NCollection_Array1_Standard_Integer NodeIDs) -> Standard_Boolean

        This method returns information about what node this element consist of.

        :type ID: int
        :type NodeIDs: OCC.wrapper.TColStd.TColStd_Array1OfInteger
        :type NbNodes: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.XSDRAWSTLVRML_DataSource_GetNodesByElement(self, *args)


    def GetAllNodes(self, *args):
        """
        This method returns map of all nodes the object consist of.

        :rtype: OCC.wrapper.TColStd.TColStd_PackedMapOfInteger

        """
        res = _XSDRAWSTLVRML.XSDRAWSTLVRML_DataSource_GetAllNodes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetAllElements(self, *args):
        """
        This method returns map of all elements the object consist of.

        :rtype: OCC.wrapper.TColStd.TColStd_PackedMapOfInteger

        """
        res = _XSDRAWSTLVRML.XSDRAWSTLVRML_DataSource_GetAllElements(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetNormal(self, *args):
        """
        GetNormal(XSDRAWSTLVRML_DataSource self, Standard_Integer const Id, Standard_Integer const Max) -> Standard_Boolean

        This method calculates normal of face, which is using for correct reflection presentation.
        There is default method, for advance reflection this method can be redefined.

        :type Id: int
        :type Max: int
        :type nx: float
        :type ny: float
        :type nz: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.XSDRAWSTLVRML_DataSource_GetNormal(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XSDRAWSTLVRML.XSDRAWSTLVRML_DataSource_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XSDRAWSTLVRML.XSDRAWSTLVRML_DataSource_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XSDRAWSTLVRML.XSDRAWSTLVRML_DataSource_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XSDRAWSTLVRML.delete_XSDRAWSTLVRML_DataSource
XSDRAWSTLVRML_DataSource_swigregister = _XSDRAWSTLVRML.XSDRAWSTLVRML_DataSource_swigregister
XSDRAWSTLVRML_DataSource_swigregister(XSDRAWSTLVRML_DataSource)

def XSDRAWSTLVRML_DataSource_get_type_name(*args):
    """
    XSDRAWSTLVRML_DataSource_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XSDRAWSTLVRML.XSDRAWSTLVRML_DataSource_get_type_name(*args)

def XSDRAWSTLVRML_DataSource_get_type_descriptor(*args):
    """
    XSDRAWSTLVRML_DataSource_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XSDRAWSTLVRML.XSDRAWSTLVRML_DataSource_get_type_descriptor(*args)

class XSDRAWSTLVRML_(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def InitCommands(*args):
        """
        InitCommands(Draw_Interpretor theCommands)

        Inits commands for writing to STL and VRML formats

        :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _XSDRAWSTLVRML.XSDRAWSTLVRML__InitCommands(*args)

    InitCommands = staticmethod(InitCommands)

    def Factory(*args):
        """
        Factory(Draw_Interpretor theDI)

        Loads all Draw commands of TKXSDRAW. Used for plugin.

        :type theDI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _XSDRAWSTLVRML.XSDRAWSTLVRML__Factory(*args)

    Factory = staticmethod(Factory)

    def __init__(self):
        this = _XSDRAWSTLVRML.new_XSDRAWSTLVRML_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XSDRAWSTLVRML.delete_XSDRAWSTLVRML_
XSDRAWSTLVRML__swigregister = _XSDRAWSTLVRML.XSDRAWSTLVRML__swigregister
XSDRAWSTLVRML__swigregister(XSDRAWSTLVRML_)

def XSDRAWSTLVRML__InitCommands(*args):
    """
    XSDRAWSTLVRML__InitCommands(Draw_Interpretor theCommands)

    Inits commands for writing to STL and VRML formats

    :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _XSDRAWSTLVRML.XSDRAWSTLVRML__InitCommands(*args)

def XSDRAWSTLVRML__Factory(*args):
    """
    XSDRAWSTLVRML__Factory(Draw_Interpretor theDI)

    Loads all Draw commands of TKXSDRAW. Used for plugin.

    :type theDI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _XSDRAWSTLVRML.XSDRAWSTLVRML__Factory(*args)


try:
	TColStd_DataMapOfIntegerReal = TColStd.NCollection_DataMap_Standard_Integer_Standard_Real_TColStd_MapIntegerHasher
except AttributeError:
	pass # does not exist, probably ignored

class NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher(NCollection.NCollection_BaseMap):
    """
    Purpose:     The DataMap is a Map to store keys with associated
    Items. See Map  from NCollection for  a discussion
    about the number of buckets.

    The DataMap can be seen as an extended array where
    the Keys  are the   indices.  For this reason  the
    operator () is defined on DataMap to fetch an Item
    from a Key. So the following syntax can be used :

    anItem = aMap(aKey);
    aMap(aKey) = anItem;

    This analogy has its  limit.   aMap(aKey) = anItem
    can  be done only  if aKey was previously bound to
    an item in the map.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher self) -> NCollection_DataMap< Standard_Integer,TColStd_DataMapOfIntegerReal,TColStd_MapIntegerHasher >::iterator

        Returns an iterator pointing to the first element in the map.

        :rtype: iterator

        """
        return _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher self) -> NCollection_DataMap< Standard_Integer,TColStd_DataMapOfIntegerReal,TColStd_MapIntegerHasher >::iterator

        Returns an iterator referring to the past-the-end element in the map.

        :rtype: iterator

        """
        return _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher self) -> NCollection_DataMap< Standard_Integer,TColStd_DataMapOfIntegerReal,TColStd_MapIntegerHasher >::const_iterator

        Returns a const iterator pointing to the first element in the map.

        :rtype: const_iterator

        """
        return _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher self) -> NCollection_DataMap< Standard_Integer,TColStd_DataMapOfIntegerReal,TColStd_MapIntegerHasher >::const_iterator

        Returns a const iterator referring to the past-the-end element in the map.

        :rtype: const_iterator

        """
        return _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The DataMap is a Map to store keys with associated
        Items. See Map  from NCollection for  a discussion
        about the number of buckets.

        The DataMap can be seen as an extended array where
        the Keys  are the   indices.  For this reason  the
        operator () is defined on DataMap to fetch an Item
        from a Key. So the following syntax can be used :

        anItem = aMap(aKey);
        aMap(aKey) = anItem;

        This analogy has its  limit.   aMap(aKey) = anItem
        can  be done only  if aKey was previously bound to
        an item in the map.
        """
        this = _XSDRAWSTLVRML.new_NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, *args):
        """
        Exchange(NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher self, NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher theOther)

        Exchange the content of two maps without re-allocations.
        Notice that allocators will be swapped as well!

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher_Exchange(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher self, NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher theOther) -> NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher

        Assignment.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher self, NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher theOther) -> NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher_assign(self, *args)


    def ReSize(self, *args):
        """
        ReSize(NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher self, Standard_Integer const N)

        ReSize

        :type N: int

        """
        return _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher_ReSize(self, *args)


    def Bind(self, *args):
        """
        Bind(NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher self, int const & theKey, NCollection_DataMap_Standard_Integer_Standard_Real_TColStd_MapIntegerHasher theItem) -> Standard_Boolean

        Bind binds Item to Key in map.
        @param theKey  key to add/update
        @param theItem new item; overrides value previously bound to the key, if any
        @return Standard_True if Key was not bound already

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher_Bind(self, *args)


    def Bound(self, *args):
        """
        Bound(NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher self, int const & theKey, NCollection_DataMap_Standard_Integer_Standard_Real_TColStd_MapIntegerHasher theItem) -> NCollection_DataMap_Standard_Integer_Standard_Real_TColStd_MapIntegerHasher

        Bound binds Item to Key in map. Returns modifiable Item 

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: TheItemType *

        """
        return _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher_Bound(self, *args)


    def IsBound(self, *args):
        """
        IsBound(NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher self, int const & theKey) -> Standard_Boolean

        IsBound

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher_IsBound(self, *args)


    def UnBind(self, *args):
        """
        UnBind(NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher self, int const & theKey) -> Standard_Boolean

        UnBind removes Item Key pair from map

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher_UnBind(self, *args)


    def Seek(self, *args):
        """
        Seek(NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher self, int const & theKey) -> NCollection_DataMap_Standard_Integer_Standard_Real_TColStd_MapIntegerHasher

        Seek returns pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: const TheItemType *

        """
        return _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher_Seek(self, *args)


    def Find(self, *args):
        """
        Find returns the Item for Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher_Find(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeSeek(self, *args):
        """
        ChangeSeek(NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher self, int const & theKey) -> NCollection_DataMap_Standard_Integer_Standard_Real_TColStd_MapIntegerHasher

        ChangeSeek returns modifiable pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: TheItemType *

        """
        return _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher_ChangeSeek(self, *args)


    def ChangeFind(self, *args):
        """
        ChangeFind(NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher self, int const & theKey) -> NCollection_DataMap_Standard_Integer_Standard_Real_TColStd_MapIntegerHasher

        ChangeFind returns mofifiable Item by Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: TheItemType &

        """
        return _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher_ChangeFind(self, *args)


    def __call__(self, *args):
        """
        operator ()

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Clear(self, *args):
        """
        Clear(NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher self, Standard_Boolean const doReleaseMemory)
        Clear(NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher self, Handle_NCollection_BaseAllocator theAllocator)

        Clear data and reset allocator

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher_Clear(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher self) -> Standard_Integer

        Size

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher_Size(self, *args)


    def __iter__(self):
        return _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher___iter__(self)
    __swig_destroy__ = _XSDRAWSTLVRML.delete_NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher
NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher_swigregister = _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher_swigregister
NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher_swigregister(NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher)

class NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _XSDRAWSTLVRML.new_NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XSDRAWSTLVRML.delete_NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher_IteratorHelper

    def __next__(self):
        return _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher_IteratorHelper___next__(self)
NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher_IteratorHelper_swigregister = _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher_IteratorHelper_swigregister
NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher_IteratorHelper_swigregister(NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher_IteratorHelper)


try:
	XSDRAWSTLVRML_CoordsMap = NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerReal_TColStd_MapIntegerHasher
except NameError:
	pass # does not exist, probably ignored

class Handle_XSDRAWSTLVRML_DataSource(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XSDRAWSTLVRML_DataSource self)

        Nullify the handle


        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XSDRAWSTLVRML_DataSource self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XSDRAWSTLVRML_DataSource self, XSDRAWSTLVRML_DataSource thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XSDRAWSTLVRML_DataSource self, Handle_XSDRAWSTLVRML_DataSource theHandle) -> Handle_XSDRAWSTLVRML_DataSource
        assign(Handle_XSDRAWSTLVRML_DataSource self, XSDRAWSTLVRML_DataSource thePtr) -> Handle_XSDRAWSTLVRML_DataSource
        assign(Handle_XSDRAWSTLVRML_DataSource self, Handle_XSDRAWSTLVRML_DataSource theHandle) -> Handle_XSDRAWSTLVRML_DataSource

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XSDRAWSTLVRML_DataSource self) -> XSDRAWSTLVRML_DataSource

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XSDRAWSTLVRML_DataSource self) -> XSDRAWSTLVRML_DataSource

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XSDRAWSTLVRML_DataSource self) -> XSDRAWSTLVRML_DataSource

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource___ref__(self, *args)


    def __hash__(self):
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XSDRAWSTLVRML.new_Handle_XSDRAWSTLVRML_DataSource(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource_DownCast)
    __swig_destroy__ = _XSDRAWSTLVRML.delete_Handle_XSDRAWSTLVRML_DataSource

    def GetGeom(self, *args):
        """
        GetGeom(Handle_XSDRAWSTLVRML_DataSource self, Standard_Integer const ID, Standard_Boolean const IsElement, NCollection_Array1_Standard_Real Coords) -> Standard_Boolean

        Returns geometry information about node ( if IsElement is False ) or element ( IsElement is True )
        by co-ordinates. For element this method must return all its nodes co-ordinates in the strict order: X, Y, Z and
        with nodes order is the same as in wire bounding the face or link. NbNodes is number of nodes of element.
        It is recommended to return 1 for node. Type is an element type.

        :type ID: int
        :type IsElement: bool
        :type Coords: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type NbNodes: int
        :type Type: OCC.wrapper.MeshVS.MeshVS_EntityType
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource_GetGeom(self, *args)


    def GetGeomType(self, *args):
        """
        GetGeomType(Handle_XSDRAWSTLVRML_DataSource self, Standard_Integer const ID, Standard_Boolean const IsElement) -> Standard_Boolean

        This method is similar to GetGeom, but returns only element or node type. This method is provided for
        a fine performance.

        :type ID: int
        :type IsElement: bool
        :type Type: OCC.wrapper.MeshVS.MeshVS_EntityType
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource_GetGeomType(self, *args)


    def GetAddr(self, *args):
        """
        GetAddr(Handle_XSDRAWSTLVRML_DataSource self, Standard_Integer const ID, Standard_Boolean const IsElement) -> Standard_Address

        This method returns by number an address of any entity which represents element or node data structure.

        :type ID: int
        :type IsElement: bool
        :rtype: OCC.wrapper.Standard.Standard_Address

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource_GetAddr(self, *args)


    def GetNodesByElement(self, *args):
        """
        GetNodesByElement(Handle_XSDRAWSTLVRML_DataSource self, Standard_Integer const ID, NCollection_Array1_Standard_Integer NodeIDs) -> Standard_Boolean

        This method returns information about what node this element consist of.

        :type ID: int
        :type NodeIDs: OCC.wrapper.TColStd.TColStd_Array1OfInteger
        :type NbNodes: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource_GetNodesByElement(self, *args)


    def GetAllNodes(self, *args):
        """
        This method returns map of all nodes the object consist of.

        :rtype: OCC.wrapper.TColStd.TColStd_PackedMapOfInteger

        """
        res = _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource_GetAllNodes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetAllElements(self, *args):
        """
        This method returns map of all elements the object consist of.

        :rtype: OCC.wrapper.TColStd.TColStd_PackedMapOfInteger

        """
        res = _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource_GetAllElements(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetNormal(self, *args):
        """
        GetNormal(Handle_XSDRAWSTLVRML_DataSource self, Standard_Integer const Id, Standard_Integer const Max) -> Standard_Boolean

        This method calculates normal of face, which is using for correct reflection presentation.
        There is default method, for advance reflection this method can be redefined.

        :type Id: int
        :type Max: int
        :type nx: float
        :type ny: float
        :type nz: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource_GetNormal(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XSDRAWSTLVRML_DataSource self) -> char const *

        :rtype: const char *

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Get3DGeom(self, *args):
        """
        Get3DGeom(Handle_XSDRAWSTLVRML_DataSource self, Standard_Integer const ID, Handle_MeshVS_HArray1OfSequenceOfInteger Data) -> Standard_Boolean

        This method returns topology information about 3D-element
        Returns false if element with ID isn't 3D or because other troubles

        :type ID: int
        :type NbNodes: int
        :type Data: OCC.wrapper.MeshVS.Handle_MeshVS_HArray1OfSequenceOfInteger
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource_Get3DGeom(self, *args)


    def GetNodeNormal(self, *args):
        """
        GetNodeNormal(Handle_XSDRAWSTLVRML_DataSource self, Standard_Integer const ranknode, Standard_Integer const ElementId) -> Standard_Boolean

        This method return normal of node ranknode of face Id,
        which is using for smooth shading presentation.
        Returns false if normal isn't defined.

        :type ranknode: int
        :type ElementId: int
        :type nx: float
        :type ny: float
        :type nz: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource_GetNodeNormal(self, *args)


    def GetNormalsByElement(self, *args):
        """
        GetNormalsByElement(Handle_XSDRAWSTLVRML_DataSource self, Standard_Integer const Id, Standard_Boolean const IsNodal, Standard_Integer const MaxNodes, Handle_TColStd_HArray1OfReal Normals) -> Standard_Boolean

        This method puts components of normal vectors at each node of a mesh face (at each face of a mesh volume)
        into the output array.
        Returns false if some problem was detected during calculation of normals.
        Id is an identifier of the mesh element.
        IsNodal, when true, means that normals at mesh element nodes are needed. If nodal normals
        are not available, or IsNodal is false, or the mesh element is a volume, then the output array contents
        depend on the element type:
        face: a normal calculated by GetNormal() is duplicated for each node of the face;
        volume: normals to all faces of the volume are computed (not for each node!).
        MaxNodes is maximal number of nodes an element can consist of.
        Normals contains the result.

        :type Id: int
        :type IsNodal: bool
        :type MaxNodes: int
        :type Normals: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource_GetNormalsByElement(self, *args)


    def GetAllGroups(self, *args):
        """
        GetAllGroups(Handle_XSDRAWSTLVRML_DataSource self, TColStd_PackedMapOfInteger Ids)

        This method returns map of all groups the object contains.

        :type Ids: OCC.wrapper.TColStd.TColStd_PackedMapOfInteger

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource_GetAllGroups(self, *args)


    def GetGroup(self, *args):
        """
        GetGroup(Handle_XSDRAWSTLVRML_DataSource self, Standard_Integer const Id, TColStd_PackedMapOfInteger Ids) -> Standard_Boolean

        This method returns map of all group elements.

        :type Id: int
        :type Type: OCC.wrapper.MeshVS.MeshVS_EntityType
        :type Ids: OCC.wrapper.TColStd.TColStd_PackedMapOfInteger
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource_GetGroup(self, *args)


    def GetGroupAddr(self, *args):
        """
        GetGroupAddr(Handle_XSDRAWSTLVRML_DataSource self, Standard_Integer const ID) -> Standard_Address

        This method returns pointer which represents group data structure.
        This address will be saved in MeshVS_MeshOwner, so that you can access to data structure fast
        by the method Owner(). In the redefined method you can return NULL.
        ID is the numerical identificator of group

        :type ID: int
        :rtype: OCC.wrapper.Standard.Standard_Address

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource_GetGroupAddr(self, *args)


    def IsAdvancedSelectionEnabled(self, *args):
        """
        IsAdvancedSelectionEnabled(Handle_XSDRAWSTLVRML_DataSource self) -> Standard_Boolean

        Returns True if advanced mesh selection is enabled.
        Default implementation returns False.
        It should be redefined to return True for advanced
        mesh selection activation.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource_IsAdvancedSelectionEnabled(self, *args)


    def GetBoundingBox(self, *args):
        """
        GetBoundingBox(Handle_XSDRAWSTLVRML_DataSource self) -> Bnd_Box

        Returns the bounding box of the whole mesh.
        It is used in advanced selection mode to define roughly
        the sensitive area of the mesh.
        It can be redefined to get access to a box computed in advance.

        :rtype: OCC.wrapper.Bnd.Bnd_Box

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource_GetBoundingBox(self, *args)


    def GetDetectedEntities(self, *args):
        """
        GetDetectedEntities(Handle_XSDRAWSTLVRML_DataSource self, Handle_MeshVS_Mesh Prs, Standard_Real const X, Standard_Real const Y, Standard_Real const aTol, Handle_TColStd_HPackedMapOfInteger Nodes, Handle_TColStd_HPackedMapOfInteger Elements) -> Standard_Boolean
        GetDetectedEntities(Handle_XSDRAWSTLVRML_DataSource self, Handle_MeshVS_Mesh Prs, Standard_Real const XMin, Standard_Real const YMin, Standard_Real const XMax, Standard_Real const YMax, Standard_Real const aTol, Handle_TColStd_HPackedMapOfInteger Nodes, Handle_TColStd_HPackedMapOfInteger Elements) -> Standard_Boolean
        GetDetectedEntities(Handle_XSDRAWSTLVRML_DataSource self, Handle_MeshVS_Mesh Prs, NCollection_Array1_gp_Pnt2d Polyline, Bnd_Box2d aBox, Standard_Real const aTol, Handle_TColStd_HPackedMapOfInteger Nodes, Handle_TColStd_HPackedMapOfInteger Elements) -> Standard_Boolean
        GetDetectedEntities(Handle_XSDRAWSTLVRML_DataSource self, Handle_MeshVS_Mesh Prs, Handle_TColStd_HPackedMapOfInteger Nodes, Handle_TColStd_HPackedMapOfInteger Elements) -> Standard_Boolean

        Filter out the maps of mesh entities so as to keep
        only the entities that are allowed to be selected
        according to the current context.
        Returns True if any of the maps has been changed.
        It should be redefined if the advanced mesh selection is
        activated. Default implementation returns False.

        :type Prs: OCC.wrapper.MeshVS.Handle_MeshVS_Mesh
        :type Nodes: OCC.wrapper.TColStd.Handle_TColStd_HPackedMapOfInteger
        :type Elements: OCC.wrapper.TColStd.Handle_TColStd_HPackedMapOfInteger
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource_GetDetectedEntities(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_XSDRAWSTLVRML_DataSource self)

        Memory deallocator for transient classes


        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XSDRAWSTLVRML_DataSource self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XSDRAWSTLVRML_DataSource self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XSDRAWSTLVRML_DataSource self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XSDRAWSTLVRML_DataSource self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XSDRAWSTLVRML_DataSource self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XSDRAWSTLVRML_DataSource self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XSDRAWSTLVRML_DataSource self)

        Increments the reference counter of this object


        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XSDRAWSTLVRML_DataSource self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource_DecrementRefCounter(self, *args)

Handle_XSDRAWSTLVRML_DataSource_swigregister = _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource_swigregister
Handle_XSDRAWSTLVRML_DataSource_swigregister(Handle_XSDRAWSTLVRML_DataSource)

def Handle_XSDRAWSTLVRML_DataSource_DownCast(thing):
    return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource_DownCast(thing)
Handle_XSDRAWSTLVRML_DataSource_DownCast = _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource_DownCast


try:
	TColStd_MapIntegerHasher = TColStd.NCollection_DefaultHasher_Standard_Integer
except AttributeError:
	pass # does not exist, probably ignored

class Handle_XSDRAWSTLVRML_DataSource3D(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XSDRAWSTLVRML_DataSource3D self)

        Nullify the handle


        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource3D_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XSDRAWSTLVRML_DataSource3D self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource3D_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XSDRAWSTLVRML_DataSource3D self, XSDRAWSTLVRML_DataSource3D thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource3D_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XSDRAWSTLVRML_DataSource3D self, Handle_XSDRAWSTLVRML_DataSource3D theHandle) -> Handle_XSDRAWSTLVRML_DataSource3D
        assign(Handle_XSDRAWSTLVRML_DataSource3D self, XSDRAWSTLVRML_DataSource3D thePtr) -> Handle_XSDRAWSTLVRML_DataSource3D
        assign(Handle_XSDRAWSTLVRML_DataSource3D self, Handle_XSDRAWSTLVRML_DataSource3D theHandle) -> Handle_XSDRAWSTLVRML_DataSource3D

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource3D_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XSDRAWSTLVRML_DataSource3D self) -> XSDRAWSTLVRML_DataSource3D

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource3D_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XSDRAWSTLVRML_DataSource3D self) -> XSDRAWSTLVRML_DataSource3D

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource3D___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XSDRAWSTLVRML_DataSource3D self) -> XSDRAWSTLVRML_DataSource3D

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource3D___ref__(self, *args)


    def __hash__(self):
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource3D___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource3D___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XSDRAWSTLVRML.new_Handle_XSDRAWSTLVRML_DataSource3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource3D_DownCast)
    __swig_destroy__ = _XSDRAWSTLVRML.delete_Handle_XSDRAWSTLVRML_DataSource3D

    def GetGeom(self, *args):
        """
        GetGeom(Handle_XSDRAWSTLVRML_DataSource3D self, Standard_Integer const theID, Standard_Boolean const theIsElement, NCollection_Array1_Standard_Real theCoords) -> Standard_Boolean

        Returns geometry information about node ( if IsElement is False ) or element ( IsElement is True )
        by co-ordinates. For element this method must return all its nodes co-ordinates in the strict order: X, Y, Z and
        with nodes order is the same as in wire bounding the face or link. NbNodes is number of nodes of element.
        It is recommended to return 1 for node. Type is an element type.

        :type theID: int
        :type theIsElement: bool
        :type theCoords: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type theNbNodes: int
        :type theType: OCC.wrapper.MeshVS.MeshVS_EntityType
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource3D_GetGeom(self, *args)


    def Get3DGeom(self, *args):
        """
        Get3DGeom(Handle_XSDRAWSTLVRML_DataSource3D self, Standard_Integer const theID, Handle_MeshVS_HArray1OfSequenceOfInteger theData) -> Standard_Boolean

        This method returns topology information about 3D-element
        Returns false if element with ID isn't 3D or because other troubles

        :type theID: int
        :type theNbNodes: int
        :type theData: OCC.wrapper.MeshVS.Handle_MeshVS_HArray1OfSequenceOfInteger
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource3D_Get3DGeom(self, *args)


    def GetGeomType(self, *args):
        """
        GetGeomType(Handle_XSDRAWSTLVRML_DataSource3D self, Standard_Integer const theID, Standard_Boolean const theIsElement) -> Standard_Boolean

        This method is similar to GetGeom, but returns only element or node type. This method is provided for
        a fine performance.

        :type theID: int
        :type theIsElement: bool
        :type theType: OCC.wrapper.MeshVS.MeshVS_EntityType
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource3D_GetGeomType(self, *args)


    def GetAddr(self, *args):
        """
        GetAddr(Handle_XSDRAWSTLVRML_DataSource3D self, Standard_Integer const theID, Standard_Boolean const theIsElement) -> Standard_Address

        This method returns by number an address of any entity which represents element or node data structure.

        :type theID: int
        :type theIsElement: bool
        :rtype: OCC.wrapper.Standard.Standard_Address

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource3D_GetAddr(self, *args)


    def GetNodesByElement(self, *args):
        """
        GetNodesByElement(Handle_XSDRAWSTLVRML_DataSource3D self, Standard_Integer const theID, NCollection_Array1_Standard_Integer theNodeIDs) -> Standard_Boolean

        This method returns information about what node this element consist of.

        :type theID: int
        :type theNodeIDs: OCC.wrapper.TColStd.TColStd_Array1OfInteger
        :type theNbNodes: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource3D_GetNodesByElement(self, *args)


    def GetAllNodes(self, *args):
        """
        This method returns map of all nodes the object consist of.

        :rtype: OCC.wrapper.TColStd.TColStd_PackedMapOfInteger

        """
        res = _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource3D_GetAllNodes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetAllElements(self, *args):
        """
        This method returns map of all elements the object consist of.

        :rtype: OCC.wrapper.TColStd.TColStd_PackedMapOfInteger

        """
        res = _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource3D_GetAllElements(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetNormal(self, *args):
        """
        GetNormal(Handle_XSDRAWSTLVRML_DataSource3D self, Standard_Integer const theID, Standard_Integer const theMax) -> Standard_Boolean

        This method calculates normal of face, which is using for correct reflection presentation.
        There is default method, for advance reflection this method can be redefined.

        :type theID: int
        :type theMax: int
        :type theNx: float
        :type theNy: float
        :type theNz: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource3D_GetNormal(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XSDRAWSTLVRML_DataSource3D self) -> char const *

        :rtype: const char *

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource3D_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource3D_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource3D_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetNodeNormal(self, *args):
        """
        GetNodeNormal(Handle_XSDRAWSTLVRML_DataSource3D self, Standard_Integer const ranknode, Standard_Integer const ElementId) -> Standard_Boolean

        This method return normal of node ranknode of face Id,
        which is using for smooth shading presentation.
        Returns false if normal isn't defined.

        :type ranknode: int
        :type ElementId: int
        :type nx: float
        :type ny: float
        :type nz: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource3D_GetNodeNormal(self, *args)


    def GetNormalsByElement(self, *args):
        """
        GetNormalsByElement(Handle_XSDRAWSTLVRML_DataSource3D self, Standard_Integer const Id, Standard_Boolean const IsNodal, Standard_Integer const MaxNodes, Handle_TColStd_HArray1OfReal Normals) -> Standard_Boolean

        This method puts components of normal vectors at each node of a mesh face (at each face of a mesh volume)
        into the output array.
        Returns false if some problem was detected during calculation of normals.
        Id is an identifier of the mesh element.
        IsNodal, when true, means that normals at mesh element nodes are needed. If nodal normals
        are not available, or IsNodal is false, or the mesh element is a volume, then the output array contents
        depend on the element type:
        face: a normal calculated by GetNormal() is duplicated for each node of the face;
        volume: normals to all faces of the volume are computed (not for each node!).
        MaxNodes is maximal number of nodes an element can consist of.
        Normals contains the result.

        :type Id: int
        :type IsNodal: bool
        :type MaxNodes: int
        :type Normals: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource3D_GetNormalsByElement(self, *args)


    def GetAllGroups(self, *args):
        """
        GetAllGroups(Handle_XSDRAWSTLVRML_DataSource3D self, TColStd_PackedMapOfInteger Ids)

        This method returns map of all groups the object contains.

        :type Ids: OCC.wrapper.TColStd.TColStd_PackedMapOfInteger

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource3D_GetAllGroups(self, *args)


    def GetGroup(self, *args):
        """
        GetGroup(Handle_XSDRAWSTLVRML_DataSource3D self, Standard_Integer const Id, TColStd_PackedMapOfInteger Ids) -> Standard_Boolean

        This method returns map of all group elements.

        :type Id: int
        :type Type: OCC.wrapper.MeshVS.MeshVS_EntityType
        :type Ids: OCC.wrapper.TColStd.TColStd_PackedMapOfInteger
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource3D_GetGroup(self, *args)


    def GetGroupAddr(self, *args):
        """
        GetGroupAddr(Handle_XSDRAWSTLVRML_DataSource3D self, Standard_Integer const ID) -> Standard_Address

        This method returns pointer which represents group data structure.
        This address will be saved in MeshVS_MeshOwner, so that you can access to data structure fast
        by the method Owner(). In the redefined method you can return NULL.
        ID is the numerical identificator of group

        :type ID: int
        :rtype: OCC.wrapper.Standard.Standard_Address

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource3D_GetGroupAddr(self, *args)


    def IsAdvancedSelectionEnabled(self, *args):
        """
        IsAdvancedSelectionEnabled(Handle_XSDRAWSTLVRML_DataSource3D self) -> Standard_Boolean

        Returns True if advanced mesh selection is enabled.
        Default implementation returns False.
        It should be redefined to return True for advanced
        mesh selection activation.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource3D_IsAdvancedSelectionEnabled(self, *args)


    def GetBoundingBox(self, *args):
        """
        GetBoundingBox(Handle_XSDRAWSTLVRML_DataSource3D self) -> Bnd_Box

        Returns the bounding box of the whole mesh.
        It is used in advanced selection mode to define roughly
        the sensitive area of the mesh.
        It can be redefined to get access to a box computed in advance.

        :rtype: OCC.wrapper.Bnd.Bnd_Box

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource3D_GetBoundingBox(self, *args)


    def GetDetectedEntities(self, *args):
        """
        GetDetectedEntities(Handle_XSDRAWSTLVRML_DataSource3D self, Handle_MeshVS_Mesh Prs, Standard_Real const X, Standard_Real const Y, Standard_Real const aTol, Handle_TColStd_HPackedMapOfInteger Nodes, Handle_TColStd_HPackedMapOfInteger Elements) -> Standard_Boolean
        GetDetectedEntities(Handle_XSDRAWSTLVRML_DataSource3D self, Handle_MeshVS_Mesh Prs, Standard_Real const XMin, Standard_Real const YMin, Standard_Real const XMax, Standard_Real const YMax, Standard_Real const aTol, Handle_TColStd_HPackedMapOfInteger Nodes, Handle_TColStd_HPackedMapOfInteger Elements) -> Standard_Boolean
        GetDetectedEntities(Handle_XSDRAWSTLVRML_DataSource3D self, Handle_MeshVS_Mesh Prs, NCollection_Array1_gp_Pnt2d Polyline, Bnd_Box2d aBox, Standard_Real const aTol, Handle_TColStd_HPackedMapOfInteger Nodes, Handle_TColStd_HPackedMapOfInteger Elements) -> Standard_Boolean
        GetDetectedEntities(Handle_XSDRAWSTLVRML_DataSource3D self, Handle_MeshVS_Mesh Prs, Handle_TColStd_HPackedMapOfInteger Nodes, Handle_TColStd_HPackedMapOfInteger Elements) -> Standard_Boolean

        Filter out the maps of mesh entities so as to keep
        only the entities that are allowed to be selected
        according to the current context.
        Returns True if any of the maps has been changed.
        It should be redefined if the advanced mesh selection is
        activated. Default implementation returns False.

        :type Prs: OCC.wrapper.MeshVS.Handle_MeshVS_Mesh
        :type Nodes: OCC.wrapper.TColStd.Handle_TColStd_HPackedMapOfInteger
        :type Elements: OCC.wrapper.TColStd.Handle_TColStd_HPackedMapOfInteger
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource3D_GetDetectedEntities(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_XSDRAWSTLVRML_DataSource3D self)

        Memory deallocator for transient classes


        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource3D_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XSDRAWSTLVRML_DataSource3D self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XSDRAWSTLVRML_DataSource3D self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource3D_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XSDRAWSTLVRML_DataSource3D self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XSDRAWSTLVRML_DataSource3D self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource3D_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XSDRAWSTLVRML_DataSource3D self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource3D_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XSDRAWSTLVRML_DataSource3D self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource3D_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XSDRAWSTLVRML_DataSource3D self)

        Increments the reference counter of this object


        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource3D_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XSDRAWSTLVRML_DataSource3D self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource3D_DecrementRefCounter(self, *args)

Handle_XSDRAWSTLVRML_DataSource3D_swigregister = _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource3D_swigregister
Handle_XSDRAWSTLVRML_DataSource3D_swigregister(Handle_XSDRAWSTLVRML_DataSource3D)

def Handle_XSDRAWSTLVRML_DataSource3D_DownCast(thing):
    return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource3D_DownCast(thing)
Handle_XSDRAWSTLVRML_DataSource3D_DownCast = _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DataSource3D_DownCast

class Handle_XSDRAWSTLVRML_DrawableMesh(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XSDRAWSTLVRML_DrawableMesh self)

        Nullify the handle


        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DrawableMesh_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XSDRAWSTLVRML_DrawableMesh self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DrawableMesh_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XSDRAWSTLVRML_DrawableMesh self, XSDRAWSTLVRML_DrawableMesh thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DrawableMesh_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XSDRAWSTLVRML_DrawableMesh self, Handle_XSDRAWSTLVRML_DrawableMesh theHandle) -> Handle_XSDRAWSTLVRML_DrawableMesh
        assign(Handle_XSDRAWSTLVRML_DrawableMesh self, XSDRAWSTLVRML_DrawableMesh thePtr) -> Handle_XSDRAWSTLVRML_DrawableMesh
        assign(Handle_XSDRAWSTLVRML_DrawableMesh self, Handle_XSDRAWSTLVRML_DrawableMesh theHandle) -> Handle_XSDRAWSTLVRML_DrawableMesh

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DrawableMesh_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XSDRAWSTLVRML_DrawableMesh self) -> XSDRAWSTLVRML_DrawableMesh

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DrawableMesh_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XSDRAWSTLVRML_DrawableMesh self) -> XSDRAWSTLVRML_DrawableMesh

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DrawableMesh___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XSDRAWSTLVRML_DrawableMesh self) -> XSDRAWSTLVRML_DrawableMesh

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DrawableMesh___ref__(self, *args)


    def __hash__(self):
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DrawableMesh___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DrawableMesh___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XSDRAWSTLVRML.new_Handle_XSDRAWSTLVRML_DrawableMesh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DrawableMesh_DownCast)
    __swig_destroy__ = _XSDRAWSTLVRML.delete_Handle_XSDRAWSTLVRML_DrawableMesh

    def DrawOn(self, *args):
        """
        DrawOn(Handle_XSDRAWSTLVRML_DrawableMesh self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DrawableMesh_DrawOn(self, *args)


    def GetMesh(self, *args):
        """
        GetMesh(Handle_XSDRAWSTLVRML_DrawableMesh self) -> Handle_MeshVS_Mesh

        :rtype: OCC.wrapper.MeshVS.Handle_MeshVS_Mesh

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DrawableMesh_GetMesh(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XSDRAWSTLVRML_DrawableMesh self) -> char const *

        :rtype: const char *

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DrawableMesh_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DrawableMesh_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DrawableMesh_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PickReject(self, *args):
        """
        PickReject(Handle_XSDRAWSTLVRML_DrawableMesh self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DrawableMesh_PickReject(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_XSDRAWSTLVRML_DrawableMesh self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DrawableMesh_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_XSDRAWSTLVRML_DrawableMesh self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DrawableMesh_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_XSDRAWSTLVRML_DrawableMesh self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DrawableMesh_Whatis(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_XSDRAWSTLVRML_DrawableMesh self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DrawableMesh_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_XSDRAWSTLVRML_DrawableMesh self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DrawableMesh_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_XSDRAWSTLVRML_DrawableMesh self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DrawableMesh_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_XSDRAWSTLVRML_DrawableMesh self) -> Standard_Boolean
        Visible(Handle_XSDRAWSTLVRML_DrawableMesh self, Standard_Boolean const V)

        :type V: bool

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DrawableMesh_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_XSDRAWSTLVRML_DrawableMesh self) -> Standard_Boolean
        Protected(Handle_XSDRAWSTLVRML_DrawableMesh self, Standard_Boolean const P)

        :type P: bool

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DrawableMesh_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_XSDRAWSTLVRML_DrawableMesh self) -> Standard_CString
        Name(Handle_XSDRAWSTLVRML_DrawableMesh self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DrawableMesh_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_XSDRAWSTLVRML_DrawableMesh self)

        Memory deallocator for transient classes


        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DrawableMesh_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XSDRAWSTLVRML_DrawableMesh self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XSDRAWSTLVRML_DrawableMesh self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DrawableMesh_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XSDRAWSTLVRML_DrawableMesh self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XSDRAWSTLVRML_DrawableMesh self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DrawableMesh_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XSDRAWSTLVRML_DrawableMesh self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DrawableMesh_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XSDRAWSTLVRML_DrawableMesh self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DrawableMesh_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XSDRAWSTLVRML_DrawableMesh self)

        Increments the reference counter of this object


        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DrawableMesh_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XSDRAWSTLVRML_DrawableMesh self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DrawableMesh_DecrementRefCounter(self, *args)

Handle_XSDRAWSTLVRML_DrawableMesh_swigregister = _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DrawableMesh_swigregister
Handle_XSDRAWSTLVRML_DrawableMesh_swigregister(Handle_XSDRAWSTLVRML_DrawableMesh)

def Handle_XSDRAWSTLVRML_DrawableMesh_DownCast(thing):
    return _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DrawableMesh_DownCast(thing)
Handle_XSDRAWSTLVRML_DrawableMesh_DownCast = _XSDRAWSTLVRML.Handle_XSDRAWSTLVRML_DrawableMesh_DownCast


try:
	TColStd_DataMapOfIntegerInteger = TColStd.NCollection_DataMap_Standard_Integer_Standard_Integer_TColStd_MapIntegerHasher
except AttributeError:
	pass # does not exist, probably ignored

class NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher(NCollection.NCollection_BaseMap):
    """
    Purpose:     The DataMap is a Map to store keys with associated
    Items. See Map  from NCollection for  a discussion
    about the number of buckets.

    The DataMap can be seen as an extended array where
    the Keys  are the   indices.  For this reason  the
    operator () is defined on DataMap to fetch an Item
    from a Key. So the following syntax can be used :

    anItem = aMap(aKey);
    aMap(aKey) = anItem;

    This analogy has its  limit.   aMap(aKey) = anItem
    can  be done only  if aKey was previously bound to
    an item in the map.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher self) -> NCollection_DataMap< Standard_Integer,TColStd_DataMapOfIntegerInteger,TColStd_MapIntegerHasher >::iterator

        Returns an iterator pointing to the first element in the map.

        :rtype: iterator

        """
        return _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher self) -> NCollection_DataMap< Standard_Integer,TColStd_DataMapOfIntegerInteger,TColStd_MapIntegerHasher >::iterator

        Returns an iterator referring to the past-the-end element in the map.

        :rtype: iterator

        """
        return _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher self) -> NCollection_DataMap< Standard_Integer,TColStd_DataMapOfIntegerInteger,TColStd_MapIntegerHasher >::const_iterator

        Returns a const iterator pointing to the first element in the map.

        :rtype: const_iterator

        """
        return _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher self) -> NCollection_DataMap< Standard_Integer,TColStd_DataMapOfIntegerInteger,TColStd_MapIntegerHasher >::const_iterator

        Returns a const iterator referring to the past-the-end element in the map.

        :rtype: const_iterator

        """
        return _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The DataMap is a Map to store keys with associated
        Items. See Map  from NCollection for  a discussion
        about the number of buckets.

        The DataMap can be seen as an extended array where
        the Keys  are the   indices.  For this reason  the
        operator () is defined on DataMap to fetch an Item
        from a Key. So the following syntax can be used :

        anItem = aMap(aKey);
        aMap(aKey) = anItem;

        This analogy has its  limit.   aMap(aKey) = anItem
        can  be done only  if aKey was previously bound to
        an item in the map.
        """
        this = _XSDRAWSTLVRML.new_NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, *args):
        """
        Exchange(NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher self, NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher theOther)

        Exchange the content of two maps without re-allocations.
        Notice that allocators will be swapped as well!

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher_Exchange(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher self, NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher theOther) -> NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher

        Assignment.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher self, NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher theOther) -> NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher_assign(self, *args)


    def ReSize(self, *args):
        """
        ReSize(NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher self, Standard_Integer const N)

        ReSize

        :type N: int

        """
        return _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher_ReSize(self, *args)


    def Bind(self, *args):
        """
        Bind(NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher self, int const & theKey, NCollection_DataMap_Standard_Integer_Standard_Integer_TColStd_MapIntegerHasher theItem) -> Standard_Boolean

        Bind binds Item to Key in map.
        @param theKey  key to add/update
        @param theItem new item; overrides value previously bound to the key, if any
        @return Standard_True if Key was not bound already

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher_Bind(self, *args)


    def Bound(self, *args):
        """
        Bound(NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher self, int const & theKey, NCollection_DataMap_Standard_Integer_Standard_Integer_TColStd_MapIntegerHasher theItem) -> NCollection_DataMap_Standard_Integer_Standard_Integer_TColStd_MapIntegerHasher

        Bound binds Item to Key in map. Returns modifiable Item 

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: TheItemType *

        """
        return _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher_Bound(self, *args)


    def IsBound(self, *args):
        """
        IsBound(NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher self, int const & theKey) -> Standard_Boolean

        IsBound

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher_IsBound(self, *args)


    def UnBind(self, *args):
        """
        UnBind(NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher self, int const & theKey) -> Standard_Boolean

        UnBind removes Item Key pair from map

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher_UnBind(self, *args)


    def Seek(self, *args):
        """
        Seek(NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher self, int const & theKey) -> NCollection_DataMap_Standard_Integer_Standard_Integer_TColStd_MapIntegerHasher

        Seek returns pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: const TheItemType *

        """
        return _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher_Seek(self, *args)


    def Find(self, *args):
        """
        Find returns the Item for Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher_Find(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeSeek(self, *args):
        """
        ChangeSeek(NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher self, int const & theKey) -> NCollection_DataMap_Standard_Integer_Standard_Integer_TColStd_MapIntegerHasher

        ChangeSeek returns modifiable pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: TheItemType *

        """
        return _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher_ChangeSeek(self, *args)


    def ChangeFind(self, *args):
        """
        ChangeFind(NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher self, int const & theKey) -> NCollection_DataMap_Standard_Integer_Standard_Integer_TColStd_MapIntegerHasher

        ChangeFind returns mofifiable Item by Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: TheItemType &

        """
        return _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher_ChangeFind(self, *args)


    def __call__(self, *args):
        """
        operator ()

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Clear(self, *args):
        """
        Clear(NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher self, Standard_Boolean const doReleaseMemory)
        Clear(NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher self, Handle_NCollection_BaseAllocator theAllocator)

        Clear data and reset allocator

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher_Clear(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher self) -> Standard_Integer

        Size

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher_Size(self, *args)


    def __iter__(self):
        return _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher___iter__(self)
    __swig_destroy__ = _XSDRAWSTLVRML.delete_NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher
NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher_swigregister = _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher_swigregister
NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher_swigregister(NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher)

class NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _XSDRAWSTLVRML.new_NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XSDRAWSTLVRML.delete_NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher_IteratorHelper

    def __next__(self):
        return _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher_IteratorHelper___next__(self)
NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher_IteratorHelper_swigregister = _XSDRAWSTLVRML.NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher_IteratorHelper_swigregister
NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher_IteratorHelper_swigregister(NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher_IteratorHelper)


try:
	XSDRAWSTLVRML_ElemNodesMap = NCollection_DataMap_Standard_Integer_TColStd_DataMapOfIntegerInteger_TColStd_MapIntegerHasher
except NameError:
	pass # does not exist, probably ignored



