# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_SMDSAbs')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_SMDSAbs')
    _SMDSAbs = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_SMDSAbs', [dirname(__file__)])
        except ImportError:
            import _SMDSAbs
            return _SMDSAbs
        try:
            _mod = imp.load_module('_SMDSAbs', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _SMDSAbs = swig_import_helper()
    del swig_import_helper
else:
    import _SMDSAbs
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SMDSAbs.delete_SwigPyIterator

    def value(self):
        return _SMDSAbs.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _SMDSAbs.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _SMDSAbs.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _SMDSAbs.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _SMDSAbs.SwigPyIterator_equal(self, x)

    def copy(self):
        return _SMDSAbs.SwigPyIterator_copy(self)

    def next(self):
        return _SMDSAbs.SwigPyIterator_next(self)

    def __next__(self):
        return _SMDSAbs.SwigPyIterator___next__(self)

    def previous(self):
        return _SMDSAbs.SwigPyIterator_previous(self)

    def advance(self, n):
        return _SMDSAbs.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _SMDSAbs.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _SMDSAbs.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _SMDSAbs.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _SMDSAbs.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _SMDSAbs.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _SMDSAbs.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _SMDSAbs.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _SMDSAbs.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_SMDSAbs.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _SMDSAbs.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _SMDSAbs.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _SMDSAbs.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _SMDSAbs.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _SMDSAbs.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _SMDSAbs.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _SMDSAbs.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_SMDSAbs.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _SMDSAbs.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _SMDSAbs.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _SMDSAbs.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _SMDSAbs.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _SMDSAbs.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _SMDSAbs.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _SMDSAbs.ptr_to_number(item)
ptr_to_number = _SMDSAbs.ptr_to_number

def HashCode(*args):
    return _SMDSAbs.HashCode(*args)
HashCode = _SMDSAbs.HashCode

def ptr_equal(a, b):
    return _SMDSAbs.ptr_equal(a, b)
ptr_equal = _SMDSAbs.ptr_equal
SMDSAbs_All = _SMDSAbs.SMDSAbs_All
SMDSAbs_Node = _SMDSAbs.SMDSAbs_Node
SMDSAbs_Edge = _SMDSAbs.SMDSAbs_Edge
SMDSAbs_Face = _SMDSAbs.SMDSAbs_Face
SMDSAbs_Volume = _SMDSAbs.SMDSAbs_Volume
SMDSAbs_0DElement = _SMDSAbs.SMDSAbs_0DElement
SMDSAbs_Ball = _SMDSAbs.SMDSAbs_Ball
SMDSAbs_NbElementTypes = _SMDSAbs.SMDSAbs_NbElementTypes
SMDSGeom_POINT = _SMDSAbs.SMDSGeom_POINT
SMDSGeom_EDGE = _SMDSAbs.SMDSGeom_EDGE
SMDSGeom_TRIANGLE = _SMDSAbs.SMDSGeom_TRIANGLE
SMDSGeom_QUADRANGLE = _SMDSAbs.SMDSGeom_QUADRANGLE
SMDSGeom_POLYGON = _SMDSAbs.SMDSGeom_POLYGON
SMDSGeom_TETRA = _SMDSAbs.SMDSGeom_TETRA
SMDSGeom_PYRAMID = _SMDSAbs.SMDSGeom_PYRAMID
SMDSGeom_HEXA = _SMDSAbs.SMDSGeom_HEXA
SMDSGeom_PENTA = _SMDSAbs.SMDSGeom_PENTA
SMDSGeom_HEXAGONAL_PRISM = _SMDSAbs.SMDSGeom_HEXAGONAL_PRISM
SMDSGeom_POLYHEDRA = _SMDSAbs.SMDSGeom_POLYHEDRA
SMDSGeom_BALL = _SMDSAbs.SMDSGeom_BALL
SMDSGeom_NONE = _SMDSAbs.SMDSGeom_NONE
ORDER_ANY = _SMDSAbs.ORDER_ANY
ORDER_LINEAR = _SMDSAbs.ORDER_LINEAR
ORDER_QUADRATIC = _SMDSAbs.ORDER_QUADRATIC
SMDSEntity_Node = _SMDSAbs.SMDSEntity_Node
SMDSEntity_0D = _SMDSAbs.SMDSEntity_0D
SMDSEntity_Edge = _SMDSAbs.SMDSEntity_Edge
SMDSEntity_Quad_Edge = _SMDSAbs.SMDSEntity_Quad_Edge
SMDSEntity_Triangle = _SMDSAbs.SMDSEntity_Triangle
SMDSEntity_Quad_Triangle = _SMDSAbs.SMDSEntity_Quad_Triangle
SMDSEntity_BiQuad_Triangle = _SMDSAbs.SMDSEntity_BiQuad_Triangle
SMDSEntity_Quadrangle = _SMDSAbs.SMDSEntity_Quadrangle
SMDSEntity_Quad_Quadrangle = _SMDSAbs.SMDSEntity_Quad_Quadrangle
SMDSEntity_BiQuad_Quadrangle = _SMDSAbs.SMDSEntity_BiQuad_Quadrangle
SMDSEntity_Polygon = _SMDSAbs.SMDSEntity_Polygon
SMDSEntity_Quad_Polygon = _SMDSAbs.SMDSEntity_Quad_Polygon
SMDSEntity_Tetra = _SMDSAbs.SMDSEntity_Tetra
SMDSEntity_Quad_Tetra = _SMDSAbs.SMDSEntity_Quad_Tetra
SMDSEntity_Pyramid = _SMDSAbs.SMDSEntity_Pyramid
SMDSEntity_Quad_Pyramid = _SMDSAbs.SMDSEntity_Quad_Pyramid
SMDSEntity_Hexa = _SMDSAbs.SMDSEntity_Hexa
SMDSEntity_Quad_Hexa = _SMDSAbs.SMDSEntity_Quad_Hexa
SMDSEntity_TriQuad_Hexa = _SMDSAbs.SMDSEntity_TriQuad_Hexa
SMDSEntity_Penta = _SMDSAbs.SMDSEntity_Penta
SMDSEntity_Quad_Penta = _SMDSAbs.SMDSEntity_Quad_Penta
SMDSEntity_BiQuad_Penta = _SMDSAbs.SMDSEntity_BiQuad_Penta
SMDSEntity_Hexagonal_Prism = _SMDSAbs.SMDSEntity_Hexagonal_Prism
SMDSEntity_Polyhedra = _SMDSAbs.SMDSEntity_Polyhedra
SMDSEntity_Quad_Polyhedra = _SMDSAbs.SMDSEntity_Quad_Polyhedra
SMDSEntity_Ball = _SMDSAbs.SMDSEntity_Ball
SMDSEntity_Last = _SMDSAbs.SMDSEntity_Last


