# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BRepPrimAPI')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BRepPrimAPI')
    _BRepPrimAPI = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepPrimAPI', [dirname(__file__)])
        except ImportError:
            import _BRepPrimAPI
            return _BRepPrimAPI
        try:
            _mod = imp.load_module('_BRepPrimAPI', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BRepPrimAPI = swig_import_helper()
    del swig_import_helper
else:
    import _BRepPrimAPI
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepPrimAPI.delete_SwigPyIterator

    def value(self):
        return _BRepPrimAPI.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _BRepPrimAPI.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _BRepPrimAPI.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _BRepPrimAPI.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _BRepPrimAPI.SwigPyIterator_equal(self, x)

    def copy(self):
        return _BRepPrimAPI.SwigPyIterator_copy(self)

    def next(self):
        return _BRepPrimAPI.SwigPyIterator_next(self)

    def __next__(self):
        return _BRepPrimAPI.SwigPyIterator___next__(self)

    def previous(self):
        return _BRepPrimAPI.SwigPyIterator_previous(self)

    def advance(self, n):
        return _BRepPrimAPI.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _BRepPrimAPI.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _BRepPrimAPI.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _BRepPrimAPI.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _BRepPrimAPI.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _BRepPrimAPI.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _BRepPrimAPI.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _BRepPrimAPI.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BRepPrimAPI.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_BRepPrimAPI.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _BRepPrimAPI.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BRepPrimAPI.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BRepPrimAPI.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _BRepPrimAPI.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _BRepPrimAPI.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _BRepPrimAPI.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BRepPrimAPI.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_BRepPrimAPI.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _BRepPrimAPI.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BRepPrimAPI.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BRepPrimAPI.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _BRepPrimAPI.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _BRepPrimAPI.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _BRepPrimAPI.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _BRepPrimAPI.ptr_to_number(item)
ptr_to_number = _BRepPrimAPI.ptr_to_number

def HashCode(*args):
    return _BRepPrimAPI.HashCode(*args)
HashCode = _BRepPrimAPI.HashCode

def ptr_equal(a, b):
    return _BRepPrimAPI.ptr_equal(a, b)
ptr_equal = _BRepPrimAPI.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepPrim
else:
    import BRepPrim
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRep
else:
    import BRep
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Poly
else:
    import Poly
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TShort
else:
    import TShort
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepSweep
else:
    import BRepSweep
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Sweep
else:
    import Sweep
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepBuilderAPI
else:
    import BRepBuilderAPI
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepTools
else:
    import BRepTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
class BRepPrimAPI_MakeSweep(BRepBuilderAPI.BRepBuilderAPI_MakeShape):
    """
    The abstract class MakeSweep is
    the root class of swept primitives.
    Sweeps are objects you obtain by sweeping a profile along a path.
    The profile can be any topology and the path is usually a curve or
    a wire. The profile generates objects according to the following rules:
    -      Vertices generate Edges
    -      Edges generate Faces.
    -      Wires generate Shells.
    -      Faces generate Solids.
    -      Shells generate Composite  Solids.
    You are not allowed to sweep Solids and Composite Solids.
    Two kinds of sweeps are implemented in the BRepPrimAPI package:
    -      The linear sweep called a   Prism
    -      The rotational sweep    called a Revol
    Swept constructions along complex profiles such as BSpline curves
    are also available in the BRepOffsetAPI package..
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def FirstShape(self, *args):
        """
        FirstShape(BRepPrimAPI_MakeSweep self) -> TopoDS_Shape

        Returns the  TopoDS  Shape of the bottom of the sweep.

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepPrimAPI.BRepPrimAPI_MakeSweep_FirstShape(self, *args)


    def LastShape(self, *args):
        """
        LastShape(BRepPrimAPI_MakeSweep self) -> TopoDS_Shape

        Returns the TopoDS Shape of the top of the sweep.

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepPrimAPI.BRepPrimAPI_MakeSweep_LastShape(self, *args)

    __swig_destroy__ = _BRepPrimAPI.delete_BRepPrimAPI_MakeSweep
BRepPrimAPI_MakeSweep_swigregister = _BRepPrimAPI.BRepPrimAPI_MakeSweep_swigregister
BRepPrimAPI_MakeSweep_swigregister(BRepPrimAPI_MakeSweep)

class BRepPrimAPI_MakeOneAxis(BRepBuilderAPI.BRepBuilderAPI_MakeShape):
    """
    The abstract class MakeOneAxis is the root class of
    algorithms used to construct rotational primitives.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def OneAxis(self, *args):
        """
        OneAxis(BRepPrimAPI_MakeOneAxis self) -> Standard_Address

        The inherited commands should provide the algorithm.
        Returned as a pointer.

        :rtype: OCC.wrapper.Standard.Standard_Address

        """
        return _BRepPrimAPI.BRepPrimAPI_MakeOneAxis_OneAxis(self, *args)


    def Build(self, *args):
        """
        Build(BRepPrimAPI_MakeOneAxis self)

        Stores the solid in myShape.


        """
        return _BRepPrimAPI.BRepPrimAPI_MakeOneAxis_Build(self, *args)


    def Face(self, *args):
        """
        Returns the lateral face of the rotational primitive.

        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        res = _BRepPrimAPI.BRepPrimAPI_MakeOneAxis_Face(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Shell(self, *args):
        """
        Returns the constructed rotational primitive as a shell.

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shell

        """
        res = _BRepPrimAPI.BRepPrimAPI_MakeOneAxis_Shell(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Solid(self, *args):
        """
        Returns the constructed rotational primitive as a solid.

        :rtype: OCC.wrapper.TopoDS.TopoDS_Solid

        """
        res = _BRepPrimAPI.BRepPrimAPI_MakeOneAxis_Solid(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BRepPrimAPI.delete_BRepPrimAPI_MakeOneAxis
BRepPrimAPI_MakeOneAxis_swigregister = _BRepPrimAPI.BRepPrimAPI_MakeOneAxis_swigregister
BRepPrimAPI_MakeOneAxis_swigregister(BRepPrimAPI_MakeOneAxis)

class BRepPrimAPI_MakeCylinder(BRepPrimAPI_MakeOneAxis):
    """
    Describes functions to build cylinders or portions of  cylinders.
    A MakeCylinder object provides a framework for:
    -   defining the construction of a cylinder,
    -   implementing the construction algorithm, and
    -   consulting the result.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BRepPrimAPI_MakeCylinder self, Standard_Real const R, Standard_Real const H) -> BRepPrimAPI_MakeCylinder
        __init__(BRepPrimAPI_MakeCylinder self, Standard_Real const R, Standard_Real const H, Standard_Real const Angle) -> BRepPrimAPI_MakeCylinder
        __init__(BRepPrimAPI_MakeCylinder self, gp_Ax2 Axes, Standard_Real const R, Standard_Real const H) -> BRepPrimAPI_MakeCylinder
        __init__(BRepPrimAPI_MakeCylinder self, gp_Ax2 Axes, Standard_Real const R, Standard_Real const H, Standard_Real const Angle) -> BRepPrimAPI_MakeCylinder

        Make a cylinder   of  radius R  and  length H with
        angle  H.
        Constructs
        -   a cylinder of radius R and height H, or
        -   a portion of cylinder of radius R and height H, and of
        the angle Angle defining the missing portion of the cylinder.
        The cylinder is constructed about the "Z Axis" of either:
        -   the global coordinate system, or
        -   the local coordinate system Axes.
        It is limited in this coordinate system as follows:
        -   in the v parametric direction (the Z axis), by the two
        parameter values 0 and H,
        -   and in the u parametric direction (the rotation angle
        around the Z Axis), in the case of a portion of a
        cylinder, by the two parameter values 0 and Angle.
        Angle is given in radians.
        The resulting shape is composed of:
        -   a lateral cylindrical face,
        -   two planar faces in the planes z = 0 and z = H
        (in the case of a complete cylinder, these faces are circles), and
        -   in case of a portion of a cylinder, two additional
        planar faces to close the shape.(two rectangles in the
        planes u = 0 and u = Angle).
        Exceptions Standard_DomainError if:
        -   R is less than or equal to Precision::Confusion(), or
        -   H is less than or equal to Precision::Confusion().

        :type Axes: OCC.wrapper.gp.gp_Ax2
        :type R: float
        :type H: float
        :type Angle: float

        """
        this = _BRepPrimAPI.new_BRepPrimAPI_MakeCylinder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def OneAxis(self, *args):
        """
        OneAxis(BRepPrimAPI_MakeCylinder self) -> Standard_Address

        Returns the algorithm.

        :rtype: OCC.wrapper.Standard.Standard_Address

        """
        return _BRepPrimAPI.BRepPrimAPI_MakeCylinder_OneAxis(self, *args)


    def Cylinder(self, *args):
        """
        Cylinder(BRepPrimAPI_MakeCylinder self) -> BRepPrim_Cylinder

        Returns the algorithm.

        :rtype: OCC.wrapper.BRepPrim.BRepPrim_Cylinder

        """
        return _BRepPrimAPI.BRepPrimAPI_MakeCylinder_Cylinder(self, *args)

    __swig_destroy__ = _BRepPrimAPI.delete_BRepPrimAPI_MakeCylinder
BRepPrimAPI_MakeCylinder_swigregister = _BRepPrimAPI.BRepPrimAPI_MakeCylinder_swigregister
BRepPrimAPI_MakeCylinder_swigregister(BRepPrimAPI_MakeCylinder)

class BRepPrimAPI_MakeTorus(BRepPrimAPI_MakeOneAxis):
    """
    Describes functions to build tori or portions of tori.
    A MakeTorus object provides a framework for:
    -   defining the construction of a torus,
    -   implementing the construction algorithm, and
    -   consulting the result.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BRepPrimAPI_MakeTorus self, Standard_Real const R1, Standard_Real const R2) -> BRepPrimAPI_MakeTorus
        __init__(BRepPrimAPI_MakeTorus self, Standard_Real const R1, Standard_Real const R2, Standard_Real const angle) -> BRepPrimAPI_MakeTorus
        __init__(BRepPrimAPI_MakeTorus self, Standard_Real const R1, Standard_Real const R2, Standard_Real const angle1, Standard_Real const angle2) -> BRepPrimAPI_MakeTorus
        __init__(BRepPrimAPI_MakeTorus self, Standard_Real const R1, Standard_Real const R2, Standard_Real const angle1, Standard_Real const angle2, Standard_Real const angle) -> BRepPrimAPI_MakeTorus
        __init__(BRepPrimAPI_MakeTorus self, gp_Ax2 Axes, Standard_Real const R1, Standard_Real const R2) -> BRepPrimAPI_MakeTorus
        __init__(BRepPrimAPI_MakeTorus self, gp_Ax2 Axes, Standard_Real const R1, Standard_Real const R2, Standard_Real const angle) -> BRepPrimAPI_MakeTorus
        __init__(BRepPrimAPI_MakeTorus self, gp_Ax2 Axes, Standard_Real const R1, Standard_Real const R2, Standard_Real const angle1, Standard_Real const angle2) -> BRepPrimAPI_MakeTorus
        __init__(BRepPrimAPI_MakeTorus self, gp_Ax2 Axes, Standard_Real const R1, Standard_Real const R2, Standard_Real const angle1, Standard_Real const angle2, Standard_Real const angle) -> BRepPrimAPI_MakeTorus

        Make a section of a torus of radii R1 R2.
        For all algorithms The resulting shape is composed of
        -      a lateral toroidal face,
        -      two conical faces (defined  by the equation v = angle1 and
        v = angle2) if the sphere is truncated in the v parametric
        direction (they may be cylindrical faces in some
        particular conditions), and in case of a portion
        of torus, two planar faces to close the shape.(in the planes
        u = 0 and u = angle).
        Notes:
        -      The u parameter corresponds to a rotation angle around the Z axis.
        -      The circle whose radius is equal to the minor radius,
        located in the plane defined by the X axis and the Z axis,
        centered on the X axis, on its positive side, and positioned
        at a distance from the origin equal to the major radius, is
        the reference circle of the torus. The rotation around an
        axis parallel to the Y axis and passing through the center
        of the reference circle gives the v parameter on the
        reference circle. The X axis gives the origin of the v
        parameter. Near 0, as v increases, the Z coordinate decreases.

        :type Axes: OCC.wrapper.gp.gp_Ax2
        :type R1: float
        :type R2: float
        :type angle1: float
        :type angle2: float
        :type angle: float

        """
        this = _BRepPrimAPI.new_BRepPrimAPI_MakeTorus(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def OneAxis(self, *args):
        """
        OneAxis(BRepPrimAPI_MakeTorus self) -> Standard_Address

        Returns the algorithm.

        :rtype: OCC.wrapper.Standard.Standard_Address

        """
        return _BRepPrimAPI.BRepPrimAPI_MakeTorus_OneAxis(self, *args)


    def Torus(self, *args):
        """
        Torus(BRepPrimAPI_MakeTorus self) -> BRepPrim_Torus

        Returns the algorithm.

        :rtype: OCC.wrapper.BRepPrim.BRepPrim_Torus

        """
        return _BRepPrimAPI.BRepPrimAPI_MakeTorus_Torus(self, *args)

    __swig_destroy__ = _BRepPrimAPI.delete_BRepPrimAPI_MakeTorus
BRepPrimAPI_MakeTorus_swigregister = _BRepPrimAPI.BRepPrimAPI_MakeTorus_swigregister
BRepPrimAPI_MakeTorus_swigregister(BRepPrimAPI_MakeTorus)

class BRepPrimAPI_MakeRevol(BRepPrimAPI_MakeSweep):
    """
    Class to make revolved sweep topologies.

    a revolved sweep is defined by :

    * A basis topology which is swept.

    The   basis topology  must   not  contain solids
    (neither composite solids.).

    The basis topology  may be copied  or  shared in
    the result.

    * A rotation axis and angle :

    - The axis is an Ax1 from gp.

    - The angle is in [0, 2*Pi].

    - The angle default value is 2*Pi.

    The result is a topology with a higher dimension :

    - Vertex -> Edge.
    - Edge   -> Face.
    - Wire   -> Shell.
    - Face   -> Solid.
    - Shell  -> CompSolid.

    Sweeping a Compound sweeps  the elements  of the
    compound  and creates    a  compound with    the
    results.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BRepPrimAPI_MakeRevol self, TopoDS_Shape S, gp_Ax1 A, Standard_Real const D, Standard_Boolean const Copy) -> BRepPrimAPI_MakeRevol
        __init__(BRepPrimAPI_MakeRevol self, TopoDS_Shape S, gp_Ax1 A, Standard_Boolean const Copy) -> BRepPrimAPI_MakeRevol

        Builds the Revol of base S, axis  A and angle 2*Pi. If
        C is true, S is copied.

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type A: OCC.wrapper.gp.gp_Ax1
        :type Copy: bool

        """
        this = _BRepPrimAPI.new_BRepPrimAPI_MakeRevol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Revol(self, *args):
        """
        Returns the internal sweeping algorithm.

        :rtype: OCC.wrapper.BRepSweep.BRepSweep_Revol

        """
        res = _BRepPrimAPI.BRepPrimAPI_MakeRevol_Revol(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Build(self, *args):
        """
        Build(BRepPrimAPI_MakeRevol self)

        Builds the resulting shape (redefined from MakeShape).


        """
        return _BRepPrimAPI.BRepPrimAPI_MakeRevol_Build(self, *args)


    def Generated(self, *args):
        """
        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _BRepPrimAPI.BRepPrimAPI_MakeRevol_Generated(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FirstShape(self, *args):
        """
        FirstShape(BRepPrimAPI_MakeRevol self) -> TopoDS_Shape
        FirstShape(BRepPrimAPI_MakeRevol self, TopoDS_Shape theShape) -> TopoDS_Shape

        Returns the TopoDS Shape of the beginning of the revolution,
        generated with theShape  (subShape of the generating shape).

        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepPrimAPI.BRepPrimAPI_MakeRevol_FirstShape(self, *args)


    def LastShape(self, *args):
        """
        LastShape(BRepPrimAPI_MakeRevol self) -> TopoDS_Shape
        LastShape(BRepPrimAPI_MakeRevol self, TopoDS_Shape theShape) -> TopoDS_Shape

        Returns the TopoDS Shape of the end of the revolution,
        generated with  theShape (subShape of the  generating shape).

        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepPrimAPI.BRepPrimAPI_MakeRevol_LastShape(self, *args)


    def HasDegenerated(self, *args):
        """
        HasDegenerated(BRepPrimAPI_MakeRevol self) -> Standard_Boolean

        Check if there are degenerated edges in the result.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepPrimAPI.BRepPrimAPI_MakeRevol_HasDegenerated(self, *args)


    def Degenerated(self, *args):
        """
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _BRepPrimAPI.BRepPrimAPI_MakeRevol_Degenerated(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BRepPrimAPI.delete_BRepPrimAPI_MakeRevol
BRepPrimAPI_MakeRevol_swigregister = _BRepPrimAPI.BRepPrimAPI_MakeRevol_swigregister
BRepPrimAPI_MakeRevol_swigregister(BRepPrimAPI_MakeRevol)

class BRepPrimAPI_MakeCone(BRepPrimAPI_MakeOneAxis):
    """
    Describes functions to build cones or portions of cones.
    A MakeCone object provides a framework for:
    -   defining the construction of a cone,
    -   implementing the construction algorithm, and
    -   consulting the result.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BRepPrimAPI_MakeCone self, Standard_Real const R1, Standard_Real const R2, Standard_Real const H) -> BRepPrimAPI_MakeCone
        __init__(BRepPrimAPI_MakeCone self, Standard_Real const R1, Standard_Real const R2, Standard_Real const H, Standard_Real const angle) -> BRepPrimAPI_MakeCone
        __init__(BRepPrimAPI_MakeCone self, gp_Ax2 Axes, Standard_Real const R1, Standard_Real const R2, Standard_Real const H) -> BRepPrimAPI_MakeCone
        __init__(BRepPrimAPI_MakeCone self, gp_Ax2 Axes, Standard_Real const R1, Standard_Real const R2, Standard_Real const H, Standard_Real const angle) -> BRepPrimAPI_MakeCone

        Make a cone of height H radius R1 in the plane z =
        0, R2 in the plane Z = H. R1 and R2 may be null.
        Take a section of <angle>
        Constructs a cone, or a portion of a cone, of height H,
        and radius R1 in the plane z = 0 and R2 in the plane
        z = H. The result is a sharp cone if R1 or R2 is equal to 0.
        The cone is constructed about the "Z Axis" of either:
        -   the global coordinate system, or
        -   the local coordinate system Axes.
        It is limited in these coordinate systems as follows:
        -   in the v parametric direction (the Z coordinate), by
        the two parameter values 0 and H,
        -   and in the u parametric direction (defined by the
        angle of rotation around the Z axis), in the case of a
        portion of a cone, by the two parameter values 0 and
        angle. Angle is given in radians.
        The resulting shape is composed of:
        -   a lateral conical face
        -   two planar faces in the planes z = 0 and z = H,
        or only one planar face in one of these two planes if a
        radius value is null (in the case of a complete cone,
        these faces are circles), and
        -   and in the case of a portion of a cone, two planar
        faces to close the shape. (either two parallelograms or
        two triangles, in the planes u = 0 and u = angle).
        Exceptions
        Standard_DomainError if:
        -   H is less than or equal to Precision::Confusion(), or
        -   the half-angle at the apex of the cone, defined by
        R1, R2 and H, is less than Precision::Confusion()/H, or greater than
        (Pi/2)-Precision::Confusion()/H.f

        :type Axes: OCC.wrapper.gp.gp_Ax2
        :type R1: float
        :type R2: float
        :type H: float
        :type angle: float

        """
        this = _BRepPrimAPI.new_BRepPrimAPI_MakeCone(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def OneAxis(self, *args):
        """
        OneAxis(BRepPrimAPI_MakeCone self) -> Standard_Address

        Returns the algorithm.

        :rtype: OCC.wrapper.Standard.Standard_Address

        """
        return _BRepPrimAPI.BRepPrimAPI_MakeCone_OneAxis(self, *args)


    def Cone(self, *args):
        """
        Cone(BRepPrimAPI_MakeCone self) -> BRepPrim_Cone

        Returns the algorithm.

        :rtype: OCC.wrapper.BRepPrim.BRepPrim_Cone

        """
        return _BRepPrimAPI.BRepPrimAPI_MakeCone_Cone(self, *args)

    __swig_destroy__ = _BRepPrimAPI.delete_BRepPrimAPI_MakeCone
BRepPrimAPI_MakeCone_swigregister = _BRepPrimAPI.BRepPrimAPI_MakeCone_swigregister
BRepPrimAPI_MakeCone_swigregister(BRepPrimAPI_MakeCone)

class BRepPrimAPI_MakeSphere(BRepPrimAPI_MakeOneAxis):
    """
    Describes functions to build spheres or portions of spheres.
    A MakeSphere object provides a framework for:
    -   defining the construction of a sphere,
    -   implementing the construction algorithm, and
    -   consulting the result.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BRepPrimAPI_MakeSphere self, Standard_Real const R) -> BRepPrimAPI_MakeSphere
        __init__(BRepPrimAPI_MakeSphere self, Standard_Real const R, Standard_Real const angle) -> BRepPrimAPI_MakeSphere
        __init__(BRepPrimAPI_MakeSphere self, Standard_Real const R, Standard_Real const angle1, Standard_Real const angle2) -> BRepPrimAPI_MakeSphere
        __init__(BRepPrimAPI_MakeSphere self, Standard_Real const R, Standard_Real const angle1, Standard_Real const angle2, Standard_Real const angle3) -> BRepPrimAPI_MakeSphere
        __init__(BRepPrimAPI_MakeSphere self, gp_Pnt Center, Standard_Real const R) -> BRepPrimAPI_MakeSphere
        __init__(BRepPrimAPI_MakeSphere self, gp_Pnt Center, Standard_Real const R, Standard_Real const angle) -> BRepPrimAPI_MakeSphere
        __init__(BRepPrimAPI_MakeSphere self, gp_Pnt Center, Standard_Real const R, Standard_Real const angle1, Standard_Real const angle2) -> BRepPrimAPI_MakeSphere
        __init__(BRepPrimAPI_MakeSphere self, gp_Pnt Center, Standard_Real const R, Standard_Real const angle1, Standard_Real const angle2, Standard_Real const angle3) -> BRepPrimAPI_MakeSphere
        __init__(BRepPrimAPI_MakeSphere self, gp_Ax2 Axis, Standard_Real const R) -> BRepPrimAPI_MakeSphere
        __init__(BRepPrimAPI_MakeSphere self, gp_Ax2 Axis, Standard_Real const R, Standard_Real const angle) -> BRepPrimAPI_MakeSphere
        __init__(BRepPrimAPI_MakeSphere self, gp_Ax2 Axis, Standard_Real const R, Standard_Real const angle1, Standard_Real const angle2) -> BRepPrimAPI_MakeSphere
        __init__(BRepPrimAPI_MakeSphere self, gp_Ax2 Axis, Standard_Real const R, Standard_Real const angle1, Standard_Real const angle2, Standard_Real const angle3) -> BRepPrimAPI_MakeSphere

        Make a sphere of radius R.
        For all algorithms The resulting shape is composed of
        -   a lateral spherical face,
        -   two planar faces parallel to the plane z = 0 if the
        sphere is truncated in the v parametric direction, or
        only one planar face if angle1 is equal to -p/2 or if
        angle2 is equal to p/2 (these faces are circles in
        case of a complete truncated sphere),
        -   and in case of a portion of sphere, two planar faces
        to shut the shape.(in the planes u = 0 and u = angle).

        :type Axis: OCC.wrapper.gp.gp_Ax2
        :type R: float
        :type angle1: float
        :type angle2: float
        :type angle3: float

        """
        this = _BRepPrimAPI.new_BRepPrimAPI_MakeSphere(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def OneAxis(self, *args):
        """
        OneAxis(BRepPrimAPI_MakeSphere self) -> Standard_Address

        Returns the algorithm.

        :rtype: OCC.wrapper.Standard.Standard_Address

        """
        return _BRepPrimAPI.BRepPrimAPI_MakeSphere_OneAxis(self, *args)


    def Sphere(self, *args):
        """
        Sphere(BRepPrimAPI_MakeSphere self) -> BRepPrim_Sphere

        Returns the algorithm.

        :rtype: OCC.wrapper.BRepPrim.BRepPrim_Sphere

        """
        return _BRepPrimAPI.BRepPrimAPI_MakeSphere_Sphere(self, *args)

    __swig_destroy__ = _BRepPrimAPI.delete_BRepPrimAPI_MakeSphere
BRepPrimAPI_MakeSphere_swigregister = _BRepPrimAPI.BRepPrimAPI_MakeSphere_swigregister
BRepPrimAPI_MakeSphere_swigregister(BRepPrimAPI_MakeSphere)

class BRepPrimAPI_MakeRevolution(BRepPrimAPI_MakeOneAxis):
    """
    Describes functions to build revolved shapes.
    A MakeRevolution object provides a framework for:
    -   defining the construction of a revolved shape,
    -   implementing the construction algorithm, and
    -   consulting the result.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BRepPrimAPI_MakeRevolution self, Handle_Geom_Curve Meridian) -> BRepPrimAPI_MakeRevolution
        __init__(BRepPrimAPI_MakeRevolution self, Handle_Geom_Curve Meridian, Standard_Real const angle) -> BRepPrimAPI_MakeRevolution
        __init__(BRepPrimAPI_MakeRevolution self, Handle_Geom_Curve Meridian, Standard_Real const VMin, Standard_Real const VMax) -> BRepPrimAPI_MakeRevolution
        __init__(BRepPrimAPI_MakeRevolution self, Handle_Geom_Curve Meridian, Standard_Real const VMin, Standard_Real const VMax, Standard_Real const angle) -> BRepPrimAPI_MakeRevolution
        __init__(BRepPrimAPI_MakeRevolution self, gp_Ax2 Axes, Handle_Geom_Curve Meridian) -> BRepPrimAPI_MakeRevolution
        __init__(BRepPrimAPI_MakeRevolution self, gp_Ax2 Axes, Handle_Geom_Curve Meridian, Standard_Real const angle) -> BRepPrimAPI_MakeRevolution
        __init__(BRepPrimAPI_MakeRevolution self, gp_Ax2 Axes, Handle_Geom_Curve Meridian, Standard_Real const VMin, Standard_Real const VMax) -> BRepPrimAPI_MakeRevolution
        __init__(BRepPrimAPI_MakeRevolution self, gp_Ax2 Axes, Handle_Geom_Curve Meridian, Standard_Real const VMin, Standard_Real const VMax, Standard_Real const angle) -> BRepPrimAPI_MakeRevolution

        Make a revolution body by rotating a curve around Z.
        For all algorithms the resulting shape is composed of
        -   a lateral revolved face,
        -   two planar faces in planes parallel to the plane z =
        0, and passing by the extremities of the revolved
        portion of Meridian, if these points are not on the Z
        axis (in case of a complete revolved shape, these faces are circles),
        -   and in the case of a portion of a revolved shape, two
        planar faces to close the shape (in the planes u = 0 and u = angle).

        :type Axes: OCC.wrapper.gp.gp_Ax2
        :type Meridian: OCC.wrapper.Geom.Handle_Geom_Curve
        :type VMin: float
        :type VMax: float
        :type angle: float

        """
        this = _BRepPrimAPI.new_BRepPrimAPI_MakeRevolution(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def OneAxis(self, *args):
        """
        OneAxis(BRepPrimAPI_MakeRevolution self) -> Standard_Address

        Returns the algorithm.

        :rtype: OCC.wrapper.Standard.Standard_Address

        """
        return _BRepPrimAPI.BRepPrimAPI_MakeRevolution_OneAxis(self, *args)


    def Revolution(self, *args):
        """
        Revolution(BRepPrimAPI_MakeRevolution self) -> BRepPrim_Revolution

        Returns the algorithm.

        :rtype: OCC.wrapper.BRepPrim.BRepPrim_Revolution

        """
        return _BRepPrimAPI.BRepPrimAPI_MakeRevolution_Revolution(self, *args)

    __swig_destroy__ = _BRepPrimAPI.delete_BRepPrimAPI_MakeRevolution
BRepPrimAPI_MakeRevolution_swigregister = _BRepPrimAPI.BRepPrimAPI_MakeRevolution_swigregister
BRepPrimAPI_MakeRevolution_swigregister(BRepPrimAPI_MakeRevolution)

class BRepPrimAPI_MakeBox(BRepBuilderAPI.BRepBuilderAPI_MakeShape):
    """
    Describes functions to build parallelepiped boxes.
    A MakeBox object provides a framework for:
    -   defining the construction of a box,
    -   implementing the construction algorithm, and
    -   consulting the result.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BRepPrimAPI_MakeBox self, Standard_Real const dx, Standard_Real const dy, Standard_Real const dz) -> BRepPrimAPI_MakeBox
        __init__(BRepPrimAPI_MakeBox self, gp_Pnt P, Standard_Real const dx, Standard_Real const dy, Standard_Real const dz) -> BRepPrimAPI_MakeBox
        __init__(BRepPrimAPI_MakeBox self, gp_Pnt P1, gp_Pnt P2) -> BRepPrimAPI_MakeBox
        __init__(BRepPrimAPI_MakeBox self, gp_Ax2 Axes, Standard_Real const dx, Standard_Real const dy, Standard_Real const dz) -> BRepPrimAPI_MakeBox

        Ax2 is the left corner and the axis.
        Constructs a box such that its sides are parallel to the axes of
        -   the global coordinate system, or
        -   the local coordinate system Axis. and
        -   with a corner at (0, 0, 0) and of size (dx, dy, dz), or
        -   with a corner at point P and of size (dx, dy, dz), or
        -   with corners at points P1 and P2.
        Exceptions
        Standard_DomainError if: dx, dy, dz are less than or equal to
        Precision::Confusion(), or
        -   the vector joining the points P1 and P2 has a
        component projected onto the global coordinate
        system less than or equal to Precision::Confusion().
        In these cases, the box would be flat.

        :type Axes: OCC.wrapper.gp.gp_Ax2
        :type dx: float
        :type dy: float
        :type dz: float

        """
        this = _BRepPrimAPI.new_BRepPrimAPI_MakeBox(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Wedge(self, *args):
        """
        Wedge(BRepPrimAPI_MakeBox self) -> BRepPrim_Wedge

        Returns the internal algorithm.

        :rtype: OCC.wrapper.BRepPrim.BRepPrim_Wedge

        """
        return _BRepPrimAPI.BRepPrimAPI_MakeBox_Wedge(self, *args)


    def Build(self, *args):
        """
        Build(BRepPrimAPI_MakeBox self)

        Stores the solid in myShape.


        """
        return _BRepPrimAPI.BRepPrimAPI_MakeBox_Build(self, *args)


    def Shell(self, *args):
        """
        Returns the constructed box as a shell.

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shell

        """
        res = _BRepPrimAPI.BRepPrimAPI_MakeBox_Shell(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Solid(self, *args):
        """
        Returns the constructed box as a solid.

        :rtype: OCC.wrapper.TopoDS.TopoDS_Solid

        """
        res = _BRepPrimAPI.BRepPrimAPI_MakeBox_Solid(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def BottomFace(self, *args):
        """
        Returns ZMin face

        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        res = _BRepPrimAPI.BRepPrimAPI_MakeBox_BottomFace(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def BackFace(self, *args):
        """
        Returns XMin face

        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        res = _BRepPrimAPI.BRepPrimAPI_MakeBox_BackFace(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FrontFace(self, *args):
        """
        Returns XMax face

        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        res = _BRepPrimAPI.BRepPrimAPI_MakeBox_FrontFace(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def LeftFace(self, *args):
        """
        Returns YMin face

        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        res = _BRepPrimAPI.BRepPrimAPI_MakeBox_LeftFace(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def RightFace(self, *args):
        """
        Returns YMax face

        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        res = _BRepPrimAPI.BRepPrimAPI_MakeBox_RightFace(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TopFace(self, *args):
        """
        Returns ZMax face

        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        res = _BRepPrimAPI.BRepPrimAPI_MakeBox_TopFace(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BRepPrimAPI.delete_BRepPrimAPI_MakeBox
BRepPrimAPI_MakeBox_swigregister = _BRepPrimAPI.BRepPrimAPI_MakeBox_swigregister
BRepPrimAPI_MakeBox_swigregister(BRepPrimAPI_MakeBox)

class BRepPrimAPI_MakePrism(BRepPrimAPI_MakeSweep):
    """
    Describes functions to build linear swept topologies, called prisms.
    A prism is defined by:
    -   a basis shape, which is swept, and
    -   a sweeping direction, which is:
    -   a vector for finite prisms, or
    -   a direction for infinite or semi-infinite prisms.
    The basis shape must not contain any solids.
    The profile generates objects according to the following rules:
    -   Vertices generate Edges
    -   Edges generate Faces.
    -   Wires generate Shells.
    -   Faces generate Solids.
    -   Shells generate Composite Solids
    A MakePrism object provides a framework for:
    -   defining the construction of a prism,
    -   implementing the construction algorithm, and
    -   consulting the result.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BRepPrimAPI_MakePrism self, TopoDS_Shape S, gp_Vec V, Standard_Boolean const Copy, Standard_Boolean const Canonize) -> BRepPrimAPI_MakePrism
        __init__(BRepPrimAPI_MakePrism self, TopoDS_Shape S, gp_Dir D, Standard_Boolean const Inf, Standard_Boolean const Copy, Standard_Boolean const Canonize) -> BRepPrimAPI_MakePrism

        Builds a semi-infinite or an infinite prism of base S.
        If Inf is true the prism  is infinite, if Inf is false
        the prism is semi-infinite (in the direction D).  If C
        is true S is copied (for semi-infinite prisms).
        If Canonize is true then generated surfaces
        are attempted to be canonized in simple types

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type D: OCC.wrapper.gp.gp_Dir
        :type Inf: bool
        :type Copy: bool
        :type Canonize: bool

        """
        this = _BRepPrimAPI.new_BRepPrimAPI_MakePrism(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Prism(self, *args):
        """
        Returns the internal sweeping algorithm.

        :rtype: OCC.wrapper.BRepSweep.BRepSweep_Prism

        """
        res = _BRepPrimAPI.BRepPrimAPI_MakePrism_Prism(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Build(self, *args):
        """
        Build(BRepPrimAPI_MakePrism self)

        Builds the resulting shape (redefined from MakeShape).


        """
        return _BRepPrimAPI.BRepPrimAPI_MakePrism_Build(self, *args)


    def Generated(self, *args):
        """
        Returns ListOfShape from TopTools.

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _BRepPrimAPI.BRepPrimAPI_MakePrism_Generated(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FirstShape(self, *args):
        """
        FirstShape(BRepPrimAPI_MakePrism self) -> TopoDS_Shape
        FirstShape(BRepPrimAPI_MakePrism self, TopoDS_Shape theShape) -> TopoDS_Shape

        Returns the TopoDS Shape of the bottom  of the  prism.
        generated  with  theShape (subShape of the  generating shape).

        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepPrimAPI.BRepPrimAPI_MakePrism_FirstShape(self, *args)


    def LastShape(self, *args):
        """
        LastShape(BRepPrimAPI_MakePrism self) -> TopoDS_Shape
        LastShape(BRepPrimAPI_MakePrism self, TopoDS_Shape theShape) -> TopoDS_Shape

        Returns the  TopoDS  Shape of the top  of  the  prism.
        generated  with  theShape (subShape of the  generating shape).

        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepPrimAPI.BRepPrimAPI_MakePrism_LastShape(self, *args)

    __swig_destroy__ = _BRepPrimAPI.delete_BRepPrimAPI_MakePrism
BRepPrimAPI_MakePrism_swigregister = _BRepPrimAPI.BRepPrimAPI_MakePrism_swigregister
BRepPrimAPI_MakePrism_swigregister(BRepPrimAPI_MakePrism)

class BRepPrimAPI_MakeHalfSpace(BRepBuilderAPI.BRepBuilderAPI_MakeShape):
    """
    Describes functions to build half-spaces.
    A half-space is an infinite solid, limited by a surface. It
    is built from a face or a shell, which bounds it, and with
    a reference point, which specifies the side of the
    surface where the matter of the half-space is located.
    A half-space is a tool commonly used in topological
    operations to cut another shape.
    A MakeHalfSpace object provides a framework for:
    -   defining and implementing the construction of a half-space, and
    -   consulting the result.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BRepPrimAPI_MakeHalfSpace self, TopoDS_Face Face, gp_Pnt RefPnt) -> BRepPrimAPI_MakeHalfSpace
        __init__(BRepPrimAPI_MakeHalfSpace self, TopoDS_Shell Shell, gp_Pnt RefPnt) -> BRepPrimAPI_MakeHalfSpace

        Make a HalfSpace defined with a Shell and a Point.

        :type Shell: OCC.wrapper.TopoDS.TopoDS_Shell
        :type RefPnt: OCC.wrapper.gp.gp_Pnt

        """
        this = _BRepPrimAPI.new_BRepPrimAPI_MakeHalfSpace(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Solid(self, *args):
        """
        Returns the constructed half-space as a solid.

        :rtype: OCC.wrapper.TopoDS.TopoDS_Solid

        """
        res = _BRepPrimAPI.BRepPrimAPI_MakeHalfSpace_Solid(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BRepPrimAPI.delete_BRepPrimAPI_MakeHalfSpace
BRepPrimAPI_MakeHalfSpace_swigregister = _BRepPrimAPI.BRepPrimAPI_MakeHalfSpace_swigregister
BRepPrimAPI_MakeHalfSpace_swigregister(BRepPrimAPI_MakeHalfSpace)

class BRepPrimAPI_MakeWedge(BRepBuilderAPI.BRepBuilderAPI_MakeShape):
    """
    Describes functions to build wedges, i.e. boxes with inclined faces.
    A MakeWedge object provides a framework for:
    -   defining the construction of a wedge,
    -   implementing the construction algorithm, and
    -   consulting the result.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BRepPrimAPI_MakeWedge self, Standard_Real const dx, Standard_Real const dy, Standard_Real const dz, Standard_Real const ltx) -> BRepPrimAPI_MakeWedge
        __init__(BRepPrimAPI_MakeWedge self, gp_Ax2 Axes, Standard_Real const dx, Standard_Real const dy, Standard_Real const dz, Standard_Real const ltx) -> BRepPrimAPI_MakeWedge
        __init__(BRepPrimAPI_MakeWedge self, Standard_Real const dx, Standard_Real const dy, Standard_Real const dz, Standard_Real const xmin, Standard_Real const zmin, Standard_Real const xmax, Standard_Real const zmax) -> BRepPrimAPI_MakeWedge
        __init__(BRepPrimAPI_MakeWedge self, gp_Ax2 Axes, Standard_Real const dx, Standard_Real const dy, Standard_Real const dz, Standard_Real const xmin, Standard_Real const zmin, Standard_Real const xmax, Standard_Real const zmax) -> BRepPrimAPI_MakeWedge

        Make a wedge. The face at dy is xmin,zmin xmax,zmax

        :type Axes: OCC.wrapper.gp.gp_Ax2
        :type dx: float
        :type dy: float
        :type dz: float
        :type xmin: float
        :type zmin: float
        :type xmax: float
        :type zmax: float

        """
        this = _BRepPrimAPI.new_BRepPrimAPI_MakeWedge(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Wedge(self, *args):
        """
        Wedge(BRepPrimAPI_MakeWedge self) -> BRepPrim_Wedge

        Returns the internal algorithm.

        :rtype: OCC.wrapper.BRepPrim.BRepPrim_Wedge

        """
        return _BRepPrimAPI.BRepPrimAPI_MakeWedge_Wedge(self, *args)


    def Build(self, *args):
        """
        Build(BRepPrimAPI_MakeWedge self)

        Stores the solid in myShape.


        """
        return _BRepPrimAPI.BRepPrimAPI_MakeWedge_Build(self, *args)


    def Shell(self, *args):
        """
        Returns the constructed box in the form of a shell.

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shell

        """
        res = _BRepPrimAPI.BRepPrimAPI_MakeWedge_Shell(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Solid(self, *args):
        """
        Returns the constructed box in the form of a solid.

        :rtype: OCC.wrapper.TopoDS.TopoDS_Solid

        """
        res = _BRepPrimAPI.BRepPrimAPI_MakeWedge_Solid(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BRepPrimAPI.delete_BRepPrimAPI_MakeWedge
BRepPrimAPI_MakeWedge_swigregister = _BRepPrimAPI.BRepPrimAPI_MakeWedge_swigregister
BRepPrimAPI_MakeWedge_swigregister(BRepPrimAPI_MakeWedge)



