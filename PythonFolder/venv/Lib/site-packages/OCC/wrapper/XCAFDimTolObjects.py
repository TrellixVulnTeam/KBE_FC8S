# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_XCAFDimTolObjects')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_XCAFDimTolObjects')
    _XCAFDimTolObjects = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_XCAFDimTolObjects', [dirname(__file__)])
        except ImportError:
            import _XCAFDimTolObjects
            return _XCAFDimTolObjects
        try:
            _mod = imp.load_module('_XCAFDimTolObjects', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _XCAFDimTolObjects = swig_import_helper()
    del swig_import_helper
else:
    import _XCAFDimTolObjects
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XCAFDimTolObjects.delete_SwigPyIterator

    def value(self):
        return _XCAFDimTolObjects.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _XCAFDimTolObjects.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _XCAFDimTolObjects.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _XCAFDimTolObjects.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _XCAFDimTolObjects.SwigPyIterator_equal(self, x)

    def copy(self):
        return _XCAFDimTolObjects.SwigPyIterator_copy(self)

    def next(self):
        return _XCAFDimTolObjects.SwigPyIterator_next(self)

    def __next__(self):
        return _XCAFDimTolObjects.SwigPyIterator___next__(self)

    def previous(self):
        return _XCAFDimTolObjects.SwigPyIterator_previous(self)

    def advance(self, n):
        return _XCAFDimTolObjects.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _XCAFDimTolObjects.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _XCAFDimTolObjects.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _XCAFDimTolObjects.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _XCAFDimTolObjects.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _XCAFDimTolObjects.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _XCAFDimTolObjects.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _XCAFDimTolObjects.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _XCAFDimTolObjects.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_XCAFDimTolObjects.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _XCAFDimTolObjects.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _XCAFDimTolObjects.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XCAFDimTolObjects.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _XCAFDimTolObjects.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _XCAFDimTolObjects.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _XCAFDimTolObjects.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _XCAFDimTolObjects.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_XCAFDimTolObjects.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _XCAFDimTolObjects.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _XCAFDimTolObjects.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XCAFDimTolObjects.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _XCAFDimTolObjects.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _XCAFDimTolObjects.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _XCAFDimTolObjects.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _XCAFDimTolObjects.ptr_to_number(item)
ptr_to_number = _XCAFDimTolObjects.ptr_to_number

def HashCode(*args):
    return _XCAFDimTolObjects.HashCode(*args)
HashCode = _XCAFDimTolObjects.HashCode

def ptr_equal(a, b):
    return _XCAFDimTolObjects.ptr_equal(a, b)
ptr_equal = _XCAFDimTolObjects.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDocStd
else:
    import TDocStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import CDF
else:
    import CDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import CDM
else:
    import CDM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Resource
else:
    import Resource
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import PCDM
else:
    import PCDM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import LDOM
else:
    import LDOM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Storage
else:
    import Storage
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDF
else:
    import TDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
XCAFDimTolObjects_DatumTargetType_Point = _XCAFDimTolObjects.XCAFDimTolObjects_DatumTargetType_Point
XCAFDimTolObjects_DatumTargetType_Line = _XCAFDimTolObjects.XCAFDimTolObjects_DatumTargetType_Line
XCAFDimTolObjects_DatumTargetType_Rectangle = _XCAFDimTolObjects.XCAFDimTolObjects_DatumTargetType_Rectangle
XCAFDimTolObjects_DatumTargetType_Circle = _XCAFDimTolObjects.XCAFDimTolObjects_DatumTargetType_Circle
XCAFDimTolObjects_DatumTargetType_Area = _XCAFDimTolObjects.XCAFDimTolObjects_DatumTargetType_Area
XCAFDimTolObjects_DatumSingleModif_AnyCrossSection = _XCAFDimTolObjects.XCAFDimTolObjects_DatumSingleModif_AnyCrossSection
XCAFDimTolObjects_DatumSingleModif_Any_LongitudinalSection = _XCAFDimTolObjects.XCAFDimTolObjects_DatumSingleModif_Any_LongitudinalSection
XCAFDimTolObjects_DatumSingleModif_Basic = _XCAFDimTolObjects.XCAFDimTolObjects_DatumSingleModif_Basic
XCAFDimTolObjects_DatumSingleModif_ContactingFeature = _XCAFDimTolObjects.XCAFDimTolObjects_DatumSingleModif_ContactingFeature
XCAFDimTolObjects_DatumSingleModif_DegreeOfFreedomConstraintU = _XCAFDimTolObjects.XCAFDimTolObjects_DatumSingleModif_DegreeOfFreedomConstraintU
XCAFDimTolObjects_DatumSingleModif_DegreeOfFreedomConstraintV = _XCAFDimTolObjects.XCAFDimTolObjects_DatumSingleModif_DegreeOfFreedomConstraintV
XCAFDimTolObjects_DatumSingleModif_DegreeOfFreedomConstraintW = _XCAFDimTolObjects.XCAFDimTolObjects_DatumSingleModif_DegreeOfFreedomConstraintW
XCAFDimTolObjects_DatumSingleModif_DegreeOfFreedomConstraintX = _XCAFDimTolObjects.XCAFDimTolObjects_DatumSingleModif_DegreeOfFreedomConstraintX
XCAFDimTolObjects_DatumSingleModif_DegreeOfFreedomConstraintY = _XCAFDimTolObjects.XCAFDimTolObjects_DatumSingleModif_DegreeOfFreedomConstraintY
XCAFDimTolObjects_DatumSingleModif_DegreeOfFreedomConstraintZ = _XCAFDimTolObjects.XCAFDimTolObjects_DatumSingleModif_DegreeOfFreedomConstraintZ
XCAFDimTolObjects_DatumSingleModif_DistanceVariable = _XCAFDimTolObjects.XCAFDimTolObjects_DatumSingleModif_DistanceVariable
XCAFDimTolObjects_DatumSingleModif_FreeState = _XCAFDimTolObjects.XCAFDimTolObjects_DatumSingleModif_FreeState
XCAFDimTolObjects_DatumSingleModif_LeastMaterialRequirement = _XCAFDimTolObjects.XCAFDimTolObjects_DatumSingleModif_LeastMaterialRequirement
XCAFDimTolObjects_DatumSingleModif_Line = _XCAFDimTolObjects.XCAFDimTolObjects_DatumSingleModif_Line
XCAFDimTolObjects_DatumSingleModif_MajorDiameter = _XCAFDimTolObjects.XCAFDimTolObjects_DatumSingleModif_MajorDiameter
XCAFDimTolObjects_DatumSingleModif_MaximumMaterialRequirement = _XCAFDimTolObjects.XCAFDimTolObjects_DatumSingleModif_MaximumMaterialRequirement
XCAFDimTolObjects_DatumSingleModif_MinorDiameter = _XCAFDimTolObjects.XCAFDimTolObjects_DatumSingleModif_MinorDiameter
XCAFDimTolObjects_DatumSingleModif_Orientation = _XCAFDimTolObjects.XCAFDimTolObjects_DatumSingleModif_Orientation
XCAFDimTolObjects_DatumSingleModif_PitchDiameter = _XCAFDimTolObjects.XCAFDimTolObjects_DatumSingleModif_PitchDiameter
XCAFDimTolObjects_DatumSingleModif_Plane = _XCAFDimTolObjects.XCAFDimTolObjects_DatumSingleModif_Plane
XCAFDimTolObjects_DatumSingleModif_Point = _XCAFDimTolObjects.XCAFDimTolObjects_DatumSingleModif_Point
XCAFDimTolObjects_DatumSingleModif_Translation = _XCAFDimTolObjects.XCAFDimTolObjects_DatumSingleModif_Translation
XCAFDimTolObjects_DatumModifWithValue_None = _XCAFDimTolObjects.XCAFDimTolObjects_DatumModifWithValue_None
XCAFDimTolObjects_DatumModifWithValue_CircularOrCylindrical = _XCAFDimTolObjects.XCAFDimTolObjects_DatumModifWithValue_CircularOrCylindrical
XCAFDimTolObjects_DatumModifWithValue_Distance = _XCAFDimTolObjects.XCAFDimTolObjects_DatumModifWithValue_Distance
XCAFDimTolObjects_DatumModifWithValue_Projected = _XCAFDimTolObjects.XCAFDimTolObjects_DatumModifWithValue_Projected
XCAFDimTolObjects_DatumModifWithValue_Spherical = _XCAFDimTolObjects.XCAFDimTolObjects_DatumModifWithValue_Spherical
XCAFDimTolObjects_DimensionType_Location_None = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionType_Location_None
XCAFDimTolObjects_DimensionType_Location_CurvedDistance = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionType_Location_CurvedDistance
XCAFDimTolObjects_DimensionType_Location_LinearDistance = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionType_Location_LinearDistance
XCAFDimTolObjects_DimensionType_Location_LinearDistance_FromCenterToOuter = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionType_Location_LinearDistance_FromCenterToOuter
XCAFDimTolObjects_DimensionType_Location_LinearDistance_FromCenterToInner = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionType_Location_LinearDistance_FromCenterToInner
XCAFDimTolObjects_DimensionType_Location_LinearDistance_FromOuterToCenter = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionType_Location_LinearDistance_FromOuterToCenter
XCAFDimTolObjects_DimensionType_Location_LinearDistance_FromOuterToOuter = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionType_Location_LinearDistance_FromOuterToOuter
XCAFDimTolObjects_DimensionType_Location_LinearDistance_FromOuterToInner = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionType_Location_LinearDistance_FromOuterToInner
XCAFDimTolObjects_DimensionType_Location_LinearDistance_FromInnerToCenter = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionType_Location_LinearDistance_FromInnerToCenter
XCAFDimTolObjects_DimensionType_Location_LinearDistance_FromInnerToOuter = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionType_Location_LinearDistance_FromInnerToOuter
XCAFDimTolObjects_DimensionType_Location_LinearDistance_FromInnerToInner = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionType_Location_LinearDistance_FromInnerToInner
XCAFDimTolObjects_DimensionType_Location_Angular = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionType_Location_Angular
XCAFDimTolObjects_DimensionType_Location_Oriented = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionType_Location_Oriented
XCAFDimTolObjects_DimensionType_Location_WithPath = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionType_Location_WithPath
XCAFDimTolObjects_DimensionType_Size_CurveLength = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionType_Size_CurveLength
XCAFDimTolObjects_DimensionType_Size_Diameter = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionType_Size_Diameter
XCAFDimTolObjects_DimensionType_Size_SphericalDiameter = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionType_Size_SphericalDiameter
XCAFDimTolObjects_DimensionType_Size_Radius = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionType_Size_Radius
XCAFDimTolObjects_DimensionType_Size_SphericalRadius = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionType_Size_SphericalRadius
XCAFDimTolObjects_DimensionType_Size_ToroidalMinorDiameter = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionType_Size_ToroidalMinorDiameter
XCAFDimTolObjects_DimensionType_Size_ToroidalMajorDiameter = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionType_Size_ToroidalMajorDiameter
XCAFDimTolObjects_DimensionType_Size_ToroidalMinorRadius = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionType_Size_ToroidalMinorRadius
XCAFDimTolObjects_DimensionType_Size_ToroidalMajorRadius = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionType_Size_ToroidalMajorRadius
XCAFDimTolObjects_DimensionType_Size_ToroidalHighMajorDiameter = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionType_Size_ToroidalHighMajorDiameter
XCAFDimTolObjects_DimensionType_Size_ToroidalLowMajorDiameter = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionType_Size_ToroidalLowMajorDiameter
XCAFDimTolObjects_DimensionType_Size_ToroidalHighMajorRadius = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionType_Size_ToroidalHighMajorRadius
XCAFDimTolObjects_DimensionType_Size_ToroidalLowMajorRadius = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionType_Size_ToroidalLowMajorRadius
XCAFDimTolObjects_DimensionType_Size_Thickness = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionType_Size_Thickness
XCAFDimTolObjects_DimensionType_Size_Angular = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionType_Size_Angular
XCAFDimTolObjects_DimensionType_Size_WithPath = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionType_Size_WithPath
XCAFDimTolObjects_DimensionType_CommonLabel = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionType_CommonLabel
XCAFDimTolObjects_DimensionType_DimensionPresentation = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionType_DimensionPresentation
XCAFDimTolObjects_DimensionQualifier_None = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionQualifier_None
XCAFDimTolObjects_DimensionQualifier_Min = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionQualifier_Min
XCAFDimTolObjects_DimensionQualifier_Max = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionQualifier_Max
XCAFDimTolObjects_DimensionQualifier_Avg = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionQualifier_Avg
XCAFDimTolObjects_DimensionFormVariance_None = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionFormVariance_None
XCAFDimTolObjects_DimensionFormVariance_A = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionFormVariance_A
XCAFDimTolObjects_DimensionFormVariance_B = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionFormVariance_B
XCAFDimTolObjects_DimensionFormVariance_C = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionFormVariance_C
XCAFDimTolObjects_DimensionFormVariance_CD = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionFormVariance_CD
XCAFDimTolObjects_DimensionFormVariance_D = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionFormVariance_D
XCAFDimTolObjects_DimensionFormVariance_E = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionFormVariance_E
XCAFDimTolObjects_DimensionFormVariance_EF = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionFormVariance_EF
XCAFDimTolObjects_DimensionFormVariance_F = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionFormVariance_F
XCAFDimTolObjects_DimensionFormVariance_FG = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionFormVariance_FG
XCAFDimTolObjects_DimensionFormVariance_G = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionFormVariance_G
XCAFDimTolObjects_DimensionFormVariance_H = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionFormVariance_H
XCAFDimTolObjects_DimensionFormVariance_JS = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionFormVariance_JS
XCAFDimTolObjects_DimensionFormVariance_J = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionFormVariance_J
XCAFDimTolObjects_DimensionFormVariance_K = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionFormVariance_K
XCAFDimTolObjects_DimensionFormVariance_M = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionFormVariance_M
XCAFDimTolObjects_DimensionFormVariance_N = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionFormVariance_N
XCAFDimTolObjects_DimensionFormVariance_P = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionFormVariance_P
XCAFDimTolObjects_DimensionFormVariance_R = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionFormVariance_R
XCAFDimTolObjects_DimensionFormVariance_S = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionFormVariance_S
XCAFDimTolObjects_DimensionFormVariance_T = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionFormVariance_T
XCAFDimTolObjects_DimensionFormVariance_U = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionFormVariance_U
XCAFDimTolObjects_DimensionFormVariance_V = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionFormVariance_V
XCAFDimTolObjects_DimensionFormVariance_X = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionFormVariance_X
XCAFDimTolObjects_DimensionFormVariance_Y = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionFormVariance_Y
XCAFDimTolObjects_DimensionFormVariance_Z = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionFormVariance_Z
XCAFDimTolObjects_DimensionFormVariance_ZA = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionFormVariance_ZA
XCAFDimTolObjects_DimensionFormVariance_ZB = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionFormVariance_ZB
XCAFDimTolObjects_DimensionFormVariance_ZC = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionFormVariance_ZC
XCAFDimTolObjects_DimensionGrade_IT01 = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionGrade_IT01
XCAFDimTolObjects_DimensionGrade_IT0 = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionGrade_IT0
XCAFDimTolObjects_DimensionGrade_IT1 = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionGrade_IT1
XCAFDimTolObjects_DimensionGrade_IT2 = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionGrade_IT2
XCAFDimTolObjects_DimensionGrade_IT3 = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionGrade_IT3
XCAFDimTolObjects_DimensionGrade_IT4 = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionGrade_IT4
XCAFDimTolObjects_DimensionGrade_IT5 = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionGrade_IT5
XCAFDimTolObjects_DimensionGrade_IT6 = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionGrade_IT6
XCAFDimTolObjects_DimensionGrade_IT7 = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionGrade_IT7
XCAFDimTolObjects_DimensionGrade_IT8 = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionGrade_IT8
XCAFDimTolObjects_DimensionGrade_IT9 = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionGrade_IT9
XCAFDimTolObjects_DimensionGrade_IT10 = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionGrade_IT10
XCAFDimTolObjects_DimensionGrade_IT11 = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionGrade_IT11
XCAFDimTolObjects_DimensionGrade_IT12 = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionGrade_IT12
XCAFDimTolObjects_DimensionGrade_IT13 = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionGrade_IT13
XCAFDimTolObjects_DimensionGrade_IT14 = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionGrade_IT14
XCAFDimTolObjects_DimensionGrade_IT15 = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionGrade_IT15
XCAFDimTolObjects_DimensionGrade_IT16 = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionGrade_IT16
XCAFDimTolObjects_DimensionGrade_IT17 = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionGrade_IT17
XCAFDimTolObjects_DimensionGrade_IT18 = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionGrade_IT18
XCAFDimTolObjects_DimensionModif_ControlledRadius = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionModif_ControlledRadius
XCAFDimTolObjects_DimensionModif_Square = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionModif_Square
XCAFDimTolObjects_DimensionModif_StatisticalTolerance = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionModif_StatisticalTolerance
XCAFDimTolObjects_DimensionModif_ContinuousFeature = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionModif_ContinuousFeature
XCAFDimTolObjects_DimensionModif_TwoPointSize = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionModif_TwoPointSize
XCAFDimTolObjects_DimensionModif_LocalSizeDefinedBySphere = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionModif_LocalSizeDefinedBySphere
XCAFDimTolObjects_DimensionModif_LeastSquaresAssociationCriterion = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionModif_LeastSquaresAssociationCriterion
XCAFDimTolObjects_DimensionModif_MaximumInscribedAssociation = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionModif_MaximumInscribedAssociation
XCAFDimTolObjects_DimensionModif_MinimumCircumscribedAssociation = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionModif_MinimumCircumscribedAssociation
XCAFDimTolObjects_DimensionModif_CircumferenceDiameter = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionModif_CircumferenceDiameter
XCAFDimTolObjects_DimensionModif_AreaDiameter = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionModif_AreaDiameter
XCAFDimTolObjects_DimensionModif_VolumeDiameter = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionModif_VolumeDiameter
XCAFDimTolObjects_DimensionModif_MaximumSize = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionModif_MaximumSize
XCAFDimTolObjects_DimensionModif_MinimumSize = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionModif_MinimumSize
XCAFDimTolObjects_DimensionModif_AverageSize = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionModif_AverageSize
XCAFDimTolObjects_DimensionModif_MedianSize = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionModif_MedianSize
XCAFDimTolObjects_DimensionModif_MidRangeSize = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionModif_MidRangeSize
XCAFDimTolObjects_DimensionModif_RangeOfSizes = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionModif_RangeOfSizes
XCAFDimTolObjects_DimensionModif_AnyRestrictedPortionOfFeature = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionModif_AnyRestrictedPortionOfFeature
XCAFDimTolObjects_DimensionModif_AnyCrossSection = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionModif_AnyCrossSection
XCAFDimTolObjects_DimensionModif_SpecificFixedCrossSection = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionModif_SpecificFixedCrossSection
XCAFDimTolObjects_DimensionModif_CommonTolerance = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionModif_CommonTolerance
XCAFDimTolObjects_DimensionModif_FreeStateCondition = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionModif_FreeStateCondition
XCAFDimTolObjects_DimensionModif_Between = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionModif_Between
XCAFDimTolObjects_GeomToleranceType_None = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceType_None
XCAFDimTolObjects_GeomToleranceType_Angularity = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceType_Angularity
XCAFDimTolObjects_GeomToleranceType_CircularRunout = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceType_CircularRunout
XCAFDimTolObjects_GeomToleranceType_CircularityOrRoundness = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceType_CircularityOrRoundness
XCAFDimTolObjects_GeomToleranceType_Coaxiality = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceType_Coaxiality
XCAFDimTolObjects_GeomToleranceType_Concentricity = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceType_Concentricity
XCAFDimTolObjects_GeomToleranceType_Cylindricity = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceType_Cylindricity
XCAFDimTolObjects_GeomToleranceType_Flatness = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceType_Flatness
XCAFDimTolObjects_GeomToleranceType_Parallelism = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceType_Parallelism
XCAFDimTolObjects_GeomToleranceType_Perpendicularity = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceType_Perpendicularity
XCAFDimTolObjects_GeomToleranceType_Position = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceType_Position
XCAFDimTolObjects_GeomToleranceType_ProfileOfLine = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceType_ProfileOfLine
XCAFDimTolObjects_GeomToleranceType_ProfileOfSurface = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceType_ProfileOfSurface
XCAFDimTolObjects_GeomToleranceType_Straightness = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceType_Straightness
XCAFDimTolObjects_GeomToleranceType_Symmetry = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceType_Symmetry
XCAFDimTolObjects_GeomToleranceType_TotalRunout = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceType_TotalRunout
XCAFDimTolObjects_GeomToleranceTypeValue_None = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceTypeValue_None
XCAFDimTolObjects_GeomToleranceTypeValue_Diameter = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceTypeValue_Diameter
XCAFDimTolObjects_GeomToleranceTypeValue_SphericalDiameter = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceTypeValue_SphericalDiameter
XCAFDimTolObjects_GeomToleranceMatReqModif_None = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceMatReqModif_None
XCAFDimTolObjects_GeomToleranceMatReqModif_M = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceMatReqModif_M
XCAFDimTolObjects_GeomToleranceMatReqModif_L = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceMatReqModif_L
XCAFDimTolObjects_GeomToleranceZoneModif_None = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceZoneModif_None
XCAFDimTolObjects_GeomToleranceZoneModif_Projected = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceZoneModif_Projected
XCAFDimTolObjects_GeomToleranceZoneModif_Runout = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceZoneModif_Runout
XCAFDimTolObjects_GeomToleranceZoneModif_NonUniform = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceZoneModif_NonUniform
XCAFDimTolObjects_GeomToleranceModif_Any_Cross_Section = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceModif_Any_Cross_Section
XCAFDimTolObjects_GeomToleranceModif_Common_Zone = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceModif_Common_Zone
XCAFDimTolObjects_GeomToleranceModif_Each_Radial_Element = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceModif_Each_Radial_Element
XCAFDimTolObjects_GeomToleranceModif_Free_State = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceModif_Free_State
XCAFDimTolObjects_GeomToleranceModif_Least_Material_Requirement = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceModif_Least_Material_Requirement
XCAFDimTolObjects_GeomToleranceModif_Line_Element = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceModif_Line_Element
XCAFDimTolObjects_GeomToleranceModif_Major_Diameter = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceModif_Major_Diameter
XCAFDimTolObjects_GeomToleranceModif_Maximum_Material_Requirement = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceModif_Maximum_Material_Requirement
XCAFDimTolObjects_GeomToleranceModif_Minor_Diameter = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceModif_Minor_Diameter
XCAFDimTolObjects_GeomToleranceModif_Not_Convex = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceModif_Not_Convex
XCAFDimTolObjects_GeomToleranceModif_Pitch_Diameter = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceModif_Pitch_Diameter
XCAFDimTolObjects_GeomToleranceModif_Reciprocity_Requirement = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceModif_Reciprocity_Requirement
XCAFDimTolObjects_GeomToleranceModif_Separate_Requirement = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceModif_Separate_Requirement
XCAFDimTolObjects_GeomToleranceModif_Statistical_Tolerance = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceModif_Statistical_Tolerance
XCAFDimTolObjects_GeomToleranceModif_Tangent_Plane = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceModif_Tangent_Plane
XCAFDimTolObjects_GeomToleranceModif_All_Around = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceModif_All_Around
XCAFDimTolObjects_GeomToleranceModif_All_Over = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceModif_All_Over
XCAFDimTolObjects_ToleranceZoneAffectedPlane_None = _XCAFDimTolObjects.XCAFDimTolObjects_ToleranceZoneAffectedPlane_None
XCAFDimTolObjects_ToleranceZoneAffectedPlane_Intersection = _XCAFDimTolObjects.XCAFDimTolObjects_ToleranceZoneAffectedPlane_Intersection
XCAFDimTolObjects_ToleranceZoneAffectedPlane_Orientation = _XCAFDimTolObjects.XCAFDimTolObjects_ToleranceZoneAffectedPlane_Orientation
class XCAFDimTolObjects_GeomToleranceObject(Standard.Standard_Transient):
    """Access object to store dimension and tolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XCAFDimTolObjects_GeomToleranceObject
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XCAFDimTolObjects_GeomToleranceObject(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XCAFDimTolObjects_GeomToleranceObject self) -> XCAFDimTolObjects_GeomToleranceObject
        __init__(XCAFDimTolObjects_GeomToleranceObject self, Handle_XCAFDimTolObjects_GeomToleranceObject theObj) -> XCAFDimTolObjects_GeomToleranceObject

        :type theObj: OCC.wrapper.XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject

        """
        this = _XCAFDimTolObjects.new_XCAFDimTolObjects_GeomToleranceObject(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def GetSemanticName(self, *args):
        """
        GetSemanticName(XCAFDimTolObjects_GeomToleranceObject self) -> Handle_TCollection_HAsciiString

        Returns semantic name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_GetSemanticName(self, *args)


    def SetSemanticName(self, *args):
        """
        SetSemanticName(XCAFDimTolObjects_GeomToleranceObject self, Handle_TCollection_HAsciiString theName)

        Sets semantic name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_SetSemanticName(self, *args)


    def SetType(self, *args):
        """
        SetType(XCAFDimTolObjects_GeomToleranceObject self, XCAFDimTolObjects_GeomToleranceType const theType)

        Sets type of the object.

        :type theType: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceType

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_SetType(self, *args)


    def GetType(self, *args):
        """
        GetType(XCAFDimTolObjects_GeomToleranceObject self) -> XCAFDimTolObjects_GeomToleranceType

        Returns type of the object.

        :rtype: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceType

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_GetType(self, *args)


    def SetTypeOfValue(self, *args):
        """
        SetTypeOfValue(XCAFDimTolObjects_GeomToleranceObject self, XCAFDimTolObjects_GeomToleranceTypeValue const theTypeOfValue)

        Sets type of tolerance value.

        :type theTypeOfValue: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceTypeValue

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_SetTypeOfValue(self, *args)


    def GetTypeOfValue(self, *args):
        """
        GetTypeOfValue(XCAFDimTolObjects_GeomToleranceObject self) -> XCAFDimTolObjects_GeomToleranceTypeValue

        Returns type of tolerance value.

        :rtype: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceTypeValue

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_GetTypeOfValue(self, *args)


    def SetValue(self, *args):
        """
        SetValue(XCAFDimTolObjects_GeomToleranceObject self, Standard_Real const theValue)

        Sets tolerance value.

        :type theValue: float

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_SetValue(self, *args)


    def GetValue(self, *args):
        """
        GetValue(XCAFDimTolObjects_GeomToleranceObject self) -> Standard_Real

        Returns tolerance value.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_GetValue(self, *args)


    def SetMaterialRequirementModifier(self, *args):
        """
        SetMaterialRequirementModifier(XCAFDimTolObjects_GeomToleranceObject self, XCAFDimTolObjects_GeomToleranceMatReqModif const theMatReqModif)

        Sets material requirement of the tolerance.

        :type theMatReqModif: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceMatReqModif

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_SetMaterialRequirementModifier(self, *args)


    def GetMaterialRequirementModifier(self, *args):
        """
        GetMaterialRequirementModifier(XCAFDimTolObjects_GeomToleranceObject self) -> XCAFDimTolObjects_GeomToleranceMatReqModif

        Returns material requirement of the tolerance.

        :rtype: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceMatReqModif

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_GetMaterialRequirementModifier(self, *args)


    def SetZoneModifier(self, *args):
        """
        SetZoneModifier(XCAFDimTolObjects_GeomToleranceObject self, XCAFDimTolObjects_GeomToleranceZoneModif const theZoneModif)

        Sets tolerance zone.

        :type theZoneModif: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceZoneModif

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_SetZoneModifier(self, *args)


    def GetZoneModifier(self, *args):
        """
        GetZoneModifier(XCAFDimTolObjects_GeomToleranceObject self) -> XCAFDimTolObjects_GeomToleranceZoneModif

        Returns tolerance zone.

        :rtype: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceZoneModif

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_GetZoneModifier(self, *args)


    def SetValueOfZoneModifier(self, *args):
        """
        SetValueOfZoneModifier(XCAFDimTolObjects_GeomToleranceObject self, Standard_Real const theValue)

        Sets value associated with tolerance zone.

        :type theValue: float

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_SetValueOfZoneModifier(self, *args)


    def GetValueOfZoneModifier(self, *args):
        """
        GetValueOfZoneModifier(XCAFDimTolObjects_GeomToleranceObject self) -> Standard_Real

        Returns value associated with tolerance zone.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_GetValueOfZoneModifier(self, *args)


    def SetModifiers(self, *args):
        """
        SetModifiers(XCAFDimTolObjects_GeomToleranceObject self, NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif theModifiers)

        Sets new sequence of tolerance modifiers.

        :type theModifiers: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceModifiersSequence

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_SetModifiers(self, *args)


    def AddModifier(self, *args):
        """
        AddModifier(XCAFDimTolObjects_GeomToleranceObject self, XCAFDimTolObjects_GeomToleranceModif const theModifier)

        Adds a tolerance modifier to the sequence of modifiers.

        :type theModifier: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceModif

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_AddModifier(self, *args)


    def GetModifiers(self, *args):
        """
        GetModifiers(XCAFDimTolObjects_GeomToleranceObject self) -> NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif

        Returns a sequence of modifiers of the tolerance.

        :rtype: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceModifiersSequence

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_GetModifiers(self, *args)


    def SetMaxValueModifier(self, *args):
        """
        SetMaxValueModifier(XCAFDimTolObjects_GeomToleranceObject self, Standard_Real const theModifier)

        Sets the maximal upper tolerance value for tolerance with modifiers.

        :type theModifier: float

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_SetMaxValueModifier(self, *args)


    def GetMaxValueModifier(self, *args):
        """
        GetMaxValueModifier(XCAFDimTolObjects_GeomToleranceObject self) -> Standard_Real

        Returns the maximal upper tolerance.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_GetMaxValueModifier(self, *args)


    def SetAxis(self, *args):
        """
        SetAxis(XCAFDimTolObjects_GeomToleranceObject self, gp_Ax2 theAxis)

        :type theAxis: OCC.wrapper.gp.gp_Ax2

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_SetAxis(self, *args)


    def GetAxis(self, *args):
        """
        GetAxis(XCAFDimTolObjects_GeomToleranceObject self) -> gp_Ax2

        :rtype: OCC.wrapper.gp.gp_Ax2

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_GetAxis(self, *args)


    def HasAxis(self, *args):
        """
        HasAxis(XCAFDimTolObjects_GeomToleranceObject self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_HasAxis(self, *args)


    def SetPlane(self, *args):
        """
        SetPlane(XCAFDimTolObjects_GeomToleranceObject self, gp_Ax2 thePlane)

        Sets annotation plane.

        :type thePlane: OCC.wrapper.gp.gp_Ax2

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_SetPlane(self, *args)


    def GetPlane(self, *args):
        """
        Returns annotation plane.

        :rtype: OCC.wrapper.gp.gp_Ax2

        """
        res = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_GetPlane(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetPoint(self, *args):
        """
        SetPoint(XCAFDimTolObjects_GeomToleranceObject self, gp_Pnt thePnt)

        Sets reference point.

        :type thePnt: OCC.wrapper.gp.gp_Pnt

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_SetPoint(self, *args)


    def GetPoint(self, *args):
        """
        Returns reference point.

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        res = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_GetPoint(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetPointTextAttach(self, *args):
        """
        SetPointTextAttach(XCAFDimTolObjects_GeomToleranceObject self, gp_Pnt thePntText)

        Sets text position.

        :type thePntText: OCC.wrapper.gp.gp_Pnt

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_SetPointTextAttach(self, *args)


    def GetPointTextAttach(self, *args):
        """
        Returns the text position.

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        res = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_GetPointTextAttach(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasPlane(self, *args):
        """
        HasPlane(XCAFDimTolObjects_GeomToleranceObject self) -> Standard_Boolean

        Returns True if the object has annotation plane.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_HasPlane(self, *args)


    def HasPoint(self, *args):
        """
        HasPoint(XCAFDimTolObjects_GeomToleranceObject self) -> Standard_Boolean

        Returns True if reference point is specified.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_HasPoint(self, *args)


    def HasPointText(self, *args):
        """
        HasPointText(XCAFDimTolObjects_GeomToleranceObject self) -> Standard_Boolean

        Returns True if text position is specified.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_HasPointText(self, *args)


    def SetPresentation(self, *args):
        """
        SetPresentation(XCAFDimTolObjects_GeomToleranceObject self, TopoDS_Shape thePresentation, Handle_TCollection_HAsciiString thePresentationName)

        Set graphical presentation for object.

        :type thePresentation: OCC.wrapper.TopoDS.TopoDS_Shape
        :type thePresentationName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_SetPresentation(self, *args)


    def GetPresentation(self, *args):
        """
        GetPresentation(XCAFDimTolObjects_GeomToleranceObject self) -> TopoDS_Shape

        Returns graphical presentation of the object.

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_GetPresentation(self, *args)


    def GetPresentationName(self, *args):
        """
        GetPresentationName(XCAFDimTolObjects_GeomToleranceObject self) -> Handle_TCollection_HAsciiString

        Returns graphical presentation of the object.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_GetPresentationName(self, *args)


    def HasAffectedPlane(self, *args):
        """
        HasAffectedPlane(XCAFDimTolObjects_GeomToleranceObject self) -> bool

        :rtype: bool

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_HasAffectedPlane(self, *args)


    def GetAffectedPlaneType(self, *args):
        """
        GetAffectedPlaneType(XCAFDimTolObjects_GeomToleranceObject self) -> XCAFDimTolObjects_ToleranceZoneAffectedPlane

        :rtype: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_ToleranceZoneAffectedPlane

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_GetAffectedPlaneType(self, *args)


    def SetAffectedPlaneType(self, *args):
        """
        SetAffectedPlaneType(XCAFDimTolObjects_GeomToleranceObject self, XCAFDimTolObjects_ToleranceZoneAffectedPlane const theType)

        :type theType: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_ToleranceZoneAffectedPlane

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_SetAffectedPlaneType(self, *args)


    def SetAffectedPlane(self, *args):
        """
        SetAffectedPlane(XCAFDimTolObjects_GeomToleranceObject self, gp_Pln thePlane)
        SetAffectedPlane(XCAFDimTolObjects_GeomToleranceObject self, gp_Pln thePlane, XCAFDimTolObjects_ToleranceZoneAffectedPlane const theType)

        Sets affected plane.

        :type thePlane: OCC.wrapper.gp.gp_Pln
        :type theType: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_ToleranceZoneAffectedPlane

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_SetAffectedPlane(self, *args)


    def GetAffectedPlane(self, *args):
        """
        Returns affected plane.

        :rtype: OCC.wrapper.gp.gp_Pln

        """
        res = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_GetAffectedPlane(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XCAFDimTolObjects.delete_XCAFDimTolObjects_GeomToleranceObject
XCAFDimTolObjects_GeomToleranceObject_swigregister = _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_swigregister
XCAFDimTolObjects_GeomToleranceObject_swigregister(XCAFDimTolObjects_GeomToleranceObject)

def XCAFDimTolObjects_GeomToleranceObject_get_type_name(*args):
    """
    XCAFDimTolObjects_GeomToleranceObject_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_get_type_name(*args)

def XCAFDimTolObjects_GeomToleranceObject_get_type_descriptor(*args):
    """
    XCAFDimTolObjects_GeomToleranceObject_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObject_get_type_descriptor(*args)

class XCAFDimTolObjects_DimensionObject(Standard.Standard_Transient):
    """Access object to store dimension data"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XCAFDimTolObjects_DimensionObject
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XCAFDimTolObjects_DimensionObject(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XCAFDimTolObjects_DimensionObject self) -> XCAFDimTolObjects_DimensionObject
        __init__(XCAFDimTolObjects_DimensionObject self, Handle_XCAFDimTolObjects_DimensionObject theObj) -> XCAFDimTolObjects_DimensionObject

        :type theObj: OCC.wrapper.XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject

        """
        this = _XCAFDimTolObjects.new_XCAFDimTolObjects_DimensionObject(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def GetSemanticName(self, *args):
        """
        GetSemanticName(XCAFDimTolObjects_DimensionObject self) -> Handle_TCollection_HAsciiString

        Returns semantic name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_GetSemanticName(self, *args)


    def SetSemanticName(self, *args):
        """
        SetSemanticName(XCAFDimTolObjects_DimensionObject self, Handle_TCollection_HAsciiString theName)

        Sets semantic name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_SetSemanticName(self, *args)


    def SetQualifier(self, *args):
        """
        SetQualifier(XCAFDimTolObjects_DimensionObject self, XCAFDimTolObjects_DimensionQualifier const theQualifier)

        Sets dimension qualifier as min., max. or average.

        :type theQualifier: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DimensionQualifier

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_SetQualifier(self, *args)


    def GetQualifier(self, *args):
        """
        GetQualifier(XCAFDimTolObjects_DimensionObject self) -> XCAFDimTolObjects_DimensionQualifier

        Returns dimension qualifier.

        :rtype: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DimensionQualifier

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_GetQualifier(self, *args)


    def HasQualifier(self, *args):
        """
        HasQualifier(XCAFDimTolObjects_DimensionObject self) -> Standard_Boolean

        Returns True if the object has dimension qualifier.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_HasQualifier(self, *args)


    def SetType(self, *args):
        """
        SetType(XCAFDimTolObjects_DimensionObject self, XCAFDimTolObjects_DimensionType const theTyupe)

        Sets a specific type of dimension.

        :type theTyupe: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DimensionType

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_SetType(self, *args)


    def GetType(self, *args):
        """
        GetType(XCAFDimTolObjects_DimensionObject self) -> XCAFDimTolObjects_DimensionType

        Returns dimension type.

        :rtype: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DimensionType

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_GetType(self, *args)


    def GetValue(self, *args):
        """
        GetValue(XCAFDimTolObjects_DimensionObject self) -> Standard_Real

        Returns the main dimension value.
        It will be the middle value in case of range dimension.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_GetValue(self, *args)


    def GetValues(self, *args):
        """
        GetValues(XCAFDimTolObjects_DimensionObject self) -> Handle_TColStd_HArray1OfReal

        Returns raw array of dimension values

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_GetValues(self, *args)


    def SetValue(self, *args):
        """
        SetValue(XCAFDimTolObjects_DimensionObject self, Standard_Real const theValue)

        Sets the main dimension value.
        Overwrites previous values.

        :type theValue: float

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_SetValue(self, *args)


    def SetValues(self, *args):
        """
        SetValues(XCAFDimTolObjects_DimensionObject self, Handle_TColStd_HArray1OfReal theValue)

        Replaces current raw array of dimension values with theValues array.

        :type theValue: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_SetValues(self, *args)


    def IsDimWithRange(self, *args):
        """
        IsDimWithRange(XCAFDimTolObjects_DimensionObject self) -> Standard_Boolean

        Returns True if the dimension is of range kind.
        Dimension is of range kind if its values array contains two elements
        defining lower and upper bounds.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_IsDimWithRange(self, *args)


    def SetUpperBound(self, *args):
        """
        SetUpperBound(XCAFDimTolObjects_DimensionObject self, Standard_Real const theUpperBound)

        Sets the upper bound of the range dimension, otherwise
        resets it to an empty range with the specified upper bound.

        :type theUpperBound: float

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_SetUpperBound(self, *args)


    def SetLowerBound(self, *args):
        """
        SetLowerBound(XCAFDimTolObjects_DimensionObject self, Standard_Real const theLowerBound)

        Sets the lower bound of the range dimension, otherwise
        resets it to an empty range with the specified lower bound.

        :type theLowerBound: float

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_SetLowerBound(self, *args)


    def GetUpperBound(self, *args):
        """
        GetUpperBound(XCAFDimTolObjects_DimensionObject self) -> Standard_Real

        Returns the upper bound of the range dimension, otherwise - zero.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_GetUpperBound(self, *args)


    def GetLowerBound(self, *args):
        """
        GetLowerBound(XCAFDimTolObjects_DimensionObject self) -> Standard_Real

        Returns the lower bound of the range dimension, otherwise - zero.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_GetLowerBound(self, *args)


    def IsDimWithPlusMinusTolerance(self, *args):
        """
        IsDimWithPlusMinusTolerance(XCAFDimTolObjects_DimensionObject self) -> Standard_Boolean

        Returns True if the dimension is of +/- tolerance kind.
        Dimension is of +/- tolerance kind if its values array contains three elements
        defining the main value and the lower/upper tolerances.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_IsDimWithPlusMinusTolerance(self, *args)


    def SetUpperTolValue(self, *args):
        """
        SetUpperTolValue(XCAFDimTolObjects_DimensionObject self, Standard_Real const theUperTolValue) -> Standard_Boolean

        Sets the upper value of the toleranced dimension, otherwise
        resets a simple dimension to toleranced one with the specified lower/upper tolerances.
        Returns False in case of range dimension.

        :type theUperTolValue: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_SetUpperTolValue(self, *args)


    def SetLowerTolValue(self, *args):
        """
        SetLowerTolValue(XCAFDimTolObjects_DimensionObject self, Standard_Real const theLowerTolValue) -> Standard_Boolean

        Sets the lower value of the toleranced dimension, otherwise
        resets a simple dimension to toleranced one with the specified lower/upper tolerances.
        Returns False in case of range dimension.

        :type theLowerTolValue: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_SetLowerTolValue(self, *args)


    def GetUpperTolValue(self, *args):
        """
        GetUpperTolValue(XCAFDimTolObjects_DimensionObject self) -> Standard_Real

        Returns the lower value of the toleranced dimension, otherwise - zero.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_GetUpperTolValue(self, *args)


    def GetLowerTolValue(self, *args):
        """
        GetLowerTolValue(XCAFDimTolObjects_DimensionObject self) -> Standard_Real

        Returns the upper value of the toleranced dimension, otherwise - zero.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_GetLowerTolValue(self, *args)


    def IsDimWithClassOfTolerance(self, *args):
        """
        IsDimWithClassOfTolerance(XCAFDimTolObjects_DimensionObject self) -> Standard_Boolean

        Returns True if the form variance was set to not XCAFDimTolObjects_DimensionFormVariance_None value.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_IsDimWithClassOfTolerance(self, *args)


    def SetClassOfTolerance(self, *args):
        """
        SetClassOfTolerance(XCAFDimTolObjects_DimensionObject self, Standard_Boolean const theHole, XCAFDimTolObjects_DimensionFormVariance const theFormVariance, XCAFDimTolObjects_DimensionGrade const theGrade)

        Sets tolerance class of the dimension.
        \param theHole - True if the tolerance applies to an internal feature
        \param theFormVariance - represents the fundamental deviation or "position letter"
        of the ISO 286 limits-and-fits tolerance classification.
        \param theGrade - represents the quality or the accuracy grade of a tolerance.

        :type theHole: bool
        :type theFormVariance: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DimensionFormVariance
        :type theGrade: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DimensionGrade

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_SetClassOfTolerance(self, *args)


    def GetClassOfTolerance(self, *args):
        """
        GetClassOfTolerance(XCAFDimTolObjects_DimensionObject self) -> Standard_Boolean

        Retrieves tolerance class parameters of the dimension.
        Returns True if the dimension is toleranced.

        :type theHole: bool
        :type theFormVariance: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DimensionFormVariance
        :type theGrade: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DimensionGrade
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_GetClassOfTolerance(self, *args)


    def SetNbOfDecimalPlaces(self, *args):
        """
        SetNbOfDecimalPlaces(XCAFDimTolObjects_DimensionObject self, Standard_Integer const theL, Standard_Integer const theR)

        Sets the number of places to the left and right of the decimal point respectively.

        :type theL: int
        :type theR: int

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_SetNbOfDecimalPlaces(self, *args)


    def GetNbOfDecimalPlaces(self, *args):
        """
        GetNbOfDecimalPlaces(XCAFDimTolObjects_DimensionObject self)

        Returns the number of places to the left and right of the decimal point respectively.

        :type theL: int
        :type theR: int

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_GetNbOfDecimalPlaces(self, *args)


    def GetModifiers(self, *args):
        """
        GetModifiers(XCAFDimTolObjects_DimensionObject self) -> NCollection_Sequence_XCAFDimTolObjects_DimensionModif

        Returns a sequence of modifiers of the dimension.

        :rtype: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DimensionModifiersSequence

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_GetModifiers(self, *args)


    def SetModifiers(self, *args):
        """
        SetModifiers(XCAFDimTolObjects_DimensionObject self, NCollection_Sequence_XCAFDimTolObjects_DimensionModif theModifiers)

        Sets new sequence of dimension modifiers.

        :type theModifiers: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DimensionModifiersSequence

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_SetModifiers(self, *args)


    def AddModifier(self, *args):
        """
        AddModifier(XCAFDimTolObjects_DimensionObject self, XCAFDimTolObjects_DimensionModif const theModifier)

        Adds a modifier to the dimension sequence of modifiers.

        :type theModifier: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DimensionModif

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_AddModifier(self, *args)


    def GetPath(self, *args):
        """
        GetPath(XCAFDimTolObjects_DimensionObject self) -> TopoDS_Edge

        Returns a 'curve' along which the dimension is measured.

        :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_GetPath(self, *args)


    def SetPath(self, *args):
        """
        SetPath(XCAFDimTolObjects_DimensionObject self, TopoDS_Edge thePath)

        Sets a 'curve' along which the dimension is measured.

        :type thePath: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_SetPath(self, *args)


    def GetDirection(self, *args):
        """
        GetDirection(XCAFDimTolObjects_DimensionObject self, gp_Dir theDir) -> Standard_Boolean

        Returns the orientation of the dimension in annotation plane.

        :type theDir: OCC.wrapper.gp.gp_Dir
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_GetDirection(self, *args)


    def SetDirection(self, *args):
        """
        SetDirection(XCAFDimTolObjects_DimensionObject self, gp_Dir theDir) -> Standard_Boolean

        Sets an orientation of the dimension in annotation plane.

        :type theDir: OCC.wrapper.gp.gp_Dir
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_SetDirection(self, *args)


    def SetPointTextAttach(self, *args):
        """
        SetPointTextAttach(XCAFDimTolObjects_DimensionObject self, gp_Pnt thePntText)

        Sets position of the dimension text.

        :type thePntText: OCC.wrapper.gp.gp_Pnt

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_SetPointTextAttach(self, *args)


    def GetPointTextAttach(self, *args):
        """
        Returns position of the dimension text.

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        res = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_GetPointTextAttach(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasTextPoint(self, *args):
        """
        HasTextPoint(XCAFDimTolObjects_DimensionObject self) -> Standard_Boolean

        Returns True if the position of dimension text is specified.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_HasTextPoint(self, *args)


    def SetPlane(self, *args):
        """
        SetPlane(XCAFDimTolObjects_DimensionObject self, gp_Ax2 thePlane)

        Sets annotation plane.

        :type thePlane: OCC.wrapper.gp.gp_Ax2

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_SetPlane(self, *args)


    def GetPlane(self, *args):
        """
        Returns annotation plane.

        :rtype: OCC.wrapper.gp.gp_Ax2

        """
        res = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_GetPlane(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasPlane(self, *args):
        """
        HasPlane(XCAFDimTolObjects_DimensionObject self) -> Standard_Boolean

        Returns True if the object has annotation plane.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_HasPlane(self, *args)


    def HasPoint(self, *args):
        """
        HasPoint(XCAFDimTolObjects_DimensionObject self) -> Standard_Boolean

        Returns true, if connection point exists (for dimesional_size),
        if connection point for the first shape exists (for dimensional_location).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_HasPoint(self, *args)


    def HasPoint2(self, *args):
        """
        HasPoint2(XCAFDimTolObjects_DimensionObject self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_HasPoint2(self, *args)


    def SetPoint(self, *args):
        """
        SetPoint(XCAFDimTolObjects_DimensionObject self, gp_Pnt thePnt)

        Set connection point (for dimesional_size),
        Set connection point for the first shape (for dimensional_location).

        :type thePnt: OCC.wrapper.gp.gp_Pnt

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_SetPoint(self, *args)


    def SetPoint2(self, *args):
        """
        SetPoint2(XCAFDimTolObjects_DimensionObject self, gp_Pnt thePnt)

        :type thePnt: OCC.wrapper.gp.gp_Pnt

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_SetPoint2(self, *args)


    def GetPoint(self, *args):
        """
        GetPoint(XCAFDimTolObjects_DimensionObject self) -> gp_Pnt

        Get connection point (for dimesional_size),
        Get connection point for the first shape (for dimensional_location).

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_GetPoint(self, *args)


    def GetPoint2(self, *args):
        """
        GetPoint2(XCAFDimTolObjects_DimensionObject self) -> gp_Pnt

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_GetPoint2(self, *args)


    def SetPresentation(self, *args):
        """
        SetPresentation(XCAFDimTolObjects_DimensionObject self, TopoDS_Shape thePresentation, Handle_TCollection_HAsciiString thePresentationName)

        Set graphical presentation for the object.

        :type thePresentation: OCC.wrapper.TopoDS.TopoDS_Shape
        :type thePresentationName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_SetPresentation(self, *args)


    def GetPresentation(self, *args):
        """
        GetPresentation(XCAFDimTolObjects_DimensionObject self) -> TopoDS_Shape

        Returns graphical presentation of the object.

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_GetPresentation(self, *args)


    def GetPresentationName(self, *args):
        """
        GetPresentationName(XCAFDimTolObjects_DimensionObject self) -> Handle_TCollection_HAsciiString

        Returns graphical presentation of the object

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_GetPresentationName(self, *args)


    def HasDescriptions(self, *args):
        """
        HasDescriptions(XCAFDimTolObjects_DimensionObject self) -> Standard_Boolean

        Returns true, if the object has descriptions.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_HasDescriptions(self, *args)


    def NbDescriptions(self, *args):
        """
        NbDescriptions(XCAFDimTolObjects_DimensionObject self) -> Standard_Integer

        Returns number of descriptions.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_NbDescriptions(self, *args)


    def GetDescription(self, *args):
        """
        GetDescription(XCAFDimTolObjects_DimensionObject self, Standard_Integer const theNumber) -> Handle_TCollection_HAsciiString

        Returns description with the given number.

        :type theNumber: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_GetDescription(self, *args)


    def GetDescriptionName(self, *args):
        """
        GetDescriptionName(XCAFDimTolObjects_DimensionObject self, Standard_Integer const theNumber) -> Handle_TCollection_HAsciiString

        Returns name of description with the given number.

        :type theNumber: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_GetDescriptionName(self, *args)


    def RemoveDescription(self, *args):
        """
        RemoveDescription(XCAFDimTolObjects_DimensionObject self, Standard_Integer const theNumber)

        Remove description with the given number.

        :type theNumber: int

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_RemoveDescription(self, *args)


    def AddDescription(self, *args):
        """
        AddDescription(XCAFDimTolObjects_DimensionObject self, Handle_TCollection_HAsciiString theDescription, Handle_TCollection_HAsciiString theName)

        Add new description.

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_AddDescription(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XCAFDimTolObjects.delete_XCAFDimTolObjects_DimensionObject
XCAFDimTolObjects_DimensionObject_swigregister = _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_swigregister
XCAFDimTolObjects_DimensionObject_swigregister(XCAFDimTolObjects_DimensionObject)

def XCAFDimTolObjects_DimensionObject_get_type_name(*args):
    """
    XCAFDimTolObjects_DimensionObject_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_get_type_name(*args)

def XCAFDimTolObjects_DimensionObject_get_type_descriptor(*args):
    """
    XCAFDimTolObjects_DimensionObject_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XCAFDimTolObjects.XCAFDimTolObjects_DimensionObject_get_type_descriptor(*args)

class XCAFDimTolObjects_DatumObject(Standard.Standard_Transient):
    """Access object to store datum"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XCAFDimTolObjects_DatumObject
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XCAFDimTolObjects_DatumObject(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XCAFDimTolObjects_DatumObject self) -> XCAFDimTolObjects_DatumObject
        __init__(XCAFDimTolObjects_DatumObject self, Handle_XCAFDimTolObjects_DatumObject theObj) -> XCAFDimTolObjects_DatumObject

        :type theObj: OCC.wrapper.XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject

        """
        this = _XCAFDimTolObjects.new_XCAFDimTolObjects_DatumObject(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def GetSemanticName(self, *args):
        """
        GetSemanticName(XCAFDimTolObjects_DatumObject self) -> Handle_TCollection_HAsciiString

        Returns semantic name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_GetSemanticName(self, *args)


    def SetSemanticName(self, *args):
        """
        SetSemanticName(XCAFDimTolObjects_DatumObject self, Handle_TCollection_HAsciiString theName)

        Sets semantic name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_SetSemanticName(self, *args)


    def GetName(self, *args):
        """
        GetName(XCAFDimTolObjects_DatumObject self) -> Handle_TCollection_HAsciiString

        Returns datum name.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_GetName(self, *args)


    def SetName(self, *args):
        """
        SetName(XCAFDimTolObjects_DatumObject self, Handle_TCollection_HAsciiString theTag)

        Sets datum name.

        :type theTag: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_SetName(self, *args)


    def GetModifiers(self, *args):
        """
        GetModifiers(XCAFDimTolObjects_DatumObject self) -> NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif

        Returns a sequence of modifiers of the datum.

        :rtype: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DatumModifiersSequence

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_GetModifiers(self, *args)


    def SetModifiers(self, *args):
        """
        SetModifiers(XCAFDimTolObjects_DatumObject self, NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif theModifiers)

        Sets new sequence of datum modifiers.

        :type theModifiers: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DatumModifiersSequence

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_SetModifiers(self, *args)


    def GetModifierWithValue(self, *args):
        """
        GetModifierWithValue(XCAFDimTolObjects_DatumObject self)

        Retrieves datum modifier with value.

        :type theModifier: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DatumModifWithValue
        :type theValue: float

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_GetModifierWithValue(self, *args)


    def SetModifierWithValue(self, *args):
        """
        SetModifierWithValue(XCAFDimTolObjects_DatumObject self, XCAFDimTolObjects_DatumModifWithValue const theModifier, Standard_Real const theValue)

        Sets datum modifier with value.

        :type theModifier: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DatumModifWithValue
        :type theValue: float

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_SetModifierWithValue(self, *args)


    def AddModifier(self, *args):
        """
        AddModifier(XCAFDimTolObjects_DatumObject self, XCAFDimTolObjects_DatumSingleModif const theModifier)

        Adds a modifier to the datum sequence of modifiers.

        :type theModifier: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DatumSingleModif

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_AddModifier(self, *args)


    def GetDatumTarget(self, *args):
        """
        GetDatumTarget(XCAFDimTolObjects_DatumObject self) -> TopoDS_Shape

        Returns datum target shape.

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_GetDatumTarget(self, *args)


    def SetDatumTarget(self, *args):
        """
        SetDatumTarget(XCAFDimTolObjects_DatumObject self, TopoDS_Shape theShape)

        Sets datum target shape.

        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_SetDatumTarget(self, *args)


    def GetPosition(self, *args):
        """
        GetPosition(XCAFDimTolObjects_DatumObject self) -> Standard_Integer

        Returns datum position in the related geometric tolerance object.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_GetPosition(self, *args)


    def SetPosition(self, *args):
        """
        SetPosition(XCAFDimTolObjects_DatumObject self, Standard_Integer const thePosition)

        Sets datum position in the related geometric tolerance object.

        :type thePosition: int

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_SetPosition(self, *args)


    def IsDatumTarget(self, *args):
        """
        IsDatumTarget(XCAFDimTolObjects_DatumObject self) -> Standard_Boolean
        IsDatumTarget(XCAFDimTolObjects_DatumObject self, Standard_Boolean const theIsDT)

        Sets or drops the datum target indicator.

        :type theIsDT: bool

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_IsDatumTarget(self, *args)


    def GetDatumTargetType(self, *args):
        """
        GetDatumTargetType(XCAFDimTolObjects_DatumObject self) -> XCAFDimTolObjects_DatumTargetType

        Returns datum target type

        :rtype: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DatumTargetType

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_GetDatumTargetType(self, *args)


    def SetDatumTargetType(self, *args):
        """
        SetDatumTargetType(XCAFDimTolObjects_DatumObject self, XCAFDimTolObjects_DatumTargetType const theType)

        Sets datum target to point, line, rectangle, circle or area type.

        :type theType: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DatumTargetType

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_SetDatumTargetType(self, *args)


    def GetDatumTargetAxis(self, *args):
        """
        GetDatumTargetAxis(XCAFDimTolObjects_DatumObject self) -> gp_Ax2

        Returns datum target axis.
        The Z axis of the datum placement denotes the normal of the surface 
        pointing away from the material. 

        :rtype: OCC.wrapper.gp.gp_Ax2

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_GetDatumTargetAxis(self, *args)


    def SetDatumTargetAxis(self, *args):
        """
        SetDatumTargetAxis(XCAFDimTolObjects_DatumObject self, gp_Ax2 theAxis)

        Sets datum target axis.

        :type theAxis: OCC.wrapper.gp.gp_Ax2

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_SetDatumTargetAxis(self, *args)


    def GetDatumTargetLength(self, *args):
        """
        GetDatumTargetLength(XCAFDimTolObjects_DatumObject self) -> Standard_Real

        Returns datum target length for line and rectangle types.
        The length along the X axis of the datum placement.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_GetDatumTargetLength(self, *args)


    def SetDatumTargetLength(self, *args):
        """
        SetDatumTargetLength(XCAFDimTolObjects_DatumObject self, Standard_Real const theLength)

        Sets datum target length.

        :type theLength: float

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_SetDatumTargetLength(self, *args)


    def GetDatumTargetWidth(self, *args):
        """
        GetDatumTargetWidth(XCAFDimTolObjects_DatumObject self) -> Standard_Real

        Returns datum target width for rectangle type.
        The width along the derived Y axis, with the placement itself positioned
        at the centre of the rectangle.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_GetDatumTargetWidth(self, *args)


    def SetDatumTargetWidth(self, *args):
        """
        SetDatumTargetWidth(XCAFDimTolObjects_DatumObject self, Standard_Real const theWidth)

        Sets datum target width.

        :type theWidth: float

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_SetDatumTargetWidth(self, *args)


    def GetDatumTargetNumber(self, *args):
        """
        GetDatumTargetNumber(XCAFDimTolObjects_DatumObject self) -> Standard_Integer

        Returns datum target number.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_GetDatumTargetNumber(self, *args)


    def SetDatumTargetNumber(self, *args):
        """
        SetDatumTargetNumber(XCAFDimTolObjects_DatumObject self, Standard_Integer const theNumber)

        Sets datum target number.

        :type theNumber: int

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_SetDatumTargetNumber(self, *args)


    def SetPlane(self, *args):
        """
        SetPlane(XCAFDimTolObjects_DatumObject self, gp_Ax2 thePlane)

        Sets annotation plane.

        :type thePlane: OCC.wrapper.gp.gp_Ax2

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_SetPlane(self, *args)


    def GetPlane(self, *args):
        """
        Returns annotation plane.

        :rtype: OCC.wrapper.gp.gp_Ax2

        """
        res = _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_GetPlane(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetPoint(self, *args):
        """
        SetPoint(XCAFDimTolObjects_DatumObject self, gp_Pnt thePnt)

        Sets a point on the datum target shape.

        :type thePnt: OCC.wrapper.gp.gp_Pnt

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_SetPoint(self, *args)


    def GetPoint(self, *args):
        """
        Gets point on the datum shape.

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        res = _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_GetPoint(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetPointTextAttach(self, *args):
        """
        SetPointTextAttach(XCAFDimTolObjects_DatumObject self, gp_Pnt thePntText)

        Sets a position of the datum text.

        :type thePntText: OCC.wrapper.gp.gp_Pnt

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_SetPointTextAttach(self, *args)


    def GetPointTextAttach(self, *args):
        """
        Gets datum text position.

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        res = _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_GetPointTextAttach(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasPlane(self, *args):
        """
        HasPlane(XCAFDimTolObjects_DatumObject self) -> Standard_Boolean

        Returns True if the datum has annotation plane.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_HasPlane(self, *args)


    def HasPoint(self, *args):
        """
        HasPoint(XCAFDimTolObjects_DatumObject self) -> Standard_Boolean

        Returns True if point on the datum target is specified.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_HasPoint(self, *args)


    def HasPointText(self, *args):
        """
        HasPointText(XCAFDimTolObjects_DatumObject self) -> Standard_Boolean

        Returns True if the datum text position is specified.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_HasPointText(self, *args)


    def SetPresentation(self, *args):
        """
        SetPresentation(XCAFDimTolObjects_DatumObject self, TopoDS_Shape thePresentation, Handle_TCollection_HAsciiString thePresentationName)

        Set graphical presentation for object.

        :type thePresentation: OCC.wrapper.TopoDS.TopoDS_Shape
        :type thePresentationName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_SetPresentation(self, *args)


    def GetPresentation(self, *args):
        """
        GetPresentation(XCAFDimTolObjects_DatumObject self) -> TopoDS_Shape

        Returns graphical presentation of the object.

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_GetPresentation(self, *args)


    def GetPresentationName(self, *args):
        """
        GetPresentationName(XCAFDimTolObjects_DatumObject self) -> Handle_TCollection_HAsciiString

        Returns graphical presentation of the object.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_GetPresentationName(self, *args)


    def HasDatumTargetParams(self, *args):
        """
        HasDatumTargetParams(XCAFDimTolObjects_DatumObject self) -> Standard_Boolean

        Returns True if the datum has valid parameters for datum target (width, length, circle radius etc)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_HasDatumTargetParams(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XCAFDimTolObjects.delete_XCAFDimTolObjects_DatumObject
XCAFDimTolObjects_DatumObject_swigregister = _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_swigregister
XCAFDimTolObjects_DatumObject_swigregister(XCAFDimTolObjects_DatumObject)

def XCAFDimTolObjects_DatumObject_get_type_name(*args):
    """
    XCAFDimTolObjects_DatumObject_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_get_type_name(*args)

def XCAFDimTolObjects_DatumObject_get_type_descriptor(*args):
    """
    XCAFDimTolObjects_DatumObject_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XCAFDimTolObjects.XCAFDimTolObjects_DatumObject_get_type_descriptor(*args)

class Handle_XCAFDimTolObjects_DatumObject(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XCAFDimTolObjects_DatumObject self)

        Nullify the handle


        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XCAFDimTolObjects_DatumObject self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XCAFDimTolObjects_DatumObject self, XCAFDimTolObjects_DatumObject thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XCAFDimTolObjects_DatumObject self, Handle_XCAFDimTolObjects_DatumObject theHandle) -> Handle_XCAFDimTolObjects_DatumObject
        assign(Handle_XCAFDimTolObjects_DatumObject self, XCAFDimTolObjects_DatumObject thePtr) -> Handle_XCAFDimTolObjects_DatumObject
        assign(Handle_XCAFDimTolObjects_DatumObject self, Handle_XCAFDimTolObjects_DatumObject theHandle) -> Handle_XCAFDimTolObjects_DatumObject

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XCAFDimTolObjects_DatumObject self) -> XCAFDimTolObjects_DatumObject

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XCAFDimTolObjects_DatumObject self) -> XCAFDimTolObjects_DatumObject

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XCAFDimTolObjects_DatumObject self) -> XCAFDimTolObjects_DatumObject

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject___ref__(self, *args)


    def __hash__(self):
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XCAFDimTolObjects.new_Handle_XCAFDimTolObjects_DatumObject(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_DownCast)
    __swig_destroy__ = _XCAFDimTolObjects.delete_Handle_XCAFDimTolObjects_DatumObject

    def GetSemanticName(self, *args):
        """
        GetSemanticName(Handle_XCAFDimTolObjects_DatumObject self) -> Handle_TCollection_HAsciiString

        Returns semantic name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_GetSemanticName(self, *args)


    def SetSemanticName(self, *args):
        """
        SetSemanticName(Handle_XCAFDimTolObjects_DatumObject self, Handle_TCollection_HAsciiString theName)

        Sets semantic name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_SetSemanticName(self, *args)


    def GetName(self, *args):
        """
        GetName(Handle_XCAFDimTolObjects_DatumObject self) -> Handle_TCollection_HAsciiString

        Returns datum name.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_GetName(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_XCAFDimTolObjects_DatumObject self, Handle_TCollection_HAsciiString theTag)

        Sets datum name.

        :type theTag: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_SetName(self, *args)


    def GetModifiers(self, *args):
        """
        GetModifiers(Handle_XCAFDimTolObjects_DatumObject self) -> NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif

        Returns a sequence of modifiers of the datum.

        :rtype: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DatumModifiersSequence

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_GetModifiers(self, *args)


    def SetModifiers(self, *args):
        """
        SetModifiers(Handle_XCAFDimTolObjects_DatumObject self, NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif theModifiers)

        Sets new sequence of datum modifiers.

        :type theModifiers: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DatumModifiersSequence

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_SetModifiers(self, *args)


    def GetModifierWithValue(self, *args):
        """
        GetModifierWithValue(Handle_XCAFDimTolObjects_DatumObject self)

        Retrieves datum modifier with value.

        :type theModifier: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DatumModifWithValue
        :type theValue: float

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_GetModifierWithValue(self, *args)


    def SetModifierWithValue(self, *args):
        """
        SetModifierWithValue(Handle_XCAFDimTolObjects_DatumObject self, XCAFDimTolObjects_DatumModifWithValue const theModifier, Standard_Real const theValue)

        Sets datum modifier with value.

        :type theModifier: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DatumModifWithValue
        :type theValue: float

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_SetModifierWithValue(self, *args)


    def AddModifier(self, *args):
        """
        AddModifier(Handle_XCAFDimTolObjects_DatumObject self, XCAFDimTolObjects_DatumSingleModif const theModifier)

        Adds a modifier to the datum sequence of modifiers.

        :type theModifier: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DatumSingleModif

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_AddModifier(self, *args)


    def GetDatumTarget(self, *args):
        """
        GetDatumTarget(Handle_XCAFDimTolObjects_DatumObject self) -> TopoDS_Shape

        Returns datum target shape.

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_GetDatumTarget(self, *args)


    def SetDatumTarget(self, *args):
        """
        SetDatumTarget(Handle_XCAFDimTolObjects_DatumObject self, TopoDS_Shape theShape)

        Sets datum target shape.

        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_SetDatumTarget(self, *args)


    def GetPosition(self, *args):
        """
        GetPosition(Handle_XCAFDimTolObjects_DatumObject self) -> Standard_Integer

        Returns datum position in the related geometric tolerance object.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_GetPosition(self, *args)


    def SetPosition(self, *args):
        """
        SetPosition(Handle_XCAFDimTolObjects_DatumObject self, Standard_Integer const thePosition)

        Sets datum position in the related geometric tolerance object.

        :type thePosition: int

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_SetPosition(self, *args)


    def IsDatumTarget(self, *args):
        """
        IsDatumTarget(Handle_XCAFDimTolObjects_DatumObject self) -> Standard_Boolean
        IsDatumTarget(Handle_XCAFDimTolObjects_DatumObject self, Standard_Boolean const theIsDT)

        Sets or drops the datum target indicator.

        :type theIsDT: bool

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_IsDatumTarget(self, *args)


    def GetDatumTargetType(self, *args):
        """
        GetDatumTargetType(Handle_XCAFDimTolObjects_DatumObject self) -> XCAFDimTolObjects_DatumTargetType

        Returns datum target type

        :rtype: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DatumTargetType

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_GetDatumTargetType(self, *args)


    def SetDatumTargetType(self, *args):
        """
        SetDatumTargetType(Handle_XCAFDimTolObjects_DatumObject self, XCAFDimTolObjects_DatumTargetType const theType)

        Sets datum target to point, line, rectangle, circle or area type.

        :type theType: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DatumTargetType

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_SetDatumTargetType(self, *args)


    def GetDatumTargetAxis(self, *args):
        """
        GetDatumTargetAxis(Handle_XCAFDimTolObjects_DatumObject self) -> gp_Ax2

        Returns datum target axis.
        The Z axis of the datum placement denotes the normal of the surface 
        pointing away from the material. 

        :rtype: OCC.wrapper.gp.gp_Ax2

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_GetDatumTargetAxis(self, *args)


    def SetDatumTargetAxis(self, *args):
        """
        SetDatumTargetAxis(Handle_XCAFDimTolObjects_DatumObject self, gp_Ax2 theAxis)

        Sets datum target axis.

        :type theAxis: OCC.wrapper.gp.gp_Ax2

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_SetDatumTargetAxis(self, *args)


    def GetDatumTargetLength(self, *args):
        """
        GetDatumTargetLength(Handle_XCAFDimTolObjects_DatumObject self) -> Standard_Real

        Returns datum target length for line and rectangle types.
        The length along the X axis of the datum placement.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_GetDatumTargetLength(self, *args)


    def SetDatumTargetLength(self, *args):
        """
        SetDatumTargetLength(Handle_XCAFDimTolObjects_DatumObject self, Standard_Real const theLength)

        Sets datum target length.

        :type theLength: float

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_SetDatumTargetLength(self, *args)


    def GetDatumTargetWidth(self, *args):
        """
        GetDatumTargetWidth(Handle_XCAFDimTolObjects_DatumObject self) -> Standard_Real

        Returns datum target width for rectangle type.
        The width along the derived Y axis, with the placement itself positioned
        at the centre of the rectangle.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_GetDatumTargetWidth(self, *args)


    def SetDatumTargetWidth(self, *args):
        """
        SetDatumTargetWidth(Handle_XCAFDimTolObjects_DatumObject self, Standard_Real const theWidth)

        Sets datum target width.

        :type theWidth: float

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_SetDatumTargetWidth(self, *args)


    def GetDatumTargetNumber(self, *args):
        """
        GetDatumTargetNumber(Handle_XCAFDimTolObjects_DatumObject self) -> Standard_Integer

        Returns datum target number.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_GetDatumTargetNumber(self, *args)


    def SetDatumTargetNumber(self, *args):
        """
        SetDatumTargetNumber(Handle_XCAFDimTolObjects_DatumObject self, Standard_Integer const theNumber)

        Sets datum target number.

        :type theNumber: int

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_SetDatumTargetNumber(self, *args)


    def SetPlane(self, *args):
        """
        SetPlane(Handle_XCAFDimTolObjects_DatumObject self, gp_Ax2 thePlane)

        Sets annotation plane.

        :type thePlane: OCC.wrapper.gp.gp_Ax2

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_SetPlane(self, *args)


    def GetPlane(self, *args):
        """
        Returns annotation plane.

        :rtype: OCC.wrapper.gp.gp_Ax2

        """
        res = _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_GetPlane(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetPoint(self, *args):
        """
        SetPoint(Handle_XCAFDimTolObjects_DatumObject self, gp_Pnt thePnt)

        Sets a point on the datum target shape.

        :type thePnt: OCC.wrapper.gp.gp_Pnt

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_SetPoint(self, *args)


    def GetPoint(self, *args):
        """
        Gets point on the datum shape.

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        res = _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_GetPoint(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetPointTextAttach(self, *args):
        """
        SetPointTextAttach(Handle_XCAFDimTolObjects_DatumObject self, gp_Pnt thePntText)

        Sets a position of the datum text.

        :type thePntText: OCC.wrapper.gp.gp_Pnt

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_SetPointTextAttach(self, *args)


    def GetPointTextAttach(self, *args):
        """
        Gets datum text position.

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        res = _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_GetPointTextAttach(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasPlane(self, *args):
        """
        HasPlane(Handle_XCAFDimTolObjects_DatumObject self) -> Standard_Boolean

        Returns True if the datum has annotation plane.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_HasPlane(self, *args)


    def HasPoint(self, *args):
        """
        HasPoint(Handle_XCAFDimTolObjects_DatumObject self) -> Standard_Boolean

        Returns True if point on the datum target is specified.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_HasPoint(self, *args)


    def HasPointText(self, *args):
        """
        HasPointText(Handle_XCAFDimTolObjects_DatumObject self) -> Standard_Boolean

        Returns True if the datum text position is specified.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_HasPointText(self, *args)


    def SetPresentation(self, *args):
        """
        SetPresentation(Handle_XCAFDimTolObjects_DatumObject self, TopoDS_Shape thePresentation, Handle_TCollection_HAsciiString thePresentationName)

        Set graphical presentation for object.

        :type thePresentation: OCC.wrapper.TopoDS.TopoDS_Shape
        :type thePresentationName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_SetPresentation(self, *args)


    def GetPresentation(self, *args):
        """
        GetPresentation(Handle_XCAFDimTolObjects_DatumObject self) -> TopoDS_Shape

        Returns graphical presentation of the object.

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_GetPresentation(self, *args)


    def GetPresentationName(self, *args):
        """
        GetPresentationName(Handle_XCAFDimTolObjects_DatumObject self) -> Handle_TCollection_HAsciiString

        Returns graphical presentation of the object.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_GetPresentationName(self, *args)


    def HasDatumTargetParams(self, *args):
        """
        HasDatumTargetParams(Handle_XCAFDimTolObjects_DatumObject self) -> Standard_Boolean

        Returns True if the datum has valid parameters for datum target (width, length, circle radius etc)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_HasDatumTargetParams(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XCAFDimTolObjects_DatumObject self) -> char const *

        :rtype: const char *

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XCAFDimTolObjects_DatumObject self)

        Memory deallocator for transient classes


        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XCAFDimTolObjects_DatumObject self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XCAFDimTolObjects_DatumObject self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XCAFDimTolObjects_DatumObject self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XCAFDimTolObjects_DatumObject self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XCAFDimTolObjects_DatumObject self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XCAFDimTolObjects_DatumObject self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XCAFDimTolObjects_DatumObject self)

        Increments the reference counter of this object


        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XCAFDimTolObjects_DatumObject self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_DecrementRefCounter(self, *args)

Handle_XCAFDimTolObjects_DatumObject_swigregister = _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_swigregister
Handle_XCAFDimTolObjects_DatumObject_swigregister(Handle_XCAFDimTolObjects_DatumObject)

def Handle_XCAFDimTolObjects_DatumObject_DownCast(thing):
    return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_DownCast(thing)
Handle_XCAFDimTolObjects_DatumObject_DownCast = _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject_DownCast

class NCollection_Sequence_XCAFDimTolObjects_DimensionModif(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_XCAFDimTolObjects_DimensionModif self) -> NCollection_Sequence< XCAFDimTolObjects_DimensionModif >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DimensionModif_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_XCAFDimTolObjects_DimensionModif self) -> NCollection_Sequence< XCAFDimTolObjects_DimensionModif >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DimensionModif_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_XCAFDimTolObjects_DimensionModif self) -> NCollection_Sequence< XCAFDimTolObjects_DimensionModif >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DimensionModif_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_XCAFDimTolObjects_DimensionModif self) -> NCollection_Sequence< XCAFDimTolObjects_DimensionModif >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DimensionModif_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _XCAFDimTolObjects.new_NCollection_Sequence_XCAFDimTolObjects_DimensionModif(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_XCAFDimTolObjects_DimensionModif self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DimensionModif_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_XCAFDimTolObjects_DimensionModif self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DimensionModif_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_XCAFDimTolObjects_DimensionModif self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DimensionModif_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_XCAFDimTolObjects_DimensionModif self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DimensionModif_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_XCAFDimTolObjects_DimensionModif self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DimensionModif_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_XCAFDimTolObjects_DimensionModif self)

        Reverse sequence


        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DimensionModif_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_XCAFDimTolObjects_DimensionModif self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DimensionModif_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DimensionModif_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_XCAFDimTolObjects_DimensionModif self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DimensionModif_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_XCAFDimTolObjects_DimensionModif self, NCollection_Sequence_XCAFDimTolObjects_DimensionModif theOther) -> NCollection_Sequence_XCAFDimTolObjects_DimensionModif

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DimensionModif_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_XCAFDimTolObjects_DimensionModif self, NCollection_Sequence_XCAFDimTolObjects_DimensionModif theOther) -> NCollection_Sequence_XCAFDimTolObjects_DimensionModif

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DimensionModif_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_XCAFDimTolObjects_DimensionModif self, NCollection_Sequence< XCAFDimTolObjects_DimensionModif >::Iterator & thePosition)
        Remove(NCollection_Sequence_XCAFDimTolObjects_DimensionModif self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_XCAFDimTolObjects_DimensionModif self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DimensionModif_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_XCAFDimTolObjects_DimensionModif self, XCAFDimTolObjects_DimensionModif const & theItem)
        Append(NCollection_Sequence_XCAFDimTolObjects_DimensionModif self, NCollection_Sequence_XCAFDimTolObjects_DimensionModif theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DimensionModif_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_XCAFDimTolObjects_DimensionModif self, XCAFDimTolObjects_DimensionModif const & theItem)
        Prepend(NCollection_Sequence_XCAFDimTolObjects_DimensionModif self, NCollection_Sequence_XCAFDimTolObjects_DimensionModif theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DimensionModif_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_XCAFDimTolObjects_DimensionModif self, Standard_Integer const theIndex, XCAFDimTolObjects_DimensionModif const & theItem)
        InsertBefore(NCollection_Sequence_XCAFDimTolObjects_DimensionModif self, Standard_Integer const theIndex, NCollection_Sequence_XCAFDimTolObjects_DimensionModif theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DimensionModif_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_XCAFDimTolObjects_DimensionModif self, NCollection_Sequence< XCAFDimTolObjects_DimensionModif >::Iterator & thePosition, XCAFDimTolObjects_DimensionModif const & theItem)
        InsertAfter(NCollection_Sequence_XCAFDimTolObjects_DimensionModif self, Standard_Integer const theIndex, NCollection_Sequence_XCAFDimTolObjects_DimensionModif theSeq)
        InsertAfter(NCollection_Sequence_XCAFDimTolObjects_DimensionModif self, Standard_Integer const theIndex, XCAFDimTolObjects_DimensionModif const & theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DimensionModif_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_XCAFDimTolObjects_DimensionModif self, Standard_Integer const theIndex, NCollection_Sequence_XCAFDimTolObjects_DimensionModif theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DimensionModif_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DimensionModif_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_XCAFDimTolObjects_DimensionModif self) -> XCAFDimTolObjects_DimensionModif &

        First item access

        :rtype: TheItemType &

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DimensionModif_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DimensionModif_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_XCAFDimTolObjects_DimensionModif self) -> XCAFDimTolObjects_DimensionModif &

        Last item access

        :rtype: TheItemType &

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DimensionModif_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DimensionModif_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_XCAFDimTolObjects_DimensionModif self, Standard_Integer const theIndex) -> XCAFDimTolObjects_DimensionModif &

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DimensionModif_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DimensionModif___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_XCAFDimTolObjects_DimensionModif self, Standard_Integer const theIndex, XCAFDimTolObjects_DimensionModif const & theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DimensionModif_SetValue(self, *args)


    def __iter__(self):
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DimensionModif___iter__(self)
    __swig_destroy__ = _XCAFDimTolObjects.delete_NCollection_Sequence_XCAFDimTolObjects_DimensionModif
NCollection_Sequence_XCAFDimTolObjects_DimensionModif_swigregister = _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DimensionModif_swigregister
NCollection_Sequence_XCAFDimTolObjects_DimensionModif_swigregister(NCollection_Sequence_XCAFDimTolObjects_DimensionModif)

def NCollection_Sequence_XCAFDimTolObjects_DimensionModif_delNode(*args):
    """
    NCollection_Sequence_XCAFDimTolObjects_DimensionModif_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DimensionModif_delNode(*args)

class NCollection_Sequence_XCAFDimTolObjects_DimensionModif_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _XCAFDimTolObjects.new_NCollection_Sequence_XCAFDimTolObjects_DimensionModif_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XCAFDimTolObjects.delete_NCollection_Sequence_XCAFDimTolObjects_DimensionModif_IteratorHelper

    def __next__(self):
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DimensionModif_IteratorHelper___next__(self)
NCollection_Sequence_XCAFDimTolObjects_DimensionModif_IteratorHelper_swigregister = _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DimensionModif_IteratorHelper_swigregister
NCollection_Sequence_XCAFDimTolObjects_DimensionModif_IteratorHelper_swigregister(NCollection_Sequence_XCAFDimTolObjects_DimensionModif_IteratorHelper)


try:
	XCAFDimTolObjects_DimensionModifiersSequence = NCollection_Sequence_XCAFDimTolObjects_DimensionModif
except NameError:
	pass # does not exist, probably ignored

class NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif self) -> NCollection_Sequence< XCAFDimTolObjects_GeomToleranceModif >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif self) -> NCollection_Sequence< XCAFDimTolObjects_GeomToleranceModif >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif self) -> NCollection_Sequence< XCAFDimTolObjects_GeomToleranceModif >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif self) -> NCollection_Sequence< XCAFDimTolObjects_GeomToleranceModif >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _XCAFDimTolObjects.new_NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif self)

        Reverse sequence


        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif self, NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif theOther) -> NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif self, NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif theOther) -> NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif self, NCollection_Sequence< XCAFDimTolObjects_GeomToleranceModif >::Iterator & thePosition)
        Remove(NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif self, XCAFDimTolObjects_GeomToleranceModif const & theItem)
        Append(NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif self, NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif self, XCAFDimTolObjects_GeomToleranceModif const & theItem)
        Prepend(NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif self, NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif self, Standard_Integer const theIndex, XCAFDimTolObjects_GeomToleranceModif const & theItem)
        InsertBefore(NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif self, Standard_Integer const theIndex, NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif self, NCollection_Sequence< XCAFDimTolObjects_GeomToleranceModif >::Iterator & thePosition, XCAFDimTolObjects_GeomToleranceModif const & theItem)
        InsertAfter(NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif self, Standard_Integer const theIndex, NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif theSeq)
        InsertAfter(NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif self, Standard_Integer const theIndex, XCAFDimTolObjects_GeomToleranceModif const & theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif self, Standard_Integer const theIndex, NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif self) -> XCAFDimTolObjects_GeomToleranceModif &

        First item access

        :rtype: TheItemType &

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif self) -> XCAFDimTolObjects_GeomToleranceModif &

        Last item access

        :rtype: TheItemType &

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif self, Standard_Integer const theIndex) -> XCAFDimTolObjects_GeomToleranceModif &

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif self, Standard_Integer const theIndex, XCAFDimTolObjects_GeomToleranceModif const & theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_SetValue(self, *args)


    def __iter__(self):
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif___iter__(self)
    __swig_destroy__ = _XCAFDimTolObjects.delete_NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif
NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_swigregister = _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_swigregister
NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_swigregister(NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif)

def NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_delNode(*args):
    """
    NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_delNode(*args)

class NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _XCAFDimTolObjects.new_NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XCAFDimTolObjects.delete_NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_IteratorHelper

    def __next__(self):
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_IteratorHelper___next__(self)
NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_IteratorHelper_swigregister = _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_IteratorHelper_swigregister
NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_IteratorHelper_swigregister(NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif_IteratorHelper)


try:
	XCAFDimTolObjects_GeomToleranceModifiersSequence = NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif
except NameError:
	pass # does not exist, probably ignored

class NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher(NCollection.NCollection_BaseMap):
    """
    Purpose:     The DataMap is a Map to store keys with associated
    Items. See Map  from NCollection for  a discussion
    about the number of buckets.

    The DataMap can be seen as an extended array where
    the Keys  are the   indices.  For this reason  the
    operator () is defined on DataMap to fetch an Item
    from a Key. So the following syntax can be used :

    anItem = aMap(aKey);
    aMap(aKey) = anItem;

    This analogy has its  limit.   aMap(aKey) = anItem
    can  be done only  if aKey was previously bound to
    an item in the map.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher self) -> NCollection_DataMap< opencascade::handle< XCAFDimTolObjects_GeomToleranceObject >,opencascade::handle< XCAFDimTolObjects_DatumObject >,TColStd_MapTransientHasher >::iterator

        Returns an iterator pointing to the first element in the map.

        :rtype: iterator

        """
        return _XCAFDimTolObjects.NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher self) -> NCollection_DataMap< opencascade::handle< XCAFDimTolObjects_GeomToleranceObject >,opencascade::handle< XCAFDimTolObjects_DatumObject >,TColStd_MapTransientHasher >::iterator

        Returns an iterator referring to the past-the-end element in the map.

        :rtype: iterator

        """
        return _XCAFDimTolObjects.NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher self) -> NCollection_DataMap< opencascade::handle< XCAFDimTolObjects_GeomToleranceObject >,opencascade::handle< XCAFDimTolObjects_DatumObject >,TColStd_MapTransientHasher >::const_iterator

        Returns a const iterator pointing to the first element in the map.

        :rtype: const_iterator

        """
        return _XCAFDimTolObjects.NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher self) -> NCollection_DataMap< opencascade::handle< XCAFDimTolObjects_GeomToleranceObject >,opencascade::handle< XCAFDimTolObjects_DatumObject >,TColStd_MapTransientHasher >::const_iterator

        Returns a const iterator referring to the past-the-end element in the map.

        :rtype: const_iterator

        """
        return _XCAFDimTolObjects.NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The DataMap is a Map to store keys with associated
        Items. See Map  from NCollection for  a discussion
        about the number of buckets.

        The DataMap can be seen as an extended array where
        the Keys  are the   indices.  For this reason  the
        operator () is defined on DataMap to fetch an Item
        from a Key. So the following syntax can be used :

        anItem = aMap(aKey);
        aMap(aKey) = anItem;

        This analogy has its  limit.   aMap(aKey) = anItem
        can  be done only  if aKey was previously bound to
        an item in the map.
        """
        this = _XCAFDimTolObjects.new_NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, *args):
        """
        Exchange(NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher self, NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher theOther)

        Exchange the content of two maps without re-allocations.
        Notice that allocators will be swapped as well!

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _XCAFDimTolObjects.NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher_Exchange(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher self, NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher theOther) -> NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher

        Assignment.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _XCAFDimTolObjects.NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher self, NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher theOther) -> NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _XCAFDimTolObjects.NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher_assign(self, *args)


    def ReSize(self, *args):
        """
        ReSize(NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher self, Standard_Integer const N)

        ReSize

        :type N: int

        """
        return _XCAFDimTolObjects.NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher_ReSize(self, *args)


    def Bind(self, *args):
        """
        Bind(NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher self, Handle_XCAFDimTolObjects_GeomToleranceObject theKey, Handle_XCAFDimTolObjects_DatumObject theItem) -> Standard_Boolean

        Bind binds Item to Key in map.
        @param theKey  key to add/update
        @param theItem new item; overrides value previously bound to the key, if any
        @return Standard_True if Key was not bound already

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher_Bind(self, *args)


    def Bound(self, *args):
        """
        Bound(NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher self, Handle_XCAFDimTolObjects_GeomToleranceObject theKey, Handle_XCAFDimTolObjects_DatumObject theItem) -> Handle_XCAFDimTolObjects_DatumObject

        Bound binds Item to Key in map. Returns modifiable Item 

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: TheItemType *

        """
        return _XCAFDimTolObjects.NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher_Bound(self, *args)


    def IsBound(self, *args):
        """
        IsBound(NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher self, Handle_XCAFDimTolObjects_GeomToleranceObject theKey) -> Standard_Boolean

        IsBound

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher_IsBound(self, *args)


    def UnBind(self, *args):
        """
        UnBind(NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher self, Handle_XCAFDimTolObjects_GeomToleranceObject theKey) -> Standard_Boolean

        UnBind removes Item Key pair from map

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher_UnBind(self, *args)


    def Seek(self, *args):
        """
        Seek(NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher self, Handle_XCAFDimTolObjects_GeomToleranceObject theKey) -> Handle_XCAFDimTolObjects_DatumObject

        Seek returns pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: const TheItemType *

        """
        return _XCAFDimTolObjects.NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher_Seek(self, *args)


    def Find(self, *args):
        """
        Find returns the Item for Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _XCAFDimTolObjects.NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher_Find(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeSeek(self, *args):
        """
        ChangeSeek(NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher self, Handle_XCAFDimTolObjects_GeomToleranceObject theKey) -> Handle_XCAFDimTolObjects_DatumObject

        ChangeSeek returns modifiable pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: TheItemType *

        """
        return _XCAFDimTolObjects.NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher_ChangeSeek(self, *args)


    def ChangeFind(self, *args):
        """
        ChangeFind(NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher self, Handle_XCAFDimTolObjects_GeomToleranceObject theKey) -> Handle_XCAFDimTolObjects_DatumObject

        ChangeFind returns mofifiable Item by Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: TheItemType &

        """
        return _XCAFDimTolObjects.NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher_ChangeFind(self, *args)


    def __call__(self, *args):
        """
        operator ()

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _XCAFDimTolObjects.NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Clear(self, *args):
        """
        Clear(NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher self, Standard_Boolean const doReleaseMemory)
        Clear(NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher self, Handle_NCollection_BaseAllocator theAllocator)

        Clear data and reset allocator

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _XCAFDimTolObjects.NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher_Clear(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher self) -> Standard_Integer

        Size

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDimTolObjects.NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher_Size(self, *args)


    def __iter__(self):
        return _XCAFDimTolObjects.NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher___iter__(self)
    __swig_destroy__ = _XCAFDimTolObjects.delete_NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher
NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher_swigregister = _XCAFDimTolObjects.NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher_swigregister
NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher_swigregister(NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher)

class NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _XCAFDimTolObjects.new_NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XCAFDimTolObjects.delete_NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher_IteratorHelper

    def __next__(self):
        return _XCAFDimTolObjects.NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher_IteratorHelper___next__(self)
NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher_IteratorHelper_swigregister = _XCAFDimTolObjects.NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher_IteratorHelper_swigregister
NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher_IteratorHelper_swigregister(NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher_IteratorHelper)


try:
	XCAFDimTolObjects_DataMapOfToleranceDatum = NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher
except NameError:
	pass # does not exist, probably ignored

class NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject self) -> NCollection_Sequence< opencascade::handle< XCAFDimTolObjects_DimensionObject > >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject self) -> NCollection_Sequence< opencascade::handle< XCAFDimTolObjects_DimensionObject > >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject self) -> NCollection_Sequence< opencascade::handle< XCAFDimTolObjects_DimensionObject > >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject self) -> NCollection_Sequence< opencascade::handle< XCAFDimTolObjects_DimensionObject > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _XCAFDimTolObjects.new_NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject self)

        Reverse sequence


        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject self, NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject theOther) -> NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject self, NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject theOther) -> NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject self, NCollection_Sequence< opencascade::handle< XCAFDimTolObjects_DimensionObject > >::Iterator & thePosition)
        Remove(NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject self, Handle_XCAFDimTolObjects_DimensionObject theItem)
        Append(NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject self, NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject self, Handle_XCAFDimTolObjects_DimensionObject theItem)
        Prepend(NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject self, NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject self, Standard_Integer const theIndex, Handle_XCAFDimTolObjects_DimensionObject theItem)
        InsertBefore(NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject self, Standard_Integer const theIndex, NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject self, NCollection_Sequence< opencascade::handle< XCAFDimTolObjects_DimensionObject > >::Iterator & thePosition, Handle_XCAFDimTolObjects_DimensionObject theItem)
        InsertAfter(NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject self, Standard_Integer const theIndex, NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject theSeq)
        InsertAfter(NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject self, Standard_Integer const theIndex, Handle_XCAFDimTolObjects_DimensionObject theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject self, Standard_Integer const theIndex, NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject self) -> Handle_XCAFDimTolObjects_DimensionObject

        First item access

        :rtype: TheItemType &

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject self) -> Handle_XCAFDimTolObjects_DimensionObject

        Last item access

        :rtype: TheItemType &

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject self, Standard_Integer const theIndex) -> Handle_XCAFDimTolObjects_DimensionObject

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject self, Standard_Integer const theIndex, Handle_XCAFDimTolObjects_DimensionObject theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_SetValue(self, *args)


    def __iter__(self):
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject___iter__(self)
    __swig_destroy__ = _XCAFDimTolObjects.delete_NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject
NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_swigregister = _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_swigregister
NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_swigregister(NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject)

def NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_delNode(*args):
    """
    NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_delNode(*args)

class NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _XCAFDimTolObjects.new_NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XCAFDimTolObjects.delete_NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_IteratorHelper

    def __next__(self):
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_IteratorHelper___next__(self)
NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_IteratorHelper_swigregister = _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_IteratorHelper_swigregister
NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_IteratorHelper_swigregister(NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject_IteratorHelper)


try:
	XCAFDimTolObjects_DimensionObjectSequence = NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject
except NameError:
	pass # does not exist, probably ignored

class NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject self) -> NCollection_Sequence< opencascade::handle< XCAFDimTolObjects_DatumObject > >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject self) -> NCollection_Sequence< opencascade::handle< XCAFDimTolObjects_DatumObject > >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject self) -> NCollection_Sequence< opencascade::handle< XCAFDimTolObjects_DatumObject > >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject self) -> NCollection_Sequence< opencascade::handle< XCAFDimTolObjects_DatumObject > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _XCAFDimTolObjects.new_NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject self)

        Reverse sequence


        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject self, NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject theOther) -> NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject self, NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject theOther) -> NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject self, NCollection_Sequence< opencascade::handle< XCAFDimTolObjects_DatumObject > >::Iterator & thePosition)
        Remove(NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject self, Handle_XCAFDimTolObjects_DatumObject theItem)
        Append(NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject self, NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject self, Handle_XCAFDimTolObjects_DatumObject theItem)
        Prepend(NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject self, NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject self, Standard_Integer const theIndex, Handle_XCAFDimTolObjects_DatumObject theItem)
        InsertBefore(NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject self, Standard_Integer const theIndex, NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject self, NCollection_Sequence< opencascade::handle< XCAFDimTolObjects_DatumObject > >::Iterator & thePosition, Handle_XCAFDimTolObjects_DatumObject theItem)
        InsertAfter(NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject self, Standard_Integer const theIndex, NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject theSeq)
        InsertAfter(NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject self, Standard_Integer const theIndex, Handle_XCAFDimTolObjects_DatumObject theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject self, Standard_Integer const theIndex, NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject self) -> Handle_XCAFDimTolObjects_DatumObject

        First item access

        :rtype: TheItemType &

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject self) -> Handle_XCAFDimTolObjects_DatumObject

        Last item access

        :rtype: TheItemType &

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject self, Standard_Integer const theIndex) -> Handle_XCAFDimTolObjects_DatumObject

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject self, Standard_Integer const theIndex, Handle_XCAFDimTolObjects_DatumObject theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_SetValue(self, *args)


    def __iter__(self):
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject___iter__(self)
    __swig_destroy__ = _XCAFDimTolObjects.delete_NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject
NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_swigregister = _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_swigregister
NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_swigregister(NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject)

def NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_delNode(*args):
    """
    NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_delNode(*args)

class NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _XCAFDimTolObjects.new_NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XCAFDimTolObjects.delete_NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_IteratorHelper

    def __next__(self):
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_IteratorHelper___next__(self)
NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_IteratorHelper_swigregister = _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_IteratorHelper_swigregister
NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_IteratorHelper_swigregister(NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject_IteratorHelper)


try:
	XCAFDimTolObjects_DatumObjectSequence = NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject
except NameError:
	pass # does not exist, probably ignored

class NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject self) -> NCollection_Sequence< opencascade::handle< XCAFDimTolObjects_GeomToleranceObject > >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject self) -> NCollection_Sequence< opencascade::handle< XCAFDimTolObjects_GeomToleranceObject > >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject self) -> NCollection_Sequence< opencascade::handle< XCAFDimTolObjects_GeomToleranceObject > >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject self) -> NCollection_Sequence< opencascade::handle< XCAFDimTolObjects_GeomToleranceObject > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _XCAFDimTolObjects.new_NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject self)

        Reverse sequence


        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject self, NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject theOther) -> NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject self, NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject theOther) -> NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject self, NCollection_Sequence< opencascade::handle< XCAFDimTolObjects_GeomToleranceObject > >::Iterator & thePosition)
        Remove(NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject self, Handle_XCAFDimTolObjects_GeomToleranceObject theItem)
        Append(NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject self, NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject self, Handle_XCAFDimTolObjects_GeomToleranceObject theItem)
        Prepend(NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject self, NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject self, Standard_Integer const theIndex, Handle_XCAFDimTolObjects_GeomToleranceObject theItem)
        InsertBefore(NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject self, Standard_Integer const theIndex, NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject self, NCollection_Sequence< opencascade::handle< XCAFDimTolObjects_GeomToleranceObject > >::Iterator & thePosition, Handle_XCAFDimTolObjects_GeomToleranceObject theItem)
        InsertAfter(NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject self, Standard_Integer const theIndex, NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject theSeq)
        InsertAfter(NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject self, Standard_Integer const theIndex, Handle_XCAFDimTolObjects_GeomToleranceObject theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject self, Standard_Integer const theIndex, NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject self) -> Handle_XCAFDimTolObjects_GeomToleranceObject

        First item access

        :rtype: TheItemType &

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject self) -> Handle_XCAFDimTolObjects_GeomToleranceObject

        Last item access

        :rtype: TheItemType &

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject self, Standard_Integer const theIndex) -> Handle_XCAFDimTolObjects_GeomToleranceObject

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject self, Standard_Integer const theIndex, Handle_XCAFDimTolObjects_GeomToleranceObject theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_SetValue(self, *args)


    def __iter__(self):
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject___iter__(self)
    __swig_destroy__ = _XCAFDimTolObjects.delete_NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject
NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_swigregister = _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_swigregister
NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_swigregister(NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject)

def NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_delNode(*args):
    """
    NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_delNode(*args)

class NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _XCAFDimTolObjects.new_NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XCAFDimTolObjects.delete_NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_IteratorHelper

    def __next__(self):
        return _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_IteratorHelper___next__(self)
NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_IteratorHelper_swigregister = _XCAFDimTolObjects.NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_IteratorHelper_swigregister
NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_IteratorHelper_swigregister(NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject_IteratorHelper)


try:
	XCAFDimTolObjects_GeomToleranceObjectSequence = NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject
except NameError:
	pass # does not exist, probably ignored


try:
	TColStd_MapTransientHasher = TColStd.NCollection_DefaultHasher_Handle_Standard_Transient
except AttributeError:
	pass # does not exist, probably ignored

class XCAFDimTolObjects_Tool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(XCAFDimTolObjects_Tool self, Handle_TDocStd_Document theDoc) -> XCAFDimTolObjects_Tool

        :type theDoc: OCC.wrapper.TDocStd.Handle_TDocStd_Document

        """
        this = _XCAFDimTolObjects.new_XCAFDimTolObjects_Tool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetDimensions(self, *args):
        """
        GetDimensions(XCAFDimTolObjects_Tool self, NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject theDimensionObjectSequence)

        Returns a sequence of Dimensions currently stored
        in the GD&T table

        :type theDimensionObjectSequence: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DimensionObjectSequence

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_Tool_GetDimensions(self, *args)


    def GetRefDimensions(self, *args):
        """
        GetRefDimensions(XCAFDimTolObjects_Tool self, TopoDS_Shape theShape, NCollection_Sequence_Handle_XCAFDimTolObjects_DimensionObject theDimensions) -> Standard_Boolean

        Returns all Dimensions defined for Shape

        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type theDimensions: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DimensionObjectSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_Tool_GetRefDimensions(self, *args)


    def GetGeomTolerances(self, *args):
        """
        GetGeomTolerances(XCAFDimTolObjects_Tool self, NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject theGeomToleranceObjectSequence, NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject theDatumObjectSequence, NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher theMap)

        Returns a sequence of Tolerances currently stored
        in the GD&T table

        :type theGeomToleranceObjectSequence: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObjectSequence
        :type theDatumObjectSequence: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DatumObjectSequence
        :type theMap: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DataMapOfToleranceDatum

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_Tool_GetGeomTolerances(self, *args)


    def GetRefGeomTolerances(self, *args):
        """
        GetRefGeomTolerances(XCAFDimTolObjects_Tool self, TopoDS_Shape theShape, NCollection_Sequence_Handle_XCAFDimTolObjects_GeomToleranceObject theGeomToleranceObjectSequence, NCollection_Sequence_Handle_XCAFDimTolObjects_DatumObject theDatumObjectSequence, NCollection_DataMap_Handle_XCAFDimTolObjects_GeomToleranceObject_Handle_XCAFDimTolObjects_DatumObject_TColStd_MapTransientHasher theMap) -> Standard_Boolean

        Returns all GeomTolerances defined for Shape

        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type theGeomToleranceObjectSequence: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceObjectSequence
        :type theDatumObjectSequence: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DatumObjectSequence
        :type theMap: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DataMapOfToleranceDatum
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_Tool_GetRefGeomTolerances(self, *args)


    def GetRefDatum(self, *args):
        """
        GetRefDatum(XCAFDimTolObjects_Tool self, TopoDS_Shape theShape, Handle_XCAFDimTolObjects_DatumObject theDatum) -> Standard_Boolean

        Returns DatumObject defined for Shape

        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type theDatum: OCC.wrapper.XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.XCAFDimTolObjects_Tool_GetRefDatum(self, *args)

    __swig_destroy__ = _XCAFDimTolObjects.delete_XCAFDimTolObjects_Tool
XCAFDimTolObjects_Tool_swigregister = _XCAFDimTolObjects.XCAFDimTolObjects_Tool_swigregister
XCAFDimTolObjects_Tool_swigregister(XCAFDimTolObjects_Tool)

class Handle_XCAFDimTolObjects_GeomToleranceObject(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XCAFDimTolObjects_GeomToleranceObject self)

        Nullify the handle


        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XCAFDimTolObjects_GeomToleranceObject self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XCAFDimTolObjects_GeomToleranceObject self, XCAFDimTolObjects_GeomToleranceObject thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XCAFDimTolObjects_GeomToleranceObject self, Handle_XCAFDimTolObjects_GeomToleranceObject theHandle) -> Handle_XCAFDimTolObjects_GeomToleranceObject
        assign(Handle_XCAFDimTolObjects_GeomToleranceObject self, XCAFDimTolObjects_GeomToleranceObject thePtr) -> Handle_XCAFDimTolObjects_GeomToleranceObject
        assign(Handle_XCAFDimTolObjects_GeomToleranceObject self, Handle_XCAFDimTolObjects_GeomToleranceObject theHandle) -> Handle_XCAFDimTolObjects_GeomToleranceObject

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XCAFDimTolObjects_GeomToleranceObject self) -> XCAFDimTolObjects_GeomToleranceObject

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XCAFDimTolObjects_GeomToleranceObject self) -> XCAFDimTolObjects_GeomToleranceObject

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XCAFDimTolObjects_GeomToleranceObject self) -> XCAFDimTolObjects_GeomToleranceObject

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject___ref__(self, *args)


    def __hash__(self):
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XCAFDimTolObjects.new_Handle_XCAFDimTolObjects_GeomToleranceObject(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_DownCast)
    __swig_destroy__ = _XCAFDimTolObjects.delete_Handle_XCAFDimTolObjects_GeomToleranceObject

    def GetSemanticName(self, *args):
        """
        GetSemanticName(Handle_XCAFDimTolObjects_GeomToleranceObject self) -> Handle_TCollection_HAsciiString

        Returns semantic name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_GetSemanticName(self, *args)


    def SetSemanticName(self, *args):
        """
        SetSemanticName(Handle_XCAFDimTolObjects_GeomToleranceObject self, Handle_TCollection_HAsciiString theName)

        Sets semantic name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_SetSemanticName(self, *args)


    def SetType(self, *args):
        """
        SetType(Handle_XCAFDimTolObjects_GeomToleranceObject self, XCAFDimTolObjects_GeomToleranceType const theType)

        Sets type of the object.

        :type theType: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceType

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_SetType(self, *args)


    def GetType(self, *args):
        """
        GetType(Handle_XCAFDimTolObjects_GeomToleranceObject self) -> XCAFDimTolObjects_GeomToleranceType

        Returns type of the object.

        :rtype: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceType

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_GetType(self, *args)


    def SetTypeOfValue(self, *args):
        """
        SetTypeOfValue(Handle_XCAFDimTolObjects_GeomToleranceObject self, XCAFDimTolObjects_GeomToleranceTypeValue const theTypeOfValue)

        Sets type of tolerance value.

        :type theTypeOfValue: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceTypeValue

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_SetTypeOfValue(self, *args)


    def GetTypeOfValue(self, *args):
        """
        GetTypeOfValue(Handle_XCAFDimTolObjects_GeomToleranceObject self) -> XCAFDimTolObjects_GeomToleranceTypeValue

        Returns type of tolerance value.

        :rtype: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceTypeValue

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_GetTypeOfValue(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_XCAFDimTolObjects_GeomToleranceObject self, Standard_Real const theValue)

        Sets tolerance value.

        :type theValue: float

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_SetValue(self, *args)


    def GetValue(self, *args):
        """
        GetValue(Handle_XCAFDimTolObjects_GeomToleranceObject self) -> Standard_Real

        Returns tolerance value.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_GetValue(self, *args)


    def SetMaterialRequirementModifier(self, *args):
        """
        SetMaterialRequirementModifier(Handle_XCAFDimTolObjects_GeomToleranceObject self, XCAFDimTolObjects_GeomToleranceMatReqModif const theMatReqModif)

        Sets material requirement of the tolerance.

        :type theMatReqModif: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceMatReqModif

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_SetMaterialRequirementModifier(self, *args)


    def GetMaterialRequirementModifier(self, *args):
        """
        GetMaterialRequirementModifier(Handle_XCAFDimTolObjects_GeomToleranceObject self) -> XCAFDimTolObjects_GeomToleranceMatReqModif

        Returns material requirement of the tolerance.

        :rtype: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceMatReqModif

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_GetMaterialRequirementModifier(self, *args)


    def SetZoneModifier(self, *args):
        """
        SetZoneModifier(Handle_XCAFDimTolObjects_GeomToleranceObject self, XCAFDimTolObjects_GeomToleranceZoneModif const theZoneModif)

        Sets tolerance zone.

        :type theZoneModif: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceZoneModif

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_SetZoneModifier(self, *args)


    def GetZoneModifier(self, *args):
        """
        GetZoneModifier(Handle_XCAFDimTolObjects_GeomToleranceObject self) -> XCAFDimTolObjects_GeomToleranceZoneModif

        Returns tolerance zone.

        :rtype: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceZoneModif

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_GetZoneModifier(self, *args)


    def SetValueOfZoneModifier(self, *args):
        """
        SetValueOfZoneModifier(Handle_XCAFDimTolObjects_GeomToleranceObject self, Standard_Real const theValue)

        Sets value associated with tolerance zone.

        :type theValue: float

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_SetValueOfZoneModifier(self, *args)


    def GetValueOfZoneModifier(self, *args):
        """
        GetValueOfZoneModifier(Handle_XCAFDimTolObjects_GeomToleranceObject self) -> Standard_Real

        Returns value associated with tolerance zone.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_GetValueOfZoneModifier(self, *args)


    def SetModifiers(self, *args):
        """
        SetModifiers(Handle_XCAFDimTolObjects_GeomToleranceObject self, NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif theModifiers)

        Sets new sequence of tolerance modifiers.

        :type theModifiers: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceModifiersSequence

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_SetModifiers(self, *args)


    def AddModifier(self, *args):
        """
        AddModifier(Handle_XCAFDimTolObjects_GeomToleranceObject self, XCAFDimTolObjects_GeomToleranceModif const theModifier)

        Adds a tolerance modifier to the sequence of modifiers.

        :type theModifier: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceModif

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_AddModifier(self, *args)


    def GetModifiers(self, *args):
        """
        GetModifiers(Handle_XCAFDimTolObjects_GeomToleranceObject self) -> NCollection_Sequence_XCAFDimTolObjects_GeomToleranceModif

        Returns a sequence of modifiers of the tolerance.

        :rtype: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_GeomToleranceModifiersSequence

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_GetModifiers(self, *args)


    def SetMaxValueModifier(self, *args):
        """
        SetMaxValueModifier(Handle_XCAFDimTolObjects_GeomToleranceObject self, Standard_Real const theModifier)

        Sets the maximal upper tolerance value for tolerance with modifiers.

        :type theModifier: float

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_SetMaxValueModifier(self, *args)


    def GetMaxValueModifier(self, *args):
        """
        GetMaxValueModifier(Handle_XCAFDimTolObjects_GeomToleranceObject self) -> Standard_Real

        Returns the maximal upper tolerance.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_GetMaxValueModifier(self, *args)


    def SetAxis(self, *args):
        """
        SetAxis(Handle_XCAFDimTolObjects_GeomToleranceObject self, gp_Ax2 theAxis)

        :type theAxis: OCC.wrapper.gp.gp_Ax2

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_SetAxis(self, *args)


    def GetAxis(self, *args):
        """
        GetAxis(Handle_XCAFDimTolObjects_GeomToleranceObject self) -> gp_Ax2

        :rtype: OCC.wrapper.gp.gp_Ax2

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_GetAxis(self, *args)


    def HasAxis(self, *args):
        """
        HasAxis(Handle_XCAFDimTolObjects_GeomToleranceObject self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_HasAxis(self, *args)


    def SetPlane(self, *args):
        """
        SetPlane(Handle_XCAFDimTolObjects_GeomToleranceObject self, gp_Ax2 thePlane)

        Sets annotation plane.

        :type thePlane: OCC.wrapper.gp.gp_Ax2

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_SetPlane(self, *args)


    def GetPlane(self, *args):
        """
        Returns annotation plane.

        :rtype: OCC.wrapper.gp.gp_Ax2

        """
        res = _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_GetPlane(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetPoint(self, *args):
        """
        SetPoint(Handle_XCAFDimTolObjects_GeomToleranceObject self, gp_Pnt thePnt)

        Sets reference point.

        :type thePnt: OCC.wrapper.gp.gp_Pnt

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_SetPoint(self, *args)


    def GetPoint(self, *args):
        """
        Returns reference point.

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        res = _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_GetPoint(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetPointTextAttach(self, *args):
        """
        SetPointTextAttach(Handle_XCAFDimTolObjects_GeomToleranceObject self, gp_Pnt thePntText)

        Sets text position.

        :type thePntText: OCC.wrapper.gp.gp_Pnt

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_SetPointTextAttach(self, *args)


    def GetPointTextAttach(self, *args):
        """
        Returns the text position.

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        res = _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_GetPointTextAttach(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasPlane(self, *args):
        """
        HasPlane(Handle_XCAFDimTolObjects_GeomToleranceObject self) -> Standard_Boolean

        Returns True if the object has annotation plane.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_HasPlane(self, *args)


    def HasPoint(self, *args):
        """
        HasPoint(Handle_XCAFDimTolObjects_GeomToleranceObject self) -> Standard_Boolean

        Returns True if reference point is specified.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_HasPoint(self, *args)


    def HasPointText(self, *args):
        """
        HasPointText(Handle_XCAFDimTolObjects_GeomToleranceObject self) -> Standard_Boolean

        Returns True if text position is specified.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_HasPointText(self, *args)


    def SetPresentation(self, *args):
        """
        SetPresentation(Handle_XCAFDimTolObjects_GeomToleranceObject self, TopoDS_Shape thePresentation, Handle_TCollection_HAsciiString thePresentationName)

        Set graphical presentation for object.

        :type thePresentation: OCC.wrapper.TopoDS.TopoDS_Shape
        :type thePresentationName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_SetPresentation(self, *args)


    def GetPresentation(self, *args):
        """
        GetPresentation(Handle_XCAFDimTolObjects_GeomToleranceObject self) -> TopoDS_Shape

        Returns graphical presentation of the object.

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_GetPresentation(self, *args)


    def GetPresentationName(self, *args):
        """
        GetPresentationName(Handle_XCAFDimTolObjects_GeomToleranceObject self) -> Handle_TCollection_HAsciiString

        Returns graphical presentation of the object.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_GetPresentationName(self, *args)


    def HasAffectedPlane(self, *args):
        """
        HasAffectedPlane(Handle_XCAFDimTolObjects_GeomToleranceObject self) -> bool

        :rtype: bool

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_HasAffectedPlane(self, *args)


    def GetAffectedPlaneType(self, *args):
        """
        GetAffectedPlaneType(Handle_XCAFDimTolObjects_GeomToleranceObject self) -> XCAFDimTolObjects_ToleranceZoneAffectedPlane

        :rtype: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_ToleranceZoneAffectedPlane

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_GetAffectedPlaneType(self, *args)


    def SetAffectedPlaneType(self, *args):
        """
        SetAffectedPlaneType(Handle_XCAFDimTolObjects_GeomToleranceObject self, XCAFDimTolObjects_ToleranceZoneAffectedPlane const theType)

        :type theType: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_ToleranceZoneAffectedPlane

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_SetAffectedPlaneType(self, *args)


    def SetAffectedPlane(self, *args):
        """
        SetAffectedPlane(Handle_XCAFDimTolObjects_GeomToleranceObject self, gp_Pln thePlane)
        SetAffectedPlane(Handle_XCAFDimTolObjects_GeomToleranceObject self, gp_Pln thePlane, XCAFDimTolObjects_ToleranceZoneAffectedPlane const theType)

        Sets affected plane.

        :type thePlane: OCC.wrapper.gp.gp_Pln
        :type theType: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_ToleranceZoneAffectedPlane

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_SetAffectedPlane(self, *args)


    def GetAffectedPlane(self, *args):
        """
        Returns affected plane.

        :rtype: OCC.wrapper.gp.gp_Pln

        """
        res = _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_GetAffectedPlane(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def get_type_name(self, *args):
        """
        get_type_name(Handle_XCAFDimTolObjects_GeomToleranceObject self) -> char const *

        :rtype: const char *

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XCAFDimTolObjects_GeomToleranceObject self)

        Memory deallocator for transient classes


        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XCAFDimTolObjects_GeomToleranceObject self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XCAFDimTolObjects_GeomToleranceObject self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XCAFDimTolObjects_GeomToleranceObject self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XCAFDimTolObjects_GeomToleranceObject self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XCAFDimTolObjects_GeomToleranceObject self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XCAFDimTolObjects_GeomToleranceObject self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XCAFDimTolObjects_GeomToleranceObject self)

        Increments the reference counter of this object


        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XCAFDimTolObjects_GeomToleranceObject self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_DecrementRefCounter(self, *args)

Handle_XCAFDimTolObjects_GeomToleranceObject_swigregister = _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_swigregister
Handle_XCAFDimTolObjects_GeomToleranceObject_swigregister(Handle_XCAFDimTolObjects_GeomToleranceObject)

def Handle_XCAFDimTolObjects_GeomToleranceObject_DownCast(thing):
    return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_DownCast(thing)
Handle_XCAFDimTolObjects_GeomToleranceObject_DownCast = _XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject_DownCast

class NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif self) -> NCollection_Sequence< XCAFDimTolObjects_DatumSingleModif >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif self) -> NCollection_Sequence< XCAFDimTolObjects_DatumSingleModif >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif self) -> NCollection_Sequence< XCAFDimTolObjects_DatumSingleModif >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif self) -> NCollection_Sequence< XCAFDimTolObjects_DatumSingleModif >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _XCAFDimTolObjects.new_NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif self)

        Reverse sequence


        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif self, NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif theOther) -> NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif self, NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif theOther) -> NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif self, NCollection_Sequence< XCAFDimTolObjects_DatumSingleModif >::Iterator & thePosition)
        Remove(NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif self, XCAFDimTolObjects_DatumSingleModif const & theItem)
        Append(NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif self, NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif self, XCAFDimTolObjects_DatumSingleModif const & theItem)
        Prepend(NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif self, NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif self, Standard_Integer const theIndex, XCAFDimTolObjects_DatumSingleModif const & theItem)
        InsertBefore(NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif self, Standard_Integer const theIndex, NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif self, NCollection_Sequence< XCAFDimTolObjects_DatumSingleModif >::Iterator & thePosition, XCAFDimTolObjects_DatumSingleModif const & theItem)
        InsertAfter(NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif self, Standard_Integer const theIndex, NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif theSeq)
        InsertAfter(NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif self, Standard_Integer const theIndex, XCAFDimTolObjects_DatumSingleModif const & theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif self, Standard_Integer const theIndex, NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif self) -> XCAFDimTolObjects_DatumSingleModif &

        First item access

        :rtype: TheItemType &

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif self) -> XCAFDimTolObjects_DatumSingleModif &

        Last item access

        :rtype: TheItemType &

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif self, Standard_Integer const theIndex) -> XCAFDimTolObjects_DatumSingleModif &

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif self, Standard_Integer const theIndex, XCAFDimTolObjects_DatumSingleModif const & theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_SetValue(self, *args)


    def __iter__(self):
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif___iter__(self)
    __swig_destroy__ = _XCAFDimTolObjects.delete_NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif
NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_swigregister = _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_swigregister
NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_swigregister(NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif)

def NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_delNode(*args):
    """
    NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_delNode(*args)

class NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _XCAFDimTolObjects.new_NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XCAFDimTolObjects.delete_NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_IteratorHelper

    def __next__(self):
        return _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_IteratorHelper___next__(self)
NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_IteratorHelper_swigregister = _XCAFDimTolObjects.NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_IteratorHelper_swigregister
NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_IteratorHelper_swigregister(NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif_IteratorHelper)


try:
	XCAFDimTolObjects_DatumModifiersSequence = NCollection_Sequence_XCAFDimTolObjects_DatumSingleModif
except NameError:
	pass # does not exist, probably ignored

class Handle_XCAFDimTolObjects_DimensionObject(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XCAFDimTolObjects_DimensionObject self)

        Nullify the handle


        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XCAFDimTolObjects_DimensionObject self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XCAFDimTolObjects_DimensionObject self, XCAFDimTolObjects_DimensionObject thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XCAFDimTolObjects_DimensionObject self, Handle_XCAFDimTolObjects_DimensionObject theHandle) -> Handle_XCAFDimTolObjects_DimensionObject
        assign(Handle_XCAFDimTolObjects_DimensionObject self, XCAFDimTolObjects_DimensionObject thePtr) -> Handle_XCAFDimTolObjects_DimensionObject
        assign(Handle_XCAFDimTolObjects_DimensionObject self, Handle_XCAFDimTolObjects_DimensionObject theHandle) -> Handle_XCAFDimTolObjects_DimensionObject

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XCAFDimTolObjects_DimensionObject self) -> XCAFDimTolObjects_DimensionObject

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XCAFDimTolObjects_DimensionObject self) -> XCAFDimTolObjects_DimensionObject

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XCAFDimTolObjects_DimensionObject self) -> XCAFDimTolObjects_DimensionObject

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject___ref__(self, *args)


    def __hash__(self):
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XCAFDimTolObjects.new_Handle_XCAFDimTolObjects_DimensionObject(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_DownCast)
    __swig_destroy__ = _XCAFDimTolObjects.delete_Handle_XCAFDimTolObjects_DimensionObject

    def GetSemanticName(self, *args):
        """
        GetSemanticName(Handle_XCAFDimTolObjects_DimensionObject self) -> Handle_TCollection_HAsciiString

        Returns semantic name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_GetSemanticName(self, *args)


    def SetSemanticName(self, *args):
        """
        SetSemanticName(Handle_XCAFDimTolObjects_DimensionObject self, Handle_TCollection_HAsciiString theName)

        Sets semantic name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_SetSemanticName(self, *args)


    def SetQualifier(self, *args):
        """
        SetQualifier(Handle_XCAFDimTolObjects_DimensionObject self, XCAFDimTolObjects_DimensionQualifier const theQualifier)

        Sets dimension qualifier as min., max. or average.

        :type theQualifier: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DimensionQualifier

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_SetQualifier(self, *args)


    def GetQualifier(self, *args):
        """
        GetQualifier(Handle_XCAFDimTolObjects_DimensionObject self) -> XCAFDimTolObjects_DimensionQualifier

        Returns dimension qualifier.

        :rtype: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DimensionQualifier

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_GetQualifier(self, *args)


    def HasQualifier(self, *args):
        """
        HasQualifier(Handle_XCAFDimTolObjects_DimensionObject self) -> Standard_Boolean

        Returns True if the object has dimension qualifier.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_HasQualifier(self, *args)


    def SetType(self, *args):
        """
        SetType(Handle_XCAFDimTolObjects_DimensionObject self, XCAFDimTolObjects_DimensionType const theTyupe)

        Sets a specific type of dimension.

        :type theTyupe: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DimensionType

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_SetType(self, *args)


    def GetType(self, *args):
        """
        GetType(Handle_XCAFDimTolObjects_DimensionObject self) -> XCAFDimTolObjects_DimensionType

        Returns dimension type.

        :rtype: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DimensionType

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_GetType(self, *args)


    def GetValue(self, *args):
        """
        GetValue(Handle_XCAFDimTolObjects_DimensionObject self) -> Standard_Real

        Returns the main dimension value.
        It will be the middle value in case of range dimension.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_GetValue(self, *args)


    def GetValues(self, *args):
        """
        GetValues(Handle_XCAFDimTolObjects_DimensionObject self) -> Handle_TColStd_HArray1OfReal

        Returns raw array of dimension values

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_GetValues(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_XCAFDimTolObjects_DimensionObject self, Standard_Real const theValue)

        Sets the main dimension value.
        Overwrites previous values.

        :type theValue: float

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_SetValue(self, *args)


    def SetValues(self, *args):
        """
        SetValues(Handle_XCAFDimTolObjects_DimensionObject self, Handle_TColStd_HArray1OfReal theValue)

        Replaces current raw array of dimension values with theValues array.

        :type theValue: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_SetValues(self, *args)


    def IsDimWithRange(self, *args):
        """
        IsDimWithRange(Handle_XCAFDimTolObjects_DimensionObject self) -> Standard_Boolean

        Returns True if the dimension is of range kind.
        Dimension is of range kind if its values array contains two elements
        defining lower and upper bounds.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_IsDimWithRange(self, *args)


    def SetUpperBound(self, *args):
        """
        SetUpperBound(Handle_XCAFDimTolObjects_DimensionObject self, Standard_Real const theUpperBound)

        Sets the upper bound of the range dimension, otherwise
        resets it to an empty range with the specified upper bound.

        :type theUpperBound: float

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_SetUpperBound(self, *args)


    def SetLowerBound(self, *args):
        """
        SetLowerBound(Handle_XCAFDimTolObjects_DimensionObject self, Standard_Real const theLowerBound)

        Sets the lower bound of the range dimension, otherwise
        resets it to an empty range with the specified lower bound.

        :type theLowerBound: float

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_SetLowerBound(self, *args)


    def GetUpperBound(self, *args):
        """
        GetUpperBound(Handle_XCAFDimTolObjects_DimensionObject self) -> Standard_Real

        Returns the upper bound of the range dimension, otherwise - zero.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_GetUpperBound(self, *args)


    def GetLowerBound(self, *args):
        """
        GetLowerBound(Handle_XCAFDimTolObjects_DimensionObject self) -> Standard_Real

        Returns the lower bound of the range dimension, otherwise - zero.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_GetLowerBound(self, *args)


    def IsDimWithPlusMinusTolerance(self, *args):
        """
        IsDimWithPlusMinusTolerance(Handle_XCAFDimTolObjects_DimensionObject self) -> Standard_Boolean

        Returns True if the dimension is of +/- tolerance kind.
        Dimension is of +/- tolerance kind if its values array contains three elements
        defining the main value and the lower/upper tolerances.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_IsDimWithPlusMinusTolerance(self, *args)


    def SetUpperTolValue(self, *args):
        """
        SetUpperTolValue(Handle_XCAFDimTolObjects_DimensionObject self, Standard_Real const theUperTolValue) -> Standard_Boolean

        Sets the upper value of the toleranced dimension, otherwise
        resets a simple dimension to toleranced one with the specified lower/upper tolerances.
        Returns False in case of range dimension.

        :type theUperTolValue: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_SetUpperTolValue(self, *args)


    def SetLowerTolValue(self, *args):
        """
        SetLowerTolValue(Handle_XCAFDimTolObjects_DimensionObject self, Standard_Real const theLowerTolValue) -> Standard_Boolean

        Sets the lower value of the toleranced dimension, otherwise
        resets a simple dimension to toleranced one with the specified lower/upper tolerances.
        Returns False in case of range dimension.

        :type theLowerTolValue: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_SetLowerTolValue(self, *args)


    def GetUpperTolValue(self, *args):
        """
        GetUpperTolValue(Handle_XCAFDimTolObjects_DimensionObject self) -> Standard_Real

        Returns the lower value of the toleranced dimension, otherwise - zero.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_GetUpperTolValue(self, *args)


    def GetLowerTolValue(self, *args):
        """
        GetLowerTolValue(Handle_XCAFDimTolObjects_DimensionObject self) -> Standard_Real

        Returns the upper value of the toleranced dimension, otherwise - zero.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_GetLowerTolValue(self, *args)


    def IsDimWithClassOfTolerance(self, *args):
        """
        IsDimWithClassOfTolerance(Handle_XCAFDimTolObjects_DimensionObject self) -> Standard_Boolean

        Returns True if the form variance was set to not XCAFDimTolObjects_DimensionFormVariance_None value.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_IsDimWithClassOfTolerance(self, *args)


    def SetClassOfTolerance(self, *args):
        """
        SetClassOfTolerance(Handle_XCAFDimTolObjects_DimensionObject self, Standard_Boolean const theHole, XCAFDimTolObjects_DimensionFormVariance const theFormVariance, XCAFDimTolObjects_DimensionGrade const theGrade)

        Sets tolerance class of the dimension.
        \param theHole - True if the tolerance applies to an internal feature
        \param theFormVariance - represents the fundamental deviation or "position letter"
        of the ISO 286 limits-and-fits tolerance classification.
        \param theGrade - represents the quality or the accuracy grade of a tolerance.

        :type theHole: bool
        :type theFormVariance: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DimensionFormVariance
        :type theGrade: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DimensionGrade

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_SetClassOfTolerance(self, *args)


    def GetClassOfTolerance(self, *args):
        """
        GetClassOfTolerance(Handle_XCAFDimTolObjects_DimensionObject self) -> Standard_Boolean

        Retrieves tolerance class parameters of the dimension.
        Returns True if the dimension is toleranced.

        :type theHole: bool
        :type theFormVariance: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DimensionFormVariance
        :type theGrade: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DimensionGrade
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_GetClassOfTolerance(self, *args)


    def SetNbOfDecimalPlaces(self, *args):
        """
        SetNbOfDecimalPlaces(Handle_XCAFDimTolObjects_DimensionObject self, Standard_Integer const theL, Standard_Integer const theR)

        Sets the number of places to the left and right of the decimal point respectively.

        :type theL: int
        :type theR: int

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_SetNbOfDecimalPlaces(self, *args)


    def GetNbOfDecimalPlaces(self, *args):
        """
        GetNbOfDecimalPlaces(Handle_XCAFDimTolObjects_DimensionObject self)

        Returns the number of places to the left and right of the decimal point respectively.

        :type theL: int
        :type theR: int

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_GetNbOfDecimalPlaces(self, *args)


    def GetModifiers(self, *args):
        """
        GetModifiers(Handle_XCAFDimTolObjects_DimensionObject self) -> NCollection_Sequence_XCAFDimTolObjects_DimensionModif

        Returns a sequence of modifiers of the dimension.

        :rtype: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DimensionModifiersSequence

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_GetModifiers(self, *args)


    def SetModifiers(self, *args):
        """
        SetModifiers(Handle_XCAFDimTolObjects_DimensionObject self, NCollection_Sequence_XCAFDimTolObjects_DimensionModif theModifiers)

        Sets new sequence of dimension modifiers.

        :type theModifiers: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DimensionModifiersSequence

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_SetModifiers(self, *args)


    def AddModifier(self, *args):
        """
        AddModifier(Handle_XCAFDimTolObjects_DimensionObject self, XCAFDimTolObjects_DimensionModif const theModifier)

        Adds a modifier to the dimension sequence of modifiers.

        :type theModifier: OCC.wrapper.XCAFDimTolObjects.XCAFDimTolObjects_DimensionModif

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_AddModifier(self, *args)


    def GetPath(self, *args):
        """
        GetPath(Handle_XCAFDimTolObjects_DimensionObject self) -> TopoDS_Edge

        Returns a 'curve' along which the dimension is measured.

        :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_GetPath(self, *args)


    def SetPath(self, *args):
        """
        SetPath(Handle_XCAFDimTolObjects_DimensionObject self, TopoDS_Edge thePath)

        Sets a 'curve' along which the dimension is measured.

        :type thePath: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_SetPath(self, *args)


    def GetDirection(self, *args):
        """
        GetDirection(Handle_XCAFDimTolObjects_DimensionObject self, gp_Dir theDir) -> Standard_Boolean

        Returns the orientation of the dimension in annotation plane.

        :type theDir: OCC.wrapper.gp.gp_Dir
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_GetDirection(self, *args)


    def SetDirection(self, *args):
        """
        SetDirection(Handle_XCAFDimTolObjects_DimensionObject self, gp_Dir theDir) -> Standard_Boolean

        Sets an orientation of the dimension in annotation plane.

        :type theDir: OCC.wrapper.gp.gp_Dir
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_SetDirection(self, *args)


    def SetPointTextAttach(self, *args):
        """
        SetPointTextAttach(Handle_XCAFDimTolObjects_DimensionObject self, gp_Pnt thePntText)

        Sets position of the dimension text.

        :type thePntText: OCC.wrapper.gp.gp_Pnt

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_SetPointTextAttach(self, *args)


    def GetPointTextAttach(self, *args):
        """
        Returns position of the dimension text.

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        res = _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_GetPointTextAttach(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasTextPoint(self, *args):
        """
        HasTextPoint(Handle_XCAFDimTolObjects_DimensionObject self) -> Standard_Boolean

        Returns True if the position of dimension text is specified.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_HasTextPoint(self, *args)


    def SetPlane(self, *args):
        """
        SetPlane(Handle_XCAFDimTolObjects_DimensionObject self, gp_Ax2 thePlane)

        Sets annotation plane.

        :type thePlane: OCC.wrapper.gp.gp_Ax2

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_SetPlane(self, *args)


    def GetPlane(self, *args):
        """
        Returns annotation plane.

        :rtype: OCC.wrapper.gp.gp_Ax2

        """
        res = _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_GetPlane(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasPlane(self, *args):
        """
        HasPlane(Handle_XCAFDimTolObjects_DimensionObject self) -> Standard_Boolean

        Returns True if the object has annotation plane.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_HasPlane(self, *args)


    def HasPoint(self, *args):
        """
        HasPoint(Handle_XCAFDimTolObjects_DimensionObject self) -> Standard_Boolean

        Returns true, if connection point exists (for dimesional_size),
        if connection point for the first shape exists (for dimensional_location).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_HasPoint(self, *args)


    def HasPoint2(self, *args):
        """
        HasPoint2(Handle_XCAFDimTolObjects_DimensionObject self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_HasPoint2(self, *args)


    def SetPoint(self, *args):
        """
        SetPoint(Handle_XCAFDimTolObjects_DimensionObject self, gp_Pnt thePnt)

        Set connection point (for dimesional_size),
        Set connection point for the first shape (for dimensional_location).

        :type thePnt: OCC.wrapper.gp.gp_Pnt

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_SetPoint(self, *args)


    def SetPoint2(self, *args):
        """
        SetPoint2(Handle_XCAFDimTolObjects_DimensionObject self, gp_Pnt thePnt)

        :type thePnt: OCC.wrapper.gp.gp_Pnt

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_SetPoint2(self, *args)


    def GetPoint(self, *args):
        """
        GetPoint(Handle_XCAFDimTolObjects_DimensionObject self) -> gp_Pnt

        Get connection point (for dimesional_size),
        Get connection point for the first shape (for dimensional_location).

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_GetPoint(self, *args)


    def GetPoint2(self, *args):
        """
        GetPoint2(Handle_XCAFDimTolObjects_DimensionObject self) -> gp_Pnt

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_GetPoint2(self, *args)


    def SetPresentation(self, *args):
        """
        SetPresentation(Handle_XCAFDimTolObjects_DimensionObject self, TopoDS_Shape thePresentation, Handle_TCollection_HAsciiString thePresentationName)

        Set graphical presentation for the object.

        :type thePresentation: OCC.wrapper.TopoDS.TopoDS_Shape
        :type thePresentationName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_SetPresentation(self, *args)


    def GetPresentation(self, *args):
        """
        GetPresentation(Handle_XCAFDimTolObjects_DimensionObject self) -> TopoDS_Shape

        Returns graphical presentation of the object.

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_GetPresentation(self, *args)


    def GetPresentationName(self, *args):
        """
        GetPresentationName(Handle_XCAFDimTolObjects_DimensionObject self) -> Handle_TCollection_HAsciiString

        Returns graphical presentation of the object

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_GetPresentationName(self, *args)


    def HasDescriptions(self, *args):
        """
        HasDescriptions(Handle_XCAFDimTolObjects_DimensionObject self) -> Standard_Boolean

        Returns true, if the object has descriptions.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_HasDescriptions(self, *args)


    def NbDescriptions(self, *args):
        """
        NbDescriptions(Handle_XCAFDimTolObjects_DimensionObject self) -> Standard_Integer

        Returns number of descriptions.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_NbDescriptions(self, *args)


    def GetDescription(self, *args):
        """
        GetDescription(Handle_XCAFDimTolObjects_DimensionObject self, Standard_Integer const theNumber) -> Handle_TCollection_HAsciiString

        Returns description with the given number.

        :type theNumber: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_GetDescription(self, *args)


    def GetDescriptionName(self, *args):
        """
        GetDescriptionName(Handle_XCAFDimTolObjects_DimensionObject self, Standard_Integer const theNumber) -> Handle_TCollection_HAsciiString

        Returns name of description with the given number.

        :type theNumber: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_GetDescriptionName(self, *args)


    def RemoveDescription(self, *args):
        """
        RemoveDescription(Handle_XCAFDimTolObjects_DimensionObject self, Standard_Integer const theNumber)

        Remove description with the given number.

        :type theNumber: int

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_RemoveDescription(self, *args)


    def AddDescription(self, *args):
        """
        AddDescription(Handle_XCAFDimTolObjects_DimensionObject self, Handle_TCollection_HAsciiString theDescription, Handle_TCollection_HAsciiString theName)

        Add new description.

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_AddDescription(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XCAFDimTolObjects_DimensionObject self) -> char const *

        :rtype: const char *

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XCAFDimTolObjects_DimensionObject self)

        Memory deallocator for transient classes


        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XCAFDimTolObjects_DimensionObject self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XCAFDimTolObjects_DimensionObject self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XCAFDimTolObjects_DimensionObject self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XCAFDimTolObjects_DimensionObject self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XCAFDimTolObjects_DimensionObject self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XCAFDimTolObjects_DimensionObject self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XCAFDimTolObjects_DimensionObject self)

        Increments the reference counter of this object


        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XCAFDimTolObjects_DimensionObject self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_DecrementRefCounter(self, *args)

Handle_XCAFDimTolObjects_DimensionObject_swigregister = _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_swigregister
Handle_XCAFDimTolObjects_DimensionObject_swigregister(Handle_XCAFDimTolObjects_DimensionObject)

def Handle_XCAFDimTolObjects_DimensionObject_DownCast(thing):
    return _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_DownCast(thing)
Handle_XCAFDimTolObjects_DimensionObject_DownCast = _XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject_DownCast



