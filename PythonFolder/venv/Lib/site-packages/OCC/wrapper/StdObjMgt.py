# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_StdObjMgt')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_StdObjMgt')
    _StdObjMgt = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StdObjMgt', [dirname(__file__)])
        except ImportError:
            import _StdObjMgt
            return _StdObjMgt
        try:
            _mod = imp.load_module('_StdObjMgt', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _StdObjMgt = swig_import_helper()
    del swig_import_helper
else:
    import _StdObjMgt
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StdObjMgt.delete_SwigPyIterator

    def value(self):
        return _StdObjMgt.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _StdObjMgt.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _StdObjMgt.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _StdObjMgt.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _StdObjMgt.SwigPyIterator_equal(self, x)

    def copy(self):
        return _StdObjMgt.SwigPyIterator_copy(self)

    def next(self):
        return _StdObjMgt.SwigPyIterator_next(self)

    def __next__(self):
        return _StdObjMgt.SwigPyIterator___next__(self)

    def previous(self):
        return _StdObjMgt.SwigPyIterator_previous(self)

    def advance(self, n):
        return _StdObjMgt.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _StdObjMgt.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _StdObjMgt.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _StdObjMgt.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _StdObjMgt.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _StdObjMgt.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _StdObjMgt.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _StdObjMgt.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _StdObjMgt.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_StdObjMgt.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _StdObjMgt.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _StdObjMgt.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StdObjMgt.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _StdObjMgt.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _StdObjMgt.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _StdObjMgt.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _StdObjMgt.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_StdObjMgt.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _StdObjMgt.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _StdObjMgt.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StdObjMgt.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _StdObjMgt.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _StdObjMgt.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _StdObjMgt.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _StdObjMgt.ptr_to_number(item)
ptr_to_number = _StdObjMgt.ptr_to_number

def HashCode(*args):
    return _StdObjMgt.HashCode(*args)
HashCode = _StdObjMgt.HashCode

def ptr_equal(a, b):
    return _StdObjMgt.ptr_equal(a, b)
ptr_equal = _StdObjMgt.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Storage
else:
    import Storage
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDF
else:
    import TDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDocStd
else:
    import TDocStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import CDF
else:
    import CDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import CDM
else:
    import CDM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Resource
else:
    import Resource
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import PCDM
else:
    import PCDM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import LDOM
else:
    import LDOM
del _swig_python_version_info
class StdObjMgt_Persistent(Standard.Standard_Transient):
    """
    Root class for a temporary persistent object that reads data from a file
    and then creates transient object using the data.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StdObjMgt_Persistent
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StdObjMgt_Persistent(self) 
            return h


    def Read(self, *args):
        """
        Read(StdObjMgt_Persistent self, StdObjMgt_ReadData theReadData)

        Read persistent data from a file.

        :type theReadData: OCC.wrapper.StdObjMgt.StdObjMgt_ReadData

        """
        return _StdObjMgt.StdObjMgt_Persistent_Read(self, *args)


    def Write(self, *args):
        """
        Write(StdObjMgt_Persistent self, StdObjMgt_WriteData theWriteData)

        Write persistent data to a file.

        :type theWriteData: OCC.wrapper.StdObjMgt.StdObjMgt_WriteData

        """
        return _StdObjMgt.StdObjMgt_Persistent_Write(self, *args)


    def PChildren(self, *args):
        """
        PChildren(StdObjMgt_Persistent self, NCollection_Sequence_Handle_StdObjMgt_Persistent arg2)

        Gets persistent child objects

        :type : SequenceOfPersistent

        """
        return _StdObjMgt.StdObjMgt_Persistent_PChildren(self, *args)


    def PName(self, *args):
        """
        PName(StdObjMgt_Persistent self) -> Standard_CString

        Returns persistent type name

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StdObjMgt.StdObjMgt_Persistent_PName(self, *args)


    def ImportDocument(self, *args):
        """
        ImportDocument(StdObjMgt_Persistent self, Handle_TDocStd_Document theDocument)

        Import transient document from the persistent data
        (to be overriden by document class;
        does nothing by default for other classes).

        :type theDocument: OCC.wrapper.TDocStd.Handle_TDocStd_Document

        """
        return _StdObjMgt.StdObjMgt_Persistent_ImportDocument(self, *args)


    def CreateAttribute(self, *args):
        """
        CreateAttribute(StdObjMgt_Persistent self) -> Handle_TDF_Attribute

        Create an empty transient attribuite
        (to be overriden by attribute classes;
        does nothing and returns a null handle by default for other classes).

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _StdObjMgt.StdObjMgt_Persistent_CreateAttribute(self, *args)


    def GetAttribute(self, *args):
        """
        GetAttribute(StdObjMgt_Persistent self) -> Handle_TDF_Attribute

        Get transient attribuite for the persistent data
        (to be overriden by attribute classes;
        returns a null handle by default for non-attribute classes).

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _StdObjMgt.StdObjMgt_Persistent_GetAttribute(self, *args)


    def ImportAttribute(self, *args):
        """
        ImportAttribute(StdObjMgt_Persistent self)

        Import transient attribuite from the persistent data
        (to be overriden by attribute classes;
        does nothing by default for non-attribute classes).


        """
        return _StdObjMgt.StdObjMgt_Persistent_ImportAttribute(self, *args)


    def AsciiString(self, *args):
        """
        AsciiString(StdObjMgt_Persistent self) -> Handle_TCollection_HAsciiString

        Get referenced ASCII string
        (to be overriden by ASCII string class;
        returns a null handle by default for other classes).

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StdObjMgt.StdObjMgt_Persistent_AsciiString(self, *args)


    def ExtString(self, *args):
        """
        ExtString(StdObjMgt_Persistent self) -> Handle_TCollection_HExtendedString

        Get referenced extended string
        (to be overriden by extended string class;
        returns a null handle by default for other classes).

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HExtendedString

        """
        return _StdObjMgt.StdObjMgt_Persistent_ExtString(self, *args)


    def Label(self, *args):
        """
        Label(StdObjMgt_Persistent self, Handle_TDF_Data theDF) -> TDF_Label

        Get a label expressed by referenced extended string
        (to be overriden by extended string class;
        returns a null label by default for other classes).

        :type theDF: OCC.wrapper.TDF.Handle_TDF_Data
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _StdObjMgt.StdObjMgt_Persistent_Label(self, *args)


    def TypeNum(self, *args):
        """
        TypeNum(StdObjMgt_Persistent self) -> Standard_Integer
        TypeNum(StdObjMgt_Persistent self, Standard_Integer theTypeNum)

        Assigns a persistent type number to the object

        :type theTypeNum: int

        """
        return _StdObjMgt.StdObjMgt_Persistent_TypeNum(self, *args)


    def RefNum(self, *args):
        """
        RefNum(StdObjMgt_Persistent self) -> Standard_Integer
        RefNum(StdObjMgt_Persistent self, Standard_Integer theRefNum)

        Sets an object reference number

        :type theRefNum: int

        """
        return _StdObjMgt.StdObjMgt_Persistent_RefNum(self, *args)

    __swig_destroy__ = _StdObjMgt.delete_StdObjMgt_Persistent
StdObjMgt_Persistent_swigregister = _StdObjMgt.StdObjMgt_Persistent_swigregister
StdObjMgt_Persistent_swigregister(StdObjMgt_Persistent)

class StdObjMgt_WriteData(object):
    """Auxiliary data used to write persistent objects to a file."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdObjMgt_WriteData self, Storage_BaseDriver theDriver) -> StdObjMgt_WriteData

        :type theDriver: OCC.wrapper.Storage.Storage_BaseDriver

        """
        this = _StdObjMgt.new_StdObjMgt_WriteData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def WritePersistentObject(self, *args):
        """
        WritePersistentObject(StdObjMgt_WriteData self,  thePersistent)

        :type thePersistent: OCC.wrapper.StdObjMgt.Handle_StdObjMgt_Persistent

        """
        return _StdObjMgt.StdObjMgt_WriteData_WritePersistentObject(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(StdObjMgt_WriteData self,  thePersistent) -> StdObjMgt_WriteData
        __lshift__(StdObjMgt_WriteData self, Standard_Character const & theValue) -> StdObjMgt_WriteData
        __lshift__(StdObjMgt_WriteData self, Standard_ExtCharacter const & theValue) -> StdObjMgt_WriteData
        __lshift__(StdObjMgt_WriteData self, Standard_Integer const & theValue) -> StdObjMgt_WriteData
        __lshift__(StdObjMgt_WriteData self, Standard_Boolean const & theValue) -> StdObjMgt_WriteData
        __lshift__(StdObjMgt_WriteData self, Standard_Real const & theValue) -> StdObjMgt_WriteData
        __lshift__(StdObjMgt_WriteData self, Standard_ShortReal const & theValue) -> StdObjMgt_WriteData

        :type theValue: float
        :rtype: OCC.wrapper.StdObjMgt.StdObjMgt_WriteData

        """
        return _StdObjMgt.StdObjMgt_WriteData___lshift__(self, *args)

    __swig_destroy__ = _StdObjMgt.delete_StdObjMgt_WriteData
StdObjMgt_WriteData_swigregister = _StdObjMgt.StdObjMgt_WriteData_swigregister
StdObjMgt_WriteData_swigregister(StdObjMgt_WriteData)

class StdObjMgt_ReadData(object):
    """Auxiliary data used to read persistent objects from a file."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StdObjMgt_ReadData self, Storage_BaseDriver theDriver, Standard_Integer const theNumberOfObjects) -> StdObjMgt_ReadData

        :type theDriver: OCC.wrapper.Storage.Storage_BaseDriver
        :type theNumberOfObjects: int

        """
        this = _StdObjMgt.new_StdObjMgt_ReadData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadPersistentObject(self, *args):
        """
        ReadPersistentObject(StdObjMgt_ReadData self, Standard_Integer const theRef)

        :type theRef: int

        """
        return _StdObjMgt.StdObjMgt_ReadData_ReadPersistentObject(self, *args)


    def PersistentObject(self, *args):
        """
        PersistentObject(StdObjMgt_ReadData self, Standard_Integer const theRef)

        :type theRef: int
        :rtype: OCC.wrapper.StdObjMgt.Handle_StdObjMgt_Persistent

        """
        return _StdObjMgt.StdObjMgt_ReadData_PersistentObject(self, *args)


    def ReadReference(self, *args):
        """
        ReadReference(StdObjMgt_ReadData self)

        :rtype: OCC.wrapper.StdObjMgt.Handle_StdObjMgt_Persistent

        """
        return _StdObjMgt.StdObjMgt_ReadData_ReadReference(self, *args)


    def __rshift__(self, *args):
        """
        __rshift__(StdObjMgt_ReadData self,  theTarget) -> StdObjMgt_ReadData
        __rshift__(StdObjMgt_ReadData self) -> StdObjMgt_ReadData
        __rshift__(StdObjMgt_ReadData self) -> StdObjMgt_ReadData
        __rshift__(StdObjMgt_ReadData self) -> StdObjMgt_ReadData
        __rshift__(StdObjMgt_ReadData self) -> StdObjMgt_ReadData
        __rshift__(StdObjMgt_ReadData self) -> StdObjMgt_ReadData
        __rshift__(StdObjMgt_ReadData self) -> StdObjMgt_ReadData

        :type theValue: float
        :rtype: OCC.wrapper.StdObjMgt.StdObjMgt_ReadData

        """
        return _StdObjMgt.StdObjMgt_ReadData___rshift__(self, *args)

    __swig_destroy__ = _StdObjMgt.delete_StdObjMgt_ReadData
StdObjMgt_ReadData_swigregister = _StdObjMgt.StdObjMgt_ReadData_swigregister
StdObjMgt_ReadData_swigregister(StdObjMgt_ReadData)

class StdObjMgt_MapOfInstantiators(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _StdObjMgt.new_StdObjMgt_MapOfInstantiators()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StdObjMgt.delete_StdObjMgt_MapOfInstantiators
StdObjMgt_MapOfInstantiators_swigregister = _StdObjMgt.StdObjMgt_MapOfInstantiators_swigregister
StdObjMgt_MapOfInstantiators_swigregister(StdObjMgt_MapOfInstantiators)

class NCollection_Sequence_Handle_StdObjMgt_Persistent(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_Handle_StdObjMgt_Persistent self) -> NCollection_Sequence< handle< StdObjMgt_Persistent > >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _StdObjMgt.NCollection_Sequence_Handle_StdObjMgt_Persistent_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_Handle_StdObjMgt_Persistent self) -> NCollection_Sequence< handle< StdObjMgt_Persistent > >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _StdObjMgt.NCollection_Sequence_Handle_StdObjMgt_Persistent_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_Handle_StdObjMgt_Persistent self) -> NCollection_Sequence< handle< StdObjMgt_Persistent > >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _StdObjMgt.NCollection_Sequence_Handle_StdObjMgt_Persistent_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_Handle_StdObjMgt_Persistent self) -> NCollection_Sequence< handle< StdObjMgt_Persistent > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _StdObjMgt.NCollection_Sequence_Handle_StdObjMgt_Persistent_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _StdObjMgt.new_NCollection_Sequence_Handle_StdObjMgt_Persistent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_Handle_StdObjMgt_Persistent self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdObjMgt.NCollection_Sequence_Handle_StdObjMgt_Persistent_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_Handle_StdObjMgt_Persistent self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdObjMgt.NCollection_Sequence_Handle_StdObjMgt_Persistent_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_Handle_StdObjMgt_Persistent self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdObjMgt.NCollection_Sequence_Handle_StdObjMgt_Persistent_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_Handle_StdObjMgt_Persistent self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdObjMgt.NCollection_Sequence_Handle_StdObjMgt_Persistent_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_Handle_StdObjMgt_Persistent self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdObjMgt.NCollection_Sequence_Handle_StdObjMgt_Persistent_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_Handle_StdObjMgt_Persistent self)

        Reverse sequence


        """
        return _StdObjMgt.NCollection_Sequence_Handle_StdObjMgt_Persistent_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_Handle_StdObjMgt_Persistent self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _StdObjMgt.NCollection_Sequence_Handle_StdObjMgt_Persistent_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _StdObjMgt.NCollection_Sequence_Handle_StdObjMgt_Persistent_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_Handle_StdObjMgt_Persistent self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _StdObjMgt.NCollection_Sequence_Handle_StdObjMgt_Persistent_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_Handle_StdObjMgt_Persistent self, NCollection_Sequence_Handle_StdObjMgt_Persistent theOther) -> NCollection_Sequence_Handle_StdObjMgt_Persistent

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StdObjMgt.NCollection_Sequence_Handle_StdObjMgt_Persistent_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_Handle_StdObjMgt_Persistent self, NCollection_Sequence_Handle_StdObjMgt_Persistent theOther) -> NCollection_Sequence_Handle_StdObjMgt_Persistent

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StdObjMgt.NCollection_Sequence_Handle_StdObjMgt_Persistent_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_Handle_StdObjMgt_Persistent self, NCollection_Sequence< handle< StdObjMgt_Persistent > >::Iterator & thePosition)
        Remove(NCollection_Sequence_Handle_StdObjMgt_Persistent self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_Handle_StdObjMgt_Persistent self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _StdObjMgt.NCollection_Sequence_Handle_StdObjMgt_Persistent_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_Handle_StdObjMgt_Persistent self,  theItem)
        Append(NCollection_Sequence_Handle_StdObjMgt_Persistent self, NCollection_Sequence_Handle_StdObjMgt_Persistent theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StdObjMgt.NCollection_Sequence_Handle_StdObjMgt_Persistent_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_Handle_StdObjMgt_Persistent self,  theItem)
        Prepend(NCollection_Sequence_Handle_StdObjMgt_Persistent self, NCollection_Sequence_Handle_StdObjMgt_Persistent theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StdObjMgt.NCollection_Sequence_Handle_StdObjMgt_Persistent_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_Handle_StdObjMgt_Persistent self, Standard_Integer const theIndex,  theItem)
        InsertBefore(NCollection_Sequence_Handle_StdObjMgt_Persistent self, Standard_Integer const theIndex, NCollection_Sequence_Handle_StdObjMgt_Persistent theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StdObjMgt.NCollection_Sequence_Handle_StdObjMgt_Persistent_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_Handle_StdObjMgt_Persistent self, NCollection_Sequence< handle< StdObjMgt_Persistent > >::Iterator & thePosition,  theItem)
        InsertAfter(NCollection_Sequence_Handle_StdObjMgt_Persistent self, Standard_Integer const theIndex, NCollection_Sequence_Handle_StdObjMgt_Persistent theSeq)
        InsertAfter(NCollection_Sequence_Handle_StdObjMgt_Persistent self, Standard_Integer const theIndex,  theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StdObjMgt.NCollection_Sequence_Handle_StdObjMgt_Persistent_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_Handle_StdObjMgt_Persistent self, Standard_Integer const theIndex, NCollection_Sequence_Handle_StdObjMgt_Persistent theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StdObjMgt.NCollection_Sequence_Handle_StdObjMgt_Persistent_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _StdObjMgt.NCollection_Sequence_Handle_StdObjMgt_Persistent_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_Handle_StdObjMgt_Persistent self)

        First item access

        :rtype: TheItemType &

        """
        return _StdObjMgt.NCollection_Sequence_Handle_StdObjMgt_Persistent_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _StdObjMgt.NCollection_Sequence_Handle_StdObjMgt_Persistent_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_Handle_StdObjMgt_Persistent self)

        Last item access

        :rtype: TheItemType &

        """
        return _StdObjMgt.NCollection_Sequence_Handle_StdObjMgt_Persistent_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StdObjMgt.NCollection_Sequence_Handle_StdObjMgt_Persistent_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_Handle_StdObjMgt_Persistent self, Standard_Integer const theIndex)

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StdObjMgt.NCollection_Sequence_Handle_StdObjMgt_Persistent_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StdObjMgt.NCollection_Sequence_Handle_StdObjMgt_Persistent___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_Handle_StdObjMgt_Persistent self, Standard_Integer const theIndex,  theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StdObjMgt.NCollection_Sequence_Handle_StdObjMgt_Persistent_SetValue(self, *args)


    def __iter__(self):
        return _StdObjMgt.NCollection_Sequence_Handle_StdObjMgt_Persistent___iter__(self)
    __swig_destroy__ = _StdObjMgt.delete_NCollection_Sequence_Handle_StdObjMgt_Persistent
NCollection_Sequence_Handle_StdObjMgt_Persistent_swigregister = _StdObjMgt.NCollection_Sequence_Handle_StdObjMgt_Persistent_swigregister
NCollection_Sequence_Handle_StdObjMgt_Persistent_swigregister(NCollection_Sequence_Handle_StdObjMgt_Persistent)

def NCollection_Sequence_Handle_StdObjMgt_Persistent_delNode(*args):
    """
    NCollection_Sequence_Handle_StdObjMgt_Persistent_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _StdObjMgt.NCollection_Sequence_Handle_StdObjMgt_Persistent_delNode(*args)

class NCollection_Sequence_Handle_StdObjMgt_Persistent_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _StdObjMgt.new_NCollection_Sequence_Handle_StdObjMgt_Persistent_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StdObjMgt.delete_NCollection_Sequence_Handle_StdObjMgt_Persistent_IteratorHelper

    def __next__(self):
        return _StdObjMgt.NCollection_Sequence_Handle_StdObjMgt_Persistent_IteratorHelper___next__(self)
NCollection_Sequence_Handle_StdObjMgt_Persistent_IteratorHelper_swigregister = _StdObjMgt.NCollection_Sequence_Handle_StdObjMgt_Persistent_IteratorHelper_swigregister
NCollection_Sequence_Handle_StdObjMgt_Persistent_IteratorHelper_swigregister(NCollection_Sequence_Handle_StdObjMgt_Persistent_IteratorHelper)


try:
	SequenceOfPersistent = NCollection_Sequence_Handle_StdObjMgt_Persistent
except NameError:
	pass # does not exist, probably ignored

class StdObjMgt_SharedObject(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _StdObjMgt.new_StdObjMgt_SharedObject()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StdObjMgt.delete_StdObjMgt_SharedObject
StdObjMgt_SharedObject_swigregister = _StdObjMgt.StdObjMgt_SharedObject_swigregister
StdObjMgt_SharedObject_swigregister(StdObjMgt_SharedObject)



