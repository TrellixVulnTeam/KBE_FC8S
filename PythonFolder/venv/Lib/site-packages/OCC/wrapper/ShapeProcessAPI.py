# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ShapeProcessAPI')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ShapeProcessAPI')
    _ShapeProcessAPI = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ShapeProcessAPI', [dirname(__file__)])
        except ImportError:
            import _ShapeProcessAPI
            return _ShapeProcessAPI
        try:
            _mod = imp.load_module('_ShapeProcessAPI', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ShapeProcessAPI = swig_import_helper()
    del swig_import_helper
else:
    import _ShapeProcessAPI
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ShapeProcessAPI.delete_SwigPyIterator

    def value(self):
        return _ShapeProcessAPI.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ShapeProcessAPI.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ShapeProcessAPI.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ShapeProcessAPI.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ShapeProcessAPI.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ShapeProcessAPI.SwigPyIterator_copy(self)

    def next(self):
        return _ShapeProcessAPI.SwigPyIterator_next(self)

    def __next__(self):
        return _ShapeProcessAPI.SwigPyIterator___next__(self)

    def previous(self):
        return _ShapeProcessAPI.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ShapeProcessAPI.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ShapeProcessAPI.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ShapeProcessAPI.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ShapeProcessAPI.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ShapeProcessAPI.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ShapeProcessAPI.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ShapeProcessAPI.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _ShapeProcessAPI.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _ShapeProcessAPI.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_ShapeProcessAPI.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _ShapeProcessAPI.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _ShapeProcessAPI.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ShapeProcessAPI.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _ShapeProcessAPI.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _ShapeProcessAPI.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _ShapeProcessAPI.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _ShapeProcessAPI.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_ShapeProcessAPI.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _ShapeProcessAPI.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _ShapeProcessAPI.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ShapeProcessAPI.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _ShapeProcessAPI.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _ShapeProcessAPI.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _ShapeProcessAPI.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _ShapeProcessAPI.ptr_to_number(item)
ptr_to_number = _ShapeProcessAPI.ptr_to_number

def HashCode(*args):
    return _ShapeProcessAPI.HashCode(*args)
HashCode = _ShapeProcessAPI.HashCode

def ptr_equal(a, b):
    return _ShapeProcessAPI.ptr_equal(a, b)
ptr_equal = _ShapeProcessAPI.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import ShapeProcess
else:
    import ShapeProcess
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Resource
else:
    import Resource
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import ShapeBuild
else:
    import ShapeBuild
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import ShapeExtend
else:
    import ShapeExtend
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColGeom
else:
    import TColGeom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepTools
else:
    import BRepTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Poly
else:
    import Poly
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TShort
else:
    import TShort
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRep
else:
    import BRep
del _swig_python_version_info
class ShapeProcessAPI_ApplySequence(object):
    """Applies one of the sequence read from resource file."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ShapeProcessAPI_ApplySequence self, Standard_CString const rscName, Standard_CString const seqName) -> ShapeProcessAPI_ApplySequence

        Creates an object and loads resource file and sequence of
        operators given by their names.

        :type rscName: OCC.wrapper.Standard.Standard_CString
        :type seqName: OCC.wrapper.Standard.Standard_CString

        """
        this = _ShapeProcessAPI.new_ShapeProcessAPI_ApplySequence(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Context(self, *args):
        """
        Context(ShapeProcessAPI_ApplySequence self) -> Handle_ShapeProcess_ShapeContext

        Returns object for managing resource file and sequence of
        operators.

        :rtype: OCC.wrapper.ShapeProcess.Handle_ShapeProcess_ShapeContext

        """
        return _ShapeProcessAPI.ShapeProcessAPI_ApplySequence_Context(self, *args)


    def PrepareShape(self, *args):
        """
        PrepareShape(ShapeProcessAPI_ApplySequence self, TopoDS_Shape shape, Standard_Boolean const fillmap, TopAbs_ShapeEnum const until=TopAbs_SHAPE) -> TopoDS_Shape

        Performs sequence of operators stored in myRsc.
        If <fillmap> is True adds history "shape-shape" into myMap
        for shape and its subshapes until level <until> (included).
        If <until> is TopAbs_SHAPE,  all the subshapes are considered.

        :type shape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type fillmap: bool
        :type until: OCC.wrapper.TopAbs.TopAbs_ShapeEnum
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _ShapeProcessAPI.ShapeProcessAPI_ApplySequence_PrepareShape(self, *args)


    def ClearMap(self, *args):
        """
        ClearMap(ShapeProcessAPI_ApplySequence self)

        Clears myMap with accumulated history.


        """
        return _ShapeProcessAPI.ShapeProcessAPI_ApplySequence_ClearMap(self, *args)


    def Map(self, *args):
        """
        Returns myMap with accumulated history.

        :rtype: OCC.wrapper.TopTools.TopTools_DataMapOfShapeShape

        """
        res = _ShapeProcessAPI.ShapeProcessAPI_ApplySequence_Map(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PrintPreparationResult(self, *args):
        """
        PrintPreparationResult(ShapeProcessAPI_ApplySequence self)

        Prints result of preparation onto the messenger of the context.
        Note that results can be accumulated from previous preparations
        it method ClearMap was not called before PrepareShape.


        """
        return _ShapeProcessAPI.ShapeProcessAPI_ApplySequence_PrintPreparationResult(self, *args)

    __swig_destroy__ = _ShapeProcessAPI.delete_ShapeProcessAPI_ApplySequence
ShapeProcessAPI_ApplySequence_swigregister = _ShapeProcessAPI.ShapeProcessAPI_ApplySequence_swigregister
ShapeProcessAPI_ApplySequence_swigregister(ShapeProcessAPI_ApplySequence)



