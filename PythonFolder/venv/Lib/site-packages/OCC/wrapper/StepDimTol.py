# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_StepDimTol')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_StepDimTol')
    _StepDimTol = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StepDimTol', [dirname(__file__)])
        except ImportError:
            import _StepDimTol
            return _StepDimTol
        try:
            _mod = imp.load_module('_StepDimTol', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _StepDimTol = swig_import_helper()
    del swig_import_helper
else:
    import _StepDimTol
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StepDimTol.delete_SwigPyIterator

    def value(self):
        return _StepDimTol.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _StepDimTol.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _StepDimTol.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _StepDimTol.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _StepDimTol.SwigPyIterator_equal(self, x)

    def copy(self):
        return _StepDimTol.SwigPyIterator_copy(self)

    def next(self):
        return _StepDimTol.SwigPyIterator_next(self)

    def __next__(self):
        return _StepDimTol.SwigPyIterator___next__(self)

    def previous(self):
        return _StepDimTol.SwigPyIterator_previous(self)

    def advance(self, n):
        return _StepDimTol.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _StepDimTol.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _StepDimTol.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _StepDimTol.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _StepDimTol.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _StepDimTol.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _StepDimTol.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _StepDimTol.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _StepDimTol.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_StepDimTol.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _StepDimTol.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _StepDimTol.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StepDimTol.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _StepDimTol.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _StepDimTol.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _StepDimTol.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _StepDimTol.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_StepDimTol.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _StepDimTol.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _StepDimTol.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StepDimTol.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _StepDimTol.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _StepDimTol.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _StepDimTol.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _StepDimTol.ptr_to_number(item)
ptr_to_number = _StepDimTol.ptr_to_number

def HashCode(*args):
    return _StepDimTol.HashCode(*args)
HashCode = _StepDimTol.HashCode

def ptr_equal(a, b):
    return _StepDimTol.ptr_equal(a, b)
ptr_equal = _StepDimTol.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepBasic
else:
    import StepBasic
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepData
else:
    import StepData
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepShape
else:
    import StepShape
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepGeom
else:
    import StepGeom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepRepr
else:
    import StepRepr
del _swig_python_version_info
StepDimTol_Circular = _StepDimTol.StepDimTol_Circular
StepDimTol_Rectangular = _StepDimTol.StepDimTol_Rectangular
StepDimTol_Square = _StepDimTol.StepDimTol_Square
StepDimTol_CircularOrCylindrical = _StepDimTol.StepDimTol_CircularOrCylindrical
StepDimTol_Distance = _StepDimTol.StepDimTol_Distance
StepDimTol_Projected = _StepDimTol.StepDimTol_Projected
StepDimTol_Spherical = _StepDimTol.StepDimTol_Spherical
StepDimTol_SDRMAnyCrossSection = _StepDimTol.StepDimTol_SDRMAnyCrossSection
StepDimTol_SDRMAnyLongitudinalSection = _StepDimTol.StepDimTol_SDRMAnyLongitudinalSection
StepDimTol_SDRMBasic = _StepDimTol.StepDimTol_SDRMBasic
StepDimTol_SDRMContactingFeature = _StepDimTol.StepDimTol_SDRMContactingFeature
StepDimTol_SDRMDegreeOfFreedomConstraintU = _StepDimTol.StepDimTol_SDRMDegreeOfFreedomConstraintU
StepDimTol_SDRMDegreeOfFreedomConstraintV = _StepDimTol.StepDimTol_SDRMDegreeOfFreedomConstraintV
StepDimTol_SDRMDegreeOfFreedomConstraintW = _StepDimTol.StepDimTol_SDRMDegreeOfFreedomConstraintW
StepDimTol_SDRMDegreeOfFreedomConstraintX = _StepDimTol.StepDimTol_SDRMDegreeOfFreedomConstraintX
StepDimTol_SDRMDegreeOfFreedomConstraintY = _StepDimTol.StepDimTol_SDRMDegreeOfFreedomConstraintY
StepDimTol_SDRMDegreeOfFreedomConstraintZ = _StepDimTol.StepDimTol_SDRMDegreeOfFreedomConstraintZ
StepDimTol_SDRMDistanceVariable = _StepDimTol.StepDimTol_SDRMDistanceVariable
StepDimTol_SDRMFreeState = _StepDimTol.StepDimTol_SDRMFreeState
StepDimTol_SDRMLeastMaterialRequirement = _StepDimTol.StepDimTol_SDRMLeastMaterialRequirement
StepDimTol_SDRMLine = _StepDimTol.StepDimTol_SDRMLine
StepDimTol_SDRMMajorDiameter = _StepDimTol.StepDimTol_SDRMMajorDiameter
StepDimTol_SDRMMaximumMaterialRequirement = _StepDimTol.StepDimTol_SDRMMaximumMaterialRequirement
StepDimTol_SDRMMinorDiameter = _StepDimTol.StepDimTol_SDRMMinorDiameter
StepDimTol_SDRMOrientation = _StepDimTol.StepDimTol_SDRMOrientation
StepDimTol_SDRMPitchDiameter = _StepDimTol.StepDimTol_SDRMPitchDiameter
StepDimTol_SDRMPlane = _StepDimTol.StepDimTol_SDRMPlane
StepDimTol_SDRMPoint = _StepDimTol.StepDimTol_SDRMPoint
StepDimTol_SDRMTranslation = _StepDimTol.StepDimTol_SDRMTranslation
StepDimTol_GTMAnyCrossSection = _StepDimTol.StepDimTol_GTMAnyCrossSection
StepDimTol_GTMCommonZone = _StepDimTol.StepDimTol_GTMCommonZone
StepDimTol_GTMEachRadialElement = _StepDimTol.StepDimTol_GTMEachRadialElement
StepDimTol_GTMFreeState = _StepDimTol.StepDimTol_GTMFreeState
StepDimTol_GTMLeastMaterialRequirement = _StepDimTol.StepDimTol_GTMLeastMaterialRequirement
StepDimTol_GTMLineElement = _StepDimTol.StepDimTol_GTMLineElement
StepDimTol_GTMMajorDiameter = _StepDimTol.StepDimTol_GTMMajorDiameter
StepDimTol_GTMMaximumMaterialRequirement = _StepDimTol.StepDimTol_GTMMaximumMaterialRequirement
StepDimTol_GTMMinorDiameter = _StepDimTol.StepDimTol_GTMMinorDiameter
StepDimTol_GTMNotConvex = _StepDimTol.StepDimTol_GTMNotConvex
StepDimTol_GTMPitchDiameter = _StepDimTol.StepDimTol_GTMPitchDiameter
StepDimTol_GTMReciprocityRequirement = _StepDimTol.StepDimTol_GTMReciprocityRequirement
StepDimTol_GTMSeparateRequirement = _StepDimTol.StepDimTol_GTMSeparateRequirement
StepDimTol_GTMStatisticalTolerance = _StepDimTol.StepDimTol_GTMStatisticalTolerance
StepDimTol_GTMTangentPlane = _StepDimTol.StepDimTol_GTMTangentPlane
StepDimTol_GTTAngularityTolerance = _StepDimTol.StepDimTol_GTTAngularityTolerance
StepDimTol_GTTCircularRunoutTolerance = _StepDimTol.StepDimTol_GTTCircularRunoutTolerance
StepDimTol_GTTCoaxialityTolerance = _StepDimTol.StepDimTol_GTTCoaxialityTolerance
StepDimTol_GTTConcentricityTolerance = _StepDimTol.StepDimTol_GTTConcentricityTolerance
StepDimTol_GTTCylindricityTolerance = _StepDimTol.StepDimTol_GTTCylindricityTolerance
StepDimTol_GTTFlatnessTolerance = _StepDimTol.StepDimTol_GTTFlatnessTolerance
StepDimTol_GTTLineProfileTolerance = _StepDimTol.StepDimTol_GTTLineProfileTolerance
StepDimTol_GTTParallelismTolerance = _StepDimTol.StepDimTol_GTTParallelismTolerance
StepDimTol_GTTPerpendicularityTolerance = _StepDimTol.StepDimTol_GTTPerpendicularityTolerance
StepDimTol_GTTPositionTolerance = _StepDimTol.StepDimTol_GTTPositionTolerance
StepDimTol_GTTRoundnessTolerance = _StepDimTol.StepDimTol_GTTRoundnessTolerance
StepDimTol_GTTStraightnessTolerance = _StepDimTol.StepDimTol_GTTStraightnessTolerance
StepDimTol_GTTSurfaceProfileTolerance = _StepDimTol.StepDimTol_GTTSurfaceProfileTolerance
StepDimTol_GTTSymmetryTolerance = _StepDimTol.StepDimTol_GTTSymmetryTolerance
StepDimTol_GTTTotalRunoutTolerance = _StepDimTol.StepDimTol_GTTTotalRunoutTolerance
StepDimTol_MaximumMaterialCondition = _StepDimTol.StepDimTol_MaximumMaterialCondition
StepDimTol_LeastMaterialCondition = _StepDimTol.StepDimTol_LeastMaterialCondition
StepDimTol_RegardlessOfFeatureSize = _StepDimTol.StepDimTol_RegardlessOfFeatureSize
class StepDimTol_GeometricTolerance(Standard.Standard_Transient):
    """Representation of STEP entity GeometricTolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_GeometricTolerance
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_GeometricTolerance(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_GeometricTolerance self) -> StepDimTol_GeometricTolerance

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_GeometricTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepDimTol_GeometricTolerance self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect)
        Init(StepDimTol_GeometricTolerance self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect)

        Initialize all fields (own and inherited) AP242

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.StepDimTol_GeometricTolerance_Init(self, *args)


    def Name(self, *args):
        """
        Name(StepDimTol_GeometricTolerance self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.StepDimTol_GeometricTolerance_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(StepDimTol_GeometricTolerance self, Handle_TCollection_HAsciiString theName)

        Set field Name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.StepDimTol_GeometricTolerance_SetName(self, *args)


    def Description(self, *args):
        """
        Description(StepDimTol_GeometricTolerance self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.StepDimTol_GeometricTolerance_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(StepDimTol_GeometricTolerance self, Handle_TCollection_HAsciiString theDescription)

        Set field Description

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.StepDimTol_GeometricTolerance_SetDescription(self, *args)


    def Magnitude(self, *args):
        """
        Magnitude(StepDimTol_GeometricTolerance self) -> Handle_StepBasic_MeasureWithUnit

        Returns field Magnitude

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.StepDimTol_GeometricTolerance_Magnitude(self, *args)


    def SetMagnitude(self, *args):
        """
        SetMagnitude(StepDimTol_GeometricTolerance self, Handle_StepBasic_MeasureWithUnit theMagnitude)

        Set field Magnitude

        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.StepDimTol_GeometricTolerance_SetMagnitude(self, *args)


    def TolerancedShapeAspect(self, *args):
        """
        TolerancedShapeAspect(StepDimTol_GeometricTolerance self) -> StepDimTol_GeometricToleranceTarget

        Returns field TolerancedShapeAspect
        Note: in AP214(203) type of this attribute can be only StepRepr_ShapeAspect

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.StepDimTol_GeometricTolerance_TolerancedShapeAspect(self, *args)


    def SetTolerancedShapeAspect(self, *args):
        """
        SetTolerancedShapeAspect(StepDimTol_GeometricTolerance self, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect)
        SetTolerancedShapeAspect(StepDimTol_GeometricTolerance self, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect)

        Set field TolerancedShapeAspect AP242

        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.StepDimTol_GeometricTolerance_SetTolerancedShapeAspect(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_GeometricTolerance_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_GeometricTolerance_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_GeometricTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_GeometricTolerance
StepDimTol_GeometricTolerance_swigregister = _StepDimTol.StepDimTol_GeometricTolerance_swigregister
StepDimTol_GeometricTolerance_swigregister(StepDimTol_GeometricTolerance)

def StepDimTol_GeometricTolerance_get_type_name(*args):
    """
    StepDimTol_GeometricTolerance_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_GeometricTolerance_get_type_name(*args)

def StepDimTol_GeometricTolerance_get_type_descriptor(*args):
    """
    StepDimTol_GeometricTolerance_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_GeometricTolerance_get_type_descriptor(*args)

class StepDimTol_ToleranceZoneDefinition(Standard.Standard_Transient):
    """Representation of STEP entity ToleranceZoneDefinition"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_ToleranceZoneDefinition
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_ToleranceZoneDefinition(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_ToleranceZoneDefinition self) -> StepDimTol_ToleranceZoneDefinition

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_ToleranceZoneDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepDimTol_ToleranceZoneDefinition self, Handle_StepDimTol_ToleranceZone theZone, Handle_StepRepr_HArray1OfShapeAspect theBoundaries)

        Initialize all fields (own and inherited)

        :type theZone: OCC.wrapper.StepDimTol.Handle_StepDimTol_ToleranceZone
        :type theBoundaries: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfShapeAspect

        """
        return _StepDimTol.StepDimTol_ToleranceZoneDefinition_Init(self, *args)


    def Boundaries(self, *args):
        """
        Boundaries(StepDimTol_ToleranceZoneDefinition self) -> Handle_StepRepr_HArray1OfShapeAspect

        Returns field Boundaries

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfShapeAspect

        """
        return _StepDimTol.StepDimTol_ToleranceZoneDefinition_Boundaries(self, *args)


    def SetBoundaries(self, *args):
        """
        SetBoundaries(StepDimTol_ToleranceZoneDefinition self, Handle_StepRepr_HArray1OfShapeAspect theBoundaries)

        Set field Boundaries

        :type theBoundaries: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfShapeAspect

        """
        return _StepDimTol.StepDimTol_ToleranceZoneDefinition_SetBoundaries(self, *args)


    def NbBoundaries(self, *args):
        """
        NbBoundaries(StepDimTol_ToleranceZoneDefinition self) -> Standard_Integer

        Returns number of Boundaries

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.StepDimTol_ToleranceZoneDefinition_NbBoundaries(self, *args)


    def BoundariesValue(self, *args):
        """
        BoundariesValue(StepDimTol_ToleranceZoneDefinition self, Standard_Integer const theNum) -> Handle_StepRepr_ShapeAspect

        Returns Boundaries with the given number

        :type theNum: int
        :rtype: OCC.wrapper.StepDimTol.Handle_StepRepr_ShapeAspect

        """
        return _StepDimTol.StepDimTol_ToleranceZoneDefinition_BoundariesValue(self, *args)


    def SetBoundariesValue(self, *args):
        """
        SetBoundariesValue(StepDimTol_ToleranceZoneDefinition self, Standard_Integer const theNum, Handle_StepRepr_ShapeAspect theItem)

        Sets Boundaries with given number

        :type theNum: int
        :type theItem: OCC.wrapper.StepDimTol.Handle_StepRepr_ShapeAspect

        """
        return _StepDimTol.StepDimTol_ToleranceZoneDefinition_SetBoundariesValue(self, *args)


    def Zone(self, *args):
        """
        Zone(StepDimTol_ToleranceZoneDefinition self) -> Handle_StepDimTol_ToleranceZone

        Returns field Zone

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_ToleranceZone

        """
        return _StepDimTol.StepDimTol_ToleranceZoneDefinition_Zone(self, *args)


    def SetZone(self, *args):
        """
        SetZone(StepDimTol_ToleranceZoneDefinition self, Handle_StepDimTol_ToleranceZone theZone)

        Set field Zone

        :type theZone: OCC.wrapper.StepDimTol.Handle_StepDimTol_ToleranceZone

        """
        return _StepDimTol.StepDimTol_ToleranceZoneDefinition_SetZone(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_ToleranceZoneDefinition_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_ToleranceZoneDefinition_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_ToleranceZoneDefinition_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_ToleranceZoneDefinition
StepDimTol_ToleranceZoneDefinition_swigregister = _StepDimTol.StepDimTol_ToleranceZoneDefinition_swigregister
StepDimTol_ToleranceZoneDefinition_swigregister(StepDimTol_ToleranceZoneDefinition)

def StepDimTol_ToleranceZoneDefinition_get_type_name(*args):
    """
    StepDimTol_ToleranceZoneDefinition_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_ToleranceZoneDefinition_get_type_name(*args)

def StepDimTol_ToleranceZoneDefinition_get_type_descriptor(*args):
    """
    StepDimTol_ToleranceZoneDefinition_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_ToleranceZoneDefinition_get_type_descriptor(*args)

class StepDimTol_GeoTolAndGeoTolWthDatRef(StepDimTol_GeometricTolerance):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_GeoTolAndGeoTolWthDatRef
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_GeoTolAndGeoTolWthDatRef(self) 
            return h


    def __init__(self, *args):
        """__init__(StepDimTol_GeoTolAndGeoTolWthDatRef self) -> StepDimTol_GeoTolAndGeoTolWthDatRef"""
        this = _StepDimTol.new_StepDimTol_GeoTolAndGeoTolWthDatRef(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepDimTol_GeoTolAndGeoTolWthDatRef self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect, Handle_StepDimTol_GeometricToleranceWithDatumReference theGTWDR, StepDimTol_GeometricToleranceType const theType)
        Init(StepDimTol_GeoTolAndGeoTolWthDatRef self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepBasic_MeasureWithUnit aMagnitude, StepDimTol_GeometricToleranceTarget aTolerancedShapeAspect, Handle_StepDimTol_GeometricToleranceWithDatumReference aGTWDR, StepDimTol_GeometricToleranceType const theType)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type aTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget
        :type aGTWDR: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference
        :type theType: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceType

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRef_Init(self, *args)


    def SetGeometricToleranceWithDatumReference(self, *args):
        """
        SetGeometricToleranceWithDatumReference(StepDimTol_GeoTolAndGeoTolWthDatRef self, Handle_StepDimTol_GeometricToleranceWithDatumReference theGTWDR)

        :type theGTWDR: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRef_SetGeometricToleranceWithDatumReference(self, *args)


    def GetGeometricToleranceWithDatumReference(self, *args):
        """
        GetGeometricToleranceWithDatumReference(StepDimTol_GeoTolAndGeoTolWthDatRef self) -> Handle_StepDimTol_GeometricToleranceWithDatumReference

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRef_GetGeometricToleranceWithDatumReference(self, *args)


    def SetGeometricToleranceType(self, *args):
        """
        SetGeometricToleranceType(StepDimTol_GeoTolAndGeoTolWthDatRef self, StepDimTol_GeometricToleranceType const theType)

        :type theType: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceType

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRef_SetGeometricToleranceType(self, *args)


    def GetToleranceType(self, *args):
        """
        GetToleranceType(StepDimTol_GeoTolAndGeoTolWthDatRef self) -> StepDimTol_GeometricToleranceType

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceType

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRef_GetToleranceType(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRef_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRef_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRef_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_GeoTolAndGeoTolWthDatRef
StepDimTol_GeoTolAndGeoTolWthDatRef_swigregister = _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRef_swigregister
StepDimTol_GeoTolAndGeoTolWthDatRef_swigregister(StepDimTol_GeoTolAndGeoTolWthDatRef)

def StepDimTol_GeoTolAndGeoTolWthDatRef_get_type_name(*args):
    """
    StepDimTol_GeoTolAndGeoTolWthDatRef_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRef_get_type_name(*args)

def StepDimTol_GeoTolAndGeoTolWthDatRef_get_type_descriptor(*args):
    """
    StepDimTol_GeoTolAndGeoTolWthDatRef_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRef_get_type_descriptor(*args)

class StepDimTol_DatumTarget(StepRepr.StepRepr_ShapeAspect):
    """Representation of STEP entity DatumTarget"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_DatumTarget
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_DatumTarget(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_DatumTarget self) -> StepDimTol_DatumTarget

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_DatumTarget(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepDimTol_DatumTarget self, Handle_TCollection_HAsciiString theShapeAspect_Name, Handle_TCollection_HAsciiString theShapeAspect_Description, Handle_StepRepr_ProductDefinitionShape theShapeAspect_OfShape, StepData_Logical const theShapeAspect_ProductDefinitional, Handle_TCollection_HAsciiString theTargetId)

        Initialize all fields (own and inherited)

        :type theShapeAspect_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theShapeAspect_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theShapeAspect_OfShape: OCC.wrapper.StepDimTol.Handle_StepRepr_ProductDefinitionShape
        :type theShapeAspect_ProductDefinitional: OCC.wrapper.StepData.StepData_Logical
        :type theTargetId: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.StepDimTol_DatumTarget_Init(self, *args)


    def TargetId(self, *args):
        """
        TargetId(StepDimTol_DatumTarget self) -> Handle_TCollection_HAsciiString

        Returns field TargetId

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.StepDimTol_DatumTarget_TargetId(self, *args)


    def SetTargetId(self, *args):
        """
        SetTargetId(StepDimTol_DatumTarget self, Handle_TCollection_HAsciiString theTargetId)

        Set field TargetId

        :type theTargetId: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.StepDimTol_DatumTarget_SetTargetId(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_DatumTarget_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_DatumTarget_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_DatumTarget_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_DatumTarget
StepDimTol_DatumTarget_swigregister = _StepDimTol.StepDimTol_DatumTarget_swigregister
StepDimTol_DatumTarget_swigregister(StepDimTol_DatumTarget)

def StepDimTol_DatumTarget_get_type_name(*args):
    """
    StepDimTol_DatumTarget_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_DatumTarget_get_type_name(*args)

def StepDimTol_DatumTarget_get_type_descriptor(*args):
    """
    StepDimTol_DatumTarget_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_DatumTarget_get_type_descriptor(*args)

class StepDimTol_GeneralDatumReference(StepRepr.StepRepr_ShapeAspect):
    """Representation of STEP entity GeneralDatumReference"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_GeneralDatumReference
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_GeneralDatumReference(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_GeneralDatumReference self) -> StepDimTol_GeneralDatumReference

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_GeneralDatumReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepDimTol_GeneralDatumReference self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepRepr_ProductDefinitionShape theOfShape, StepData_Logical const theProductDefinitional, StepDimTol_DatumOrCommonDatum theBase, Standard_Boolean const theHasModifiers, Handle_StepDimTol_HArray1OfDatumReferenceModifier theModifiers)

        Initialize all fields (own and inherited)

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theOfShape: OCC.wrapper.StepDimTol.Handle_StepRepr_ProductDefinitionShape
        :type theProductDefinitional: OCC.wrapper.StepData.StepData_Logical
        :type theBase: OCC.wrapper.StepDimTol.StepDimTol_DatumOrCommonDatum
        :type theHasModifiers: bool
        :type theModifiers: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier

        """
        return _StepDimTol.StepDimTol_GeneralDatumReference_Init(self, *args)


    def Base(self, *args):
        """
        Base(StepDimTol_GeneralDatumReference self) -> StepDimTol_DatumOrCommonDatum

        Returns field Base

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_DatumOrCommonDatum

        """
        return _StepDimTol.StepDimTol_GeneralDatumReference_Base(self, *args)


    def SetBase(self, *args):
        """
        SetBase(StepDimTol_GeneralDatumReference self, StepDimTol_DatumOrCommonDatum theBase)

        Set field Base

        :type theBase: OCC.wrapper.StepDimTol.StepDimTol_DatumOrCommonDatum

        """
        return _StepDimTol.StepDimTol_GeneralDatumReference_SetBase(self, *args)


    def HasModifiers(self, *args):
        """
        HasModifiers(StepDimTol_GeneralDatumReference self) -> Standard_Boolean

        Indicates is field Modifiers exist

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.StepDimTol_GeneralDatumReference_HasModifiers(self, *args)


    def Modifiers(self, *args):
        """
        Modifiers(StepDimTol_GeneralDatumReference self) -> Handle_StepDimTol_HArray1OfDatumReferenceModifier

        Returns field Modifiers

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier

        """
        return _StepDimTol.StepDimTol_GeneralDatumReference_Modifiers(self, *args)


    def SetModifiers(self, *args):
        """
        SetModifiers(StepDimTol_GeneralDatumReference self, Handle_StepDimTol_HArray1OfDatumReferenceModifier theModifiers)

        Set field Modifiers

        :type theModifiers: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier

        """
        return _StepDimTol.StepDimTol_GeneralDatumReference_SetModifiers(self, *args)


    def NbModifiers(self, *args):
        """
        NbModifiers(StepDimTol_GeneralDatumReference self) -> Standard_Integer

        Returns number of Modifiers

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.StepDimTol_GeneralDatumReference_NbModifiers(self, *args)


    def ModifiersValue(self, *args):
        """
        ModifiersValue(StepDimTol_GeneralDatumReference self, Standard_Integer const theNum) -> StepDimTol_DatumReferenceModifier
        ModifiersValue(StepDimTol_GeneralDatumReference self, Standard_Integer const theNum, StepDimTol_DatumReferenceModifier theItem)

        Sets Modifiers with given number

        :type theNum: int
        :type theItem: OCC.wrapper.StepDimTol.StepDimTol_DatumReferenceModifier

        """
        return _StepDimTol.StepDimTol_GeneralDatumReference_ModifiersValue(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_GeneralDatumReference_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_GeneralDatumReference_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_GeneralDatumReference_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_GeneralDatumReference
StepDimTol_GeneralDatumReference_swigregister = _StepDimTol.StepDimTol_GeneralDatumReference_swigregister
StepDimTol_GeneralDatumReference_swigregister(StepDimTol_GeneralDatumReference)

def StepDimTol_GeneralDatumReference_get_type_name(*args):
    """
    StepDimTol_GeneralDatumReference_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_GeneralDatumReference_get_type_name(*args)

def StepDimTol_GeneralDatumReference_get_type_descriptor(*args):
    """
    StepDimTol_GeneralDatumReference_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_GeneralDatumReference_get_type_descriptor(*args)

class StepDimTol_GeometricToleranceWithDatumReference(StepDimTol_GeometricTolerance):
    """Representation of STEP entity GeometricToleranceWithDatumReference"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_GeometricToleranceWithDatumReference
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_GeometricToleranceWithDatumReference(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_GeometricToleranceWithDatumReference self) -> StepDimTol_GeometricToleranceWithDatumReference

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_GeometricToleranceWithDatumReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepDimTol_GeometricToleranceWithDatumReference self, Handle_TCollection_HAsciiString theGeometricTolerance_Name, Handle_TCollection_HAsciiString theGeometricTolerance_Description, Handle_StepBasic_MeasureWithUnit theGeometricTolerance_Magnitude, Handle_StepRepr_ShapeAspect theGeometricTolerance_TolerancedShapeAspect, Handle_StepDimTol_HArray1OfDatumReference theDatumSystem)
        Init(StepDimTol_GeometricToleranceWithDatumReference self, Handle_TCollection_HAsciiString theGeometricTolerance_Name, Handle_TCollection_HAsciiString theGeometricTolerance_Description, Handle_StepBasic_MeasureWithUnit theGeometricTolerance_Magnitude, StepDimTol_GeometricToleranceTarget theGeometricTolerance_TolerancedShapeAspect, Handle_StepDimTol_HArray1OfDatumSystemOrReference theDatumSystem)

        Initialize all fields (own and inherited) AP242

        :type theGeometricTolerance_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theGeometricTolerance_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theGeometricTolerance_Magnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type theGeometricTolerance_TolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget
        :type theDatumSystem: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithDatumReference_Init(self, *args)


    def DatumSystem(self, *args):
        """
        DatumSystem(StepDimTol_GeometricToleranceWithDatumReference self) -> Handle_StepDimTol_HArray1OfDatumReference

        Returns field DatumSystem AP214

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumReference

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithDatumReference_DatumSystem(self, *args)


    def DatumSystemAP242(self, *args):
        """
        DatumSystemAP242(StepDimTol_GeometricToleranceWithDatumReference self) -> Handle_StepDimTol_HArray1OfDatumSystemOrReference

        Returns field DatumSystem AP242

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithDatumReference_DatumSystemAP242(self, *args)


    def SetDatumSystem(self, *args):
        """
        SetDatumSystem(StepDimTol_GeometricToleranceWithDatumReference self, Handle_StepDimTol_HArray1OfDatumReference theDatumSystem)
        SetDatumSystem(StepDimTol_GeometricToleranceWithDatumReference self, Handle_StepDimTol_HArray1OfDatumSystemOrReference theDatumSystem)

        Set field DatumSystem AP242

        :type theDatumSystem: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithDatumReference_SetDatumSystem(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithDatumReference_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithDatumReference_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_GeometricToleranceWithDatumReference_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_GeometricToleranceWithDatumReference
StepDimTol_GeometricToleranceWithDatumReference_swigregister = _StepDimTol.StepDimTol_GeometricToleranceWithDatumReference_swigregister
StepDimTol_GeometricToleranceWithDatumReference_swigregister(StepDimTol_GeometricToleranceWithDatumReference)

def StepDimTol_GeometricToleranceWithDatumReference_get_type_name(*args):
    """
    StepDimTol_GeometricToleranceWithDatumReference_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_GeometricToleranceWithDatumReference_get_type_name(*args)

def StepDimTol_GeometricToleranceWithDatumReference_get_type_descriptor(*args):
    """
    StepDimTol_GeometricToleranceWithDatumReference_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_GeometricToleranceWithDatumReference_get_type_descriptor(*args)

class StepDimTol_GeoTolAndGeoTolWthMod(StepDimTol_GeometricTolerance):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_GeoTolAndGeoTolWthMod
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_GeoTolAndGeoTolWthMod(self) 
            return h


    def __init__(self, *args):
        """__init__(StepDimTol_GeoTolAndGeoTolWthMod self) -> StepDimTol_GeoTolAndGeoTolWthMod"""
        this = _StepDimTol.new_StepDimTol_GeoTolAndGeoTolWthMod(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepDimTol_GeoTolAndGeoTolWthMod self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect, Handle_StepDimTol_GeometricToleranceWithModifiers theGTWM, StepDimTol_GeometricToleranceType const theType)
        Init(StepDimTol_GeoTolAndGeoTolWthMod self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepBasic_MeasureWithUnit aMagnitude, StepDimTol_GeometricToleranceTarget aTolerancedShapeAspect, Handle_StepDimTol_GeometricToleranceWithModifiers aGTWM, StepDimTol_GeometricToleranceType const theType)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type aTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget
        :type aGTWM: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers
        :type theType: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceType

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthMod_Init(self, *args)


    def SetGeometricToleranceWithModifiers(self, *args):
        """
        SetGeometricToleranceWithModifiers(StepDimTol_GeoTolAndGeoTolWthMod self, Handle_StepDimTol_GeometricToleranceWithModifiers theGTWM)

        :type theGTWM: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthMod_SetGeometricToleranceWithModifiers(self, *args)


    def GetGeometricToleranceWithModifiers(self, *args):
        """
        GetGeometricToleranceWithModifiers(StepDimTol_GeoTolAndGeoTolWthMod self) -> Handle_StepDimTol_GeometricToleranceWithModifiers

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthMod_GetGeometricToleranceWithModifiers(self, *args)


    def SetGeometricToleranceType(self, *args):
        """
        SetGeometricToleranceType(StepDimTol_GeoTolAndGeoTolWthMod self, StepDimTol_GeometricToleranceType const theType)

        :type theType: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceType

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthMod_SetGeometricToleranceType(self, *args)


    def GetToleranceType(self, *args):
        """
        GetToleranceType(StepDimTol_GeoTolAndGeoTolWthMod self) -> StepDimTol_GeometricToleranceType

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceType

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthMod_GetToleranceType(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthMod_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthMod_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_GeoTolAndGeoTolWthMod_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_GeoTolAndGeoTolWthMod
StepDimTol_GeoTolAndGeoTolWthMod_swigregister = _StepDimTol.StepDimTol_GeoTolAndGeoTolWthMod_swigregister
StepDimTol_GeoTolAndGeoTolWthMod_swigregister(StepDimTol_GeoTolAndGeoTolWthMod)

def StepDimTol_GeoTolAndGeoTolWthMod_get_type_name(*args):
    """
    StepDimTol_GeoTolAndGeoTolWthMod_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthMod_get_type_name(*args)

def StepDimTol_GeoTolAndGeoTolWthMod_get_type_descriptor(*args):
    """
    StepDimTol_GeoTolAndGeoTolWthMod_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthMod_get_type_descriptor(*args)

class StepDimTol_PlacedDatumTargetFeature(StepDimTol_DatumTarget):
    """Representation of STEP entity PlacedDatumTargetFeature"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_PlacedDatumTargetFeature
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_PlacedDatumTargetFeature(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_PlacedDatumTargetFeature self) -> StepDimTol_PlacedDatumTargetFeature

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_PlacedDatumTargetFeature(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_PlacedDatumTargetFeature_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_PlacedDatumTargetFeature_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_PlacedDatumTargetFeature_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_PlacedDatumTargetFeature
StepDimTol_PlacedDatumTargetFeature_swigregister = _StepDimTol.StepDimTol_PlacedDatumTargetFeature_swigregister
StepDimTol_PlacedDatumTargetFeature_swigregister(StepDimTol_PlacedDatumTargetFeature)

def StepDimTol_PlacedDatumTargetFeature_get_type_name(*args):
    """
    StepDimTol_PlacedDatumTargetFeature_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_PlacedDatumTargetFeature_get_type_name(*args)

def StepDimTol_PlacedDatumTargetFeature_get_type_descriptor(*args):
    """
    StepDimTol_PlacedDatumTargetFeature_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_PlacedDatumTargetFeature_get_type_descriptor(*args)

class StepDimTol_GeometricToleranceWithDefinedUnit(StepDimTol_GeometricTolerance):
    """Representation of STEP entity GeometricToleranceWithDefinedUnit"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_GeometricToleranceWithDefinedUnit
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_GeometricToleranceWithDefinedUnit(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_GeometricToleranceWithDefinedUnit self) -> StepDimTol_GeometricToleranceWithDefinedUnit

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_GeometricToleranceWithDefinedUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepDimTol_GeometricToleranceWithDefinedUnit self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect, Handle_StepBasic_LengthMeasureWithUnit theUnitSize)
        Init(StepDimTol_GeometricToleranceWithDefinedUnit self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect, Handle_StepBasic_LengthMeasureWithUnit theUnitSize)

        Initialize all fields (own and inherited) AP242

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget
        :type theUnitSize: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithDefinedUnit_Init(self, *args)


    def UnitSize(self, *args):
        """
        UnitSize(StepDimTol_GeometricToleranceWithDefinedUnit self) -> Handle_StepBasic_LengthMeasureWithUnit

        Returns field UnitSize

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithDefinedUnit_UnitSize(self, *args)


    def SetUnitSize(self, *args):
        """
        SetUnitSize(StepDimTol_GeometricToleranceWithDefinedUnit self, Handle_StepBasic_LengthMeasureWithUnit theUnitSize)

        Set field UnitSize

        :type theUnitSize: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithDefinedUnit_SetUnitSize(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithDefinedUnit_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithDefinedUnit_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_GeometricToleranceWithDefinedUnit_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_GeometricToleranceWithDefinedUnit
StepDimTol_GeometricToleranceWithDefinedUnit_swigregister = _StepDimTol.StepDimTol_GeometricToleranceWithDefinedUnit_swigregister
StepDimTol_GeometricToleranceWithDefinedUnit_swigregister(StepDimTol_GeometricToleranceWithDefinedUnit)

def StepDimTol_GeometricToleranceWithDefinedUnit_get_type_name(*args):
    """
    StepDimTol_GeometricToleranceWithDefinedUnit_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_GeometricToleranceWithDefinedUnit_get_type_name(*args)

def StepDimTol_GeometricToleranceWithDefinedUnit_get_type_descriptor(*args):
    """
    StepDimTol_GeometricToleranceWithDefinedUnit_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_GeometricToleranceWithDefinedUnit_get_type_descriptor(*args)

class StepDimTol_GeometricToleranceRelationship(Standard.Standard_Transient):
    """Representation of STEP entity GeometricToleranceRelationship"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_GeometricToleranceRelationship
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_GeometricToleranceRelationship(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_GeometricToleranceRelationship self) -> StepDimTol_GeometricToleranceRelationship

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_GeometricToleranceRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepDimTol_GeometricToleranceRelationship self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepDimTol_GeometricTolerance theRelatingGeometricTolerance, Handle_StepDimTol_GeometricTolerance theRelatedGeometricTolerance)

        Initialize all fields (own and inherited)

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theRelatingGeometricTolerance: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricTolerance
        :type theRelatedGeometricTolerance: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricTolerance

        """
        return _StepDimTol.StepDimTol_GeometricToleranceRelationship_Init(self, *args)


    def Name(self, *args):
        """
        Name(StepDimTol_GeometricToleranceRelationship self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.StepDimTol_GeometricToleranceRelationship_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(StepDimTol_GeometricToleranceRelationship self, Handle_TCollection_HAsciiString theName)

        Set field Name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.StepDimTol_GeometricToleranceRelationship_SetName(self, *args)


    def Description(self, *args):
        """
        Description(StepDimTol_GeometricToleranceRelationship self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.StepDimTol_GeometricToleranceRelationship_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(StepDimTol_GeometricToleranceRelationship self, Handle_TCollection_HAsciiString theDescription)

        Set field Description

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.StepDimTol_GeometricToleranceRelationship_SetDescription(self, *args)


    def RelatingGeometricTolerance(self, *args):
        """
        RelatingGeometricTolerance(StepDimTol_GeometricToleranceRelationship self) -> Handle_StepDimTol_GeometricTolerance

        Returns field RelatingGeometricTolerance

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricTolerance

        """
        return _StepDimTol.StepDimTol_GeometricToleranceRelationship_RelatingGeometricTolerance(self, *args)


    def SetRelatingGeometricTolerance(self, *args):
        """
        SetRelatingGeometricTolerance(StepDimTol_GeometricToleranceRelationship self, Handle_StepDimTol_GeometricTolerance theRelatingGeometricTolerance)

        Set field RelatingGeometricTolerance

        :type theRelatingGeometricTolerance: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricTolerance

        """
        return _StepDimTol.StepDimTol_GeometricToleranceRelationship_SetRelatingGeometricTolerance(self, *args)


    def RelatedGeometricTolerance(self, *args):
        """
        RelatedGeometricTolerance(StepDimTol_GeometricToleranceRelationship self) -> Handle_StepDimTol_GeometricTolerance

        Returns field RelatedGeometricTolerance

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricTolerance

        """
        return _StepDimTol.StepDimTol_GeometricToleranceRelationship_RelatedGeometricTolerance(self, *args)


    def SetRelatedGeometricTolerance(self, *args):
        """
        SetRelatedGeometricTolerance(StepDimTol_GeometricToleranceRelationship self, Handle_StepDimTol_GeometricTolerance theRelatedGeometricTolerance)

        Set field RelatedGeometricTolerance

        :type theRelatedGeometricTolerance: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricTolerance

        """
        return _StepDimTol.StepDimTol_GeometricToleranceRelationship_SetRelatedGeometricTolerance(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_GeometricToleranceRelationship_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_GeometricToleranceRelationship_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_GeometricToleranceRelationship_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_GeometricToleranceRelationship
StepDimTol_GeometricToleranceRelationship_swigregister = _StepDimTol.StepDimTol_GeometricToleranceRelationship_swigregister
StepDimTol_GeometricToleranceRelationship_swigregister(StepDimTol_GeometricToleranceRelationship)

def StepDimTol_GeometricToleranceRelationship_get_type_name(*args):
    """
    StepDimTol_GeometricToleranceRelationship_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_GeometricToleranceRelationship_get_type_name(*args)

def StepDimTol_GeometricToleranceRelationship_get_type_descriptor(*args):
    """
    StepDimTol_GeometricToleranceRelationship_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_GeometricToleranceRelationship_get_type_descriptor(*args)

class StepDimTol_GeometricToleranceWithDefinedAreaUnit(StepDimTol_GeometricToleranceWithDefinedUnit):
    """Representation of STEP entity GeometricToleranceWithDefinedAreaUnit"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_GeometricToleranceWithDefinedAreaUnit self) -> StepDimTol_GeometricToleranceWithDefinedAreaUnit

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_GeometricToleranceWithDefinedAreaUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepDimTol_GeometricToleranceWithDefinedAreaUnit self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect, Handle_StepBasic_LengthMeasureWithUnit theUnitSize, StepDimTol_AreaUnitType const theAreaType, Standard_Boolean const theHasSecondUnitSize, Handle_StepBasic_LengthMeasureWithUnit theSecondUnitSize)

        Initialize all fields (own and inherited)

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget
        :type theUnitSize: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit
        :type theAreaType: OCC.wrapper.StepDimTol.StepDimTol_AreaUnitType
        :type theHasSecondUnitSize: bool
        :type theSecondUnitSize: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithDefinedAreaUnit_Init(self, *args)


    def AreaType(self, *args):
        """
        AreaType(StepDimTol_GeometricToleranceWithDefinedAreaUnit self) -> StepDimTol_AreaUnitType

        Returns field AreaType

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_AreaUnitType

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithDefinedAreaUnit_AreaType(self, *args)


    def SetAreaType(self, *args):
        """
        SetAreaType(StepDimTol_GeometricToleranceWithDefinedAreaUnit self, StepDimTol_AreaUnitType const theAreaType)

        Set field AreaType

        :type theAreaType: OCC.wrapper.StepDimTol.StepDimTol_AreaUnitType

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithDefinedAreaUnit_SetAreaType(self, *args)


    def SecondUnitSize(self, *args):
        """
        SecondUnitSize(StepDimTol_GeometricToleranceWithDefinedAreaUnit self) -> Handle_StepBasic_LengthMeasureWithUnit

        Returns field SecondUnitSize

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithDefinedAreaUnit_SecondUnitSize(self, *args)


    def SetSecondUnitSize(self, *args):
        """
        SetSecondUnitSize(StepDimTol_GeometricToleranceWithDefinedAreaUnit self, Handle_StepBasic_LengthMeasureWithUnit theSecondUnitSize)

        Set field SecondUnitSize

        :type theSecondUnitSize: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithDefinedAreaUnit_SetSecondUnitSize(self, *args)


    def HasSecondUnitSize(self, *args):
        """
        HasSecondUnitSize(StepDimTol_GeometricToleranceWithDefinedAreaUnit self) -> Standard_Boolean

        Indicates if SecondUnitSize field exist

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithDefinedAreaUnit_HasSecondUnitSize(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithDefinedAreaUnit_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithDefinedAreaUnit_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_GeometricToleranceWithDefinedAreaUnit_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_GeometricToleranceWithDefinedAreaUnit
StepDimTol_GeometricToleranceWithDefinedAreaUnit_swigregister = _StepDimTol.StepDimTol_GeometricToleranceWithDefinedAreaUnit_swigregister
StepDimTol_GeometricToleranceWithDefinedAreaUnit_swigregister(StepDimTol_GeometricToleranceWithDefinedAreaUnit)

def StepDimTol_GeometricToleranceWithDefinedAreaUnit_get_type_name(*args):
    """
    StepDimTol_GeometricToleranceWithDefinedAreaUnit_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_GeometricToleranceWithDefinedAreaUnit_get_type_name(*args)

def StepDimTol_GeometricToleranceWithDefinedAreaUnit_get_type_descriptor(*args):
    """
    StepDimTol_GeometricToleranceWithDefinedAreaUnit_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_GeometricToleranceWithDefinedAreaUnit_get_type_descriptor(*args)

class StepDimTol_ProjectedZoneDefinition(StepDimTol_ToleranceZoneDefinition):
    """Representation of STEP entity ProjectedZoneDefinition"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_ProjectedZoneDefinition
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_ProjectedZoneDefinition(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_ProjectedZoneDefinition self) -> StepDimTol_ProjectedZoneDefinition

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_ProjectedZoneDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepDimTol_ProjectedZoneDefinition self, Handle_StepDimTol_ToleranceZone theZone, Handle_StepRepr_HArray1OfShapeAspect theBoundaries, Handle_StepRepr_ShapeAspect theProjectionEnd, Handle_StepBasic_LengthMeasureWithUnit theProjectionLength)

        Initialize all fields (own and inherited)

        :type theZone: OCC.wrapper.StepDimTol.Handle_StepDimTol_ToleranceZone
        :type theBoundaries: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfShapeAspect
        :type theProjectionEnd: OCC.wrapper.StepDimTol.Handle_StepRepr_ShapeAspect
        :type theProjectionLength: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.StepDimTol_ProjectedZoneDefinition_Init(self, *args)


    def ProjectionEnd(self, *args):
        """
        ProjectionEnd(StepDimTol_ProjectedZoneDefinition self) -> Handle_StepRepr_ShapeAspect

        Returns field ProjectionEnd

        :rtype: OCC.wrapper.StepDimTol.Handle_StepRepr_ShapeAspect

        """
        return _StepDimTol.StepDimTol_ProjectedZoneDefinition_ProjectionEnd(self, *args)


    def SetProjectionEnd(self, *args):
        """
        SetProjectionEnd(StepDimTol_ProjectedZoneDefinition self, Handle_StepRepr_ShapeAspect theProjectionEnd)

        Set field ProjectionEnd

        :type theProjectionEnd: OCC.wrapper.StepDimTol.Handle_StepRepr_ShapeAspect

        """
        return _StepDimTol.StepDimTol_ProjectedZoneDefinition_SetProjectionEnd(self, *args)


    def ProjectionLength(self, *args):
        """
        ProjectionLength(StepDimTol_ProjectedZoneDefinition self) -> Handle_StepBasic_LengthMeasureWithUnit

        Returns field ProjectionLength

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.StepDimTol_ProjectedZoneDefinition_ProjectionLength(self, *args)


    def SetProjectionLength(self, *args):
        """
        SetProjectionLength(StepDimTol_ProjectedZoneDefinition self, Handle_StepBasic_LengthMeasureWithUnit theProjectionLength)

        Set field ProjectionLength

        :type theProjectionLength: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.StepDimTol_ProjectedZoneDefinition_SetProjectionLength(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_ProjectedZoneDefinition_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_ProjectedZoneDefinition_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_ProjectedZoneDefinition_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_ProjectedZoneDefinition
StepDimTol_ProjectedZoneDefinition_swigregister = _StepDimTol.StepDimTol_ProjectedZoneDefinition_swigregister
StepDimTol_ProjectedZoneDefinition_swigregister(StepDimTol_ProjectedZoneDefinition)

def StepDimTol_ProjectedZoneDefinition_get_type_name(*args):
    """
    StepDimTol_ProjectedZoneDefinition_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_ProjectedZoneDefinition_get_type_name(*args)

def StepDimTol_ProjectedZoneDefinition_get_type_descriptor(*args):
    """
    StepDimTol_ProjectedZoneDefinition_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_ProjectedZoneDefinition_get_type_descriptor(*args)

class StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol(StepDimTol_GeoTolAndGeoTolWthDatRef):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol(self) 
            return h


    def __init__(self, *args):
        """__init__(StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self) -> StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol"""
        this = _StepDimTol.new_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect, Handle_StepDimTol_GeometricToleranceWithDatumReference theGTWDR, StepDimTol_GeometricToleranceType const theType, Handle_StepDimTol_UnequallyDisposedGeometricTolerance theUDGT)
        Init(StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepBasic_MeasureWithUnit aMagnitude, StepDimTol_GeometricToleranceTarget aTolerancedShapeAspect, Handle_StepDimTol_GeometricToleranceWithDatumReference aGTWDR, StepDimTol_GeometricToleranceType const theType, Handle_StepDimTol_UnequallyDisposedGeometricTolerance theUDGT)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type aTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget
        :type aGTWDR: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference
        :type theType: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceType
        :type theUDGT: OCC.wrapper.StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_Init(self, *args)


    def SetUnequallyDisposedGeometricTolerance(self, *args):
        """
        SetUnequallyDisposedGeometricTolerance(StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self, Handle_StepDimTol_UnequallyDisposedGeometricTolerance theUDGT)

        :type theUDGT: OCC.wrapper.StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_SetUnequallyDisposedGeometricTolerance(self, *args)


    def GetUnequallyDisposedGeometricTolerance(self, *args):
        """
        GetUnequallyDisposedGeometricTolerance(StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self) -> Handle_StepDimTol_UnequallyDisposedGeometricTolerance

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_GetUnequallyDisposedGeometricTolerance(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol
StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_swigregister = _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_swigregister
StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_swigregister(StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol)

def StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_get_type_name(*args):
    """
    StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_get_type_name(*args)

def StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_get_type_descriptor(*args):
    """
    StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_get_type_descriptor(*args)

class StepDimTol_Datum(StepRepr.StepRepr_ShapeAspect):
    """Representation of STEP entity Datum"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_Datum
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_Datum(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_Datum self) -> StepDimTol_Datum

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_Datum(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepDimTol_Datum self, Handle_TCollection_HAsciiString theShapeAspect_Name, Handle_TCollection_HAsciiString theShapeAspect_Description, Handle_StepRepr_ProductDefinitionShape theShapeAspect_OfShape, StepData_Logical const theShapeAspect_ProductDefinitional, Handle_TCollection_HAsciiString theIdentification)

        Initialize all fields (own and inherited)

        :type theShapeAspect_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theShapeAspect_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theShapeAspect_OfShape: OCC.wrapper.StepDimTol.Handle_StepRepr_ProductDefinitionShape
        :type theShapeAspect_ProductDefinitional: OCC.wrapper.StepData.StepData_Logical
        :type theIdentification: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.StepDimTol_Datum_Init(self, *args)


    def Identification(self, *args):
        """
        Identification(StepDimTol_Datum self) -> Handle_TCollection_HAsciiString

        Returns field Identification

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.StepDimTol_Datum_Identification(self, *args)


    def SetIdentification(self, *args):
        """
        SetIdentification(StepDimTol_Datum self, Handle_TCollection_HAsciiString theIdentification)

        Set field Identification

        :type theIdentification: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.StepDimTol_Datum_SetIdentification(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_Datum_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_Datum_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_Datum_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_Datum
StepDimTol_Datum_swigregister = _StepDimTol.StepDimTol_Datum_swigregister
StepDimTol_Datum_swigregister(StepDimTol_Datum)

def StepDimTol_Datum_get_type_name(*args):
    """
    StepDimTol_Datum_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_Datum_get_type_name(*args)

def StepDimTol_Datum_get_type_descriptor(*args):
    """
    StepDimTol_Datum_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_Datum_get_type_descriptor(*args)

class StepDimTol_HArray1OfDatumSystemOrReference(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_HArray1OfDatumSystemOrReference
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_HArray1OfDatumSystemOrReference(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_HArray1OfDatumSystemOrReference self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepDimTol_HArray1OfDatumSystemOrReference
        __init__(StepDimTol_HArray1OfDatumSystemOrReference self, Standard_Integer const theLower, Standard_Integer const theUpper, StepDimTol_DatumSystemOrReference theValue) -> StepDimTol_HArray1OfDatumSystemOrReference
        __init__(StepDimTol_HArray1OfDatumSystemOrReference self, NCollection_Array1_StepDimTol_DatumSystemOrReference theOther) -> StepDimTol_HArray1OfDatumSystemOrReference

        :type theOther: OCC.wrapper.StepDimTol.StepDimTol_Array1OfDatumSystemOrReference

        """
        this = _StepDimTol.new_StepDimTol_HArray1OfDatumSystemOrReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepDimTol.StepDimTol_Array1OfDatumSystemOrReference

        """
        res = _StepDimTol.StepDimTol_HArray1OfDatumSystemOrReference_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepDimTol_HArray1OfDatumSystemOrReference self) -> NCollection_Array1_StepDimTol_DatumSystemOrReference

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_Array1OfDatumSystemOrReference

        """
        return _StepDimTol.StepDimTol_HArray1OfDatumSystemOrReference_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_HArray1OfDatumSystemOrReference_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_HArray1OfDatumSystemOrReference_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_HArray1OfDatumSystemOrReference_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_HArray1OfDatumSystemOrReference
StepDimTol_HArray1OfDatumSystemOrReference_swigregister = _StepDimTol.StepDimTol_HArray1OfDatumSystemOrReference_swigregister
StepDimTol_HArray1OfDatumSystemOrReference_swigregister(StepDimTol_HArray1OfDatumSystemOrReference)

def StepDimTol_HArray1OfDatumSystemOrReference_get_type_name(*args):
    """
    StepDimTol_HArray1OfDatumSystemOrReference_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_HArray1OfDatumSystemOrReference_get_type_name(*args)

def StepDimTol_HArray1OfDatumSystemOrReference_get_type_descriptor(*args):
    """
    StepDimTol_HArray1OfDatumSystemOrReference_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_HArray1OfDatumSystemOrReference_get_type_descriptor(*args)

class StepDimTol_HArray1OfGeometricToleranceModifier(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_HArray1OfGeometricToleranceModifier
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_HArray1OfGeometricToleranceModifier(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_HArray1OfGeometricToleranceModifier self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepDimTol_HArray1OfGeometricToleranceModifier
        __init__(StepDimTol_HArray1OfGeometricToleranceModifier self, Standard_Integer const theLower, Standard_Integer const theUpper, StepDimTol_Array1OfGeometricToleranceModifier::value_type const & theValue) -> StepDimTol_HArray1OfGeometricToleranceModifier
        __init__(StepDimTol_HArray1OfGeometricToleranceModifier self, NCollection_Array1_StepDimTol_GeometricToleranceModifier theOther) -> StepDimTol_HArray1OfGeometricToleranceModifier

        :type theOther: OCC.wrapper.StepDimTol.StepDimTol_Array1OfGeometricToleranceModifier

        """
        this = _StepDimTol.new_StepDimTol_HArray1OfGeometricToleranceModifier(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepDimTol.StepDimTol_Array1OfGeometricToleranceModifier

        """
        res = _StepDimTol.StepDimTol_HArray1OfGeometricToleranceModifier_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepDimTol_HArray1OfGeometricToleranceModifier self) -> NCollection_Array1_StepDimTol_GeometricToleranceModifier

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_Array1OfGeometricToleranceModifier

        """
        return _StepDimTol.StepDimTol_HArray1OfGeometricToleranceModifier_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_HArray1OfGeometricToleranceModifier_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_HArray1OfGeometricToleranceModifier_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_HArray1OfGeometricToleranceModifier_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_HArray1OfGeometricToleranceModifier
StepDimTol_HArray1OfGeometricToleranceModifier_swigregister = _StepDimTol.StepDimTol_HArray1OfGeometricToleranceModifier_swigregister
StepDimTol_HArray1OfGeometricToleranceModifier_swigregister(StepDimTol_HArray1OfGeometricToleranceModifier)

def StepDimTol_HArray1OfGeometricToleranceModifier_get_type_name(*args):
    """
    StepDimTol_HArray1OfGeometricToleranceModifier_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_HArray1OfGeometricToleranceModifier_get_type_name(*args)

def StepDimTol_HArray1OfGeometricToleranceModifier_get_type_descriptor(*args):
    """
    StepDimTol_HArray1OfGeometricToleranceModifier_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_HArray1OfGeometricToleranceModifier_get_type_descriptor(*args)

class StepDimTol_HArray1OfDatumReferenceElement(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_HArray1OfDatumReferenceElement
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_HArray1OfDatumReferenceElement(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_HArray1OfDatumReferenceElement self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepDimTol_HArray1OfDatumReferenceElement
        __init__(StepDimTol_HArray1OfDatumReferenceElement self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_StepDimTol_DatumReferenceElement theValue) -> StepDimTol_HArray1OfDatumReferenceElement
        __init__(StepDimTol_HArray1OfDatumReferenceElement self, NCollection_Array1_Handle_StepDimTol_DatumReferenceElement theOther) -> StepDimTol_HArray1OfDatumReferenceElement

        :type theOther: OCC.wrapper.StepDimTol.StepDimTol_Array1OfDatumReferenceElement

        """
        this = _StepDimTol.new_StepDimTol_HArray1OfDatumReferenceElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepDimTol.StepDimTol_Array1OfDatumReferenceElement

        """
        res = _StepDimTol.StepDimTol_HArray1OfDatumReferenceElement_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepDimTol_HArray1OfDatumReferenceElement self) -> NCollection_Array1_Handle_StepDimTol_DatumReferenceElement

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_Array1OfDatumReferenceElement

        """
        return _StepDimTol.StepDimTol_HArray1OfDatumReferenceElement_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_HArray1OfDatumReferenceElement_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_HArray1OfDatumReferenceElement_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_HArray1OfDatumReferenceElement_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_HArray1OfDatumReferenceElement
StepDimTol_HArray1OfDatumReferenceElement_swigregister = _StepDimTol.StepDimTol_HArray1OfDatumReferenceElement_swigregister
StepDimTol_HArray1OfDatumReferenceElement_swigregister(StepDimTol_HArray1OfDatumReferenceElement)

def StepDimTol_HArray1OfDatumReferenceElement_get_type_name(*args):
    """
    StepDimTol_HArray1OfDatumReferenceElement_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_HArray1OfDatumReferenceElement_get_type_name(*args)

def StepDimTol_HArray1OfDatumReferenceElement_get_type_descriptor(*args):
    """
    StepDimTol_HArray1OfDatumReferenceElement_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_HArray1OfDatumReferenceElement_get_type_descriptor(*args)

class StepDimTol_DatumReference(Standard.Standard_Transient):
    """Representation of STEP entity DatumReference"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_DatumReference
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_DatumReference(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_DatumReference self) -> StepDimTol_DatumReference

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_DatumReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepDimTol_DatumReference self, Standard_Integer const thePrecedence, Handle_StepDimTol_Datum theReferencedDatum)

        Initialize all fields (own and inherited)

        :type thePrecedence: int
        :type theReferencedDatum: OCC.wrapper.StepDimTol.Handle_StepDimTol_Datum

        """
        return _StepDimTol.StepDimTol_DatumReference_Init(self, *args)


    def Precedence(self, *args):
        """
        Precedence(StepDimTol_DatumReference self) -> Standard_Integer

        Returns field Precedence

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.StepDimTol_DatumReference_Precedence(self, *args)


    def SetPrecedence(self, *args):
        """
        SetPrecedence(StepDimTol_DatumReference self, Standard_Integer const thePrecedence)

        Set field Precedence

        :type thePrecedence: int

        """
        return _StepDimTol.StepDimTol_DatumReference_SetPrecedence(self, *args)


    def ReferencedDatum(self, *args):
        """
        ReferencedDatum(StepDimTol_DatumReference self) -> Handle_StepDimTol_Datum

        Returns field ReferencedDatum

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_Datum

        """
        return _StepDimTol.StepDimTol_DatumReference_ReferencedDatum(self, *args)


    def SetReferencedDatum(self, *args):
        """
        SetReferencedDatum(StepDimTol_DatumReference self, Handle_StepDimTol_Datum theReferencedDatum)

        Set field ReferencedDatum

        :type theReferencedDatum: OCC.wrapper.StepDimTol.Handle_StepDimTol_Datum

        """
        return _StepDimTol.StepDimTol_DatumReference_SetReferencedDatum(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_DatumReference_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_DatumReference_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_DatumReference_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_DatumReference
StepDimTol_DatumReference_swigregister = _StepDimTol.StepDimTol_DatumReference_swigregister
StepDimTol_DatumReference_swigregister(StepDimTol_DatumReference)

def StepDimTol_DatumReference_get_type_name(*args):
    """
    StepDimTol_DatumReference_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_DatumReference_get_type_name(*args)

def StepDimTol_DatumReference_get_type_descriptor(*args):
    """
    StepDimTol_DatumReference_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_DatumReference_get_type_descriptor(*args)

class StepDimTol_GeometricToleranceWithModifiers(StepDimTol_GeometricTolerance):
    """Representation of STEP entity GeometricToleranceWithModifiers"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_GeometricToleranceWithModifiers
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_GeometricToleranceWithModifiers(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_GeometricToleranceWithModifiers self) -> StepDimTol_GeometricToleranceWithModifiers

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_GeometricToleranceWithModifiers(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepDimTol_GeometricToleranceWithModifiers self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect, Handle_StepDimTol_HArray1OfGeometricToleranceModifier theModifiers)

        Initialize all fields (own and inherited)

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget
        :type theModifiers: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithModifiers_Init(self, *args)


    def Modifiers(self, *args):
        """
        Modifiers(StepDimTol_GeometricToleranceWithModifiers self) -> Handle_StepDimTol_HArray1OfGeometricToleranceModifier

        Returns field Modifiers

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithModifiers_Modifiers(self, *args)


    def SetModifiers(self, *args):
        """
        SetModifiers(StepDimTol_GeometricToleranceWithModifiers self, Handle_StepDimTol_HArray1OfGeometricToleranceModifier theModifiers)

        Set field Modifiers

        :type theModifiers: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithModifiers_SetModifiers(self, *args)


    def NbModifiers(self, *args):
        """
        NbModifiers(StepDimTol_GeometricToleranceWithModifiers self) -> Standard_Integer

        Returns number of modifiers

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithModifiers_NbModifiers(self, *args)


    def ModifierValue(self, *args):
        """
        ModifierValue(StepDimTol_GeometricToleranceWithModifiers self, Standard_Integer const theNum) -> StepDimTol_GeometricToleranceModifier

        Returns modifier with the given number

        :type theNum: int
        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceModifier

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithModifiers_ModifierValue(self, *args)


    def SetModifierValue(self, *args):
        """
        SetModifierValue(StepDimTol_GeometricToleranceWithModifiers self, Standard_Integer const theNum, StepDimTol_GeometricToleranceModifier const theItem)

        Sets modifier with given number

        :type theNum: int
        :type theItem: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceModifier

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithModifiers_SetModifierValue(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithModifiers_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithModifiers_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_GeometricToleranceWithModifiers_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_GeometricToleranceWithModifiers
StepDimTol_GeometricToleranceWithModifiers_swigregister = _StepDimTol.StepDimTol_GeometricToleranceWithModifiers_swigregister
StepDimTol_GeometricToleranceWithModifiers_swigregister(StepDimTol_GeometricToleranceWithModifiers)

def StepDimTol_GeometricToleranceWithModifiers_get_type_name(*args):
    """
    StepDimTol_GeometricToleranceWithModifiers_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_GeometricToleranceWithModifiers_get_type_name(*args)

def StepDimTol_GeometricToleranceWithModifiers_get_type_descriptor(*args):
    """
    StepDimTol_GeometricToleranceWithModifiers_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_GeometricToleranceWithModifiers_get_type_descriptor(*args)

class StepDimTol_ToleranceZoneTarget(StepData.StepData_SelectType):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepDimTol_ToleranceZoneTarget self) -> StepDimTol_ToleranceZoneTarget

        Returns a ToleranceZoneTarget select type


        """
        this = _StepDimTol.new_StepDimTol_ToleranceZoneTarget(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepDimTol_ToleranceZoneTarget self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a ToleranceZoneTarget Kind Entity that is :
        1 -> DimensionalLocation
        2 -> DimensionalSize
        3 -> GeometricTolerance
        4 -> GeneralDatumReference
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.StepDimTol_ToleranceZoneTarget_CaseNum(self, *args)


    def DimensionalLocation(self, *args):
        """
        DimensionalLocation(StepDimTol_ToleranceZoneTarget self) -> Handle_StepShape_DimensionalLocation

        returns Value as a DimensionalLocation (Null if another type)

        :rtype: OCC.wrapper.StepShape.Handle_StepShape_DimensionalLocation

        """
        return _StepDimTol.StepDimTol_ToleranceZoneTarget_DimensionalLocation(self, *args)


    def DimensionalSize(self, *args):
        """
        DimensionalSize(StepDimTol_ToleranceZoneTarget self) -> Handle_StepShape_DimensionalSize

        returns Value as a DimensionalSize (Null if another type)

        :rtype: OCC.wrapper.StepShape.Handle_StepShape_DimensionalSize

        """
        return _StepDimTol.StepDimTol_ToleranceZoneTarget_DimensionalSize(self, *args)


    def GeometricTolerance(self, *args):
        """
        GeometricTolerance(StepDimTol_ToleranceZoneTarget self) -> Handle_StepDimTol_GeometricTolerance

        returns Value as a GeometricTolerance (Null if another type)

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricTolerance

        """
        return _StepDimTol.StepDimTol_ToleranceZoneTarget_GeometricTolerance(self, *args)


    def GeneralDatumReference(self, *args):
        """
        GeneralDatumReference(StepDimTol_ToleranceZoneTarget self) -> Handle_StepDimTol_GeneralDatumReference

        returns Value as a GeneralDatumReference (Null if another type)

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeneralDatumReference

        """
        return _StepDimTol.StepDimTol_ToleranceZoneTarget_GeneralDatumReference(self, *args)

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_ToleranceZoneTarget
StepDimTol_ToleranceZoneTarget_swigregister = _StepDimTol.StepDimTol_ToleranceZoneTarget_swigregister
StepDimTol_ToleranceZoneTarget_swigregister(StepDimTol_ToleranceZoneTarget)

class StepDimTol_DatumReferenceElement(StepDimTol_GeneralDatumReference):
    """Representation of STEP entity DatumReferenceElement"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_DatumReferenceElement
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_DatumReferenceElement(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_DatumReferenceElement self) -> StepDimTol_DatumReferenceElement

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_DatumReferenceElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_DatumReferenceElement_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_DatumReferenceElement_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_DatumReferenceElement_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_DatumReferenceElement
StepDimTol_DatumReferenceElement_swigregister = _StepDimTol.StepDimTol_DatumReferenceElement_swigregister
StepDimTol_DatumReferenceElement_swigregister(StepDimTol_DatumReferenceElement)

def StepDimTol_DatumReferenceElement_get_type_name(*args):
    """
    StepDimTol_DatumReferenceElement_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_DatumReferenceElement_get_type_name(*args)

def StepDimTol_DatumReferenceElement_get_type_descriptor(*args):
    """
    StepDimTol_DatumReferenceElement_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_DatumReferenceElement_get_type_descriptor(*args)

class StepDimTol_HArray1OfDatumReferenceCompartment(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_HArray1OfDatumReferenceCompartment
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_HArray1OfDatumReferenceCompartment(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_HArray1OfDatumReferenceCompartment self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepDimTol_HArray1OfDatumReferenceCompartment
        __init__(StepDimTol_HArray1OfDatumReferenceCompartment self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_StepDimTol_DatumReferenceCompartment theValue) -> StepDimTol_HArray1OfDatumReferenceCompartment
        __init__(StepDimTol_HArray1OfDatumReferenceCompartment self, NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment theOther) -> StepDimTol_HArray1OfDatumReferenceCompartment

        :type theOther: OCC.wrapper.StepDimTol.StepDimTol_Array1OfDatumReferenceCompartment

        """
        this = _StepDimTol.new_StepDimTol_HArray1OfDatumReferenceCompartment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepDimTol.StepDimTol_Array1OfDatumReferenceCompartment

        """
        res = _StepDimTol.StepDimTol_HArray1OfDatumReferenceCompartment_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepDimTol_HArray1OfDatumReferenceCompartment self) -> NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_Array1OfDatumReferenceCompartment

        """
        return _StepDimTol.StepDimTol_HArray1OfDatumReferenceCompartment_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_HArray1OfDatumReferenceCompartment_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_HArray1OfDatumReferenceCompartment_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_HArray1OfDatumReferenceCompartment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_HArray1OfDatumReferenceCompartment
StepDimTol_HArray1OfDatumReferenceCompartment_swigregister = _StepDimTol.StepDimTol_HArray1OfDatumReferenceCompartment_swigregister
StepDimTol_HArray1OfDatumReferenceCompartment_swigregister(StepDimTol_HArray1OfDatumReferenceCompartment)

def StepDimTol_HArray1OfDatumReferenceCompartment_get_type_name(*args):
    """
    StepDimTol_HArray1OfDatumReferenceCompartment_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_HArray1OfDatumReferenceCompartment_get_type_name(*args)

def StepDimTol_HArray1OfDatumReferenceCompartment_get_type_descriptor(*args):
    """
    StepDimTol_HArray1OfDatumReferenceCompartment_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_HArray1OfDatumReferenceCompartment_get_type_descriptor(*args)

class StepDimTol_StraightnessTolerance(StepDimTol_GeometricTolerance):
    """Representation of STEP entity StraightnessTolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_StraightnessTolerance
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_StraightnessTolerance(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_StraightnessTolerance self) -> StepDimTol_StraightnessTolerance

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_StraightnessTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_StraightnessTolerance_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_StraightnessTolerance_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_StraightnessTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_StraightnessTolerance
StepDimTol_StraightnessTolerance_swigregister = _StepDimTol.StepDimTol_StraightnessTolerance_swigregister
StepDimTol_StraightnessTolerance_swigregister(StepDimTol_StraightnessTolerance)

def StepDimTol_StraightnessTolerance_get_type_name(*args):
    """
    StepDimTol_StraightnessTolerance_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_StraightnessTolerance_get_type_name(*args)

def StepDimTol_StraightnessTolerance_get_type_descriptor(*args):
    """
    StepDimTol_StraightnessTolerance_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_StraightnessTolerance_get_type_descriptor(*args)

class StepDimTol_DatumSystem(StepRepr.StepRepr_ShapeAspect):
    """Representation of STEP entity DatumSystem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_DatumSystem
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_DatumSystem(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_DatumSystem self) -> StepDimTol_DatumSystem

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_DatumSystem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepDimTol_DatumSystem self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepRepr_ProductDefinitionShape theOfShape, StepData_Logical const theProductDefinitional, Handle_StepDimTol_HArray1OfDatumReferenceCompartment theConstituents)

        Initialize all fields (own and inherited)

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theOfShape: OCC.wrapper.StepDimTol.Handle_StepRepr_ProductDefinitionShape
        :type theProductDefinitional: OCC.wrapper.StepData.StepData_Logical
        :type theConstituents: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceCompartment

        """
        return _StepDimTol.StepDimTol_DatumSystem_Init(self, *args)


    def Constituents(self, *args):
        """
        Constituents(StepDimTol_DatumSystem self) -> Handle_StepDimTol_HArray1OfDatumReferenceCompartment

        Returns field Constituents

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceCompartment

        """
        return _StepDimTol.StepDimTol_DatumSystem_Constituents(self, *args)


    def SetConstituents(self, *args):
        """
        SetConstituents(StepDimTol_DatumSystem self, Handle_StepDimTol_HArray1OfDatumReferenceCompartment theConstituents)

        Set field Constituents

        :type theConstituents: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceCompartment

        """
        return _StepDimTol.StepDimTol_DatumSystem_SetConstituents(self, *args)


    def NbConstituents(self, *args):
        """
        NbConstituents(StepDimTol_DatumSystem self) -> Standard_Integer

        Returns number of Constituents

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.StepDimTol_DatumSystem_NbConstituents(self, *args)


    def ConstituentsValue(self, *args):
        """
        ConstituentsValue(StepDimTol_DatumSystem self, Standard_Integer const num) -> Handle_StepDimTol_DatumReferenceCompartment
        ConstituentsValue(StepDimTol_DatumSystem self, Standard_Integer const num, Handle_StepDimTol_DatumReferenceCompartment theItem)

        Sets Constituents with given number

        :type num: int
        :type theItem: OCC.wrapper.StepDimTol.Handle_StepDimTol_DatumReferenceCompartment

        """
        return _StepDimTol.StepDimTol_DatumSystem_ConstituentsValue(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_DatumSystem_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_DatumSystem_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_DatumSystem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_DatumSystem
StepDimTol_DatumSystem_swigregister = _StepDimTol.StepDimTol_DatumSystem_swigregister
StepDimTol_DatumSystem_swigregister(StepDimTol_DatumSystem)

def StepDimTol_DatumSystem_get_type_name(*args):
    """
    StepDimTol_DatumSystem_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_DatumSystem_get_type_name(*args)

def StepDimTol_DatumSystem_get_type_descriptor(*args):
    """
    StepDimTol_DatumSystem_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_DatumSystem_get_type_descriptor(*args)

class StepDimTol_CircularRunoutTolerance(StepDimTol_GeometricToleranceWithDatumReference):
    """Representation of STEP entity CircularRunoutTolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_CircularRunoutTolerance
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_CircularRunoutTolerance(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_CircularRunoutTolerance self) -> StepDimTol_CircularRunoutTolerance

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_CircularRunoutTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_CircularRunoutTolerance_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_CircularRunoutTolerance_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_CircularRunoutTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_CircularRunoutTolerance
StepDimTol_CircularRunoutTolerance_swigregister = _StepDimTol.StepDimTol_CircularRunoutTolerance_swigregister
StepDimTol_CircularRunoutTolerance_swigregister(StepDimTol_CircularRunoutTolerance)

def StepDimTol_CircularRunoutTolerance_get_type_name(*args):
    """
    StepDimTol_CircularRunoutTolerance_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_CircularRunoutTolerance_get_type_name(*args)

def StepDimTol_CircularRunoutTolerance_get_type_descriptor(*args):
    """
    StepDimTol_CircularRunoutTolerance_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_CircularRunoutTolerance_get_type_descriptor(*args)

class StepDimTol_CoaxialityTolerance(StepDimTol_GeometricToleranceWithDatumReference):
    """Representation of STEP entity CoaxialityTolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_CoaxialityTolerance
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_CoaxialityTolerance(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_CoaxialityTolerance self) -> StepDimTol_CoaxialityTolerance

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_CoaxialityTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_CoaxialityTolerance_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_CoaxialityTolerance_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_CoaxialityTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_CoaxialityTolerance
StepDimTol_CoaxialityTolerance_swigregister = _StepDimTol.StepDimTol_CoaxialityTolerance_swigregister
StepDimTol_CoaxialityTolerance_swigregister(StepDimTol_CoaxialityTolerance)

def StepDimTol_CoaxialityTolerance_get_type_name(*args):
    """
    StepDimTol_CoaxialityTolerance_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_CoaxialityTolerance_get_type_name(*args)

def StepDimTol_CoaxialityTolerance_get_type_descriptor(*args):
    """
    StepDimTol_CoaxialityTolerance_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_CoaxialityTolerance_get_type_descriptor(*args)

class StepDimTol_GeoTolAndGeoTolWthMaxTol(StepDimTol_GeoTolAndGeoTolWthMod):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol(self) 
            return h


    def __init__(self, *args):
        """__init__(StepDimTol_GeoTolAndGeoTolWthMaxTol self) -> StepDimTol_GeoTolAndGeoTolWthMaxTol"""
        this = _StepDimTol.new_StepDimTol_GeoTolAndGeoTolWthMaxTol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepDimTol_GeoTolAndGeoTolWthMaxTol self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect, Handle_StepDimTol_GeometricToleranceWithModifiers theGTWM, Handle_StepBasic_LengthMeasureWithUnit theMaxTol, StepDimTol_GeometricToleranceType const theType)
        Init(StepDimTol_GeoTolAndGeoTolWthMaxTol self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepBasic_MeasureWithUnit aMagnitude, StepDimTol_GeometricToleranceTarget aTolerancedShapeAspect, Handle_StepDimTol_GeometricToleranceWithModifiers aGTWM, Handle_StepBasic_LengthMeasureWithUnit theMaxTol, StepDimTol_GeometricToleranceType const theType)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type aTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget
        :type aGTWM: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers
        :type theMaxTol: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit
        :type theType: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceType

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthMaxTol_Init(self, *args)


    def SetMaxTolerance(self, *args):
        """
        SetMaxTolerance(StepDimTol_GeoTolAndGeoTolWthMaxTol self, Handle_StepBasic_LengthMeasureWithUnit theMaxTol)

        :type theMaxTol: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthMaxTol_SetMaxTolerance(self, *args)


    def GetMaxTolerance(self, *args):
        """
        GetMaxTolerance(StepDimTol_GeoTolAndGeoTolWthMaxTol self) -> Handle_StepBasic_LengthMeasureWithUnit

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthMaxTol_GetMaxTolerance(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthMaxTol_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthMaxTol_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_GeoTolAndGeoTolWthMaxTol_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_GeoTolAndGeoTolWthMaxTol
StepDimTol_GeoTolAndGeoTolWthMaxTol_swigregister = _StepDimTol.StepDimTol_GeoTolAndGeoTolWthMaxTol_swigregister
StepDimTol_GeoTolAndGeoTolWthMaxTol_swigregister(StepDimTol_GeoTolAndGeoTolWthMaxTol)

def StepDimTol_GeoTolAndGeoTolWthMaxTol_get_type_name(*args):
    """
    StepDimTol_GeoTolAndGeoTolWthMaxTol_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthMaxTol_get_type_name(*args)

def StepDimTol_GeoTolAndGeoTolWthMaxTol_get_type_descriptor(*args):
    """
    StepDimTol_GeoTolAndGeoTolWthMaxTol_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthMaxTol_get_type_descriptor(*args)

class StepDimTol_HArray1OfToleranceZoneTarget(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_HArray1OfToleranceZoneTarget
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_HArray1OfToleranceZoneTarget(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_HArray1OfToleranceZoneTarget self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepDimTol_HArray1OfToleranceZoneTarget
        __init__(StepDimTol_HArray1OfToleranceZoneTarget self, Standard_Integer const theLower, Standard_Integer const theUpper, StepDimTol_ToleranceZoneTarget theValue) -> StepDimTol_HArray1OfToleranceZoneTarget
        __init__(StepDimTol_HArray1OfToleranceZoneTarget self, NCollection_Array1_StepDimTol_ToleranceZoneTarget theOther) -> StepDimTol_HArray1OfToleranceZoneTarget

        :type theOther: OCC.wrapper.StepDimTol.StepDimTol_Array1OfToleranceZoneTarget

        """
        this = _StepDimTol.new_StepDimTol_HArray1OfToleranceZoneTarget(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepDimTol.StepDimTol_Array1OfToleranceZoneTarget

        """
        res = _StepDimTol.StepDimTol_HArray1OfToleranceZoneTarget_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepDimTol_HArray1OfToleranceZoneTarget self) -> NCollection_Array1_StepDimTol_ToleranceZoneTarget

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_Array1OfToleranceZoneTarget

        """
        return _StepDimTol.StepDimTol_HArray1OfToleranceZoneTarget_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_HArray1OfToleranceZoneTarget_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_HArray1OfToleranceZoneTarget_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_HArray1OfToleranceZoneTarget_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_HArray1OfToleranceZoneTarget
StepDimTol_HArray1OfToleranceZoneTarget_swigregister = _StepDimTol.StepDimTol_HArray1OfToleranceZoneTarget_swigregister
StepDimTol_HArray1OfToleranceZoneTarget_swigregister(StepDimTol_HArray1OfToleranceZoneTarget)

def StepDimTol_HArray1OfToleranceZoneTarget_get_type_name(*args):
    """
    StepDimTol_HArray1OfToleranceZoneTarget_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_HArray1OfToleranceZoneTarget_get_type_name(*args)

def StepDimTol_HArray1OfToleranceZoneTarget_get_type_descriptor(*args):
    """
    StepDimTol_HArray1OfToleranceZoneTarget_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_HArray1OfToleranceZoneTarget_get_type_descriptor(*args)

class StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod(StepDimTol_GeometricTolerance):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod(self) 
            return h


    def __init__(self, *args):
        """__init__(StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self) -> StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod"""
        this = _StepDimTol.new_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect, Handle_StepDimTol_GeometricToleranceWithDatumReference theGTWDR, Handle_StepDimTol_GeometricToleranceWithModifiers theGTWM, StepDimTol_GeometricToleranceType const theType)
        Init(StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepBasic_MeasureWithUnit aMagnitude, StepDimTol_GeometricToleranceTarget aTolerancedShapeAspect, Handle_StepDimTol_GeometricToleranceWithDatumReference aGTWDR, Handle_StepDimTol_GeometricToleranceWithModifiers aGTWM, StepDimTol_GeometricToleranceType const theType)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type aTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget
        :type aGTWDR: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference
        :type aGTWM: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers
        :type theType: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceType

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_Init(self, *args)


    def SetGeometricToleranceWithDatumReference(self, *args):
        """
        SetGeometricToleranceWithDatumReference(StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self, Handle_StepDimTol_GeometricToleranceWithDatumReference theGTWDR)

        :type theGTWDR: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_SetGeometricToleranceWithDatumReference(self, *args)


    def GetGeometricToleranceWithDatumReference(self, *args):
        """
        GetGeometricToleranceWithDatumReference(StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self) -> Handle_StepDimTol_GeometricToleranceWithDatumReference

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_GetGeometricToleranceWithDatumReference(self, *args)


    def SetGeometricToleranceWithModifiers(self, *args):
        """
        SetGeometricToleranceWithModifiers(StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self, Handle_StepDimTol_GeometricToleranceWithModifiers theGTWM)

        :type theGTWM: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_SetGeometricToleranceWithModifiers(self, *args)


    def GetGeometricToleranceWithModifiers(self, *args):
        """
        GetGeometricToleranceWithModifiers(StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self) -> Handle_StepDimTol_GeometricToleranceWithModifiers

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_GetGeometricToleranceWithModifiers(self, *args)


    def SetGeometricToleranceType(self, *args):
        """
        SetGeometricToleranceType(StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self, StepDimTol_GeometricToleranceType const theType)

        :type theType: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceType

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_SetGeometricToleranceType(self, *args)


    def GetToleranceType(self, *args):
        """
        GetToleranceType(StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self) -> StepDimTol_GeometricToleranceType

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceType

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_GetToleranceType(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod
StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_swigregister = _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_swigregister
StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_swigregister(StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod)

def StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_get_type_name(*args):
    """
    StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_get_type_name(*args)

def StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_get_type_descriptor(*args):
    """
    StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_get_type_descriptor(*args)

class StepDimTol_ToleranceZoneForm(Standard.Standard_Transient):
    """Added for Dimensional Tolerances"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_ToleranceZoneForm
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_ToleranceZoneForm(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_ToleranceZoneForm self) -> StepDimTol_ToleranceZoneForm

        Added for Dimensional Tolerances
        """
        this = _StepDimTol.new_StepDimTol_ToleranceZoneForm(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepDimTol_ToleranceZoneForm self, Handle_TCollection_HAsciiString theName)

        Init all field own and inherited

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.StepDimTol_ToleranceZoneForm_Init(self, *args)


    def Name(self, *args):
        """
        Name(StepDimTol_ToleranceZoneForm self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.StepDimTol_ToleranceZoneForm_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(StepDimTol_ToleranceZoneForm self, Handle_TCollection_HAsciiString theName)

        Set field Name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.StepDimTol_ToleranceZoneForm_SetName(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_ToleranceZoneForm_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_ToleranceZoneForm_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_ToleranceZoneForm_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_ToleranceZoneForm
StepDimTol_ToleranceZoneForm_swigregister = _StepDimTol.StepDimTol_ToleranceZoneForm_swigregister
StepDimTol_ToleranceZoneForm_swigregister(StepDimTol_ToleranceZoneForm)

def StepDimTol_ToleranceZoneForm_get_type_name(*args):
    """
    StepDimTol_ToleranceZoneForm_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_ToleranceZoneForm_get_type_name(*args)

def StepDimTol_ToleranceZoneForm_get_type_descriptor(*args):
    """
    StepDimTol_ToleranceZoneForm_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_ToleranceZoneForm_get_type_descriptor(*args)

class StepDimTol_PerpendicularityTolerance(StepDimTol_GeometricToleranceWithDatumReference):
    """Representation of STEP entity PerpendicularityTolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_PerpendicularityTolerance
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_PerpendicularityTolerance(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_PerpendicularityTolerance self) -> StepDimTol_PerpendicularityTolerance

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_PerpendicularityTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_PerpendicularityTolerance_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_PerpendicularityTolerance_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_PerpendicularityTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_PerpendicularityTolerance
StepDimTol_PerpendicularityTolerance_swigregister = _StepDimTol.StepDimTol_PerpendicularityTolerance_swigregister
StepDimTol_PerpendicularityTolerance_swigregister(StepDimTol_PerpendicularityTolerance)

def StepDimTol_PerpendicularityTolerance_get_type_name(*args):
    """
    StepDimTol_PerpendicularityTolerance_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_PerpendicularityTolerance_get_type_name(*args)

def StepDimTol_PerpendicularityTolerance_get_type_descriptor(*args):
    """
    StepDimTol_PerpendicularityTolerance_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_PerpendicularityTolerance_get_type_descriptor(*args)

class StepDimTol_PositionTolerance(StepDimTol_GeometricTolerance):
    """Representation of STEP entity PositionTolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_PositionTolerance
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_PositionTolerance(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_PositionTolerance self) -> StepDimTol_PositionTolerance

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_PositionTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_PositionTolerance_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_PositionTolerance_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_PositionTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_PositionTolerance
StepDimTol_PositionTolerance_swigregister = _StepDimTol.StepDimTol_PositionTolerance_swigregister
StepDimTol_PositionTolerance_swigregister(StepDimTol_PositionTolerance)

def StepDimTol_PositionTolerance_get_type_name(*args):
    """
    StepDimTol_PositionTolerance_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_PositionTolerance_get_type_name(*args)

def StepDimTol_PositionTolerance_get_type_descriptor(*args):
    """
    StepDimTol_PositionTolerance_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_PositionTolerance_get_type_descriptor(*args)

class StepDimTol_DatumFeature(StepRepr.StepRepr_ShapeAspect):
    """Representation of STEP entity DatumFeature"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_DatumFeature
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_DatumFeature(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_DatumFeature self) -> StepDimTol_DatumFeature

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_DatumFeature(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_DatumFeature_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_DatumFeature_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_DatumFeature_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_DatumFeature
StepDimTol_DatumFeature_swigregister = _StepDimTol.StepDimTol_DatumFeature_swigregister
StepDimTol_DatumFeature_swigregister(StepDimTol_DatumFeature)

def StepDimTol_DatumFeature_get_type_name(*args):
    """
    StepDimTol_DatumFeature_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_DatumFeature_get_type_name(*args)

def StepDimTol_DatumFeature_get_type_descriptor(*args):
    """
    StepDimTol_DatumFeature_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_DatumFeature_get_type_descriptor(*args)

class StepDimTol_HArray1OfDatumReferenceModifier(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_HArray1OfDatumReferenceModifier
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_HArray1OfDatumReferenceModifier(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_HArray1OfDatumReferenceModifier self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepDimTol_HArray1OfDatumReferenceModifier
        __init__(StepDimTol_HArray1OfDatumReferenceModifier self, Standard_Integer const theLower, Standard_Integer const theUpper, StepDimTol_DatumReferenceModifier theValue) -> StepDimTol_HArray1OfDatumReferenceModifier
        __init__(StepDimTol_HArray1OfDatumReferenceModifier self, NCollection_Array1_StepDimTol_DatumReferenceModifier theOther) -> StepDimTol_HArray1OfDatumReferenceModifier

        :type theOther: OCC.wrapper.StepDimTol.StepDimTol_Array1OfDatumReferenceModifier

        """
        this = _StepDimTol.new_StepDimTol_HArray1OfDatumReferenceModifier(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepDimTol.StepDimTol_Array1OfDatumReferenceModifier

        """
        res = _StepDimTol.StepDimTol_HArray1OfDatumReferenceModifier_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepDimTol_HArray1OfDatumReferenceModifier self) -> NCollection_Array1_StepDimTol_DatumReferenceModifier

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_Array1OfDatumReferenceModifier

        """
        return _StepDimTol.StepDimTol_HArray1OfDatumReferenceModifier_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_HArray1OfDatumReferenceModifier_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_HArray1OfDatumReferenceModifier_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_HArray1OfDatumReferenceModifier_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_HArray1OfDatumReferenceModifier
StepDimTol_HArray1OfDatumReferenceModifier_swigregister = _StepDimTol.StepDimTol_HArray1OfDatumReferenceModifier_swigregister
StepDimTol_HArray1OfDatumReferenceModifier_swigregister(StepDimTol_HArray1OfDatumReferenceModifier)

def StepDimTol_HArray1OfDatumReferenceModifier_get_type_name(*args):
    """
    StepDimTol_HArray1OfDatumReferenceModifier_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_HArray1OfDatumReferenceModifier_get_type_name(*args)

def StepDimTol_HArray1OfDatumReferenceModifier_get_type_descriptor(*args):
    """
    StepDimTol_HArray1OfDatumReferenceModifier_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_HArray1OfDatumReferenceModifier_get_type_descriptor(*args)

class StepDimTol_DatumReferenceCompartment(StepDimTol_GeneralDatumReference):
    """Representation of STEP entity DatumReferenceCompartment"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_DatumReferenceCompartment
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_DatumReferenceCompartment(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_DatumReferenceCompartment self) -> StepDimTol_DatumReferenceCompartment

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_DatumReferenceCompartment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_DatumReferenceCompartment_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_DatumReferenceCompartment_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_DatumReferenceCompartment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_DatumReferenceCompartment
StepDimTol_DatumReferenceCompartment_swigregister = _StepDimTol.StepDimTol_DatumReferenceCompartment_swigregister
StepDimTol_DatumReferenceCompartment_swigregister(StepDimTol_DatumReferenceCompartment)

def StepDimTol_DatumReferenceCompartment_get_type_name(*args):
    """
    StepDimTol_DatumReferenceCompartment_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_DatumReferenceCompartment_get_type_name(*args)

def StepDimTol_DatumReferenceCompartment_get_type_descriptor(*args):
    """
    StepDimTol_DatumReferenceCompartment_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_DatumReferenceCompartment_get_type_descriptor(*args)

class StepDimTol_DatumSystemOrReference(StepData.StepData_SelectType):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepDimTol_DatumSystemOrReference self) -> StepDimTol_DatumSystemOrReference

        Returns a DatumSystemOrReference select type


        """
        this = _StepDimTol.new_StepDimTol_DatumSystemOrReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepDimTol_DatumSystemOrReference self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a DatumSystemOrReference Kind Entity that is :
        1 -> DatumSystem
        2 -> DatumReference
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.StepDimTol_DatumSystemOrReference_CaseNum(self, *args)


    def DatumSystem(self, *args):
        """
        DatumSystem(StepDimTol_DatumSystemOrReference self) -> Handle_StepDimTol_DatumSystem

        returns Value as a DatumSystem (Null if another type)

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_DatumSystem

        """
        return _StepDimTol.StepDimTol_DatumSystemOrReference_DatumSystem(self, *args)


    def DatumReference(self, *args):
        """
        DatumReference(StepDimTol_DatumSystemOrReference self) -> Handle_StepDimTol_DatumReference

        returns Value as a DatumReference (Null if another type)

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_DatumReference

        """
        return _StepDimTol.StepDimTol_DatumSystemOrReference_DatumReference(self, *args)

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_DatumSystemOrReference
StepDimTol_DatumSystemOrReference_swigregister = _StepDimTol.StepDimTol_DatumSystemOrReference_swigregister
StepDimTol_DatumSystemOrReference_swigregister(StepDimTol_DatumSystemOrReference)

class StepDimTol_SimpleDatumReferenceModifierMember(StepData.StepData_SelectInt):
    """
    Defines SimpleDatumReferenceModifier as unique member of DatumReferenceModifier
    Works with an EnumTool
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_SimpleDatumReferenceModifierMember
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_SimpleDatumReferenceModifierMember(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_SimpleDatumReferenceModifierMember self) -> StepDimTol_SimpleDatumReferenceModifierMember

        Defines SimpleDatumReferenceModifier as unique member of DatumReferenceModifier
        Works with an EnumTool
        """
        this = _StepDimTol.new_StepDimTol_SimpleDatumReferenceModifierMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def HasName(self, *args):
        """
        HasName(StepDimTol_SimpleDatumReferenceModifierMember self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.StepDimTol_SimpleDatumReferenceModifierMember_HasName(self, *args)


    def Name(self, *args):
        """
        Name(StepDimTol_SimpleDatumReferenceModifierMember self) -> Standard_CString

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StepDimTol.StepDimTol_SimpleDatumReferenceModifierMember_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(StepDimTol_SimpleDatumReferenceModifierMember self, Standard_CString const arg2) -> Standard_Boolean

        :type : OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.StepDimTol_SimpleDatumReferenceModifierMember_SetName(self, *args)


    def Kind(self, *args):
        """
        Kind(StepDimTol_SimpleDatumReferenceModifierMember self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.StepDimTol_SimpleDatumReferenceModifierMember_Kind(self, *args)


    def EnumText(self, *args):
        """
        EnumText(StepDimTol_SimpleDatumReferenceModifierMember self) -> Standard_CString

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StepDimTol.StepDimTol_SimpleDatumReferenceModifierMember_EnumText(self, *args)


    def SetEnumText(self, *args):
        """
        SetEnumText(StepDimTol_SimpleDatumReferenceModifierMember self, Standard_Integer const theValue, Standard_CString const theText)

        :type theValue: int
        :type theText: OCC.wrapper.Standard.Standard_CString

        """
        return _StepDimTol.StepDimTol_SimpleDatumReferenceModifierMember_SetEnumText(self, *args)


    def SetValue(self, *args):
        """
        SetValue(StepDimTol_SimpleDatumReferenceModifierMember self, StepDimTol_SimpleDatumReferenceModifier const theValue)

        :type theValue: OCC.wrapper.StepDimTol.StepDimTol_SimpleDatumReferenceModifier

        """
        return _StepDimTol.StepDimTol_SimpleDatumReferenceModifierMember_SetValue(self, *args)


    def Value(self, *args):
        """
        Value(StepDimTol_SimpleDatumReferenceModifierMember self) -> StepDimTol_SimpleDatumReferenceModifier

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_SimpleDatumReferenceModifier

        """
        return _StepDimTol.StepDimTol_SimpleDatumReferenceModifierMember_Value(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_SimpleDatumReferenceModifierMember_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_SimpleDatumReferenceModifierMember_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_SimpleDatumReferenceModifierMember_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_SimpleDatumReferenceModifierMember
StepDimTol_SimpleDatumReferenceModifierMember_swigregister = _StepDimTol.StepDimTol_SimpleDatumReferenceModifierMember_swigregister
StepDimTol_SimpleDatumReferenceModifierMember_swigregister(StepDimTol_SimpleDatumReferenceModifierMember)

def StepDimTol_SimpleDatumReferenceModifierMember_get_type_name(*args):
    """
    StepDimTol_SimpleDatumReferenceModifierMember_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_SimpleDatumReferenceModifierMember_get_type_name(*args)

def StepDimTol_SimpleDatumReferenceModifierMember_get_type_descriptor(*args):
    """
    StepDimTol_SimpleDatumReferenceModifierMember_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_SimpleDatumReferenceModifierMember_get_type_descriptor(*args)

class StepDimTol_ModifiedGeometricTolerance(StepDimTol_GeometricTolerance):
    """Representation of STEP entity ModifiedGeometricTolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_ModifiedGeometricTolerance
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_ModifiedGeometricTolerance(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_ModifiedGeometricTolerance self) -> StepDimTol_ModifiedGeometricTolerance

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_ModifiedGeometricTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepDimTol_ModifiedGeometricTolerance self, Handle_TCollection_HAsciiString theGeometricTolerance_Name, Handle_TCollection_HAsciiString theGeometricTolerance_Description, Handle_StepBasic_MeasureWithUnit theGeometricTolerance_Magnitude, Handle_StepRepr_ShapeAspect theGeometricTolerance_TolerancedShapeAspect, StepDimTol_LimitCondition const theModifier)
        Init(StepDimTol_ModifiedGeometricTolerance self, Handle_TCollection_HAsciiString theGeometricTolerance_Name, Handle_TCollection_HAsciiString theGeometricTolerance_Description, Handle_StepBasic_MeasureWithUnit theGeometricTolerance_Magnitude, StepDimTol_GeometricToleranceTarget theGeometricTolerance_TolerancedShapeAspect, StepDimTol_LimitCondition const theModifier)

        Initialize all fields (own and inherited) AP242

        :type theGeometricTolerance_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theGeometricTolerance_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theGeometricTolerance_Magnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type theGeometricTolerance_TolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget
        :type theModifier: OCC.wrapper.StepDimTol.StepDimTol_LimitCondition

        """
        return _StepDimTol.StepDimTol_ModifiedGeometricTolerance_Init(self, *args)


    def Modifier(self, *args):
        """
        Modifier(StepDimTol_ModifiedGeometricTolerance self) -> StepDimTol_LimitCondition

        Returns field Modifier

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_LimitCondition

        """
        return _StepDimTol.StepDimTol_ModifiedGeometricTolerance_Modifier(self, *args)


    def SetModifier(self, *args):
        """
        SetModifier(StepDimTol_ModifiedGeometricTolerance self, StepDimTol_LimitCondition const theModifier)

        Set field Modifier

        :type theModifier: OCC.wrapper.StepDimTol.StepDimTol_LimitCondition

        """
        return _StepDimTol.StepDimTol_ModifiedGeometricTolerance_SetModifier(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_ModifiedGeometricTolerance_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_ModifiedGeometricTolerance_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_ModifiedGeometricTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_ModifiedGeometricTolerance
StepDimTol_ModifiedGeometricTolerance_swigregister = _StepDimTol.StepDimTol_ModifiedGeometricTolerance_swigregister
StepDimTol_ModifiedGeometricTolerance_swigregister(StepDimTol_ModifiedGeometricTolerance)

def StepDimTol_ModifiedGeometricTolerance_get_type_name(*args):
    """
    StepDimTol_ModifiedGeometricTolerance_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_ModifiedGeometricTolerance_get_type_name(*args)

def StepDimTol_ModifiedGeometricTolerance_get_type_descriptor(*args):
    """
    StepDimTol_ModifiedGeometricTolerance_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_ModifiedGeometricTolerance_get_type_descriptor(*args)

class StepDimTol_GeometricToleranceWithMaximumTolerance(StepDimTol_GeometricToleranceWithModifiers):
    """Representation of STEP entity GeometricToleranceWithMaximumTolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_GeometricToleranceWithMaximumTolerance
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_GeometricToleranceWithMaximumTolerance(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_GeometricToleranceWithMaximumTolerance self) -> StepDimTol_GeometricToleranceWithMaximumTolerance

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_GeometricToleranceWithMaximumTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepDimTol_GeometricToleranceWithMaximumTolerance self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect, Handle_StepDimTol_HArray1OfGeometricToleranceModifier theModifiers, Handle_StepBasic_LengthMeasureWithUnit theUnitSize)

        Initialize all fields (own and inherited)

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget
        :type theModifiers: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier
        :type theUnitSize: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithMaximumTolerance_Init(self, *args)


    def MaximumUpperTolerance(self, *args):
        """
        MaximumUpperTolerance(StepDimTol_GeometricToleranceWithMaximumTolerance self) -> Handle_StepBasic_LengthMeasureWithUnit

        Returns field MaximumUpperTolerance

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithMaximumTolerance_MaximumUpperTolerance(self, *args)


    def SetMaximumUpperTolerance(self, *args):
        """
        SetMaximumUpperTolerance(StepDimTol_GeometricToleranceWithMaximumTolerance self, Handle_StepBasic_LengthMeasureWithUnit theMaximumUpperTolerance)

        Set field MaximumUpperTolerance

        :type theMaximumUpperTolerance: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithMaximumTolerance_SetMaximumUpperTolerance(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithMaximumTolerance_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_GeometricToleranceWithMaximumTolerance_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_GeometricToleranceWithMaximumTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_GeometricToleranceWithMaximumTolerance
StepDimTol_GeometricToleranceWithMaximumTolerance_swigregister = _StepDimTol.StepDimTol_GeometricToleranceWithMaximumTolerance_swigregister
StepDimTol_GeometricToleranceWithMaximumTolerance_swigregister(StepDimTol_GeometricToleranceWithMaximumTolerance)

def StepDimTol_GeometricToleranceWithMaximumTolerance_get_type_name(*args):
    """
    StepDimTol_GeometricToleranceWithMaximumTolerance_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_GeometricToleranceWithMaximumTolerance_get_type_name(*args)

def StepDimTol_GeometricToleranceWithMaximumTolerance_get_type_descriptor(*args):
    """
    StepDimTol_GeometricToleranceWithMaximumTolerance_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_GeometricToleranceWithMaximumTolerance_get_type_descriptor(*args)

class StepDimTol_ConcentricityTolerance(StepDimTol_GeometricToleranceWithDatumReference):
    """Representation of STEP entity ConcentricityTolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_ConcentricityTolerance
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_ConcentricityTolerance(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_ConcentricityTolerance self) -> StepDimTol_ConcentricityTolerance

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_ConcentricityTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_ConcentricityTolerance_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_ConcentricityTolerance_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_ConcentricityTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_ConcentricityTolerance
StepDimTol_ConcentricityTolerance_swigregister = _StepDimTol.StepDimTol_ConcentricityTolerance_swigregister
StepDimTol_ConcentricityTolerance_swigregister(StepDimTol_ConcentricityTolerance)

def StepDimTol_ConcentricityTolerance_get_type_name(*args):
    """
    StepDimTol_ConcentricityTolerance_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_ConcentricityTolerance_get_type_name(*args)

def StepDimTol_ConcentricityTolerance_get_type_descriptor(*args):
    """
    StepDimTol_ConcentricityTolerance_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_ConcentricityTolerance_get_type_descriptor(*args)

class StepDimTol_GeometricToleranceTarget(StepData.StepData_SelectType):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepDimTol_GeometricToleranceTarget self) -> StepDimTol_GeometricToleranceTarget

        Returns a GeometricToleranceTarget select type


        """
        this = _StepDimTol.new_StepDimTol_GeometricToleranceTarget(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepDimTol_GeometricToleranceTarget self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a GeometricToleranceTarget Kind Entity that is :
        1 -> DimensionalLocation
        2 -> DimensionalSize
        3 -> ProductDefinitionShape
        4 -> ShapeAspect
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.StepDimTol_GeometricToleranceTarget_CaseNum(self, *args)


    def DimensionalLocation(self, *args):
        """
        DimensionalLocation(StepDimTol_GeometricToleranceTarget self) -> Handle_StepShape_DimensionalLocation

        returns Value as a DimensionalLocation (Null if another type)

        :rtype: OCC.wrapper.StepShape.Handle_StepShape_DimensionalLocation

        """
        return _StepDimTol.StepDimTol_GeometricToleranceTarget_DimensionalLocation(self, *args)


    def DimensionalSize(self, *args):
        """
        DimensionalSize(StepDimTol_GeometricToleranceTarget self) -> Handle_StepShape_DimensionalSize

        returns Value as a DimensionalSize (Null if another type)

        :rtype: OCC.wrapper.StepShape.Handle_StepShape_DimensionalSize

        """
        return _StepDimTol.StepDimTol_GeometricToleranceTarget_DimensionalSize(self, *args)


    def ProductDefinitionShape(self, *args):
        """
        ProductDefinitionShape(StepDimTol_GeometricToleranceTarget self) -> Handle_StepRepr_ProductDefinitionShape

        returns Value as a ProductDefinitionShape (Null if another type)

        :rtype: OCC.wrapper.StepDimTol.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepDimTol.StepDimTol_GeometricToleranceTarget_ProductDefinitionShape(self, *args)


    def ShapeAspect(self, *args):
        """
        ShapeAspect(StepDimTol_GeometricToleranceTarget self) -> Handle_StepRepr_ShapeAspect

        returns Value as a ShapeAspect (Null if another type)

        :rtype: OCC.wrapper.StepDimTol.Handle_StepRepr_ShapeAspect

        """
        return _StepDimTol.StepDimTol_GeometricToleranceTarget_ShapeAspect(self, *args)

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_GeometricToleranceTarget
StepDimTol_GeometricToleranceTarget_swigregister = _StepDimTol.StepDimTol_GeometricToleranceTarget_swigregister
StepDimTol_GeometricToleranceTarget_swigregister(StepDimTol_GeometricToleranceTarget)

class StepDimTol_ParallelismTolerance(StepDimTol_GeometricToleranceWithDatumReference):
    """Representation of STEP entity ParallelismTolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_ParallelismTolerance
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_ParallelismTolerance(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_ParallelismTolerance self) -> StepDimTol_ParallelismTolerance

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_ParallelismTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_ParallelismTolerance_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_ParallelismTolerance_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_ParallelismTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_ParallelismTolerance
StepDimTol_ParallelismTolerance_swigregister = _StepDimTol.StepDimTol_ParallelismTolerance_swigregister
StepDimTol_ParallelismTolerance_swigregister(StepDimTol_ParallelismTolerance)

def StepDimTol_ParallelismTolerance_get_type_name(*args):
    """
    StepDimTol_ParallelismTolerance_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_ParallelismTolerance_get_type_name(*args)

def StepDimTol_ParallelismTolerance_get_type_descriptor(*args):
    """
    StepDimTol_ParallelismTolerance_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_ParallelismTolerance_get_type_descriptor(*args)

class Handle_StepDimTol_CoaxialityTolerance(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_CoaxialityTolerance self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_CoaxialityTolerance_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_CoaxialityTolerance self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_CoaxialityTolerance_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_CoaxialityTolerance self, StepDimTol_CoaxialityTolerance thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_CoaxialityTolerance_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_CoaxialityTolerance self, Handle_StepDimTol_CoaxialityTolerance theHandle) -> Handle_StepDimTol_CoaxialityTolerance
        assign(Handle_StepDimTol_CoaxialityTolerance self, StepDimTol_CoaxialityTolerance thePtr) -> Handle_StepDimTol_CoaxialityTolerance
        assign(Handle_StepDimTol_CoaxialityTolerance self, Handle_StepDimTol_CoaxialityTolerance theHandle) -> Handle_StepDimTol_CoaxialityTolerance

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_CoaxialityTolerance_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_CoaxialityTolerance self) -> StepDimTol_CoaxialityTolerance

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_CoaxialityTolerance_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_CoaxialityTolerance self) -> StepDimTol_CoaxialityTolerance

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_CoaxialityTolerance___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_CoaxialityTolerance self) -> StepDimTol_CoaxialityTolerance

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_CoaxialityTolerance___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_CoaxialityTolerance___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_CoaxialityTolerance___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_CoaxialityTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_CoaxialityTolerance_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_CoaxialityTolerance

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_CoaxialityTolerance self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_CoaxialityTolerance_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_CoaxialityTolerance_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_CoaxialityTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepDimTol_CoaxialityTolerance self, Handle_TCollection_HAsciiString theGeometricTolerance_Name, Handle_TCollection_HAsciiString theGeometricTolerance_Description, Handle_StepBasic_MeasureWithUnit theGeometricTolerance_Magnitude, Handle_StepRepr_ShapeAspect theGeometricTolerance_TolerancedShapeAspect, Handle_StepDimTol_HArray1OfDatumReference theDatumSystem)
        Init(Handle_StepDimTol_CoaxialityTolerance self, Handle_TCollection_HAsciiString theGeometricTolerance_Name, Handle_TCollection_HAsciiString theGeometricTolerance_Description, Handle_StepBasic_MeasureWithUnit theGeometricTolerance_Magnitude, StepDimTol_GeometricToleranceTarget theGeometricTolerance_TolerancedShapeAspect, Handle_StepDimTol_HArray1OfDatumSystemOrReference theDatumSystem)

        Initialize all fields (own and inherited) AP242

        :type theGeometricTolerance_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theGeometricTolerance_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theGeometricTolerance_Magnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type theGeometricTolerance_TolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget
        :type theDatumSystem: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference

        """
        return _StepDimTol.Handle_StepDimTol_CoaxialityTolerance_Init(self, *args)


    def DatumSystem(self, *args):
        """
        DatumSystem(Handle_StepDimTol_CoaxialityTolerance self) -> Handle_StepDimTol_HArray1OfDatumReference

        Returns field DatumSystem AP214

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumReference

        """
        return _StepDimTol.Handle_StepDimTol_CoaxialityTolerance_DatumSystem(self, *args)


    def DatumSystemAP242(self, *args):
        """
        DatumSystemAP242(Handle_StepDimTol_CoaxialityTolerance self) -> Handle_StepDimTol_HArray1OfDatumSystemOrReference

        Returns field DatumSystem AP242

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference

        """
        return _StepDimTol.Handle_StepDimTol_CoaxialityTolerance_DatumSystemAP242(self, *args)


    def SetDatumSystem(self, *args):
        """
        SetDatumSystem(Handle_StepDimTol_CoaxialityTolerance self, Handle_StepDimTol_HArray1OfDatumReference theDatumSystem)
        SetDatumSystem(Handle_StepDimTol_CoaxialityTolerance self, Handle_StepDimTol_HArray1OfDatumSystemOrReference theDatumSystem)

        Set field DatumSystem AP242

        :type theDatumSystem: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference

        """
        return _StepDimTol.Handle_StepDimTol_CoaxialityTolerance_SetDatumSystem(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepDimTol_CoaxialityTolerance self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_CoaxialityTolerance_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_CoaxialityTolerance self, Handle_TCollection_HAsciiString theName)

        Set field Name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_CoaxialityTolerance_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_CoaxialityTolerance self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_CoaxialityTolerance_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_CoaxialityTolerance self, Handle_TCollection_HAsciiString theDescription)

        Set field Description

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_CoaxialityTolerance_SetDescription(self, *args)


    def Magnitude(self, *args):
        """
        Magnitude(Handle_StepDimTol_CoaxialityTolerance self) -> Handle_StepBasic_MeasureWithUnit

        Returns field Magnitude

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_CoaxialityTolerance_Magnitude(self, *args)


    def SetMagnitude(self, *args):
        """
        SetMagnitude(Handle_StepDimTol_CoaxialityTolerance self, Handle_StepBasic_MeasureWithUnit theMagnitude)

        Set field Magnitude

        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_CoaxialityTolerance_SetMagnitude(self, *args)


    def TolerancedShapeAspect(self, *args):
        """
        TolerancedShapeAspect(Handle_StepDimTol_CoaxialityTolerance self) -> StepDimTol_GeometricToleranceTarget

        Returns field TolerancedShapeAspect
        Note: in AP214(203) type of this attribute can be only StepRepr_ShapeAspect

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_CoaxialityTolerance_TolerancedShapeAspect(self, *args)


    def SetTolerancedShapeAspect(self, *args):
        """
        SetTolerancedShapeAspect(Handle_StepDimTol_CoaxialityTolerance self, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect)
        SetTolerancedShapeAspect(Handle_StepDimTol_CoaxialityTolerance self, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect)

        Set field TolerancedShapeAspect AP242

        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_CoaxialityTolerance_SetTolerancedShapeAspect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_CoaxialityTolerance self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_CoaxialityTolerance_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_CoaxialityTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_CoaxialityTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_CoaxialityTolerance_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_CoaxialityTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_CoaxialityTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_CoaxialityTolerance_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_CoaxialityTolerance self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_CoaxialityTolerance_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_CoaxialityTolerance self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_CoaxialityTolerance_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_CoaxialityTolerance self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_CoaxialityTolerance_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_CoaxialityTolerance self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_CoaxialityTolerance_DecrementRefCounter(self, *args)

Handle_StepDimTol_CoaxialityTolerance_swigregister = _StepDimTol.Handle_StepDimTol_CoaxialityTolerance_swigregister
Handle_StepDimTol_CoaxialityTolerance_swigregister(Handle_StepDimTol_CoaxialityTolerance)

def Handle_StepDimTol_CoaxialityTolerance_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_CoaxialityTolerance_DownCast(thing)
Handle_StepDimTol_CoaxialityTolerance_DownCast = _StepDimTol.Handle_StepDimTol_CoaxialityTolerance_DownCast

class Handle_StepDimTol_StraightnessTolerance(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_StraightnessTolerance self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_StraightnessTolerance_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_StraightnessTolerance self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_StraightnessTolerance_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_StraightnessTolerance self, StepDimTol_StraightnessTolerance thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_StraightnessTolerance_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_StraightnessTolerance self, Handle_StepDimTol_StraightnessTolerance theHandle) -> Handle_StepDimTol_StraightnessTolerance
        assign(Handle_StepDimTol_StraightnessTolerance self, StepDimTol_StraightnessTolerance thePtr) -> Handle_StepDimTol_StraightnessTolerance
        assign(Handle_StepDimTol_StraightnessTolerance self, Handle_StepDimTol_StraightnessTolerance theHandle) -> Handle_StepDimTol_StraightnessTolerance

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_StraightnessTolerance_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_StraightnessTolerance self) -> StepDimTol_StraightnessTolerance

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_StraightnessTolerance_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_StraightnessTolerance self) -> StepDimTol_StraightnessTolerance

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_StraightnessTolerance___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_StraightnessTolerance self) -> StepDimTol_StraightnessTolerance

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_StraightnessTolerance___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_StraightnessTolerance___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_StraightnessTolerance___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_StraightnessTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_StraightnessTolerance_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_StraightnessTolerance

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_StraightnessTolerance self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_StraightnessTolerance_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_StraightnessTolerance_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_StraightnessTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepDimTol_StraightnessTolerance self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect)
        Init(Handle_StepDimTol_StraightnessTolerance self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect)

        Initialize all fields (own and inherited) AP242

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_StraightnessTolerance_Init(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepDimTol_StraightnessTolerance self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_StraightnessTolerance_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_StraightnessTolerance self, Handle_TCollection_HAsciiString theName)

        Set field Name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_StraightnessTolerance_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_StraightnessTolerance self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_StraightnessTolerance_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_StraightnessTolerance self, Handle_TCollection_HAsciiString theDescription)

        Set field Description

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_StraightnessTolerance_SetDescription(self, *args)


    def Magnitude(self, *args):
        """
        Magnitude(Handle_StepDimTol_StraightnessTolerance self) -> Handle_StepBasic_MeasureWithUnit

        Returns field Magnitude

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_StraightnessTolerance_Magnitude(self, *args)


    def SetMagnitude(self, *args):
        """
        SetMagnitude(Handle_StepDimTol_StraightnessTolerance self, Handle_StepBasic_MeasureWithUnit theMagnitude)

        Set field Magnitude

        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_StraightnessTolerance_SetMagnitude(self, *args)


    def TolerancedShapeAspect(self, *args):
        """
        TolerancedShapeAspect(Handle_StepDimTol_StraightnessTolerance self) -> StepDimTol_GeometricToleranceTarget

        Returns field TolerancedShapeAspect
        Note: in AP214(203) type of this attribute can be only StepRepr_ShapeAspect

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_StraightnessTolerance_TolerancedShapeAspect(self, *args)


    def SetTolerancedShapeAspect(self, *args):
        """
        SetTolerancedShapeAspect(Handle_StepDimTol_StraightnessTolerance self, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect)
        SetTolerancedShapeAspect(Handle_StepDimTol_StraightnessTolerance self, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect)

        Set field TolerancedShapeAspect AP242

        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_StraightnessTolerance_SetTolerancedShapeAspect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_StraightnessTolerance self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_StraightnessTolerance_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_StraightnessTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_StraightnessTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_StraightnessTolerance_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_StraightnessTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_StraightnessTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_StraightnessTolerance_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_StraightnessTolerance self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_StraightnessTolerance_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_StraightnessTolerance self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_StraightnessTolerance_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_StraightnessTolerance self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_StraightnessTolerance_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_StraightnessTolerance self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_StraightnessTolerance_DecrementRefCounter(self, *args)

Handle_StepDimTol_StraightnessTolerance_swigregister = _StepDimTol.Handle_StepDimTol_StraightnessTolerance_swigregister
Handle_StepDimTol_StraightnessTolerance_swigregister(Handle_StepDimTol_StraightnessTolerance)

def Handle_StepDimTol_StraightnessTolerance_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_StraightnessTolerance_DownCast(thing)
Handle_StepDimTol_StraightnessTolerance_DownCast = _StepDimTol.Handle_StepDimTol_StraightnessTolerance_DownCast

class StepDimTol_DatumReferenceModifier(StepData.StepData_SelectType):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepDimTol_DatumReferenceModifier self) -> StepDimTol_DatumReferenceModifier

        Returns a DatumReferenceModifier select type


        """
        this = _StepDimTol.new_StepDimTol_DatumReferenceModifier(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepDimTol_DatumReferenceModifier self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a DatumReferenceModifier Kind Entity that is :
        1 -> DatumReferenceModifierWithValue
        2 -> SimpleDatumReferenceModifierMember
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.StepDimTol_DatumReferenceModifier_CaseNum(self, *args)


    def DatumReferenceModifierWithValue(self, *args):
        """
        DatumReferenceModifierWithValue(StepDimTol_DatumReferenceModifier self) -> Handle_StepDimTol_DatumReferenceModifierWithValue

        returns Value as a DatumReferenceModifierWithValue (Null if another type)

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_DatumReferenceModifierWithValue

        """
        return _StepDimTol.StepDimTol_DatumReferenceModifier_DatumReferenceModifierWithValue(self, *args)


    def SimpleDatumReferenceModifierMember(self, *args):
        """
        SimpleDatumReferenceModifierMember(StepDimTol_DatumReferenceModifier self) -> Handle_StepDimTol_SimpleDatumReferenceModifierMember

        returns Value as a SimpleDatumReferenceModifierMember (Null if another type)

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember

        """
        return _StepDimTol.StepDimTol_DatumReferenceModifier_SimpleDatumReferenceModifierMember(self, *args)

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_DatumReferenceModifier
StepDimTol_DatumReferenceModifier_swigregister = _StepDimTol.StepDimTol_DatumReferenceModifier_swigregister
StepDimTol_DatumReferenceModifier_swigregister(StepDimTol_DatumReferenceModifier)

class Handle_StepDimTol_DatumSystem(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_DatumSystem self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_DatumSystem_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_DatumSystem self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_DatumSystem_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_DatumSystem self, StepDimTol_DatumSystem thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_DatumSystem_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_DatumSystem self, Handle_StepDimTol_DatumSystem theHandle) -> Handle_StepDimTol_DatumSystem
        assign(Handle_StepDimTol_DatumSystem self, StepDimTol_DatumSystem thePtr) -> Handle_StepDimTol_DatumSystem
        assign(Handle_StepDimTol_DatumSystem self, Handle_StepDimTol_DatumSystem theHandle) -> Handle_StepDimTol_DatumSystem

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_DatumSystem_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_DatumSystem self) -> StepDimTol_DatumSystem

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_DatumSystem_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_DatumSystem self) -> StepDimTol_DatumSystem

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_DatumSystem___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_DatumSystem self) -> StepDimTol_DatumSystem

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_DatumSystem___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_DatumSystem___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_DatumSystem___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_DatumSystem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_DatumSystem_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_DatumSystem

    def Init(self, *args):
        """
        Init(Handle_StepDimTol_DatumSystem self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepRepr_ProductDefinitionShape theOfShape, StepData_Logical const theProductDefinitional, Handle_StepDimTol_HArray1OfDatumReferenceCompartment theConstituents)

        Initialize all fields (own and inherited)

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theOfShape: OCC.wrapper.StepDimTol.Handle_StepRepr_ProductDefinitionShape
        :type theProductDefinitional: OCC.wrapper.StepData.StepData_Logical
        :type theConstituents: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceCompartment

        """
        return _StepDimTol.Handle_StepDimTol_DatumSystem_Init(self, *args)


    def Constituents(self, *args):
        """
        Constituents(Handle_StepDimTol_DatumSystem self) -> Handle_StepDimTol_HArray1OfDatumReferenceCompartment

        Returns field Constituents

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceCompartment

        """
        return _StepDimTol.Handle_StepDimTol_DatumSystem_Constituents(self, *args)


    def SetConstituents(self, *args):
        """
        SetConstituents(Handle_StepDimTol_DatumSystem self, Handle_StepDimTol_HArray1OfDatumReferenceCompartment theConstituents)

        Set field Constituents

        :type theConstituents: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceCompartment

        """
        return _StepDimTol.Handle_StepDimTol_DatumSystem_SetConstituents(self, *args)


    def NbConstituents(self, *args):
        """
        NbConstituents(Handle_StepDimTol_DatumSystem self) -> Standard_Integer

        Returns number of Constituents

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_DatumSystem_NbConstituents(self, *args)


    def ConstituentsValue(self, *args):
        """
        ConstituentsValue(Handle_StepDimTol_DatumSystem self, Standard_Integer const num) -> Handle_StepDimTol_DatumReferenceCompartment
        ConstituentsValue(Handle_StepDimTol_DatumSystem self, Standard_Integer const num, Handle_StepDimTol_DatumReferenceCompartment theItem)

        Sets Constituents with given number

        :type num: int
        :type theItem: OCC.wrapper.StepDimTol.Handle_StepDimTol_DatumReferenceCompartment

        """
        return _StepDimTol.Handle_StepDimTol_DatumSystem_ConstituentsValue(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_DatumSystem self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_DatumSystem_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_DatumSystem_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_DatumSystem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_DatumSystem self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_DatumSystem_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepDimTol_DatumSystem self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_DatumSystem_Name(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_DatumSystem self, Handle_TCollection_HAsciiString aDescription)

        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_DatumSystem_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_DatumSystem self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_DatumSystem_Description(self, *args)


    def SetOfShape(self, *args):
        """
        SetOfShape(Handle_StepDimTol_DatumSystem self, Handle_StepRepr_ProductDefinitionShape aOfShape)

        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepDimTol.Handle_StepDimTol_DatumSystem_SetOfShape(self, *args)


    def OfShape(self, *args):
        """
        OfShape(Handle_StepDimTol_DatumSystem self) -> Handle_StepRepr_ProductDefinitionShape

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepDimTol.Handle_StepDimTol_DatumSystem_OfShape(self, *args)


    def SetProductDefinitional(self, *args):
        """
        SetProductDefinitional(Handle_StepDimTol_DatumSystem self, StepData_Logical const aProductDefinitional)

        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepDimTol.Handle_StepDimTol_DatumSystem_SetProductDefinitional(self, *args)


    def ProductDefinitional(self, *args):
        """
        ProductDefinitional(Handle_StepDimTol_DatumSystem self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepDimTol.Handle_StepDimTol_DatumSystem_ProductDefinitional(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_DatumSystem self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_DatumSystem_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_DatumSystem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_DatumSystem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_DatumSystem_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_DatumSystem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_DatumSystem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_DatumSystem_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_DatumSystem self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_DatumSystem_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_DatumSystem self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_DatumSystem_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_DatumSystem self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_DatumSystem_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_DatumSystem self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_DatumSystem_DecrementRefCounter(self, *args)

Handle_StepDimTol_DatumSystem_swigregister = _StepDimTol.Handle_StepDimTol_DatumSystem_swigregister
Handle_StepDimTol_DatumSystem_swigregister(Handle_StepDimTol_DatumSystem)

def Handle_StepDimTol_DatumSystem_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_DatumSystem_DownCast(thing)
Handle_StepDimTol_DatumSystem_DownCast = _StepDimTol.Handle_StepDimTol_DatumSystem_DownCast

class StepDimTol_AngularityTolerance(StepDimTol_GeometricToleranceWithDatumReference):
    """Representation of STEP entity AngularityTolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_AngularityTolerance
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_AngularityTolerance(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_AngularityTolerance self) -> StepDimTol_AngularityTolerance

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_AngularityTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_AngularityTolerance_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_AngularityTolerance_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_AngularityTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_AngularityTolerance
StepDimTol_AngularityTolerance_swigregister = _StepDimTol.StepDimTol_AngularityTolerance_swigregister
StepDimTol_AngularityTolerance_swigregister(StepDimTol_AngularityTolerance)

def StepDimTol_AngularityTolerance_get_type_name(*args):
    """
    StepDimTol_AngularityTolerance_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_AngularityTolerance_get_type_name(*args)

def StepDimTol_AngularityTolerance_get_type_descriptor(*args):
    """
    StepDimTol_AngularityTolerance_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_AngularityTolerance_get_type_descriptor(*args)

class Handle_StepDimTol_PlacedDatumTargetFeature(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_PlacedDatumTargetFeature self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_PlacedDatumTargetFeature self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_PlacedDatumTargetFeature self, StepDimTol_PlacedDatumTargetFeature thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_PlacedDatumTargetFeature self, Handle_StepDimTol_PlacedDatumTargetFeature theHandle) -> Handle_StepDimTol_PlacedDatumTargetFeature
        assign(Handle_StepDimTol_PlacedDatumTargetFeature self, StepDimTol_PlacedDatumTargetFeature thePtr) -> Handle_StepDimTol_PlacedDatumTargetFeature
        assign(Handle_StepDimTol_PlacedDatumTargetFeature self, Handle_StepDimTol_PlacedDatumTargetFeature theHandle) -> Handle_StepDimTol_PlacedDatumTargetFeature

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_PlacedDatumTargetFeature self) -> StepDimTol_PlacedDatumTargetFeature

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_PlacedDatumTargetFeature self) -> StepDimTol_PlacedDatumTargetFeature

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_PlacedDatumTargetFeature self) -> StepDimTol_PlacedDatumTargetFeature

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_PlacedDatumTargetFeature(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_PlacedDatumTargetFeature

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_PlacedDatumTargetFeature self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepDimTol_PlacedDatumTargetFeature self, Handle_TCollection_HAsciiString theShapeAspect_Name, Handle_TCollection_HAsciiString theShapeAspect_Description, Handle_StepRepr_ProductDefinitionShape theShapeAspect_OfShape, StepData_Logical const theShapeAspect_ProductDefinitional, Handle_TCollection_HAsciiString theTargetId)

        Initialize all fields (own and inherited)

        :type theShapeAspect_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theShapeAspect_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theShapeAspect_OfShape: OCC.wrapper.StepDimTol.Handle_StepRepr_ProductDefinitionShape
        :type theShapeAspect_ProductDefinitional: OCC.wrapper.StepData.StepData_Logical
        :type theTargetId: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature_Init(self, *args)


    def TargetId(self, *args):
        """
        TargetId(Handle_StepDimTol_PlacedDatumTargetFeature self) -> Handle_TCollection_HAsciiString

        Returns field TargetId

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature_TargetId(self, *args)


    def SetTargetId(self, *args):
        """
        SetTargetId(Handle_StepDimTol_PlacedDatumTargetFeature self, Handle_TCollection_HAsciiString theTargetId)

        Set field TargetId

        :type theTargetId: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature_SetTargetId(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_PlacedDatumTargetFeature self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepDimTol_PlacedDatumTargetFeature self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature_Name(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_PlacedDatumTargetFeature self, Handle_TCollection_HAsciiString aDescription)

        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_PlacedDatumTargetFeature self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature_Description(self, *args)


    def SetOfShape(self, *args):
        """
        SetOfShape(Handle_StepDimTol_PlacedDatumTargetFeature self, Handle_StepRepr_ProductDefinitionShape aOfShape)

        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature_SetOfShape(self, *args)


    def OfShape(self, *args):
        """
        OfShape(Handle_StepDimTol_PlacedDatumTargetFeature self) -> Handle_StepRepr_ProductDefinitionShape

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature_OfShape(self, *args)


    def SetProductDefinitional(self, *args):
        """
        SetProductDefinitional(Handle_StepDimTol_PlacedDatumTargetFeature self, StepData_Logical const aProductDefinitional)

        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature_SetProductDefinitional(self, *args)


    def ProductDefinitional(self, *args):
        """
        ProductDefinitional(Handle_StepDimTol_PlacedDatumTargetFeature self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature_ProductDefinitional(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_PlacedDatumTargetFeature self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_PlacedDatumTargetFeature self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_PlacedDatumTargetFeature self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_PlacedDatumTargetFeature self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_PlacedDatumTargetFeature self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_PlacedDatumTargetFeature self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_PlacedDatumTargetFeature self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_PlacedDatumTargetFeature self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_PlacedDatumTargetFeature self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature_DecrementRefCounter(self, *args)

Handle_StepDimTol_PlacedDatumTargetFeature_swigregister = _StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature_swigregister
Handle_StepDimTol_PlacedDatumTargetFeature_swigregister(Handle_StepDimTol_PlacedDatumTargetFeature)

def Handle_StepDimTol_PlacedDatumTargetFeature_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature_DownCast(thing)
Handle_StepDimTol_PlacedDatumTargetFeature_DownCast = _StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature_DownCast

class StepDimTol_DatumReferenceModifierWithValue(Standard.Standard_Transient):
    """Representation of STEP entity DatumReferenceModifierWithValue"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_DatumReferenceModifierWithValue
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_DatumReferenceModifierWithValue(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_DatumReferenceModifierWithValue self) -> StepDimTol_DatumReferenceModifierWithValue

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_DatumReferenceModifierWithValue(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepDimTol_DatumReferenceModifierWithValue self, StepDimTol_DatumReferenceModifierType const & theModifierType, Handle_StepBasic_LengthMeasureWithUnit theModifierValue)

        Initialize all fields (own and inherited)

        :type theModifierType: OCC.wrapper.StepDimTol.StepDimTol_DatumReferenceModifierType
        :type theModifierValue: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.StepDimTol_DatumReferenceModifierWithValue_Init(self, *args)


    def ModifierType(self, *args):
        """
        ModifierType(StepDimTol_DatumReferenceModifierWithValue self) -> StepDimTol_DatumReferenceModifierType

        Returns field ModifierType

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_DatumReferenceModifierType

        """
        return _StepDimTol.StepDimTol_DatumReferenceModifierWithValue_ModifierType(self, *args)


    def SetModifierType(self, *args):
        """
        SetModifierType(StepDimTol_DatumReferenceModifierWithValue self, StepDimTol_DatumReferenceModifierType const & theModifierType)

        Set field ModifierType

        :type theModifierType: OCC.wrapper.StepDimTol.StepDimTol_DatumReferenceModifierType

        """
        return _StepDimTol.StepDimTol_DatumReferenceModifierWithValue_SetModifierType(self, *args)


    def ModifierValue(self, *args):
        """
        ModifierValue(StepDimTol_DatumReferenceModifierWithValue self) -> Handle_StepBasic_LengthMeasureWithUnit

        Returns field ModifierValue

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.StepDimTol_DatumReferenceModifierWithValue_ModifierValue(self, *args)


    def SetModifierValue(self, *args):
        """
        SetModifierValue(StepDimTol_DatumReferenceModifierWithValue self, Handle_StepBasic_LengthMeasureWithUnit theModifierValue)

        Set field ModifierValue

        :type theModifierValue: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.StepDimTol_DatumReferenceModifierWithValue_SetModifierValue(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_DatumReferenceModifierWithValue_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_DatumReferenceModifierWithValue_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_DatumReferenceModifierWithValue_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_DatumReferenceModifierWithValue
StepDimTol_DatumReferenceModifierWithValue_swigregister = _StepDimTol.StepDimTol_DatumReferenceModifierWithValue_swigregister
StepDimTol_DatumReferenceModifierWithValue_swigregister(StepDimTol_DatumReferenceModifierWithValue)

def StepDimTol_DatumReferenceModifierWithValue_get_type_name(*args):
    """
    StepDimTol_DatumReferenceModifierWithValue_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_DatumReferenceModifierWithValue_get_type_name(*args)

def StepDimTol_DatumReferenceModifierWithValue_get_type_descriptor(*args):
    """
    StepDimTol_DatumReferenceModifierWithValue_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_DatumReferenceModifierWithValue_get_type_descriptor(*args)

class Handle_StepDimTol_GeometricToleranceRelationship(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_GeometricToleranceRelationship self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_GeometricToleranceRelationship self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_GeometricToleranceRelationship self, StepDimTol_GeometricToleranceRelationship thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_GeometricToleranceRelationship self, Handle_StepDimTol_GeometricToleranceRelationship theHandle) -> Handle_StepDimTol_GeometricToleranceRelationship
        assign(Handle_StepDimTol_GeometricToleranceRelationship self, StepDimTol_GeometricToleranceRelationship thePtr) -> Handle_StepDimTol_GeometricToleranceRelationship
        assign(Handle_StepDimTol_GeometricToleranceRelationship self, Handle_StepDimTol_GeometricToleranceRelationship theHandle) -> Handle_StepDimTol_GeometricToleranceRelationship

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_GeometricToleranceRelationship self) -> StepDimTol_GeometricToleranceRelationship

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_GeometricToleranceRelationship self) -> StepDimTol_GeometricToleranceRelationship

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_GeometricToleranceRelationship self) -> StepDimTol_GeometricToleranceRelationship

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_GeometricToleranceRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_GeometricToleranceRelationship

    def Init(self, *args):
        """
        Init(Handle_StepDimTol_GeometricToleranceRelationship self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepDimTol_GeometricTolerance theRelatingGeometricTolerance, Handle_StepDimTol_GeometricTolerance theRelatedGeometricTolerance)

        Initialize all fields (own and inherited)

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theRelatingGeometricTolerance: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricTolerance
        :type theRelatedGeometricTolerance: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricTolerance

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship_Init(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepDimTol_GeometricToleranceRelationship self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_GeometricToleranceRelationship self, Handle_TCollection_HAsciiString theName)

        Set field Name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_GeometricToleranceRelationship self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_GeometricToleranceRelationship self, Handle_TCollection_HAsciiString theDescription)

        Set field Description

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship_SetDescription(self, *args)


    def RelatingGeometricTolerance(self, *args):
        """
        RelatingGeometricTolerance(Handle_StepDimTol_GeometricToleranceRelationship self) -> Handle_StepDimTol_GeometricTolerance

        Returns field RelatingGeometricTolerance

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricTolerance

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship_RelatingGeometricTolerance(self, *args)


    def SetRelatingGeometricTolerance(self, *args):
        """
        SetRelatingGeometricTolerance(Handle_StepDimTol_GeometricToleranceRelationship self, Handle_StepDimTol_GeometricTolerance theRelatingGeometricTolerance)

        Set field RelatingGeometricTolerance

        :type theRelatingGeometricTolerance: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricTolerance

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship_SetRelatingGeometricTolerance(self, *args)


    def RelatedGeometricTolerance(self, *args):
        """
        RelatedGeometricTolerance(Handle_StepDimTol_GeometricToleranceRelationship self) -> Handle_StepDimTol_GeometricTolerance

        Returns field RelatedGeometricTolerance

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricTolerance

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship_RelatedGeometricTolerance(self, *args)


    def SetRelatedGeometricTolerance(self, *args):
        """
        SetRelatedGeometricTolerance(Handle_StepDimTol_GeometricToleranceRelationship self, Handle_StepDimTol_GeometricTolerance theRelatedGeometricTolerance)

        Set field RelatedGeometricTolerance

        :type theRelatedGeometricTolerance: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricTolerance

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship_SetRelatedGeometricTolerance(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_GeometricToleranceRelationship self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_GeometricToleranceRelationship self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_GeometricToleranceRelationship self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_GeometricToleranceRelationship self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_GeometricToleranceRelationship self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_GeometricToleranceRelationship self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_GeometricToleranceRelationship self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_GeometricToleranceRelationship self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_GeometricToleranceRelationship self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_GeometricToleranceRelationship self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship_DecrementRefCounter(self, *args)

Handle_StepDimTol_GeometricToleranceRelationship_swigregister = _StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship_swigregister
Handle_StepDimTol_GeometricToleranceRelationship_swigregister(Handle_StepDimTol_GeometricToleranceRelationship)

def Handle_StepDimTol_GeometricToleranceRelationship_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship_DownCast(thing)
Handle_StepDimTol_GeometricToleranceRelationship_DownCast = _StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship_DownCast

class Handle_StepDimTol_ProjectedZoneDefinition(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_ProjectedZoneDefinition self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_ProjectedZoneDefinition self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_ProjectedZoneDefinition self, StepDimTol_ProjectedZoneDefinition thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_ProjectedZoneDefinition self, Handle_StepDimTol_ProjectedZoneDefinition theHandle) -> Handle_StepDimTol_ProjectedZoneDefinition
        assign(Handle_StepDimTol_ProjectedZoneDefinition self, StepDimTol_ProjectedZoneDefinition thePtr) -> Handle_StepDimTol_ProjectedZoneDefinition
        assign(Handle_StepDimTol_ProjectedZoneDefinition self, Handle_StepDimTol_ProjectedZoneDefinition theHandle) -> Handle_StepDimTol_ProjectedZoneDefinition

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_ProjectedZoneDefinition self) -> StepDimTol_ProjectedZoneDefinition

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_ProjectedZoneDefinition self) -> StepDimTol_ProjectedZoneDefinition

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_ProjectedZoneDefinition self) -> StepDimTol_ProjectedZoneDefinition

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_ProjectedZoneDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_ProjectedZoneDefinition

    def Init(self, *args):
        """
        Init(Handle_StepDimTol_ProjectedZoneDefinition self, Handle_StepDimTol_ToleranceZone theZone, Handle_StepRepr_HArray1OfShapeAspect theBoundaries, Handle_StepRepr_ShapeAspect theProjectionEnd, Handle_StepBasic_LengthMeasureWithUnit theProjectionLength)

        Initialize all fields (own and inherited)

        :type theZone: OCC.wrapper.StepDimTol.Handle_StepDimTol_ToleranceZone
        :type theBoundaries: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfShapeAspect
        :type theProjectionEnd: OCC.wrapper.StepDimTol.Handle_StepRepr_ShapeAspect
        :type theProjectionLength: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition_Init(self, *args)


    def ProjectionEnd(self, *args):
        """
        ProjectionEnd(Handle_StepDimTol_ProjectedZoneDefinition self) -> Handle_StepRepr_ShapeAspect

        Returns field ProjectionEnd

        :rtype: OCC.wrapper.StepDimTol.Handle_StepRepr_ShapeAspect

        """
        return _StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition_ProjectionEnd(self, *args)


    def SetProjectionEnd(self, *args):
        """
        SetProjectionEnd(Handle_StepDimTol_ProjectedZoneDefinition self, Handle_StepRepr_ShapeAspect theProjectionEnd)

        Set field ProjectionEnd

        :type theProjectionEnd: OCC.wrapper.StepDimTol.Handle_StepRepr_ShapeAspect

        """
        return _StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition_SetProjectionEnd(self, *args)


    def ProjectionLength(self, *args):
        """
        ProjectionLength(Handle_StepDimTol_ProjectedZoneDefinition self) -> Handle_StepBasic_LengthMeasureWithUnit

        Returns field ProjectionLength

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition_ProjectionLength(self, *args)


    def SetProjectionLength(self, *args):
        """
        SetProjectionLength(Handle_StepDimTol_ProjectedZoneDefinition self, Handle_StepBasic_LengthMeasureWithUnit theProjectionLength)

        Set field ProjectionLength

        :type theProjectionLength: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition_SetProjectionLength(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_ProjectedZoneDefinition self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Boundaries(self, *args):
        """
        Boundaries(Handle_StepDimTol_ProjectedZoneDefinition self) -> Handle_StepRepr_HArray1OfShapeAspect

        Returns field Boundaries

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfShapeAspect

        """
        return _StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition_Boundaries(self, *args)


    def SetBoundaries(self, *args):
        """
        SetBoundaries(Handle_StepDimTol_ProjectedZoneDefinition self, Handle_StepRepr_HArray1OfShapeAspect theBoundaries)

        Set field Boundaries

        :type theBoundaries: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfShapeAspect

        """
        return _StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition_SetBoundaries(self, *args)


    def NbBoundaries(self, *args):
        """
        NbBoundaries(Handle_StepDimTol_ProjectedZoneDefinition self) -> Standard_Integer

        Returns number of Boundaries

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition_NbBoundaries(self, *args)


    def BoundariesValue(self, *args):
        """
        BoundariesValue(Handle_StepDimTol_ProjectedZoneDefinition self, Standard_Integer const theNum) -> Handle_StepRepr_ShapeAspect

        Returns Boundaries with the given number

        :type theNum: int
        :rtype: OCC.wrapper.StepDimTol.Handle_StepRepr_ShapeAspect

        """
        return _StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition_BoundariesValue(self, *args)


    def SetBoundariesValue(self, *args):
        """
        SetBoundariesValue(Handle_StepDimTol_ProjectedZoneDefinition self, Standard_Integer const theNum, Handle_StepRepr_ShapeAspect theItem)

        Sets Boundaries with given number

        :type theNum: int
        :type theItem: OCC.wrapper.StepDimTol.Handle_StepRepr_ShapeAspect

        """
        return _StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition_SetBoundariesValue(self, *args)


    def Zone(self, *args):
        """
        Zone(Handle_StepDimTol_ProjectedZoneDefinition self) -> Handle_StepDimTol_ToleranceZone

        Returns field Zone

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_ToleranceZone

        """
        return _StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition_Zone(self, *args)


    def SetZone(self, *args):
        """
        SetZone(Handle_StepDimTol_ProjectedZoneDefinition self, Handle_StepDimTol_ToleranceZone theZone)

        Set field Zone

        :type theZone: OCC.wrapper.StepDimTol.Handle_StepDimTol_ToleranceZone

        """
        return _StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition_SetZone(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_ProjectedZoneDefinition self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_ProjectedZoneDefinition self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_ProjectedZoneDefinition self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_ProjectedZoneDefinition self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_ProjectedZoneDefinition self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_ProjectedZoneDefinition self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_ProjectedZoneDefinition self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_ProjectedZoneDefinition self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_ProjectedZoneDefinition self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition_DecrementRefCounter(self, *args)

Handle_StepDimTol_ProjectedZoneDefinition_swigregister = _StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition_swigregister
Handle_StepDimTol_ProjectedZoneDefinition_swigregister(Handle_StepDimTol_ProjectedZoneDefinition)

def Handle_StepDimTol_ProjectedZoneDefinition_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition_DownCast(thing)
Handle_StepDimTol_ProjectedZoneDefinition_DownCast = _StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition_DownCast

class Handle_StepDimTol_DatumReference(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_DatumReference self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_DatumReference_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_DatumReference self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_DatumReference_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_DatumReference self, StepDimTol_DatumReference thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_DatumReference_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_DatumReference self, Handle_StepDimTol_DatumReference theHandle) -> Handle_StepDimTol_DatumReference
        assign(Handle_StepDimTol_DatumReference self, StepDimTol_DatumReference thePtr) -> Handle_StepDimTol_DatumReference
        assign(Handle_StepDimTol_DatumReference self, Handle_StepDimTol_DatumReference theHandle) -> Handle_StepDimTol_DatumReference

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_DatumReference_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_DatumReference self) -> StepDimTol_DatumReference

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_DatumReference_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_DatumReference self) -> StepDimTol_DatumReference

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_DatumReference___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_DatumReference self) -> StepDimTol_DatumReference

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_DatumReference___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_DatumReference___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_DatumReference___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_DatumReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_DatumReference_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_DatumReference

    def Init(self, *args):
        """
        Init(Handle_StepDimTol_DatumReference self, Standard_Integer const thePrecedence, Handle_StepDimTol_Datum theReferencedDatum)

        Initialize all fields (own and inherited)

        :type thePrecedence: int
        :type theReferencedDatum: OCC.wrapper.StepDimTol.Handle_StepDimTol_Datum

        """
        return _StepDimTol.Handle_StepDimTol_DatumReference_Init(self, *args)


    def Precedence(self, *args):
        """
        Precedence(Handle_StepDimTol_DatumReference self) -> Standard_Integer

        Returns field Precedence

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_DatumReference_Precedence(self, *args)


    def SetPrecedence(self, *args):
        """
        SetPrecedence(Handle_StepDimTol_DatumReference self, Standard_Integer const thePrecedence)

        Set field Precedence

        :type thePrecedence: int

        """
        return _StepDimTol.Handle_StepDimTol_DatumReference_SetPrecedence(self, *args)


    def ReferencedDatum(self, *args):
        """
        ReferencedDatum(Handle_StepDimTol_DatumReference self) -> Handle_StepDimTol_Datum

        Returns field ReferencedDatum

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_Datum

        """
        return _StepDimTol.Handle_StepDimTol_DatumReference_ReferencedDatum(self, *args)


    def SetReferencedDatum(self, *args):
        """
        SetReferencedDatum(Handle_StepDimTol_DatumReference self, Handle_StepDimTol_Datum theReferencedDatum)

        Set field ReferencedDatum

        :type theReferencedDatum: OCC.wrapper.StepDimTol.Handle_StepDimTol_Datum

        """
        return _StepDimTol.Handle_StepDimTol_DatumReference_SetReferencedDatum(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_DatumReference self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_DatumReference_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_DatumReference_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_DatumReference_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_DatumReference self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_DatumReference_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_DatumReference self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_DatumReference self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_DatumReference_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_DatumReference self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_DatumReference self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_DatumReference_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_DatumReference self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_DatumReference_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_DatumReference self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_DatumReference_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_DatumReference self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_DatumReference_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_DatumReference self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_DatumReference_DecrementRefCounter(self, *args)

Handle_StepDimTol_DatumReference_swigregister = _StepDimTol.Handle_StepDimTol_DatumReference_swigregister
Handle_StepDimTol_DatumReference_swigregister(Handle_StepDimTol_DatumReference)

def Handle_StepDimTol_DatumReference_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_DatumReference_DownCast(thing)
Handle_StepDimTol_DatumReference_DownCast = _StepDimTol.Handle_StepDimTol_DatumReference_DownCast

class Handle_StepDimTol_HArray1OfToleranceZoneTarget(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_HArray1OfToleranceZoneTarget self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfToleranceZoneTarget_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_HArray1OfToleranceZoneTarget self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfToleranceZoneTarget_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_HArray1OfToleranceZoneTarget self, StepDimTol_HArray1OfToleranceZoneTarget thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfToleranceZoneTarget_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_HArray1OfToleranceZoneTarget self, Handle_StepDimTol_HArray1OfToleranceZoneTarget theHandle) -> Handle_StepDimTol_HArray1OfToleranceZoneTarget
        assign(Handle_StepDimTol_HArray1OfToleranceZoneTarget self, StepDimTol_HArray1OfToleranceZoneTarget thePtr) -> Handle_StepDimTol_HArray1OfToleranceZoneTarget
        assign(Handle_StepDimTol_HArray1OfToleranceZoneTarget self, Handle_StepDimTol_HArray1OfToleranceZoneTarget theHandle) -> Handle_StepDimTol_HArray1OfToleranceZoneTarget

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfToleranceZoneTarget_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_HArray1OfToleranceZoneTarget self) -> StepDimTol_HArray1OfToleranceZoneTarget

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfToleranceZoneTarget_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_HArray1OfToleranceZoneTarget self) -> StepDimTol_HArray1OfToleranceZoneTarget

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfToleranceZoneTarget___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_HArray1OfToleranceZoneTarget self) -> StepDimTol_HArray1OfToleranceZoneTarget

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfToleranceZoneTarget___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_HArray1OfToleranceZoneTarget___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_HArray1OfToleranceZoneTarget___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_HArray1OfToleranceZoneTarget(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_HArray1OfToleranceZoneTarget_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_HArray1OfToleranceZoneTarget

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepDimTol.StepDimTol_Array1OfToleranceZoneTarget

        """
        res = _StepDimTol.Handle_StepDimTol_HArray1OfToleranceZoneTarget_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepDimTol_HArray1OfToleranceZoneTarget self) -> NCollection_Array1_StepDimTol_ToleranceZoneTarget

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_Array1OfToleranceZoneTarget

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfToleranceZoneTarget_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_HArray1OfToleranceZoneTarget self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfToleranceZoneTarget_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_HArray1OfToleranceZoneTarget_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_HArray1OfToleranceZoneTarget_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_HArray1OfToleranceZoneTarget self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfToleranceZoneTarget_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_HArray1OfToleranceZoneTarget self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_HArray1OfToleranceZoneTarget self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfToleranceZoneTarget_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_HArray1OfToleranceZoneTarget self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_HArray1OfToleranceZoneTarget self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfToleranceZoneTarget_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_HArray1OfToleranceZoneTarget self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfToleranceZoneTarget_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_HArray1OfToleranceZoneTarget self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfToleranceZoneTarget_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_HArray1OfToleranceZoneTarget self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfToleranceZoneTarget_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_HArray1OfToleranceZoneTarget self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfToleranceZoneTarget_DecrementRefCounter(self, *args)

Handle_StepDimTol_HArray1OfToleranceZoneTarget_swigregister = _StepDimTol.Handle_StepDimTol_HArray1OfToleranceZoneTarget_swigregister
Handle_StepDimTol_HArray1OfToleranceZoneTarget_swigregister(Handle_StepDimTol_HArray1OfToleranceZoneTarget)

def Handle_StepDimTol_HArray1OfToleranceZoneTarget_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_HArray1OfToleranceZoneTarget_DownCast(thing)
Handle_StepDimTol_HArray1OfToleranceZoneTarget_DownCast = _StepDimTol.Handle_StepDimTol_HArray1OfToleranceZoneTarget_DownCast

class NCollection_Array1_Handle_StepDimTol_DatumReferenceElement(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_StepDimTol_DatumReferenceElement self) -> NCollection_Array1< opencascade::handle< StepDimTol_DatumReferenceElement > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceElement_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_StepDimTol_DatumReferenceElement self) -> NCollection_Array1< opencascade::handle< StepDimTol_DatumReferenceElement > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceElement_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_StepDimTol_DatumReferenceElement self) -> NCollection_Array1< opencascade::handle< StepDimTol_DatumReferenceElement > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceElement_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_StepDimTol_DatumReferenceElement self) -> NCollection_Array1< opencascade::handle< StepDimTol_DatumReferenceElement > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceElement_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepDimTol.new_NCollection_Array1_Handle_StepDimTol_DatumReferenceElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_StepDimTol_DatumReferenceElement self, Handle_StepDimTol_DatumReferenceElement theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceElement_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_StepDimTol_DatumReferenceElement self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceElement_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_StepDimTol_DatumReferenceElement self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceElement_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_StepDimTol_DatumReferenceElement self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceElement_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_StepDimTol_DatumReferenceElement self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceElement_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_StepDimTol_DatumReferenceElement self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceElement_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_StepDimTol_DatumReferenceElement self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceElement_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_StepDimTol_DatumReferenceElement self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceElement_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_StepDimTol_DatumReferenceElement self, NCollection_Array1_Handle_StepDimTol_DatumReferenceElement theOther) -> NCollection_Array1_Handle_StepDimTol_DatumReferenceElement

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceElement_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_StepDimTol_DatumReferenceElement self, NCollection_Array1_Handle_StepDimTol_DatumReferenceElement theOther) -> NCollection_Array1_Handle_StepDimTol_DatumReferenceElement

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceElement_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_StepDimTol_DatumReferenceElement self, NCollection_Array1_Handle_StepDimTol_DatumReferenceElement theOther) -> NCollection_Array1_Handle_StepDimTol_DatumReferenceElement
        assign(NCollection_Array1_Handle_StepDimTol_DatumReferenceElement self, NCollection_Array1_Handle_StepDimTol_DatumReferenceElement theOther) -> NCollection_Array1_Handle_StepDimTol_DatumReferenceElement

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceElement_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceElement_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_StepDimTol_DatumReferenceElement self) -> Handle_StepDimTol_DatumReferenceElement

        @return first element

        :rtype: TheItemType &

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceElement_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceElement_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_StepDimTol_DatumReferenceElement self) -> Handle_StepDimTol_DatumReferenceElement

        @return last element

        :rtype: TheItemType &

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceElement_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceElement_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_StepDimTol_DatumReferenceElement self, Standard_Integer const theIndex) -> Handle_StepDimTol_DatumReferenceElement

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceElement_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceElement___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceElement_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_StepDimTol_DatumReferenceElement self, Standard_Integer const theIndex, Handle_StepDimTol_DatumReferenceElement theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceElement_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_StepDimTol_DatumReferenceElement self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceElement_Resize(self, *args)

    __swig_destroy__ = _StepDimTol.delete_NCollection_Array1_Handle_StepDimTol_DatumReferenceElement
NCollection_Array1_Handle_StepDimTol_DatumReferenceElement_swigregister = _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceElement_swigregister
NCollection_Array1_Handle_StepDimTol_DatumReferenceElement_swigregister(NCollection_Array1_Handle_StepDimTol_DatumReferenceElement)


try:
	StepDimTol_Array1OfDatumReferenceElement = NCollection_Array1_Handle_StepDimTol_DatumReferenceElement
except NameError:
	pass # does not exist, probably ignored

class Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit self, StepDimTol_GeometricToleranceWithDefinedAreaUnit thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit self, Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit theHandle) -> Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit
        assign(Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit self, StepDimTol_GeometricToleranceWithDefinedAreaUnit thePtr) -> Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit
        assign(Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit self, Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit theHandle) -> Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit self) -> StepDimTol_GeometricToleranceWithDefinedAreaUnit

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit self) -> StepDimTol_GeometricToleranceWithDefinedAreaUnit

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit self) -> StepDimTol_GeometricToleranceWithDefinedAreaUnit

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit

    def Init(self, *args):
        """
        Init(Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect, Handle_StepBasic_LengthMeasureWithUnit theUnitSize, StepDimTol_AreaUnitType const theAreaType, Standard_Boolean const theHasSecondUnitSize, Handle_StepBasic_LengthMeasureWithUnit theSecondUnitSize)

        Initialize all fields (own and inherited)

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget
        :type theUnitSize: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit
        :type theAreaType: OCC.wrapper.StepDimTol.StepDimTol_AreaUnitType
        :type theHasSecondUnitSize: bool
        :type theSecondUnitSize: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_Init(self, *args)


    def AreaType(self, *args):
        """
        AreaType(Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit self) -> StepDimTol_AreaUnitType

        Returns field AreaType

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_AreaUnitType

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_AreaType(self, *args)


    def SetAreaType(self, *args):
        """
        SetAreaType(Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit self, StepDimTol_AreaUnitType const theAreaType)

        Set field AreaType

        :type theAreaType: OCC.wrapper.StepDimTol.StepDimTol_AreaUnitType

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_SetAreaType(self, *args)


    def SecondUnitSize(self, *args):
        """
        SecondUnitSize(Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit self) -> Handle_StepBasic_LengthMeasureWithUnit

        Returns field SecondUnitSize

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_SecondUnitSize(self, *args)


    def SetSecondUnitSize(self, *args):
        """
        SetSecondUnitSize(Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit self, Handle_StepBasic_LengthMeasureWithUnit theSecondUnitSize)

        Set field SecondUnitSize

        :type theSecondUnitSize: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_SetSecondUnitSize(self, *args)


    def HasSecondUnitSize(self, *args):
        """
        HasSecondUnitSize(Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit self) -> Standard_Boolean

        Indicates if SecondUnitSize field exist

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_HasSecondUnitSize(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def UnitSize(self, *args):
        """
        UnitSize(Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit self) -> Handle_StepBasic_LengthMeasureWithUnit

        Returns field UnitSize

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_UnitSize(self, *args)


    def SetUnitSize(self, *args):
        """
        SetUnitSize(Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit self, Handle_StepBasic_LengthMeasureWithUnit theUnitSize)

        Set field UnitSize

        :type theUnitSize: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_SetUnitSize(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit self, Handle_TCollection_HAsciiString theName)

        Set field Name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit self, Handle_TCollection_HAsciiString theDescription)

        Set field Description

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_SetDescription(self, *args)


    def Magnitude(self, *args):
        """
        Magnitude(Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit self) -> Handle_StepBasic_MeasureWithUnit

        Returns field Magnitude

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_Magnitude(self, *args)


    def SetMagnitude(self, *args):
        """
        SetMagnitude(Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit self, Handle_StepBasic_MeasureWithUnit theMagnitude)

        Set field Magnitude

        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_SetMagnitude(self, *args)


    def TolerancedShapeAspect(self, *args):
        """
        TolerancedShapeAspect(Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit self) -> StepDimTol_GeometricToleranceTarget

        Returns field TolerancedShapeAspect
        Note: in AP214(203) type of this attribute can be only StepRepr_ShapeAspect

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_TolerancedShapeAspect(self, *args)


    def SetTolerancedShapeAspect(self, *args):
        """
        SetTolerancedShapeAspect(Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit self, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect)
        SetTolerancedShapeAspect(Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit self, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect)

        Set field TolerancedShapeAspect AP242

        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_SetTolerancedShapeAspect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_DecrementRefCounter(self, *args)

Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_swigregister = _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_swigregister
Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_swigregister(Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit)

def Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_DownCast(thing)
Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_DownCast = _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit_DownCast

class Handle_StepDimTol_HArray1OfDatumReferenceElement(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_HArray1OfDatumReferenceElement self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceElement_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_HArray1OfDatumReferenceElement self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceElement_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_HArray1OfDatumReferenceElement self, StepDimTol_HArray1OfDatumReferenceElement thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceElement_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_HArray1OfDatumReferenceElement self, Handle_StepDimTol_HArray1OfDatumReferenceElement theHandle) -> Handle_StepDimTol_HArray1OfDatumReferenceElement
        assign(Handle_StepDimTol_HArray1OfDatumReferenceElement self, StepDimTol_HArray1OfDatumReferenceElement thePtr) -> Handle_StepDimTol_HArray1OfDatumReferenceElement
        assign(Handle_StepDimTol_HArray1OfDatumReferenceElement self, Handle_StepDimTol_HArray1OfDatumReferenceElement theHandle) -> Handle_StepDimTol_HArray1OfDatumReferenceElement

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceElement_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_HArray1OfDatumReferenceElement self) -> StepDimTol_HArray1OfDatumReferenceElement

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceElement_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_HArray1OfDatumReferenceElement self) -> StepDimTol_HArray1OfDatumReferenceElement

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceElement___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_HArray1OfDatumReferenceElement self) -> StepDimTol_HArray1OfDatumReferenceElement

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceElement___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceElement___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceElement___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_HArray1OfDatumReferenceElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceElement_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_HArray1OfDatumReferenceElement

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepDimTol.StepDimTol_Array1OfDatumReferenceElement

        """
        res = _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceElement_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepDimTol_HArray1OfDatumReferenceElement self) -> NCollection_Array1_Handle_StepDimTol_DatumReferenceElement

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_Array1OfDatumReferenceElement

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceElement_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_HArray1OfDatumReferenceElement self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceElement_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceElement_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceElement_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_HArray1OfDatumReferenceElement self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceElement_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_HArray1OfDatumReferenceElement self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_HArray1OfDatumReferenceElement self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceElement_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_HArray1OfDatumReferenceElement self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_HArray1OfDatumReferenceElement self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceElement_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_HArray1OfDatumReferenceElement self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceElement_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_HArray1OfDatumReferenceElement self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceElement_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_HArray1OfDatumReferenceElement self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceElement_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_HArray1OfDatumReferenceElement self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceElement_DecrementRefCounter(self, *args)

Handle_StepDimTol_HArray1OfDatumReferenceElement_swigregister = _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceElement_swigregister
Handle_StepDimTol_HArray1OfDatumReferenceElement_swigregister(Handle_StepDimTol_HArray1OfDatumReferenceElement)

def Handle_StepDimTol_HArray1OfDatumReferenceElement_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceElement_DownCast(thing)
Handle_StepDimTol_HArray1OfDatumReferenceElement_DownCast = _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceElement_DownCast

class Handle_StepDimTol_GeometricTolerance(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_GeometricTolerance self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_GeometricTolerance_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_GeometricTolerance self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_GeometricTolerance_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_GeometricTolerance self, StepDimTol_GeometricTolerance thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeometricTolerance_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_GeometricTolerance self, Handle_StepDimTol_GeometricTolerance theHandle) -> Handle_StepDimTol_GeometricTolerance
        assign(Handle_StepDimTol_GeometricTolerance self, StepDimTol_GeometricTolerance thePtr) -> Handle_StepDimTol_GeometricTolerance
        assign(Handle_StepDimTol_GeometricTolerance self, Handle_StepDimTol_GeometricTolerance theHandle) -> Handle_StepDimTol_GeometricTolerance

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_GeometricTolerance_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_GeometricTolerance self) -> StepDimTol_GeometricTolerance

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeometricTolerance_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_GeometricTolerance self) -> StepDimTol_GeometricTolerance

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeometricTolerance___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_GeometricTolerance self) -> StepDimTol_GeometricTolerance

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_GeometricTolerance___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_GeometricTolerance___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_GeometricTolerance___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_GeometricTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_GeometricTolerance_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_GeometricTolerance

    def Init(self, *args):
        """
        Init(Handle_StepDimTol_GeometricTolerance self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect)
        Init(Handle_StepDimTol_GeometricTolerance self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect)

        Initialize all fields (own and inherited) AP242

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_GeometricTolerance_Init(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepDimTol_GeometricTolerance self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeometricTolerance_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_GeometricTolerance self, Handle_TCollection_HAsciiString theName)

        Set field Name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeometricTolerance_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_GeometricTolerance self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeometricTolerance_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_GeometricTolerance self, Handle_TCollection_HAsciiString theDescription)

        Set field Description

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeometricTolerance_SetDescription(self, *args)


    def Magnitude(self, *args):
        """
        Magnitude(Handle_StepDimTol_GeometricTolerance self) -> Handle_StepBasic_MeasureWithUnit

        Returns field Magnitude

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeometricTolerance_Magnitude(self, *args)


    def SetMagnitude(self, *args):
        """
        SetMagnitude(Handle_StepDimTol_GeometricTolerance self, Handle_StepBasic_MeasureWithUnit theMagnitude)

        Set field Magnitude

        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeometricTolerance_SetMagnitude(self, *args)


    def TolerancedShapeAspect(self, *args):
        """
        TolerancedShapeAspect(Handle_StepDimTol_GeometricTolerance self) -> StepDimTol_GeometricToleranceTarget

        Returns field TolerancedShapeAspect
        Note: in AP214(203) type of this attribute can be only StepRepr_ShapeAspect

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_GeometricTolerance_TolerancedShapeAspect(self, *args)


    def SetTolerancedShapeAspect(self, *args):
        """
        SetTolerancedShapeAspect(Handle_StepDimTol_GeometricTolerance self, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect)
        SetTolerancedShapeAspect(Handle_StepDimTol_GeometricTolerance self, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect)

        Set field TolerancedShapeAspect AP242

        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_GeometricTolerance_SetTolerancedShapeAspect(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_GeometricTolerance self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_GeometricTolerance_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_GeometricTolerance_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_GeometricTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_GeometricTolerance self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_GeometricTolerance_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_GeometricTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_GeometricTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_GeometricTolerance_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_GeometricTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_GeometricTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_GeometricTolerance_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_GeometricTolerance self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_GeometricTolerance_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_GeometricTolerance self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_GeometricTolerance_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_GeometricTolerance self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_GeometricTolerance_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_GeometricTolerance self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_GeometricTolerance_DecrementRefCounter(self, *args)

Handle_StepDimTol_GeometricTolerance_swigregister = _StepDimTol.Handle_StepDimTol_GeometricTolerance_swigregister
Handle_StepDimTol_GeometricTolerance_swigregister(Handle_StepDimTol_GeometricTolerance)

def Handle_StepDimTol_GeometricTolerance_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_GeometricTolerance_DownCast(thing)
Handle_StepDimTol_GeometricTolerance_DownCast = _StepDimTol.Handle_StepDimTol_GeometricTolerance_DownCast

class Handle_StepDimTol_SimpleDatumReferenceModifierMember(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_SimpleDatumReferenceModifierMember self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_SimpleDatumReferenceModifierMember self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_SimpleDatumReferenceModifierMember self, StepDimTol_SimpleDatumReferenceModifierMember thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_SimpleDatumReferenceModifierMember self, Handle_StepDimTol_SimpleDatumReferenceModifierMember theHandle) -> Handle_StepDimTol_SimpleDatumReferenceModifierMember
        assign(Handle_StepDimTol_SimpleDatumReferenceModifierMember self, StepDimTol_SimpleDatumReferenceModifierMember thePtr) -> Handle_StepDimTol_SimpleDatumReferenceModifierMember
        assign(Handle_StepDimTol_SimpleDatumReferenceModifierMember self, Handle_StepDimTol_SimpleDatumReferenceModifierMember theHandle) -> Handle_StepDimTol_SimpleDatumReferenceModifierMember

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_SimpleDatumReferenceModifierMember self) -> StepDimTol_SimpleDatumReferenceModifierMember

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_SimpleDatumReferenceModifierMember self) -> StepDimTol_SimpleDatumReferenceModifierMember

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_SimpleDatumReferenceModifierMember self) -> StepDimTol_SimpleDatumReferenceModifierMember

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_SimpleDatumReferenceModifierMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_SimpleDatumReferenceModifierMember

    def HasName(self, *args):
        """
        HasName(Handle_StepDimTol_SimpleDatumReferenceModifierMember self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_HasName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepDimTol_SimpleDatumReferenceModifierMember self) -> Standard_CString

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_SimpleDatumReferenceModifierMember self, Standard_CString const arg2) -> Standard_Boolean

        :type : OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_SetName(self, *args)


    def Kind(self, *args):
        """
        Kind(Handle_StepDimTol_SimpleDatumReferenceModifierMember self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_Kind(self, *args)


    def EnumText(self, *args):
        """
        EnumText(Handle_StepDimTol_SimpleDatumReferenceModifierMember self) -> Standard_CString

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_EnumText(self, *args)


    def SetEnumText(self, *args):
        """
        SetEnumText(Handle_StepDimTol_SimpleDatumReferenceModifierMember self, Standard_Integer const theValue, Standard_CString const theText)

        :type theValue: int
        :type theText: OCC.wrapper.Standard.Standard_CString

        """
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_SetEnumText(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_StepDimTol_SimpleDatumReferenceModifierMember self, StepDimTol_SimpleDatumReferenceModifier const theValue)

        :type theValue: OCC.wrapper.StepDimTol.StepDimTol_SimpleDatumReferenceModifier

        """
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_SetValue(self, *args)


    def Value(self, *args):
        """
        Value(Handle_StepDimTol_SimpleDatumReferenceModifierMember self) -> StepDimTol_SimpleDatumReferenceModifier

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_SimpleDatumReferenceModifier

        """
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_Value(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_SimpleDatumReferenceModifierMember self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetKind(self, *args):
        """
        SetKind(Handle_StepDimTol_SimpleDatumReferenceModifierMember self, Standard_Integer const kind)

        :type kind: int

        """
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_SetKind(self, *args)


    def Int(self, *args):
        """
        Int(Handle_StepDimTol_SimpleDatumReferenceModifierMember self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_Int(self, *args)


    def SetInt(self, *args):
        """
        SetInt(Handle_StepDimTol_SimpleDatumReferenceModifierMember self, Standard_Integer const val)

        :type val: int

        """
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_SetInt(self, *args)


    def Matches(self, *args):
        """
        Matches(Handle_StepDimTol_SimpleDatumReferenceModifierMember self, Standard_CString const name) -> Standard_Boolean

        Tells if the name of a SelectMember matches a given one
        By default, compares the strings, can be redefined (optimised)

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_Matches(self, *args)


    def ParamType(self, *args):
        """
        ParamType(Handle_StepDimTol_SimpleDatumReferenceModifierMember self) -> Interface_ParamType

        Returns the Kind of the SelectMember, under the form of an
        enum ParamType

        :rtype: OCC.wrapper.Interface.Interface_ParamType

        """
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_ParamType(self, *args)


    def Integer(self, *args):
        """
        Integer(Handle_StepDimTol_SimpleDatumReferenceModifierMember self) -> Standard_Integer

        Gets the value as an Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_Integer(self, *args)


    def SetInteger(self, *args):
        """
        SetInteger(Handle_StepDimTol_SimpleDatumReferenceModifierMember self, Standard_Integer const val)

        :type val: int

        """
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_SetInteger(self, *args)


    def Boolean(self, *args):
        """
        Boolean(Handle_StepDimTol_SimpleDatumReferenceModifierMember self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_Boolean(self, *args)


    def SetBoolean(self, *args):
        """
        SetBoolean(Handle_StepDimTol_SimpleDatumReferenceModifierMember self, Standard_Boolean const val)

        :type val: bool

        """
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_SetBoolean(self, *args)


    def Logical(self, *args):
        """
        Logical(Handle_StepDimTol_SimpleDatumReferenceModifierMember self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_Logical(self, *args)


    def SetLogical(self, *args):
        """
        SetLogical(Handle_StepDimTol_SimpleDatumReferenceModifierMember self, StepData_Logical const val)

        :type val: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_SetLogical(self, *args)


    def Real(self, *args):
        """
        Real(Handle_StepDimTol_SimpleDatumReferenceModifierMember self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_Real(self, *args)


    def SetReal(self, *args):
        """
        SetReal(Handle_StepDimTol_SimpleDatumReferenceModifierMember self, Standard_Real const val)

        :type val: float

        """
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_SetReal(self, *args)


    def String(self, *args):
        """
        String(Handle_StepDimTol_SimpleDatumReferenceModifierMember self) -> Standard_CString

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_String(self, *args)


    def SetString(self, *args):
        """
        SetString(Handle_StepDimTol_SimpleDatumReferenceModifierMember self, Standard_CString const val)

        :type val: OCC.wrapper.Standard.Standard_CString

        """
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_SetString(self, *args)


    def Enum(self, *args):
        """
        Enum(Handle_StepDimTol_SimpleDatumReferenceModifierMember self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_Enum(self, *args)


    def SetEnum(self, *args):
        """
        SetEnum(Handle_StepDimTol_SimpleDatumReferenceModifierMember self, Standard_Integer const val, Standard_CString const text)

        :type val: int
        :type text: OCC.wrapper.Standard.Standard_CString

        """
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_SetEnum(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_SimpleDatumReferenceModifierMember self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_SimpleDatumReferenceModifierMember self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_SimpleDatumReferenceModifierMember self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_SimpleDatumReferenceModifierMember self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_SimpleDatumReferenceModifierMember self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_SimpleDatumReferenceModifierMember self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_SimpleDatumReferenceModifierMember self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_SimpleDatumReferenceModifierMember self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_SimpleDatumReferenceModifierMember self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_DecrementRefCounter(self, *args)

Handle_StepDimTol_SimpleDatumReferenceModifierMember_swigregister = _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_swigregister
Handle_StepDimTol_SimpleDatumReferenceModifierMember_swigregister(Handle_StepDimTol_SimpleDatumReferenceModifierMember)

def Handle_StepDimTol_SimpleDatumReferenceModifierMember_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_DownCast(thing)
Handle_StepDimTol_SimpleDatumReferenceModifierMember_DownCast = _StepDimTol.Handle_StepDimTol_SimpleDatumReferenceModifierMember_DownCast

class StepDimTol_HArray1OfDatumReference(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_HArray1OfDatumReference
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_HArray1OfDatumReference(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_HArray1OfDatumReference self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepDimTol_HArray1OfDatumReference
        __init__(StepDimTol_HArray1OfDatumReference self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_StepDimTol_DatumReference theValue) -> StepDimTol_HArray1OfDatumReference
        __init__(StepDimTol_HArray1OfDatumReference self, NCollection_Array1_Handle_StepDimTol_DatumReference theOther) -> StepDimTol_HArray1OfDatumReference

        :type theOther: OCC.wrapper.StepDimTol.StepDimTol_Array1OfDatumReference

        """
        this = _StepDimTol.new_StepDimTol_HArray1OfDatumReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepDimTol.StepDimTol_Array1OfDatumReference

        """
        res = _StepDimTol.StepDimTol_HArray1OfDatumReference_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepDimTol_HArray1OfDatumReference self) -> NCollection_Array1_Handle_StepDimTol_DatumReference

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_Array1OfDatumReference

        """
        return _StepDimTol.StepDimTol_HArray1OfDatumReference_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_HArray1OfDatumReference_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_HArray1OfDatumReference_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_HArray1OfDatumReference_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_HArray1OfDatumReference
StepDimTol_HArray1OfDatumReference_swigregister = _StepDimTol.StepDimTol_HArray1OfDatumReference_swigregister
StepDimTol_HArray1OfDatumReference_swigregister(StepDimTol_HArray1OfDatumReference)

def StepDimTol_HArray1OfDatumReference_get_type_name(*args):
    """
    StepDimTol_HArray1OfDatumReference_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_HArray1OfDatumReference_get_type_name(*args)

def StepDimTol_HArray1OfDatumReference_get_type_descriptor(*args):
    """
    StepDimTol_HArray1OfDatumReference_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_HArray1OfDatumReference_get_type_descriptor(*args)

class Handle_StepDimTol_ToleranceZoneForm(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_ToleranceZoneForm self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneForm_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_ToleranceZoneForm self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneForm_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_ToleranceZoneForm self, StepDimTol_ToleranceZoneForm thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneForm_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_ToleranceZoneForm self, Handle_StepDimTol_ToleranceZoneForm theHandle) -> Handle_StepDimTol_ToleranceZoneForm
        assign(Handle_StepDimTol_ToleranceZoneForm self, StepDimTol_ToleranceZoneForm thePtr) -> Handle_StepDimTol_ToleranceZoneForm
        assign(Handle_StepDimTol_ToleranceZoneForm self, Handle_StepDimTol_ToleranceZoneForm theHandle) -> Handle_StepDimTol_ToleranceZoneForm

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneForm_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_ToleranceZoneForm self) -> StepDimTol_ToleranceZoneForm

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneForm_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_ToleranceZoneForm self) -> StepDimTol_ToleranceZoneForm

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneForm___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_ToleranceZoneForm self) -> StepDimTol_ToleranceZoneForm

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneForm___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneForm___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_ToleranceZoneForm___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_ToleranceZoneForm(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_ToleranceZoneForm_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_ToleranceZoneForm

    def Init(self, *args):
        """
        Init(Handle_StepDimTol_ToleranceZoneForm self, Handle_TCollection_HAsciiString theName)

        Init all field own and inherited

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneForm_Init(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepDimTol_ToleranceZoneForm self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneForm_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_ToleranceZoneForm self, Handle_TCollection_HAsciiString theName)

        Set field Name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneForm_SetName(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_ToleranceZoneForm self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneForm_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_ToleranceZoneForm_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_ToleranceZoneForm_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_ToleranceZoneForm self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneForm_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_ToleranceZoneForm self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_ToleranceZoneForm self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneForm_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_ToleranceZoneForm self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_ToleranceZoneForm self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneForm_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_ToleranceZoneForm self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneForm_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_ToleranceZoneForm self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneForm_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_ToleranceZoneForm self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneForm_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_ToleranceZoneForm self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneForm_DecrementRefCounter(self, *args)

Handle_StepDimTol_ToleranceZoneForm_swigregister = _StepDimTol.Handle_StepDimTol_ToleranceZoneForm_swigregister
Handle_StepDimTol_ToleranceZoneForm_swigregister(Handle_StepDimTol_ToleranceZoneForm)

def Handle_StepDimTol_ToleranceZoneForm_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_ToleranceZoneForm_DownCast(thing)
Handle_StepDimTol_ToleranceZoneForm_DownCast = _StepDimTol.Handle_StepDimTol_ToleranceZoneForm_DownCast

class NCollection_Array1_StepDimTol_ToleranceZoneTarget(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_StepDimTol_ToleranceZoneTarget self) -> NCollection_Array1< StepDimTol_ToleranceZoneTarget >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_ToleranceZoneTarget_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_StepDimTol_ToleranceZoneTarget self) -> NCollection_Array1< StepDimTol_ToleranceZoneTarget >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_ToleranceZoneTarget_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_StepDimTol_ToleranceZoneTarget self) -> NCollection_Array1< StepDimTol_ToleranceZoneTarget >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_ToleranceZoneTarget_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_StepDimTol_ToleranceZoneTarget self) -> NCollection_Array1< StepDimTol_ToleranceZoneTarget >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_ToleranceZoneTarget_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepDimTol.new_NCollection_Array1_StepDimTol_ToleranceZoneTarget(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_StepDimTol_ToleranceZoneTarget self, StepDimTol_ToleranceZoneTarget theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_ToleranceZoneTarget_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_StepDimTol_ToleranceZoneTarget self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_ToleranceZoneTarget_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_StepDimTol_ToleranceZoneTarget self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_ToleranceZoneTarget_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_StepDimTol_ToleranceZoneTarget self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_ToleranceZoneTarget_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_StepDimTol_ToleranceZoneTarget self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_ToleranceZoneTarget_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_StepDimTol_ToleranceZoneTarget self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_ToleranceZoneTarget_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_StepDimTol_ToleranceZoneTarget self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_ToleranceZoneTarget_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_StepDimTol_ToleranceZoneTarget self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_ToleranceZoneTarget_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_StepDimTol_ToleranceZoneTarget self, NCollection_Array1_StepDimTol_ToleranceZoneTarget theOther) -> NCollection_Array1_StepDimTol_ToleranceZoneTarget

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_ToleranceZoneTarget_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_StepDimTol_ToleranceZoneTarget self, NCollection_Array1_StepDimTol_ToleranceZoneTarget theOther) -> NCollection_Array1_StepDimTol_ToleranceZoneTarget

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_ToleranceZoneTarget_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_StepDimTol_ToleranceZoneTarget self, NCollection_Array1_StepDimTol_ToleranceZoneTarget theOther) -> NCollection_Array1_StepDimTol_ToleranceZoneTarget
        assign(NCollection_Array1_StepDimTol_ToleranceZoneTarget self, NCollection_Array1_StepDimTol_ToleranceZoneTarget theOther) -> NCollection_Array1_StepDimTol_ToleranceZoneTarget

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_ToleranceZoneTarget_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepDimTol.NCollection_Array1_StepDimTol_ToleranceZoneTarget_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_StepDimTol_ToleranceZoneTarget self) -> StepDimTol_ToleranceZoneTarget

        @return first element

        :rtype: TheItemType &

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_ToleranceZoneTarget_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepDimTol.NCollection_Array1_StepDimTol_ToleranceZoneTarget_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_StepDimTol_ToleranceZoneTarget self) -> StepDimTol_ToleranceZoneTarget

        @return last element

        :rtype: TheItemType &

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_ToleranceZoneTarget_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepDimTol.NCollection_Array1_StepDimTol_ToleranceZoneTarget_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_StepDimTol_ToleranceZoneTarget self, Standard_Integer const theIndex) -> StepDimTol_ToleranceZoneTarget

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_ToleranceZoneTarget_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepDimTol.NCollection_Array1_StepDimTol_ToleranceZoneTarget___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepDimTol.NCollection_Array1_StepDimTol_ToleranceZoneTarget_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_StepDimTol_ToleranceZoneTarget self, Standard_Integer const theIndex, StepDimTol_ToleranceZoneTarget theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_ToleranceZoneTarget_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_StepDimTol_ToleranceZoneTarget self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_ToleranceZoneTarget_Resize(self, *args)

    __swig_destroy__ = _StepDimTol.delete_NCollection_Array1_StepDimTol_ToleranceZoneTarget
NCollection_Array1_StepDimTol_ToleranceZoneTarget_swigregister = _StepDimTol.NCollection_Array1_StepDimTol_ToleranceZoneTarget_swigregister
NCollection_Array1_StepDimTol_ToleranceZoneTarget_swigregister(NCollection_Array1_StepDimTol_ToleranceZoneTarget)


try:
	StepDimTol_Array1OfToleranceZoneTarget = NCollection_Array1_StepDimTol_ToleranceZoneTarget
except NameError:
	pass # does not exist, probably ignored

class Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol self, StepDimTol_GeoTolAndGeoTolWthMaxTol thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol self, Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol theHandle) -> Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol
        assign(Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol self, StepDimTol_GeoTolAndGeoTolWthMaxTol thePtr) -> Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol
        assign(Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol self, Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol theHandle) -> Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol self) -> StepDimTol_GeoTolAndGeoTolWthMaxTol

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol self) -> StepDimTol_GeoTolAndGeoTolWthMaxTol

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol self) -> StepDimTol_GeoTolAndGeoTolWthMaxTol

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol

    def Init(self, *args):
        """
        Init(Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect, Handle_StepDimTol_GeometricToleranceWithModifiers theGTWM, Handle_StepBasic_LengthMeasureWithUnit theMaxTol, StepDimTol_GeometricToleranceType const theType)
        Init(Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepBasic_MeasureWithUnit aMagnitude, StepDimTol_GeometricToleranceTarget aTolerancedShapeAspect, Handle_StepDimTol_GeometricToleranceWithModifiers aGTWM, Handle_StepBasic_LengthMeasureWithUnit theMaxTol, StepDimTol_GeometricToleranceType const theType)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type aTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget
        :type aGTWM: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers
        :type theMaxTol: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit
        :type theType: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceType

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_Init(self, *args)


    def SetMaxTolerance(self, *args):
        """
        SetMaxTolerance(Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol self, Handle_StepBasic_LengthMeasureWithUnit theMaxTol)

        :type theMaxTol: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_SetMaxTolerance(self, *args)


    def GetMaxTolerance(self, *args):
        """
        GetMaxTolerance(Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol self) -> Handle_StepBasic_LengthMeasureWithUnit

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_GetMaxTolerance(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetGeometricToleranceWithModifiers(self, *args):
        """
        SetGeometricToleranceWithModifiers(Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol self, Handle_StepDimTol_GeometricToleranceWithModifiers theGTWM)

        :type theGTWM: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_SetGeometricToleranceWithModifiers(self, *args)


    def GetGeometricToleranceWithModifiers(self, *args):
        """
        GetGeometricToleranceWithModifiers(Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol self) -> Handle_StepDimTol_GeometricToleranceWithModifiers

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_GetGeometricToleranceWithModifiers(self, *args)


    def SetGeometricToleranceType(self, *args):
        """
        SetGeometricToleranceType(Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol self, StepDimTol_GeometricToleranceType const theType)

        :type theType: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceType

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_SetGeometricToleranceType(self, *args)


    def GetToleranceType(self, *args):
        """
        GetToleranceType(Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol self) -> StepDimTol_GeometricToleranceType

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceType

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_GetToleranceType(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol self, Handle_TCollection_HAsciiString theName)

        Set field Name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol self, Handle_TCollection_HAsciiString theDescription)

        Set field Description

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_SetDescription(self, *args)


    def Magnitude(self, *args):
        """
        Magnitude(Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol self) -> Handle_StepBasic_MeasureWithUnit

        Returns field Magnitude

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_Magnitude(self, *args)


    def SetMagnitude(self, *args):
        """
        SetMagnitude(Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol self, Handle_StepBasic_MeasureWithUnit theMagnitude)

        Set field Magnitude

        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_SetMagnitude(self, *args)


    def TolerancedShapeAspect(self, *args):
        """
        TolerancedShapeAspect(Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol self) -> StepDimTol_GeometricToleranceTarget

        Returns field TolerancedShapeAspect
        Note: in AP214(203) type of this attribute can be only StepRepr_ShapeAspect

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_TolerancedShapeAspect(self, *args)


    def SetTolerancedShapeAspect(self, *args):
        """
        SetTolerancedShapeAspect(Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol self, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect)
        SetTolerancedShapeAspect(Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol self, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect)

        Set field TolerancedShapeAspect AP242

        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_SetTolerancedShapeAspect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_DecrementRefCounter(self, *args)

Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_swigregister = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_swigregister
Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_swigregister(Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol)

def Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_DownCast(thing)
Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_DownCast = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol_DownCast

class Handle_StepDimTol_CircularRunoutTolerance(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_CircularRunoutTolerance self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_CircularRunoutTolerance_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_CircularRunoutTolerance self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_CircularRunoutTolerance_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_CircularRunoutTolerance self, StepDimTol_CircularRunoutTolerance thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_CircularRunoutTolerance_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_CircularRunoutTolerance self, Handle_StepDimTol_CircularRunoutTolerance theHandle) -> Handle_StepDimTol_CircularRunoutTolerance
        assign(Handle_StepDimTol_CircularRunoutTolerance self, StepDimTol_CircularRunoutTolerance thePtr) -> Handle_StepDimTol_CircularRunoutTolerance
        assign(Handle_StepDimTol_CircularRunoutTolerance self, Handle_StepDimTol_CircularRunoutTolerance theHandle) -> Handle_StepDimTol_CircularRunoutTolerance

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_CircularRunoutTolerance_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_CircularRunoutTolerance self) -> StepDimTol_CircularRunoutTolerance

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_CircularRunoutTolerance_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_CircularRunoutTolerance self) -> StepDimTol_CircularRunoutTolerance

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_CircularRunoutTolerance___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_CircularRunoutTolerance self) -> StepDimTol_CircularRunoutTolerance

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_CircularRunoutTolerance___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_CircularRunoutTolerance___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_CircularRunoutTolerance___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_CircularRunoutTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_CircularRunoutTolerance_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_CircularRunoutTolerance

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_CircularRunoutTolerance self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_CircularRunoutTolerance_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_CircularRunoutTolerance_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_CircularRunoutTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepDimTol_CircularRunoutTolerance self, Handle_TCollection_HAsciiString theGeometricTolerance_Name, Handle_TCollection_HAsciiString theGeometricTolerance_Description, Handle_StepBasic_MeasureWithUnit theGeometricTolerance_Magnitude, Handle_StepRepr_ShapeAspect theGeometricTolerance_TolerancedShapeAspect, Handle_StepDimTol_HArray1OfDatumReference theDatumSystem)
        Init(Handle_StepDimTol_CircularRunoutTolerance self, Handle_TCollection_HAsciiString theGeometricTolerance_Name, Handle_TCollection_HAsciiString theGeometricTolerance_Description, Handle_StepBasic_MeasureWithUnit theGeometricTolerance_Magnitude, StepDimTol_GeometricToleranceTarget theGeometricTolerance_TolerancedShapeAspect, Handle_StepDimTol_HArray1OfDatumSystemOrReference theDatumSystem)

        Initialize all fields (own and inherited) AP242

        :type theGeometricTolerance_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theGeometricTolerance_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theGeometricTolerance_Magnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type theGeometricTolerance_TolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget
        :type theDatumSystem: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference

        """
        return _StepDimTol.Handle_StepDimTol_CircularRunoutTolerance_Init(self, *args)


    def DatumSystem(self, *args):
        """
        DatumSystem(Handle_StepDimTol_CircularRunoutTolerance self) -> Handle_StepDimTol_HArray1OfDatumReference

        Returns field DatumSystem AP214

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumReference

        """
        return _StepDimTol.Handle_StepDimTol_CircularRunoutTolerance_DatumSystem(self, *args)


    def DatumSystemAP242(self, *args):
        """
        DatumSystemAP242(Handle_StepDimTol_CircularRunoutTolerance self) -> Handle_StepDimTol_HArray1OfDatumSystemOrReference

        Returns field DatumSystem AP242

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference

        """
        return _StepDimTol.Handle_StepDimTol_CircularRunoutTolerance_DatumSystemAP242(self, *args)


    def SetDatumSystem(self, *args):
        """
        SetDatumSystem(Handle_StepDimTol_CircularRunoutTolerance self, Handle_StepDimTol_HArray1OfDatumReference theDatumSystem)
        SetDatumSystem(Handle_StepDimTol_CircularRunoutTolerance self, Handle_StepDimTol_HArray1OfDatumSystemOrReference theDatumSystem)

        Set field DatumSystem AP242

        :type theDatumSystem: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference

        """
        return _StepDimTol.Handle_StepDimTol_CircularRunoutTolerance_SetDatumSystem(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepDimTol_CircularRunoutTolerance self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_CircularRunoutTolerance_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_CircularRunoutTolerance self, Handle_TCollection_HAsciiString theName)

        Set field Name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_CircularRunoutTolerance_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_CircularRunoutTolerance self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_CircularRunoutTolerance_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_CircularRunoutTolerance self, Handle_TCollection_HAsciiString theDescription)

        Set field Description

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_CircularRunoutTolerance_SetDescription(self, *args)


    def Magnitude(self, *args):
        """
        Magnitude(Handle_StepDimTol_CircularRunoutTolerance self) -> Handle_StepBasic_MeasureWithUnit

        Returns field Magnitude

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_CircularRunoutTolerance_Magnitude(self, *args)


    def SetMagnitude(self, *args):
        """
        SetMagnitude(Handle_StepDimTol_CircularRunoutTolerance self, Handle_StepBasic_MeasureWithUnit theMagnitude)

        Set field Magnitude

        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_CircularRunoutTolerance_SetMagnitude(self, *args)


    def TolerancedShapeAspect(self, *args):
        """
        TolerancedShapeAspect(Handle_StepDimTol_CircularRunoutTolerance self) -> StepDimTol_GeometricToleranceTarget

        Returns field TolerancedShapeAspect
        Note: in AP214(203) type of this attribute can be only StepRepr_ShapeAspect

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_CircularRunoutTolerance_TolerancedShapeAspect(self, *args)


    def SetTolerancedShapeAspect(self, *args):
        """
        SetTolerancedShapeAspect(Handle_StepDimTol_CircularRunoutTolerance self, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect)
        SetTolerancedShapeAspect(Handle_StepDimTol_CircularRunoutTolerance self, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect)

        Set field TolerancedShapeAspect AP242

        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_CircularRunoutTolerance_SetTolerancedShapeAspect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_CircularRunoutTolerance self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_CircularRunoutTolerance_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_CircularRunoutTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_CircularRunoutTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_CircularRunoutTolerance_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_CircularRunoutTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_CircularRunoutTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_CircularRunoutTolerance_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_CircularRunoutTolerance self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_CircularRunoutTolerance_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_CircularRunoutTolerance self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_CircularRunoutTolerance_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_CircularRunoutTolerance self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_CircularRunoutTolerance_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_CircularRunoutTolerance self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_CircularRunoutTolerance_DecrementRefCounter(self, *args)

Handle_StepDimTol_CircularRunoutTolerance_swigregister = _StepDimTol.Handle_StepDimTol_CircularRunoutTolerance_swigregister
Handle_StepDimTol_CircularRunoutTolerance_swigregister(Handle_StepDimTol_CircularRunoutTolerance)

def Handle_StepDimTol_CircularRunoutTolerance_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_CircularRunoutTolerance_DownCast(thing)
Handle_StepDimTol_CircularRunoutTolerance_DownCast = _StepDimTol.Handle_StepDimTol_CircularRunoutTolerance_DownCast

class StepDimTol_RunoutZoneDefinition(StepDimTol_ToleranceZoneDefinition):
    """Representation of STEP entity ToleranceZoneDefinition"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_RunoutZoneDefinition
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_RunoutZoneDefinition(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_RunoutZoneDefinition self) -> StepDimTol_RunoutZoneDefinition

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_RunoutZoneDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepDimTol_RunoutZoneDefinition self, Handle_StepDimTol_ToleranceZone theZone, Handle_StepRepr_HArray1OfShapeAspect theBoundaries, Handle_StepDimTol_RunoutZoneOrientation theOrientation)

        Initialize all fields (own and inherited)

        :type theZone: OCC.wrapper.StepDimTol.Handle_StepDimTol_ToleranceZone
        :type theBoundaries: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfShapeAspect
        :type theOrientation: OCC.wrapper.StepDimTol.Handle_StepDimTol_RunoutZoneOrientation

        """
        return _StepDimTol.StepDimTol_RunoutZoneDefinition_Init(self, *args)


    def Orientation(self, *args):
        """
        Orientation(StepDimTol_RunoutZoneDefinition self) -> Handle_StepDimTol_RunoutZoneOrientation

        Returns field Orientation

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_RunoutZoneOrientation

        """
        return _StepDimTol.StepDimTol_RunoutZoneDefinition_Orientation(self, *args)


    def SetOrientation(self, *args):
        """
        SetOrientation(StepDimTol_RunoutZoneDefinition self, Handle_StepDimTol_RunoutZoneOrientation theOrientation)

        Set field Orientation

        :type theOrientation: OCC.wrapper.StepDimTol.Handle_StepDimTol_RunoutZoneOrientation

        """
        return _StepDimTol.StepDimTol_RunoutZoneDefinition_SetOrientation(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_RunoutZoneDefinition_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_RunoutZoneDefinition_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_RunoutZoneDefinition_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_RunoutZoneDefinition
StepDimTol_RunoutZoneDefinition_swigregister = _StepDimTol.StepDimTol_RunoutZoneDefinition_swigregister
StepDimTol_RunoutZoneDefinition_swigregister(StepDimTol_RunoutZoneDefinition)

def StepDimTol_RunoutZoneDefinition_get_type_name(*args):
    """
    StepDimTol_RunoutZoneDefinition_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_RunoutZoneDefinition_get_type_name(*args)

def StepDimTol_RunoutZoneDefinition_get_type_descriptor(*args):
    """
    StepDimTol_RunoutZoneDefinition_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_RunoutZoneDefinition_get_type_descriptor(*args)

class StepDimTol_RoundnessTolerance(StepDimTol_GeometricTolerance):
    """Representation of STEP entity RoundnessTolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_RoundnessTolerance
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_RoundnessTolerance(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_RoundnessTolerance self) -> StepDimTol_RoundnessTolerance

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_RoundnessTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_RoundnessTolerance_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_RoundnessTolerance_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_RoundnessTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_RoundnessTolerance
StepDimTol_RoundnessTolerance_swigregister = _StepDimTol.StepDimTol_RoundnessTolerance_swigregister
StepDimTol_RoundnessTolerance_swigregister(StepDimTol_RoundnessTolerance)

def StepDimTol_RoundnessTolerance_get_type_name(*args):
    """
    StepDimTol_RoundnessTolerance_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_RoundnessTolerance_get_type_name(*args)

def StepDimTol_RoundnessTolerance_get_type_descriptor(*args):
    """
    StepDimTol_RoundnessTolerance_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_RoundnessTolerance_get_type_descriptor(*args)

class Handle_StepDimTol_GeoTolAndGeoTolWthDatRef(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_GeoTolAndGeoTolWthDatRef self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_GeoTolAndGeoTolWthDatRef self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_GeoTolAndGeoTolWthDatRef self, StepDimTol_GeoTolAndGeoTolWthDatRef thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_GeoTolAndGeoTolWthDatRef self, Handle_StepDimTol_GeoTolAndGeoTolWthDatRef theHandle) -> Handle_StepDimTol_GeoTolAndGeoTolWthDatRef
        assign(Handle_StepDimTol_GeoTolAndGeoTolWthDatRef self, StepDimTol_GeoTolAndGeoTolWthDatRef thePtr) -> Handle_StepDimTol_GeoTolAndGeoTolWthDatRef
        assign(Handle_StepDimTol_GeoTolAndGeoTolWthDatRef self, Handle_StepDimTol_GeoTolAndGeoTolWthDatRef theHandle) -> Handle_StepDimTol_GeoTolAndGeoTolWthDatRef

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_GeoTolAndGeoTolWthDatRef self) -> StepDimTol_GeoTolAndGeoTolWthDatRef

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_GeoTolAndGeoTolWthDatRef self) -> StepDimTol_GeoTolAndGeoTolWthDatRef

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_GeoTolAndGeoTolWthDatRef self) -> StepDimTol_GeoTolAndGeoTolWthDatRef

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_GeoTolAndGeoTolWthDatRef(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_GeoTolAndGeoTolWthDatRef

    def Init(self, *args):
        """
        Init(Handle_StepDimTol_GeoTolAndGeoTolWthDatRef self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect, Handle_StepDimTol_GeometricToleranceWithDatumReference theGTWDR, StepDimTol_GeometricToleranceType const theType)
        Init(Handle_StepDimTol_GeoTolAndGeoTolWthDatRef self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepBasic_MeasureWithUnit aMagnitude, StepDimTol_GeometricToleranceTarget aTolerancedShapeAspect, Handle_StepDimTol_GeometricToleranceWithDatumReference aGTWDR, StepDimTol_GeometricToleranceType const theType)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type aTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget
        :type aGTWDR: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference
        :type theType: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceType

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_Init(self, *args)


    def SetGeometricToleranceWithDatumReference(self, *args):
        """
        SetGeometricToleranceWithDatumReference(Handle_StepDimTol_GeoTolAndGeoTolWthDatRef self, Handle_StepDimTol_GeometricToleranceWithDatumReference theGTWDR)

        :type theGTWDR: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_SetGeometricToleranceWithDatumReference(self, *args)


    def GetGeometricToleranceWithDatumReference(self, *args):
        """
        GetGeometricToleranceWithDatumReference(Handle_StepDimTol_GeoTolAndGeoTolWthDatRef self) -> Handle_StepDimTol_GeometricToleranceWithDatumReference

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_GetGeometricToleranceWithDatumReference(self, *args)


    def SetGeometricToleranceType(self, *args):
        """
        SetGeometricToleranceType(Handle_StepDimTol_GeoTolAndGeoTolWthDatRef self, StepDimTol_GeometricToleranceType const theType)

        :type theType: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceType

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_SetGeometricToleranceType(self, *args)


    def GetToleranceType(self, *args):
        """
        GetToleranceType(Handle_StepDimTol_GeoTolAndGeoTolWthDatRef self) -> StepDimTol_GeometricToleranceType

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceType

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_GetToleranceType(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_GeoTolAndGeoTolWthDatRef self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Name(self, *args):
        """
        Name(Handle_StepDimTol_GeoTolAndGeoTolWthDatRef self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_GeoTolAndGeoTolWthDatRef self, Handle_TCollection_HAsciiString theName)

        Set field Name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_GeoTolAndGeoTolWthDatRef self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_GeoTolAndGeoTolWthDatRef self, Handle_TCollection_HAsciiString theDescription)

        Set field Description

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_SetDescription(self, *args)


    def Magnitude(self, *args):
        """
        Magnitude(Handle_StepDimTol_GeoTolAndGeoTolWthDatRef self) -> Handle_StepBasic_MeasureWithUnit

        Returns field Magnitude

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_Magnitude(self, *args)


    def SetMagnitude(self, *args):
        """
        SetMagnitude(Handle_StepDimTol_GeoTolAndGeoTolWthDatRef self, Handle_StepBasic_MeasureWithUnit theMagnitude)

        Set field Magnitude

        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_SetMagnitude(self, *args)


    def TolerancedShapeAspect(self, *args):
        """
        TolerancedShapeAspect(Handle_StepDimTol_GeoTolAndGeoTolWthDatRef self) -> StepDimTol_GeometricToleranceTarget

        Returns field TolerancedShapeAspect
        Note: in AP214(203) type of this attribute can be only StepRepr_ShapeAspect

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_TolerancedShapeAspect(self, *args)


    def SetTolerancedShapeAspect(self, *args):
        """
        SetTolerancedShapeAspect(Handle_StepDimTol_GeoTolAndGeoTolWthDatRef self, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect)
        SetTolerancedShapeAspect(Handle_StepDimTol_GeoTolAndGeoTolWthDatRef self, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect)

        Set field TolerancedShapeAspect AP242

        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_SetTolerancedShapeAspect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_GeoTolAndGeoTolWthDatRef self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_GeoTolAndGeoTolWthDatRef self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_GeoTolAndGeoTolWthDatRef self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_GeoTolAndGeoTolWthDatRef self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_GeoTolAndGeoTolWthDatRef self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_GeoTolAndGeoTolWthDatRef self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_GeoTolAndGeoTolWthDatRef self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_GeoTolAndGeoTolWthDatRef self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_GeoTolAndGeoTolWthDatRef self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_DecrementRefCounter(self, *args)

Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_swigregister = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_swigregister
Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_swigregister(Handle_StepDimTol_GeoTolAndGeoTolWthDatRef)

def Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_DownCast(thing)
Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_DownCast = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef_DownCast

class Handle_StepDimTol_Datum(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_Datum self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_Datum_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_Datum self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_Datum_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_Datum self, StepDimTol_Datum thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_Datum_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_Datum self, Handle_StepDimTol_Datum theHandle) -> Handle_StepDimTol_Datum
        assign(Handle_StepDimTol_Datum self, StepDimTol_Datum thePtr) -> Handle_StepDimTol_Datum
        assign(Handle_StepDimTol_Datum self, Handle_StepDimTol_Datum theHandle) -> Handle_StepDimTol_Datum

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_Datum_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_Datum self) -> StepDimTol_Datum

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_Datum_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_Datum self) -> StepDimTol_Datum

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_Datum___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_Datum self) -> StepDimTol_Datum

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_Datum___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_Datum___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_Datum___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_Datum(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_Datum_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_Datum

    def Init(self, *args):
        """
        Init(Handle_StepDimTol_Datum self, Handle_TCollection_HAsciiString theShapeAspect_Name, Handle_TCollection_HAsciiString theShapeAspect_Description, Handle_StepRepr_ProductDefinitionShape theShapeAspect_OfShape, StepData_Logical const theShapeAspect_ProductDefinitional, Handle_TCollection_HAsciiString theIdentification)

        Initialize all fields (own and inherited)

        :type theShapeAspect_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theShapeAspect_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theShapeAspect_OfShape: OCC.wrapper.StepDimTol.Handle_StepRepr_ProductDefinitionShape
        :type theShapeAspect_ProductDefinitional: OCC.wrapper.StepData.StepData_Logical
        :type theIdentification: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_Datum_Init(self, *args)


    def Identification(self, *args):
        """
        Identification(Handle_StepDimTol_Datum self) -> Handle_TCollection_HAsciiString

        Returns field Identification

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_Datum_Identification(self, *args)


    def SetIdentification(self, *args):
        """
        SetIdentification(Handle_StepDimTol_Datum self, Handle_TCollection_HAsciiString theIdentification)

        Set field Identification

        :type theIdentification: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_Datum_SetIdentification(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_Datum self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_Datum_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_Datum_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_Datum_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_Datum self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_Datum_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepDimTol_Datum self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_Datum_Name(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_Datum self, Handle_TCollection_HAsciiString aDescription)

        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_Datum_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_Datum self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_Datum_Description(self, *args)


    def SetOfShape(self, *args):
        """
        SetOfShape(Handle_StepDimTol_Datum self, Handle_StepRepr_ProductDefinitionShape aOfShape)

        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepDimTol.Handle_StepDimTol_Datum_SetOfShape(self, *args)


    def OfShape(self, *args):
        """
        OfShape(Handle_StepDimTol_Datum self) -> Handle_StepRepr_ProductDefinitionShape

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepDimTol.Handle_StepDimTol_Datum_OfShape(self, *args)


    def SetProductDefinitional(self, *args):
        """
        SetProductDefinitional(Handle_StepDimTol_Datum self, StepData_Logical const aProductDefinitional)

        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepDimTol.Handle_StepDimTol_Datum_SetProductDefinitional(self, *args)


    def ProductDefinitional(self, *args):
        """
        ProductDefinitional(Handle_StepDimTol_Datum self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepDimTol.Handle_StepDimTol_Datum_ProductDefinitional(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_Datum self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_Datum_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_Datum self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_Datum self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_Datum_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_Datum self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_Datum self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_Datum_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_Datum self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_Datum_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_Datum self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_Datum_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_Datum self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_Datum_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_Datum self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_Datum_DecrementRefCounter(self, *args)

Handle_StepDimTol_Datum_swigregister = _StepDimTol.Handle_StepDimTol_Datum_swigregister
Handle_StepDimTol_Datum_swigregister(Handle_StepDimTol_Datum)

def Handle_StepDimTol_Datum_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_Datum_DownCast(thing)
Handle_StepDimTol_Datum_DownCast = _StepDimTol.Handle_StepDimTol_Datum_DownCast

class StepDimTol_ToleranceZone(StepRepr.StepRepr_ShapeAspect):
    """Representation of STEP entity ToleranceZone"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_ToleranceZone
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_ToleranceZone(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_ToleranceZone self) -> StepDimTol_ToleranceZone

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_ToleranceZone(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepDimTol_ToleranceZone self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepRepr_ProductDefinitionShape theOfShape, StepData_Logical const theProductDefinitional, Handle_StepDimTol_HArray1OfToleranceZoneTarget theDefiningTolerance, Handle_StepDimTol_ToleranceZoneForm theForm)

        Initialize all fields (own and inherited)

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theOfShape: OCC.wrapper.StepDimTol.Handle_StepRepr_ProductDefinitionShape
        :type theProductDefinitional: OCC.wrapper.StepData.StepData_Logical
        :type theDefiningTolerance: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfToleranceZoneTarget
        :type theForm: OCC.wrapper.StepDimTol.Handle_StepDimTol_ToleranceZoneForm

        """
        return _StepDimTol.StepDimTol_ToleranceZone_Init(self, *args)


    def DefiningTolerance(self, *args):
        """
        DefiningTolerance(StepDimTol_ToleranceZone self) -> Handle_StepDimTol_HArray1OfToleranceZoneTarget

        Returns field DefiningTolerance

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfToleranceZoneTarget

        """
        return _StepDimTol.StepDimTol_ToleranceZone_DefiningTolerance(self, *args)


    def SetDefiningTolerance(self, *args):
        """
        SetDefiningTolerance(StepDimTol_ToleranceZone self, Handle_StepDimTol_HArray1OfToleranceZoneTarget theDefiningTolerance)

        Set field DefiningTolerance

        :type theDefiningTolerance: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfToleranceZoneTarget

        """
        return _StepDimTol.StepDimTol_ToleranceZone_SetDefiningTolerance(self, *args)


    def NbDefiningTolerances(self, *args):
        """
        NbDefiningTolerances(StepDimTol_ToleranceZone self) -> Standard_Integer

        Returns number of Defining Tolerances

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.StepDimTol_ToleranceZone_NbDefiningTolerances(self, *args)


    def DefiningToleranceValue(self, *args):
        """
        DefiningToleranceValue(StepDimTol_ToleranceZone self, Standard_Integer const theNum) -> StepDimTol_ToleranceZoneTarget

        Returns Defining Tolerance with the given number

        :type theNum: int
        :rtype: OCC.wrapper.StepDimTol.StepDimTol_ToleranceZoneTarget

        """
        return _StepDimTol.StepDimTol_ToleranceZone_DefiningToleranceValue(self, *args)


    def SetDefiningToleranceValue(self, *args):
        """
        SetDefiningToleranceValue(StepDimTol_ToleranceZone self, Standard_Integer const theNum, StepDimTol_ToleranceZoneTarget theItem)

        Sets Defining Tolerance with given number

        :type theNum: int
        :type theItem: OCC.wrapper.StepDimTol.StepDimTol_ToleranceZoneTarget

        """
        return _StepDimTol.StepDimTol_ToleranceZone_SetDefiningToleranceValue(self, *args)


    def Form(self, *args):
        """
        Form(StepDimTol_ToleranceZone self) -> Handle_StepDimTol_ToleranceZoneForm

        Returns field Form

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_ToleranceZoneForm

        """
        return _StepDimTol.StepDimTol_ToleranceZone_Form(self, *args)


    def SetForm(self, *args):
        """
        SetForm(StepDimTol_ToleranceZone self, Handle_StepDimTol_ToleranceZoneForm theForm)

        Set field Form

        :type theForm: OCC.wrapper.StepDimTol.Handle_StepDimTol_ToleranceZoneForm

        """
        return _StepDimTol.StepDimTol_ToleranceZone_SetForm(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_ToleranceZone_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_ToleranceZone_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_ToleranceZone_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_ToleranceZone
StepDimTol_ToleranceZone_swigregister = _StepDimTol.StepDimTol_ToleranceZone_swigregister
StepDimTol_ToleranceZone_swigregister(StepDimTol_ToleranceZone)

def StepDimTol_ToleranceZone_get_type_name(*args):
    """
    StepDimTol_ToleranceZone_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_ToleranceZone_get_type_name(*args)

def StepDimTol_ToleranceZone_get_type_descriptor(*args):
    """
    StepDimTol_ToleranceZone_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_ToleranceZone_get_type_descriptor(*args)

class Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self, StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self, Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol theHandle) -> Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol
        assign(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self, StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol thePtr) -> Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol
        assign(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self, Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol theHandle) -> Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self) -> StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self) -> StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self) -> StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol

    def Init(self, *args):
        """
        Init(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect, Handle_StepDimTol_GeometricToleranceWithDatumReference theGTWDR, StepDimTol_GeometricToleranceType const theType, Handle_StepDimTol_UnequallyDisposedGeometricTolerance theUDGT)
        Init(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepBasic_MeasureWithUnit aMagnitude, StepDimTol_GeometricToleranceTarget aTolerancedShapeAspect, Handle_StepDimTol_GeometricToleranceWithDatumReference aGTWDR, StepDimTol_GeometricToleranceType const theType, Handle_StepDimTol_UnequallyDisposedGeometricTolerance theUDGT)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type aTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget
        :type aGTWDR: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference
        :type theType: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceType
        :type theUDGT: OCC.wrapper.StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_Init(self, *args)


    def SetUnequallyDisposedGeometricTolerance(self, *args):
        """
        SetUnequallyDisposedGeometricTolerance(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self, Handle_StepDimTol_UnequallyDisposedGeometricTolerance theUDGT)

        :type theUDGT: OCC.wrapper.StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_SetUnequallyDisposedGeometricTolerance(self, *args)


    def GetUnequallyDisposedGeometricTolerance(self, *args):
        """
        GetUnequallyDisposedGeometricTolerance(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self) -> Handle_StepDimTol_UnequallyDisposedGeometricTolerance

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_GetUnequallyDisposedGeometricTolerance(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetGeometricToleranceWithDatumReference(self, *args):
        """
        SetGeometricToleranceWithDatumReference(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self, Handle_StepDimTol_GeometricToleranceWithDatumReference theGTWDR)

        :type theGTWDR: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_SetGeometricToleranceWithDatumReference(self, *args)


    def GetGeometricToleranceWithDatumReference(self, *args):
        """
        GetGeometricToleranceWithDatumReference(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self) -> Handle_StepDimTol_GeometricToleranceWithDatumReference

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_GetGeometricToleranceWithDatumReference(self, *args)


    def SetGeometricToleranceType(self, *args):
        """
        SetGeometricToleranceType(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self, StepDimTol_GeometricToleranceType const theType)

        :type theType: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceType

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_SetGeometricToleranceType(self, *args)


    def GetToleranceType(self, *args):
        """
        GetToleranceType(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self) -> StepDimTol_GeometricToleranceType

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceType

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_GetToleranceType(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self, Handle_TCollection_HAsciiString theName)

        Set field Name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self, Handle_TCollection_HAsciiString theDescription)

        Set field Description

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_SetDescription(self, *args)


    def Magnitude(self, *args):
        """
        Magnitude(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self) -> Handle_StepBasic_MeasureWithUnit

        Returns field Magnitude

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_Magnitude(self, *args)


    def SetMagnitude(self, *args):
        """
        SetMagnitude(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self, Handle_StepBasic_MeasureWithUnit theMagnitude)

        Set field Magnitude

        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_SetMagnitude(self, *args)


    def TolerancedShapeAspect(self, *args):
        """
        TolerancedShapeAspect(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self) -> StepDimTol_GeometricToleranceTarget

        Returns field TolerancedShapeAspect
        Note: in AP214(203) type of this attribute can be only StepRepr_ShapeAspect

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_TolerancedShapeAspect(self, *args)


    def SetTolerancedShapeAspect(self, *args):
        """
        SetTolerancedShapeAspect(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect)
        SetTolerancedShapeAspect(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect)

        Set field TolerancedShapeAspect AP242

        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_SetTolerancedShapeAspect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_DecrementRefCounter(self, *args)

Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_swigregister = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_swigregister
Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_swigregister(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol)

def Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_DownCast(thing)
Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_DownCast = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_DownCast

class StepDimTol_DatumOrCommonDatum(StepData.StepData_SelectType):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepDimTol_DatumOrCommonDatum self) -> StepDimTol_DatumOrCommonDatum

        Returns a DatumOrCommonDatum select type


        """
        this = _StepDimTol.new_StepDimTol_DatumOrCommonDatum(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepDimTol_DatumOrCommonDatum self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a DatumOrCommonDatum Kind Entity that is :
        1 -> Datum
        2 -> CommonDatumList
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.StepDimTol_DatumOrCommonDatum_CaseNum(self, *args)


    def Datum(self, *args):
        """
        Datum(StepDimTol_DatumOrCommonDatum self) -> Handle_StepDimTol_Datum

        returns Value as a Datum (Null if another type)

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_Datum

        """
        return _StepDimTol.StepDimTol_DatumOrCommonDatum_Datum(self, *args)


    def CommonDatumList(self, *args):
        """
        CommonDatumList(StepDimTol_DatumOrCommonDatum self) -> Handle_StepDimTol_HArray1OfDatumReferenceElement

        returns Value as a CommonDatumList  (Null if another type)

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceElement

        """
        return _StepDimTol.StepDimTol_DatumOrCommonDatum_CommonDatumList(self, *args)

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_DatumOrCommonDatum
StepDimTol_DatumOrCommonDatum_swigregister = _StepDimTol.StepDimTol_DatumOrCommonDatum_swigregister
StepDimTol_DatumOrCommonDatum_swigregister(StepDimTol_DatumOrCommonDatum)

class Handle_StepDimTol_ModifiedGeometricTolerance(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_ModifiedGeometricTolerance self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_ModifiedGeometricTolerance self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_ModifiedGeometricTolerance self, StepDimTol_ModifiedGeometricTolerance thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_ModifiedGeometricTolerance self, Handle_StepDimTol_ModifiedGeometricTolerance theHandle) -> Handle_StepDimTol_ModifiedGeometricTolerance
        assign(Handle_StepDimTol_ModifiedGeometricTolerance self, StepDimTol_ModifiedGeometricTolerance thePtr) -> Handle_StepDimTol_ModifiedGeometricTolerance
        assign(Handle_StepDimTol_ModifiedGeometricTolerance self, Handle_StepDimTol_ModifiedGeometricTolerance theHandle) -> Handle_StepDimTol_ModifiedGeometricTolerance

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_ModifiedGeometricTolerance self) -> StepDimTol_ModifiedGeometricTolerance

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_ModifiedGeometricTolerance self) -> StepDimTol_ModifiedGeometricTolerance

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_ModifiedGeometricTolerance self) -> StepDimTol_ModifiedGeometricTolerance

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_ModifiedGeometricTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_ModifiedGeometricTolerance

    def Init(self, *args):
        """
        Init(Handle_StepDimTol_ModifiedGeometricTolerance self, Handle_TCollection_HAsciiString theGeometricTolerance_Name, Handle_TCollection_HAsciiString theGeometricTolerance_Description, Handle_StepBasic_MeasureWithUnit theGeometricTolerance_Magnitude, Handle_StepRepr_ShapeAspect theGeometricTolerance_TolerancedShapeAspect, StepDimTol_LimitCondition const theModifier)
        Init(Handle_StepDimTol_ModifiedGeometricTolerance self, Handle_TCollection_HAsciiString theGeometricTolerance_Name, Handle_TCollection_HAsciiString theGeometricTolerance_Description, Handle_StepBasic_MeasureWithUnit theGeometricTolerance_Magnitude, StepDimTol_GeometricToleranceTarget theGeometricTolerance_TolerancedShapeAspect, StepDimTol_LimitCondition const theModifier)

        Initialize all fields (own and inherited) AP242

        :type theGeometricTolerance_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theGeometricTolerance_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theGeometricTolerance_Magnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type theGeometricTolerance_TolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget
        :type theModifier: OCC.wrapper.StepDimTol.StepDimTol_LimitCondition

        """
        return _StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance_Init(self, *args)


    def Modifier(self, *args):
        """
        Modifier(Handle_StepDimTol_ModifiedGeometricTolerance self) -> StepDimTol_LimitCondition

        Returns field Modifier

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_LimitCondition

        """
        return _StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance_Modifier(self, *args)


    def SetModifier(self, *args):
        """
        SetModifier(Handle_StepDimTol_ModifiedGeometricTolerance self, StepDimTol_LimitCondition const theModifier)

        Set field Modifier

        :type theModifier: OCC.wrapper.StepDimTol.StepDimTol_LimitCondition

        """
        return _StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance_SetModifier(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_ModifiedGeometricTolerance self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Name(self, *args):
        """
        Name(Handle_StepDimTol_ModifiedGeometricTolerance self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_ModifiedGeometricTolerance self, Handle_TCollection_HAsciiString theName)

        Set field Name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_ModifiedGeometricTolerance self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_ModifiedGeometricTolerance self, Handle_TCollection_HAsciiString theDescription)

        Set field Description

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance_SetDescription(self, *args)


    def Magnitude(self, *args):
        """
        Magnitude(Handle_StepDimTol_ModifiedGeometricTolerance self) -> Handle_StepBasic_MeasureWithUnit

        Returns field Magnitude

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance_Magnitude(self, *args)


    def SetMagnitude(self, *args):
        """
        SetMagnitude(Handle_StepDimTol_ModifiedGeometricTolerance self, Handle_StepBasic_MeasureWithUnit theMagnitude)

        Set field Magnitude

        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance_SetMagnitude(self, *args)


    def TolerancedShapeAspect(self, *args):
        """
        TolerancedShapeAspect(Handle_StepDimTol_ModifiedGeometricTolerance self) -> StepDimTol_GeometricToleranceTarget

        Returns field TolerancedShapeAspect
        Note: in AP214(203) type of this attribute can be only StepRepr_ShapeAspect

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance_TolerancedShapeAspect(self, *args)


    def SetTolerancedShapeAspect(self, *args):
        """
        SetTolerancedShapeAspect(Handle_StepDimTol_ModifiedGeometricTolerance self, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect)
        SetTolerancedShapeAspect(Handle_StepDimTol_ModifiedGeometricTolerance self, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect)

        Set field TolerancedShapeAspect AP242

        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance_SetTolerancedShapeAspect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_ModifiedGeometricTolerance self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_ModifiedGeometricTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_ModifiedGeometricTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_ModifiedGeometricTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_ModifiedGeometricTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_ModifiedGeometricTolerance self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_ModifiedGeometricTolerance self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_ModifiedGeometricTolerance self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_ModifiedGeometricTolerance self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance_DecrementRefCounter(self, *args)

Handle_StepDimTol_ModifiedGeometricTolerance_swigregister = _StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance_swigregister
Handle_StepDimTol_ModifiedGeometricTolerance_swigregister(Handle_StepDimTol_ModifiedGeometricTolerance)

def Handle_StepDimTol_ModifiedGeometricTolerance_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance_DownCast(thing)
Handle_StepDimTol_ModifiedGeometricTolerance_DownCast = _StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance_DownCast

class Handle_StepDimTol_ParallelismTolerance(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_ParallelismTolerance self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_ParallelismTolerance_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_ParallelismTolerance self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_ParallelismTolerance_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_ParallelismTolerance self, StepDimTol_ParallelismTolerance thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_ParallelismTolerance_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_ParallelismTolerance self, Handle_StepDimTol_ParallelismTolerance theHandle) -> Handle_StepDimTol_ParallelismTolerance
        assign(Handle_StepDimTol_ParallelismTolerance self, StepDimTol_ParallelismTolerance thePtr) -> Handle_StepDimTol_ParallelismTolerance
        assign(Handle_StepDimTol_ParallelismTolerance self, Handle_StepDimTol_ParallelismTolerance theHandle) -> Handle_StepDimTol_ParallelismTolerance

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_ParallelismTolerance_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_ParallelismTolerance self) -> StepDimTol_ParallelismTolerance

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_ParallelismTolerance_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_ParallelismTolerance self) -> StepDimTol_ParallelismTolerance

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_ParallelismTolerance___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_ParallelismTolerance self) -> StepDimTol_ParallelismTolerance

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_ParallelismTolerance___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_ParallelismTolerance___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_ParallelismTolerance___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_ParallelismTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_ParallelismTolerance_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_ParallelismTolerance

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_ParallelismTolerance self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_ParallelismTolerance_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_ParallelismTolerance_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_ParallelismTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepDimTol_ParallelismTolerance self, Handle_TCollection_HAsciiString theGeometricTolerance_Name, Handle_TCollection_HAsciiString theGeometricTolerance_Description, Handle_StepBasic_MeasureWithUnit theGeometricTolerance_Magnitude, Handle_StepRepr_ShapeAspect theGeometricTolerance_TolerancedShapeAspect, Handle_StepDimTol_HArray1OfDatumReference theDatumSystem)
        Init(Handle_StepDimTol_ParallelismTolerance self, Handle_TCollection_HAsciiString theGeometricTolerance_Name, Handle_TCollection_HAsciiString theGeometricTolerance_Description, Handle_StepBasic_MeasureWithUnit theGeometricTolerance_Magnitude, StepDimTol_GeometricToleranceTarget theGeometricTolerance_TolerancedShapeAspect, Handle_StepDimTol_HArray1OfDatumSystemOrReference theDatumSystem)

        Initialize all fields (own and inherited) AP242

        :type theGeometricTolerance_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theGeometricTolerance_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theGeometricTolerance_Magnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type theGeometricTolerance_TolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget
        :type theDatumSystem: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference

        """
        return _StepDimTol.Handle_StepDimTol_ParallelismTolerance_Init(self, *args)


    def DatumSystem(self, *args):
        """
        DatumSystem(Handle_StepDimTol_ParallelismTolerance self) -> Handle_StepDimTol_HArray1OfDatumReference

        Returns field DatumSystem AP214

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumReference

        """
        return _StepDimTol.Handle_StepDimTol_ParallelismTolerance_DatumSystem(self, *args)


    def DatumSystemAP242(self, *args):
        """
        DatumSystemAP242(Handle_StepDimTol_ParallelismTolerance self) -> Handle_StepDimTol_HArray1OfDatumSystemOrReference

        Returns field DatumSystem AP242

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference

        """
        return _StepDimTol.Handle_StepDimTol_ParallelismTolerance_DatumSystemAP242(self, *args)


    def SetDatumSystem(self, *args):
        """
        SetDatumSystem(Handle_StepDimTol_ParallelismTolerance self, Handle_StepDimTol_HArray1OfDatumReference theDatumSystem)
        SetDatumSystem(Handle_StepDimTol_ParallelismTolerance self, Handle_StepDimTol_HArray1OfDatumSystemOrReference theDatumSystem)

        Set field DatumSystem AP242

        :type theDatumSystem: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference

        """
        return _StepDimTol.Handle_StepDimTol_ParallelismTolerance_SetDatumSystem(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepDimTol_ParallelismTolerance self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_ParallelismTolerance_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_ParallelismTolerance self, Handle_TCollection_HAsciiString theName)

        Set field Name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_ParallelismTolerance_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_ParallelismTolerance self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_ParallelismTolerance_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_ParallelismTolerance self, Handle_TCollection_HAsciiString theDescription)

        Set field Description

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_ParallelismTolerance_SetDescription(self, *args)


    def Magnitude(self, *args):
        """
        Magnitude(Handle_StepDimTol_ParallelismTolerance self) -> Handle_StepBasic_MeasureWithUnit

        Returns field Magnitude

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_ParallelismTolerance_Magnitude(self, *args)


    def SetMagnitude(self, *args):
        """
        SetMagnitude(Handle_StepDimTol_ParallelismTolerance self, Handle_StepBasic_MeasureWithUnit theMagnitude)

        Set field Magnitude

        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_ParallelismTolerance_SetMagnitude(self, *args)


    def TolerancedShapeAspect(self, *args):
        """
        TolerancedShapeAspect(Handle_StepDimTol_ParallelismTolerance self) -> StepDimTol_GeometricToleranceTarget

        Returns field TolerancedShapeAspect
        Note: in AP214(203) type of this attribute can be only StepRepr_ShapeAspect

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_ParallelismTolerance_TolerancedShapeAspect(self, *args)


    def SetTolerancedShapeAspect(self, *args):
        """
        SetTolerancedShapeAspect(Handle_StepDimTol_ParallelismTolerance self, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect)
        SetTolerancedShapeAspect(Handle_StepDimTol_ParallelismTolerance self, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect)

        Set field TolerancedShapeAspect AP242

        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_ParallelismTolerance_SetTolerancedShapeAspect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_ParallelismTolerance self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_ParallelismTolerance_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_ParallelismTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_ParallelismTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_ParallelismTolerance_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_ParallelismTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_ParallelismTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_ParallelismTolerance_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_ParallelismTolerance self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_ParallelismTolerance_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_ParallelismTolerance self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_ParallelismTolerance_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_ParallelismTolerance self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_ParallelismTolerance_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_ParallelismTolerance self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_ParallelismTolerance_DecrementRefCounter(self, *args)

Handle_StepDimTol_ParallelismTolerance_swigregister = _StepDimTol.Handle_StepDimTol_ParallelismTolerance_swigregister
Handle_StepDimTol_ParallelismTolerance_swigregister(Handle_StepDimTol_ParallelismTolerance)

def Handle_StepDimTol_ParallelismTolerance_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_ParallelismTolerance_DownCast(thing)
Handle_StepDimTol_ParallelismTolerance_DownCast = _StepDimTol.Handle_StepDimTol_ParallelismTolerance_DownCast

class Handle_StepDimTol_HArray1OfDatumSystemOrReference(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_HArray1OfDatumSystemOrReference self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_HArray1OfDatumSystemOrReference self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_HArray1OfDatumSystemOrReference self, StepDimTol_HArray1OfDatumSystemOrReference thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_HArray1OfDatumSystemOrReference self, Handle_StepDimTol_HArray1OfDatumSystemOrReference theHandle) -> Handle_StepDimTol_HArray1OfDatumSystemOrReference
        assign(Handle_StepDimTol_HArray1OfDatumSystemOrReference self, StepDimTol_HArray1OfDatumSystemOrReference thePtr) -> Handle_StepDimTol_HArray1OfDatumSystemOrReference
        assign(Handle_StepDimTol_HArray1OfDatumSystemOrReference self, Handle_StepDimTol_HArray1OfDatumSystemOrReference theHandle) -> Handle_StepDimTol_HArray1OfDatumSystemOrReference

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_HArray1OfDatumSystemOrReference self) -> StepDimTol_HArray1OfDatumSystemOrReference

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_HArray1OfDatumSystemOrReference self) -> StepDimTol_HArray1OfDatumSystemOrReference

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_HArray1OfDatumSystemOrReference self) -> StepDimTol_HArray1OfDatumSystemOrReference

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_HArray1OfDatumSystemOrReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_HArray1OfDatumSystemOrReference

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepDimTol.StepDimTol_Array1OfDatumSystemOrReference

        """
        res = _StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepDimTol_HArray1OfDatumSystemOrReference self) -> NCollection_Array1_StepDimTol_DatumSystemOrReference

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_Array1OfDatumSystemOrReference

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_HArray1OfDatumSystemOrReference self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_HArray1OfDatumSystemOrReference self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_HArray1OfDatumSystemOrReference self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_HArray1OfDatumSystemOrReference self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_HArray1OfDatumSystemOrReference self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_HArray1OfDatumSystemOrReference self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_HArray1OfDatumSystemOrReference self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_HArray1OfDatumSystemOrReference self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_HArray1OfDatumSystemOrReference self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_HArray1OfDatumSystemOrReference self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference_DecrementRefCounter(self, *args)

Handle_StepDimTol_HArray1OfDatumSystemOrReference_swigregister = _StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference_swigregister
Handle_StepDimTol_HArray1OfDatumSystemOrReference_swigregister(Handle_StepDimTol_HArray1OfDatumSystemOrReference)

def Handle_StepDimTol_HArray1OfDatumSystemOrReference_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference_DownCast(thing)
Handle_StepDimTol_HArray1OfDatumSystemOrReference_DownCast = _StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference_DownCast

class Handle_StepDimTol_DatumFeature(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_DatumFeature self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_DatumFeature_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_DatumFeature self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_DatumFeature_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_DatumFeature self, StepDimTol_DatumFeature thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_DatumFeature_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_DatumFeature self, Handle_StepDimTol_DatumFeature theHandle) -> Handle_StepDimTol_DatumFeature
        assign(Handle_StepDimTol_DatumFeature self, StepDimTol_DatumFeature thePtr) -> Handle_StepDimTol_DatumFeature
        assign(Handle_StepDimTol_DatumFeature self, Handle_StepDimTol_DatumFeature theHandle) -> Handle_StepDimTol_DatumFeature

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_DatumFeature_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_DatumFeature self) -> StepDimTol_DatumFeature

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_DatumFeature_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_DatumFeature self) -> StepDimTol_DatumFeature

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_DatumFeature___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_DatumFeature self) -> StepDimTol_DatumFeature

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_DatumFeature___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_DatumFeature___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_DatumFeature___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_DatumFeature(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_DatumFeature_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_DatumFeature

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_DatumFeature self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_DatumFeature_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_DatumFeature_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_DatumFeature_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepDimTol_DatumFeature self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepRepr_ProductDefinitionShape aOfShape, StepData_Logical const aProductDefinitional)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape
        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepDimTol.Handle_StepDimTol_DatumFeature_Init(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_DatumFeature self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_DatumFeature_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepDimTol_DatumFeature self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_DatumFeature_Name(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_DatumFeature self, Handle_TCollection_HAsciiString aDescription)

        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_DatumFeature_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_DatumFeature self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_DatumFeature_Description(self, *args)


    def SetOfShape(self, *args):
        """
        SetOfShape(Handle_StepDimTol_DatumFeature self, Handle_StepRepr_ProductDefinitionShape aOfShape)

        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepDimTol.Handle_StepDimTol_DatumFeature_SetOfShape(self, *args)


    def OfShape(self, *args):
        """
        OfShape(Handle_StepDimTol_DatumFeature self) -> Handle_StepRepr_ProductDefinitionShape

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepDimTol.Handle_StepDimTol_DatumFeature_OfShape(self, *args)


    def SetProductDefinitional(self, *args):
        """
        SetProductDefinitional(Handle_StepDimTol_DatumFeature self, StepData_Logical const aProductDefinitional)

        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepDimTol.Handle_StepDimTol_DatumFeature_SetProductDefinitional(self, *args)


    def ProductDefinitional(self, *args):
        """
        ProductDefinitional(Handle_StepDimTol_DatumFeature self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepDimTol.Handle_StepDimTol_DatumFeature_ProductDefinitional(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_DatumFeature self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_DatumFeature_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_DatumFeature self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_DatumFeature self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_DatumFeature_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_DatumFeature self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_DatumFeature self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_DatumFeature_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_DatumFeature self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_DatumFeature_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_DatumFeature self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_DatumFeature_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_DatumFeature self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_DatumFeature_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_DatumFeature self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_DatumFeature_DecrementRefCounter(self, *args)

Handle_StepDimTol_DatumFeature_swigregister = _StepDimTol.Handle_StepDimTol_DatumFeature_swigregister
Handle_StepDimTol_DatumFeature_swigregister(Handle_StepDimTol_DatumFeature)

def Handle_StepDimTol_DatumFeature_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_DatumFeature_DownCast(thing)
Handle_StepDimTol_DatumFeature_DownCast = _StepDimTol.Handle_StepDimTol_DatumFeature_DownCast

class StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol(StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol(self) 
            return h


    def __init__(self, *args):
        """__init__(StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self) -> StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol"""
        this = _StepDimTol.new_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect, Handle_StepDimTol_GeometricToleranceWithDatumReference theGTWDR, Handle_StepDimTol_GeometricToleranceWithModifiers theGTWM, Handle_StepBasic_LengthMeasureWithUnit theMaxTol, StepDimTol_GeometricToleranceType const theType)
        Init(StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepBasic_MeasureWithUnit aMagnitude, StepDimTol_GeometricToleranceTarget aTolerancedShapeAspect, Handle_StepDimTol_GeometricToleranceWithDatumReference aGTWDR, Handle_StepDimTol_GeometricToleranceWithModifiers aGTWM, Handle_StepBasic_LengthMeasureWithUnit theMaxTol, StepDimTol_GeometricToleranceType const theType)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type aTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget
        :type aGTWDR: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference
        :type aGTWM: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers
        :type theMaxTol: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit
        :type theType: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceType

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_Init(self, *args)


    def SetMaxTolerance(self, *args):
        """
        SetMaxTolerance(StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self, Handle_StepBasic_LengthMeasureWithUnit theMaxTol)

        :type theMaxTol: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_SetMaxTolerance(self, *args)


    def GetMaxTolerance(self, *args):
        """
        GetMaxTolerance(StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self) -> Handle_StepBasic_LengthMeasureWithUnit

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_GetMaxTolerance(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol
StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_swigregister = _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_swigregister
StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_swigregister(StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol)

def StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_get_type_name(*args):
    """
    StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_get_type_name(*args)

def StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_get_type_descriptor(*args):
    """
    StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_get_type_descriptor(*args)

class Handle_StepDimTol_HArray1OfDatumReferenceModifier(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_HArray1OfDatumReferenceModifier self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_HArray1OfDatumReferenceModifier self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_HArray1OfDatumReferenceModifier self, StepDimTol_HArray1OfDatumReferenceModifier thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_HArray1OfDatumReferenceModifier self, Handle_StepDimTol_HArray1OfDatumReferenceModifier theHandle) -> Handle_StepDimTol_HArray1OfDatumReferenceModifier
        assign(Handle_StepDimTol_HArray1OfDatumReferenceModifier self, StepDimTol_HArray1OfDatumReferenceModifier thePtr) -> Handle_StepDimTol_HArray1OfDatumReferenceModifier
        assign(Handle_StepDimTol_HArray1OfDatumReferenceModifier self, Handle_StepDimTol_HArray1OfDatumReferenceModifier theHandle) -> Handle_StepDimTol_HArray1OfDatumReferenceModifier

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_HArray1OfDatumReferenceModifier self) -> StepDimTol_HArray1OfDatumReferenceModifier

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_HArray1OfDatumReferenceModifier self) -> StepDimTol_HArray1OfDatumReferenceModifier

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_HArray1OfDatumReferenceModifier self) -> StepDimTol_HArray1OfDatumReferenceModifier

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_HArray1OfDatumReferenceModifier(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_HArray1OfDatumReferenceModifier

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepDimTol.StepDimTol_Array1OfDatumReferenceModifier

        """
        res = _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepDimTol_HArray1OfDatumReferenceModifier self) -> NCollection_Array1_StepDimTol_DatumReferenceModifier

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_Array1OfDatumReferenceModifier

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_HArray1OfDatumReferenceModifier self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_HArray1OfDatumReferenceModifier self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_HArray1OfDatumReferenceModifier self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_HArray1OfDatumReferenceModifier self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_HArray1OfDatumReferenceModifier self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_HArray1OfDatumReferenceModifier self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_HArray1OfDatumReferenceModifier self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_HArray1OfDatumReferenceModifier self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_HArray1OfDatumReferenceModifier self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_HArray1OfDatumReferenceModifier self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier_DecrementRefCounter(self, *args)

Handle_StepDimTol_HArray1OfDatumReferenceModifier_swigregister = _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier_swigregister
Handle_StepDimTol_HArray1OfDatumReferenceModifier_swigregister(Handle_StepDimTol_HArray1OfDatumReferenceModifier)

def Handle_StepDimTol_HArray1OfDatumReferenceModifier_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier_DownCast(thing)
Handle_StepDimTol_HArray1OfDatumReferenceModifier_DownCast = _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier_DownCast

class StepDimTol_LineProfileTolerance(StepDimTol_GeometricTolerance):
    """Representation of STEP entity LineProfileTolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_LineProfileTolerance
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_LineProfileTolerance(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_LineProfileTolerance self) -> StepDimTol_LineProfileTolerance

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_LineProfileTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_LineProfileTolerance_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_LineProfileTolerance_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_LineProfileTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_LineProfileTolerance
StepDimTol_LineProfileTolerance_swigregister = _StepDimTol.StepDimTol_LineProfileTolerance_swigregister
StepDimTol_LineProfileTolerance_swigregister(StepDimTol_LineProfileTolerance)

def StepDimTol_LineProfileTolerance_get_type_name(*args):
    """
    StepDimTol_LineProfileTolerance_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_LineProfileTolerance_get_type_name(*args)

def StepDimTol_LineProfileTolerance_get_type_descriptor(*args):
    """
    StepDimTol_LineProfileTolerance_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_LineProfileTolerance_get_type_descriptor(*args)

class StepDimTol_FlatnessTolerance(StepDimTol_GeometricTolerance):
    """Representation of STEP entity FlatnessTolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_FlatnessTolerance
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_FlatnessTolerance(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_FlatnessTolerance self) -> StepDimTol_FlatnessTolerance

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_FlatnessTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_FlatnessTolerance_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_FlatnessTolerance_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_FlatnessTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_FlatnessTolerance
StepDimTol_FlatnessTolerance_swigregister = _StepDimTol.StepDimTol_FlatnessTolerance_swigregister
StepDimTol_FlatnessTolerance_swigregister(StepDimTol_FlatnessTolerance)

def StepDimTol_FlatnessTolerance_get_type_name(*args):
    """
    StepDimTol_FlatnessTolerance_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_FlatnessTolerance_get_type_name(*args)

def StepDimTol_FlatnessTolerance_get_type_descriptor(*args):
    """
    StepDimTol_FlatnessTolerance_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_FlatnessTolerance_get_type_descriptor(*args)

class Handle_StepDimTol_ToleranceZone(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_ToleranceZone self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZone_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_ToleranceZone self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZone_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_ToleranceZone self, StepDimTol_ToleranceZone thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZone_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_ToleranceZone self, Handle_StepDimTol_ToleranceZone theHandle) -> Handle_StepDimTol_ToleranceZone
        assign(Handle_StepDimTol_ToleranceZone self, StepDimTol_ToleranceZone thePtr) -> Handle_StepDimTol_ToleranceZone
        assign(Handle_StepDimTol_ToleranceZone self, Handle_StepDimTol_ToleranceZone theHandle) -> Handle_StepDimTol_ToleranceZone

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZone_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_ToleranceZone self) -> StepDimTol_ToleranceZone

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZone_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_ToleranceZone self) -> StepDimTol_ToleranceZone

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZone___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_ToleranceZone self) -> StepDimTol_ToleranceZone

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZone___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_ToleranceZone___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_ToleranceZone___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_ToleranceZone(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_ToleranceZone_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_ToleranceZone

    def Init(self, *args):
        """
        Init(Handle_StepDimTol_ToleranceZone self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepRepr_ProductDefinitionShape theOfShape, StepData_Logical const theProductDefinitional, Handle_StepDimTol_HArray1OfToleranceZoneTarget theDefiningTolerance, Handle_StepDimTol_ToleranceZoneForm theForm)

        Initialize all fields (own and inherited)

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theOfShape: OCC.wrapper.StepDimTol.Handle_StepRepr_ProductDefinitionShape
        :type theProductDefinitional: OCC.wrapper.StepData.StepData_Logical
        :type theDefiningTolerance: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfToleranceZoneTarget
        :type theForm: OCC.wrapper.StepDimTol.Handle_StepDimTol_ToleranceZoneForm

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZone_Init(self, *args)


    def DefiningTolerance(self, *args):
        """
        DefiningTolerance(Handle_StepDimTol_ToleranceZone self) -> Handle_StepDimTol_HArray1OfToleranceZoneTarget

        Returns field DefiningTolerance

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfToleranceZoneTarget

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZone_DefiningTolerance(self, *args)


    def SetDefiningTolerance(self, *args):
        """
        SetDefiningTolerance(Handle_StepDimTol_ToleranceZone self, Handle_StepDimTol_HArray1OfToleranceZoneTarget theDefiningTolerance)

        Set field DefiningTolerance

        :type theDefiningTolerance: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfToleranceZoneTarget

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZone_SetDefiningTolerance(self, *args)


    def NbDefiningTolerances(self, *args):
        """
        NbDefiningTolerances(Handle_StepDimTol_ToleranceZone self) -> Standard_Integer

        Returns number of Defining Tolerances

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZone_NbDefiningTolerances(self, *args)


    def DefiningToleranceValue(self, *args):
        """
        DefiningToleranceValue(Handle_StepDimTol_ToleranceZone self, Standard_Integer const theNum) -> StepDimTol_ToleranceZoneTarget

        Returns Defining Tolerance with the given number

        :type theNum: int
        :rtype: OCC.wrapper.StepDimTol.StepDimTol_ToleranceZoneTarget

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZone_DefiningToleranceValue(self, *args)


    def SetDefiningToleranceValue(self, *args):
        """
        SetDefiningToleranceValue(Handle_StepDimTol_ToleranceZone self, Standard_Integer const theNum, StepDimTol_ToleranceZoneTarget theItem)

        Sets Defining Tolerance with given number

        :type theNum: int
        :type theItem: OCC.wrapper.StepDimTol.StepDimTol_ToleranceZoneTarget

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZone_SetDefiningToleranceValue(self, *args)


    def Form(self, *args):
        """
        Form(Handle_StepDimTol_ToleranceZone self) -> Handle_StepDimTol_ToleranceZoneForm

        Returns field Form

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_ToleranceZoneForm

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZone_Form(self, *args)


    def SetForm(self, *args):
        """
        SetForm(Handle_StepDimTol_ToleranceZone self, Handle_StepDimTol_ToleranceZoneForm theForm)

        Set field Form

        :type theForm: OCC.wrapper.StepDimTol.Handle_StepDimTol_ToleranceZoneForm

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZone_SetForm(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_ToleranceZone self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZone_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_ToleranceZone_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_ToleranceZone_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_ToleranceZone self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZone_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepDimTol_ToleranceZone self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZone_Name(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_ToleranceZone self, Handle_TCollection_HAsciiString aDescription)

        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZone_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_ToleranceZone self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZone_Description(self, *args)


    def SetOfShape(self, *args):
        """
        SetOfShape(Handle_StepDimTol_ToleranceZone self, Handle_StepRepr_ProductDefinitionShape aOfShape)

        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZone_SetOfShape(self, *args)


    def OfShape(self, *args):
        """
        OfShape(Handle_StepDimTol_ToleranceZone self) -> Handle_StepRepr_ProductDefinitionShape

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZone_OfShape(self, *args)


    def SetProductDefinitional(self, *args):
        """
        SetProductDefinitional(Handle_StepDimTol_ToleranceZone self, StepData_Logical const aProductDefinitional)

        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZone_SetProductDefinitional(self, *args)


    def ProductDefinitional(self, *args):
        """
        ProductDefinitional(Handle_StepDimTol_ToleranceZone self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZone_ProductDefinitional(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_ToleranceZone self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZone_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_ToleranceZone self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_ToleranceZone self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZone_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_ToleranceZone self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_ToleranceZone self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZone_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_ToleranceZone self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZone_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_ToleranceZone self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZone_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_ToleranceZone self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZone_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_ToleranceZone self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZone_DecrementRefCounter(self, *args)

Handle_StepDimTol_ToleranceZone_swigregister = _StepDimTol.Handle_StepDimTol_ToleranceZone_swigregister
Handle_StepDimTol_ToleranceZone_swigregister(Handle_StepDimTol_ToleranceZone)

def Handle_StepDimTol_ToleranceZone_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_ToleranceZone_DownCast(thing)
Handle_StepDimTol_ToleranceZone_DownCast = _StepDimTol.Handle_StepDimTol_ToleranceZone_DownCast

class StepDimTol_RunoutZoneOrientation(Standard.Standard_Transient):
    """Added for Dimensional Tolerances"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_RunoutZoneOrientation
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_RunoutZoneOrientation(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_RunoutZoneOrientation self) -> StepDimTol_RunoutZoneOrientation

        Added for Dimensional Tolerances
        """
        this = _StepDimTol.new_StepDimTol_RunoutZoneOrientation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepDimTol_RunoutZoneOrientation self, Handle_StepBasic_PlaneAngleMeasureWithUnit theAngle)

        Init all field own and inherited

        :type theAngle: OCC.wrapper.StepBasic.Handle_StepBasic_PlaneAngleMeasureWithUnit

        """
        return _StepDimTol.StepDimTol_RunoutZoneOrientation_Init(self, *args)


    def Angle(self, *args):
        """
        Angle(StepDimTol_RunoutZoneOrientation self) -> Handle_StepBasic_PlaneAngleMeasureWithUnit

        Returns field Angle

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_PlaneAngleMeasureWithUnit

        """
        return _StepDimTol.StepDimTol_RunoutZoneOrientation_Angle(self, *args)


    def SetAngle(self, *args):
        """
        SetAngle(StepDimTol_RunoutZoneOrientation self, Handle_StepBasic_PlaneAngleMeasureWithUnit theAngle)

        Set field Angle

        :type theAngle: OCC.wrapper.StepBasic.Handle_StepBasic_PlaneAngleMeasureWithUnit

        """
        return _StepDimTol.StepDimTol_RunoutZoneOrientation_SetAngle(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_RunoutZoneOrientation_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_RunoutZoneOrientation_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_RunoutZoneOrientation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_RunoutZoneOrientation
StepDimTol_RunoutZoneOrientation_swigregister = _StepDimTol.StepDimTol_RunoutZoneOrientation_swigregister
StepDimTol_RunoutZoneOrientation_swigregister(StepDimTol_RunoutZoneOrientation)

def StepDimTol_RunoutZoneOrientation_get_type_name(*args):
    """
    StepDimTol_RunoutZoneOrientation_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_RunoutZoneOrientation_get_type_name(*args)

def StepDimTol_RunoutZoneOrientation_get_type_descriptor(*args):
    """
    StepDimTol_RunoutZoneOrientation_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_RunoutZoneOrientation_get_type_descriptor(*args)

class StepDimTol_NonUniformZoneDefinition(StepDimTol_ToleranceZoneDefinition):
    """Representation of STEP entity NonUniformZoneDefinition"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_NonUniformZoneDefinition
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_NonUniformZoneDefinition(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_NonUniformZoneDefinition self) -> StepDimTol_NonUniformZoneDefinition

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_NonUniformZoneDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_NonUniformZoneDefinition_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_NonUniformZoneDefinition_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_NonUniformZoneDefinition_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_NonUniformZoneDefinition
StepDimTol_NonUniformZoneDefinition_swigregister = _StepDimTol.StepDimTol_NonUniformZoneDefinition_swigregister
StepDimTol_NonUniformZoneDefinition_swigregister(StepDimTol_NonUniformZoneDefinition)

def StepDimTol_NonUniformZoneDefinition_get_type_name(*args):
    """
    StepDimTol_NonUniformZoneDefinition_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_NonUniformZoneDefinition_get_type_name(*args)

def StepDimTol_NonUniformZoneDefinition_get_type_descriptor(*args):
    """
    StepDimTol_NonUniformZoneDefinition_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_NonUniformZoneDefinition_get_type_descriptor(*args)

class Handle_StepDimTol_LineProfileTolerance(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_LineProfileTolerance self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_LineProfileTolerance_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_LineProfileTolerance self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_LineProfileTolerance_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_LineProfileTolerance self, StepDimTol_LineProfileTolerance thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_LineProfileTolerance_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_LineProfileTolerance self, Handle_StepDimTol_LineProfileTolerance theHandle) -> Handle_StepDimTol_LineProfileTolerance
        assign(Handle_StepDimTol_LineProfileTolerance self, StepDimTol_LineProfileTolerance thePtr) -> Handle_StepDimTol_LineProfileTolerance
        assign(Handle_StepDimTol_LineProfileTolerance self, Handle_StepDimTol_LineProfileTolerance theHandle) -> Handle_StepDimTol_LineProfileTolerance

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_LineProfileTolerance_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_LineProfileTolerance self) -> StepDimTol_LineProfileTolerance

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_LineProfileTolerance_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_LineProfileTolerance self) -> StepDimTol_LineProfileTolerance

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_LineProfileTolerance___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_LineProfileTolerance self) -> StepDimTol_LineProfileTolerance

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_LineProfileTolerance___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_LineProfileTolerance___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_LineProfileTolerance___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_LineProfileTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_LineProfileTolerance_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_LineProfileTolerance

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_LineProfileTolerance self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_LineProfileTolerance_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_LineProfileTolerance_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_LineProfileTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepDimTol_LineProfileTolerance self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect)
        Init(Handle_StepDimTol_LineProfileTolerance self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect)

        Initialize all fields (own and inherited) AP242

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_LineProfileTolerance_Init(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepDimTol_LineProfileTolerance self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_LineProfileTolerance_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_LineProfileTolerance self, Handle_TCollection_HAsciiString theName)

        Set field Name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_LineProfileTolerance_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_LineProfileTolerance self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_LineProfileTolerance_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_LineProfileTolerance self, Handle_TCollection_HAsciiString theDescription)

        Set field Description

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_LineProfileTolerance_SetDescription(self, *args)


    def Magnitude(self, *args):
        """
        Magnitude(Handle_StepDimTol_LineProfileTolerance self) -> Handle_StepBasic_MeasureWithUnit

        Returns field Magnitude

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_LineProfileTolerance_Magnitude(self, *args)


    def SetMagnitude(self, *args):
        """
        SetMagnitude(Handle_StepDimTol_LineProfileTolerance self, Handle_StepBasic_MeasureWithUnit theMagnitude)

        Set field Magnitude

        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_LineProfileTolerance_SetMagnitude(self, *args)


    def TolerancedShapeAspect(self, *args):
        """
        TolerancedShapeAspect(Handle_StepDimTol_LineProfileTolerance self) -> StepDimTol_GeometricToleranceTarget

        Returns field TolerancedShapeAspect
        Note: in AP214(203) type of this attribute can be only StepRepr_ShapeAspect

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_LineProfileTolerance_TolerancedShapeAspect(self, *args)


    def SetTolerancedShapeAspect(self, *args):
        """
        SetTolerancedShapeAspect(Handle_StepDimTol_LineProfileTolerance self, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect)
        SetTolerancedShapeAspect(Handle_StepDimTol_LineProfileTolerance self, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect)

        Set field TolerancedShapeAspect AP242

        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_LineProfileTolerance_SetTolerancedShapeAspect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_LineProfileTolerance self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_LineProfileTolerance_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_LineProfileTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_LineProfileTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_LineProfileTolerance_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_LineProfileTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_LineProfileTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_LineProfileTolerance_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_LineProfileTolerance self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_LineProfileTolerance_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_LineProfileTolerance self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_LineProfileTolerance_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_LineProfileTolerance self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_LineProfileTolerance_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_LineProfileTolerance self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_LineProfileTolerance_DecrementRefCounter(self, *args)

Handle_StepDimTol_LineProfileTolerance_swigregister = _StepDimTol.Handle_StepDimTol_LineProfileTolerance_swigregister
Handle_StepDimTol_LineProfileTolerance_swigregister(Handle_StepDimTol_LineProfileTolerance)

def Handle_StepDimTol_LineProfileTolerance_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_LineProfileTolerance_DownCast(thing)
Handle_StepDimTol_LineProfileTolerance_DownCast = _StepDimTol.Handle_StepDimTol_LineProfileTolerance_DownCast

class Handle_StepDimTol_HArray1OfGeometricToleranceModifier(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_HArray1OfGeometricToleranceModifier self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_HArray1OfGeometricToleranceModifier self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_HArray1OfGeometricToleranceModifier self, StepDimTol_HArray1OfGeometricToleranceModifier thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_HArray1OfGeometricToleranceModifier self, Handle_StepDimTol_HArray1OfGeometricToleranceModifier theHandle) -> Handle_StepDimTol_HArray1OfGeometricToleranceModifier
        assign(Handle_StepDimTol_HArray1OfGeometricToleranceModifier self, StepDimTol_HArray1OfGeometricToleranceModifier thePtr) -> Handle_StepDimTol_HArray1OfGeometricToleranceModifier
        assign(Handle_StepDimTol_HArray1OfGeometricToleranceModifier self, Handle_StepDimTol_HArray1OfGeometricToleranceModifier theHandle) -> Handle_StepDimTol_HArray1OfGeometricToleranceModifier

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_HArray1OfGeometricToleranceModifier self) -> StepDimTol_HArray1OfGeometricToleranceModifier

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_HArray1OfGeometricToleranceModifier self) -> StepDimTol_HArray1OfGeometricToleranceModifier

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_HArray1OfGeometricToleranceModifier self) -> StepDimTol_HArray1OfGeometricToleranceModifier

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_HArray1OfGeometricToleranceModifier(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_HArray1OfGeometricToleranceModifier

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepDimTol.StepDimTol_Array1OfGeometricToleranceModifier

        """
        res = _StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepDimTol_HArray1OfGeometricToleranceModifier self) -> NCollection_Array1_StepDimTol_GeometricToleranceModifier

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_Array1OfGeometricToleranceModifier

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_HArray1OfGeometricToleranceModifier self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_HArray1OfGeometricToleranceModifier self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_HArray1OfGeometricToleranceModifier self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_HArray1OfGeometricToleranceModifier self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_HArray1OfGeometricToleranceModifier self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_HArray1OfGeometricToleranceModifier self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_HArray1OfGeometricToleranceModifier self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_HArray1OfGeometricToleranceModifier self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_HArray1OfGeometricToleranceModifier self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_HArray1OfGeometricToleranceModifier self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier_DecrementRefCounter(self, *args)

Handle_StepDimTol_HArray1OfGeometricToleranceModifier_swigregister = _StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier_swigregister
Handle_StepDimTol_HArray1OfGeometricToleranceModifier_swigregister(Handle_StepDimTol_HArray1OfGeometricToleranceModifier)

def Handle_StepDimTol_HArray1OfGeometricToleranceModifier_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier_DownCast(thing)
Handle_StepDimTol_HArray1OfGeometricToleranceModifier_DownCast = _StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier_DownCast

class Handle_StepDimTol_GeometricToleranceWithModifiers(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_GeometricToleranceWithModifiers self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_GeometricToleranceWithModifiers self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_GeometricToleranceWithModifiers self, StepDimTol_GeometricToleranceWithModifiers thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_GeometricToleranceWithModifiers self, Handle_StepDimTol_GeometricToleranceWithModifiers theHandle) -> Handle_StepDimTol_GeometricToleranceWithModifiers
        assign(Handle_StepDimTol_GeometricToleranceWithModifiers self, StepDimTol_GeometricToleranceWithModifiers thePtr) -> Handle_StepDimTol_GeometricToleranceWithModifiers
        assign(Handle_StepDimTol_GeometricToleranceWithModifiers self, Handle_StepDimTol_GeometricToleranceWithModifiers theHandle) -> Handle_StepDimTol_GeometricToleranceWithModifiers

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_GeometricToleranceWithModifiers self) -> StepDimTol_GeometricToleranceWithModifiers

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_GeometricToleranceWithModifiers self) -> StepDimTol_GeometricToleranceWithModifiers

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_GeometricToleranceWithModifiers self) -> StepDimTol_GeometricToleranceWithModifiers

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_GeometricToleranceWithModifiers(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_GeometricToleranceWithModifiers

    def Init(self, *args):
        """
        Init(Handle_StepDimTol_GeometricToleranceWithModifiers self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect, Handle_StepDimTol_HArray1OfGeometricToleranceModifier theModifiers)

        Initialize all fields (own and inherited)

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget
        :type theModifiers: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers_Init(self, *args)


    def Modifiers(self, *args):
        """
        Modifiers(Handle_StepDimTol_GeometricToleranceWithModifiers self) -> Handle_StepDimTol_HArray1OfGeometricToleranceModifier

        Returns field Modifiers

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers_Modifiers(self, *args)


    def SetModifiers(self, *args):
        """
        SetModifiers(Handle_StepDimTol_GeometricToleranceWithModifiers self, Handle_StepDimTol_HArray1OfGeometricToleranceModifier theModifiers)

        Set field Modifiers

        :type theModifiers: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers_SetModifiers(self, *args)


    def NbModifiers(self, *args):
        """
        NbModifiers(Handle_StepDimTol_GeometricToleranceWithModifiers self) -> Standard_Integer

        Returns number of modifiers

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers_NbModifiers(self, *args)


    def ModifierValue(self, *args):
        """
        ModifierValue(Handle_StepDimTol_GeometricToleranceWithModifiers self, Standard_Integer const theNum) -> StepDimTol_GeometricToleranceModifier

        Returns modifier with the given number

        :type theNum: int
        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceModifier

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers_ModifierValue(self, *args)


    def SetModifierValue(self, *args):
        """
        SetModifierValue(Handle_StepDimTol_GeometricToleranceWithModifiers self, Standard_Integer const theNum, StepDimTol_GeometricToleranceModifier const theItem)

        Sets modifier with given number

        :type theNum: int
        :type theItem: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceModifier

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers_SetModifierValue(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_GeometricToleranceWithModifiers self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Name(self, *args):
        """
        Name(Handle_StepDimTol_GeometricToleranceWithModifiers self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_GeometricToleranceWithModifiers self, Handle_TCollection_HAsciiString theName)

        Set field Name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_GeometricToleranceWithModifiers self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_GeometricToleranceWithModifiers self, Handle_TCollection_HAsciiString theDescription)

        Set field Description

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers_SetDescription(self, *args)


    def Magnitude(self, *args):
        """
        Magnitude(Handle_StepDimTol_GeometricToleranceWithModifiers self) -> Handle_StepBasic_MeasureWithUnit

        Returns field Magnitude

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers_Magnitude(self, *args)


    def SetMagnitude(self, *args):
        """
        SetMagnitude(Handle_StepDimTol_GeometricToleranceWithModifiers self, Handle_StepBasic_MeasureWithUnit theMagnitude)

        Set field Magnitude

        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers_SetMagnitude(self, *args)


    def TolerancedShapeAspect(self, *args):
        """
        TolerancedShapeAspect(Handle_StepDimTol_GeometricToleranceWithModifiers self) -> StepDimTol_GeometricToleranceTarget

        Returns field TolerancedShapeAspect
        Note: in AP214(203) type of this attribute can be only StepRepr_ShapeAspect

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers_TolerancedShapeAspect(self, *args)


    def SetTolerancedShapeAspect(self, *args):
        """
        SetTolerancedShapeAspect(Handle_StepDimTol_GeometricToleranceWithModifiers self, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect)
        SetTolerancedShapeAspect(Handle_StepDimTol_GeometricToleranceWithModifiers self, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect)

        Set field TolerancedShapeAspect AP242

        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers_SetTolerancedShapeAspect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_GeometricToleranceWithModifiers self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_GeometricToleranceWithModifiers self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_GeometricToleranceWithModifiers self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_GeometricToleranceWithModifiers self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_GeometricToleranceWithModifiers self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_GeometricToleranceWithModifiers self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_GeometricToleranceWithModifiers self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_GeometricToleranceWithModifiers self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_GeometricToleranceWithModifiers self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers_DecrementRefCounter(self, *args)

Handle_StepDimTol_GeometricToleranceWithModifiers_swigregister = _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers_swigregister
Handle_StepDimTol_GeometricToleranceWithModifiers_swigregister(Handle_StepDimTol_GeometricToleranceWithModifiers)

def Handle_StepDimTol_GeometricToleranceWithModifiers_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers_DownCast(thing)
Handle_StepDimTol_GeometricToleranceWithModifiers_DownCast = _StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers_DownCast

class StepDimTol_SymmetryTolerance(StepDimTol_GeometricToleranceWithDatumReference):
    """Representation of STEP entity SymmetryTolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_SymmetryTolerance
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_SymmetryTolerance(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_SymmetryTolerance self) -> StepDimTol_SymmetryTolerance

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_SymmetryTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_SymmetryTolerance_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_SymmetryTolerance_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_SymmetryTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_SymmetryTolerance
StepDimTol_SymmetryTolerance_swigregister = _StepDimTol.StepDimTol_SymmetryTolerance_swigregister
StepDimTol_SymmetryTolerance_swigregister(StepDimTol_SymmetryTolerance)

def StepDimTol_SymmetryTolerance_get_type_name(*args):
    """
    StepDimTol_SymmetryTolerance_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_SymmetryTolerance_get_type_name(*args)

def StepDimTol_SymmetryTolerance_get_type_descriptor(*args):
    """
    StepDimTol_SymmetryTolerance_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_SymmetryTolerance_get_type_descriptor(*args)

class Handle_StepDimTol_HArray1OfDatumReferenceCompartment(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_HArray1OfDatumReferenceCompartment self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceCompartment_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_HArray1OfDatumReferenceCompartment self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceCompartment_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_HArray1OfDatumReferenceCompartment self, StepDimTol_HArray1OfDatumReferenceCompartment thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceCompartment_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_HArray1OfDatumReferenceCompartment self, Handle_StepDimTol_HArray1OfDatumReferenceCompartment theHandle) -> Handle_StepDimTol_HArray1OfDatumReferenceCompartment
        assign(Handle_StepDimTol_HArray1OfDatumReferenceCompartment self, StepDimTol_HArray1OfDatumReferenceCompartment thePtr) -> Handle_StepDimTol_HArray1OfDatumReferenceCompartment
        assign(Handle_StepDimTol_HArray1OfDatumReferenceCompartment self, Handle_StepDimTol_HArray1OfDatumReferenceCompartment theHandle) -> Handle_StepDimTol_HArray1OfDatumReferenceCompartment

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceCompartment_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_HArray1OfDatumReferenceCompartment self) -> StepDimTol_HArray1OfDatumReferenceCompartment

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceCompartment_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_HArray1OfDatumReferenceCompartment self) -> StepDimTol_HArray1OfDatumReferenceCompartment

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceCompartment___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_HArray1OfDatumReferenceCompartment self) -> StepDimTol_HArray1OfDatumReferenceCompartment

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceCompartment___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceCompartment___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceCompartment___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_HArray1OfDatumReferenceCompartment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceCompartment_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_HArray1OfDatumReferenceCompartment

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepDimTol.StepDimTol_Array1OfDatumReferenceCompartment

        """
        res = _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceCompartment_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepDimTol_HArray1OfDatumReferenceCompartment self) -> NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_Array1OfDatumReferenceCompartment

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceCompartment_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_HArray1OfDatumReferenceCompartment self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceCompartment_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceCompartment_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceCompartment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_HArray1OfDatumReferenceCompartment self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceCompartment_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_HArray1OfDatumReferenceCompartment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_HArray1OfDatumReferenceCompartment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceCompartment_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_HArray1OfDatumReferenceCompartment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_HArray1OfDatumReferenceCompartment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceCompartment_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_HArray1OfDatumReferenceCompartment self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceCompartment_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_HArray1OfDatumReferenceCompartment self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceCompartment_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_HArray1OfDatumReferenceCompartment self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceCompartment_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_HArray1OfDatumReferenceCompartment self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceCompartment_DecrementRefCounter(self, *args)

Handle_StepDimTol_HArray1OfDatumReferenceCompartment_swigregister = _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceCompartment_swigregister
Handle_StepDimTol_HArray1OfDatumReferenceCompartment_swigregister(Handle_StepDimTol_HArray1OfDatumReferenceCompartment)

def Handle_StepDimTol_HArray1OfDatumReferenceCompartment_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceCompartment_DownCast(thing)
Handle_StepDimTol_HArray1OfDatumReferenceCompartment_DownCast = _StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceCompartment_DownCast

class Handle_StepDimTol_GeoTolAndGeoTolWthMod(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_GeoTolAndGeoTolWthMod self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_GeoTolAndGeoTolWthMod self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_GeoTolAndGeoTolWthMod self, StepDimTol_GeoTolAndGeoTolWthMod thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_GeoTolAndGeoTolWthMod self, Handle_StepDimTol_GeoTolAndGeoTolWthMod theHandle) -> Handle_StepDimTol_GeoTolAndGeoTolWthMod
        assign(Handle_StepDimTol_GeoTolAndGeoTolWthMod self, StepDimTol_GeoTolAndGeoTolWthMod thePtr) -> Handle_StepDimTol_GeoTolAndGeoTolWthMod
        assign(Handle_StepDimTol_GeoTolAndGeoTolWthMod self, Handle_StepDimTol_GeoTolAndGeoTolWthMod theHandle) -> Handle_StepDimTol_GeoTolAndGeoTolWthMod

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_GeoTolAndGeoTolWthMod self) -> StepDimTol_GeoTolAndGeoTolWthMod

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_GeoTolAndGeoTolWthMod self) -> StepDimTol_GeoTolAndGeoTolWthMod

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_GeoTolAndGeoTolWthMod self) -> StepDimTol_GeoTolAndGeoTolWthMod

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_GeoTolAndGeoTolWthMod(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_GeoTolAndGeoTolWthMod

    def Init(self, *args):
        """
        Init(Handle_StepDimTol_GeoTolAndGeoTolWthMod self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect, Handle_StepDimTol_GeometricToleranceWithModifiers theGTWM, StepDimTol_GeometricToleranceType const theType)
        Init(Handle_StepDimTol_GeoTolAndGeoTolWthMod self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepBasic_MeasureWithUnit aMagnitude, StepDimTol_GeometricToleranceTarget aTolerancedShapeAspect, Handle_StepDimTol_GeometricToleranceWithModifiers aGTWM, StepDimTol_GeometricToleranceType const theType)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type aTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget
        :type aGTWM: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers
        :type theType: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceType

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod_Init(self, *args)


    def SetGeometricToleranceWithModifiers(self, *args):
        """
        SetGeometricToleranceWithModifiers(Handle_StepDimTol_GeoTolAndGeoTolWthMod self, Handle_StepDimTol_GeometricToleranceWithModifiers theGTWM)

        :type theGTWM: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod_SetGeometricToleranceWithModifiers(self, *args)


    def GetGeometricToleranceWithModifiers(self, *args):
        """
        GetGeometricToleranceWithModifiers(Handle_StepDimTol_GeoTolAndGeoTolWthMod self) -> Handle_StepDimTol_GeometricToleranceWithModifiers

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod_GetGeometricToleranceWithModifiers(self, *args)


    def SetGeometricToleranceType(self, *args):
        """
        SetGeometricToleranceType(Handle_StepDimTol_GeoTolAndGeoTolWthMod self, StepDimTol_GeometricToleranceType const theType)

        :type theType: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceType

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod_SetGeometricToleranceType(self, *args)


    def GetToleranceType(self, *args):
        """
        GetToleranceType(Handle_StepDimTol_GeoTolAndGeoTolWthMod self) -> StepDimTol_GeometricToleranceType

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceType

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod_GetToleranceType(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_GeoTolAndGeoTolWthMod self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Name(self, *args):
        """
        Name(Handle_StepDimTol_GeoTolAndGeoTolWthMod self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_GeoTolAndGeoTolWthMod self, Handle_TCollection_HAsciiString theName)

        Set field Name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_GeoTolAndGeoTolWthMod self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_GeoTolAndGeoTolWthMod self, Handle_TCollection_HAsciiString theDescription)

        Set field Description

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod_SetDescription(self, *args)


    def Magnitude(self, *args):
        """
        Magnitude(Handle_StepDimTol_GeoTolAndGeoTolWthMod self) -> Handle_StepBasic_MeasureWithUnit

        Returns field Magnitude

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod_Magnitude(self, *args)


    def SetMagnitude(self, *args):
        """
        SetMagnitude(Handle_StepDimTol_GeoTolAndGeoTolWthMod self, Handle_StepBasic_MeasureWithUnit theMagnitude)

        Set field Magnitude

        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod_SetMagnitude(self, *args)


    def TolerancedShapeAspect(self, *args):
        """
        TolerancedShapeAspect(Handle_StepDimTol_GeoTolAndGeoTolWthMod self) -> StepDimTol_GeometricToleranceTarget

        Returns field TolerancedShapeAspect
        Note: in AP214(203) type of this attribute can be only StepRepr_ShapeAspect

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod_TolerancedShapeAspect(self, *args)


    def SetTolerancedShapeAspect(self, *args):
        """
        SetTolerancedShapeAspect(Handle_StepDimTol_GeoTolAndGeoTolWthMod self, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect)
        SetTolerancedShapeAspect(Handle_StepDimTol_GeoTolAndGeoTolWthMod self, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect)

        Set field TolerancedShapeAspect AP242

        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod_SetTolerancedShapeAspect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_GeoTolAndGeoTolWthMod self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_GeoTolAndGeoTolWthMod self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_GeoTolAndGeoTolWthMod self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_GeoTolAndGeoTolWthMod self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_GeoTolAndGeoTolWthMod self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_GeoTolAndGeoTolWthMod self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_GeoTolAndGeoTolWthMod self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_GeoTolAndGeoTolWthMod self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_GeoTolAndGeoTolWthMod self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod_DecrementRefCounter(self, *args)

Handle_StepDimTol_GeoTolAndGeoTolWthMod_swigregister = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod_swigregister
Handle_StepDimTol_GeoTolAndGeoTolWthMod_swigregister(Handle_StepDimTol_GeoTolAndGeoTolWthMod)

def Handle_StepDimTol_GeoTolAndGeoTolWthMod_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod_DownCast(thing)
Handle_StepDimTol_GeoTolAndGeoTolWthMod_DownCast = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod_DownCast

class Handle_StepDimTol_GeneralDatumReference(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_GeneralDatumReference self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_GeneralDatumReference_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_GeneralDatumReference self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_GeneralDatumReference_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_GeneralDatumReference self, StepDimTol_GeneralDatumReference thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeneralDatumReference_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_GeneralDatumReference self, Handle_StepDimTol_GeneralDatumReference theHandle) -> Handle_StepDimTol_GeneralDatumReference
        assign(Handle_StepDimTol_GeneralDatumReference self, StepDimTol_GeneralDatumReference thePtr) -> Handle_StepDimTol_GeneralDatumReference
        assign(Handle_StepDimTol_GeneralDatumReference self, Handle_StepDimTol_GeneralDatumReference theHandle) -> Handle_StepDimTol_GeneralDatumReference

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_GeneralDatumReference_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_GeneralDatumReference self) -> StepDimTol_GeneralDatumReference

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeneralDatumReference_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_GeneralDatumReference self) -> StepDimTol_GeneralDatumReference

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeneralDatumReference___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_GeneralDatumReference self) -> StepDimTol_GeneralDatumReference

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_GeneralDatumReference___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_GeneralDatumReference___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_GeneralDatumReference___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_GeneralDatumReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_GeneralDatumReference_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_GeneralDatumReference

    def Init(self, *args):
        """
        Init(Handle_StepDimTol_GeneralDatumReference self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepRepr_ProductDefinitionShape theOfShape, StepData_Logical const theProductDefinitional, StepDimTol_DatumOrCommonDatum theBase, Standard_Boolean const theHasModifiers, Handle_StepDimTol_HArray1OfDatumReferenceModifier theModifiers)

        Initialize all fields (own and inherited)

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theOfShape: OCC.wrapper.StepDimTol.Handle_StepRepr_ProductDefinitionShape
        :type theProductDefinitional: OCC.wrapper.StepData.StepData_Logical
        :type theBase: OCC.wrapper.StepDimTol.StepDimTol_DatumOrCommonDatum
        :type theHasModifiers: bool
        :type theModifiers: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier

        """
        return _StepDimTol.Handle_StepDimTol_GeneralDatumReference_Init(self, *args)


    def Base(self, *args):
        """
        Base(Handle_StepDimTol_GeneralDatumReference self) -> StepDimTol_DatumOrCommonDatum

        Returns field Base

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_DatumOrCommonDatum

        """
        return _StepDimTol.Handle_StepDimTol_GeneralDatumReference_Base(self, *args)


    def SetBase(self, *args):
        """
        SetBase(Handle_StepDimTol_GeneralDatumReference self, StepDimTol_DatumOrCommonDatum theBase)

        Set field Base

        :type theBase: OCC.wrapper.StepDimTol.StepDimTol_DatumOrCommonDatum

        """
        return _StepDimTol.Handle_StepDimTol_GeneralDatumReference_SetBase(self, *args)


    def HasModifiers(self, *args):
        """
        HasModifiers(Handle_StepDimTol_GeneralDatumReference self) -> Standard_Boolean

        Indicates is field Modifiers exist

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_GeneralDatumReference_HasModifiers(self, *args)


    def Modifiers(self, *args):
        """
        Modifiers(Handle_StepDimTol_GeneralDatumReference self) -> Handle_StepDimTol_HArray1OfDatumReferenceModifier

        Returns field Modifiers

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier

        """
        return _StepDimTol.Handle_StepDimTol_GeneralDatumReference_Modifiers(self, *args)


    def SetModifiers(self, *args):
        """
        SetModifiers(Handle_StepDimTol_GeneralDatumReference self, Handle_StepDimTol_HArray1OfDatumReferenceModifier theModifiers)

        Set field Modifiers

        :type theModifiers: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier

        """
        return _StepDimTol.Handle_StepDimTol_GeneralDatumReference_SetModifiers(self, *args)


    def NbModifiers(self, *args):
        """
        NbModifiers(Handle_StepDimTol_GeneralDatumReference self) -> Standard_Integer

        Returns number of Modifiers

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_GeneralDatumReference_NbModifiers(self, *args)


    def ModifiersValue(self, *args):
        """
        ModifiersValue(Handle_StepDimTol_GeneralDatumReference self, Standard_Integer const theNum) -> StepDimTol_DatumReferenceModifier
        ModifiersValue(Handle_StepDimTol_GeneralDatumReference self, Standard_Integer const theNum, StepDimTol_DatumReferenceModifier theItem)

        Sets Modifiers with given number

        :type theNum: int
        :type theItem: OCC.wrapper.StepDimTol.StepDimTol_DatumReferenceModifier

        """
        return _StepDimTol.Handle_StepDimTol_GeneralDatumReference_ModifiersValue(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_GeneralDatumReference self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_GeneralDatumReference_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_GeneralDatumReference_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_GeneralDatumReference_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_GeneralDatumReference self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeneralDatumReference_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepDimTol_GeneralDatumReference self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeneralDatumReference_Name(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_GeneralDatumReference self, Handle_TCollection_HAsciiString aDescription)

        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeneralDatumReference_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_GeneralDatumReference self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeneralDatumReference_Description(self, *args)


    def SetOfShape(self, *args):
        """
        SetOfShape(Handle_StepDimTol_GeneralDatumReference self, Handle_StepRepr_ProductDefinitionShape aOfShape)

        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepDimTol.Handle_StepDimTol_GeneralDatumReference_SetOfShape(self, *args)


    def OfShape(self, *args):
        """
        OfShape(Handle_StepDimTol_GeneralDatumReference self) -> Handle_StepRepr_ProductDefinitionShape

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepDimTol.Handle_StepDimTol_GeneralDatumReference_OfShape(self, *args)


    def SetProductDefinitional(self, *args):
        """
        SetProductDefinitional(Handle_StepDimTol_GeneralDatumReference self, StepData_Logical const aProductDefinitional)

        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepDimTol.Handle_StepDimTol_GeneralDatumReference_SetProductDefinitional(self, *args)


    def ProductDefinitional(self, *args):
        """
        ProductDefinitional(Handle_StepDimTol_GeneralDatumReference self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepDimTol.Handle_StepDimTol_GeneralDatumReference_ProductDefinitional(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_GeneralDatumReference self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_GeneralDatumReference_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_GeneralDatumReference self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_GeneralDatumReference self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_GeneralDatumReference_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_GeneralDatumReference self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_GeneralDatumReference self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_GeneralDatumReference_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_GeneralDatumReference self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_GeneralDatumReference_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_GeneralDatumReference self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_GeneralDatumReference_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_GeneralDatumReference self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_GeneralDatumReference_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_GeneralDatumReference self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_GeneralDatumReference_DecrementRefCounter(self, *args)

Handle_StepDimTol_GeneralDatumReference_swigregister = _StepDimTol.Handle_StepDimTol_GeneralDatumReference_swigregister
Handle_StepDimTol_GeneralDatumReference_swigregister(Handle_StepDimTol_GeneralDatumReference)

def Handle_StepDimTol_GeneralDatumReference_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_GeneralDatumReference_DownCast(thing)
Handle_StepDimTol_GeneralDatumReference_DownCast = _StepDimTol.Handle_StepDimTol_GeneralDatumReference_DownCast

class Handle_StepDimTol_PerpendicularityTolerance(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_PerpendicularityTolerance self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_PerpendicularityTolerance_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_PerpendicularityTolerance self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_PerpendicularityTolerance_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_PerpendicularityTolerance self, StepDimTol_PerpendicularityTolerance thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_PerpendicularityTolerance_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_PerpendicularityTolerance self, Handle_StepDimTol_PerpendicularityTolerance theHandle) -> Handle_StepDimTol_PerpendicularityTolerance
        assign(Handle_StepDimTol_PerpendicularityTolerance self, StepDimTol_PerpendicularityTolerance thePtr) -> Handle_StepDimTol_PerpendicularityTolerance
        assign(Handle_StepDimTol_PerpendicularityTolerance self, Handle_StepDimTol_PerpendicularityTolerance theHandle) -> Handle_StepDimTol_PerpendicularityTolerance

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_PerpendicularityTolerance_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_PerpendicularityTolerance self) -> StepDimTol_PerpendicularityTolerance

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_PerpendicularityTolerance_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_PerpendicularityTolerance self) -> StepDimTol_PerpendicularityTolerance

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_PerpendicularityTolerance___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_PerpendicularityTolerance self) -> StepDimTol_PerpendicularityTolerance

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_PerpendicularityTolerance___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_PerpendicularityTolerance___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_PerpendicularityTolerance___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_PerpendicularityTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_PerpendicularityTolerance_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_PerpendicularityTolerance

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_PerpendicularityTolerance self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_PerpendicularityTolerance_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_PerpendicularityTolerance_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_PerpendicularityTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepDimTol_PerpendicularityTolerance self, Handle_TCollection_HAsciiString theGeometricTolerance_Name, Handle_TCollection_HAsciiString theGeometricTolerance_Description, Handle_StepBasic_MeasureWithUnit theGeometricTolerance_Magnitude, Handle_StepRepr_ShapeAspect theGeometricTolerance_TolerancedShapeAspect, Handle_StepDimTol_HArray1OfDatumReference theDatumSystem)
        Init(Handle_StepDimTol_PerpendicularityTolerance self, Handle_TCollection_HAsciiString theGeometricTolerance_Name, Handle_TCollection_HAsciiString theGeometricTolerance_Description, Handle_StepBasic_MeasureWithUnit theGeometricTolerance_Magnitude, StepDimTol_GeometricToleranceTarget theGeometricTolerance_TolerancedShapeAspect, Handle_StepDimTol_HArray1OfDatumSystemOrReference theDatumSystem)

        Initialize all fields (own and inherited) AP242

        :type theGeometricTolerance_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theGeometricTolerance_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theGeometricTolerance_Magnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type theGeometricTolerance_TolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget
        :type theDatumSystem: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference

        """
        return _StepDimTol.Handle_StepDimTol_PerpendicularityTolerance_Init(self, *args)


    def DatumSystem(self, *args):
        """
        DatumSystem(Handle_StepDimTol_PerpendicularityTolerance self) -> Handle_StepDimTol_HArray1OfDatumReference

        Returns field DatumSystem AP214

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumReference

        """
        return _StepDimTol.Handle_StepDimTol_PerpendicularityTolerance_DatumSystem(self, *args)


    def DatumSystemAP242(self, *args):
        """
        DatumSystemAP242(Handle_StepDimTol_PerpendicularityTolerance self) -> Handle_StepDimTol_HArray1OfDatumSystemOrReference

        Returns field DatumSystem AP242

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference

        """
        return _StepDimTol.Handle_StepDimTol_PerpendicularityTolerance_DatumSystemAP242(self, *args)


    def SetDatumSystem(self, *args):
        """
        SetDatumSystem(Handle_StepDimTol_PerpendicularityTolerance self, Handle_StepDimTol_HArray1OfDatumReference theDatumSystem)
        SetDatumSystem(Handle_StepDimTol_PerpendicularityTolerance self, Handle_StepDimTol_HArray1OfDatumSystemOrReference theDatumSystem)

        Set field DatumSystem AP242

        :type theDatumSystem: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference

        """
        return _StepDimTol.Handle_StepDimTol_PerpendicularityTolerance_SetDatumSystem(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepDimTol_PerpendicularityTolerance self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_PerpendicularityTolerance_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_PerpendicularityTolerance self, Handle_TCollection_HAsciiString theName)

        Set field Name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_PerpendicularityTolerance_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_PerpendicularityTolerance self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_PerpendicularityTolerance_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_PerpendicularityTolerance self, Handle_TCollection_HAsciiString theDescription)

        Set field Description

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_PerpendicularityTolerance_SetDescription(self, *args)


    def Magnitude(self, *args):
        """
        Magnitude(Handle_StepDimTol_PerpendicularityTolerance self) -> Handle_StepBasic_MeasureWithUnit

        Returns field Magnitude

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_PerpendicularityTolerance_Magnitude(self, *args)


    def SetMagnitude(self, *args):
        """
        SetMagnitude(Handle_StepDimTol_PerpendicularityTolerance self, Handle_StepBasic_MeasureWithUnit theMagnitude)

        Set field Magnitude

        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_PerpendicularityTolerance_SetMagnitude(self, *args)


    def TolerancedShapeAspect(self, *args):
        """
        TolerancedShapeAspect(Handle_StepDimTol_PerpendicularityTolerance self) -> StepDimTol_GeometricToleranceTarget

        Returns field TolerancedShapeAspect
        Note: in AP214(203) type of this attribute can be only StepRepr_ShapeAspect

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_PerpendicularityTolerance_TolerancedShapeAspect(self, *args)


    def SetTolerancedShapeAspect(self, *args):
        """
        SetTolerancedShapeAspect(Handle_StepDimTol_PerpendicularityTolerance self, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect)
        SetTolerancedShapeAspect(Handle_StepDimTol_PerpendicularityTolerance self, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect)

        Set field TolerancedShapeAspect AP242

        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_PerpendicularityTolerance_SetTolerancedShapeAspect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_PerpendicularityTolerance self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_PerpendicularityTolerance_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_PerpendicularityTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_PerpendicularityTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_PerpendicularityTolerance_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_PerpendicularityTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_PerpendicularityTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_PerpendicularityTolerance_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_PerpendicularityTolerance self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_PerpendicularityTolerance_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_PerpendicularityTolerance self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_PerpendicularityTolerance_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_PerpendicularityTolerance self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_PerpendicularityTolerance_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_PerpendicularityTolerance self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_PerpendicularityTolerance_DecrementRefCounter(self, *args)

Handle_StepDimTol_PerpendicularityTolerance_swigregister = _StepDimTol.Handle_StepDimTol_PerpendicularityTolerance_swigregister
Handle_StepDimTol_PerpendicularityTolerance_swigregister(Handle_StepDimTol_PerpendicularityTolerance)

def Handle_StepDimTol_PerpendicularityTolerance_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_PerpendicularityTolerance_DownCast(thing)
Handle_StepDimTol_PerpendicularityTolerance_DownCast = _StepDimTol.Handle_StepDimTol_PerpendicularityTolerance_DownCast

class NCollection_Array1_StepDimTol_GeometricToleranceModifier(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_StepDimTol_GeometricToleranceModifier self) -> NCollection_Array1< StepDimTol_GeometricToleranceModifier >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_GeometricToleranceModifier_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_StepDimTol_GeometricToleranceModifier self) -> NCollection_Array1< StepDimTol_GeometricToleranceModifier >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_GeometricToleranceModifier_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_StepDimTol_GeometricToleranceModifier self) -> NCollection_Array1< StepDimTol_GeometricToleranceModifier >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_GeometricToleranceModifier_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_StepDimTol_GeometricToleranceModifier self) -> NCollection_Array1< StepDimTol_GeometricToleranceModifier >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_GeometricToleranceModifier_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepDimTol.new_NCollection_Array1_StepDimTol_GeometricToleranceModifier(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_StepDimTol_GeometricToleranceModifier self, StepDimTol_GeometricToleranceModifier const & theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_GeometricToleranceModifier_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_StepDimTol_GeometricToleranceModifier self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_GeometricToleranceModifier_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_StepDimTol_GeometricToleranceModifier self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_GeometricToleranceModifier_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_StepDimTol_GeometricToleranceModifier self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_GeometricToleranceModifier_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_StepDimTol_GeometricToleranceModifier self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_GeometricToleranceModifier_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_StepDimTol_GeometricToleranceModifier self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_GeometricToleranceModifier_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_StepDimTol_GeometricToleranceModifier self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_GeometricToleranceModifier_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_StepDimTol_GeometricToleranceModifier self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_GeometricToleranceModifier_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_StepDimTol_GeometricToleranceModifier self, NCollection_Array1_StepDimTol_GeometricToleranceModifier theOther) -> NCollection_Array1_StepDimTol_GeometricToleranceModifier

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_GeometricToleranceModifier_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_StepDimTol_GeometricToleranceModifier self, NCollection_Array1_StepDimTol_GeometricToleranceModifier theOther) -> NCollection_Array1_StepDimTol_GeometricToleranceModifier

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_GeometricToleranceModifier_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_StepDimTol_GeometricToleranceModifier self, NCollection_Array1_StepDimTol_GeometricToleranceModifier theOther) -> NCollection_Array1_StepDimTol_GeometricToleranceModifier
        assign(NCollection_Array1_StepDimTol_GeometricToleranceModifier self, NCollection_Array1_StepDimTol_GeometricToleranceModifier theOther) -> NCollection_Array1_StepDimTol_GeometricToleranceModifier

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_GeometricToleranceModifier_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepDimTol.NCollection_Array1_StepDimTol_GeometricToleranceModifier_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_StepDimTol_GeometricToleranceModifier self) -> StepDimTol_GeometricToleranceModifier &

        @return first element

        :rtype: TheItemType &

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_GeometricToleranceModifier_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepDimTol.NCollection_Array1_StepDimTol_GeometricToleranceModifier_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_StepDimTol_GeometricToleranceModifier self) -> StepDimTol_GeometricToleranceModifier &

        @return last element

        :rtype: TheItemType &

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_GeometricToleranceModifier_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepDimTol.NCollection_Array1_StepDimTol_GeometricToleranceModifier_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_StepDimTol_GeometricToleranceModifier self, Standard_Integer const theIndex) -> StepDimTol_GeometricToleranceModifier &

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_GeometricToleranceModifier_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepDimTol.NCollection_Array1_StepDimTol_GeometricToleranceModifier___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepDimTol.NCollection_Array1_StepDimTol_GeometricToleranceModifier_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_StepDimTol_GeometricToleranceModifier self, Standard_Integer const theIndex, StepDimTol_GeometricToleranceModifier const & theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_GeometricToleranceModifier_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_StepDimTol_GeometricToleranceModifier self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_GeometricToleranceModifier_Resize(self, *args)

    __swig_destroy__ = _StepDimTol.delete_NCollection_Array1_StepDimTol_GeometricToleranceModifier
NCollection_Array1_StepDimTol_GeometricToleranceModifier_swigregister = _StepDimTol.NCollection_Array1_StepDimTol_GeometricToleranceModifier_swigregister
NCollection_Array1_StepDimTol_GeometricToleranceModifier_swigregister(NCollection_Array1_StepDimTol_GeometricToleranceModifier)


try:
	StepDimTol_Array1OfGeometricToleranceModifier = NCollection_Array1_StepDimTol_GeometricToleranceModifier
except NameError:
	pass # does not exist, probably ignored

class Handle_StepDimTol_DatumReferenceModifierWithValue(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_DatumReferenceModifierWithValue self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceModifierWithValue_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_DatumReferenceModifierWithValue self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceModifierWithValue_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_DatumReferenceModifierWithValue self, StepDimTol_DatumReferenceModifierWithValue thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceModifierWithValue_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_DatumReferenceModifierWithValue self, Handle_StepDimTol_DatumReferenceModifierWithValue theHandle) -> Handle_StepDimTol_DatumReferenceModifierWithValue
        assign(Handle_StepDimTol_DatumReferenceModifierWithValue self, StepDimTol_DatumReferenceModifierWithValue thePtr) -> Handle_StepDimTol_DatumReferenceModifierWithValue
        assign(Handle_StepDimTol_DatumReferenceModifierWithValue self, Handle_StepDimTol_DatumReferenceModifierWithValue theHandle) -> Handle_StepDimTol_DatumReferenceModifierWithValue

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceModifierWithValue_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_DatumReferenceModifierWithValue self) -> StepDimTol_DatumReferenceModifierWithValue

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceModifierWithValue_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_DatumReferenceModifierWithValue self) -> StepDimTol_DatumReferenceModifierWithValue

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceModifierWithValue___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_DatumReferenceModifierWithValue self) -> StepDimTol_DatumReferenceModifierWithValue

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceModifierWithValue___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_DatumReferenceModifierWithValue___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_DatumReferenceModifierWithValue___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_DatumReferenceModifierWithValue(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_DatumReferenceModifierWithValue_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_DatumReferenceModifierWithValue

    def Init(self, *args):
        """
        Init(Handle_StepDimTol_DatumReferenceModifierWithValue self, StepDimTol_DatumReferenceModifierType const & theModifierType, Handle_StepBasic_LengthMeasureWithUnit theModifierValue)

        Initialize all fields (own and inherited)

        :type theModifierType: OCC.wrapper.StepDimTol.StepDimTol_DatumReferenceModifierType
        :type theModifierValue: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceModifierWithValue_Init(self, *args)


    def ModifierType(self, *args):
        """
        ModifierType(Handle_StepDimTol_DatumReferenceModifierWithValue self) -> StepDimTol_DatumReferenceModifierType

        Returns field ModifierType

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_DatumReferenceModifierType

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceModifierWithValue_ModifierType(self, *args)


    def SetModifierType(self, *args):
        """
        SetModifierType(Handle_StepDimTol_DatumReferenceModifierWithValue self, StepDimTol_DatumReferenceModifierType const & theModifierType)

        Set field ModifierType

        :type theModifierType: OCC.wrapper.StepDimTol.StepDimTol_DatumReferenceModifierType

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceModifierWithValue_SetModifierType(self, *args)


    def ModifierValue(self, *args):
        """
        ModifierValue(Handle_StepDimTol_DatumReferenceModifierWithValue self) -> Handle_StepBasic_LengthMeasureWithUnit

        Returns field ModifierValue

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceModifierWithValue_ModifierValue(self, *args)


    def SetModifierValue(self, *args):
        """
        SetModifierValue(Handle_StepDimTol_DatumReferenceModifierWithValue self, Handle_StepBasic_LengthMeasureWithUnit theModifierValue)

        Set field ModifierValue

        :type theModifierValue: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceModifierWithValue_SetModifierValue(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_DatumReferenceModifierWithValue self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceModifierWithValue_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_DatumReferenceModifierWithValue_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_DatumReferenceModifierWithValue_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_DatumReferenceModifierWithValue self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceModifierWithValue_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_DatumReferenceModifierWithValue self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_DatumReferenceModifierWithValue self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceModifierWithValue_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_DatumReferenceModifierWithValue self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_DatumReferenceModifierWithValue self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceModifierWithValue_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_DatumReferenceModifierWithValue self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceModifierWithValue_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_DatumReferenceModifierWithValue self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceModifierWithValue_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_DatumReferenceModifierWithValue self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceModifierWithValue_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_DatumReferenceModifierWithValue self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceModifierWithValue_DecrementRefCounter(self, *args)

Handle_StepDimTol_DatumReferenceModifierWithValue_swigregister = _StepDimTol.Handle_StepDimTol_DatumReferenceModifierWithValue_swigregister
Handle_StepDimTol_DatumReferenceModifierWithValue_swigregister(Handle_StepDimTol_DatumReferenceModifierWithValue)

def Handle_StepDimTol_DatumReferenceModifierWithValue_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_DatumReferenceModifierWithValue_DownCast(thing)
Handle_StepDimTol_DatumReferenceModifierWithValue_DownCast = _StepDimTol.Handle_StepDimTol_DatumReferenceModifierWithValue_DownCast

class Handle_StepDimTol_GeometricToleranceWithMaximumTolerance(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_GeometricToleranceWithMaximumTolerance self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_GeometricToleranceWithMaximumTolerance self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_GeometricToleranceWithMaximumTolerance self, StepDimTol_GeometricToleranceWithMaximumTolerance thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_GeometricToleranceWithMaximumTolerance self, Handle_StepDimTol_GeometricToleranceWithMaximumTolerance theHandle) -> Handle_StepDimTol_GeometricToleranceWithMaximumTolerance
        assign(Handle_StepDimTol_GeometricToleranceWithMaximumTolerance self, StepDimTol_GeometricToleranceWithMaximumTolerance thePtr) -> Handle_StepDimTol_GeometricToleranceWithMaximumTolerance
        assign(Handle_StepDimTol_GeometricToleranceWithMaximumTolerance self, Handle_StepDimTol_GeometricToleranceWithMaximumTolerance theHandle) -> Handle_StepDimTol_GeometricToleranceWithMaximumTolerance

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_GeometricToleranceWithMaximumTolerance self) -> StepDimTol_GeometricToleranceWithMaximumTolerance

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_GeometricToleranceWithMaximumTolerance self) -> StepDimTol_GeometricToleranceWithMaximumTolerance

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_GeometricToleranceWithMaximumTolerance self) -> StepDimTol_GeometricToleranceWithMaximumTolerance

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_GeometricToleranceWithMaximumTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_GeometricToleranceWithMaximumTolerance

    def Init(self, *args):
        """
        Init(Handle_StepDimTol_GeometricToleranceWithMaximumTolerance self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect, Handle_StepDimTol_HArray1OfGeometricToleranceModifier theModifiers, Handle_StepBasic_LengthMeasureWithUnit theUnitSize)

        Initialize all fields (own and inherited)

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget
        :type theModifiers: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier
        :type theUnitSize: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_Init(self, *args)


    def MaximumUpperTolerance(self, *args):
        """
        MaximumUpperTolerance(Handle_StepDimTol_GeometricToleranceWithMaximumTolerance self) -> Handle_StepBasic_LengthMeasureWithUnit

        Returns field MaximumUpperTolerance

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_MaximumUpperTolerance(self, *args)


    def SetMaximumUpperTolerance(self, *args):
        """
        SetMaximumUpperTolerance(Handle_StepDimTol_GeometricToleranceWithMaximumTolerance self, Handle_StepBasic_LengthMeasureWithUnit theMaximumUpperTolerance)

        Set field MaximumUpperTolerance

        :type theMaximumUpperTolerance: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_SetMaximumUpperTolerance(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_GeometricToleranceWithMaximumTolerance self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Modifiers(self, *args):
        """
        Modifiers(Handle_StepDimTol_GeometricToleranceWithMaximumTolerance self) -> Handle_StepDimTol_HArray1OfGeometricToleranceModifier

        Returns field Modifiers

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_Modifiers(self, *args)


    def SetModifiers(self, *args):
        """
        SetModifiers(Handle_StepDimTol_GeometricToleranceWithMaximumTolerance self, Handle_StepDimTol_HArray1OfGeometricToleranceModifier theModifiers)

        Set field Modifiers

        :type theModifiers: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfGeometricToleranceModifier

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_SetModifiers(self, *args)


    def NbModifiers(self, *args):
        """
        NbModifiers(Handle_StepDimTol_GeometricToleranceWithMaximumTolerance self) -> Standard_Integer

        Returns number of modifiers

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_NbModifiers(self, *args)


    def ModifierValue(self, *args):
        """
        ModifierValue(Handle_StepDimTol_GeometricToleranceWithMaximumTolerance self, Standard_Integer const theNum) -> StepDimTol_GeometricToleranceModifier

        Returns modifier with the given number

        :type theNum: int
        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceModifier

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_ModifierValue(self, *args)


    def SetModifierValue(self, *args):
        """
        SetModifierValue(Handle_StepDimTol_GeometricToleranceWithMaximumTolerance self, Standard_Integer const theNum, StepDimTol_GeometricToleranceModifier const theItem)

        Sets modifier with given number

        :type theNum: int
        :type theItem: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceModifier

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_SetModifierValue(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepDimTol_GeometricToleranceWithMaximumTolerance self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_GeometricToleranceWithMaximumTolerance self, Handle_TCollection_HAsciiString theName)

        Set field Name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_GeometricToleranceWithMaximumTolerance self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_GeometricToleranceWithMaximumTolerance self, Handle_TCollection_HAsciiString theDescription)

        Set field Description

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_SetDescription(self, *args)


    def Magnitude(self, *args):
        """
        Magnitude(Handle_StepDimTol_GeometricToleranceWithMaximumTolerance self) -> Handle_StepBasic_MeasureWithUnit

        Returns field Magnitude

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_Magnitude(self, *args)


    def SetMagnitude(self, *args):
        """
        SetMagnitude(Handle_StepDimTol_GeometricToleranceWithMaximumTolerance self, Handle_StepBasic_MeasureWithUnit theMagnitude)

        Set field Magnitude

        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_SetMagnitude(self, *args)


    def TolerancedShapeAspect(self, *args):
        """
        TolerancedShapeAspect(Handle_StepDimTol_GeometricToleranceWithMaximumTolerance self) -> StepDimTol_GeometricToleranceTarget

        Returns field TolerancedShapeAspect
        Note: in AP214(203) type of this attribute can be only StepRepr_ShapeAspect

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_TolerancedShapeAspect(self, *args)


    def SetTolerancedShapeAspect(self, *args):
        """
        SetTolerancedShapeAspect(Handle_StepDimTol_GeometricToleranceWithMaximumTolerance self, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect)
        SetTolerancedShapeAspect(Handle_StepDimTol_GeometricToleranceWithMaximumTolerance self, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect)

        Set field TolerancedShapeAspect AP242

        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_SetTolerancedShapeAspect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_GeometricToleranceWithMaximumTolerance self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_GeometricToleranceWithMaximumTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_GeometricToleranceWithMaximumTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_GeometricToleranceWithMaximumTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_GeometricToleranceWithMaximumTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_GeometricToleranceWithMaximumTolerance self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_GeometricToleranceWithMaximumTolerance self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_GeometricToleranceWithMaximumTolerance self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_GeometricToleranceWithMaximumTolerance self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_DecrementRefCounter(self, *args)

Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_swigregister = _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_swigregister
Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_swigregister(Handle_StepDimTol_GeometricToleranceWithMaximumTolerance)

def Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_DownCast(thing)
Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_DownCast = _StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance_DownCast

class Handle_StepDimTol_DatumReferenceElement(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_DatumReferenceElement self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceElement_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_DatumReferenceElement self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceElement_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_DatumReferenceElement self, StepDimTol_DatumReferenceElement thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceElement_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_DatumReferenceElement self, Handle_StepDimTol_DatumReferenceElement theHandle) -> Handle_StepDimTol_DatumReferenceElement
        assign(Handle_StepDimTol_DatumReferenceElement self, StepDimTol_DatumReferenceElement thePtr) -> Handle_StepDimTol_DatumReferenceElement
        assign(Handle_StepDimTol_DatumReferenceElement self, Handle_StepDimTol_DatumReferenceElement theHandle) -> Handle_StepDimTol_DatumReferenceElement

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceElement_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_DatumReferenceElement self) -> StepDimTol_DatumReferenceElement

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceElement_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_DatumReferenceElement self) -> StepDimTol_DatumReferenceElement

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceElement___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_DatumReferenceElement self) -> StepDimTol_DatumReferenceElement

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceElement___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_DatumReferenceElement___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_DatumReferenceElement___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_DatumReferenceElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_DatumReferenceElement_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_DatumReferenceElement

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_DatumReferenceElement self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceElement_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_DatumReferenceElement_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_DatumReferenceElement_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepDimTol_DatumReferenceElement self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepRepr_ProductDefinitionShape theOfShape, StepData_Logical const theProductDefinitional, StepDimTol_DatumOrCommonDatum theBase, Standard_Boolean const theHasModifiers, Handle_StepDimTol_HArray1OfDatumReferenceModifier theModifiers)

        Initialize all fields (own and inherited)

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theOfShape: OCC.wrapper.StepDimTol.Handle_StepRepr_ProductDefinitionShape
        :type theProductDefinitional: OCC.wrapper.StepData.StepData_Logical
        :type theBase: OCC.wrapper.StepDimTol.StepDimTol_DatumOrCommonDatum
        :type theHasModifiers: bool
        :type theModifiers: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceElement_Init(self, *args)


    def Base(self, *args):
        """
        Base(Handle_StepDimTol_DatumReferenceElement self) -> StepDimTol_DatumOrCommonDatum

        Returns field Base

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_DatumOrCommonDatum

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceElement_Base(self, *args)


    def SetBase(self, *args):
        """
        SetBase(Handle_StepDimTol_DatumReferenceElement self, StepDimTol_DatumOrCommonDatum theBase)

        Set field Base

        :type theBase: OCC.wrapper.StepDimTol.StepDimTol_DatumOrCommonDatum

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceElement_SetBase(self, *args)


    def HasModifiers(self, *args):
        """
        HasModifiers(Handle_StepDimTol_DatumReferenceElement self) -> Standard_Boolean

        Indicates is field Modifiers exist

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceElement_HasModifiers(self, *args)


    def Modifiers(self, *args):
        """
        Modifiers(Handle_StepDimTol_DatumReferenceElement self) -> Handle_StepDimTol_HArray1OfDatumReferenceModifier

        Returns field Modifiers

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceElement_Modifiers(self, *args)


    def SetModifiers(self, *args):
        """
        SetModifiers(Handle_StepDimTol_DatumReferenceElement self, Handle_StepDimTol_HArray1OfDatumReferenceModifier theModifiers)

        Set field Modifiers

        :type theModifiers: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceElement_SetModifiers(self, *args)


    def NbModifiers(self, *args):
        """
        NbModifiers(Handle_StepDimTol_DatumReferenceElement self) -> Standard_Integer

        Returns number of Modifiers

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceElement_NbModifiers(self, *args)


    def ModifiersValue(self, *args):
        """
        ModifiersValue(Handle_StepDimTol_DatumReferenceElement self, Standard_Integer const theNum) -> StepDimTol_DatumReferenceModifier
        ModifiersValue(Handle_StepDimTol_DatumReferenceElement self, Standard_Integer const theNum, StepDimTol_DatumReferenceModifier theItem)

        Sets Modifiers with given number

        :type theNum: int
        :type theItem: OCC.wrapper.StepDimTol.StepDimTol_DatumReferenceModifier

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceElement_ModifiersValue(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_DatumReferenceElement self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceElement_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepDimTol_DatumReferenceElement self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceElement_Name(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_DatumReferenceElement self, Handle_TCollection_HAsciiString aDescription)

        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceElement_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_DatumReferenceElement self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceElement_Description(self, *args)


    def SetOfShape(self, *args):
        """
        SetOfShape(Handle_StepDimTol_DatumReferenceElement self, Handle_StepRepr_ProductDefinitionShape aOfShape)

        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceElement_SetOfShape(self, *args)


    def OfShape(self, *args):
        """
        OfShape(Handle_StepDimTol_DatumReferenceElement self) -> Handle_StepRepr_ProductDefinitionShape

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceElement_OfShape(self, *args)


    def SetProductDefinitional(self, *args):
        """
        SetProductDefinitional(Handle_StepDimTol_DatumReferenceElement self, StepData_Logical const aProductDefinitional)

        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceElement_SetProductDefinitional(self, *args)


    def ProductDefinitional(self, *args):
        """
        ProductDefinitional(Handle_StepDimTol_DatumReferenceElement self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceElement_ProductDefinitional(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_DatumReferenceElement self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceElement_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_DatumReferenceElement self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_DatumReferenceElement self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceElement_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_DatumReferenceElement self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_DatumReferenceElement self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceElement_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_DatumReferenceElement self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceElement_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_DatumReferenceElement self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceElement_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_DatumReferenceElement self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceElement_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_DatumReferenceElement self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceElement_DecrementRefCounter(self, *args)

Handle_StepDimTol_DatumReferenceElement_swigregister = _StepDimTol.Handle_StepDimTol_DatumReferenceElement_swigregister
Handle_StepDimTol_DatumReferenceElement_swigregister(Handle_StepDimTol_DatumReferenceElement)

def Handle_StepDimTol_DatumReferenceElement_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_DatumReferenceElement_DownCast(thing)
Handle_StepDimTol_DatumReferenceElement_DownCast = _StepDimTol.Handle_StepDimTol_DatumReferenceElement_DownCast

class Handle_StepDimTol_SymmetryTolerance(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_SymmetryTolerance self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_SymmetryTolerance_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_SymmetryTolerance self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_SymmetryTolerance_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_SymmetryTolerance self, StepDimTol_SymmetryTolerance thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_SymmetryTolerance_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_SymmetryTolerance self, Handle_StepDimTol_SymmetryTolerance theHandle) -> Handle_StepDimTol_SymmetryTolerance
        assign(Handle_StepDimTol_SymmetryTolerance self, StepDimTol_SymmetryTolerance thePtr) -> Handle_StepDimTol_SymmetryTolerance
        assign(Handle_StepDimTol_SymmetryTolerance self, Handle_StepDimTol_SymmetryTolerance theHandle) -> Handle_StepDimTol_SymmetryTolerance

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_SymmetryTolerance_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_SymmetryTolerance self) -> StepDimTol_SymmetryTolerance

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_SymmetryTolerance_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_SymmetryTolerance self) -> StepDimTol_SymmetryTolerance

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_SymmetryTolerance___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_SymmetryTolerance self) -> StepDimTol_SymmetryTolerance

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_SymmetryTolerance___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_SymmetryTolerance___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_SymmetryTolerance___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_SymmetryTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_SymmetryTolerance_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_SymmetryTolerance

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_SymmetryTolerance self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_SymmetryTolerance_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_SymmetryTolerance_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_SymmetryTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepDimTol_SymmetryTolerance self, Handle_TCollection_HAsciiString theGeometricTolerance_Name, Handle_TCollection_HAsciiString theGeometricTolerance_Description, Handle_StepBasic_MeasureWithUnit theGeometricTolerance_Magnitude, Handle_StepRepr_ShapeAspect theGeometricTolerance_TolerancedShapeAspect, Handle_StepDimTol_HArray1OfDatumReference theDatumSystem)
        Init(Handle_StepDimTol_SymmetryTolerance self, Handle_TCollection_HAsciiString theGeometricTolerance_Name, Handle_TCollection_HAsciiString theGeometricTolerance_Description, Handle_StepBasic_MeasureWithUnit theGeometricTolerance_Magnitude, StepDimTol_GeometricToleranceTarget theGeometricTolerance_TolerancedShapeAspect, Handle_StepDimTol_HArray1OfDatumSystemOrReference theDatumSystem)

        Initialize all fields (own and inherited) AP242

        :type theGeometricTolerance_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theGeometricTolerance_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theGeometricTolerance_Magnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type theGeometricTolerance_TolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget
        :type theDatumSystem: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference

        """
        return _StepDimTol.Handle_StepDimTol_SymmetryTolerance_Init(self, *args)


    def DatumSystem(self, *args):
        """
        DatumSystem(Handle_StepDimTol_SymmetryTolerance self) -> Handle_StepDimTol_HArray1OfDatumReference

        Returns field DatumSystem AP214

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumReference

        """
        return _StepDimTol.Handle_StepDimTol_SymmetryTolerance_DatumSystem(self, *args)


    def DatumSystemAP242(self, *args):
        """
        DatumSystemAP242(Handle_StepDimTol_SymmetryTolerance self) -> Handle_StepDimTol_HArray1OfDatumSystemOrReference

        Returns field DatumSystem AP242

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference

        """
        return _StepDimTol.Handle_StepDimTol_SymmetryTolerance_DatumSystemAP242(self, *args)


    def SetDatumSystem(self, *args):
        """
        SetDatumSystem(Handle_StepDimTol_SymmetryTolerance self, Handle_StepDimTol_HArray1OfDatumReference theDatumSystem)
        SetDatumSystem(Handle_StepDimTol_SymmetryTolerance self, Handle_StepDimTol_HArray1OfDatumSystemOrReference theDatumSystem)

        Set field DatumSystem AP242

        :type theDatumSystem: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference

        """
        return _StepDimTol.Handle_StepDimTol_SymmetryTolerance_SetDatumSystem(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepDimTol_SymmetryTolerance self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_SymmetryTolerance_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_SymmetryTolerance self, Handle_TCollection_HAsciiString theName)

        Set field Name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_SymmetryTolerance_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_SymmetryTolerance self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_SymmetryTolerance_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_SymmetryTolerance self, Handle_TCollection_HAsciiString theDescription)

        Set field Description

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_SymmetryTolerance_SetDescription(self, *args)


    def Magnitude(self, *args):
        """
        Magnitude(Handle_StepDimTol_SymmetryTolerance self) -> Handle_StepBasic_MeasureWithUnit

        Returns field Magnitude

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_SymmetryTolerance_Magnitude(self, *args)


    def SetMagnitude(self, *args):
        """
        SetMagnitude(Handle_StepDimTol_SymmetryTolerance self, Handle_StepBasic_MeasureWithUnit theMagnitude)

        Set field Magnitude

        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_SymmetryTolerance_SetMagnitude(self, *args)


    def TolerancedShapeAspect(self, *args):
        """
        TolerancedShapeAspect(Handle_StepDimTol_SymmetryTolerance self) -> StepDimTol_GeometricToleranceTarget

        Returns field TolerancedShapeAspect
        Note: in AP214(203) type of this attribute can be only StepRepr_ShapeAspect

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_SymmetryTolerance_TolerancedShapeAspect(self, *args)


    def SetTolerancedShapeAspect(self, *args):
        """
        SetTolerancedShapeAspect(Handle_StepDimTol_SymmetryTolerance self, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect)
        SetTolerancedShapeAspect(Handle_StepDimTol_SymmetryTolerance self, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect)

        Set field TolerancedShapeAspect AP242

        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_SymmetryTolerance_SetTolerancedShapeAspect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_SymmetryTolerance self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_SymmetryTolerance_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_SymmetryTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_SymmetryTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_SymmetryTolerance_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_SymmetryTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_SymmetryTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_SymmetryTolerance_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_SymmetryTolerance self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_SymmetryTolerance_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_SymmetryTolerance self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_SymmetryTolerance_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_SymmetryTolerance self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_SymmetryTolerance_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_SymmetryTolerance self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_SymmetryTolerance_DecrementRefCounter(self, *args)

Handle_StepDimTol_SymmetryTolerance_swigregister = _StepDimTol.Handle_StepDimTol_SymmetryTolerance_swigregister
Handle_StepDimTol_SymmetryTolerance_swigregister(Handle_StepDimTol_SymmetryTolerance)

def Handle_StepDimTol_SymmetryTolerance_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_SymmetryTolerance_DownCast(thing)
Handle_StepDimTol_SymmetryTolerance_DownCast = _StepDimTol.Handle_StepDimTol_SymmetryTolerance_DownCast

class Handle_StepDimTol_RunoutZoneDefinition(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_RunoutZoneDefinition self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneDefinition_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_RunoutZoneDefinition self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneDefinition_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_RunoutZoneDefinition self, StepDimTol_RunoutZoneDefinition thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneDefinition_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_RunoutZoneDefinition self, Handle_StepDimTol_RunoutZoneDefinition theHandle) -> Handle_StepDimTol_RunoutZoneDefinition
        assign(Handle_StepDimTol_RunoutZoneDefinition self, StepDimTol_RunoutZoneDefinition thePtr) -> Handle_StepDimTol_RunoutZoneDefinition
        assign(Handle_StepDimTol_RunoutZoneDefinition self, Handle_StepDimTol_RunoutZoneDefinition theHandle) -> Handle_StepDimTol_RunoutZoneDefinition

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneDefinition_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_RunoutZoneDefinition self) -> StepDimTol_RunoutZoneDefinition

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneDefinition_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_RunoutZoneDefinition self) -> StepDimTol_RunoutZoneDefinition

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneDefinition___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_RunoutZoneDefinition self) -> StepDimTol_RunoutZoneDefinition

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneDefinition___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_RunoutZoneDefinition___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_RunoutZoneDefinition___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_RunoutZoneDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_RunoutZoneDefinition_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_RunoutZoneDefinition

    def Init(self, *args):
        """
        Init(Handle_StepDimTol_RunoutZoneDefinition self, Handle_StepDimTol_ToleranceZone theZone, Handle_StepRepr_HArray1OfShapeAspect theBoundaries, Handle_StepDimTol_RunoutZoneOrientation theOrientation)

        Initialize all fields (own and inherited)

        :type theZone: OCC.wrapper.StepDimTol.Handle_StepDimTol_ToleranceZone
        :type theBoundaries: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfShapeAspect
        :type theOrientation: OCC.wrapper.StepDimTol.Handle_StepDimTol_RunoutZoneOrientation

        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneDefinition_Init(self, *args)


    def Orientation(self, *args):
        """
        Orientation(Handle_StepDimTol_RunoutZoneDefinition self) -> Handle_StepDimTol_RunoutZoneOrientation

        Returns field Orientation

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_RunoutZoneOrientation

        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneDefinition_Orientation(self, *args)


    def SetOrientation(self, *args):
        """
        SetOrientation(Handle_StepDimTol_RunoutZoneDefinition self, Handle_StepDimTol_RunoutZoneOrientation theOrientation)

        Set field Orientation

        :type theOrientation: OCC.wrapper.StepDimTol.Handle_StepDimTol_RunoutZoneOrientation

        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneDefinition_SetOrientation(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_RunoutZoneDefinition self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneDefinition_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_RunoutZoneDefinition_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_RunoutZoneDefinition_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Boundaries(self, *args):
        """
        Boundaries(Handle_StepDimTol_RunoutZoneDefinition self) -> Handle_StepRepr_HArray1OfShapeAspect

        Returns field Boundaries

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfShapeAspect

        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneDefinition_Boundaries(self, *args)


    def SetBoundaries(self, *args):
        """
        SetBoundaries(Handle_StepDimTol_RunoutZoneDefinition self, Handle_StepRepr_HArray1OfShapeAspect theBoundaries)

        Set field Boundaries

        :type theBoundaries: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfShapeAspect

        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneDefinition_SetBoundaries(self, *args)


    def NbBoundaries(self, *args):
        """
        NbBoundaries(Handle_StepDimTol_RunoutZoneDefinition self) -> Standard_Integer

        Returns number of Boundaries

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneDefinition_NbBoundaries(self, *args)


    def BoundariesValue(self, *args):
        """
        BoundariesValue(Handle_StepDimTol_RunoutZoneDefinition self, Standard_Integer const theNum) -> Handle_StepRepr_ShapeAspect

        Returns Boundaries with the given number

        :type theNum: int
        :rtype: OCC.wrapper.StepDimTol.Handle_StepRepr_ShapeAspect

        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneDefinition_BoundariesValue(self, *args)


    def SetBoundariesValue(self, *args):
        """
        SetBoundariesValue(Handle_StepDimTol_RunoutZoneDefinition self, Standard_Integer const theNum, Handle_StepRepr_ShapeAspect theItem)

        Sets Boundaries with given number

        :type theNum: int
        :type theItem: OCC.wrapper.StepDimTol.Handle_StepRepr_ShapeAspect

        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneDefinition_SetBoundariesValue(self, *args)


    def Zone(self, *args):
        """
        Zone(Handle_StepDimTol_RunoutZoneDefinition self) -> Handle_StepDimTol_ToleranceZone

        Returns field Zone

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_ToleranceZone

        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneDefinition_Zone(self, *args)


    def SetZone(self, *args):
        """
        SetZone(Handle_StepDimTol_RunoutZoneDefinition self, Handle_StepDimTol_ToleranceZone theZone)

        Set field Zone

        :type theZone: OCC.wrapper.StepDimTol.Handle_StepDimTol_ToleranceZone

        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneDefinition_SetZone(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_RunoutZoneDefinition self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneDefinition_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_RunoutZoneDefinition self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_RunoutZoneDefinition self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneDefinition_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_RunoutZoneDefinition self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_RunoutZoneDefinition self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneDefinition_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_RunoutZoneDefinition self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneDefinition_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_RunoutZoneDefinition self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneDefinition_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_RunoutZoneDefinition self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneDefinition_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_RunoutZoneDefinition self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneDefinition_DecrementRefCounter(self, *args)

Handle_StepDimTol_RunoutZoneDefinition_swigregister = _StepDimTol.Handle_StepDimTol_RunoutZoneDefinition_swigregister
Handle_StepDimTol_RunoutZoneDefinition_swigregister(Handle_StepDimTol_RunoutZoneDefinition)

def Handle_StepDimTol_RunoutZoneDefinition_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_RunoutZoneDefinition_DownCast(thing)
Handle_StepDimTol_RunoutZoneDefinition_DownCast = _StepDimTol.Handle_StepDimTol_RunoutZoneDefinition_DownCast

class NCollection_Array1_StepDimTol_DatumReferenceModifier(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_StepDimTol_DatumReferenceModifier self) -> NCollection_Array1< StepDimTol_DatumReferenceModifier >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_DatumReferenceModifier_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_StepDimTol_DatumReferenceModifier self) -> NCollection_Array1< StepDimTol_DatumReferenceModifier >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_DatumReferenceModifier_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_StepDimTol_DatumReferenceModifier self) -> NCollection_Array1< StepDimTol_DatumReferenceModifier >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_DatumReferenceModifier_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_StepDimTol_DatumReferenceModifier self) -> NCollection_Array1< StepDimTol_DatumReferenceModifier >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_DatumReferenceModifier_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepDimTol.new_NCollection_Array1_StepDimTol_DatumReferenceModifier(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_StepDimTol_DatumReferenceModifier self, StepDimTol_DatumReferenceModifier theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_DatumReferenceModifier_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_StepDimTol_DatumReferenceModifier self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_DatumReferenceModifier_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_StepDimTol_DatumReferenceModifier self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_DatumReferenceModifier_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_StepDimTol_DatumReferenceModifier self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_DatumReferenceModifier_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_StepDimTol_DatumReferenceModifier self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_DatumReferenceModifier_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_StepDimTol_DatumReferenceModifier self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_DatumReferenceModifier_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_StepDimTol_DatumReferenceModifier self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_DatumReferenceModifier_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_StepDimTol_DatumReferenceModifier self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_DatumReferenceModifier_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_StepDimTol_DatumReferenceModifier self, NCollection_Array1_StepDimTol_DatumReferenceModifier theOther) -> NCollection_Array1_StepDimTol_DatumReferenceModifier

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_DatumReferenceModifier_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_StepDimTol_DatumReferenceModifier self, NCollection_Array1_StepDimTol_DatumReferenceModifier theOther) -> NCollection_Array1_StepDimTol_DatumReferenceModifier

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_DatumReferenceModifier_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_StepDimTol_DatumReferenceModifier self, NCollection_Array1_StepDimTol_DatumReferenceModifier theOther) -> NCollection_Array1_StepDimTol_DatumReferenceModifier
        assign(NCollection_Array1_StepDimTol_DatumReferenceModifier self, NCollection_Array1_StepDimTol_DatumReferenceModifier theOther) -> NCollection_Array1_StepDimTol_DatumReferenceModifier

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_DatumReferenceModifier_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepDimTol.NCollection_Array1_StepDimTol_DatumReferenceModifier_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_StepDimTol_DatumReferenceModifier self) -> StepDimTol_DatumReferenceModifier

        @return first element

        :rtype: TheItemType &

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_DatumReferenceModifier_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepDimTol.NCollection_Array1_StepDimTol_DatumReferenceModifier_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_StepDimTol_DatumReferenceModifier self) -> StepDimTol_DatumReferenceModifier

        @return last element

        :rtype: TheItemType &

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_DatumReferenceModifier_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepDimTol.NCollection_Array1_StepDimTol_DatumReferenceModifier_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_StepDimTol_DatumReferenceModifier self, Standard_Integer const theIndex) -> StepDimTol_DatumReferenceModifier

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_DatumReferenceModifier_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepDimTol.NCollection_Array1_StepDimTol_DatumReferenceModifier___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepDimTol.NCollection_Array1_StepDimTol_DatumReferenceModifier_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_StepDimTol_DatumReferenceModifier self, Standard_Integer const theIndex, StepDimTol_DatumReferenceModifier theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_DatumReferenceModifier_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_StepDimTol_DatumReferenceModifier self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_DatumReferenceModifier_Resize(self, *args)

    __swig_destroy__ = _StepDimTol.delete_NCollection_Array1_StepDimTol_DatumReferenceModifier
NCollection_Array1_StepDimTol_DatumReferenceModifier_swigregister = _StepDimTol.NCollection_Array1_StepDimTol_DatumReferenceModifier_swigregister
NCollection_Array1_StepDimTol_DatumReferenceModifier_swigregister(NCollection_Array1_StepDimTol_DatumReferenceModifier)


try:
	StepDimTol_Array1OfDatumReferenceModifier = NCollection_Array1_StepDimTol_DatumReferenceModifier
except NameError:
	pass # does not exist, probably ignored

class StepDimTol_CommonDatum(StepRepr.StepRepr_CompositeShapeAspect):
    """Representation of STEP entity CommonDatum"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_CommonDatum
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_CommonDatum(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_CommonDatum self) -> StepDimTol_CommonDatum

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_CommonDatum(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepDimTol_CommonDatum self, Handle_TCollection_HAsciiString theShapeAspect_Name, Handle_TCollection_HAsciiString theShapeAspect_Description, Handle_StepRepr_ProductDefinitionShape theShapeAspect_OfShape, StepData_Logical const theShapeAspect_ProductDefinitional, Handle_TCollection_HAsciiString theDatum_Name, Handle_TCollection_HAsciiString theDatum_Description, Handle_StepRepr_ProductDefinitionShape theDatum_OfShape, StepData_Logical const theDatum_ProductDefinitional, Handle_TCollection_HAsciiString theDatum_Identification)

        Initialize all fields (own and inherited)

        :type theShapeAspect_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theShapeAspect_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theShapeAspect_OfShape: OCC.wrapper.StepDimTol.Handle_StepRepr_ProductDefinitionShape
        :type theShapeAspect_ProductDefinitional: OCC.wrapper.StepData.StepData_Logical
        :type theDatum_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDatum_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDatum_OfShape: OCC.wrapper.StepDimTol.Handle_StepRepr_ProductDefinitionShape
        :type theDatum_ProductDefinitional: OCC.wrapper.StepData.StepData_Logical
        :type theDatum_Identification: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.StepDimTol_CommonDatum_Init(self, *args)


    def Datum(self, *args):
        """
        Datum(StepDimTol_CommonDatum self) -> Handle_StepDimTol_Datum

        Returns data for supertype Datum

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_Datum

        """
        return _StepDimTol.StepDimTol_CommonDatum_Datum(self, *args)


    def SetDatum(self, *args):
        """
        SetDatum(StepDimTol_CommonDatum self, Handle_StepDimTol_Datum theDatum)

        Set data for supertype Datum

        :type theDatum: OCC.wrapper.StepDimTol.Handle_StepDimTol_Datum

        """
        return _StepDimTol.StepDimTol_CommonDatum_SetDatum(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_CommonDatum_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_CommonDatum_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_CommonDatum_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_CommonDatum
StepDimTol_CommonDatum_swigregister = _StepDimTol.StepDimTol_CommonDatum_swigregister
StepDimTol_CommonDatum_swigregister(StepDimTol_CommonDatum)

def StepDimTol_CommonDatum_get_type_name(*args):
    """
    StepDimTol_CommonDatum_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_CommonDatum_get_type_name(*args)

def StepDimTol_CommonDatum_get_type_descriptor(*args):
    """
    StepDimTol_CommonDatum_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_CommonDatum_get_type_descriptor(*args)

class Handle_StepDimTol_RunoutZoneOrientation(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_RunoutZoneOrientation self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneOrientation_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_RunoutZoneOrientation self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneOrientation_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_RunoutZoneOrientation self, StepDimTol_RunoutZoneOrientation thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneOrientation_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_RunoutZoneOrientation self, Handle_StepDimTol_RunoutZoneOrientation theHandle) -> Handle_StepDimTol_RunoutZoneOrientation
        assign(Handle_StepDimTol_RunoutZoneOrientation self, StepDimTol_RunoutZoneOrientation thePtr) -> Handle_StepDimTol_RunoutZoneOrientation
        assign(Handle_StepDimTol_RunoutZoneOrientation self, Handle_StepDimTol_RunoutZoneOrientation theHandle) -> Handle_StepDimTol_RunoutZoneOrientation

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneOrientation_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_RunoutZoneOrientation self) -> StepDimTol_RunoutZoneOrientation

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneOrientation_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_RunoutZoneOrientation self) -> StepDimTol_RunoutZoneOrientation

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneOrientation___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_RunoutZoneOrientation self) -> StepDimTol_RunoutZoneOrientation

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneOrientation___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_RunoutZoneOrientation___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_RunoutZoneOrientation___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_RunoutZoneOrientation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_RunoutZoneOrientation_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_RunoutZoneOrientation

    def Init(self, *args):
        """
        Init(Handle_StepDimTol_RunoutZoneOrientation self, Handle_StepBasic_PlaneAngleMeasureWithUnit theAngle)

        Init all field own and inherited

        :type theAngle: OCC.wrapper.StepBasic.Handle_StepBasic_PlaneAngleMeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneOrientation_Init(self, *args)


    def Angle(self, *args):
        """
        Angle(Handle_StepDimTol_RunoutZoneOrientation self) -> Handle_StepBasic_PlaneAngleMeasureWithUnit

        Returns field Angle

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_PlaneAngleMeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneOrientation_Angle(self, *args)


    def SetAngle(self, *args):
        """
        SetAngle(Handle_StepDimTol_RunoutZoneOrientation self, Handle_StepBasic_PlaneAngleMeasureWithUnit theAngle)

        Set field Angle

        :type theAngle: OCC.wrapper.StepBasic.Handle_StepBasic_PlaneAngleMeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneOrientation_SetAngle(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_RunoutZoneOrientation self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneOrientation_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_RunoutZoneOrientation_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_RunoutZoneOrientation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_RunoutZoneOrientation self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneOrientation_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_RunoutZoneOrientation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_RunoutZoneOrientation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneOrientation_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_RunoutZoneOrientation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_RunoutZoneOrientation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneOrientation_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_RunoutZoneOrientation self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneOrientation_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_RunoutZoneOrientation self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneOrientation_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_RunoutZoneOrientation self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneOrientation_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_RunoutZoneOrientation self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_RunoutZoneOrientation_DecrementRefCounter(self, *args)

Handle_StepDimTol_RunoutZoneOrientation_swigregister = _StepDimTol.Handle_StepDimTol_RunoutZoneOrientation_swigregister
Handle_StepDimTol_RunoutZoneOrientation_swigregister(Handle_StepDimTol_RunoutZoneOrientation)

def Handle_StepDimTol_RunoutZoneOrientation_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_RunoutZoneOrientation_DownCast(thing)
Handle_StepDimTol_RunoutZoneOrientation_DownCast = _StepDimTol.Handle_StepDimTol_RunoutZoneOrientation_DownCast

class Handle_StepDimTol_HArray1OfDatumReference(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_HArray1OfDatumReference self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReference_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_HArray1OfDatumReference self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReference_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_HArray1OfDatumReference self, StepDimTol_HArray1OfDatumReference thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReference_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_HArray1OfDatumReference self, Handle_StepDimTol_HArray1OfDatumReference theHandle) -> Handle_StepDimTol_HArray1OfDatumReference
        assign(Handle_StepDimTol_HArray1OfDatumReference self, StepDimTol_HArray1OfDatumReference thePtr) -> Handle_StepDimTol_HArray1OfDatumReference
        assign(Handle_StepDimTol_HArray1OfDatumReference self, Handle_StepDimTol_HArray1OfDatumReference theHandle) -> Handle_StepDimTol_HArray1OfDatumReference

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReference_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_HArray1OfDatumReference self) -> StepDimTol_HArray1OfDatumReference

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReference_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_HArray1OfDatumReference self) -> StepDimTol_HArray1OfDatumReference

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReference___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_HArray1OfDatumReference self) -> StepDimTol_HArray1OfDatumReference

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReference___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReference___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReference___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_HArray1OfDatumReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_HArray1OfDatumReference_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_HArray1OfDatumReference

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepDimTol.StepDimTol_Array1OfDatumReference

        """
        res = _StepDimTol.Handle_StepDimTol_HArray1OfDatumReference_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepDimTol_HArray1OfDatumReference self) -> NCollection_Array1_Handle_StepDimTol_DatumReference

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_Array1OfDatumReference

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReference_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_HArray1OfDatumReference self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReference_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_HArray1OfDatumReference_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_HArray1OfDatumReference_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_HArray1OfDatumReference self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReference_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_HArray1OfDatumReference self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_HArray1OfDatumReference self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReference_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_HArray1OfDatumReference self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_HArray1OfDatumReference self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReference_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_HArray1OfDatumReference self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReference_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_HArray1OfDatumReference self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReference_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_HArray1OfDatumReference self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReference_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_HArray1OfDatumReference self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReference_DecrementRefCounter(self, *args)

Handle_StepDimTol_HArray1OfDatumReference_swigregister = _StepDimTol.Handle_StepDimTol_HArray1OfDatumReference_swigregister
Handle_StepDimTol_HArray1OfDatumReference_swigregister(Handle_StepDimTol_HArray1OfDatumReference)

def Handle_StepDimTol_HArray1OfDatumReference_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_HArray1OfDatumReference_DownCast(thing)
Handle_StepDimTol_HArray1OfDatumReference_DownCast = _StepDimTol.Handle_StepDimTol_HArray1OfDatumReference_DownCast

class NCollection_Array1_Handle_StepDimTol_DatumReference(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_StepDimTol_DatumReference self) -> NCollection_Array1< opencascade::handle< StepDimTol_DatumReference > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReference_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_StepDimTol_DatumReference self) -> NCollection_Array1< opencascade::handle< StepDimTol_DatumReference > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReference_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_StepDimTol_DatumReference self) -> NCollection_Array1< opencascade::handle< StepDimTol_DatumReference > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReference_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_StepDimTol_DatumReference self) -> NCollection_Array1< opencascade::handle< StepDimTol_DatumReference > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReference_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepDimTol.new_NCollection_Array1_Handle_StepDimTol_DatumReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_StepDimTol_DatumReference self, Handle_StepDimTol_DatumReference theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReference_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_StepDimTol_DatumReference self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReference_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_StepDimTol_DatumReference self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReference_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_StepDimTol_DatumReference self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReference_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_StepDimTol_DatumReference self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReference_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_StepDimTol_DatumReference self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReference_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_StepDimTol_DatumReference self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReference_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_StepDimTol_DatumReference self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReference_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_StepDimTol_DatumReference self, NCollection_Array1_Handle_StepDimTol_DatumReference theOther) -> NCollection_Array1_Handle_StepDimTol_DatumReference

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReference_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_StepDimTol_DatumReference self, NCollection_Array1_Handle_StepDimTol_DatumReference theOther) -> NCollection_Array1_Handle_StepDimTol_DatumReference

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReference_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_StepDimTol_DatumReference self, NCollection_Array1_Handle_StepDimTol_DatumReference theOther) -> NCollection_Array1_Handle_StepDimTol_DatumReference
        assign(NCollection_Array1_Handle_StepDimTol_DatumReference self, NCollection_Array1_Handle_StepDimTol_DatumReference theOther) -> NCollection_Array1_Handle_StepDimTol_DatumReference

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReference_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReference_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_StepDimTol_DatumReference self) -> Handle_StepDimTol_DatumReference

        @return first element

        :rtype: TheItemType &

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReference_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReference_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_StepDimTol_DatumReference self) -> Handle_StepDimTol_DatumReference

        @return last element

        :rtype: TheItemType &

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReference_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReference_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_StepDimTol_DatumReference self, Standard_Integer const theIndex) -> Handle_StepDimTol_DatumReference

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReference_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReference___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReference_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_StepDimTol_DatumReference self, Standard_Integer const theIndex, Handle_StepDimTol_DatumReference theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReference_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_StepDimTol_DatumReference self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReference_Resize(self, *args)

    __swig_destroy__ = _StepDimTol.delete_NCollection_Array1_Handle_StepDimTol_DatumReference
NCollection_Array1_Handle_StepDimTol_DatumReference_swigregister = _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReference_swigregister
NCollection_Array1_Handle_StepDimTol_DatumReference_swigregister(NCollection_Array1_Handle_StepDimTol_DatumReference)


try:
	StepDimTol_Array1OfDatumReference = NCollection_Array1_Handle_StepDimTol_DatumReference
except NameError:
	pass # does not exist, probably ignored

class Handle_StepDimTol_DatumTarget(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_DatumTarget self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_DatumTarget_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_DatumTarget self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_DatumTarget_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_DatumTarget self, StepDimTol_DatumTarget thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_DatumTarget_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_DatumTarget self, Handle_StepDimTol_DatumTarget theHandle) -> Handle_StepDimTol_DatumTarget
        assign(Handle_StepDimTol_DatumTarget self, StepDimTol_DatumTarget thePtr) -> Handle_StepDimTol_DatumTarget
        assign(Handle_StepDimTol_DatumTarget self, Handle_StepDimTol_DatumTarget theHandle) -> Handle_StepDimTol_DatumTarget

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_DatumTarget_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_DatumTarget self) -> StepDimTol_DatumTarget

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_DatumTarget_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_DatumTarget self) -> StepDimTol_DatumTarget

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_DatumTarget___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_DatumTarget self) -> StepDimTol_DatumTarget

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_DatumTarget___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_DatumTarget___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_DatumTarget___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_DatumTarget(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_DatumTarget_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_DatumTarget

    def Init(self, *args):
        """
        Init(Handle_StepDimTol_DatumTarget self, Handle_TCollection_HAsciiString theShapeAspect_Name, Handle_TCollection_HAsciiString theShapeAspect_Description, Handle_StepRepr_ProductDefinitionShape theShapeAspect_OfShape, StepData_Logical const theShapeAspect_ProductDefinitional, Handle_TCollection_HAsciiString theTargetId)

        Initialize all fields (own and inherited)

        :type theShapeAspect_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theShapeAspect_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theShapeAspect_OfShape: OCC.wrapper.StepDimTol.Handle_StepRepr_ProductDefinitionShape
        :type theShapeAspect_ProductDefinitional: OCC.wrapper.StepData.StepData_Logical
        :type theTargetId: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_DatumTarget_Init(self, *args)


    def TargetId(self, *args):
        """
        TargetId(Handle_StepDimTol_DatumTarget self) -> Handle_TCollection_HAsciiString

        Returns field TargetId

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_DatumTarget_TargetId(self, *args)


    def SetTargetId(self, *args):
        """
        SetTargetId(Handle_StepDimTol_DatumTarget self, Handle_TCollection_HAsciiString theTargetId)

        Set field TargetId

        :type theTargetId: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_DatumTarget_SetTargetId(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_DatumTarget self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_DatumTarget_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_DatumTarget_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_DatumTarget_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_DatumTarget self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_DatumTarget_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepDimTol_DatumTarget self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_DatumTarget_Name(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_DatumTarget self, Handle_TCollection_HAsciiString aDescription)

        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_DatumTarget_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_DatumTarget self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_DatumTarget_Description(self, *args)


    def SetOfShape(self, *args):
        """
        SetOfShape(Handle_StepDimTol_DatumTarget self, Handle_StepRepr_ProductDefinitionShape aOfShape)

        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepDimTol.Handle_StepDimTol_DatumTarget_SetOfShape(self, *args)


    def OfShape(self, *args):
        """
        OfShape(Handle_StepDimTol_DatumTarget self) -> Handle_StepRepr_ProductDefinitionShape

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepDimTol.Handle_StepDimTol_DatumTarget_OfShape(self, *args)


    def SetProductDefinitional(self, *args):
        """
        SetProductDefinitional(Handle_StepDimTol_DatumTarget self, StepData_Logical const aProductDefinitional)

        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepDimTol.Handle_StepDimTol_DatumTarget_SetProductDefinitional(self, *args)


    def ProductDefinitional(self, *args):
        """
        ProductDefinitional(Handle_StepDimTol_DatumTarget self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepDimTol.Handle_StepDimTol_DatumTarget_ProductDefinitional(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_DatumTarget self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_DatumTarget_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_DatumTarget self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_DatumTarget self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_DatumTarget_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_DatumTarget self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_DatumTarget self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_DatumTarget_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_DatumTarget self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_DatumTarget_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_DatumTarget self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_DatumTarget_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_DatumTarget self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_DatumTarget_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_DatumTarget self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_DatumTarget_DecrementRefCounter(self, *args)

Handle_StepDimTol_DatumTarget_swigregister = _StepDimTol.Handle_StepDimTol_DatumTarget_swigregister
Handle_StepDimTol_DatumTarget_swigregister(Handle_StepDimTol_DatumTarget)

def Handle_StepDimTol_DatumTarget_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_DatumTarget_DownCast(thing)
Handle_StepDimTol_DatumTarget_DownCast = _StepDimTol.Handle_StepDimTol_DatumTarget_DownCast

class NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment self) -> NCollection_Array1< opencascade::handle< StepDimTol_DatumReferenceCompartment > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment self) -> NCollection_Array1< opencascade::handle< StepDimTol_DatumReferenceCompartment > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment self) -> NCollection_Array1< opencascade::handle< StepDimTol_DatumReferenceCompartment > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment self) -> NCollection_Array1< opencascade::handle< StepDimTol_DatumReferenceCompartment > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepDimTol.new_NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment self, Handle_StepDimTol_DatumReferenceCompartment theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment self, NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment theOther) -> NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment self, NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment theOther) -> NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment self, NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment theOther) -> NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment
        assign(NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment self, NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment theOther) -> NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment self) -> Handle_StepDimTol_DatumReferenceCompartment

        @return first element

        :rtype: TheItemType &

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment self) -> Handle_StepDimTol_DatumReferenceCompartment

        @return last element

        :rtype: TheItemType &

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment self, Standard_Integer const theIndex) -> Handle_StepDimTol_DatumReferenceCompartment

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment self, Standard_Integer const theIndex, Handle_StepDimTol_DatumReferenceCompartment theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment_Resize(self, *args)

    __swig_destroy__ = _StepDimTol.delete_NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment
NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment_swigregister = _StepDimTol.NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment_swigregister
NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment_swigregister(NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment)


try:
	StepDimTol_Array1OfDatumReferenceCompartment = NCollection_Array1_Handle_StepDimTol_DatumReferenceCompartment
except NameError:
	pass # does not exist, probably ignored

class StepDimTol_UnequallyDisposedGeometricTolerance(StepDimTol_GeometricTolerance):
    """Representation of STEP entity UnequallyDisposedGeometricTolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_UnequallyDisposedGeometricTolerance
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_UnequallyDisposedGeometricTolerance(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_UnequallyDisposedGeometricTolerance self) -> StepDimTol_UnequallyDisposedGeometricTolerance

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_UnequallyDisposedGeometricTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepDimTol_UnequallyDisposedGeometricTolerance self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect, Handle_StepBasic_LengthMeasureWithUnit theDisplacement)

        Initialize all fields (own and inherited)

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget
        :type theDisplacement: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.StepDimTol_UnequallyDisposedGeometricTolerance_Init(self, *args)


    def Displacement(self, *args):
        """
        Displacement(StepDimTol_UnequallyDisposedGeometricTolerance self) -> Handle_StepBasic_LengthMeasureWithUnit

        Returns field Displacement

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.StepDimTol_UnequallyDisposedGeometricTolerance_Displacement(self, *args)


    def SetDisplacement(self, *args):
        """
        SetDisplacement(StepDimTol_UnequallyDisposedGeometricTolerance self, Handle_StepBasic_LengthMeasureWithUnit theDisplacement)

        Set field Displacement

        :type theDisplacement: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.StepDimTol_UnequallyDisposedGeometricTolerance_SetDisplacement(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_UnequallyDisposedGeometricTolerance_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_UnequallyDisposedGeometricTolerance_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_UnequallyDisposedGeometricTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_UnequallyDisposedGeometricTolerance
StepDimTol_UnequallyDisposedGeometricTolerance_swigregister = _StepDimTol.StepDimTol_UnequallyDisposedGeometricTolerance_swigregister
StepDimTol_UnequallyDisposedGeometricTolerance_swigregister(StepDimTol_UnequallyDisposedGeometricTolerance)

def StepDimTol_UnequallyDisposedGeometricTolerance_get_type_name(*args):
    """
    StepDimTol_UnequallyDisposedGeometricTolerance_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_UnequallyDisposedGeometricTolerance_get_type_name(*args)

def StepDimTol_UnequallyDisposedGeometricTolerance_get_type_descriptor(*args):
    """
    StepDimTol_UnequallyDisposedGeometricTolerance_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_UnequallyDisposedGeometricTolerance_get_type_descriptor(*args)

class NCollection_Array1_StepDimTol_DatumSystemOrReference(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_StepDimTol_DatumSystemOrReference self) -> NCollection_Array1< StepDimTol_DatumSystemOrReference >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_DatumSystemOrReference_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_StepDimTol_DatumSystemOrReference self) -> NCollection_Array1< StepDimTol_DatumSystemOrReference >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_DatumSystemOrReference_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_StepDimTol_DatumSystemOrReference self) -> NCollection_Array1< StepDimTol_DatumSystemOrReference >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_DatumSystemOrReference_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_StepDimTol_DatumSystemOrReference self) -> NCollection_Array1< StepDimTol_DatumSystemOrReference >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_DatumSystemOrReference_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepDimTol.new_NCollection_Array1_StepDimTol_DatumSystemOrReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_StepDimTol_DatumSystemOrReference self, StepDimTol_DatumSystemOrReference theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_DatumSystemOrReference_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_StepDimTol_DatumSystemOrReference self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_DatumSystemOrReference_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_StepDimTol_DatumSystemOrReference self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_DatumSystemOrReference_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_StepDimTol_DatumSystemOrReference self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_DatumSystemOrReference_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_StepDimTol_DatumSystemOrReference self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_DatumSystemOrReference_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_StepDimTol_DatumSystemOrReference self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_DatumSystemOrReference_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_StepDimTol_DatumSystemOrReference self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_DatumSystemOrReference_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_StepDimTol_DatumSystemOrReference self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_DatumSystemOrReference_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_StepDimTol_DatumSystemOrReference self, NCollection_Array1_StepDimTol_DatumSystemOrReference theOther) -> NCollection_Array1_StepDimTol_DatumSystemOrReference

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_DatumSystemOrReference_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_StepDimTol_DatumSystemOrReference self, NCollection_Array1_StepDimTol_DatumSystemOrReference theOther) -> NCollection_Array1_StepDimTol_DatumSystemOrReference

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_DatumSystemOrReference_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_StepDimTol_DatumSystemOrReference self, NCollection_Array1_StepDimTol_DatumSystemOrReference theOther) -> NCollection_Array1_StepDimTol_DatumSystemOrReference
        assign(NCollection_Array1_StepDimTol_DatumSystemOrReference self, NCollection_Array1_StepDimTol_DatumSystemOrReference theOther) -> NCollection_Array1_StepDimTol_DatumSystemOrReference

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_DatumSystemOrReference_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepDimTol.NCollection_Array1_StepDimTol_DatumSystemOrReference_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_StepDimTol_DatumSystemOrReference self) -> StepDimTol_DatumSystemOrReference

        @return first element

        :rtype: TheItemType &

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_DatumSystemOrReference_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepDimTol.NCollection_Array1_StepDimTol_DatumSystemOrReference_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_StepDimTol_DatumSystemOrReference self) -> StepDimTol_DatumSystemOrReference

        @return last element

        :rtype: TheItemType &

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_DatumSystemOrReference_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepDimTol.NCollection_Array1_StepDimTol_DatumSystemOrReference_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_StepDimTol_DatumSystemOrReference self, Standard_Integer const theIndex) -> StepDimTol_DatumSystemOrReference

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_DatumSystemOrReference_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepDimTol.NCollection_Array1_StepDimTol_DatumSystemOrReference___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepDimTol.NCollection_Array1_StepDimTol_DatumSystemOrReference_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_StepDimTol_DatumSystemOrReference self, Standard_Integer const theIndex, StepDimTol_DatumSystemOrReference theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_DatumSystemOrReference_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_StepDimTol_DatumSystemOrReference self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepDimTol.NCollection_Array1_StepDimTol_DatumSystemOrReference_Resize(self, *args)

    __swig_destroy__ = _StepDimTol.delete_NCollection_Array1_StepDimTol_DatumSystemOrReference
NCollection_Array1_StepDimTol_DatumSystemOrReference_swigregister = _StepDimTol.NCollection_Array1_StepDimTol_DatumSystemOrReference_swigregister
NCollection_Array1_StepDimTol_DatumSystemOrReference_swigregister(NCollection_Array1_StepDimTol_DatumSystemOrReference)


try:
	StepDimTol_Array1OfDatumSystemOrReference = NCollection_Array1_StepDimTol_DatumSystemOrReference
except NameError:
	pass # does not exist, probably ignored

class Handle_StepDimTol_ToleranceZoneDefinition(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_ToleranceZoneDefinition self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneDefinition_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_ToleranceZoneDefinition self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneDefinition_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_ToleranceZoneDefinition self, StepDimTol_ToleranceZoneDefinition thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneDefinition_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_ToleranceZoneDefinition self, Handle_StepDimTol_ToleranceZoneDefinition theHandle) -> Handle_StepDimTol_ToleranceZoneDefinition
        assign(Handle_StepDimTol_ToleranceZoneDefinition self, StepDimTol_ToleranceZoneDefinition thePtr) -> Handle_StepDimTol_ToleranceZoneDefinition
        assign(Handle_StepDimTol_ToleranceZoneDefinition self, Handle_StepDimTol_ToleranceZoneDefinition theHandle) -> Handle_StepDimTol_ToleranceZoneDefinition

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneDefinition_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_ToleranceZoneDefinition self) -> StepDimTol_ToleranceZoneDefinition

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneDefinition_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_ToleranceZoneDefinition self) -> StepDimTol_ToleranceZoneDefinition

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneDefinition___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_ToleranceZoneDefinition self) -> StepDimTol_ToleranceZoneDefinition

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneDefinition___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneDefinition___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_ToleranceZoneDefinition___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_ToleranceZoneDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_ToleranceZoneDefinition_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_ToleranceZoneDefinition

    def Init(self, *args):
        """
        Init(Handle_StepDimTol_ToleranceZoneDefinition self, Handle_StepDimTol_ToleranceZone theZone, Handle_StepRepr_HArray1OfShapeAspect theBoundaries)

        Initialize all fields (own and inherited)

        :type theZone: OCC.wrapper.StepDimTol.Handle_StepDimTol_ToleranceZone
        :type theBoundaries: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfShapeAspect

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneDefinition_Init(self, *args)


    def Boundaries(self, *args):
        """
        Boundaries(Handle_StepDimTol_ToleranceZoneDefinition self) -> Handle_StepRepr_HArray1OfShapeAspect

        Returns field Boundaries

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfShapeAspect

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneDefinition_Boundaries(self, *args)


    def SetBoundaries(self, *args):
        """
        SetBoundaries(Handle_StepDimTol_ToleranceZoneDefinition self, Handle_StepRepr_HArray1OfShapeAspect theBoundaries)

        Set field Boundaries

        :type theBoundaries: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfShapeAspect

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneDefinition_SetBoundaries(self, *args)


    def NbBoundaries(self, *args):
        """
        NbBoundaries(Handle_StepDimTol_ToleranceZoneDefinition self) -> Standard_Integer

        Returns number of Boundaries

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneDefinition_NbBoundaries(self, *args)


    def BoundariesValue(self, *args):
        """
        BoundariesValue(Handle_StepDimTol_ToleranceZoneDefinition self, Standard_Integer const theNum) -> Handle_StepRepr_ShapeAspect

        Returns Boundaries with the given number

        :type theNum: int
        :rtype: OCC.wrapper.StepDimTol.Handle_StepRepr_ShapeAspect

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneDefinition_BoundariesValue(self, *args)


    def SetBoundariesValue(self, *args):
        """
        SetBoundariesValue(Handle_StepDimTol_ToleranceZoneDefinition self, Standard_Integer const theNum, Handle_StepRepr_ShapeAspect theItem)

        Sets Boundaries with given number

        :type theNum: int
        :type theItem: OCC.wrapper.StepDimTol.Handle_StepRepr_ShapeAspect

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneDefinition_SetBoundariesValue(self, *args)


    def Zone(self, *args):
        """
        Zone(Handle_StepDimTol_ToleranceZoneDefinition self) -> Handle_StepDimTol_ToleranceZone

        Returns field Zone

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_ToleranceZone

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneDefinition_Zone(self, *args)


    def SetZone(self, *args):
        """
        SetZone(Handle_StepDimTol_ToleranceZoneDefinition self, Handle_StepDimTol_ToleranceZone theZone)

        Set field Zone

        :type theZone: OCC.wrapper.StepDimTol.Handle_StepDimTol_ToleranceZone

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneDefinition_SetZone(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_ToleranceZoneDefinition self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneDefinition_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_ToleranceZoneDefinition_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_ToleranceZoneDefinition_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_ToleranceZoneDefinition self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneDefinition_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_ToleranceZoneDefinition self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_ToleranceZoneDefinition self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneDefinition_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_ToleranceZoneDefinition self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_ToleranceZoneDefinition self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneDefinition_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_ToleranceZoneDefinition self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneDefinition_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_ToleranceZoneDefinition self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneDefinition_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_ToleranceZoneDefinition self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneDefinition_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_ToleranceZoneDefinition self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_ToleranceZoneDefinition_DecrementRefCounter(self, *args)

Handle_StepDimTol_ToleranceZoneDefinition_swigregister = _StepDimTol.Handle_StepDimTol_ToleranceZoneDefinition_swigregister
Handle_StepDimTol_ToleranceZoneDefinition_swigregister(Handle_StepDimTol_ToleranceZoneDefinition)

def Handle_StepDimTol_ToleranceZoneDefinition_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_ToleranceZoneDefinition_DownCast(thing)
Handle_StepDimTol_ToleranceZoneDefinition_DownCast = _StepDimTol.Handle_StepDimTol_ToleranceZoneDefinition_DownCast

class Handle_StepDimTol_PositionTolerance(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_PositionTolerance self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_PositionTolerance_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_PositionTolerance self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_PositionTolerance_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_PositionTolerance self, StepDimTol_PositionTolerance thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_PositionTolerance_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_PositionTolerance self, Handle_StepDimTol_PositionTolerance theHandle) -> Handle_StepDimTol_PositionTolerance
        assign(Handle_StepDimTol_PositionTolerance self, StepDimTol_PositionTolerance thePtr) -> Handle_StepDimTol_PositionTolerance
        assign(Handle_StepDimTol_PositionTolerance self, Handle_StepDimTol_PositionTolerance theHandle) -> Handle_StepDimTol_PositionTolerance

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_PositionTolerance_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_PositionTolerance self) -> StepDimTol_PositionTolerance

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_PositionTolerance_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_PositionTolerance self) -> StepDimTol_PositionTolerance

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_PositionTolerance___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_PositionTolerance self) -> StepDimTol_PositionTolerance

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_PositionTolerance___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_PositionTolerance___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_PositionTolerance___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_PositionTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_PositionTolerance_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_PositionTolerance

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_PositionTolerance self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_PositionTolerance_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_PositionTolerance_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_PositionTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepDimTol_PositionTolerance self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect)
        Init(Handle_StepDimTol_PositionTolerance self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect)

        Initialize all fields (own and inherited) AP242

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_PositionTolerance_Init(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepDimTol_PositionTolerance self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_PositionTolerance_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_PositionTolerance self, Handle_TCollection_HAsciiString theName)

        Set field Name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_PositionTolerance_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_PositionTolerance self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_PositionTolerance_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_PositionTolerance self, Handle_TCollection_HAsciiString theDescription)

        Set field Description

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_PositionTolerance_SetDescription(self, *args)


    def Magnitude(self, *args):
        """
        Magnitude(Handle_StepDimTol_PositionTolerance self) -> Handle_StepBasic_MeasureWithUnit

        Returns field Magnitude

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_PositionTolerance_Magnitude(self, *args)


    def SetMagnitude(self, *args):
        """
        SetMagnitude(Handle_StepDimTol_PositionTolerance self, Handle_StepBasic_MeasureWithUnit theMagnitude)

        Set field Magnitude

        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_PositionTolerance_SetMagnitude(self, *args)


    def TolerancedShapeAspect(self, *args):
        """
        TolerancedShapeAspect(Handle_StepDimTol_PositionTolerance self) -> StepDimTol_GeometricToleranceTarget

        Returns field TolerancedShapeAspect
        Note: in AP214(203) type of this attribute can be only StepRepr_ShapeAspect

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_PositionTolerance_TolerancedShapeAspect(self, *args)


    def SetTolerancedShapeAspect(self, *args):
        """
        SetTolerancedShapeAspect(Handle_StepDimTol_PositionTolerance self, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect)
        SetTolerancedShapeAspect(Handle_StepDimTol_PositionTolerance self, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect)

        Set field TolerancedShapeAspect AP242

        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_PositionTolerance_SetTolerancedShapeAspect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_PositionTolerance self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_PositionTolerance_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_PositionTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_PositionTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_PositionTolerance_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_PositionTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_PositionTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_PositionTolerance_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_PositionTolerance self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_PositionTolerance_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_PositionTolerance self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_PositionTolerance_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_PositionTolerance self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_PositionTolerance_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_PositionTolerance self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_PositionTolerance_DecrementRefCounter(self, *args)

Handle_StepDimTol_PositionTolerance_swigregister = _StepDimTol.Handle_StepDimTol_PositionTolerance_swigregister
Handle_StepDimTol_PositionTolerance_swigregister(Handle_StepDimTol_PositionTolerance)

def Handle_StepDimTol_PositionTolerance_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_PositionTolerance_DownCast(thing)
Handle_StepDimTol_PositionTolerance_DownCast = _StepDimTol.Handle_StepDimTol_PositionTolerance_DownCast

class Handle_StepDimTol_GeometricToleranceWithDatumReference(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_GeometricToleranceWithDatumReference self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_GeometricToleranceWithDatumReference self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_GeometricToleranceWithDatumReference self, StepDimTol_GeometricToleranceWithDatumReference thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_GeometricToleranceWithDatumReference self, Handle_StepDimTol_GeometricToleranceWithDatumReference theHandle) -> Handle_StepDimTol_GeometricToleranceWithDatumReference
        assign(Handle_StepDimTol_GeometricToleranceWithDatumReference self, StepDimTol_GeometricToleranceWithDatumReference thePtr) -> Handle_StepDimTol_GeometricToleranceWithDatumReference
        assign(Handle_StepDimTol_GeometricToleranceWithDatumReference self, Handle_StepDimTol_GeometricToleranceWithDatumReference theHandle) -> Handle_StepDimTol_GeometricToleranceWithDatumReference

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_GeometricToleranceWithDatumReference self) -> StepDimTol_GeometricToleranceWithDatumReference

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_GeometricToleranceWithDatumReference self) -> StepDimTol_GeometricToleranceWithDatumReference

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_GeometricToleranceWithDatumReference self) -> StepDimTol_GeometricToleranceWithDatumReference

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_GeometricToleranceWithDatumReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_GeometricToleranceWithDatumReference

    def Init(self, *args):
        """
        Init(Handle_StepDimTol_GeometricToleranceWithDatumReference self, Handle_TCollection_HAsciiString theGeometricTolerance_Name, Handle_TCollection_HAsciiString theGeometricTolerance_Description, Handle_StepBasic_MeasureWithUnit theGeometricTolerance_Magnitude, Handle_StepRepr_ShapeAspect theGeometricTolerance_TolerancedShapeAspect, Handle_StepDimTol_HArray1OfDatumReference theDatumSystem)
        Init(Handle_StepDimTol_GeometricToleranceWithDatumReference self, Handle_TCollection_HAsciiString theGeometricTolerance_Name, Handle_TCollection_HAsciiString theGeometricTolerance_Description, Handle_StepBasic_MeasureWithUnit theGeometricTolerance_Magnitude, StepDimTol_GeometricToleranceTarget theGeometricTolerance_TolerancedShapeAspect, Handle_StepDimTol_HArray1OfDatumSystemOrReference theDatumSystem)

        Initialize all fields (own and inherited) AP242

        :type theGeometricTolerance_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theGeometricTolerance_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theGeometricTolerance_Magnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type theGeometricTolerance_TolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget
        :type theDatumSystem: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference_Init(self, *args)


    def DatumSystem(self, *args):
        """
        DatumSystem(Handle_StepDimTol_GeometricToleranceWithDatumReference self) -> Handle_StepDimTol_HArray1OfDatumReference

        Returns field DatumSystem AP214

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumReference

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference_DatumSystem(self, *args)


    def DatumSystemAP242(self, *args):
        """
        DatumSystemAP242(Handle_StepDimTol_GeometricToleranceWithDatumReference self) -> Handle_StepDimTol_HArray1OfDatumSystemOrReference

        Returns field DatumSystem AP242

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference_DatumSystemAP242(self, *args)


    def SetDatumSystem(self, *args):
        """
        SetDatumSystem(Handle_StepDimTol_GeometricToleranceWithDatumReference self, Handle_StepDimTol_HArray1OfDatumReference theDatumSystem)
        SetDatumSystem(Handle_StepDimTol_GeometricToleranceWithDatumReference self, Handle_StepDimTol_HArray1OfDatumSystemOrReference theDatumSystem)

        Set field DatumSystem AP242

        :type theDatumSystem: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference_SetDatumSystem(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_GeometricToleranceWithDatumReference self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Name(self, *args):
        """
        Name(Handle_StepDimTol_GeometricToleranceWithDatumReference self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_GeometricToleranceWithDatumReference self, Handle_TCollection_HAsciiString theName)

        Set field Name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_GeometricToleranceWithDatumReference self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_GeometricToleranceWithDatumReference self, Handle_TCollection_HAsciiString theDescription)

        Set field Description

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference_SetDescription(self, *args)


    def Magnitude(self, *args):
        """
        Magnitude(Handle_StepDimTol_GeometricToleranceWithDatumReference self) -> Handle_StepBasic_MeasureWithUnit

        Returns field Magnitude

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference_Magnitude(self, *args)


    def SetMagnitude(self, *args):
        """
        SetMagnitude(Handle_StepDimTol_GeometricToleranceWithDatumReference self, Handle_StepBasic_MeasureWithUnit theMagnitude)

        Set field Magnitude

        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference_SetMagnitude(self, *args)


    def TolerancedShapeAspect(self, *args):
        """
        TolerancedShapeAspect(Handle_StepDimTol_GeometricToleranceWithDatumReference self) -> StepDimTol_GeometricToleranceTarget

        Returns field TolerancedShapeAspect
        Note: in AP214(203) type of this attribute can be only StepRepr_ShapeAspect

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference_TolerancedShapeAspect(self, *args)


    def SetTolerancedShapeAspect(self, *args):
        """
        SetTolerancedShapeAspect(Handle_StepDimTol_GeometricToleranceWithDatumReference self, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect)
        SetTolerancedShapeAspect(Handle_StepDimTol_GeometricToleranceWithDatumReference self, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect)

        Set field TolerancedShapeAspect AP242

        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference_SetTolerancedShapeAspect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_GeometricToleranceWithDatumReference self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_GeometricToleranceWithDatumReference self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_GeometricToleranceWithDatumReference self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_GeometricToleranceWithDatumReference self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_GeometricToleranceWithDatumReference self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_GeometricToleranceWithDatumReference self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_GeometricToleranceWithDatumReference self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_GeometricToleranceWithDatumReference self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_GeometricToleranceWithDatumReference self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference_DecrementRefCounter(self, *args)

Handle_StepDimTol_GeometricToleranceWithDatumReference_swigregister = _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference_swigregister
Handle_StepDimTol_GeometricToleranceWithDatumReference_swigregister(Handle_StepDimTol_GeometricToleranceWithDatumReference)

def Handle_StepDimTol_GeometricToleranceWithDatumReference_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference_DownCast(thing)
Handle_StepDimTol_GeometricToleranceWithDatumReference_DownCast = _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference_DownCast

class StepDimTol_CylindricityTolerance(StepDimTol_GeometricTolerance):
    """Representation of STEP entity CylindricityTolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_CylindricityTolerance
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_CylindricityTolerance(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_CylindricityTolerance self) -> StepDimTol_CylindricityTolerance

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_CylindricityTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_CylindricityTolerance_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_CylindricityTolerance_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_CylindricityTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_CylindricityTolerance
StepDimTol_CylindricityTolerance_swigregister = _StepDimTol.StepDimTol_CylindricityTolerance_swigregister
StepDimTol_CylindricityTolerance_swigregister(StepDimTol_CylindricityTolerance)

def StepDimTol_CylindricityTolerance_get_type_name(*args):
    """
    StepDimTol_CylindricityTolerance_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_CylindricityTolerance_get_type_name(*args)

def StepDimTol_CylindricityTolerance_get_type_descriptor(*args):
    """
    StepDimTol_CylindricityTolerance_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_CylindricityTolerance_get_type_descriptor(*args)

class Handle_StepDimTol_UnequallyDisposedGeometricTolerance(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_UnequallyDisposedGeometricTolerance self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_UnequallyDisposedGeometricTolerance self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_UnequallyDisposedGeometricTolerance self, StepDimTol_UnequallyDisposedGeometricTolerance thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_UnequallyDisposedGeometricTolerance self, Handle_StepDimTol_UnequallyDisposedGeometricTolerance theHandle) -> Handle_StepDimTol_UnequallyDisposedGeometricTolerance
        assign(Handle_StepDimTol_UnequallyDisposedGeometricTolerance self, StepDimTol_UnequallyDisposedGeometricTolerance thePtr) -> Handle_StepDimTol_UnequallyDisposedGeometricTolerance
        assign(Handle_StepDimTol_UnequallyDisposedGeometricTolerance self, Handle_StepDimTol_UnequallyDisposedGeometricTolerance theHandle) -> Handle_StepDimTol_UnequallyDisposedGeometricTolerance

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_UnequallyDisposedGeometricTolerance self) -> StepDimTol_UnequallyDisposedGeometricTolerance

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_UnequallyDisposedGeometricTolerance self) -> StepDimTol_UnequallyDisposedGeometricTolerance

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_UnequallyDisposedGeometricTolerance self) -> StepDimTol_UnequallyDisposedGeometricTolerance

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_UnequallyDisposedGeometricTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_UnequallyDisposedGeometricTolerance

    def Init(self, *args):
        """
        Init(Handle_StepDimTol_UnequallyDisposedGeometricTolerance self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect, Handle_StepBasic_LengthMeasureWithUnit theDisplacement)

        Initialize all fields (own and inherited)

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget
        :type theDisplacement: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance_Init(self, *args)


    def Displacement(self, *args):
        """
        Displacement(Handle_StepDimTol_UnequallyDisposedGeometricTolerance self) -> Handle_StepBasic_LengthMeasureWithUnit

        Returns field Displacement

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance_Displacement(self, *args)


    def SetDisplacement(self, *args):
        """
        SetDisplacement(Handle_StepDimTol_UnequallyDisposedGeometricTolerance self, Handle_StepBasic_LengthMeasureWithUnit theDisplacement)

        Set field Displacement

        :type theDisplacement: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance_SetDisplacement(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_UnequallyDisposedGeometricTolerance self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Name(self, *args):
        """
        Name(Handle_StepDimTol_UnequallyDisposedGeometricTolerance self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_UnequallyDisposedGeometricTolerance self, Handle_TCollection_HAsciiString theName)

        Set field Name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_UnequallyDisposedGeometricTolerance self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_UnequallyDisposedGeometricTolerance self, Handle_TCollection_HAsciiString theDescription)

        Set field Description

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance_SetDescription(self, *args)


    def Magnitude(self, *args):
        """
        Magnitude(Handle_StepDimTol_UnequallyDisposedGeometricTolerance self) -> Handle_StepBasic_MeasureWithUnit

        Returns field Magnitude

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance_Magnitude(self, *args)


    def SetMagnitude(self, *args):
        """
        SetMagnitude(Handle_StepDimTol_UnequallyDisposedGeometricTolerance self, Handle_StepBasic_MeasureWithUnit theMagnitude)

        Set field Magnitude

        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance_SetMagnitude(self, *args)


    def TolerancedShapeAspect(self, *args):
        """
        TolerancedShapeAspect(Handle_StepDimTol_UnequallyDisposedGeometricTolerance self) -> StepDimTol_GeometricToleranceTarget

        Returns field TolerancedShapeAspect
        Note: in AP214(203) type of this attribute can be only StepRepr_ShapeAspect

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance_TolerancedShapeAspect(self, *args)


    def SetTolerancedShapeAspect(self, *args):
        """
        SetTolerancedShapeAspect(Handle_StepDimTol_UnequallyDisposedGeometricTolerance self, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect)
        SetTolerancedShapeAspect(Handle_StepDimTol_UnequallyDisposedGeometricTolerance self, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect)

        Set field TolerancedShapeAspect AP242

        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance_SetTolerancedShapeAspect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_UnequallyDisposedGeometricTolerance self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_UnequallyDisposedGeometricTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_UnequallyDisposedGeometricTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_UnequallyDisposedGeometricTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_UnequallyDisposedGeometricTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_UnequallyDisposedGeometricTolerance self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_UnequallyDisposedGeometricTolerance self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_UnequallyDisposedGeometricTolerance self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_UnequallyDisposedGeometricTolerance self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance_DecrementRefCounter(self, *args)

Handle_StepDimTol_UnequallyDisposedGeometricTolerance_swigregister = _StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance_swigregister
Handle_StepDimTol_UnequallyDisposedGeometricTolerance_swigregister(Handle_StepDimTol_UnequallyDisposedGeometricTolerance)

def Handle_StepDimTol_UnequallyDisposedGeometricTolerance_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance_DownCast(thing)
Handle_StepDimTol_UnequallyDisposedGeometricTolerance_DownCast = _StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance_DownCast

class Handle_StepDimTol_GeometricToleranceWithDefinedUnit(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_GeometricToleranceWithDefinedUnit self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_GeometricToleranceWithDefinedUnit self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_GeometricToleranceWithDefinedUnit self, StepDimTol_GeometricToleranceWithDefinedUnit thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_GeometricToleranceWithDefinedUnit self, Handle_StepDimTol_GeometricToleranceWithDefinedUnit theHandle) -> Handle_StepDimTol_GeometricToleranceWithDefinedUnit
        assign(Handle_StepDimTol_GeometricToleranceWithDefinedUnit self, StepDimTol_GeometricToleranceWithDefinedUnit thePtr) -> Handle_StepDimTol_GeometricToleranceWithDefinedUnit
        assign(Handle_StepDimTol_GeometricToleranceWithDefinedUnit self, Handle_StepDimTol_GeometricToleranceWithDefinedUnit theHandle) -> Handle_StepDimTol_GeometricToleranceWithDefinedUnit

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_GeometricToleranceWithDefinedUnit self) -> StepDimTol_GeometricToleranceWithDefinedUnit

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_GeometricToleranceWithDefinedUnit self) -> StepDimTol_GeometricToleranceWithDefinedUnit

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_GeometricToleranceWithDefinedUnit self) -> StepDimTol_GeometricToleranceWithDefinedUnit

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_GeometricToleranceWithDefinedUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_GeometricToleranceWithDefinedUnit

    def Init(self, *args):
        """
        Init(Handle_StepDimTol_GeometricToleranceWithDefinedUnit self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect, Handle_StepBasic_LengthMeasureWithUnit theUnitSize)
        Init(Handle_StepDimTol_GeometricToleranceWithDefinedUnit self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect, Handle_StepBasic_LengthMeasureWithUnit theUnitSize)

        Initialize all fields (own and inherited) AP242

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget
        :type theUnitSize: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit_Init(self, *args)


    def UnitSize(self, *args):
        """
        UnitSize(Handle_StepDimTol_GeometricToleranceWithDefinedUnit self) -> Handle_StepBasic_LengthMeasureWithUnit

        Returns field UnitSize

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit_UnitSize(self, *args)


    def SetUnitSize(self, *args):
        """
        SetUnitSize(Handle_StepDimTol_GeometricToleranceWithDefinedUnit self, Handle_StepBasic_LengthMeasureWithUnit theUnitSize)

        Set field UnitSize

        :type theUnitSize: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit_SetUnitSize(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_GeometricToleranceWithDefinedUnit self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Name(self, *args):
        """
        Name(Handle_StepDimTol_GeometricToleranceWithDefinedUnit self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_GeometricToleranceWithDefinedUnit self, Handle_TCollection_HAsciiString theName)

        Set field Name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_GeometricToleranceWithDefinedUnit self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_GeometricToleranceWithDefinedUnit self, Handle_TCollection_HAsciiString theDescription)

        Set field Description

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit_SetDescription(self, *args)


    def Magnitude(self, *args):
        """
        Magnitude(Handle_StepDimTol_GeometricToleranceWithDefinedUnit self) -> Handle_StepBasic_MeasureWithUnit

        Returns field Magnitude

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit_Magnitude(self, *args)


    def SetMagnitude(self, *args):
        """
        SetMagnitude(Handle_StepDimTol_GeometricToleranceWithDefinedUnit self, Handle_StepBasic_MeasureWithUnit theMagnitude)

        Set field Magnitude

        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit_SetMagnitude(self, *args)


    def TolerancedShapeAspect(self, *args):
        """
        TolerancedShapeAspect(Handle_StepDimTol_GeometricToleranceWithDefinedUnit self) -> StepDimTol_GeometricToleranceTarget

        Returns field TolerancedShapeAspect
        Note: in AP214(203) type of this attribute can be only StepRepr_ShapeAspect

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit_TolerancedShapeAspect(self, *args)


    def SetTolerancedShapeAspect(self, *args):
        """
        SetTolerancedShapeAspect(Handle_StepDimTol_GeometricToleranceWithDefinedUnit self, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect)
        SetTolerancedShapeAspect(Handle_StepDimTol_GeometricToleranceWithDefinedUnit self, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect)

        Set field TolerancedShapeAspect AP242

        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit_SetTolerancedShapeAspect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_GeometricToleranceWithDefinedUnit self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_GeometricToleranceWithDefinedUnit self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_GeometricToleranceWithDefinedUnit self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_GeometricToleranceWithDefinedUnit self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_GeometricToleranceWithDefinedUnit self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_GeometricToleranceWithDefinedUnit self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_GeometricToleranceWithDefinedUnit self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_GeometricToleranceWithDefinedUnit self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_GeometricToleranceWithDefinedUnit self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit_DecrementRefCounter(self, *args)

Handle_StepDimTol_GeometricToleranceWithDefinedUnit_swigregister = _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit_swigregister
Handle_StepDimTol_GeometricToleranceWithDefinedUnit_swigregister(Handle_StepDimTol_GeometricToleranceWithDefinedUnit)

def Handle_StepDimTol_GeometricToleranceWithDefinedUnit_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit_DownCast(thing)
Handle_StepDimTol_GeometricToleranceWithDefinedUnit_DownCast = _StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit_DownCast

class Handle_StepDimTol_CylindricityTolerance(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_CylindricityTolerance self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_CylindricityTolerance_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_CylindricityTolerance self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_CylindricityTolerance_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_CylindricityTolerance self, StepDimTol_CylindricityTolerance thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_CylindricityTolerance_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_CylindricityTolerance self, Handle_StepDimTol_CylindricityTolerance theHandle) -> Handle_StepDimTol_CylindricityTolerance
        assign(Handle_StepDimTol_CylindricityTolerance self, StepDimTol_CylindricityTolerance thePtr) -> Handle_StepDimTol_CylindricityTolerance
        assign(Handle_StepDimTol_CylindricityTolerance self, Handle_StepDimTol_CylindricityTolerance theHandle) -> Handle_StepDimTol_CylindricityTolerance

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_CylindricityTolerance_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_CylindricityTolerance self) -> StepDimTol_CylindricityTolerance

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_CylindricityTolerance_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_CylindricityTolerance self) -> StepDimTol_CylindricityTolerance

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_CylindricityTolerance___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_CylindricityTolerance self) -> StepDimTol_CylindricityTolerance

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_CylindricityTolerance___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_CylindricityTolerance___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_CylindricityTolerance___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_CylindricityTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_CylindricityTolerance_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_CylindricityTolerance

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_CylindricityTolerance self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_CylindricityTolerance_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_CylindricityTolerance_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_CylindricityTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepDimTol_CylindricityTolerance self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect)
        Init(Handle_StepDimTol_CylindricityTolerance self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect)

        Initialize all fields (own and inherited) AP242

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_CylindricityTolerance_Init(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepDimTol_CylindricityTolerance self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_CylindricityTolerance_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_CylindricityTolerance self, Handle_TCollection_HAsciiString theName)

        Set field Name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_CylindricityTolerance_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_CylindricityTolerance self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_CylindricityTolerance_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_CylindricityTolerance self, Handle_TCollection_HAsciiString theDescription)

        Set field Description

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_CylindricityTolerance_SetDescription(self, *args)


    def Magnitude(self, *args):
        """
        Magnitude(Handle_StepDimTol_CylindricityTolerance self) -> Handle_StepBasic_MeasureWithUnit

        Returns field Magnitude

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_CylindricityTolerance_Magnitude(self, *args)


    def SetMagnitude(self, *args):
        """
        SetMagnitude(Handle_StepDimTol_CylindricityTolerance self, Handle_StepBasic_MeasureWithUnit theMagnitude)

        Set field Magnitude

        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_CylindricityTolerance_SetMagnitude(self, *args)


    def TolerancedShapeAspect(self, *args):
        """
        TolerancedShapeAspect(Handle_StepDimTol_CylindricityTolerance self) -> StepDimTol_GeometricToleranceTarget

        Returns field TolerancedShapeAspect
        Note: in AP214(203) type of this attribute can be only StepRepr_ShapeAspect

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_CylindricityTolerance_TolerancedShapeAspect(self, *args)


    def SetTolerancedShapeAspect(self, *args):
        """
        SetTolerancedShapeAspect(Handle_StepDimTol_CylindricityTolerance self, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect)
        SetTolerancedShapeAspect(Handle_StepDimTol_CylindricityTolerance self, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect)

        Set field TolerancedShapeAspect AP242

        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_CylindricityTolerance_SetTolerancedShapeAspect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_CylindricityTolerance self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_CylindricityTolerance_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_CylindricityTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_CylindricityTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_CylindricityTolerance_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_CylindricityTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_CylindricityTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_CylindricityTolerance_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_CylindricityTolerance self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_CylindricityTolerance_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_CylindricityTolerance self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_CylindricityTolerance_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_CylindricityTolerance self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_CylindricityTolerance_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_CylindricityTolerance self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_CylindricityTolerance_DecrementRefCounter(self, *args)

Handle_StepDimTol_CylindricityTolerance_swigregister = _StepDimTol.Handle_StepDimTol_CylindricityTolerance_swigregister
Handle_StepDimTol_CylindricityTolerance_swigregister(Handle_StepDimTol_CylindricityTolerance)

def Handle_StepDimTol_CylindricityTolerance_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_CylindricityTolerance_DownCast(thing)
Handle_StepDimTol_CylindricityTolerance_DownCast = _StepDimTol.Handle_StepDimTol_CylindricityTolerance_DownCast

class Handle_StepDimTol_FlatnessTolerance(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_FlatnessTolerance self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_FlatnessTolerance_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_FlatnessTolerance self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_FlatnessTolerance_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_FlatnessTolerance self, StepDimTol_FlatnessTolerance thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_FlatnessTolerance_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_FlatnessTolerance self, Handle_StepDimTol_FlatnessTolerance theHandle) -> Handle_StepDimTol_FlatnessTolerance
        assign(Handle_StepDimTol_FlatnessTolerance self, StepDimTol_FlatnessTolerance thePtr) -> Handle_StepDimTol_FlatnessTolerance
        assign(Handle_StepDimTol_FlatnessTolerance self, Handle_StepDimTol_FlatnessTolerance theHandle) -> Handle_StepDimTol_FlatnessTolerance

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_FlatnessTolerance_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_FlatnessTolerance self) -> StepDimTol_FlatnessTolerance

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_FlatnessTolerance_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_FlatnessTolerance self) -> StepDimTol_FlatnessTolerance

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_FlatnessTolerance___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_FlatnessTolerance self) -> StepDimTol_FlatnessTolerance

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_FlatnessTolerance___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_FlatnessTolerance___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_FlatnessTolerance___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_FlatnessTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_FlatnessTolerance_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_FlatnessTolerance

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_FlatnessTolerance self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_FlatnessTolerance_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_FlatnessTolerance_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_FlatnessTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepDimTol_FlatnessTolerance self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect)
        Init(Handle_StepDimTol_FlatnessTolerance self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect)

        Initialize all fields (own and inherited) AP242

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_FlatnessTolerance_Init(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepDimTol_FlatnessTolerance self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_FlatnessTolerance_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_FlatnessTolerance self, Handle_TCollection_HAsciiString theName)

        Set field Name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_FlatnessTolerance_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_FlatnessTolerance self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_FlatnessTolerance_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_FlatnessTolerance self, Handle_TCollection_HAsciiString theDescription)

        Set field Description

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_FlatnessTolerance_SetDescription(self, *args)


    def Magnitude(self, *args):
        """
        Magnitude(Handle_StepDimTol_FlatnessTolerance self) -> Handle_StepBasic_MeasureWithUnit

        Returns field Magnitude

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_FlatnessTolerance_Magnitude(self, *args)


    def SetMagnitude(self, *args):
        """
        SetMagnitude(Handle_StepDimTol_FlatnessTolerance self, Handle_StepBasic_MeasureWithUnit theMagnitude)

        Set field Magnitude

        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_FlatnessTolerance_SetMagnitude(self, *args)


    def TolerancedShapeAspect(self, *args):
        """
        TolerancedShapeAspect(Handle_StepDimTol_FlatnessTolerance self) -> StepDimTol_GeometricToleranceTarget

        Returns field TolerancedShapeAspect
        Note: in AP214(203) type of this attribute can be only StepRepr_ShapeAspect

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_FlatnessTolerance_TolerancedShapeAspect(self, *args)


    def SetTolerancedShapeAspect(self, *args):
        """
        SetTolerancedShapeAspect(Handle_StepDimTol_FlatnessTolerance self, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect)
        SetTolerancedShapeAspect(Handle_StepDimTol_FlatnessTolerance self, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect)

        Set field TolerancedShapeAspect AP242

        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_FlatnessTolerance_SetTolerancedShapeAspect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_FlatnessTolerance self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_FlatnessTolerance_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_FlatnessTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_FlatnessTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_FlatnessTolerance_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_FlatnessTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_FlatnessTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_FlatnessTolerance_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_FlatnessTolerance self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_FlatnessTolerance_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_FlatnessTolerance self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_FlatnessTolerance_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_FlatnessTolerance self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_FlatnessTolerance_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_FlatnessTolerance self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_FlatnessTolerance_DecrementRefCounter(self, *args)

Handle_StepDimTol_FlatnessTolerance_swigregister = _StepDimTol.Handle_StepDimTol_FlatnessTolerance_swigregister
Handle_StepDimTol_FlatnessTolerance_swigregister(Handle_StepDimTol_FlatnessTolerance)

def Handle_StepDimTol_FlatnessTolerance_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_FlatnessTolerance_DownCast(thing)
Handle_StepDimTol_FlatnessTolerance_DownCast = _StepDimTol.Handle_StepDimTol_FlatnessTolerance_DownCast

class Handle_StepDimTol_DatumReferenceCompartment(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_DatumReferenceCompartment self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_DatumReferenceCompartment self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_DatumReferenceCompartment self, StepDimTol_DatumReferenceCompartment thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_DatumReferenceCompartment self, Handle_StepDimTol_DatumReferenceCompartment theHandle) -> Handle_StepDimTol_DatumReferenceCompartment
        assign(Handle_StepDimTol_DatumReferenceCompartment self, StepDimTol_DatumReferenceCompartment thePtr) -> Handle_StepDimTol_DatumReferenceCompartment
        assign(Handle_StepDimTol_DatumReferenceCompartment self, Handle_StepDimTol_DatumReferenceCompartment theHandle) -> Handle_StepDimTol_DatumReferenceCompartment

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_DatumReferenceCompartment self) -> StepDimTol_DatumReferenceCompartment

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_DatumReferenceCompartment self) -> StepDimTol_DatumReferenceCompartment

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_DatumReferenceCompartment self) -> StepDimTol_DatumReferenceCompartment

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_DatumReferenceCompartment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_DatumReferenceCompartment

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_DatumReferenceCompartment self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepDimTol_DatumReferenceCompartment self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepRepr_ProductDefinitionShape theOfShape, StepData_Logical const theProductDefinitional, StepDimTol_DatumOrCommonDatum theBase, Standard_Boolean const theHasModifiers, Handle_StepDimTol_HArray1OfDatumReferenceModifier theModifiers)

        Initialize all fields (own and inherited)

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theOfShape: OCC.wrapper.StepDimTol.Handle_StepRepr_ProductDefinitionShape
        :type theProductDefinitional: OCC.wrapper.StepData.StepData_Logical
        :type theBase: OCC.wrapper.StepDimTol.StepDimTol_DatumOrCommonDatum
        :type theHasModifiers: bool
        :type theModifiers: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_Init(self, *args)


    def Base(self, *args):
        """
        Base(Handle_StepDimTol_DatumReferenceCompartment self) -> StepDimTol_DatumOrCommonDatum

        Returns field Base

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_DatumOrCommonDatum

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_Base(self, *args)


    def SetBase(self, *args):
        """
        SetBase(Handle_StepDimTol_DatumReferenceCompartment self, StepDimTol_DatumOrCommonDatum theBase)

        Set field Base

        :type theBase: OCC.wrapper.StepDimTol.StepDimTol_DatumOrCommonDatum

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_SetBase(self, *args)


    def HasModifiers(self, *args):
        """
        HasModifiers(Handle_StepDimTol_DatumReferenceCompartment self) -> Standard_Boolean

        Indicates is field Modifiers exist

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_HasModifiers(self, *args)


    def Modifiers(self, *args):
        """
        Modifiers(Handle_StepDimTol_DatumReferenceCompartment self) -> Handle_StepDimTol_HArray1OfDatumReferenceModifier

        Returns field Modifiers

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_Modifiers(self, *args)


    def SetModifiers(self, *args):
        """
        SetModifiers(Handle_StepDimTol_DatumReferenceCompartment self, Handle_StepDimTol_HArray1OfDatumReferenceModifier theModifiers)

        Set field Modifiers

        :type theModifiers: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumReferenceModifier

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_SetModifiers(self, *args)


    def NbModifiers(self, *args):
        """
        NbModifiers(Handle_StepDimTol_DatumReferenceCompartment self) -> Standard_Integer

        Returns number of Modifiers

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_NbModifiers(self, *args)


    def ModifiersValue(self, *args):
        """
        ModifiersValue(Handle_StepDimTol_DatumReferenceCompartment self, Standard_Integer const theNum) -> StepDimTol_DatumReferenceModifier
        ModifiersValue(Handle_StepDimTol_DatumReferenceCompartment self, Standard_Integer const theNum, StepDimTol_DatumReferenceModifier theItem)

        Sets Modifiers with given number

        :type theNum: int
        :type theItem: OCC.wrapper.StepDimTol.StepDimTol_DatumReferenceModifier

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_ModifiersValue(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_DatumReferenceCompartment self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepDimTol_DatumReferenceCompartment self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_Name(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_DatumReferenceCompartment self, Handle_TCollection_HAsciiString aDescription)

        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_DatumReferenceCompartment self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_Description(self, *args)


    def SetOfShape(self, *args):
        """
        SetOfShape(Handle_StepDimTol_DatumReferenceCompartment self, Handle_StepRepr_ProductDefinitionShape aOfShape)

        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_SetOfShape(self, *args)


    def OfShape(self, *args):
        """
        OfShape(Handle_StepDimTol_DatumReferenceCompartment self) -> Handle_StepRepr_ProductDefinitionShape

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_OfShape(self, *args)


    def SetProductDefinitional(self, *args):
        """
        SetProductDefinitional(Handle_StepDimTol_DatumReferenceCompartment self, StepData_Logical const aProductDefinitional)

        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_SetProductDefinitional(self, *args)


    def ProductDefinitional(self, *args):
        """
        ProductDefinitional(Handle_StepDimTol_DatumReferenceCompartment self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_ProductDefinitional(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_DatumReferenceCompartment self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_DatumReferenceCompartment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_DatumReferenceCompartment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_DatumReferenceCompartment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_DatumReferenceCompartment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_DatumReferenceCompartment self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_DatumReferenceCompartment self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_DatumReferenceCompartment self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_DatumReferenceCompartment self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_DecrementRefCounter(self, *args)

Handle_StepDimTol_DatumReferenceCompartment_swigregister = _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_swigregister
Handle_StepDimTol_DatumReferenceCompartment_swigregister(Handle_StepDimTol_DatumReferenceCompartment)

def Handle_StepDimTol_DatumReferenceCompartment_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_DownCast(thing)
Handle_StepDimTol_DatumReferenceCompartment_DownCast = _StepDimTol.Handle_StepDimTol_DatumReferenceCompartment_DownCast

class Handle_StepDimTol_CommonDatum(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_CommonDatum self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_CommonDatum_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_CommonDatum self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_CommonDatum_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_CommonDatum self, StepDimTol_CommonDatum thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_CommonDatum_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_CommonDatum self, Handle_StepDimTol_CommonDatum theHandle) -> Handle_StepDimTol_CommonDatum
        assign(Handle_StepDimTol_CommonDatum self, StepDimTol_CommonDatum thePtr) -> Handle_StepDimTol_CommonDatum
        assign(Handle_StepDimTol_CommonDatum self, Handle_StepDimTol_CommonDatum theHandle) -> Handle_StepDimTol_CommonDatum

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_CommonDatum_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_CommonDatum self) -> StepDimTol_CommonDatum

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_CommonDatum_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_CommonDatum self) -> StepDimTol_CommonDatum

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_CommonDatum___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_CommonDatum self) -> StepDimTol_CommonDatum

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_CommonDatum___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_CommonDatum___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_CommonDatum___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_CommonDatum(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_CommonDatum_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_CommonDatum

    def Init(self, *args):
        """
        Init(Handle_StepDimTol_CommonDatum self, Handle_TCollection_HAsciiString theShapeAspect_Name, Handle_TCollection_HAsciiString theShapeAspect_Description, Handle_StepRepr_ProductDefinitionShape theShapeAspect_OfShape, StepData_Logical const theShapeAspect_ProductDefinitional, Handle_TCollection_HAsciiString theDatum_Name, Handle_TCollection_HAsciiString theDatum_Description, Handle_StepRepr_ProductDefinitionShape theDatum_OfShape, StepData_Logical const theDatum_ProductDefinitional, Handle_TCollection_HAsciiString theDatum_Identification)

        Initialize all fields (own and inherited)

        :type theShapeAspect_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theShapeAspect_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theShapeAspect_OfShape: OCC.wrapper.StepDimTol.Handle_StepRepr_ProductDefinitionShape
        :type theShapeAspect_ProductDefinitional: OCC.wrapper.StepData.StepData_Logical
        :type theDatum_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDatum_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDatum_OfShape: OCC.wrapper.StepDimTol.Handle_StepRepr_ProductDefinitionShape
        :type theDatum_ProductDefinitional: OCC.wrapper.StepData.StepData_Logical
        :type theDatum_Identification: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_CommonDatum_Init(self, *args)


    def Datum(self, *args):
        """
        Datum(Handle_StepDimTol_CommonDatum self) -> Handle_StepDimTol_Datum

        Returns data for supertype Datum

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_Datum

        """
        return _StepDimTol.Handle_StepDimTol_CommonDatum_Datum(self, *args)


    def SetDatum(self, *args):
        """
        SetDatum(Handle_StepDimTol_CommonDatum self, Handle_StepDimTol_Datum theDatum)

        Set data for supertype Datum

        :type theDatum: OCC.wrapper.StepDimTol.Handle_StepDimTol_Datum

        """
        return _StepDimTol.Handle_StepDimTol_CommonDatum_SetDatum(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_CommonDatum self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_CommonDatum_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_CommonDatum_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_CommonDatum_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_CommonDatum self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_CommonDatum_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepDimTol_CommonDatum self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_CommonDatum_Name(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_CommonDatum self, Handle_TCollection_HAsciiString aDescription)

        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_CommonDatum_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_CommonDatum self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_CommonDatum_Description(self, *args)


    def SetOfShape(self, *args):
        """
        SetOfShape(Handle_StepDimTol_CommonDatum self, Handle_StepRepr_ProductDefinitionShape aOfShape)

        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepDimTol.Handle_StepDimTol_CommonDatum_SetOfShape(self, *args)


    def OfShape(self, *args):
        """
        OfShape(Handle_StepDimTol_CommonDatum self) -> Handle_StepRepr_ProductDefinitionShape

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepDimTol.Handle_StepDimTol_CommonDatum_OfShape(self, *args)


    def SetProductDefinitional(self, *args):
        """
        SetProductDefinitional(Handle_StepDimTol_CommonDatum self, StepData_Logical const aProductDefinitional)

        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepDimTol.Handle_StepDimTol_CommonDatum_SetProductDefinitional(self, *args)


    def ProductDefinitional(self, *args):
        """
        ProductDefinitional(Handle_StepDimTol_CommonDatum self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepDimTol.Handle_StepDimTol_CommonDatum_ProductDefinitional(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_CommonDatum self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_CommonDatum_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_CommonDatum self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_CommonDatum self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_CommonDatum_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_CommonDatum self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_CommonDatum self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_CommonDatum_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_CommonDatum self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_CommonDatum_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_CommonDatum self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_CommonDatum_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_CommonDatum self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_CommonDatum_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_CommonDatum self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_CommonDatum_DecrementRefCounter(self, *args)

Handle_StepDimTol_CommonDatum_swigregister = _StepDimTol.Handle_StepDimTol_CommonDatum_swigregister
Handle_StepDimTol_CommonDatum_swigregister(Handle_StepDimTol_CommonDatum)

def Handle_StepDimTol_CommonDatum_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_CommonDatum_DownCast(thing)
Handle_StepDimTol_CommonDatum_DownCast = _StepDimTol.Handle_StepDimTol_CommonDatum_DownCast

class Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self, StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self, Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod theHandle) -> Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod
        assign(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self, StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod thePtr) -> Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod
        assign(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self, Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod theHandle) -> Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self) -> StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self) -> StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self) -> StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod

    def Init(self, *args):
        """
        Init(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect, Handle_StepDimTol_GeometricToleranceWithDatumReference theGTWDR, Handle_StepDimTol_GeometricToleranceWithModifiers theGTWM, StepDimTol_GeometricToleranceType const theType)
        Init(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepBasic_MeasureWithUnit aMagnitude, StepDimTol_GeometricToleranceTarget aTolerancedShapeAspect, Handle_StepDimTol_GeometricToleranceWithDatumReference aGTWDR, Handle_StepDimTol_GeometricToleranceWithModifiers aGTWM, StepDimTol_GeometricToleranceType const theType)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type aTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget
        :type aGTWDR: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference
        :type aGTWM: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers
        :type theType: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceType

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_Init(self, *args)


    def SetGeometricToleranceWithDatumReference(self, *args):
        """
        SetGeometricToleranceWithDatumReference(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self, Handle_StepDimTol_GeometricToleranceWithDatumReference theGTWDR)

        :type theGTWDR: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_SetGeometricToleranceWithDatumReference(self, *args)


    def GetGeometricToleranceWithDatumReference(self, *args):
        """
        GetGeometricToleranceWithDatumReference(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self) -> Handle_StepDimTol_GeometricToleranceWithDatumReference

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_GetGeometricToleranceWithDatumReference(self, *args)


    def SetGeometricToleranceWithModifiers(self, *args):
        """
        SetGeometricToleranceWithModifiers(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self, Handle_StepDimTol_GeometricToleranceWithModifiers theGTWM)

        :type theGTWM: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_SetGeometricToleranceWithModifiers(self, *args)


    def GetGeometricToleranceWithModifiers(self, *args):
        """
        GetGeometricToleranceWithModifiers(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self) -> Handle_StepDimTol_GeometricToleranceWithModifiers

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_GetGeometricToleranceWithModifiers(self, *args)


    def SetGeometricToleranceType(self, *args):
        """
        SetGeometricToleranceType(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self, StepDimTol_GeometricToleranceType const theType)

        :type theType: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceType

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_SetGeometricToleranceType(self, *args)


    def GetToleranceType(self, *args):
        """
        GetToleranceType(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self) -> StepDimTol_GeometricToleranceType

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceType

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_GetToleranceType(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Name(self, *args):
        """
        Name(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self, Handle_TCollection_HAsciiString theName)

        Set field Name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self, Handle_TCollection_HAsciiString theDescription)

        Set field Description

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_SetDescription(self, *args)


    def Magnitude(self, *args):
        """
        Magnitude(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self) -> Handle_StepBasic_MeasureWithUnit

        Returns field Magnitude

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_Magnitude(self, *args)


    def SetMagnitude(self, *args):
        """
        SetMagnitude(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self, Handle_StepBasic_MeasureWithUnit theMagnitude)

        Set field Magnitude

        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_SetMagnitude(self, *args)


    def TolerancedShapeAspect(self, *args):
        """
        TolerancedShapeAspect(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self) -> StepDimTol_GeometricToleranceTarget

        Returns field TolerancedShapeAspect
        Note: in AP214(203) type of this attribute can be only StepRepr_ShapeAspect

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_TolerancedShapeAspect(self, *args)


    def SetTolerancedShapeAspect(self, *args):
        """
        SetTolerancedShapeAspect(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect)
        SetTolerancedShapeAspect(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect)

        Set field TolerancedShapeAspect AP242

        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_SetTolerancedShapeAspect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_DecrementRefCounter(self, *args)

Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_swigregister = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_swigregister
Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_swigregister(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod)

def Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_DownCast(thing)
Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_DownCast = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod_DownCast

class Handle_StepDimTol_AngularityTolerance(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_AngularityTolerance self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_AngularityTolerance_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_AngularityTolerance self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_AngularityTolerance_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_AngularityTolerance self, StepDimTol_AngularityTolerance thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_AngularityTolerance_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_AngularityTolerance self, Handle_StepDimTol_AngularityTolerance theHandle) -> Handle_StepDimTol_AngularityTolerance
        assign(Handle_StepDimTol_AngularityTolerance self, StepDimTol_AngularityTolerance thePtr) -> Handle_StepDimTol_AngularityTolerance
        assign(Handle_StepDimTol_AngularityTolerance self, Handle_StepDimTol_AngularityTolerance theHandle) -> Handle_StepDimTol_AngularityTolerance

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_AngularityTolerance_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_AngularityTolerance self) -> StepDimTol_AngularityTolerance

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_AngularityTolerance_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_AngularityTolerance self) -> StepDimTol_AngularityTolerance

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_AngularityTolerance___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_AngularityTolerance self) -> StepDimTol_AngularityTolerance

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_AngularityTolerance___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_AngularityTolerance___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_AngularityTolerance___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_AngularityTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_AngularityTolerance_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_AngularityTolerance

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_AngularityTolerance self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_AngularityTolerance_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_AngularityTolerance_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_AngularityTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepDimTol_AngularityTolerance self, Handle_TCollection_HAsciiString theGeometricTolerance_Name, Handle_TCollection_HAsciiString theGeometricTolerance_Description, Handle_StepBasic_MeasureWithUnit theGeometricTolerance_Magnitude, Handle_StepRepr_ShapeAspect theGeometricTolerance_TolerancedShapeAspect, Handle_StepDimTol_HArray1OfDatumReference theDatumSystem)
        Init(Handle_StepDimTol_AngularityTolerance self, Handle_TCollection_HAsciiString theGeometricTolerance_Name, Handle_TCollection_HAsciiString theGeometricTolerance_Description, Handle_StepBasic_MeasureWithUnit theGeometricTolerance_Magnitude, StepDimTol_GeometricToleranceTarget theGeometricTolerance_TolerancedShapeAspect, Handle_StepDimTol_HArray1OfDatumSystemOrReference theDatumSystem)

        Initialize all fields (own and inherited) AP242

        :type theGeometricTolerance_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theGeometricTolerance_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theGeometricTolerance_Magnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type theGeometricTolerance_TolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget
        :type theDatumSystem: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference

        """
        return _StepDimTol.Handle_StepDimTol_AngularityTolerance_Init(self, *args)


    def DatumSystem(self, *args):
        """
        DatumSystem(Handle_StepDimTol_AngularityTolerance self) -> Handle_StepDimTol_HArray1OfDatumReference

        Returns field DatumSystem AP214

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumReference

        """
        return _StepDimTol.Handle_StepDimTol_AngularityTolerance_DatumSystem(self, *args)


    def DatumSystemAP242(self, *args):
        """
        DatumSystemAP242(Handle_StepDimTol_AngularityTolerance self) -> Handle_StepDimTol_HArray1OfDatumSystemOrReference

        Returns field DatumSystem AP242

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference

        """
        return _StepDimTol.Handle_StepDimTol_AngularityTolerance_DatumSystemAP242(self, *args)


    def SetDatumSystem(self, *args):
        """
        SetDatumSystem(Handle_StepDimTol_AngularityTolerance self, Handle_StepDimTol_HArray1OfDatumReference theDatumSystem)
        SetDatumSystem(Handle_StepDimTol_AngularityTolerance self, Handle_StepDimTol_HArray1OfDatumSystemOrReference theDatumSystem)

        Set field DatumSystem AP242

        :type theDatumSystem: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference

        """
        return _StepDimTol.Handle_StepDimTol_AngularityTolerance_SetDatumSystem(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepDimTol_AngularityTolerance self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_AngularityTolerance_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_AngularityTolerance self, Handle_TCollection_HAsciiString theName)

        Set field Name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_AngularityTolerance_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_AngularityTolerance self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_AngularityTolerance_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_AngularityTolerance self, Handle_TCollection_HAsciiString theDescription)

        Set field Description

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_AngularityTolerance_SetDescription(self, *args)


    def Magnitude(self, *args):
        """
        Magnitude(Handle_StepDimTol_AngularityTolerance self) -> Handle_StepBasic_MeasureWithUnit

        Returns field Magnitude

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_AngularityTolerance_Magnitude(self, *args)


    def SetMagnitude(self, *args):
        """
        SetMagnitude(Handle_StepDimTol_AngularityTolerance self, Handle_StepBasic_MeasureWithUnit theMagnitude)

        Set field Magnitude

        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_AngularityTolerance_SetMagnitude(self, *args)


    def TolerancedShapeAspect(self, *args):
        """
        TolerancedShapeAspect(Handle_StepDimTol_AngularityTolerance self) -> StepDimTol_GeometricToleranceTarget

        Returns field TolerancedShapeAspect
        Note: in AP214(203) type of this attribute can be only StepRepr_ShapeAspect

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_AngularityTolerance_TolerancedShapeAspect(self, *args)


    def SetTolerancedShapeAspect(self, *args):
        """
        SetTolerancedShapeAspect(Handle_StepDimTol_AngularityTolerance self, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect)
        SetTolerancedShapeAspect(Handle_StepDimTol_AngularityTolerance self, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect)

        Set field TolerancedShapeAspect AP242

        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_AngularityTolerance_SetTolerancedShapeAspect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_AngularityTolerance self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_AngularityTolerance_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_AngularityTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_AngularityTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_AngularityTolerance_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_AngularityTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_AngularityTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_AngularityTolerance_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_AngularityTolerance self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_AngularityTolerance_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_AngularityTolerance self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_AngularityTolerance_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_AngularityTolerance self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_AngularityTolerance_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_AngularityTolerance self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_AngularityTolerance_DecrementRefCounter(self, *args)

Handle_StepDimTol_AngularityTolerance_swigregister = _StepDimTol.Handle_StepDimTol_AngularityTolerance_swigregister
Handle_StepDimTol_AngularityTolerance_swigregister(Handle_StepDimTol_AngularityTolerance)

def Handle_StepDimTol_AngularityTolerance_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_AngularityTolerance_DownCast(thing)
Handle_StepDimTol_AngularityTolerance_DownCast = _StepDimTol.Handle_StepDimTol_AngularityTolerance_DownCast

class StepDimTol_TotalRunoutTolerance(StepDimTol_GeometricToleranceWithDatumReference):
    """Representation of STEP entity TotalRunoutTolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_TotalRunoutTolerance
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_TotalRunoutTolerance(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_TotalRunoutTolerance self) -> StepDimTol_TotalRunoutTolerance

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_TotalRunoutTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_TotalRunoutTolerance_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_TotalRunoutTolerance_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_TotalRunoutTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_TotalRunoutTolerance
StepDimTol_TotalRunoutTolerance_swigregister = _StepDimTol.StepDimTol_TotalRunoutTolerance_swigregister
StepDimTol_TotalRunoutTolerance_swigregister(StepDimTol_TotalRunoutTolerance)

def StepDimTol_TotalRunoutTolerance_get_type_name(*args):
    """
    StepDimTol_TotalRunoutTolerance_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_TotalRunoutTolerance_get_type_name(*args)

def StepDimTol_TotalRunoutTolerance_get_type_descriptor(*args):
    """
    StepDimTol_TotalRunoutTolerance_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_TotalRunoutTolerance_get_type_descriptor(*args)

class StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol(StepDimTol_GeometricTolerance):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol(self) 
            return h


    def __init__(self, *args):
        """__init__(StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self) -> StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol"""
        this = _StepDimTol.new_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepBasic_MeasureWithUnit aMagnitude, Handle_StepRepr_ShapeAspect aTolerancedShapeAspect, Handle_StepDimTol_GeometricToleranceWithDatumReference aGTWDR, Handle_StepDimTol_ModifiedGeometricTolerance aMGT)
        Init(StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepBasic_MeasureWithUnit aMagnitude, StepDimTol_GeometricToleranceTarget aTolerancedShapeAspect, Handle_StepDimTol_GeometricToleranceWithDatumReference aGTWDR, Handle_StepDimTol_ModifiedGeometricTolerance aMGT)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type aTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget
        :type aGTWDR: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference
        :type aMGT: OCC.wrapper.StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_Init(self, *args)


    def SetGeometricToleranceWithDatumReference(self, *args):
        """
        SetGeometricToleranceWithDatumReference(StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self, Handle_StepDimTol_GeometricToleranceWithDatumReference aGTWDR)

        :type aGTWDR: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_SetGeometricToleranceWithDatumReference(self, *args)


    def GetGeometricToleranceWithDatumReference(self, *args):
        """
        GetGeometricToleranceWithDatumReference(StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self) -> Handle_StepDimTol_GeometricToleranceWithDatumReference

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_GetGeometricToleranceWithDatumReference(self, *args)


    def SetModifiedGeometricTolerance(self, *args):
        """
        SetModifiedGeometricTolerance(StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self, Handle_StepDimTol_ModifiedGeometricTolerance aMGT)

        :type aMGT: OCC.wrapper.StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_SetModifiedGeometricTolerance(self, *args)


    def GetModifiedGeometricTolerance(self, *args):
        """
        GetModifiedGeometricTolerance(StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self) -> Handle_StepDimTol_ModifiedGeometricTolerance

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_GetModifiedGeometricTolerance(self, *args)


    def SetPositionTolerance(self, *args):
        """
        SetPositionTolerance(StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self, Handle_StepDimTol_PositionTolerance aPT)

        :type aPT: OCC.wrapper.StepDimTol.Handle_StepDimTol_PositionTolerance

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_SetPositionTolerance(self, *args)


    def GetPositionTolerance(self, *args):
        """
        GetPositionTolerance(StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self) -> Handle_StepDimTol_PositionTolerance

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_PositionTolerance

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_GetPositionTolerance(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol
StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_swigregister = _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_swigregister
StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_swigregister(StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol)

def StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_get_type_name(*args):
    """
    StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_get_type_name(*args)

def StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_get_type_descriptor(*args):
    """
    StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_get_type_descriptor(*args)

class StepDimTol_SurfaceProfileTolerance(StepDimTol_GeometricTolerance):
    """Representation of STEP entity SurfaceProfileTolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepDimTol_SurfaceProfileTolerance
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepDimTol_SurfaceProfileTolerance(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepDimTol_SurfaceProfileTolerance self) -> StepDimTol_SurfaceProfileTolerance

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_SurfaceProfileTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepDimTol.StepDimTol_SurfaceProfileTolerance_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepDimTol.StepDimTol_SurfaceProfileTolerance_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.StepDimTol_SurfaceProfileTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepDimTol.delete_StepDimTol_SurfaceProfileTolerance
StepDimTol_SurfaceProfileTolerance_swigregister = _StepDimTol.StepDimTol_SurfaceProfileTolerance_swigregister
StepDimTol_SurfaceProfileTolerance_swigregister(StepDimTol_SurfaceProfileTolerance)

def StepDimTol_SurfaceProfileTolerance_get_type_name(*args):
    """
    StepDimTol_SurfaceProfileTolerance_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepDimTol.StepDimTol_SurfaceProfileTolerance_get_type_name(*args)

def StepDimTol_SurfaceProfileTolerance_get_type_descriptor(*args):
    """
    StepDimTol_SurfaceProfileTolerance_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepDimTol.StepDimTol_SurfaceProfileTolerance_get_type_descriptor(*args)

class Handle_StepDimTol_SurfaceProfileTolerance(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_SurfaceProfileTolerance self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_SurfaceProfileTolerance self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_SurfaceProfileTolerance self, StepDimTol_SurfaceProfileTolerance thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_SurfaceProfileTolerance self, Handle_StepDimTol_SurfaceProfileTolerance theHandle) -> Handle_StepDimTol_SurfaceProfileTolerance
        assign(Handle_StepDimTol_SurfaceProfileTolerance self, StepDimTol_SurfaceProfileTolerance thePtr) -> Handle_StepDimTol_SurfaceProfileTolerance
        assign(Handle_StepDimTol_SurfaceProfileTolerance self, Handle_StepDimTol_SurfaceProfileTolerance theHandle) -> Handle_StepDimTol_SurfaceProfileTolerance

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_SurfaceProfileTolerance self) -> StepDimTol_SurfaceProfileTolerance

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_SurfaceProfileTolerance self) -> StepDimTol_SurfaceProfileTolerance

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_SurfaceProfileTolerance self) -> StepDimTol_SurfaceProfileTolerance

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_SurfaceProfileTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_SurfaceProfileTolerance

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_SurfaceProfileTolerance self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepDimTol_SurfaceProfileTolerance self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect)
        Init(Handle_StepDimTol_SurfaceProfileTolerance self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect)

        Initialize all fields (own and inherited) AP242

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance_Init(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepDimTol_SurfaceProfileTolerance self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_SurfaceProfileTolerance self, Handle_TCollection_HAsciiString theName)

        Set field Name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_SurfaceProfileTolerance self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_SurfaceProfileTolerance self, Handle_TCollection_HAsciiString theDescription)

        Set field Description

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance_SetDescription(self, *args)


    def Magnitude(self, *args):
        """
        Magnitude(Handle_StepDimTol_SurfaceProfileTolerance self) -> Handle_StepBasic_MeasureWithUnit

        Returns field Magnitude

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance_Magnitude(self, *args)


    def SetMagnitude(self, *args):
        """
        SetMagnitude(Handle_StepDimTol_SurfaceProfileTolerance self, Handle_StepBasic_MeasureWithUnit theMagnitude)

        Set field Magnitude

        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance_SetMagnitude(self, *args)


    def TolerancedShapeAspect(self, *args):
        """
        TolerancedShapeAspect(Handle_StepDimTol_SurfaceProfileTolerance self) -> StepDimTol_GeometricToleranceTarget

        Returns field TolerancedShapeAspect
        Note: in AP214(203) type of this attribute can be only StepRepr_ShapeAspect

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance_TolerancedShapeAspect(self, *args)


    def SetTolerancedShapeAspect(self, *args):
        """
        SetTolerancedShapeAspect(Handle_StepDimTol_SurfaceProfileTolerance self, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect)
        SetTolerancedShapeAspect(Handle_StepDimTol_SurfaceProfileTolerance self, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect)

        Set field TolerancedShapeAspect AP242

        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance_SetTolerancedShapeAspect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_SurfaceProfileTolerance self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_SurfaceProfileTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_SurfaceProfileTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_SurfaceProfileTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_SurfaceProfileTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_SurfaceProfileTolerance self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_SurfaceProfileTolerance self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_SurfaceProfileTolerance self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_SurfaceProfileTolerance self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance_DecrementRefCounter(self, *args)

Handle_StepDimTol_SurfaceProfileTolerance_swigregister = _StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance_swigregister
Handle_StepDimTol_SurfaceProfileTolerance_swigregister(Handle_StepDimTol_SurfaceProfileTolerance)

def Handle_StepDimTol_SurfaceProfileTolerance_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance_DownCast(thing)
Handle_StepDimTol_SurfaceProfileTolerance_DownCast = _StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance_DownCast

class Handle_StepDimTol_TotalRunoutTolerance(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_TotalRunoutTolerance self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_TotalRunoutTolerance_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_TotalRunoutTolerance self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_TotalRunoutTolerance_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_TotalRunoutTolerance self, StepDimTol_TotalRunoutTolerance thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_TotalRunoutTolerance_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_TotalRunoutTolerance self, Handle_StepDimTol_TotalRunoutTolerance theHandle) -> Handle_StepDimTol_TotalRunoutTolerance
        assign(Handle_StepDimTol_TotalRunoutTolerance self, StepDimTol_TotalRunoutTolerance thePtr) -> Handle_StepDimTol_TotalRunoutTolerance
        assign(Handle_StepDimTol_TotalRunoutTolerance self, Handle_StepDimTol_TotalRunoutTolerance theHandle) -> Handle_StepDimTol_TotalRunoutTolerance

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_TotalRunoutTolerance_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_TotalRunoutTolerance self) -> StepDimTol_TotalRunoutTolerance

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_TotalRunoutTolerance_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_TotalRunoutTolerance self) -> StepDimTol_TotalRunoutTolerance

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_TotalRunoutTolerance___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_TotalRunoutTolerance self) -> StepDimTol_TotalRunoutTolerance

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_TotalRunoutTolerance___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_TotalRunoutTolerance___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_TotalRunoutTolerance___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_TotalRunoutTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_TotalRunoutTolerance_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_TotalRunoutTolerance

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_TotalRunoutTolerance self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_TotalRunoutTolerance_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_TotalRunoutTolerance_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_TotalRunoutTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepDimTol_TotalRunoutTolerance self, Handle_TCollection_HAsciiString theGeometricTolerance_Name, Handle_TCollection_HAsciiString theGeometricTolerance_Description, Handle_StepBasic_MeasureWithUnit theGeometricTolerance_Magnitude, Handle_StepRepr_ShapeAspect theGeometricTolerance_TolerancedShapeAspect, Handle_StepDimTol_HArray1OfDatumReference theDatumSystem)
        Init(Handle_StepDimTol_TotalRunoutTolerance self, Handle_TCollection_HAsciiString theGeometricTolerance_Name, Handle_TCollection_HAsciiString theGeometricTolerance_Description, Handle_StepBasic_MeasureWithUnit theGeometricTolerance_Magnitude, StepDimTol_GeometricToleranceTarget theGeometricTolerance_TolerancedShapeAspect, Handle_StepDimTol_HArray1OfDatumSystemOrReference theDatumSystem)

        Initialize all fields (own and inherited) AP242

        :type theGeometricTolerance_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theGeometricTolerance_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theGeometricTolerance_Magnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type theGeometricTolerance_TolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget
        :type theDatumSystem: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference

        """
        return _StepDimTol.Handle_StepDimTol_TotalRunoutTolerance_Init(self, *args)


    def DatumSystem(self, *args):
        """
        DatumSystem(Handle_StepDimTol_TotalRunoutTolerance self) -> Handle_StepDimTol_HArray1OfDatumReference

        Returns field DatumSystem AP214

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumReference

        """
        return _StepDimTol.Handle_StepDimTol_TotalRunoutTolerance_DatumSystem(self, *args)


    def DatumSystemAP242(self, *args):
        """
        DatumSystemAP242(Handle_StepDimTol_TotalRunoutTolerance self) -> Handle_StepDimTol_HArray1OfDatumSystemOrReference

        Returns field DatumSystem AP242

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference

        """
        return _StepDimTol.Handle_StepDimTol_TotalRunoutTolerance_DatumSystemAP242(self, *args)


    def SetDatumSystem(self, *args):
        """
        SetDatumSystem(Handle_StepDimTol_TotalRunoutTolerance self, Handle_StepDimTol_HArray1OfDatumReference theDatumSystem)
        SetDatumSystem(Handle_StepDimTol_TotalRunoutTolerance self, Handle_StepDimTol_HArray1OfDatumSystemOrReference theDatumSystem)

        Set field DatumSystem AP242

        :type theDatumSystem: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference

        """
        return _StepDimTol.Handle_StepDimTol_TotalRunoutTolerance_SetDatumSystem(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepDimTol_TotalRunoutTolerance self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_TotalRunoutTolerance_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_TotalRunoutTolerance self, Handle_TCollection_HAsciiString theName)

        Set field Name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_TotalRunoutTolerance_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_TotalRunoutTolerance self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_TotalRunoutTolerance_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_TotalRunoutTolerance self, Handle_TCollection_HAsciiString theDescription)

        Set field Description

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_TotalRunoutTolerance_SetDescription(self, *args)


    def Magnitude(self, *args):
        """
        Magnitude(Handle_StepDimTol_TotalRunoutTolerance self) -> Handle_StepBasic_MeasureWithUnit

        Returns field Magnitude

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_TotalRunoutTolerance_Magnitude(self, *args)


    def SetMagnitude(self, *args):
        """
        SetMagnitude(Handle_StepDimTol_TotalRunoutTolerance self, Handle_StepBasic_MeasureWithUnit theMagnitude)

        Set field Magnitude

        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_TotalRunoutTolerance_SetMagnitude(self, *args)


    def TolerancedShapeAspect(self, *args):
        """
        TolerancedShapeAspect(Handle_StepDimTol_TotalRunoutTolerance self) -> StepDimTol_GeometricToleranceTarget

        Returns field TolerancedShapeAspect
        Note: in AP214(203) type of this attribute can be only StepRepr_ShapeAspect

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_TotalRunoutTolerance_TolerancedShapeAspect(self, *args)


    def SetTolerancedShapeAspect(self, *args):
        """
        SetTolerancedShapeAspect(Handle_StepDimTol_TotalRunoutTolerance self, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect)
        SetTolerancedShapeAspect(Handle_StepDimTol_TotalRunoutTolerance self, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect)

        Set field TolerancedShapeAspect AP242

        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_TotalRunoutTolerance_SetTolerancedShapeAspect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_TotalRunoutTolerance self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_TotalRunoutTolerance_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_TotalRunoutTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_TotalRunoutTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_TotalRunoutTolerance_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_TotalRunoutTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_TotalRunoutTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_TotalRunoutTolerance_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_TotalRunoutTolerance self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_TotalRunoutTolerance_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_TotalRunoutTolerance self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_TotalRunoutTolerance_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_TotalRunoutTolerance self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_TotalRunoutTolerance_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_TotalRunoutTolerance self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_TotalRunoutTolerance_DecrementRefCounter(self, *args)

Handle_StepDimTol_TotalRunoutTolerance_swigregister = _StepDimTol.Handle_StepDimTol_TotalRunoutTolerance_swigregister
Handle_StepDimTol_TotalRunoutTolerance_swigregister(Handle_StepDimTol_TotalRunoutTolerance)

def Handle_StepDimTol_TotalRunoutTolerance_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_TotalRunoutTolerance_DownCast(thing)
Handle_StepDimTol_TotalRunoutTolerance_DownCast = _StepDimTol.Handle_StepDimTol_TotalRunoutTolerance_DownCast

class Handle_StepDimTol_NonUniformZoneDefinition(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_NonUniformZoneDefinition self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_NonUniformZoneDefinition_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_NonUniformZoneDefinition self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_NonUniformZoneDefinition_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_NonUniformZoneDefinition self, StepDimTol_NonUniformZoneDefinition thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_NonUniformZoneDefinition_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_NonUniformZoneDefinition self, Handle_StepDimTol_NonUniformZoneDefinition theHandle) -> Handle_StepDimTol_NonUniformZoneDefinition
        assign(Handle_StepDimTol_NonUniformZoneDefinition self, StepDimTol_NonUniformZoneDefinition thePtr) -> Handle_StepDimTol_NonUniformZoneDefinition
        assign(Handle_StepDimTol_NonUniformZoneDefinition self, Handle_StepDimTol_NonUniformZoneDefinition theHandle) -> Handle_StepDimTol_NonUniformZoneDefinition

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_NonUniformZoneDefinition_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_NonUniformZoneDefinition self) -> StepDimTol_NonUniformZoneDefinition

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_NonUniformZoneDefinition_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_NonUniformZoneDefinition self) -> StepDimTol_NonUniformZoneDefinition

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_NonUniformZoneDefinition___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_NonUniformZoneDefinition self) -> StepDimTol_NonUniformZoneDefinition

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_NonUniformZoneDefinition___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_NonUniformZoneDefinition___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_NonUniformZoneDefinition___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_NonUniformZoneDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_NonUniformZoneDefinition_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_NonUniformZoneDefinition

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_NonUniformZoneDefinition self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_NonUniformZoneDefinition_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_NonUniformZoneDefinition_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_NonUniformZoneDefinition_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepDimTol_NonUniformZoneDefinition self, Handle_StepDimTol_ToleranceZone theZone, Handle_StepRepr_HArray1OfShapeAspect theBoundaries)

        Initialize all fields (own and inherited)

        :type theZone: OCC.wrapper.StepDimTol.Handle_StepDimTol_ToleranceZone
        :type theBoundaries: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfShapeAspect

        """
        return _StepDimTol.Handle_StepDimTol_NonUniformZoneDefinition_Init(self, *args)


    def Boundaries(self, *args):
        """
        Boundaries(Handle_StepDimTol_NonUniformZoneDefinition self) -> Handle_StepRepr_HArray1OfShapeAspect

        Returns field Boundaries

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfShapeAspect

        """
        return _StepDimTol.Handle_StepDimTol_NonUniformZoneDefinition_Boundaries(self, *args)


    def SetBoundaries(self, *args):
        """
        SetBoundaries(Handle_StepDimTol_NonUniformZoneDefinition self, Handle_StepRepr_HArray1OfShapeAspect theBoundaries)

        Set field Boundaries

        :type theBoundaries: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfShapeAspect

        """
        return _StepDimTol.Handle_StepDimTol_NonUniformZoneDefinition_SetBoundaries(self, *args)


    def NbBoundaries(self, *args):
        """
        NbBoundaries(Handle_StepDimTol_NonUniformZoneDefinition self) -> Standard_Integer

        Returns number of Boundaries

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_NonUniformZoneDefinition_NbBoundaries(self, *args)


    def BoundariesValue(self, *args):
        """
        BoundariesValue(Handle_StepDimTol_NonUniformZoneDefinition self, Standard_Integer const theNum) -> Handle_StepRepr_ShapeAspect

        Returns Boundaries with the given number

        :type theNum: int
        :rtype: OCC.wrapper.StepDimTol.Handle_StepRepr_ShapeAspect

        """
        return _StepDimTol.Handle_StepDimTol_NonUniformZoneDefinition_BoundariesValue(self, *args)


    def SetBoundariesValue(self, *args):
        """
        SetBoundariesValue(Handle_StepDimTol_NonUniformZoneDefinition self, Standard_Integer const theNum, Handle_StepRepr_ShapeAspect theItem)

        Sets Boundaries with given number

        :type theNum: int
        :type theItem: OCC.wrapper.StepDimTol.Handle_StepRepr_ShapeAspect

        """
        return _StepDimTol.Handle_StepDimTol_NonUniformZoneDefinition_SetBoundariesValue(self, *args)


    def Zone(self, *args):
        """
        Zone(Handle_StepDimTol_NonUniformZoneDefinition self) -> Handle_StepDimTol_ToleranceZone

        Returns field Zone

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_ToleranceZone

        """
        return _StepDimTol.Handle_StepDimTol_NonUniformZoneDefinition_Zone(self, *args)


    def SetZone(self, *args):
        """
        SetZone(Handle_StepDimTol_NonUniformZoneDefinition self, Handle_StepDimTol_ToleranceZone theZone)

        Set field Zone

        :type theZone: OCC.wrapper.StepDimTol.Handle_StepDimTol_ToleranceZone

        """
        return _StepDimTol.Handle_StepDimTol_NonUniformZoneDefinition_SetZone(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_NonUniformZoneDefinition self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_NonUniformZoneDefinition_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_NonUniformZoneDefinition self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_NonUniformZoneDefinition self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_NonUniformZoneDefinition_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_NonUniformZoneDefinition self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_NonUniformZoneDefinition self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_NonUniformZoneDefinition_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_NonUniformZoneDefinition self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_NonUniformZoneDefinition_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_NonUniformZoneDefinition self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_NonUniformZoneDefinition_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_NonUniformZoneDefinition self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_NonUniformZoneDefinition_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_NonUniformZoneDefinition self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_NonUniformZoneDefinition_DecrementRefCounter(self, *args)

Handle_StepDimTol_NonUniformZoneDefinition_swigregister = _StepDimTol.Handle_StepDimTol_NonUniformZoneDefinition_swigregister
Handle_StepDimTol_NonUniformZoneDefinition_swigregister(Handle_StepDimTol_NonUniformZoneDefinition)

def Handle_StepDimTol_NonUniformZoneDefinition_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_NonUniformZoneDefinition_DownCast(thing)
Handle_StepDimTol_NonUniformZoneDefinition_DownCast = _StepDimTol.Handle_StepDimTol_NonUniformZoneDefinition_DownCast

class Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self, StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self, Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol theHandle) -> Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol
        assign(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self, StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol thePtr) -> Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol
        assign(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self, Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol theHandle) -> Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self) -> StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self) -> StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self) -> StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol

    def Init(self, *args):
        """
        Init(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect, Handle_StepDimTol_GeometricToleranceWithDatumReference theGTWDR, Handle_StepDimTol_GeometricToleranceWithModifiers theGTWM, Handle_StepBasic_LengthMeasureWithUnit theMaxTol, StepDimTol_GeometricToleranceType const theType)
        Init(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepBasic_MeasureWithUnit aMagnitude, StepDimTol_GeometricToleranceTarget aTolerancedShapeAspect, Handle_StepDimTol_GeometricToleranceWithDatumReference aGTWDR, Handle_StepDimTol_GeometricToleranceWithModifiers aGTWM, Handle_StepBasic_LengthMeasureWithUnit theMaxTol, StepDimTol_GeometricToleranceType const theType)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type aTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget
        :type aGTWDR: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference
        :type aGTWM: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers
        :type theMaxTol: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit
        :type theType: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceType

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_Init(self, *args)


    def SetMaxTolerance(self, *args):
        """
        SetMaxTolerance(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self, Handle_StepBasic_LengthMeasureWithUnit theMaxTol)

        :type theMaxTol: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_SetMaxTolerance(self, *args)


    def GetMaxTolerance(self, *args):
        """
        GetMaxTolerance(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self) -> Handle_StepBasic_LengthMeasureWithUnit

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_GetMaxTolerance(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetGeometricToleranceWithDatumReference(self, *args):
        """
        SetGeometricToleranceWithDatumReference(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self, Handle_StepDimTol_GeometricToleranceWithDatumReference theGTWDR)

        :type theGTWDR: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_SetGeometricToleranceWithDatumReference(self, *args)


    def GetGeometricToleranceWithDatumReference(self, *args):
        """
        GetGeometricToleranceWithDatumReference(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self) -> Handle_StepDimTol_GeometricToleranceWithDatumReference

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_GetGeometricToleranceWithDatumReference(self, *args)


    def SetGeometricToleranceWithModifiers(self, *args):
        """
        SetGeometricToleranceWithModifiers(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self, Handle_StepDimTol_GeometricToleranceWithModifiers theGTWM)

        :type theGTWM: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_SetGeometricToleranceWithModifiers(self, *args)


    def GetGeometricToleranceWithModifiers(self, *args):
        """
        GetGeometricToleranceWithModifiers(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self) -> Handle_StepDimTol_GeometricToleranceWithModifiers

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_GetGeometricToleranceWithModifiers(self, *args)


    def SetGeometricToleranceType(self, *args):
        """
        SetGeometricToleranceType(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self, StepDimTol_GeometricToleranceType const theType)

        :type theType: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceType

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_SetGeometricToleranceType(self, *args)


    def GetToleranceType(self, *args):
        """
        GetToleranceType(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self) -> StepDimTol_GeometricToleranceType

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceType

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_GetToleranceType(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self, Handle_TCollection_HAsciiString theName)

        Set field Name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self, Handle_TCollection_HAsciiString theDescription)

        Set field Description

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_SetDescription(self, *args)


    def Magnitude(self, *args):
        """
        Magnitude(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self) -> Handle_StepBasic_MeasureWithUnit

        Returns field Magnitude

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_Magnitude(self, *args)


    def SetMagnitude(self, *args):
        """
        SetMagnitude(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self, Handle_StepBasic_MeasureWithUnit theMagnitude)

        Set field Magnitude

        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_SetMagnitude(self, *args)


    def TolerancedShapeAspect(self, *args):
        """
        TolerancedShapeAspect(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self) -> StepDimTol_GeometricToleranceTarget

        Returns field TolerancedShapeAspect
        Note: in AP214(203) type of this attribute can be only StepRepr_ShapeAspect

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_TolerancedShapeAspect(self, *args)


    def SetTolerancedShapeAspect(self, *args):
        """
        SetTolerancedShapeAspect(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect)
        SetTolerancedShapeAspect(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect)

        Set field TolerancedShapeAspect AP242

        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_SetTolerancedShapeAspect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_DecrementRefCounter(self, *args)

Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_swigregister = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_swigregister
Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_swigregister(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol)

def Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_DownCast(thing)
Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_DownCast = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_DownCast

class Handle_StepDimTol_RoundnessTolerance(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_RoundnessTolerance self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_RoundnessTolerance_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_RoundnessTolerance self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_RoundnessTolerance_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_RoundnessTolerance self, StepDimTol_RoundnessTolerance thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_RoundnessTolerance_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_RoundnessTolerance self, Handle_StepDimTol_RoundnessTolerance theHandle) -> Handle_StepDimTol_RoundnessTolerance
        assign(Handle_StepDimTol_RoundnessTolerance self, StepDimTol_RoundnessTolerance thePtr) -> Handle_StepDimTol_RoundnessTolerance
        assign(Handle_StepDimTol_RoundnessTolerance self, Handle_StepDimTol_RoundnessTolerance theHandle) -> Handle_StepDimTol_RoundnessTolerance

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_RoundnessTolerance_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_RoundnessTolerance self) -> StepDimTol_RoundnessTolerance

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_RoundnessTolerance_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_RoundnessTolerance self) -> StepDimTol_RoundnessTolerance

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_RoundnessTolerance___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_RoundnessTolerance self) -> StepDimTol_RoundnessTolerance

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_RoundnessTolerance___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_RoundnessTolerance___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_RoundnessTolerance___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_RoundnessTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_RoundnessTolerance_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_RoundnessTolerance

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_RoundnessTolerance self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_RoundnessTolerance_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_RoundnessTolerance_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_RoundnessTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepDimTol_RoundnessTolerance self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect)
        Init(Handle_StepDimTol_RoundnessTolerance self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepBasic_MeasureWithUnit theMagnitude, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect)

        Initialize all fields (own and inherited) AP242

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_RoundnessTolerance_Init(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepDimTol_RoundnessTolerance self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_RoundnessTolerance_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_RoundnessTolerance self, Handle_TCollection_HAsciiString theName)

        Set field Name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_RoundnessTolerance_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_RoundnessTolerance self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_RoundnessTolerance_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_RoundnessTolerance self, Handle_TCollection_HAsciiString theDescription)

        Set field Description

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_RoundnessTolerance_SetDescription(self, *args)


    def Magnitude(self, *args):
        """
        Magnitude(Handle_StepDimTol_RoundnessTolerance self) -> Handle_StepBasic_MeasureWithUnit

        Returns field Magnitude

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_RoundnessTolerance_Magnitude(self, *args)


    def SetMagnitude(self, *args):
        """
        SetMagnitude(Handle_StepDimTol_RoundnessTolerance self, Handle_StepBasic_MeasureWithUnit theMagnitude)

        Set field Magnitude

        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_RoundnessTolerance_SetMagnitude(self, *args)


    def TolerancedShapeAspect(self, *args):
        """
        TolerancedShapeAspect(Handle_StepDimTol_RoundnessTolerance self) -> StepDimTol_GeometricToleranceTarget

        Returns field TolerancedShapeAspect
        Note: in AP214(203) type of this attribute can be only StepRepr_ShapeAspect

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_RoundnessTolerance_TolerancedShapeAspect(self, *args)


    def SetTolerancedShapeAspect(self, *args):
        """
        SetTolerancedShapeAspect(Handle_StepDimTol_RoundnessTolerance self, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect)
        SetTolerancedShapeAspect(Handle_StepDimTol_RoundnessTolerance self, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect)

        Set field TolerancedShapeAspect AP242

        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_RoundnessTolerance_SetTolerancedShapeAspect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_RoundnessTolerance self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_RoundnessTolerance_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_RoundnessTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_RoundnessTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_RoundnessTolerance_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_RoundnessTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_RoundnessTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_RoundnessTolerance_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_RoundnessTolerance self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_RoundnessTolerance_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_RoundnessTolerance self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_RoundnessTolerance_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_RoundnessTolerance self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_RoundnessTolerance_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_RoundnessTolerance self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_RoundnessTolerance_DecrementRefCounter(self, *args)

Handle_StepDimTol_RoundnessTolerance_swigregister = _StepDimTol.Handle_StepDimTol_RoundnessTolerance_swigregister
Handle_StepDimTol_RoundnessTolerance_swigregister(Handle_StepDimTol_RoundnessTolerance)

def Handle_StepDimTol_RoundnessTolerance_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_RoundnessTolerance_DownCast(thing)
Handle_StepDimTol_RoundnessTolerance_DownCast = _StepDimTol.Handle_StepDimTol_RoundnessTolerance_DownCast

class Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self, StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self, Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol theHandle) -> Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol
        assign(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self, StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol thePtr) -> Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol
        assign(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self, Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol theHandle) -> Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self) -> StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self) -> StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self) -> StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol

    def Init(self, *args):
        """
        Init(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepBasic_MeasureWithUnit aMagnitude, Handle_StepRepr_ShapeAspect aTolerancedShapeAspect, Handle_StepDimTol_GeometricToleranceWithDatumReference aGTWDR, Handle_StepDimTol_ModifiedGeometricTolerance aMGT)
        Init(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepBasic_MeasureWithUnit aMagnitude, StepDimTol_GeometricToleranceTarget aTolerancedShapeAspect, Handle_StepDimTol_GeometricToleranceWithDatumReference aGTWDR, Handle_StepDimTol_ModifiedGeometricTolerance aMGT)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type aTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget
        :type aGTWDR: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference
        :type aMGT: OCC.wrapper.StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_Init(self, *args)


    def SetGeometricToleranceWithDatumReference(self, *args):
        """
        SetGeometricToleranceWithDatumReference(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self, Handle_StepDimTol_GeometricToleranceWithDatumReference aGTWDR)

        :type aGTWDR: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_SetGeometricToleranceWithDatumReference(self, *args)


    def GetGeometricToleranceWithDatumReference(self, *args):
        """
        GetGeometricToleranceWithDatumReference(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self) -> Handle_StepDimTol_GeometricToleranceWithDatumReference

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_GetGeometricToleranceWithDatumReference(self, *args)


    def SetModifiedGeometricTolerance(self, *args):
        """
        SetModifiedGeometricTolerance(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self, Handle_StepDimTol_ModifiedGeometricTolerance aMGT)

        :type aMGT: OCC.wrapper.StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_SetModifiedGeometricTolerance(self, *args)


    def GetModifiedGeometricTolerance(self, *args):
        """
        GetModifiedGeometricTolerance(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self) -> Handle_StepDimTol_ModifiedGeometricTolerance

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_GetModifiedGeometricTolerance(self, *args)


    def SetPositionTolerance(self, *args):
        """
        SetPositionTolerance(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self, Handle_StepDimTol_PositionTolerance aPT)

        :type aPT: OCC.wrapper.StepDimTol.Handle_StepDimTol_PositionTolerance

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_SetPositionTolerance(self, *args)


    def GetPositionTolerance(self, *args):
        """
        GetPositionTolerance(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self) -> Handle_StepDimTol_PositionTolerance

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_PositionTolerance

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_GetPositionTolerance(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Name(self, *args):
        """
        Name(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self, Handle_TCollection_HAsciiString theName)

        Set field Name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self, Handle_TCollection_HAsciiString theDescription)

        Set field Description

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_SetDescription(self, *args)


    def Magnitude(self, *args):
        """
        Magnitude(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self) -> Handle_StepBasic_MeasureWithUnit

        Returns field Magnitude

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_Magnitude(self, *args)


    def SetMagnitude(self, *args):
        """
        SetMagnitude(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self, Handle_StepBasic_MeasureWithUnit theMagnitude)

        Set field Magnitude

        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_SetMagnitude(self, *args)


    def TolerancedShapeAspect(self, *args):
        """
        TolerancedShapeAspect(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self) -> StepDimTol_GeometricToleranceTarget

        Returns field TolerancedShapeAspect
        Note: in AP214(203) type of this attribute can be only StepRepr_ShapeAspect

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_TolerancedShapeAspect(self, *args)


    def SetTolerancedShapeAspect(self, *args):
        """
        SetTolerancedShapeAspect(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect)
        SetTolerancedShapeAspect(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect)

        Set field TolerancedShapeAspect AP242

        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_SetTolerancedShapeAspect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_DecrementRefCounter(self, *args)

Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_swigregister = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_swigregister
Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_swigregister(Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol)

def Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_DownCast(thing)
Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_DownCast = _StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_DownCast

class Handle_StepDimTol_ConcentricityTolerance(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepDimTol_ConcentricityTolerance self)

        Nullify the handle


        """
        return _StepDimTol.Handle_StepDimTol_ConcentricityTolerance_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepDimTol_ConcentricityTolerance self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepDimTol.Handle_StepDimTol_ConcentricityTolerance_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepDimTol_ConcentricityTolerance self, StepDimTol_ConcentricityTolerance thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepDimTol.Handle_StepDimTol_ConcentricityTolerance_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepDimTol_ConcentricityTolerance self, Handle_StepDimTol_ConcentricityTolerance theHandle) -> Handle_StepDimTol_ConcentricityTolerance
        assign(Handle_StepDimTol_ConcentricityTolerance self, StepDimTol_ConcentricityTolerance thePtr) -> Handle_StepDimTol_ConcentricityTolerance
        assign(Handle_StepDimTol_ConcentricityTolerance self, Handle_StepDimTol_ConcentricityTolerance theHandle) -> Handle_StepDimTol_ConcentricityTolerance

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepDimTol.Handle_StepDimTol_ConcentricityTolerance_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepDimTol_ConcentricityTolerance self) -> StepDimTol_ConcentricityTolerance

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_ConcentricityTolerance_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepDimTol_ConcentricityTolerance self) -> StepDimTol_ConcentricityTolerance

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepDimTol.Handle_StepDimTol_ConcentricityTolerance___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepDimTol_ConcentricityTolerance self) -> StepDimTol_ConcentricityTolerance

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepDimTol.Handle_StepDimTol_ConcentricityTolerance___ref__(self, *args)


    def __hash__(self):
        return _StepDimTol.Handle_StepDimTol_ConcentricityTolerance___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepDimTol.Handle_StepDimTol_ConcentricityTolerance___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepDimTol.new_Handle_StepDimTol_ConcentricityTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepDimTol.Handle_StepDimTol_ConcentricityTolerance_DownCast)
    __swig_destroy__ = _StepDimTol.delete_Handle_StepDimTol_ConcentricityTolerance

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepDimTol_ConcentricityTolerance self) -> char const *

        :rtype: const char *

        """
        return _StepDimTol.Handle_StepDimTol_ConcentricityTolerance_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_ConcentricityTolerance_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepDimTol.Handle_StepDimTol_ConcentricityTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepDimTol_ConcentricityTolerance self, Handle_TCollection_HAsciiString theGeometricTolerance_Name, Handle_TCollection_HAsciiString theGeometricTolerance_Description, Handle_StepBasic_MeasureWithUnit theGeometricTolerance_Magnitude, Handle_StepRepr_ShapeAspect theGeometricTolerance_TolerancedShapeAspect, Handle_StepDimTol_HArray1OfDatumReference theDatumSystem)
        Init(Handle_StepDimTol_ConcentricityTolerance self, Handle_TCollection_HAsciiString theGeometricTolerance_Name, Handle_TCollection_HAsciiString theGeometricTolerance_Description, Handle_StepBasic_MeasureWithUnit theGeometricTolerance_Magnitude, StepDimTol_GeometricToleranceTarget theGeometricTolerance_TolerancedShapeAspect, Handle_StepDimTol_HArray1OfDatumSystemOrReference theDatumSystem)

        Initialize all fields (own and inherited) AP242

        :type theGeometricTolerance_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theGeometricTolerance_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theGeometricTolerance_Magnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type theGeometricTolerance_TolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget
        :type theDatumSystem: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference

        """
        return _StepDimTol.Handle_StepDimTol_ConcentricityTolerance_Init(self, *args)


    def DatumSystem(self, *args):
        """
        DatumSystem(Handle_StepDimTol_ConcentricityTolerance self) -> Handle_StepDimTol_HArray1OfDatumReference

        Returns field DatumSystem AP214

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumReference

        """
        return _StepDimTol.Handle_StepDimTol_ConcentricityTolerance_DatumSystem(self, *args)


    def DatumSystemAP242(self, *args):
        """
        DatumSystemAP242(Handle_StepDimTol_ConcentricityTolerance self) -> Handle_StepDimTol_HArray1OfDatumSystemOrReference

        Returns field DatumSystem AP242

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference

        """
        return _StepDimTol.Handle_StepDimTol_ConcentricityTolerance_DatumSystemAP242(self, *args)


    def SetDatumSystem(self, *args):
        """
        SetDatumSystem(Handle_StepDimTol_ConcentricityTolerance self, Handle_StepDimTol_HArray1OfDatumReference theDatumSystem)
        SetDatumSystem(Handle_StepDimTol_ConcentricityTolerance self, Handle_StepDimTol_HArray1OfDatumSystemOrReference theDatumSystem)

        Set field DatumSystem AP242

        :type theDatumSystem: OCC.wrapper.StepDimTol.Handle_StepDimTol_HArray1OfDatumSystemOrReference

        """
        return _StepDimTol.Handle_StepDimTol_ConcentricityTolerance_SetDatumSystem(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepDimTol_ConcentricityTolerance self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_ConcentricityTolerance_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepDimTol_ConcentricityTolerance self, Handle_TCollection_HAsciiString theName)

        Set field Name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_ConcentricityTolerance_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepDimTol_ConcentricityTolerance self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_ConcentricityTolerance_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepDimTol_ConcentricityTolerance self, Handle_TCollection_HAsciiString theDescription)

        Set field Description

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepDimTol.Handle_StepDimTol_ConcentricityTolerance_SetDescription(self, *args)


    def Magnitude(self, *args):
        """
        Magnitude(Handle_StepDimTol_ConcentricityTolerance self) -> Handle_StepBasic_MeasureWithUnit

        Returns field Magnitude

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_ConcentricityTolerance_Magnitude(self, *args)


    def SetMagnitude(self, *args):
        """
        SetMagnitude(Handle_StepDimTol_ConcentricityTolerance self, Handle_StepBasic_MeasureWithUnit theMagnitude)

        Set field Magnitude

        :type theMagnitude: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepDimTol.Handle_StepDimTol_ConcentricityTolerance_SetMagnitude(self, *args)


    def TolerancedShapeAspect(self, *args):
        """
        TolerancedShapeAspect(Handle_StepDimTol_ConcentricityTolerance self) -> StepDimTol_GeometricToleranceTarget

        Returns field TolerancedShapeAspect
        Note: in AP214(203) type of this attribute can be only StepRepr_ShapeAspect

        :rtype: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_ConcentricityTolerance_TolerancedShapeAspect(self, *args)


    def SetTolerancedShapeAspect(self, *args):
        """
        SetTolerancedShapeAspect(Handle_StepDimTol_ConcentricityTolerance self, Handle_StepRepr_ShapeAspect theTolerancedShapeAspect)
        SetTolerancedShapeAspect(Handle_StepDimTol_ConcentricityTolerance self, StepDimTol_GeometricToleranceTarget theTolerancedShapeAspect)

        Set field TolerancedShapeAspect AP242

        :type theTolerancedShapeAspect: OCC.wrapper.StepDimTol.StepDimTol_GeometricToleranceTarget

        """
        return _StepDimTol.Handle_StepDimTol_ConcentricityTolerance_SetTolerancedShapeAspect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepDimTol_ConcentricityTolerance self)

        Memory deallocator for transient classes


        """
        return _StepDimTol.Handle_StepDimTol_ConcentricityTolerance_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepDimTol_ConcentricityTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepDimTol_ConcentricityTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_ConcentricityTolerance_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepDimTol_ConcentricityTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepDimTol_ConcentricityTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepDimTol.Handle_StepDimTol_ConcentricityTolerance_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepDimTol_ConcentricityTolerance self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepDimTol.Handle_StepDimTol_ConcentricityTolerance_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepDimTol_ConcentricityTolerance self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_ConcentricityTolerance_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepDimTol_ConcentricityTolerance self)

        Increments the reference counter of this object


        """
        return _StepDimTol.Handle_StepDimTol_ConcentricityTolerance_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepDimTol_ConcentricityTolerance self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.Handle_StepDimTol_ConcentricityTolerance_DecrementRefCounter(self, *args)

Handle_StepDimTol_ConcentricityTolerance_swigregister = _StepDimTol.Handle_StepDimTol_ConcentricityTolerance_swigregister
Handle_StepDimTol_ConcentricityTolerance_swigregister(Handle_StepDimTol_ConcentricityTolerance)

def Handle_StepDimTol_ConcentricityTolerance_DownCast(thing):
    return _StepDimTol.Handle_StepDimTol_ConcentricityTolerance_DownCast(thing)
Handle_StepDimTol_ConcentricityTolerance_DownCast = _StepDimTol.Handle_StepDimTol_ConcentricityTolerance_DownCast

class StepDimTol_ShapeToleranceSelect(StepData.StepData_SelectType):
    """Representation of STEP SELECT type ShapeToleranceSelect"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepDimTol_ShapeToleranceSelect self) -> StepDimTol_ShapeToleranceSelect

        Empty constructor


        """
        this = _StepDimTol.new_StepDimTol_ShapeToleranceSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepDimTol_ShapeToleranceSelect self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a kind of ShapeToleranceSelect select type
        1 -> GeometricTolerance from StepDimTol
        2 -> PlusMinusTolerance from StepShape
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepDimTol.StepDimTol_ShapeToleranceSelect_CaseNum(self, *args)


    def GeometricTolerance(self, *args):
        """
        GeometricTolerance(StepDimTol_ShapeToleranceSelect self) -> Handle_StepDimTol_GeometricTolerance

        Returns Value as GeometricTolerance (or Null if another type)

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricTolerance

        """
        return _StepDimTol.StepDimTol_ShapeToleranceSelect_GeometricTolerance(self, *args)


    def PlusMinusTolerance(self, *args):
        """
        PlusMinusTolerance(StepDimTol_ShapeToleranceSelect self) -> Handle_StepShape_PlusMinusTolerance

        Returns Value as PlusMinusTolerance (or Null if another type)

        :rtype: OCC.wrapper.StepShape.Handle_StepShape_PlusMinusTolerance

        """
        return _StepDimTol.StepDimTol_ShapeToleranceSelect_PlusMinusTolerance(self, *args)

    __swig_destroy__ = _StepDimTol.delete_StepDimTol_ShapeToleranceSelect
StepDimTol_ShapeToleranceSelect_swigregister = _StepDimTol.StepDimTol_ShapeToleranceSelect_swigregister
StepDimTol_ShapeToleranceSelect_swigregister(StepDimTol_ShapeToleranceSelect)



