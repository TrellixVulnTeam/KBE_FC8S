# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BRepSweep')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BRepSweep')
    _BRepSweep = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepSweep', [dirname(__file__)])
        except ImportError:
            import _BRepSweep
            return _BRepSweep
        try:
            _mod = imp.load_module('_BRepSweep', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BRepSweep = swig_import_helper()
    del swig_import_helper
else:
    import _BRepSweep
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepSweep.delete_SwigPyIterator

    def value(self):
        return _BRepSweep.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _BRepSweep.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _BRepSweep.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _BRepSweep.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _BRepSweep.SwigPyIterator_equal(self, x)

    def copy(self):
        return _BRepSweep.SwigPyIterator_copy(self)

    def next(self):
        return _BRepSweep.SwigPyIterator_next(self)

    def __next__(self):
        return _BRepSweep.SwigPyIterator___next__(self)

    def previous(self):
        return _BRepSweep.SwigPyIterator_previous(self)

    def advance(self, n):
        return _BRepSweep.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _BRepSweep.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _BRepSweep.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _BRepSweep.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _BRepSweep.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _BRepSweep.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _BRepSweep.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _BRepSweep.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BRepSweep.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_BRepSweep.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _BRepSweep.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BRepSweep.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BRepSweep.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _BRepSweep.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _BRepSweep.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _BRepSweep.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BRepSweep.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_BRepSweep.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _BRepSweep.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BRepSweep.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BRepSweep.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _BRepSweep.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _BRepSweep.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _BRepSweep.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _BRepSweep.ptr_to_number(item)
ptr_to_number = _BRepSweep.ptr_to_number

def HashCode(*args):
    return _BRepSweep.HashCode(*args)
HashCode = _BRepSweep.HashCode

def ptr_equal(a, b):
    return _BRepSweep.ptr_equal(a, b)
ptr_equal = _BRepSweep.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Sweep
else:
    import Sweep
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRep
else:
    import BRep
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Poly
else:
    import Poly
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TShort
else:
    import TShort
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
class BRepSweep_NumLinearRegularSweep(object):
    """
    This  a generic  class  is  used   to build Sweept
    primitives   with    a  generating  "shape"  and a
    directing "line".

    The indexation and type analysis services required
    for the generatrix are given by <Tool from BRepSweep>.

    The indexation and type analysis services required
    for the directrix are given by <NumShapeTool from Sweep>.

    The iteration services required for the generatrix
    are given by <Iterator from BRepSweep>.

    The iteration services required  for the directrix
    are given by <NumShapeIterator from Sweep>.

    The topology is like a grid of shapes.  Each shape
    of the grid  must be addressable without confusion
    by one  or  two objects   from  the generating  or
    directing   shapes.  Here are  exemples of correct
    associations to address:

    - a vertex : GenVertex - DirVertex
    - an edge  : GenVertex - DirEdge
    -          : GenEdge   - DirVertex
    - a face   : GenEdge   - DirEdge
    GenFace   - DirVertex
    ...

    "GenObject" is used to identify an object from the
    Generating     Shape,  and  "DirObject"  from  the
    Directing Shape.  So may they   be  from different
    types.

    The method Has... is given because in some special
    cases, a vertex,    an  edge or   a   face may  be
    geometricaly nonexistant or not usefull.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def MakeEmptyVertex(self, *args):
        """
        MakeEmptyVertex(BRepSweep_NumLinearRegularSweep self, TopoDS_Shape aGenV, Sweep_NumShape aDirV) -> TopoDS_Shape

        Builds the vertex addressed by [aGenV,aDirV], with its
        geometric part, but without subcomponents.

        :type aGenV: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirV: OCC.wrapper.Sweep.Sweep_NumShape
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_MakeEmptyVertex(self, *args)


    def MakeEmptyDirectingEdge(self, *args):
        """
        MakeEmptyDirectingEdge(BRepSweep_NumLinearRegularSweep self, TopoDS_Shape aGenV, Sweep_NumShape aDirE) -> TopoDS_Shape

        Builds the edge addressed by [aGenV,aDirE], with its
        geometric part, but without subcomponents.

        :type aGenV: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirE: OCC.wrapper.Sweep.Sweep_NumShape
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_MakeEmptyDirectingEdge(self, *args)


    def MakeEmptyGeneratingEdge(self, *args):
        """
        MakeEmptyGeneratingEdge(BRepSweep_NumLinearRegularSweep self, TopoDS_Shape aGenE, Sweep_NumShape aDirV) -> TopoDS_Shape

        Builds the edge addressed by [aGenE,aDirV], with its
        geometric part, but without subcomponents.

        :type aGenE: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirV: OCC.wrapper.Sweep.Sweep_NumShape
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_MakeEmptyGeneratingEdge(self, *args)


    def SetParameters(self, *args):
        """
        SetParameters(BRepSweep_NumLinearRegularSweep self, TopoDS_Shape aNewFace, TopoDS_Shape aNewVertex, TopoDS_Shape aGenF, TopoDS_Shape aGenV, Sweep_NumShape aDirV)

        Sets the  parameters of the new  vertex  on the new
        face. The new face and  new vertex where generated
        from aGenF, aGenV and aDirV .

        :type aNewFace: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aNewVertex: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenF: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenV: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirV: OCC.wrapper.Sweep.Sweep_NumShape

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_SetParameters(self, *args)


    def SetDirectingParameter(self, *args):
        """
        SetDirectingParameter(BRepSweep_NumLinearRegularSweep self, TopoDS_Shape aNewEdge, TopoDS_Shape aNewVertex, TopoDS_Shape aGenV, Sweep_NumShape aDirE, Sweep_NumShape aDirV)

        Sets the  parameter of the new  vertex  on the new
        edge. The new edge and  new vertex where generated
        from aGenV aDirE, and aDirV.

        :type aNewEdge: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aNewVertex: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenV: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirE: OCC.wrapper.Sweep.Sweep_NumShape
        :type aDirV: OCC.wrapper.Sweep.Sweep_NumShape

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_SetDirectingParameter(self, *args)


    def SetGeneratingParameter(self, *args):
        """
        SetGeneratingParameter(BRepSweep_NumLinearRegularSweep self, TopoDS_Shape aNewEdge, TopoDS_Shape aNewVertex, TopoDS_Shape aGenE, TopoDS_Shape aGenV, Sweep_NumShape aDirV)

        Sets the  parameter of the new  vertex  on the new
        edge. The new edge and  new vertex where generated
        from aGenE, aGenV and aDirV .

        :type aNewEdge: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aNewVertex: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenE: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenV: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirV: OCC.wrapper.Sweep.Sweep_NumShape

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_SetGeneratingParameter(self, *args)


    def MakeEmptyFace(self, *args):
        """
        MakeEmptyFace(BRepSweep_NumLinearRegularSweep self, TopoDS_Shape aGenS, Sweep_NumShape aDirS) -> TopoDS_Shape

        Builds the face  addressed by  [aGenS,aDirS], with
        its geometric part, but without subcomponents. The
        couple aGenS, aDirS  can be a "generating face and
        a directing vertex"   or "a generating  edge and a
        directing  edge".

        :type aGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirS: OCC.wrapper.Sweep.Sweep_NumShape
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_MakeEmptyFace(self, *args)


    def SetPCurve(self, *args):
        """
        SetPCurve(BRepSweep_NumLinearRegularSweep self, TopoDS_Shape aNewFace, TopoDS_Shape aNewEdge, TopoDS_Shape aGenF, TopoDS_Shape aGenE, Sweep_NumShape aDirV, TopAbs_Orientation const orien)

        Sets the PCurve for a new edge on a new face. The
        new edge and  the  new face were generated  using
        aGenF, aGenE and aDirV.

        :type aNewFace: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aNewEdge: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenF: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenE: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirV: OCC.wrapper.Sweep.Sweep_NumShape
        :type orien: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_SetPCurve(self, *args)


    def SetGeneratingPCurve(self, *args):
        """
        SetGeneratingPCurve(BRepSweep_NumLinearRegularSweep self, TopoDS_Shape aNewFace, TopoDS_Shape aNewEdge, TopoDS_Shape aGenE, Sweep_NumShape aDirE, Sweep_NumShape aDirV, TopAbs_Orientation const orien)

        Sets the PCurve for a new edge on a new face. The
        new edge and  the  new face were generated  using
        aGenE, aDirE and aDirV.

        :type aNewFace: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aNewEdge: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenE: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirE: OCC.wrapper.Sweep.Sweep_NumShape
        :type aDirV: OCC.wrapper.Sweep.Sweep_NumShape
        :type orien: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_SetGeneratingPCurve(self, *args)


    def SetDirectingPCurve(self, *args):
        """
        SetDirectingPCurve(BRepSweep_NumLinearRegularSweep self, TopoDS_Shape aNewFace, TopoDS_Shape aNewEdge, TopoDS_Shape aGenE, TopoDS_Shape aGenV, Sweep_NumShape aDirE, TopAbs_Orientation const orien)

        Sets the PCurve for a new edge on a new face. The
        new edge and  the  new face were generated  using
        aGenE, aDirE and aGenV.

        :type aNewFace: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aNewEdge: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenE: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenV: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirE: OCC.wrapper.Sweep.Sweep_NumShape
        :type orien: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_SetDirectingPCurve(self, *args)


    def DirectSolid(self, *args):
        """
        DirectSolid(BRepSweep_NumLinearRegularSweep self, TopoDS_Shape aGenS, Sweep_NumShape aDirS) -> TopAbs_Orientation

        Returns the Orientation of the  shell in the solid
        generated by the face aGenS  with  the edge aDirS.
        It is  REVERSED  if the surface is  swept  in  the
        direction of the normal.

        :type aGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirS: OCC.wrapper.Sweep.Sweep_NumShape
        :rtype: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_DirectSolid(self, *args)


    def GGDShapeIsToAdd(self, *args):
        """
        GGDShapeIsToAdd(BRepSweep_NumLinearRegularSweep self, TopoDS_Shape aNewShape, TopoDS_Shape aNewSubShape, TopoDS_Shape aGenS, TopoDS_Shape aSubGenS, Sweep_NumShape aDirS) -> Standard_Boolean

        Returns   true   if  aNewSubShape    (addressed by
        aSubGenS  and aDirS)  must  be added  in aNewShape
        (addressed by aGenS and aDirS).

        :type aNewShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aNewSubShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aSubGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirS: OCC.wrapper.Sweep.Sweep_NumShape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_GGDShapeIsToAdd(self, *args)


    def GDDShapeIsToAdd(self, *args):
        """
        GDDShapeIsToAdd(BRepSweep_NumLinearRegularSweep self, TopoDS_Shape aNewShape, TopoDS_Shape aNewSubShape, TopoDS_Shape aGenS, Sweep_NumShape aDirS, Sweep_NumShape aSubDirS) -> Standard_Boolean

        Returns   true   if  aNewSubShape    (addressed by
        aGenS  and aSubDirS)  must  be added  in aNewShape
        (addressed by aGenS and aDirS).

        :type aNewShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aNewSubShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirS: OCC.wrapper.Sweep.Sweep_NumShape
        :type aSubDirS: OCC.wrapper.Sweep.Sweep_NumShape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_GDDShapeIsToAdd(self, *args)


    def SeparatedWires(self, *args):
        """
        SeparatedWires(BRepSweep_NumLinearRegularSweep self, TopoDS_Shape aNewShape, TopoDS_Shape aNewSubShape, TopoDS_Shape aGenS, TopoDS_Shape aSubGenS, Sweep_NumShape aDirS) -> Standard_Boolean

        In  some  particular  cases  the   topology  of  a
        generated  face must be  composed  of  independant
        closed wires,  in this case  this function returns
        true.

        :type aNewShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aNewSubShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aSubGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirS: OCC.wrapper.Sweep.Sweep_NumShape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_SeparatedWires(self, *args)


    def SplitShell(self, *args):
        """
        SplitShell(BRepSweep_NumLinearRegularSweep self, TopoDS_Shape aNewShape) -> TopoDS_Shape

        In  some  particular  cases  the   topology  of  a
        generated  Shell must be  composed  of  independant
        closed Shells,  in this case  this function returns
        a Compound of independant Shells.

        :type aNewShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_SplitShell(self, *args)


    def SetContinuity(self, *args):
        """
        SetContinuity(BRepSweep_NumLinearRegularSweep self, TopoDS_Shape aGenS, Sweep_NumShape aDirS)

        Called to propagate the continuity of  every vertex
        between two edges of the  generating wire  aGenS on
        the generated edge and faces.

        :type aGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirS: OCC.wrapper.Sweep.Sweep_NumShape

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_SetContinuity(self, *args)


    def HasShape(self, *args):
        """
        HasShape(BRepSweep_NumLinearRegularSweep self, TopoDS_Shape aGenS, Sweep_NumShape aDirS) -> Standard_Boolean

        Returns true   if aDirS   and aGenS  addresses   a
        resulting Shape. In some  specific cases the shape
        can  be    geometrically   inexsistant,  then this
        function returns false.

        :type aGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirS: OCC.wrapper.Sweep.Sweep_NumShape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_HasShape(self, *args)


    def Shape(self, *args):
        """
        Shape(BRepSweep_NumLinearRegularSweep self, TopoDS_Shape aGenS, Sweep_NumShape aDirS) -> TopoDS_Shape
        Shape(BRepSweep_NumLinearRegularSweep self, TopoDS_Shape aGenS) -> TopoDS_Shape
        Shape(BRepSweep_NumLinearRegularSweep self) -> TopoDS_Shape

        Returns the resulting  Shape indexed by  myDirWire
        and myGenShape.

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_Shape(self, *args)


    def FirstShape(self, *args):
        """
        FirstShape(BRepSweep_NumLinearRegularSweep self) -> TopoDS_Shape
        FirstShape(BRepSweep_NumLinearRegularSweep self, TopoDS_Shape aGenS) -> TopoDS_Shape

        Returns the resulting Shape  indexed by the  first
        Vertex  of myDirWire and aGenS.

        :type aGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_FirstShape(self, *args)


    def LastShape(self, *args):
        """
        LastShape(BRepSweep_NumLinearRegularSweep self) -> TopoDS_Shape
        LastShape(BRepSweep_NumLinearRegularSweep self, TopoDS_Shape aGenS) -> TopoDS_Shape

        Returns the  resulting Shape  indexed by the  last
        Vertex of myDirWire and aGenS.

        :type aGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_LastShape(self, *args)


    def Closed(self, *args):
        """
        Closed(BRepSweep_NumLinearRegularSweep self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepSweep.BRepSweep_NumLinearRegularSweep_Closed(self, *args)

    __swig_destroy__ = _BRepSweep.delete_BRepSweep_NumLinearRegularSweep
BRepSweep_NumLinearRegularSweep_swigregister = _BRepSweep.BRepSweep_NumLinearRegularSweep_swigregister
BRepSweep_NumLinearRegularSweep_swigregister(BRepSweep_NumLinearRegularSweep)

class BRepSweep_Trsf(BRepSweep_NumLinearRegularSweep):
    """
    This class is inherited from NumLinearRegularSweep
    to  implement the  simple   swept primitives built
    moving a Shape with a Trsf.  It  often is possible
    to  build  the constructed subshapes  by  a simple
    move of the  generating subshapes (shared topology
    and geometry).   So two  ways of construction  are
    proposed :

    - sharing  basis elements  (the generatrice can be
    modified , for  exemples  PCurves can be added  on
    faces);

    - copying everything.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Init(self, *args):
        """
        Init(BRepSweep_Trsf self)

        ends  the  construction  of the   swept  primitive
        calling the virtual geometric functions that can't
        be called in the initialize.


        """
        return _BRepSweep.BRepSweep_Trsf_Init(self, *args)


    def Process(self, *args):
        """
        Process(BRepSweep_Trsf self, TopoDS_Shape aGenS, Sweep_NumShape aDirV) -> Standard_Boolean

        function called to analize the way of construction
        of the shapes generated by aGenS and aDirV.

        :type aGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirV: OCC.wrapper.Sweep.Sweep_NumShape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepSweep.BRepSweep_Trsf_Process(self, *args)


    def MakeEmptyVertex(self, *args):
        """
        MakeEmptyVertex(BRepSweep_Trsf self, TopoDS_Shape aGenV, Sweep_NumShape aDirV) -> TopoDS_Shape

        Builds the vertex addressed by [aGenV,aDirV], with its
        geometric part, but without subcomponents.

        :type aGenV: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirV: OCC.wrapper.Sweep.Sweep_NumShape
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Trsf_MakeEmptyVertex(self, *args)


    def MakeEmptyDirectingEdge(self, *args):
        """
        MakeEmptyDirectingEdge(BRepSweep_Trsf self, TopoDS_Shape aGenV, Sweep_NumShape aDirE) -> TopoDS_Shape

        Builds the edge addressed by [aGenV,aDirE], with its
        geometric part, but without subcomponents.

        :type aGenV: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirE: OCC.wrapper.Sweep.Sweep_NumShape
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Trsf_MakeEmptyDirectingEdge(self, *args)


    def MakeEmptyGeneratingEdge(self, *args):
        """
        MakeEmptyGeneratingEdge(BRepSweep_Trsf self, TopoDS_Shape aGenE, Sweep_NumShape aDirV) -> TopoDS_Shape

        Builds the edge addressed by [aGenE,aDirV], with its
        geometric part, but without subcomponents.

        :type aGenE: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirV: OCC.wrapper.Sweep.Sweep_NumShape
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Trsf_MakeEmptyGeneratingEdge(self, *args)


    def SetParameters(self, *args):
        """
        SetParameters(BRepSweep_Trsf self, TopoDS_Shape aNewFace, TopoDS_Shape aNewVertex, TopoDS_Shape aGenF, TopoDS_Shape aGenV, Sweep_NumShape aDirV)

        Sets the  parameters of the new  vertex  on the new
        face. The new face and  new vertex where generated
        from aGenF, aGenV and aDirV .

        :type aNewFace: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aNewVertex: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenF: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenV: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirV: OCC.wrapper.Sweep.Sweep_NumShape

        """
        return _BRepSweep.BRepSweep_Trsf_SetParameters(self, *args)


    def SetDirectingParameter(self, *args):
        """
        SetDirectingParameter(BRepSweep_Trsf self, TopoDS_Shape aNewEdge, TopoDS_Shape aNewVertex, TopoDS_Shape aGenV, Sweep_NumShape aDirE, Sweep_NumShape aDirV)

        Sets the  parameter of the new  vertex  on the new
        edge. The new edge and  new vertex where generated
        from aGenV aDirE, and aDirV.

        :type aNewEdge: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aNewVertex: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenV: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirE: OCC.wrapper.Sweep.Sweep_NumShape
        :type aDirV: OCC.wrapper.Sweep.Sweep_NumShape

        """
        return _BRepSweep.BRepSweep_Trsf_SetDirectingParameter(self, *args)


    def SetGeneratingParameter(self, *args):
        """
        SetGeneratingParameter(BRepSweep_Trsf self, TopoDS_Shape aNewEdge, TopoDS_Shape aNewVertex, TopoDS_Shape aGenE, TopoDS_Shape aGenV, Sweep_NumShape aDirV)

        Sets the  parameter of the new  vertex  on the new
        edge. The new edge and  new vertex where generated
        from aGenE, aGenV and aDirV .

        :type aNewEdge: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aNewVertex: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenE: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenV: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirV: OCC.wrapper.Sweep.Sweep_NumShape

        """
        return _BRepSweep.BRepSweep_Trsf_SetGeneratingParameter(self, *args)


    def MakeEmptyFace(self, *args):
        """
        MakeEmptyFace(BRepSweep_Trsf self, TopoDS_Shape aGenS, Sweep_NumShape aDirS) -> TopoDS_Shape

        Builds  the face addressed  by [aGenS,aDirS], with
        its geometric part, but without subcomponents. The
        couple aGenS, aDirS can be  a "generating face and
        a  directing vertex" or "a   generating edge and a
        directing  edge".

        :type aGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirS: OCC.wrapper.Sweep.Sweep_NumShape
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Trsf_MakeEmptyFace(self, *args)


    def SetPCurve(self, *args):
        """
        SetPCurve(BRepSweep_Trsf self, TopoDS_Shape aNewFace, TopoDS_Shape aNewEdge, TopoDS_Shape aGenF, TopoDS_Shape aGenE, Sweep_NumShape aDirV, TopAbs_Orientation const orien)

        Sets the PCurve for a new edge on a new face. The
        new edge and  the  new face were generated  using
        aGenF, aGenE and aDirV.

        :type aNewFace: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aNewEdge: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenF: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenE: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirV: OCC.wrapper.Sweep.Sweep_NumShape
        :type orien: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _BRepSweep.BRepSweep_Trsf_SetPCurve(self, *args)


    def SetGeneratingPCurve(self, *args):
        """
        SetGeneratingPCurve(BRepSweep_Trsf self, TopoDS_Shape aNewFace, TopoDS_Shape aNewEdge, TopoDS_Shape aGenE, Sweep_NumShape aDirE, Sweep_NumShape aDirV, TopAbs_Orientation const orien)

        Sets the PCurve for a new edge on a new face. The
        new edge and  the  new face were generated  using
        aGenE, aDirE and aDirV.

        :type aNewFace: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aNewEdge: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenE: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirE: OCC.wrapper.Sweep.Sweep_NumShape
        :type aDirV: OCC.wrapper.Sweep.Sweep_NumShape
        :type orien: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _BRepSweep.BRepSweep_Trsf_SetGeneratingPCurve(self, *args)


    def SetDirectingPCurve(self, *args):
        """
        SetDirectingPCurve(BRepSweep_Trsf self, TopoDS_Shape aNewFace, TopoDS_Shape aNewEdge, TopoDS_Shape aGenE, TopoDS_Shape aGenV, Sweep_NumShape aDirE, TopAbs_Orientation const orien)

        Sets the PCurve for a new edge on a new face. The
        new edge and  the  new face were generated  using
        aGenE, aDirE and aGenV.

        :type aNewFace: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aNewEdge: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenE: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenV: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirE: OCC.wrapper.Sweep.Sweep_NumShape
        :type orien: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _BRepSweep.BRepSweep_Trsf_SetDirectingPCurve(self, *args)


    def GGDShapeIsToAdd(self, *args):
        """
        GGDShapeIsToAdd(BRepSweep_Trsf self, TopoDS_Shape aNewShape, TopoDS_Shape aNewSubShape, TopoDS_Shape aGenS, TopoDS_Shape aSubGenS, Sweep_NumShape aDirS) -> Standard_Boolean

        Returns   true   if  aNewSubShape    (addressed by
        aSubGenS  and aDirS)  must  be added  in aNewShape
        (addressed by aGenS and aDirS).

        :type aNewShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aNewSubShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aSubGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirS: OCC.wrapper.Sweep.Sweep_NumShape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepSweep.BRepSweep_Trsf_GGDShapeIsToAdd(self, *args)


    def GDDShapeIsToAdd(self, *args):
        """
        GDDShapeIsToAdd(BRepSweep_Trsf self, TopoDS_Shape aNewShape, TopoDS_Shape aNewSubShape, TopoDS_Shape aGenS, Sweep_NumShape aDirS, Sweep_NumShape aSubDirS) -> Standard_Boolean

        Returns   true   if  aNewSubShape    (addressed by
        aGenS  and aSubDirS)  must  be added  in aNewShape
        (addressed by aGenS and aDirS).

        :type aNewShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aNewSubShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirS: OCC.wrapper.Sweep.Sweep_NumShape
        :type aSubDirS: OCC.wrapper.Sweep.Sweep_NumShape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepSweep.BRepSweep_Trsf_GDDShapeIsToAdd(self, *args)


    def SeparatedWires(self, *args):
        """
        SeparatedWires(BRepSweep_Trsf self, TopoDS_Shape aNewShape, TopoDS_Shape aNewSubShape, TopoDS_Shape aGenS, TopoDS_Shape aSubGenS, Sweep_NumShape aDirS) -> Standard_Boolean

        In  some  particular  cases  the   topology  of  a
        generated  face must be  composed  of  independant
        closed wires,  in this case  this function returns
        true.

        :type aNewShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aNewSubShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aSubGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirS: OCC.wrapper.Sweep.Sweep_NumShape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepSweep.BRepSweep_Trsf_SeparatedWires(self, *args)


    def HasShape(self, *args):
        """
        HasShape(BRepSweep_Trsf self, TopoDS_Shape aGenS, Sweep_NumShape aDirS) -> Standard_Boolean

        Returns true   if aDirS   and aGenS  addresses   a
        resulting Shape. In some  specific cases the shape
        can  be    geometrically   inexsistant,  then this
        function returns false.

        :type aGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirS: OCC.wrapper.Sweep.Sweep_NumShape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepSweep.BRepSweep_Trsf_HasShape(self, *args)


    def IsInvariant(self, *args):
        """
        IsInvariant(BRepSweep_Trsf self, TopoDS_Shape aGenS) -> Standard_Boolean

        Returns  true if  the geometry   of  aGenS is  not
        modified by the trsf of the BRepSweep Trsf.

        :type aGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepSweep.BRepSweep_Trsf_IsInvariant(self, *args)


    def SetContinuity(self, *args):
        """
        SetContinuity(BRepSweep_Trsf self, TopoDS_Shape aGenS, Sweep_NumShape aDirS)

        Called to propagate the continuity of  every vertex
        between two edges of the  generating wire  aGenS on
        the generated edge and faces.

        :type aGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirS: OCC.wrapper.Sweep.Sweep_NumShape

        """
        return _BRepSweep.BRepSweep_Trsf_SetContinuity(self, *args)

    __swig_destroy__ = _BRepSweep.delete_BRepSweep_Trsf
BRepSweep_Trsf_swigregister = _BRepSweep.BRepSweep_Trsf_swigregister
BRepSweep_Trsf_swigregister(BRepSweep_Trsf)

class BRepSweep_Tool(object):
    """
    Provides  the  indexation and type  analysis  services
    required by the TopoDS generating Shape of BRepSweep.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BRepSweep_Tool self, TopoDS_Shape aShape) -> BRepSweep_Tool

        Initialize the tool  with <aShape>.  The IndexTool
        must prepare an indexation for  all  the subshapes
        of this shape.

        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        this = _BRepSweep.new_BRepSweep_Tool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def NbShapes(self, *args):
        """
        NbShapes(BRepSweep_Tool self) -> Standard_Integer

        Returns the number of subshapes in the shape.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepSweep.BRepSweep_Tool_NbShapes(self, *args)


    def Index(self, *args):
        """
        Index(BRepSweep_Tool self, TopoDS_Shape aShape) -> Standard_Integer

        Returns the index of <aShape>.

        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepSweep.BRepSweep_Tool_Index(self, *args)


    def Shape(self, *args):
        """
        Shape(BRepSweep_Tool self, Standard_Integer const anIndex) -> TopoDS_Shape

        Returns the Shape at Index anIdex.

        :type anIndex: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Tool_Shape(self, *args)


    def Type(self, *args):
        """
        Type(BRepSweep_Tool self, TopoDS_Shape aShape) -> TopAbs_ShapeEnum

        Returns the type of <aShape>.

        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TopAbs.TopAbs_ShapeEnum

        """
        return _BRepSweep.BRepSweep_Tool_Type(self, *args)


    def Orientation(self, *args):
        """
        Orientation(BRepSweep_Tool self, TopoDS_Shape aShape) -> TopAbs_Orientation

        Returns the Orientation of <aShape>.

        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _BRepSweep.BRepSweep_Tool_Orientation(self, *args)


    def SetOrientation(self, *args):
        """
        SetOrientation(BRepSweep_Tool self, TopoDS_Shape aShape, TopAbs_Orientation const Or)

        Set the Orientation of <aShape> with Or.

        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type Or: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _BRepSweep.BRepSweep_Tool_SetOrientation(self, *args)

    __swig_destroy__ = _BRepSweep.delete_BRepSweep_Tool
BRepSweep_Tool_swigregister = _BRepSweep.BRepSweep_Tool_swigregister
BRepSweep_Tool_swigregister(BRepSweep_Tool)

class BRepSweep_Translation(BRepSweep_Trsf):
    """
    Provides   an  algorithm   to   build  object   by
    translation sweep.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BRepSweep_Translation self, TopoDS_Shape S, Sweep_NumShape N, TopLoc_Location L, gp_Vec V, Standard_Boolean const C, Standard_Boolean const Canonize) -> BRepSweep_Translation

        Creates  a  topology by  translating <S>  with the
        vector  <V>. If  C  is   true S Sucomponents   are
        copied. If Canonize is true then generated surfaces
        are attempted to be canonized in simple types

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type N: OCC.wrapper.Sweep.Sweep_NumShape
        :type L: OCC.wrapper.TopLoc.TopLoc_Location
        :type V: OCC.wrapper.gp.gp_Vec
        :type C: bool
        :type Canonize: bool

        """
        this = _BRepSweep.new_BRepSweep_Translation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def MakeEmptyVertex(self, *args):
        """
        MakeEmptyVertex(BRepSweep_Translation self, TopoDS_Shape aGenV, Sweep_NumShape aDirV) -> TopoDS_Shape

        Builds the vertex addressed by [aGenV,aDirV], with its
        geometric part, but without subcomponents.

        :type aGenV: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirV: OCC.wrapper.Sweep.Sweep_NumShape
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Translation_MakeEmptyVertex(self, *args)


    def MakeEmptyDirectingEdge(self, *args):
        """
        MakeEmptyDirectingEdge(BRepSweep_Translation self, TopoDS_Shape aGenV, Sweep_NumShape aDirE) -> TopoDS_Shape

        Builds the edge addressed by [aGenV,aDirE], with its
        geometric part, but without subcomponents.

        :type aGenV: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirE: OCC.wrapper.Sweep.Sweep_NumShape
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Translation_MakeEmptyDirectingEdge(self, *args)


    def MakeEmptyGeneratingEdge(self, *args):
        """
        MakeEmptyGeneratingEdge(BRepSweep_Translation self, TopoDS_Shape aGenE, Sweep_NumShape aDirV) -> TopoDS_Shape

        Builds the edge addressed by [aGenE,aDirV], with its
        geometric part, but without subcomponents.

        :type aGenE: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirV: OCC.wrapper.Sweep.Sweep_NumShape
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Translation_MakeEmptyGeneratingEdge(self, *args)


    def SetParameters(self, *args):
        """
        SetParameters(BRepSweep_Translation self, TopoDS_Shape aNewFace, TopoDS_Shape aNewVertex, TopoDS_Shape aGenF, TopoDS_Shape aGenV, Sweep_NumShape aDirV)

        Sets the  parameters of the new  vertex  on the new
        face. The new face and  new vertex where generated
        from aGenF, aGenV and aDirV .

        :type aNewFace: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aNewVertex: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenF: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenV: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirV: OCC.wrapper.Sweep.Sweep_NumShape

        """
        return _BRepSweep.BRepSweep_Translation_SetParameters(self, *args)


    def SetDirectingParameter(self, *args):
        """
        SetDirectingParameter(BRepSweep_Translation self, TopoDS_Shape aNewEdge, TopoDS_Shape aNewVertex, TopoDS_Shape aGenV, Sweep_NumShape aDirE, Sweep_NumShape aDirV)

        Sets the  parameter of the new  vertex  on the new
        edge. The new edge and  new vertex where generated
        from aGenV aDirE, and aDirV.

        :type aNewEdge: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aNewVertex: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenV: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirE: OCC.wrapper.Sweep.Sweep_NumShape
        :type aDirV: OCC.wrapper.Sweep.Sweep_NumShape

        """
        return _BRepSweep.BRepSweep_Translation_SetDirectingParameter(self, *args)


    def SetGeneratingParameter(self, *args):
        """
        SetGeneratingParameter(BRepSweep_Translation self, TopoDS_Shape aNewEdge, TopoDS_Shape aNewVertex, TopoDS_Shape aGenE, TopoDS_Shape aGenV, Sweep_NumShape aDirV)

        Sets the  parameter of the new  vertex  on the new
        edge. The new edge and  new vertex where generated
        from aGenE, aGenV and aDirV .

        :type aNewEdge: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aNewVertex: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenE: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenV: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirV: OCC.wrapper.Sweep.Sweep_NumShape

        """
        return _BRepSweep.BRepSweep_Translation_SetGeneratingParameter(self, *args)


    def MakeEmptyFace(self, *args):
        """
        MakeEmptyFace(BRepSweep_Translation self, TopoDS_Shape aGenS, Sweep_NumShape aDirS) -> TopoDS_Shape

        Builds the  face addressed  by [aGenS,aDirS], with
        its geometric part, but without subcomponents. The
        couple aGenS, aDirS can  be a "generating face and
        a  directing  vertex" or  "a generating edge and a
        directing  edge".

        :type aGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirS: OCC.wrapper.Sweep.Sweep_NumShape
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Translation_MakeEmptyFace(self, *args)


    def SetPCurve(self, *args):
        """
        SetPCurve(BRepSweep_Translation self, TopoDS_Shape aNewFace, TopoDS_Shape aNewEdge, TopoDS_Shape aGenF, TopoDS_Shape aGenE, Sweep_NumShape aDirV, TopAbs_Orientation const orien)

        Sets the PCurve for a new edge on a new face. The
        new edge and  the  new face were generated  using
        aGenF, aGenE and aDirV.

        :type aNewFace: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aNewEdge: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenF: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenE: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirV: OCC.wrapper.Sweep.Sweep_NumShape
        :type orien: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _BRepSweep.BRepSweep_Translation_SetPCurve(self, *args)


    def SetGeneratingPCurve(self, *args):
        """
        SetGeneratingPCurve(BRepSweep_Translation self, TopoDS_Shape aNewFace, TopoDS_Shape aNewEdge, TopoDS_Shape aGenE, Sweep_NumShape aDirE, Sweep_NumShape aDirV, TopAbs_Orientation const orien)

        Sets the PCurve for a new edge on a new face. The
        new edge and  the  new face were generated  using
        aGenE, aDirE and aDirV.

        :type aNewFace: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aNewEdge: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenE: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirE: OCC.wrapper.Sweep.Sweep_NumShape
        :type aDirV: OCC.wrapper.Sweep.Sweep_NumShape
        :type orien: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _BRepSweep.BRepSweep_Translation_SetGeneratingPCurve(self, *args)


    def SetDirectingPCurve(self, *args):
        """
        SetDirectingPCurve(BRepSweep_Translation self, TopoDS_Shape aNewFace, TopoDS_Shape aNewEdge, TopoDS_Shape aGenE, TopoDS_Shape aGenV, Sweep_NumShape aDirE, TopAbs_Orientation const orien)

        Sets the PCurve for a new edge on a new face. The
        new edge and  the  new face were generated  using
        aGenE, aDirE and aGenV.

        :type aNewFace: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aNewEdge: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenE: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenV: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirE: OCC.wrapper.Sweep.Sweep_NumShape
        :type orien: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _BRepSweep.BRepSweep_Translation_SetDirectingPCurve(self, *args)


    def DirectSolid(self, *args):
        """
        DirectSolid(BRepSweep_Translation self, TopoDS_Shape aGenS, Sweep_NumShape aDirS) -> TopAbs_Orientation

        Returns the Orientation of the  shell in the solid
        generated by the face aGenS  with  the edge aDirS.
        It is  REVERSED  if the surface is  swept  in  the
        direction of the normal.

        :type aGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirS: OCC.wrapper.Sweep.Sweep_NumShape
        :rtype: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _BRepSweep.BRepSweep_Translation_DirectSolid(self, *args)


    def GGDShapeIsToAdd(self, *args):
        """
        GGDShapeIsToAdd(BRepSweep_Translation self, TopoDS_Shape aNewShape, TopoDS_Shape aNewSubShape, TopoDS_Shape aGenS, TopoDS_Shape aSubGenS, Sweep_NumShape aDirS) -> Standard_Boolean

        Returns   true   if  aNewSubShape    (addressed by
        aSubGenS  and aDirS)  must  be added  in aNewShape
        (addressed by aGenS and aDirS).

        :type aNewShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aNewSubShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aSubGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirS: OCC.wrapper.Sweep.Sweep_NumShape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepSweep.BRepSweep_Translation_GGDShapeIsToAdd(self, *args)


    def GDDShapeIsToAdd(self, *args):
        """
        GDDShapeIsToAdd(BRepSweep_Translation self, TopoDS_Shape aNewShape, TopoDS_Shape aNewSubShape, TopoDS_Shape aGenS, Sweep_NumShape aDirS, Sweep_NumShape aSubDirS) -> Standard_Boolean

        Returns   true   if  aNewSubShape    (addressed by
        aGenS  and aSubDirS)  must  be added  in aNewShape
        (addressed by aGenS and aDirS).

        :type aNewShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aNewSubShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirS: OCC.wrapper.Sweep.Sweep_NumShape
        :type aSubDirS: OCC.wrapper.Sweep.Sweep_NumShape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepSweep.BRepSweep_Translation_GDDShapeIsToAdd(self, *args)


    def SeparatedWires(self, *args):
        """
        SeparatedWires(BRepSweep_Translation self, TopoDS_Shape aNewShape, TopoDS_Shape aNewSubShape, TopoDS_Shape aGenS, TopoDS_Shape aSubGenS, Sweep_NumShape aDirS) -> Standard_Boolean

        In  some  particular  cases  the   topology  of  a
        generated  face must be  composed  of  independant
        closed wires,  in this case  this function returns
        true.
        Here it always returns false.

        :type aNewShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aNewSubShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aSubGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirS: OCC.wrapper.Sweep.Sweep_NumShape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepSweep.BRepSweep_Translation_SeparatedWires(self, *args)


    def HasShape(self, *args):
        """
        HasShape(BRepSweep_Translation self, TopoDS_Shape aGenS, Sweep_NumShape aDirS) -> Standard_Boolean

        Returns true   if aDirS   and aGenS  addresses   a
        resulting Shape. In some  specific cases the shape
        can  be    geometrically   inexsistant,  then this
        function returns false.

        :type aGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirS: OCC.wrapper.Sweep.Sweep_NumShape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepSweep.BRepSweep_Translation_HasShape(self, *args)


    def IsInvariant(self, *args):
        """
        IsInvariant(BRepSweep_Translation self, TopoDS_Shape aGenS) -> Standard_Boolean

        Returns  always     false   because    here    the
        transformation is a translation.

        :type aGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepSweep.BRepSweep_Translation_IsInvariant(self, *args)


    def Vec(self, *args):
        """
        Vec(BRepSweep_Translation self) -> gp_Vec

        Returns the Vector of the Prism,  if it is an infinite
        prism the Vec is unitar.

        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _BRepSweep.BRepSweep_Translation_Vec(self, *args)

    __swig_destroy__ = _BRepSweep.delete_BRepSweep_Translation
BRepSweep_Translation_swigregister = _BRepSweep.BRepSweep_Translation_swigregister
BRepSweep_Translation_swigregister(BRepSweep_Translation)

class BRepSweep_Iterator(object):
    """
    This class provides iteration services required by
    the Generating Line (TopoDS Shape) of a BRepSweep.
    This   tool is  used  to   iterate  on the  direct
    sub-shapes of a Shape.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BRepSweep_Iterator self) -> BRepSweep_Iterator

        This class provides iteration services required by
        the Generating Line (TopoDS Shape) of a BRepSweep.
        This   tool is  used  to   iterate  on the  direct
        sub-shapes of a Shape.
        """
        this = _BRepSweep.new_BRepSweep_Iterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(BRepSweep_Iterator self, TopoDS_Shape aShape)

        Resest the Iterator on sub-shapes of <aShape>.

        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Iterator_Init(self, *args)


    def More(self, *args):
        """
        More(BRepSweep_Iterator self) -> Standard_Boolean

        Returns True if there is a current sub-shape.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepSweep.BRepSweep_Iterator_More(self, *args)


    def Next(self, *args):
        """
        Next(BRepSweep_Iterator self)

        Moves to the next sub-shape.


        """
        return _BRepSweep.BRepSweep_Iterator_Next(self, *args)


    def Value(self, *args):
        """
        Returns the current sub-shape.

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _BRepSweep.BRepSweep_Iterator_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Orientation(self, *args):
        """
        Orientation(BRepSweep_Iterator self) -> TopAbs_Orientation

        Returns the orientation of the current sub-shape.

        :rtype: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _BRepSweep.BRepSweep_Iterator_Orientation(self, *args)

    __swig_destroy__ = _BRepSweep.delete_BRepSweep_Iterator
BRepSweep_Iterator_swigregister = _BRepSweep.BRepSweep_Iterator_swigregister
BRepSweep_Iterator_swigregister(BRepSweep_Iterator)

class BRepSweep_Rotation(BRepSweep_Trsf):
    """
    Provides   an  algorithm   to   build  object   by
    Rotation sweep.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BRepSweep_Rotation self, TopoDS_Shape S, Sweep_NumShape N, TopLoc_Location L, gp_Ax1 A, Standard_Real const D, Standard_Boolean const C) -> BRepSweep_Rotation

        Creates a topology  by rotating <S>  around A with the
        angle D.

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type N: OCC.wrapper.Sweep.Sweep_NumShape
        :type L: OCC.wrapper.TopLoc.TopLoc_Location
        :type A: OCC.wrapper.gp.gp_Ax1
        :type D: float
        :type C: bool

        """
        this = _BRepSweep.new_BRepSweep_Rotation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def MakeEmptyVertex(self, *args):
        """
        MakeEmptyVertex(BRepSweep_Rotation self, TopoDS_Shape aGenV, Sweep_NumShape aDirV) -> TopoDS_Shape

        Builds the vertex addressed by [aGenV,aDirV], with its
        geometric part, but without subcomponents.

        :type aGenV: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirV: OCC.wrapper.Sweep.Sweep_NumShape
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Rotation_MakeEmptyVertex(self, *args)


    def MakeEmptyDirectingEdge(self, *args):
        """
        MakeEmptyDirectingEdge(BRepSweep_Rotation self, TopoDS_Shape aGenV, Sweep_NumShape aDirE) -> TopoDS_Shape

        Builds the edge addressed by [aGenV,aDirE], with its
        geometric part, but without subcomponents.

        :type aGenV: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirE: OCC.wrapper.Sweep.Sweep_NumShape
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Rotation_MakeEmptyDirectingEdge(self, *args)


    def MakeEmptyGeneratingEdge(self, *args):
        """
        MakeEmptyGeneratingEdge(BRepSweep_Rotation self, TopoDS_Shape aGenE, Sweep_NumShape aDirV) -> TopoDS_Shape

        Builds the edge addressed by [aGenE,aDirV], with its
        geometric part, but without subcomponents.

        :type aGenE: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirV: OCC.wrapper.Sweep.Sweep_NumShape
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Rotation_MakeEmptyGeneratingEdge(self, *args)


    def SetParameters(self, *args):
        """
        SetParameters(BRepSweep_Rotation self, TopoDS_Shape aNewFace, TopoDS_Shape aNewVertex, TopoDS_Shape aGenF, TopoDS_Shape aGenV, Sweep_NumShape aDirV)

        Sets the  parameters of the new  vertex  on the new
        face. The new face and  new vertex where generated
        from aGenF, aGenV and aDirV .

        :type aNewFace: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aNewVertex: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenF: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenV: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirV: OCC.wrapper.Sweep.Sweep_NumShape

        """
        return _BRepSweep.BRepSweep_Rotation_SetParameters(self, *args)


    def SetDirectingParameter(self, *args):
        """
        SetDirectingParameter(BRepSweep_Rotation self, TopoDS_Shape aNewEdge, TopoDS_Shape aNewVertex, TopoDS_Shape aGenV, Sweep_NumShape aDirE, Sweep_NumShape aDirV)

        Sets the  parameter of the new  vertex  on the new
        edge. The new edge and  new vertex where generated
        from aGenV aDirE, and aDirV.

        :type aNewEdge: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aNewVertex: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenV: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirE: OCC.wrapper.Sweep.Sweep_NumShape
        :type aDirV: OCC.wrapper.Sweep.Sweep_NumShape

        """
        return _BRepSweep.BRepSweep_Rotation_SetDirectingParameter(self, *args)


    def SetGeneratingParameter(self, *args):
        """
        SetGeneratingParameter(BRepSweep_Rotation self, TopoDS_Shape aNewEdge, TopoDS_Shape aNewVertex, TopoDS_Shape aGenE, TopoDS_Shape aGenV, Sweep_NumShape aDirV)

        Sets the  parameter of the new  vertex  on the new
        edge. The new edge and  new vertex where generated
        from aGenE, aGenV and aDirV .

        :type aNewEdge: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aNewVertex: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenE: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenV: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirV: OCC.wrapper.Sweep.Sweep_NumShape

        """
        return _BRepSweep.BRepSweep_Rotation_SetGeneratingParameter(self, *args)


    def MakeEmptyFace(self, *args):
        """
        MakeEmptyFace(BRepSweep_Rotation self, TopoDS_Shape aGenS, Sweep_NumShape aDirS) -> TopoDS_Shape

        Builds the face  addressed by [aGenS,aDirS],  with
        its geometric part, but without subcomponents. The
        couple aGenS, aDirS can be  a "generating face and
        a  directing vertex" or  "a generating  edge and a
        directing edge".

        :type aGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirS: OCC.wrapper.Sweep.Sweep_NumShape
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Rotation_MakeEmptyFace(self, *args)


    def SetPCurve(self, *args):
        """
        SetPCurve(BRepSweep_Rotation self, TopoDS_Shape aNewFace, TopoDS_Shape aNewEdge, TopoDS_Shape aGenF, TopoDS_Shape aGenE, Sweep_NumShape aDirV, TopAbs_Orientation const orien)

        Sets the PCurve for a new edge on a new face. The
        new edge and  the  new face were generated  using
        aGenF, aGenE and aDirV.

        :type aNewFace: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aNewEdge: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenF: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenE: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirV: OCC.wrapper.Sweep.Sweep_NumShape
        :type orien: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _BRepSweep.BRepSweep_Rotation_SetPCurve(self, *args)


    def SetGeneratingPCurve(self, *args):
        """
        SetGeneratingPCurve(BRepSweep_Rotation self, TopoDS_Shape aNewFace, TopoDS_Shape aNewEdge, TopoDS_Shape aGenE, Sweep_NumShape aDirE, Sweep_NumShape aDirV, TopAbs_Orientation const orien)

        Sets the PCurve for a new edge on a new face. The
        new edge and  the  new face were generated  using
        aGenE, aDirE and aDirV.

        :type aNewFace: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aNewEdge: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenE: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirE: OCC.wrapper.Sweep.Sweep_NumShape
        :type aDirV: OCC.wrapper.Sweep.Sweep_NumShape
        :type orien: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _BRepSweep.BRepSweep_Rotation_SetGeneratingPCurve(self, *args)


    def SetDirectingPCurve(self, *args):
        """
        SetDirectingPCurve(BRepSweep_Rotation self, TopoDS_Shape aNewFace, TopoDS_Shape aNewEdge, TopoDS_Shape aGenE, TopoDS_Shape aGenV, Sweep_NumShape aDirE, TopAbs_Orientation const orien)

        Sets the PCurve for a new edge on a new face. The
        new edge and  the  new face were generated  using
        aGenE, aDirE and aGenV.

        :type aNewFace: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aNewEdge: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenE: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenV: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirE: OCC.wrapper.Sweep.Sweep_NumShape
        :type orien: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _BRepSweep.BRepSweep_Rotation_SetDirectingPCurve(self, *args)


    def DirectSolid(self, *args):
        """
        DirectSolid(BRepSweep_Rotation self, TopoDS_Shape aGenS, Sweep_NumShape aDirS) -> TopAbs_Orientation

        Returns the Orientation of the  shell in the solid
        generated by the face aGenS  with  the edge aDirS.
        It is  REVERSED  if the surface is  swept  in  the
        direction of the normal.

        :type aGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirS: OCC.wrapper.Sweep.Sweep_NumShape
        :rtype: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _BRepSweep.BRepSweep_Rotation_DirectSolid(self, *args)


    def GGDShapeIsToAdd(self, *args):
        """
        GGDShapeIsToAdd(BRepSweep_Rotation self, TopoDS_Shape aNewShape, TopoDS_Shape aNewSubShape, TopoDS_Shape aGenS, TopoDS_Shape aSubGenS, Sweep_NumShape aDirS) -> Standard_Boolean

        Returns   true   if  aNewSubShape    (addressed by
        aSubGenS  and aDirS)  must  be added  in aNewShape
        (addressed by aGenS and aDirS).

        :type aNewShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aNewSubShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aSubGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirS: OCC.wrapper.Sweep.Sweep_NumShape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepSweep.BRepSweep_Rotation_GGDShapeIsToAdd(self, *args)


    def GDDShapeIsToAdd(self, *args):
        """
        GDDShapeIsToAdd(BRepSweep_Rotation self, TopoDS_Shape aNewShape, TopoDS_Shape aNewSubShape, TopoDS_Shape aGenS, Sweep_NumShape aDirS, Sweep_NumShape aSubDirS) -> Standard_Boolean

        Returns   true   if  aNewSubShape    (addressed by
        aGenS  and aSubDirS)  must  be added  in aNewShape
        (addressed by aGenS and aDirS).

        :type aNewShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aNewSubShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirS: OCC.wrapper.Sweep.Sweep_NumShape
        :type aSubDirS: OCC.wrapper.Sweep.Sweep_NumShape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepSweep.BRepSweep_Rotation_GDDShapeIsToAdd(self, *args)


    def SeparatedWires(self, *args):
        """
        SeparatedWires(BRepSweep_Rotation self, TopoDS_Shape aNewShape, TopoDS_Shape aNewSubShape, TopoDS_Shape aGenS, TopoDS_Shape aSubGenS, Sweep_NumShape aDirS) -> Standard_Boolean

        In   some  particular  cases  the  topology  of  a
        generated  face  must  be  composed of independant
        closed wires, in  this  case this function returns
        true.   The  only  case in whitch the function may
        return true is a planar face in a closed revol.

        :type aNewShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aNewSubShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aSubGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirS: OCC.wrapper.Sweep.Sweep_NumShape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepSweep.BRepSweep_Rotation_SeparatedWires(self, *args)


    def SplitShell(self, *args):
        """
        SplitShell(BRepSweep_Rotation self, TopoDS_Shape aNewShape) -> TopoDS_Shape

        In  some  particular  cases  the   topology  of  a
        generated  Shell must be  composed  of  independant
        closed Shells,  in this case  this function returns
        a Compound of independant Shells.

        :type aNewShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Rotation_SplitShell(self, *args)


    def HasShape(self, *args):
        """
        HasShape(BRepSweep_Rotation self, TopoDS_Shape aGenS, Sweep_NumShape aDirS) -> Standard_Boolean

        Returns true   if aDirS   and aGenS  addresses   a
        resulting Shape. In some  specific cases the shape
        can  be    geometrically   inexsistant,  then this
        function returns false.

        :type aGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aDirS: OCC.wrapper.Sweep.Sweep_NumShape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepSweep.BRepSweep_Rotation_HasShape(self, *args)


    def IsInvariant(self, *args):
        """
        IsInvariant(BRepSweep_Rotation self, TopoDS_Shape aGenS) -> Standard_Boolean

        Returns true when   the geometry of  aGenS  is not
        modified  by the rotation.

        :type aGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepSweep.BRepSweep_Rotation_IsInvariant(self, *args)


    def Axe(self, *args):
        """
        Axe(BRepSweep_Rotation self) -> gp_Ax1

        returns the axis

        :rtype: OCC.wrapper.gp.gp_Ax1

        """
        return _BRepSweep.BRepSweep_Rotation_Axe(self, *args)


    def Angle(self, *args):
        """
        Angle(BRepSweep_Rotation self) -> Standard_Real

        returns the angle.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepSweep.BRepSweep_Rotation_Angle(self, *args)

    __swig_destroy__ = _BRepSweep.delete_BRepSweep_Rotation
BRepSweep_Rotation_swigregister = _BRepSweep.BRepSweep_Rotation_swigregister
BRepSweep_Rotation_swigregister(BRepSweep_Rotation)

class BRepSweep_Revol(object):
    """
    Provides natural constructors to build BRepSweep
    rotated swept Primitives.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BRepSweep_Revol self, TopoDS_Shape S, gp_Ax1 A, Standard_Real const D, Standard_Boolean const C) -> BRepSweep_Revol
        __init__(BRepSweep_Revol self, TopoDS_Shape S, gp_Ax1 A, Standard_Boolean const C) -> BRepSweep_Revol

        Builds the Revol of meridian S  axis A and angle 2*Pi.
        If C is true S is copied.

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type A: OCC.wrapper.gp.gp_Ax1
        :type C: bool

        """
        this = _BRepSweep.new_BRepSweep_Revol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Shape(self, *args):
        """
        Shape(BRepSweep_Revol self) -> TopoDS_Shape
        Shape(BRepSweep_Revol self, TopoDS_Shape aGenS) -> TopoDS_Shape

        Returns    the  TopoDS  Shape   generated  with  aGenS
        (subShape  of the generating shape).

        :type aGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Revol_Shape(self, *args)


    def FirstShape(self, *args):
        """
        FirstShape(BRepSweep_Revol self) -> TopoDS_Shape
        FirstShape(BRepSweep_Revol self, TopoDS_Shape aGenS) -> TopoDS_Shape

        Returns the first shape of the revol  (coinciding with
        the generating shape).

        :type aGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Revol_FirstShape(self, *args)


    def LastShape(self, *args):
        """
        LastShape(BRepSweep_Revol self) -> TopoDS_Shape
        LastShape(BRepSweep_Revol self, TopoDS_Shape aGenS) -> TopoDS_Shape

        Returns the  TopoDS  Shape of the top  of  the  prism.
        generated  with  aGenS  (subShape  of  the  generating
        shape).

        :type aGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Revol_LastShape(self, *args)


    def Axe(self, *args):
        """
        Axe(BRepSweep_Revol self) -> gp_Ax1

        returns the axis

        :rtype: OCC.wrapper.gp.gp_Ax1

        """
        return _BRepSweep.BRepSweep_Revol_Axe(self, *args)


    def Angle(self, *args):
        """
        Angle(BRepSweep_Revol self) -> Standard_Real

        returns the angle.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepSweep.BRepSweep_Revol_Angle(self, *args)

    __swig_destroy__ = _BRepSweep.delete_BRepSweep_Revol
BRepSweep_Revol_swigregister = _BRepSweep.BRepSweep_Revol_swigregister
BRepSweep_Revol_swigregister(BRepSweep_Revol)

class BRepSweep_Prism(object):
    """
    Provides natural constructors to build BRepSweep
    translated swept Primitives.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BRepSweep_Prism self, TopoDS_Shape S, gp_Vec V, Standard_Boolean const Copy, Standard_Boolean const Canonize) -> BRepSweep_Prism
        __init__(BRepSweep_Prism self, TopoDS_Shape S, gp_Dir D, Standard_Boolean const Inf, Standard_Boolean const Copy, Standard_Boolean const Canonize) -> BRepSweep_Prism

        Builds a semi-infinite or an infinite prism of base S.
        If Copy is true S is copied.  If Inf is true the prism
        is infinite, if Inf is false the  prism is infinite in
        the direction D. If Canonize is true then generated surfaces
        are attempted to be canonized in simple types

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type D: OCC.wrapper.gp.gp_Dir
        :type Inf: bool
        :type Copy: bool
        :type Canonize: bool

        """
        this = _BRepSweep.new_BRepSweep_Prism(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Shape(self, *args):
        """
        Shape(BRepSweep_Prism self) -> TopoDS_Shape
        Shape(BRepSweep_Prism self, TopoDS_Shape aGenS) -> TopoDS_Shape

        Returns    the  TopoDS  Shape   generated  with  aGenS
        (subShape  of the generating shape).

        :type aGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Prism_Shape(self, *args)


    def FirstShape(self, *args):
        """
        FirstShape(BRepSweep_Prism self) -> TopoDS_Shape
        FirstShape(BRepSweep_Prism self, TopoDS_Shape aGenS) -> TopoDS_Shape

        Returns the TopoDS Shape of the bottom  of the  prism.
        generated  with  aGenS  (subShape  of  the  generating
        shape).

        :type aGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Prism_FirstShape(self, *args)


    def LastShape(self, *args):
        """
        LastShape(BRepSweep_Prism self) -> TopoDS_Shape
        LastShape(BRepSweep_Prism self, TopoDS_Shape aGenS) -> TopoDS_Shape

        Returns the  TopoDS  Shape of the top  of  the  prism.
        generated  with  aGenS  (subShape  of  the  generating
        shape).

        :type aGenS: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Prism_LastShape(self, *args)


    def Vec(self, *args):
        """
        Vec(BRepSweep_Prism self) -> gp_Vec

        Returns the Vector of the Prism,  if it is an infinite
        prism the Vec is unitar.

        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _BRepSweep.BRepSweep_Prism_Vec(self, *args)

    __swig_destroy__ = _BRepSweep.delete_BRepSweep_Prism
BRepSweep_Prism_swigregister = _BRepSweep.BRepSweep_Prism_swigregister
BRepSweep_Prism_swigregister(BRepSweep_Prism)

class BRepSweep_Builder(object):
    """implements the abstract Builder with the BRep Builder"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BRepSweep_Builder self, BRep_Builder aBuilder) -> BRepSweep_Builder

        Creates a Builder.

        :type aBuilder: OCC.wrapper.BRep.BRep_Builder

        """
        this = _BRepSweep.new_BRepSweep_Builder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Builder(self, *args):
        """
        :rtype: OCC.wrapper.BRep.BRep_Builder

        """
        res = _BRepSweep.BRepSweep_Builder_Builder(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def MakeCompound(self, *args):
        """
        MakeCompound(BRepSweep_Builder self, TopoDS_Shape aCompound)

        Returns an empty Compound.

        :type aCompound: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Builder_MakeCompound(self, *args)


    def MakeCompSolid(self, *args):
        """
        MakeCompSolid(BRepSweep_Builder self, TopoDS_Shape aCompSolid)

        Returns an empty CompSolid.

        :type aCompSolid: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Builder_MakeCompSolid(self, *args)


    def MakeSolid(self, *args):
        """
        MakeSolid(BRepSweep_Builder self, TopoDS_Shape aSolid)

        Returns an empty Solid.

        :type aSolid: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Builder_MakeSolid(self, *args)


    def MakeShell(self, *args):
        """
        MakeShell(BRepSweep_Builder self, TopoDS_Shape aShell)

        Returns an empty Shell.

        :type aShell: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Builder_MakeShell(self, *args)


    def MakeWire(self, *args):
        """
        MakeWire(BRepSweep_Builder self, TopoDS_Shape aWire)

        Returns an empty Wire.

        :type aWire: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Builder_MakeWire(self, *args)


    def Add(self, *args):
        """
        Add(BRepSweep_Builder self, TopoDS_Shape aShape1, TopoDS_Shape aShape2, TopAbs_Orientation const Orient)
        Add(BRepSweep_Builder self, TopoDS_Shape aShape1, TopoDS_Shape aShape2)

        Adds the Shape 1 in the Shape 2.

        :type aShape1: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aShape2: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepSweep.BRepSweep_Builder_Add(self, *args)

    __swig_destroy__ = _BRepSweep.delete_BRepSweep_Builder
BRepSweep_Builder_swigregister = _BRepSweep.BRepSweep_Builder_swigregister
BRepSweep_Builder_swigregister(BRepSweep_Builder)



