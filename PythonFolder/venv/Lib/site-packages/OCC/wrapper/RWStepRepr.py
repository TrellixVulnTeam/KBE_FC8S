# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_RWStepRepr')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_RWStepRepr')
    _RWStepRepr = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_RWStepRepr', [dirname(__file__)])
        except ImportError:
            import _RWStepRepr
            return _RWStepRepr
        try:
            _mod = imp.load_module('_RWStepRepr', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _RWStepRepr = swig_import_helper()
    del swig_import_helper
else:
    import _RWStepRepr
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RWStepRepr.delete_SwigPyIterator

    def value(self):
        return _RWStepRepr.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _RWStepRepr.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _RWStepRepr.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _RWStepRepr.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _RWStepRepr.SwigPyIterator_equal(self, x)

    def copy(self):
        return _RWStepRepr.SwigPyIterator_copy(self)

    def next(self):
        return _RWStepRepr.SwigPyIterator_next(self)

    def __next__(self):
        return _RWStepRepr.SwigPyIterator___next__(self)

    def previous(self):
        return _RWStepRepr.SwigPyIterator_previous(self)

    def advance(self, n):
        return _RWStepRepr.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _RWStepRepr.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _RWStepRepr.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _RWStepRepr.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _RWStepRepr.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _RWStepRepr.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _RWStepRepr.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _RWStepRepr.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _RWStepRepr.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_RWStepRepr.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _RWStepRepr.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _RWStepRepr.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RWStepRepr.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _RWStepRepr.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _RWStepRepr.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _RWStepRepr.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _RWStepRepr.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_RWStepRepr.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _RWStepRepr.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _RWStepRepr.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RWStepRepr.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _RWStepRepr.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _RWStepRepr.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _RWStepRepr.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _RWStepRepr.ptr_to_number(item)
ptr_to_number = _RWStepRepr.ptr_to_number

def HashCode(*args):
    return _RWStepRepr.HashCode(*args)
HashCode = _RWStepRepr.HashCode

def ptr_equal(a, b):
    return _RWStepRepr.ptr_equal(a, b)
ptr_equal = _RWStepRepr.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepRepr
else:
    import StepRepr
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepBasic
else:
    import StepBasic
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepData
else:
    import StepData
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepShape
else:
    import StepShape
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepGeom
else:
    import StepGeom
del _swig_python_version_info
class RWStepRepr_RWProductConcept(object):
    """Read & Write tool for ProductConcept"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWProductConcept self) -> RWStepRepr_RWProductConcept

        Empty constructor


        """
        this = _RWStepRepr.new_RWStepRepr_RWProductConcept(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWProductConcept self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_ProductConcept ent)

        Reads ProductConcept

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ProductConcept

        """
        return _RWStepRepr.RWStepRepr_RWProductConcept_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWProductConcept self, StepData_StepWriter SW, Handle_StepRepr_ProductConcept ent)

        Writes ProductConcept

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ProductConcept

        """
        return _RWStepRepr.RWStepRepr_RWProductConcept_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWProductConcept self, Handle_StepRepr_ProductConcept ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ProductConcept
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWProductConcept_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWProductConcept
RWStepRepr_RWProductConcept_swigregister = _RWStepRepr.RWStepRepr_RWProductConcept_swigregister
RWStepRepr_RWProductConcept_swigregister(RWStepRepr_RWProductConcept)

class RWStepRepr_RWShapeAspectRelationship(object):
    """Read & Write tool for ShapeAspectRelationship"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWShapeAspectRelationship self) -> RWStepRepr_RWShapeAspectRelationship

        Empty constructor


        """
        this = _RWStepRepr.new_RWStepRepr_RWShapeAspectRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWShapeAspectRelationship self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_ShapeAspectRelationship ent)

        Reads ShapeAspectRelationship

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspectRelationship

        """
        return _RWStepRepr.RWStepRepr_RWShapeAspectRelationship_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWShapeAspectRelationship self, StepData_StepWriter SW, Handle_StepRepr_ShapeAspectRelationship ent)

        Writes ShapeAspectRelationship

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspectRelationship

        """
        return _RWStepRepr.RWStepRepr_RWShapeAspectRelationship_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWShapeAspectRelationship self, Handle_StepRepr_ShapeAspectRelationship ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspectRelationship
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWShapeAspectRelationship_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWShapeAspectRelationship
RWStepRepr_RWShapeAspectRelationship_swigregister = _RWStepRepr.RWStepRepr_RWShapeAspectRelationship_swigregister
RWStepRepr_RWShapeAspectRelationship_swigregister(RWStepRepr_RWShapeAspectRelationship)

class RWStepRepr_RWConfigurationDesign(object):
    """Read & Write tool for ConfigurationDesign"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWConfigurationDesign self) -> RWStepRepr_RWConfigurationDesign

        Empty constructor


        """
        this = _RWStepRepr.new_RWStepRepr_RWConfigurationDesign(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWConfigurationDesign self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_ConfigurationDesign ent)

        Reads ConfigurationDesign

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ConfigurationDesign

        """
        return _RWStepRepr.RWStepRepr_RWConfigurationDesign_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWConfigurationDesign self, StepData_StepWriter SW, Handle_StepRepr_ConfigurationDesign ent)

        Writes ConfigurationDesign

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ConfigurationDesign

        """
        return _RWStepRepr.RWStepRepr_RWConfigurationDesign_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWConfigurationDesign self, Handle_StepRepr_ConfigurationDesign ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ConfigurationDesign
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWConfigurationDesign_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWConfigurationDesign
RWStepRepr_RWConfigurationDesign_swigregister = _RWStepRepr.RWStepRepr_RWConfigurationDesign_swigregister
RWStepRepr_RWConfigurationDesign_swigregister(RWStepRepr_RWConfigurationDesign)

class RWStepRepr_RWCompGroupShAspAndCompShAspAndDatumFeatAndShAsp(object):
    """Read & Write Module for CompGroupShAspAndCompShAspAndDatumFeatAndShAsp"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWCompGroupShAspAndCompShAspAndDatumFeatAndShAsp self) -> RWStepRepr_RWCompGroupShAspAndCompShAspAndDatumFeatAndShAsp

        Read & Write Module for CompGroupShAspAndCompShAspAndDatumFeatAndShAsp
        """
        this = _RWStepRepr.new_RWStepRepr_RWCompGroupShAspAndCompShAspAndDatumFeatAndShAsp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWCompGroupShAspAndCompShAspAndDatumFeatAndShAsp self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp

        """
        return _RWStepRepr.RWStepRepr_RWCompGroupShAspAndCompShAspAndDatumFeatAndShAsp_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWCompGroupShAspAndCompShAspAndDatumFeatAndShAsp self, StepData_StepWriter SW, Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp

        """
        return _RWStepRepr.RWStepRepr_RWCompGroupShAspAndCompShAspAndDatumFeatAndShAsp_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWCompGroupShAspAndCompShAspAndDatumFeatAndShAsp self, Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWCompGroupShAspAndCompShAspAndDatumFeatAndShAsp_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWCompGroupShAspAndCompShAspAndDatumFeatAndShAsp
RWStepRepr_RWCompGroupShAspAndCompShAspAndDatumFeatAndShAsp_swigregister = _RWStepRepr.RWStepRepr_RWCompGroupShAspAndCompShAspAndDatumFeatAndShAsp_swigregister
RWStepRepr_RWCompGroupShAspAndCompShAspAndDatumFeatAndShAsp_swigregister(RWStepRepr_RWCompGroupShAspAndCompShAspAndDatumFeatAndShAsp)

class RWStepRepr_RWFunctionallyDefinedTransformation(object):
    """Read & Write Module for FunctionallyDefinedTransformation"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWFunctionallyDefinedTransformation self) -> RWStepRepr_RWFunctionallyDefinedTransformation

        Read & Write Module for FunctionallyDefinedTransformation
        """
        this = _RWStepRepr.new_RWStepRepr_RWFunctionallyDefinedTransformation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWFunctionallyDefinedTransformation self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_FunctionallyDefinedTransformation ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_FunctionallyDefinedTransformation

        """
        return _RWStepRepr.RWStepRepr_RWFunctionallyDefinedTransformation_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWFunctionallyDefinedTransformation self, StepData_StepWriter SW, Handle_StepRepr_FunctionallyDefinedTransformation ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_FunctionallyDefinedTransformation

        """
        return _RWStepRepr.RWStepRepr_RWFunctionallyDefinedTransformation_WriteStep(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWFunctionallyDefinedTransformation
RWStepRepr_RWFunctionallyDefinedTransformation_swigregister = _RWStepRepr.RWStepRepr_RWFunctionallyDefinedTransformation_swigregister
RWStepRepr_RWFunctionallyDefinedTransformation_swigregister(RWStepRepr_RWFunctionallyDefinedTransformation)

class RWStepRepr_RWReprItemAndLengthMeasureWithUnit(object):
    """Read & Write Module for ReprItemAndLengthMeasureWithUni"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWReprItemAndLengthMeasureWithUnit self) -> RWStepRepr_RWReprItemAndLengthMeasureWithUnit

        Read & Write Module for ReprItemAndLengthMeasureWithUni
        """
        this = _RWStepRepr.new_RWStepRepr_RWReprItemAndLengthMeasureWithUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWReprItemAndLengthMeasureWithUnit self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_ReprItemAndLengthMeasureWithUnit ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnit

        """
        return _RWStepRepr.RWStepRepr_RWReprItemAndLengthMeasureWithUnit_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWReprItemAndLengthMeasureWithUnit self, StepData_StepWriter SW, Handle_StepRepr_ReprItemAndLengthMeasureWithUnit ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnit

        """
        return _RWStepRepr.RWStepRepr_RWReprItemAndLengthMeasureWithUnit_WriteStep(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWReprItemAndLengthMeasureWithUnit
RWStepRepr_RWReprItemAndLengthMeasureWithUnit_swigregister = _RWStepRepr.RWStepRepr_RWReprItemAndLengthMeasureWithUnit_swigregister
RWStepRepr_RWReprItemAndLengthMeasureWithUnit_swigregister(RWStepRepr_RWReprItemAndLengthMeasureWithUnit)

class RWStepRepr_RWAssemblyComponentUsageSubstitute(object):
    """Read & Write Module for AssemblyComponentUsageSubstitute"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWAssemblyComponentUsageSubstitute self) -> RWStepRepr_RWAssemblyComponentUsageSubstitute

        Read & Write Module for AssemblyComponentUsageSubstitute
        """
        this = _RWStepRepr.new_RWStepRepr_RWAssemblyComponentUsageSubstitute(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWAssemblyComponentUsageSubstitute self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_AssemblyComponentUsageSubstitute ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_AssemblyComponentUsageSubstitute

        """
        return _RWStepRepr.RWStepRepr_RWAssemblyComponentUsageSubstitute_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWAssemblyComponentUsageSubstitute self, StepData_StepWriter SW, Handle_StepRepr_AssemblyComponentUsageSubstitute ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_AssemblyComponentUsageSubstitute

        """
        return _RWStepRepr.RWStepRepr_RWAssemblyComponentUsageSubstitute_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWAssemblyComponentUsageSubstitute self, Handle_StepRepr_AssemblyComponentUsageSubstitute ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_AssemblyComponentUsageSubstitute
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWAssemblyComponentUsageSubstitute_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWAssemblyComponentUsageSubstitute
RWStepRepr_RWAssemblyComponentUsageSubstitute_swigregister = _RWStepRepr.RWStepRepr_RWAssemblyComponentUsageSubstitute_swigregister
RWStepRepr_RWAssemblyComponentUsageSubstitute_swigregister(RWStepRepr_RWAssemblyComponentUsageSubstitute)

class RWStepRepr_RWShapeRepresentationRelationshipWithTransformation(object):
    """Read & Write Module for ShapeRepresentationRelationshipWithTransformation"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWShapeRepresentationRelationshipWithTransformation self) -> RWStepRepr_RWShapeRepresentationRelationshipWithTransformation

        Read & Write Module for ShapeRepresentationRelationshipWithTransformation
        """
        this = _RWStepRepr.new_RWStepRepr_RWShapeRepresentationRelationshipWithTransformation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWShapeRepresentationRelationshipWithTransformation self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation

        """
        return _RWStepRepr.RWStepRepr_RWShapeRepresentationRelationshipWithTransformation_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWShapeRepresentationRelationshipWithTransformation self, StepData_StepWriter SW, Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation

        """
        return _RWStepRepr.RWStepRepr_RWShapeRepresentationRelationshipWithTransformation_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWShapeRepresentationRelationshipWithTransformation self, Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWShapeRepresentationRelationshipWithTransformation_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWShapeRepresentationRelationshipWithTransformation
RWStepRepr_RWShapeRepresentationRelationshipWithTransformation_swigregister = _RWStepRepr.RWStepRepr_RWShapeRepresentationRelationshipWithTransformation_swigregister
RWStepRepr_RWShapeRepresentationRelationshipWithTransformation_swigregister(RWStepRepr_RWShapeRepresentationRelationshipWithTransformation)

class RWStepRepr_RWGlobalUncertaintyAssignedContext(object):
    """Read & Write Module for GlobalUncertaintyAssignedContext"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWGlobalUncertaintyAssignedContext self) -> RWStepRepr_RWGlobalUncertaintyAssignedContext

        Read & Write Module for GlobalUncertaintyAssignedContext
        """
        this = _RWStepRepr.new_RWStepRepr_RWGlobalUncertaintyAssignedContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWGlobalUncertaintyAssignedContext self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_GlobalUncertaintyAssignedContext ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.RWStepRepr.Handle_StepRepr_GlobalUncertaintyAssignedContext

        """
        return _RWStepRepr.RWStepRepr_RWGlobalUncertaintyAssignedContext_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWGlobalUncertaintyAssignedContext self, StepData_StepWriter SW, Handle_StepRepr_GlobalUncertaintyAssignedContext ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.RWStepRepr.Handle_StepRepr_GlobalUncertaintyAssignedContext

        """
        return _RWStepRepr.RWStepRepr_RWGlobalUncertaintyAssignedContext_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWGlobalUncertaintyAssignedContext self, Handle_StepRepr_GlobalUncertaintyAssignedContext ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.RWStepRepr.Handle_StepRepr_GlobalUncertaintyAssignedContext
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWGlobalUncertaintyAssignedContext_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWGlobalUncertaintyAssignedContext
RWStepRepr_RWGlobalUncertaintyAssignedContext_swigregister = _RWStepRepr.RWStepRepr_RWGlobalUncertaintyAssignedContext_swigregister
RWStepRepr_RWGlobalUncertaintyAssignedContext_swigregister(RWStepRepr_RWGlobalUncertaintyAssignedContext)

class RWStepRepr_RWFeatureForDatumTargetRelationship(object):
    """Read & Write tool for FeatureForDatumTargetRelationship """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWFeatureForDatumTargetRelationship self) -> RWStepRepr_RWFeatureForDatumTargetRelationship

        Empty constructor


        """
        this = _RWStepRepr.new_RWStepRepr_RWFeatureForDatumTargetRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWFeatureForDatumTargetRelationship self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_FeatureForDatumTargetRelationship ent)

        Reads ShapeAspectRelationship

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_FeatureForDatumTargetRelationship

        """
        return _RWStepRepr.RWStepRepr_RWFeatureForDatumTargetRelationship_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWFeatureForDatumTargetRelationship self, StepData_StepWriter SW, Handle_StepRepr_FeatureForDatumTargetRelationship ent)

        Writes ShapeAspectRelationship

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_FeatureForDatumTargetRelationship

        """
        return _RWStepRepr.RWStepRepr_RWFeatureForDatumTargetRelationship_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWFeatureForDatumTargetRelationship self, Handle_StepRepr_FeatureForDatumTargetRelationship ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_FeatureForDatumTargetRelationship
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWFeatureForDatumTargetRelationship_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWFeatureForDatumTargetRelationship
RWStepRepr_RWFeatureForDatumTargetRelationship_swigregister = _RWStepRepr.RWStepRepr_RWFeatureForDatumTargetRelationship_swigregister
RWStepRepr_RWFeatureForDatumTargetRelationship_swigregister(RWStepRepr_RWFeatureForDatumTargetRelationship)

class RWStepRepr_RWReprItemAndPlaneAngleMeasureWithUnitAndQRI(object):
    """Read & Write Module for ReprItemAndPlaneAngleMeasureWithUnitAndQRI"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWReprItemAndPlaneAngleMeasureWithUnitAndQRI self) -> RWStepRepr_RWReprItemAndPlaneAngleMeasureWithUnitAndQRI

        Read & Write Module for ReprItemAndPlaneAngleMeasureWithUnitAndQRI
        """
        this = _RWStepRepr.new_RWStepRepr_RWReprItemAndPlaneAngleMeasureWithUnitAndQRI(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWReprItemAndPlaneAngleMeasureWithUnitAndQRI self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI

        """
        return _RWStepRepr.RWStepRepr_RWReprItemAndPlaneAngleMeasureWithUnitAndQRI_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWReprItemAndPlaneAngleMeasureWithUnitAndQRI self, StepData_StepWriter SW, Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI

        """
        return _RWStepRepr.RWStepRepr_RWReprItemAndPlaneAngleMeasureWithUnitAndQRI_WriteStep(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWReprItemAndPlaneAngleMeasureWithUnitAndQRI
RWStepRepr_RWReprItemAndPlaneAngleMeasureWithUnitAndQRI_swigregister = _RWStepRepr.RWStepRepr_RWReprItemAndPlaneAngleMeasureWithUnitAndQRI_swigregister
RWStepRepr_RWReprItemAndPlaneAngleMeasureWithUnitAndQRI_swigregister(RWStepRepr_RWReprItemAndPlaneAngleMeasureWithUnitAndQRI)

class RWStepRepr_RWIntegerRepresentationItem(object):
    """Read & Write Module for IntegerRepresentationItem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWIntegerRepresentationItem self) -> RWStepRepr_RWIntegerRepresentationItem

        Read & Write Module for IntegerRepresentationItem
        """
        this = _RWStepRepr.new_RWStepRepr_RWIntegerRepresentationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWIntegerRepresentationItem self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_IntegerRepresentationItem ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_IntegerRepresentationItem

        """
        return _RWStepRepr.RWStepRepr_RWIntegerRepresentationItem_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWIntegerRepresentationItem self, StepData_StepWriter SW, Handle_StepRepr_IntegerRepresentationItem ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_IntegerRepresentationItem

        """
        return _RWStepRepr.RWStepRepr_RWIntegerRepresentationItem_WriteStep(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWIntegerRepresentationItem
RWStepRepr_RWIntegerRepresentationItem_swigregister = _RWStepRepr.RWStepRepr_RWIntegerRepresentationItem_swigregister
RWStepRepr_RWIntegerRepresentationItem_swigregister(RWStepRepr_RWIntegerRepresentationItem)

class RWStepRepr_RWQuantifiedAssemblyComponentUsage(object):
    """Read & Write tool for QuantifiedAssemblyComponentUsage"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWQuantifiedAssemblyComponentUsage self) -> RWStepRepr_RWQuantifiedAssemblyComponentUsage

        Empty constructor


        """
        this = _RWStepRepr.new_RWStepRepr_RWQuantifiedAssemblyComponentUsage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWQuantifiedAssemblyComponentUsage self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_QuantifiedAssemblyComponentUsage ent)

        Reads QuantifiedAssemblyComponentUsage

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage

        """
        return _RWStepRepr.RWStepRepr_RWQuantifiedAssemblyComponentUsage_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWQuantifiedAssemblyComponentUsage self, StepData_StepWriter SW, Handle_StepRepr_QuantifiedAssemblyComponentUsage ent)

        Writes QuantifiedAssemblyComponentUsage

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage

        """
        return _RWStepRepr.RWStepRepr_RWQuantifiedAssemblyComponentUsage_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWQuantifiedAssemblyComponentUsage self, Handle_StepRepr_QuantifiedAssemblyComponentUsage ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWQuantifiedAssemblyComponentUsage_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWQuantifiedAssemblyComponentUsage
RWStepRepr_RWQuantifiedAssemblyComponentUsage_swigregister = _RWStepRepr.RWStepRepr_RWQuantifiedAssemblyComponentUsage_swigregister
RWStepRepr_RWQuantifiedAssemblyComponentUsage_swigregister(RWStepRepr_RWQuantifiedAssemblyComponentUsage)

class RWStepRepr_RWPerpendicularTo(object):
    """Read & Write tool for PerpendicularTo"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWPerpendicularTo self) -> RWStepRepr_RWPerpendicularTo

        Empty constructor


        """
        this = _RWStepRepr.new_RWStepRepr_RWPerpendicularTo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWPerpendicularTo self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_PerpendicularTo ent)

        Reads PerpendicularTo

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_PerpendicularTo

        """
        return _RWStepRepr.RWStepRepr_RWPerpendicularTo_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWPerpendicularTo self, StepData_StepWriter SW, Handle_StepRepr_PerpendicularTo ent)

        Writes PerpendicularTo

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_PerpendicularTo

        """
        return _RWStepRepr.RWStepRepr_RWPerpendicularTo_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWPerpendicularTo self, Handle_StepRepr_PerpendicularTo ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_PerpendicularTo
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWPerpendicularTo_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWPerpendicularTo
RWStepRepr_RWPerpendicularTo_swigregister = _RWStepRepr.RWStepRepr_RWPerpendicularTo_swigregister
RWStepRepr_RWPerpendicularTo_swigregister(RWStepRepr_RWPerpendicularTo)

class RWStepRepr_RWProductDefinitionShape(object):
    """Read & Write tool for ProductDefinitionShape"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWProductDefinitionShape self) -> RWStepRepr_RWProductDefinitionShape

        Empty constructor


        """
        this = _RWStepRepr.new_RWStepRepr_RWProductDefinitionShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWProductDefinitionShape self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_ProductDefinitionShape ent)

        Reads ProductDefinitionShape

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.RWStepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _RWStepRepr.RWStepRepr_RWProductDefinitionShape_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWProductDefinitionShape self, StepData_StepWriter SW, Handle_StepRepr_ProductDefinitionShape ent)

        Writes ProductDefinitionShape

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.RWStepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _RWStepRepr.RWStepRepr_RWProductDefinitionShape_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWProductDefinitionShape self, Handle_StepRepr_ProductDefinitionShape ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.RWStepRepr.Handle_StepRepr_ProductDefinitionShape
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWProductDefinitionShape_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWProductDefinitionShape
RWStepRepr_RWProductDefinitionShape_swigregister = _RWStepRepr.RWStepRepr_RWProductDefinitionShape_swigregister
RWStepRepr_RWProductDefinitionShape_swigregister(RWStepRepr_RWProductDefinitionShape)

class RWStepRepr_RWShapeAspectDerivingRelationship(object):
    """Read & Write tool for ShapeAspectDerivingRelationship"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWShapeAspectDerivingRelationship self) -> RWStepRepr_RWShapeAspectDerivingRelationship

        Empty constructor


        """
        this = _RWStepRepr.new_RWStepRepr_RWShapeAspectDerivingRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWShapeAspectDerivingRelationship self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_ShapeAspectDerivingRelationship ent)

        Reads ShapeAspectDerivingRelationship

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspectDerivingRelationship

        """
        return _RWStepRepr.RWStepRepr_RWShapeAspectDerivingRelationship_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWShapeAspectDerivingRelationship self, StepData_StepWriter SW, Handle_StepRepr_ShapeAspectDerivingRelationship ent)

        Writes ShapeAspectDerivingRelationship

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspectDerivingRelationship

        """
        return _RWStepRepr.RWStepRepr_RWShapeAspectDerivingRelationship_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWShapeAspectDerivingRelationship self, Handle_StepRepr_ShapeAspectDerivingRelationship ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspectDerivingRelationship
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWShapeAspectDerivingRelationship_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWShapeAspectDerivingRelationship
RWStepRepr_RWShapeAspectDerivingRelationship_swigregister = _RWStepRepr.RWStepRepr_RWShapeAspectDerivingRelationship_swigregister
RWStepRepr_RWShapeAspectDerivingRelationship_swigregister(RWStepRepr_RWShapeAspectDerivingRelationship)

class RWStepRepr_RWPropertyDefinitionRepresentation(object):
    """Read & Write tool for PropertyDefinitionRepresentation"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWPropertyDefinitionRepresentation self) -> RWStepRepr_RWPropertyDefinitionRepresentation

        Empty constructor


        """
        this = _RWStepRepr.new_RWStepRepr_RWPropertyDefinitionRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWPropertyDefinitionRepresentation self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_PropertyDefinitionRepresentation ent)

        Reads PropertyDefinitionRepresentation

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_PropertyDefinitionRepresentation

        """
        return _RWStepRepr.RWStepRepr_RWPropertyDefinitionRepresentation_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWPropertyDefinitionRepresentation self, StepData_StepWriter SW, Handle_StepRepr_PropertyDefinitionRepresentation ent)

        Writes PropertyDefinitionRepresentation

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_PropertyDefinitionRepresentation

        """
        return _RWStepRepr.RWStepRepr_RWPropertyDefinitionRepresentation_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWPropertyDefinitionRepresentation self, Handle_StepRepr_PropertyDefinitionRepresentation ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_PropertyDefinitionRepresentation
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWPropertyDefinitionRepresentation_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWPropertyDefinitionRepresentation
RWStepRepr_RWPropertyDefinitionRepresentation_swigregister = _RWStepRepr.RWStepRepr_RWPropertyDefinitionRepresentation_swigregister
RWStepRepr_RWPropertyDefinitionRepresentation_swigregister(RWStepRepr_RWPropertyDefinitionRepresentation)

class RWStepRepr_RWConstructiveGeometryRepresentationRelationship(object):
    """Read & Write Module for ConstructiveGeometryRepresentationRelationship"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWConstructiveGeometryRepresentationRelationship self) -> RWStepRepr_RWConstructiveGeometryRepresentationRelationship

        Read & Write Module for ConstructiveGeometryRepresentationRelationship
        """
        this = _RWStepRepr.new_RWStepRepr_RWConstructiveGeometryRepresentationRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWConstructiveGeometryRepresentationRelationship self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_ConstructiveGeometryRepresentationRelationship ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentationRelationship

        """
        return _RWStepRepr.RWStepRepr_RWConstructiveGeometryRepresentationRelationship_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWConstructiveGeometryRepresentationRelationship self, StepData_StepWriter SW, Handle_StepRepr_ConstructiveGeometryRepresentationRelationship ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentationRelationship

        """
        return _RWStepRepr.RWStepRepr_RWConstructiveGeometryRepresentationRelationship_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWConstructiveGeometryRepresentationRelationship self, Handle_StepRepr_ConstructiveGeometryRepresentationRelationship ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentationRelationship
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWConstructiveGeometryRepresentationRelationship_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWConstructiveGeometryRepresentationRelationship
RWStepRepr_RWConstructiveGeometryRepresentationRelationship_swigregister = _RWStepRepr.RWStepRepr_RWConstructiveGeometryRepresentationRelationship_swigregister
RWStepRepr_RWConstructiveGeometryRepresentationRelationship_swigregister(RWStepRepr_RWConstructiveGeometryRepresentationRelationship)

class RWStepRepr_RWMeasureRepresentationItem(object):
    """Read & Write Module for MeasureRepresentationItem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWMeasureRepresentationItem self) -> RWStepRepr_RWMeasureRepresentationItem

        Read & Write Module for MeasureRepresentationItem
        """
        this = _RWStepRepr.new_RWStepRepr_RWMeasureRepresentationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWMeasureRepresentationItem self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_MeasureRepresentationItem ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.RWStepRepr.Handle_StepRepr_MeasureRepresentationItem

        """
        return _RWStepRepr.RWStepRepr_RWMeasureRepresentationItem_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWMeasureRepresentationItem self, StepData_StepWriter SW, Handle_StepRepr_MeasureRepresentationItem ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.RWStepRepr.Handle_StepRepr_MeasureRepresentationItem

        """
        return _RWStepRepr.RWStepRepr_RWMeasureRepresentationItem_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWMeasureRepresentationItem self, Handle_StepRepr_MeasureRepresentationItem ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.RWStepRepr.Handle_StepRepr_MeasureRepresentationItem
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWMeasureRepresentationItem_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWMeasureRepresentationItem
RWStepRepr_RWMeasureRepresentationItem_swigregister = _RWStepRepr.RWStepRepr_RWMeasureRepresentationItem_swigregister
RWStepRepr_RWMeasureRepresentationItem_swigregister(RWStepRepr_RWMeasureRepresentationItem)

class RWStepRepr_RWMappedItem(object):
    """Read & Write Module for MappedItem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWMappedItem self) -> RWStepRepr_RWMappedItem

        Read & Write Module for MappedItem
        """
        this = _RWStepRepr.new_RWStepRepr_RWMappedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWMappedItem self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_MappedItem ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_MappedItem

        """
        return _RWStepRepr.RWStepRepr_RWMappedItem_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWMappedItem self, StepData_StepWriter SW, Handle_StepRepr_MappedItem ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_MappedItem

        """
        return _RWStepRepr.RWStepRepr_RWMappedItem_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWMappedItem self, Handle_StepRepr_MappedItem ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_MappedItem
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWMappedItem_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWMappedItem
RWStepRepr_RWMappedItem_swigregister = _RWStepRepr.RWStepRepr_RWMappedItem_swigregister
RWStepRepr_RWMappedItem_swigregister(RWStepRepr_RWMappedItem)

class RWStepRepr_RWConfigurationEffectivity(object):
    """Read & Write tool for ConfigurationEffectivity"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWConfigurationEffectivity self) -> RWStepRepr_RWConfigurationEffectivity

        Empty constructor


        """
        this = _RWStepRepr.new_RWStepRepr_RWConfigurationEffectivity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWConfigurationEffectivity self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_ConfigurationEffectivity ent)

        Reads ConfigurationEffectivity

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ConfigurationEffectivity

        """
        return _RWStepRepr.RWStepRepr_RWConfigurationEffectivity_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWConfigurationEffectivity self, StepData_StepWriter SW, Handle_StepRepr_ConfigurationEffectivity ent)

        Writes ConfigurationEffectivity

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ConfigurationEffectivity

        """
        return _RWStepRepr.RWStepRepr_RWConfigurationEffectivity_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWConfigurationEffectivity self, Handle_StepRepr_ConfigurationEffectivity ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ConfigurationEffectivity
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWConfigurationEffectivity_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWConfigurationEffectivity
RWStepRepr_RWConfigurationEffectivity_swigregister = _RWStepRepr.RWStepRepr_RWConfigurationEffectivity_swigregister
RWStepRepr_RWConfigurationEffectivity_swigregister(RWStepRepr_RWConfigurationEffectivity)

class RWStepRepr_RWReprItemAndPlaneAngleMeasureWithUnit(object):
    """Read & Write Module for ReprItemAndPlaneAngleMeasureWithUni"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWReprItemAndPlaneAngleMeasureWithUnit self) -> RWStepRepr_RWReprItemAndPlaneAngleMeasureWithUnit

        Read & Write Module for ReprItemAndPlaneAngleMeasureWithUni
        """
        this = _RWStepRepr.new_RWStepRepr_RWReprItemAndPlaneAngleMeasureWithUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWReprItemAndPlaneAngleMeasureWithUnit self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit

        """
        return _RWStepRepr.RWStepRepr_RWReprItemAndPlaneAngleMeasureWithUnit_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWReprItemAndPlaneAngleMeasureWithUnit self, StepData_StepWriter SW, Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit

        """
        return _RWStepRepr.RWStepRepr_RWReprItemAndPlaneAngleMeasureWithUnit_WriteStep(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWReprItemAndPlaneAngleMeasureWithUnit
RWStepRepr_RWReprItemAndPlaneAngleMeasureWithUnit_swigregister = _RWStepRepr.RWStepRepr_RWReprItemAndPlaneAngleMeasureWithUnit_swigregister
RWStepRepr_RWReprItemAndPlaneAngleMeasureWithUnit_swigregister(RWStepRepr_RWReprItemAndPlaneAngleMeasureWithUnit)

class RWStepRepr_RWRepresentationRelationshipWithTransformation(object):
    """Read & Write Module for RepresentationRelationshipWithTransformation"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWRepresentationRelationshipWithTransformation self) -> RWStepRepr_RWRepresentationRelationshipWithTransformation

        Read & Write Module for RepresentationRelationshipWithTransformation
        """
        this = _RWStepRepr.new_RWStepRepr_RWRepresentationRelationshipWithTransformation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWRepresentationRelationshipWithTransformation self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_RepresentationRelationshipWithTransformation ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationRelationshipWithTransformation

        """
        return _RWStepRepr.RWStepRepr_RWRepresentationRelationshipWithTransformation_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWRepresentationRelationshipWithTransformation self, StepData_StepWriter SW, Handle_StepRepr_RepresentationRelationshipWithTransformation ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationRelationshipWithTransformation

        """
        return _RWStepRepr.RWStepRepr_RWRepresentationRelationshipWithTransformation_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWRepresentationRelationshipWithTransformation self, Handle_StepRepr_RepresentationRelationshipWithTransformation ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationRelationshipWithTransformation
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWRepresentationRelationshipWithTransformation_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWRepresentationRelationshipWithTransformation
RWStepRepr_RWRepresentationRelationshipWithTransformation_swigregister = _RWStepRepr.RWStepRepr_RWRepresentationRelationshipWithTransformation_swigregister
RWStepRepr_RWRepresentationRelationshipWithTransformation_swigregister(RWStepRepr_RWRepresentationRelationshipWithTransformation)

class RWStepRepr_RWDefinitionalRepresentation(object):
    """Read & Write Module for DefinitionalRepresentation"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWDefinitionalRepresentation self) -> RWStepRepr_RWDefinitionalRepresentation

        Read & Write Module for DefinitionalRepresentation
        """
        this = _RWStepRepr.new_RWStepRepr_RWDefinitionalRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWDefinitionalRepresentation self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_DefinitionalRepresentation ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.RWStepRepr.Handle_StepRepr_DefinitionalRepresentation

        """
        return _RWStepRepr.RWStepRepr_RWDefinitionalRepresentation_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWDefinitionalRepresentation self, StepData_StepWriter SW, Handle_StepRepr_DefinitionalRepresentation ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.RWStepRepr.Handle_StepRepr_DefinitionalRepresentation

        """
        return _RWStepRepr.RWStepRepr_RWDefinitionalRepresentation_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWDefinitionalRepresentation self, Handle_StepRepr_DefinitionalRepresentation ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.RWStepRepr.Handle_StepRepr_DefinitionalRepresentation
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWDefinitionalRepresentation_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWDefinitionalRepresentation
RWStepRepr_RWDefinitionalRepresentation_swigregister = _RWStepRepr.RWStepRepr_RWDefinitionalRepresentation_swigregister
RWStepRepr_RWDefinitionalRepresentation_swigregister(RWStepRepr_RWDefinitionalRepresentation)

class RWStepRepr_RWShapeAspectTransition(object):
    """Read & Write tool for ShapeAspectTransition"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWShapeAspectTransition self) -> RWStepRepr_RWShapeAspectTransition

        Empty constructor


        """
        this = _RWStepRepr.new_RWStepRepr_RWShapeAspectTransition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWShapeAspectTransition self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_ShapeAspectTransition ent)

        Reads ShapeAspectTransition

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspectTransition

        """
        return _RWStepRepr.RWStepRepr_RWShapeAspectTransition_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWShapeAspectTransition self, StepData_StepWriter SW, Handle_StepRepr_ShapeAspectTransition ent)

        Writes ShapeAspectTransition

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspectTransition

        """
        return _RWStepRepr.RWStepRepr_RWShapeAspectTransition_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWShapeAspectTransition self, Handle_StepRepr_ShapeAspectTransition ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspectTransition
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWShapeAspectTransition_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWShapeAspectTransition
RWStepRepr_RWShapeAspectTransition_swigregister = _RWStepRepr.RWStepRepr_RWShapeAspectTransition_swigregister
RWStepRepr_RWShapeAspectTransition_swigregister(RWStepRepr_RWShapeAspectTransition)

class RWStepRepr_RWRepresentationContext(object):
    """Read & Write Module for RepresentationContext"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWRepresentationContext self) -> RWStepRepr_RWRepresentationContext

        Read & Write Module for RepresentationContext
        """
        this = _RWStepRepr.new_RWStepRepr_RWRepresentationContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWRepresentationContext self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_RepresentationContext ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationContext

        """
        return _RWStepRepr.RWStepRepr_RWRepresentationContext_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWRepresentationContext self, StepData_StepWriter SW, Handle_StepRepr_RepresentationContext ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationContext

        """
        return _RWStepRepr.RWStepRepr_RWRepresentationContext_WriteStep(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWRepresentationContext
RWStepRepr_RWRepresentationContext_swigregister = _RWStepRepr.RWStepRepr_RWRepresentationContext_swigregister
RWStepRepr_RWRepresentationContext_swigregister(RWStepRepr_RWRepresentationContext)

class RWStepRepr_RWTangent(object):
    """Read & Write tool for Tangent"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWTangent self) -> RWStepRepr_RWTangent

        Empty constructor


        """
        this = _RWStepRepr.new_RWStepRepr_RWTangent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWTangent self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_Tangent ent)

        Reads Tangent

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_Tangent

        """
        return _RWStepRepr.RWStepRepr_RWTangent_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWTangent self, StepData_StepWriter SW, Handle_StepRepr_Tangent ent)

        Writes Tangent

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_Tangent

        """
        return _RWStepRepr.RWStepRepr_RWTangent_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWTangent self, Handle_StepRepr_Tangent ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_Tangent
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWTangent_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWTangent
RWStepRepr_RWTangent_swigregister = _RWStepRepr.RWStepRepr_RWTangent_swigregister
RWStepRepr_RWTangent_swigregister(RWStepRepr_RWTangent)

class RWStepRepr_RWContinuosShapeAspect(object):
    """Read & Write tool for ContinuosShapeAspect"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWContinuosShapeAspect self) -> RWStepRepr_RWContinuosShapeAspect

        Empty constructor


        """
        this = _RWStepRepr.new_RWStepRepr_RWContinuosShapeAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWContinuosShapeAspect self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_ContinuosShapeAspect ent)

        Reads ContinuosShapeAspect

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ContinuosShapeAspect

        """
        return _RWStepRepr.RWStepRepr_RWContinuosShapeAspect_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWContinuosShapeAspect self, StepData_StepWriter SW, Handle_StepRepr_ContinuosShapeAspect ent)

        Writes ContinuosShapeAspect

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ContinuosShapeAspect

        """
        return _RWStepRepr.RWStepRepr_RWContinuosShapeAspect_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWContinuosShapeAspect self, Handle_StepRepr_ContinuosShapeAspect ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ContinuosShapeAspect
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWContinuosShapeAspect_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWContinuosShapeAspect
RWStepRepr_RWContinuosShapeAspect_swigregister = _RWStepRepr.RWStepRepr_RWContinuosShapeAspect_swigregister
RWStepRepr_RWContinuosShapeAspect_swigregister(RWStepRepr_RWContinuosShapeAspect)

class RWStepRepr_RWGlobalUnitAssignedContext(object):
    """Read & Write Module for GlobalUnitAssignedContext"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWGlobalUnitAssignedContext self) -> RWStepRepr_RWGlobalUnitAssignedContext

        Read & Write Module for GlobalUnitAssignedContext
        """
        this = _RWStepRepr.new_RWStepRepr_RWGlobalUnitAssignedContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWGlobalUnitAssignedContext self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_GlobalUnitAssignedContext ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.RWStepRepr.Handle_StepRepr_GlobalUnitAssignedContext

        """
        return _RWStepRepr.RWStepRepr_RWGlobalUnitAssignedContext_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWGlobalUnitAssignedContext self, StepData_StepWriter SW, Handle_StepRepr_GlobalUnitAssignedContext ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.RWStepRepr.Handle_StepRepr_GlobalUnitAssignedContext

        """
        return _RWStepRepr.RWStepRepr_RWGlobalUnitAssignedContext_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWGlobalUnitAssignedContext self, Handle_StepRepr_GlobalUnitAssignedContext ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.RWStepRepr.Handle_StepRepr_GlobalUnitAssignedContext
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWGlobalUnitAssignedContext_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWGlobalUnitAssignedContext
RWStepRepr_RWGlobalUnitAssignedContext_swigregister = _RWStepRepr.RWStepRepr_RWGlobalUnitAssignedContext_swigregister
RWStepRepr_RWGlobalUnitAssignedContext_swigregister(RWStepRepr_RWGlobalUnitAssignedContext)

class RWStepRepr_RWGeometricAlignment(object):
    """Read & Write tool for GeometricAlignment"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWGeometricAlignment self) -> RWStepRepr_RWGeometricAlignment

        Empty constructor


        """
        this = _RWStepRepr.new_RWStepRepr_RWGeometricAlignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWGeometricAlignment self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_GeometricAlignment ent)

        Reads GeometricAlignment

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_GeometricAlignment

        """
        return _RWStepRepr.RWStepRepr_RWGeometricAlignment_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWGeometricAlignment self, StepData_StepWriter SW, Handle_StepRepr_GeometricAlignment ent)

        Writes GeometricAlignment

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_GeometricAlignment

        """
        return _RWStepRepr.RWStepRepr_RWGeometricAlignment_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWGeometricAlignment self, Handle_StepRepr_GeometricAlignment ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_GeometricAlignment
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWGeometricAlignment_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWGeometricAlignment
RWStepRepr_RWGeometricAlignment_swigregister = _RWStepRepr.RWStepRepr_RWGeometricAlignment_swigregister
RWStepRepr_RWGeometricAlignment_swigregister(RWStepRepr_RWGeometricAlignment)

class RWStepRepr_RWCompositeGroupShapeAspect(object):
    """Read & Write tool for CompositeGroupShapeAspect"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWCompositeGroupShapeAspect self) -> RWStepRepr_RWCompositeGroupShapeAspect

        Empty constructor


        """
        this = _RWStepRepr.new_RWStepRepr_RWCompositeGroupShapeAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWCompositeGroupShapeAspect self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_CompositeGroupShapeAspect ent)

        Reads CompositeGroupShapeAspect

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_CompositeGroupShapeAspect

        """
        return _RWStepRepr.RWStepRepr_RWCompositeGroupShapeAspect_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWCompositeGroupShapeAspect self, StepData_StepWriter SW, Handle_StepRepr_CompositeGroupShapeAspect ent)

        Writes CompositeGroupShapeAspect

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_CompositeGroupShapeAspect

        """
        return _RWStepRepr.RWStepRepr_RWCompositeGroupShapeAspect_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWCompositeGroupShapeAspect self, Handle_StepRepr_CompositeGroupShapeAspect ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_CompositeGroupShapeAspect
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWCompositeGroupShapeAspect_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWCompositeGroupShapeAspect
RWStepRepr_RWCompositeGroupShapeAspect_swigregister = _RWStepRepr.RWStepRepr_RWCompositeGroupShapeAspect_swigregister
RWStepRepr_RWCompositeGroupShapeAspect_swigregister(RWStepRepr_RWCompositeGroupShapeAspect)

class RWStepRepr_RWRepresentation(object):
    """Read & Write Module for Representation"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWRepresentation self) -> RWStepRepr_RWRepresentation

        Read & Write Module for Representation
        """
        this = _RWStepRepr.new_RWStepRepr_RWRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWRepresentation self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_Representation ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _RWStepRepr.RWStepRepr_RWRepresentation_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWRepresentation self, StepData_StepWriter SW, Handle_StepRepr_Representation ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _RWStepRepr.RWStepRepr_RWRepresentation_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWRepresentation self, Handle_StepRepr_Representation ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_Representation
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWRepresentation_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWRepresentation
RWStepRepr_RWRepresentation_swigregister = _RWStepRepr.RWStepRepr_RWRepresentation_swigregister
RWStepRepr_RWRepresentation_swigregister(RWStepRepr_RWRepresentation)

class RWStepRepr_RWMaterialDesignation(object):
    """Read & Write Module for MaterialDesignation"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWMaterialDesignation self) -> RWStepRepr_RWMaterialDesignation

        Read & Write Module for MaterialDesignation
        """
        this = _RWStepRepr.new_RWStepRepr_RWMaterialDesignation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWMaterialDesignation self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_MaterialDesignation ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_MaterialDesignation

        """
        return _RWStepRepr.RWStepRepr_RWMaterialDesignation_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWMaterialDesignation self, StepData_StepWriter SW, Handle_StepRepr_MaterialDesignation ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_MaterialDesignation

        """
        return _RWStepRepr.RWStepRepr_RWMaterialDesignation_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWMaterialDesignation self, Handle_StepRepr_MaterialDesignation ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_MaterialDesignation
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWMaterialDesignation_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWMaterialDesignation
RWStepRepr_RWMaterialDesignation_swigregister = _RWStepRepr.RWStepRepr_RWMaterialDesignation_swigregister
RWStepRepr_RWMaterialDesignation_swigregister(RWStepRepr_RWMaterialDesignation)

class RWStepRepr_RWParallelOffset(object):
    """Read & Write tool for ParallelOffset"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWParallelOffset self) -> RWStepRepr_RWParallelOffset

        Empty constructor


        """
        this = _RWStepRepr.new_RWStepRepr_RWParallelOffset(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWParallelOffset self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_ParallelOffset ent)

        Reads ParallelOffset

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ParallelOffset

        """
        return _RWStepRepr.RWStepRepr_RWParallelOffset_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWParallelOffset self, StepData_StepWriter SW, Handle_StepRepr_ParallelOffset ent)

        Writes ParallelOffset

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ParallelOffset

        """
        return _RWStepRepr.RWStepRepr_RWParallelOffset_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWParallelOffset self, Handle_StepRepr_ParallelOffset ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ParallelOffset
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWParallelOffset_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWParallelOffset
RWStepRepr_RWParallelOffset_swigregister = _RWStepRepr.RWStepRepr_RWParallelOffset_swigregister
RWStepRepr_RWParallelOffset_swigregister(RWStepRepr_RWParallelOffset)

class RWStepRepr_RWRepresentationMap(object):
    """Read & Write Module for RepresentationMap"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWRepresentationMap self) -> RWStepRepr_RWRepresentationMap

        Read & Write Module for RepresentationMap
        """
        this = _RWStepRepr.new_RWStepRepr_RWRepresentationMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWRepresentationMap self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_RepresentationMap ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationMap

        """
        return _RWStepRepr.RWStepRepr_RWRepresentationMap_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWRepresentationMap self, StepData_StepWriter SW, Handle_StepRepr_RepresentationMap ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationMap

        """
        return _RWStepRepr.RWStepRepr_RWRepresentationMap_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWRepresentationMap self, Handle_StepRepr_RepresentationMap ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationMap
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWRepresentationMap_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWRepresentationMap
RWStepRepr_RWRepresentationMap_swigregister = _RWStepRepr.RWStepRepr_RWRepresentationMap_swigregister
RWStepRepr_RWRepresentationMap_swigregister(RWStepRepr_RWRepresentationMap)

class RWStepRepr_RWDataEnvironment(object):
    """Read & Write tool for DataEnvironment"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWDataEnvironment self) -> RWStepRepr_RWDataEnvironment

        Empty constructor


        """
        this = _RWStepRepr.new_RWStepRepr_RWDataEnvironment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWDataEnvironment self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_DataEnvironment ent)

        Reads DataEnvironment

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_DataEnvironment

        """
        return _RWStepRepr.RWStepRepr_RWDataEnvironment_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWDataEnvironment self, StepData_StepWriter SW, Handle_StepRepr_DataEnvironment ent)

        Writes DataEnvironment

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_DataEnvironment

        """
        return _RWStepRepr.RWStepRepr_RWDataEnvironment_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWDataEnvironment self, Handle_StepRepr_DataEnvironment ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_DataEnvironment
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWDataEnvironment_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWDataEnvironment
RWStepRepr_RWDataEnvironment_swigregister = _RWStepRepr.RWStepRepr_RWDataEnvironment_swigregister
RWStepRepr_RWDataEnvironment_swigregister(RWStepRepr_RWDataEnvironment)

class RWStepRepr_RWApex(object):
    """Read & Write tool for Apex"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWApex self) -> RWStepRepr_RWApex

        Empty constructor


        """
        this = _RWStepRepr.new_RWStepRepr_RWApex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWApex self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_Apex ent)

        Reads Apex

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_Apex

        """
        return _RWStepRepr.RWStepRepr_RWApex_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWApex self, StepData_StepWriter SW, Handle_StepRepr_Apex ent)

        Writes Apex

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_Apex

        """
        return _RWStepRepr.RWStepRepr_RWApex_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWApex self, Handle_StepRepr_Apex ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_Apex
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWApex_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWApex
RWStepRepr_RWApex_swigregister = _RWStepRepr.RWStepRepr_RWApex_swigregister
RWStepRepr_RWApex_swigregister(RWStepRepr_RWApex)

class RWStepRepr_RWConfigurationItem(object):
    """Read & Write tool for ConfigurationItem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWConfigurationItem self) -> RWStepRepr_RWConfigurationItem

        Empty constructor


        """
        this = _RWStepRepr.new_RWStepRepr_RWConfigurationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWConfigurationItem self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_ConfigurationItem ent)

        Reads ConfigurationItem

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ConfigurationItem

        """
        return _RWStepRepr.RWStepRepr_RWConfigurationItem_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWConfigurationItem self, StepData_StepWriter SW, Handle_StepRepr_ConfigurationItem ent)

        Writes ConfigurationItem

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ConfigurationItem

        """
        return _RWStepRepr.RWStepRepr_RWConfigurationItem_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWConfigurationItem self, Handle_StepRepr_ConfigurationItem ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ConfigurationItem
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWConfigurationItem_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWConfigurationItem
RWStepRepr_RWConfigurationItem_swigregister = _RWStepRepr.RWStepRepr_RWConfigurationItem_swigregister
RWStepRepr_RWConfigurationItem_swigregister(RWStepRepr_RWConfigurationItem)

class RWStepRepr_RWPropertyDefinitionRelationship(object):
    """Read & Write tool for PropertyDefinitionRelationship"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWPropertyDefinitionRelationship self) -> RWStepRepr_RWPropertyDefinitionRelationship

        Empty constructor


        """
        this = _RWStepRepr.new_RWStepRepr_RWPropertyDefinitionRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWPropertyDefinitionRelationship self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_PropertyDefinitionRelationship ent)

        Reads PropertyDefinitionRelationship

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_PropertyDefinitionRelationship

        """
        return _RWStepRepr.RWStepRepr_RWPropertyDefinitionRelationship_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWPropertyDefinitionRelationship self, StepData_StepWriter SW, Handle_StepRepr_PropertyDefinitionRelationship ent)

        Writes PropertyDefinitionRelationship

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_PropertyDefinitionRelationship

        """
        return _RWStepRepr.RWStepRepr_RWPropertyDefinitionRelationship_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWPropertyDefinitionRelationship self, Handle_StepRepr_PropertyDefinitionRelationship ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_PropertyDefinitionRelationship
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWPropertyDefinitionRelationship_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWPropertyDefinitionRelationship
RWStepRepr_RWPropertyDefinitionRelationship_swigregister = _RWStepRepr.RWStepRepr_RWPropertyDefinitionRelationship_swigregister
RWStepRepr_RWPropertyDefinitionRelationship_swigregister(RWStepRepr_RWPropertyDefinitionRelationship)

class RWStepRepr_RWExtension(object):
    """Read & Write tool for Extension"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWExtension self) -> RWStepRepr_RWExtension

        Empty constructor


        """
        this = _RWStepRepr.new_RWStepRepr_RWExtension(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWExtension self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_Extension ent)

        Reads Extension

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_Extension

        """
        return _RWStepRepr.RWStepRepr_RWExtension_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWExtension self, StepData_StepWriter SW, Handle_StepRepr_Extension ent)

        Writes Extension

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_Extension

        """
        return _RWStepRepr.RWStepRepr_RWExtension_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWExtension self, Handle_StepRepr_Extension ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_Extension
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWExtension_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWExtension
RWStepRepr_RWExtension_swigregister = _RWStepRepr.RWStepRepr_RWExtension_swigregister
RWStepRepr_RWExtension_swigregister(RWStepRepr_RWExtension)

class RWStepRepr_RWBetweenShapeAspect(object):
    """Read & Write tool for BetweenShapeAspect"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWBetweenShapeAspect self) -> RWStepRepr_RWBetweenShapeAspect

        Empty constructor


        """
        this = _RWStepRepr.new_RWStepRepr_RWBetweenShapeAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWBetweenShapeAspect self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_BetweenShapeAspect ent)

        Reads BetweenShapeAspect

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_BetweenShapeAspect

        """
        return _RWStepRepr.RWStepRepr_RWBetweenShapeAspect_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWBetweenShapeAspect self, StepData_StepWriter SW, Handle_StepRepr_BetweenShapeAspect ent)

        Writes BetweenShapeAspect

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_BetweenShapeAspect

        """
        return _RWStepRepr.RWStepRepr_RWBetweenShapeAspect_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWBetweenShapeAspect self, Handle_StepRepr_BetweenShapeAspect ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_BetweenShapeAspect
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWBetweenShapeAspect_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWBetweenShapeAspect
RWStepRepr_RWBetweenShapeAspect_swigregister = _RWStepRepr.RWStepRepr_RWBetweenShapeAspect_swigregister
RWStepRepr_RWBetweenShapeAspect_swigregister(RWStepRepr_RWBetweenShapeAspect)

class RWStepRepr_RWSpecifiedHigherUsageOccurrence(object):
    """Read & Write tool for SpecifiedHigherUsageOccurrence"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWSpecifiedHigherUsageOccurrence self) -> RWStepRepr_RWSpecifiedHigherUsageOccurrence

        Empty constructor


        """
        this = _RWStepRepr.new_RWStepRepr_RWSpecifiedHigherUsageOccurrence(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWSpecifiedHigherUsageOccurrence self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_SpecifiedHigherUsageOccurrence ent)

        Reads SpecifiedHigherUsageOccurrence

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence

        """
        return _RWStepRepr.RWStepRepr_RWSpecifiedHigherUsageOccurrence_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWSpecifiedHigherUsageOccurrence self, StepData_StepWriter SW, Handle_StepRepr_SpecifiedHigherUsageOccurrence ent)

        Writes SpecifiedHigherUsageOccurrence

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence

        """
        return _RWStepRepr.RWStepRepr_RWSpecifiedHigherUsageOccurrence_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWSpecifiedHigherUsageOccurrence self, Handle_StepRepr_SpecifiedHigherUsageOccurrence ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWSpecifiedHigherUsageOccurrence_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWSpecifiedHigherUsageOccurrence
RWStepRepr_RWSpecifiedHigherUsageOccurrence_swigregister = _RWStepRepr.RWStepRepr_RWSpecifiedHigherUsageOccurrence_swigregister
RWStepRepr_RWSpecifiedHigherUsageOccurrence_swigregister(RWStepRepr_RWSpecifiedHigherUsageOccurrence)

class RWStepRepr_RWStructuralResponseProperty(object):
    """Read & Write tool for StructuralResponseProperty"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWStructuralResponseProperty self) -> RWStepRepr_RWStructuralResponseProperty

        Empty constructor


        """
        this = _RWStepRepr.new_RWStepRepr_RWStructuralResponseProperty(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWStructuralResponseProperty self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_StructuralResponseProperty ent)

        Reads StructuralResponseProperty

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_StructuralResponseProperty

        """
        return _RWStepRepr.RWStepRepr_RWStructuralResponseProperty_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWStructuralResponseProperty self, StepData_StepWriter SW, Handle_StepRepr_StructuralResponseProperty ent)

        Writes StructuralResponseProperty

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_StructuralResponseProperty

        """
        return _RWStepRepr.RWStepRepr_RWStructuralResponseProperty_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWStructuralResponseProperty self, Handle_StepRepr_StructuralResponseProperty ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_StructuralResponseProperty
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWStructuralResponseProperty_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWStructuralResponseProperty
RWStepRepr_RWStructuralResponseProperty_swigregister = _RWStepRepr.RWStepRepr_RWStructuralResponseProperty_swigregister
RWStepRepr_RWStructuralResponseProperty_swigregister(RWStepRepr_RWStructuralResponseProperty)

class RWStepRepr_RWCharacterizedRepresentation(object):
    """Read & Write Module for CharacterizedRepresentation"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWCharacterizedRepresentation self) -> RWStepRepr_RWCharacterizedRepresentation

        Read & Write Module for CharacterizedRepresentation
        """
        this = _RWStepRepr.new_RWStepRepr_RWCharacterizedRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWCharacterizedRepresentation self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_CharacterizedRepresentation ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_CharacterizedRepresentation

        """
        return _RWStepRepr.RWStepRepr_RWCharacterizedRepresentation_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWCharacterizedRepresentation self, StepData_StepWriter SW, Handle_StepRepr_CharacterizedRepresentation ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_CharacterizedRepresentation

        """
        return _RWStepRepr.RWStepRepr_RWCharacterizedRepresentation_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWCharacterizedRepresentation self, Handle_StepRepr_CharacterizedRepresentation ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_CharacterizedRepresentation
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWCharacterizedRepresentation_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWCharacterizedRepresentation
RWStepRepr_RWCharacterizedRepresentation_swigregister = _RWStepRepr.RWStepRepr_RWCharacterizedRepresentation_swigregister
RWStepRepr_RWCharacterizedRepresentation_swigregister(RWStepRepr_RWCharacterizedRepresentation)

class RWStepRepr_RWAssemblyComponentUsage(object):
    """Read & Write tool for AssemblyComponentUsage"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWAssemblyComponentUsage self) -> RWStepRepr_RWAssemblyComponentUsage

        Empty constructor


        """
        this = _RWStepRepr.new_RWStepRepr_RWAssemblyComponentUsage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWAssemblyComponentUsage self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_AssemblyComponentUsage ent)

        Reads AssemblyComponentUsage

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_AssemblyComponentUsage

        """
        return _RWStepRepr.RWStepRepr_RWAssemblyComponentUsage_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWAssemblyComponentUsage self, StepData_StepWriter SW, Handle_StepRepr_AssemblyComponentUsage ent)

        Writes AssemblyComponentUsage

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_AssemblyComponentUsage

        """
        return _RWStepRepr.RWStepRepr_RWAssemblyComponentUsage_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWAssemblyComponentUsage self, Handle_StepRepr_AssemblyComponentUsage ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_AssemblyComponentUsage
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWAssemblyComponentUsage_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWAssemblyComponentUsage
RWStepRepr_RWAssemblyComponentUsage_swigregister = _RWStepRepr.RWStepRepr_RWAssemblyComponentUsage_swigregister
RWStepRepr_RWAssemblyComponentUsage_swigregister(RWStepRepr_RWAssemblyComponentUsage)

class RWStepRepr_RWValueRepresentationItem(object):
    """Read & Write Module for ValueRepresentationItem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWValueRepresentationItem self) -> RWStepRepr_RWValueRepresentationItem

        Read & Write Module for ValueRepresentationItem
        """
        this = _RWStepRepr.new_RWStepRepr_RWValueRepresentationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWValueRepresentationItem self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_ValueRepresentationItem ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ValueRepresentationItem

        """
        return _RWStepRepr.RWStepRepr_RWValueRepresentationItem_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWValueRepresentationItem self, StepData_StepWriter SW, Handle_StepRepr_ValueRepresentationItem ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ValueRepresentationItem

        """
        return _RWStepRepr.RWStepRepr_RWValueRepresentationItem_WriteStep(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWValueRepresentationItem
RWStepRepr_RWValueRepresentationItem_swigregister = _RWStepRepr.RWStepRepr_RWValueRepresentationItem_swigregister
RWStepRepr_RWValueRepresentationItem_swigregister(RWStepRepr_RWValueRepresentationItem)

class RWStepRepr_RWShapeAspect(object):
    """Read & Write Module for ShapeAspect"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWShapeAspect self) -> RWStepRepr_RWShapeAspect

        Read & Write Module for ShapeAspect
        """
        this = _RWStepRepr.new_RWStepRepr_RWShapeAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWShapeAspect self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_ShapeAspect ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.RWStepRepr.Handle_StepRepr_ShapeAspect

        """
        return _RWStepRepr.RWStepRepr_RWShapeAspect_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWShapeAspect self, StepData_StepWriter SW, Handle_StepRepr_ShapeAspect ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.RWStepRepr.Handle_StepRepr_ShapeAspect

        """
        return _RWStepRepr.RWStepRepr_RWShapeAspect_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWShapeAspect self, Handle_StepRepr_ShapeAspect ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.RWStepRepr.Handle_StepRepr_ShapeAspect
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWShapeAspect_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWShapeAspect
RWStepRepr_RWShapeAspect_swigregister = _RWStepRepr.RWStepRepr_RWShapeAspect_swigregister
RWStepRepr_RWShapeAspect_swigregister(RWStepRepr_RWShapeAspect)

class RWStepRepr_RWMaterialProperty(object):
    """Read & Write tool for MaterialProperty"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWMaterialProperty self) -> RWStepRepr_RWMaterialProperty

        Empty constructor


        """
        this = _RWStepRepr.new_RWStepRepr_RWMaterialProperty(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWMaterialProperty self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_MaterialProperty ent)

        Reads MaterialProperty

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_MaterialProperty

        """
        return _RWStepRepr.RWStepRepr_RWMaterialProperty_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWMaterialProperty self, StepData_StepWriter SW, Handle_StepRepr_MaterialProperty ent)

        Writes MaterialProperty

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_MaterialProperty

        """
        return _RWStepRepr.RWStepRepr_RWMaterialProperty_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWMaterialProperty self, Handle_StepRepr_MaterialProperty ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_MaterialProperty
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWMaterialProperty_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWMaterialProperty
RWStepRepr_RWMaterialProperty_swigregister = _RWStepRepr.RWStepRepr_RWMaterialProperty_swigregister
RWStepRepr_RWMaterialProperty_swigregister(RWStepRepr_RWMaterialProperty)

class RWStepRepr_RWAllAroundShapeAspect(object):
    """Read & Write tool for AllAroundShapeAspect"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWAllAroundShapeAspect self) -> RWStepRepr_RWAllAroundShapeAspect

        Empty constructor


        """
        this = _RWStepRepr.new_RWStepRepr_RWAllAroundShapeAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWAllAroundShapeAspect self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_AllAroundShapeAspect ent)

        Reads AllAroundShapeAspect

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_AllAroundShapeAspect

        """
        return _RWStepRepr.RWStepRepr_RWAllAroundShapeAspect_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWAllAroundShapeAspect self, StepData_StepWriter SW, Handle_StepRepr_AllAroundShapeAspect ent)

        Writes AllAroundShapeAspect

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_AllAroundShapeAspect

        """
        return _RWStepRepr.RWStepRepr_RWAllAroundShapeAspect_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWAllAroundShapeAspect self, Handle_StepRepr_AllAroundShapeAspect ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_AllAroundShapeAspect
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWAllAroundShapeAspect_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWAllAroundShapeAspect
RWStepRepr_RWAllAroundShapeAspect_swigregister = _RWStepRepr.RWStepRepr_RWAllAroundShapeAspect_swigregister
RWStepRepr_RWAllAroundShapeAspect_swigregister(RWStepRepr_RWAllAroundShapeAspect)

class RWStepRepr_RWPropertyDefinition(object):
    """Read & Write tool for PropertyDefinition"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWPropertyDefinition self) -> RWStepRepr_RWPropertyDefinition

        Empty constructor


        """
        this = _RWStepRepr.new_RWStepRepr_RWPropertyDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWPropertyDefinition self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_PropertyDefinition ent)

        Reads PropertyDefinition

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_PropertyDefinition

        """
        return _RWStepRepr.RWStepRepr_RWPropertyDefinition_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWPropertyDefinition self, StepData_StepWriter SW, Handle_StepRepr_PropertyDefinition ent)

        Writes PropertyDefinition

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_PropertyDefinition

        """
        return _RWStepRepr.RWStepRepr_RWPropertyDefinition_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWPropertyDefinition self, Handle_StepRepr_PropertyDefinition ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_PropertyDefinition
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWPropertyDefinition_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWPropertyDefinition
RWStepRepr_RWPropertyDefinition_swigregister = _RWStepRepr.RWStepRepr_RWPropertyDefinition_swigregister
RWStepRepr_RWPropertyDefinition_swigregister(RWStepRepr_RWPropertyDefinition)

class RWStepRepr_RWStructuralResponsePropertyDefinitionRepresentation(object):
    """Read & Write tool for StructuralResponsePropertyDefinitionRepresentation"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWStructuralResponsePropertyDefinitionRepresentation self) -> RWStepRepr_RWStructuralResponsePropertyDefinitionRepresentation

        Empty constructor


        """
        this = _RWStepRepr.new_RWStepRepr_RWStructuralResponsePropertyDefinitionRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWStructuralResponsePropertyDefinitionRepresentation self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation ent)

        Reads StructuralResponsePropertyDefinitionRepresentation

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation

        """
        return _RWStepRepr.RWStepRepr_RWStructuralResponsePropertyDefinitionRepresentation_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWStructuralResponsePropertyDefinitionRepresentation self, StepData_StepWriter SW, Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation ent)

        Writes StructuralResponsePropertyDefinitionRepresentation

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation

        """
        return _RWStepRepr.RWStepRepr_RWStructuralResponsePropertyDefinitionRepresentation_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWStructuralResponsePropertyDefinitionRepresentation self, Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWStructuralResponsePropertyDefinitionRepresentation_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWStructuralResponsePropertyDefinitionRepresentation
RWStepRepr_RWStructuralResponsePropertyDefinitionRepresentation_swigregister = _RWStepRepr.RWStepRepr_RWStructuralResponsePropertyDefinitionRepresentation_swigregister
RWStepRepr_RWStructuralResponsePropertyDefinitionRepresentation_swigregister(RWStepRepr_RWStructuralResponsePropertyDefinitionRepresentation)

class RWStepRepr_RWMaterialPropertyRepresentation(object):
    """Read & Write tool for MaterialPropertyRepresentation"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWMaterialPropertyRepresentation self) -> RWStepRepr_RWMaterialPropertyRepresentation

        Empty constructor


        """
        this = _RWStepRepr.new_RWStepRepr_RWMaterialPropertyRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWMaterialPropertyRepresentation self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_MaterialPropertyRepresentation ent)

        Reads MaterialPropertyRepresentation

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_MaterialPropertyRepresentation

        """
        return _RWStepRepr.RWStepRepr_RWMaterialPropertyRepresentation_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWMaterialPropertyRepresentation self, StepData_StepWriter SW, Handle_StepRepr_MaterialPropertyRepresentation ent)

        Writes MaterialPropertyRepresentation

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_MaterialPropertyRepresentation

        """
        return _RWStepRepr.RWStepRepr_RWMaterialPropertyRepresentation_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWMaterialPropertyRepresentation self, Handle_StepRepr_MaterialPropertyRepresentation ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_MaterialPropertyRepresentation
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWMaterialPropertyRepresentation_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWMaterialPropertyRepresentation
RWStepRepr_RWMaterialPropertyRepresentation_swigregister = _RWStepRepr.RWStepRepr_RWMaterialPropertyRepresentation_swigregister
RWStepRepr_RWMaterialPropertyRepresentation_swigregister(RWStepRepr_RWMaterialPropertyRepresentation)

class RWStepRepr_RWRepresentationRelationship(object):
    """Read & Write Module for RepresentationRelationship"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWRepresentationRelationship self) -> RWStepRepr_RWRepresentationRelationship

        Read & Write Module for RepresentationRelationship
        """
        this = _RWStepRepr.new_RWStepRepr_RWRepresentationRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWRepresentationRelationship self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_RepresentationRelationship ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationRelationship

        """
        return _RWStepRepr.RWStepRepr_RWRepresentationRelationship_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWRepresentationRelationship self, StepData_StepWriter SW, Handle_StepRepr_RepresentationRelationship ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationRelationship

        """
        return _RWStepRepr.RWStepRepr_RWRepresentationRelationship_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWRepresentationRelationship self, Handle_StepRepr_RepresentationRelationship ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationRelationship
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWRepresentationRelationship_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWRepresentationRelationship
RWStepRepr_RWRepresentationRelationship_swigregister = _RWStepRepr.RWStepRepr_RWRepresentationRelationship_swigregister
RWStepRepr_RWRepresentationRelationship_swigregister(RWStepRepr_RWRepresentationRelationship)

class RWStepRepr_RWConstructiveGeometryRepresentation(object):
    """Read & Write Module for ConstructiveGeometryRepresentation"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWConstructiveGeometryRepresentation self) -> RWStepRepr_RWConstructiveGeometryRepresentation

        Read & Write Module for ConstructiveGeometryRepresentation
        """
        this = _RWStepRepr.new_RWStepRepr_RWConstructiveGeometryRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWConstructiveGeometryRepresentation self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_ConstructiveGeometryRepresentation ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentation

        """
        return _RWStepRepr.RWStepRepr_RWConstructiveGeometryRepresentation_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWConstructiveGeometryRepresentation self, StepData_StepWriter SW, Handle_StepRepr_ConstructiveGeometryRepresentation ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentation

        """
        return _RWStepRepr.RWStepRepr_RWConstructiveGeometryRepresentation_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWConstructiveGeometryRepresentation self, Handle_StepRepr_ConstructiveGeometryRepresentation ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentation
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWConstructiveGeometryRepresentation_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWConstructiveGeometryRepresentation
RWStepRepr_RWConstructiveGeometryRepresentation_swigregister = _RWStepRepr.RWStepRepr_RWConstructiveGeometryRepresentation_swigregister
RWStepRepr_RWConstructiveGeometryRepresentation_swigregister(RWStepRepr_RWConstructiveGeometryRepresentation)

class RWStepRepr_RWItemDefinedTransformation(object):
    """Read & Write Module for ItemDefinedTransformation"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWItemDefinedTransformation self) -> RWStepRepr_RWItemDefinedTransformation

        Read & Write Module for ItemDefinedTransformation
        """
        this = _RWStepRepr.new_RWStepRepr_RWItemDefinedTransformation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWItemDefinedTransformation self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_ItemDefinedTransformation ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ItemDefinedTransformation

        """
        return _RWStepRepr.RWStepRepr_RWItemDefinedTransformation_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWItemDefinedTransformation self, StepData_StepWriter SW, Handle_StepRepr_ItemDefinedTransformation ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ItemDefinedTransformation

        """
        return _RWStepRepr.RWStepRepr_RWItemDefinedTransformation_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWItemDefinedTransformation self, Handle_StepRepr_ItemDefinedTransformation ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ItemDefinedTransformation
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWItemDefinedTransformation_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWItemDefinedTransformation
RWStepRepr_RWItemDefinedTransformation_swigregister = _RWStepRepr.RWStepRepr_RWItemDefinedTransformation_swigregister
RWStepRepr_RWItemDefinedTransformation_swigregister(RWStepRepr_RWItemDefinedTransformation)

class RWStepRepr_RWCompositeShapeAspect(object):
    """Read & Write tool for CompositeShapeAspect"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWCompositeShapeAspect self) -> RWStepRepr_RWCompositeShapeAspect

        Empty constructor


        """
        this = _RWStepRepr.new_RWStepRepr_RWCompositeShapeAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWCompositeShapeAspect self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_CompositeShapeAspect ent)

        Reads CompositeShapeAspect

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_CompositeShapeAspect

        """
        return _RWStepRepr.RWStepRepr_RWCompositeShapeAspect_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWCompositeShapeAspect self, StepData_StepWriter SW, Handle_StepRepr_CompositeShapeAspect ent)

        Writes CompositeShapeAspect

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_CompositeShapeAspect

        """
        return _RWStepRepr.RWStepRepr_RWCompositeShapeAspect_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWCompositeShapeAspect self, Handle_StepRepr_CompositeShapeAspect ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_CompositeShapeAspect
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWCompositeShapeAspect_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWCompositeShapeAspect
RWStepRepr_RWCompositeShapeAspect_swigregister = _RWStepRepr.RWStepRepr_RWCompositeShapeAspect_swigregister
RWStepRepr_RWCompositeShapeAspect_swigregister(RWStepRepr_RWCompositeShapeAspect)

class RWStepRepr_RWReprItemAndLengthMeasureWithUnitAndQRI(object):
    """Read & Write Module for ReprItemAndLengthMeasureWithUnitAndQRI"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWReprItemAndLengthMeasureWithUnitAndQRI self) -> RWStepRepr_RWReprItemAndLengthMeasureWithUnitAndQRI

        Read & Write Module for ReprItemAndLengthMeasureWithUnitAndQRI
        """
        this = _RWStepRepr.new_RWStepRepr_RWReprItemAndLengthMeasureWithUnitAndQRI(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWReprItemAndLengthMeasureWithUnitAndQRI self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI

        """
        return _RWStepRepr.RWStepRepr_RWReprItemAndLengthMeasureWithUnitAndQRI_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWReprItemAndLengthMeasureWithUnitAndQRI self, StepData_StepWriter SW, Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI

        """
        return _RWStepRepr.RWStepRepr_RWReprItemAndLengthMeasureWithUnitAndQRI_WriteStep(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWReprItemAndLengthMeasureWithUnitAndQRI
RWStepRepr_RWReprItemAndLengthMeasureWithUnitAndQRI_swigregister = _RWStepRepr.RWStepRepr_RWReprItemAndLengthMeasureWithUnitAndQRI_swigregister
RWStepRepr_RWReprItemAndLengthMeasureWithUnitAndQRI_swigregister(RWStepRepr_RWReprItemAndLengthMeasureWithUnitAndQRI)

class RWStepRepr_RWRepresentationItem(object):
    """Read & Write Module for RepresentationItem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWRepresentationItem self) -> RWStepRepr_RWRepresentationItem

        Read & Write Module for RepresentationItem
        """
        this = _RWStepRepr.new_RWStepRepr_RWRepresentationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWRepresentationItem self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_RepresentationItem ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _RWStepRepr.RWStepRepr_RWRepresentationItem_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWRepresentationItem self, StepData_StepWriter SW, Handle_StepRepr_RepresentationItem ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _RWStepRepr.RWStepRepr_RWRepresentationItem_WriteStep(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWRepresentationItem
RWStepRepr_RWRepresentationItem_swigregister = _RWStepRepr.RWStepRepr_RWRepresentationItem_swigregister
RWStepRepr_RWRepresentationItem_swigregister(RWStepRepr_RWRepresentationItem)

class RWStepRepr_RWCompoundRepresentationItem(object):
    """Read & Write Module for CompoundRepresentationItem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWCompoundRepresentationItem self) -> RWStepRepr_RWCompoundRepresentationItem

        Read & Write Module for CompoundRepresentationItem
        """
        this = _RWStepRepr.new_RWStepRepr_RWCompoundRepresentationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWCompoundRepresentationItem self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_CompoundRepresentationItem ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.RWStepRepr.Handle_StepRepr_CompoundRepresentationItem

        """
        return _RWStepRepr.RWStepRepr_RWCompoundRepresentationItem_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWCompoundRepresentationItem self, StepData_StepWriter SW, Handle_StepRepr_CompoundRepresentationItem ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.RWStepRepr.Handle_StepRepr_CompoundRepresentationItem

        """
        return _RWStepRepr.RWStepRepr_RWCompoundRepresentationItem_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWCompoundRepresentationItem self, Handle_StepRepr_CompoundRepresentationItem ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.RWStepRepr.Handle_StepRepr_CompoundRepresentationItem
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWCompoundRepresentationItem_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWCompoundRepresentationItem
RWStepRepr_RWCompoundRepresentationItem_swigregister = _RWStepRepr.RWStepRepr_RWCompoundRepresentationItem_swigregister
RWStepRepr_RWCompoundRepresentationItem_swigregister(RWStepRepr_RWCompoundRepresentationItem)

class RWStepRepr_RWDescriptiveRepresentationItem(object):
    """Read & Write Module for DescriptiveRepresentationItem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWDescriptiveRepresentationItem self) -> RWStepRepr_RWDescriptiveRepresentationItem

        Read & Write Module for DescriptiveRepresentationItem
        """
        this = _RWStepRepr.new_RWStepRepr_RWDescriptiveRepresentationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWDescriptiveRepresentationItem self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_DescriptiveRepresentationItem ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.RWStepRepr.Handle_StepRepr_DescriptiveRepresentationItem

        """
        return _RWStepRepr.RWStepRepr_RWDescriptiveRepresentationItem_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWDescriptiveRepresentationItem self, StepData_StepWriter SW, Handle_StepRepr_DescriptiveRepresentationItem ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.RWStepRepr.Handle_StepRepr_DescriptiveRepresentationItem

        """
        return _RWStepRepr.RWStepRepr_RWDescriptiveRepresentationItem_WriteStep(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWDescriptiveRepresentationItem
RWStepRepr_RWDescriptiveRepresentationItem_swigregister = _RWStepRepr.RWStepRepr_RWDescriptiveRepresentationItem_swigregister
RWStepRepr_RWDescriptiveRepresentationItem_swigregister(RWStepRepr_RWDescriptiveRepresentationItem)

class RWStepRepr_RWDerivedShapeAspect(object):
    """Read & Write tool for DerivedShapeAspect"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWDerivedShapeAspect self) -> RWStepRepr_RWDerivedShapeAspect

        Empty constructor


        """
        this = _RWStepRepr.new_RWStepRepr_RWDerivedShapeAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWDerivedShapeAspect self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_DerivedShapeAspect ent)

        Reads DerivedShapeAspect

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_DerivedShapeAspect

        """
        return _RWStepRepr.RWStepRepr_RWDerivedShapeAspect_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWDerivedShapeAspect self, StepData_StepWriter SW, Handle_StepRepr_DerivedShapeAspect ent)

        Writes DerivedShapeAspect

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_DerivedShapeAspect

        """
        return _RWStepRepr.RWStepRepr_RWDerivedShapeAspect_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWDerivedShapeAspect self, Handle_StepRepr_DerivedShapeAspect ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_DerivedShapeAspect
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWDerivedShapeAspect_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWDerivedShapeAspect
RWStepRepr_RWDerivedShapeAspect_swigregister = _RWStepRepr.RWStepRepr_RWDerivedShapeAspect_swigregister
RWStepRepr_RWDerivedShapeAspect_swigregister(RWStepRepr_RWDerivedShapeAspect)

class RWStepRepr_RWParametricRepresentationContext(object):
    """Read & Write Module for ParametricRepresentationContext"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWParametricRepresentationContext self) -> RWStepRepr_RWParametricRepresentationContext

        Read & Write Module for ParametricRepresentationContext
        """
        this = _RWStepRepr.new_RWStepRepr_RWParametricRepresentationContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWParametricRepresentationContext self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_ParametricRepresentationContext ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.RWStepRepr.Handle_StepRepr_ParametricRepresentationContext

        """
        return _RWStepRepr.RWStepRepr_RWParametricRepresentationContext_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWParametricRepresentationContext self, StepData_StepWriter SW, Handle_StepRepr_ParametricRepresentationContext ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.RWStepRepr.Handle_StepRepr_ParametricRepresentationContext

        """
        return _RWStepRepr.RWStepRepr_RWParametricRepresentationContext_WriteStep(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWParametricRepresentationContext
RWStepRepr_RWParametricRepresentationContext_swigregister = _RWStepRepr.RWStepRepr_RWParametricRepresentationContext_swigregister
RWStepRepr_RWParametricRepresentationContext_swigregister(RWStepRepr_RWParametricRepresentationContext)

class RWStepRepr_RWCompShAspAndDatumFeatAndShAsp(object):
    """Read & Write Module for CompShAspAndDatumFeatAndShAsp"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWCompShAspAndDatumFeatAndShAsp self) -> RWStepRepr_RWCompShAspAndDatumFeatAndShAsp

        Read & Write Module for CompShAspAndDatumFeatAndShAsp
        """
        this = _RWStepRepr.new_RWStepRepr_RWCompShAspAndDatumFeatAndShAsp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWCompShAspAndDatumFeatAndShAsp self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_CompShAspAndDatumFeatAndShAsp ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_CompShAspAndDatumFeatAndShAsp

        """
        return _RWStepRepr.RWStepRepr_RWCompShAspAndDatumFeatAndShAsp_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWCompShAspAndDatumFeatAndShAsp self, StepData_StepWriter SW, Handle_StepRepr_CompShAspAndDatumFeatAndShAsp ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_CompShAspAndDatumFeatAndShAsp

        """
        return _RWStepRepr.RWStepRepr_RWCompShAspAndDatumFeatAndShAsp_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWCompShAspAndDatumFeatAndShAsp self, Handle_StepRepr_CompShAspAndDatumFeatAndShAsp ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_CompShAspAndDatumFeatAndShAsp
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWCompShAspAndDatumFeatAndShAsp_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWCompShAspAndDatumFeatAndShAsp
RWStepRepr_RWCompShAspAndDatumFeatAndShAsp_swigregister = _RWStepRepr.RWStepRepr_RWCompShAspAndDatumFeatAndShAsp_swigregister
RWStepRepr_RWCompShAspAndDatumFeatAndShAsp_swigregister(RWStepRepr_RWCompShAspAndDatumFeatAndShAsp)

class RWStepRepr_RWMakeFromUsageOption(object):
    """Read & Write tool for MakeFromUsageOption"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWMakeFromUsageOption self) -> RWStepRepr_RWMakeFromUsageOption

        Empty constructor


        """
        this = _RWStepRepr.new_RWStepRepr_RWMakeFromUsageOption(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWMakeFromUsageOption self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_MakeFromUsageOption ent)

        Reads MakeFromUsageOption

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_MakeFromUsageOption

        """
        return _RWStepRepr.RWStepRepr_RWMakeFromUsageOption_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWMakeFromUsageOption self, StepData_StepWriter SW, Handle_StepRepr_MakeFromUsageOption ent)

        Writes MakeFromUsageOption

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_MakeFromUsageOption

        """
        return _RWStepRepr.RWStepRepr_RWMakeFromUsageOption_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWMakeFromUsageOption self, Handle_StepRepr_MakeFromUsageOption ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_MakeFromUsageOption
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWMakeFromUsageOption_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWMakeFromUsageOption
RWStepRepr_RWMakeFromUsageOption_swigregister = _RWStepRepr.RWStepRepr_RWMakeFromUsageOption_swigregister
RWStepRepr_RWMakeFromUsageOption_swigregister(RWStepRepr_RWMakeFromUsageOption)

class RWStepRepr_RWCentreOfSymmetry(object):
    """Read & Write tool for CentreOfSymmetry"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepRepr_RWCentreOfSymmetry self) -> RWStepRepr_RWCentreOfSymmetry

        Empty constructor


        """
        this = _RWStepRepr.new_RWStepRepr_RWCentreOfSymmetry(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepRepr_RWCentreOfSymmetry self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepRepr_CentreOfSymmetry ent)

        Reads CentreOfSymmetry

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_CentreOfSymmetry

        """
        return _RWStepRepr.RWStepRepr_RWCentreOfSymmetry_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepRepr_RWCentreOfSymmetry self, StepData_StepWriter SW, Handle_StepRepr_CentreOfSymmetry ent)

        Writes CentreOfSymmetry

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_CentreOfSymmetry

        """
        return _RWStepRepr.RWStepRepr_RWCentreOfSymmetry_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepRepr_RWCentreOfSymmetry self, Handle_StepRepr_CentreOfSymmetry ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepRepr.Handle_StepRepr_CentreOfSymmetry
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepRepr.RWStepRepr_RWCentreOfSymmetry_Share(self, *args)

    __swig_destroy__ = _RWStepRepr.delete_RWStepRepr_RWCentreOfSymmetry
RWStepRepr_RWCentreOfSymmetry_swigregister = _RWStepRepr.RWStepRepr_RWCentreOfSymmetry_swigregister
RWStepRepr_RWCentreOfSymmetry_swigregister(RWStepRepr_RWCentreOfSymmetry)



