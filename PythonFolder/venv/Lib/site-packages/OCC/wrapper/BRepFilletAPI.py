# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BRepFilletAPI')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BRepFilletAPI')
    _BRepFilletAPI = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepFilletAPI', [dirname(__file__)])
        except ImportError:
            import _BRepFilletAPI
            return _BRepFilletAPI
        try:
            _mod = imp.load_module('_BRepFilletAPI', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BRepFilletAPI = swig_import_helper()
    del swig_import_helper
else:
    import _BRepFilletAPI
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepFilletAPI.delete_SwigPyIterator

    def value(self):
        return _BRepFilletAPI.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _BRepFilletAPI.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _BRepFilletAPI.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _BRepFilletAPI.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _BRepFilletAPI.SwigPyIterator_equal(self, x)

    def copy(self):
        return _BRepFilletAPI.SwigPyIterator_copy(self)

    def next(self):
        return _BRepFilletAPI.SwigPyIterator_next(self)

    def __next__(self):
        return _BRepFilletAPI.SwigPyIterator___next__(self)

    def previous(self):
        return _BRepFilletAPI.SwigPyIterator_previous(self)

    def advance(self, n):
        return _BRepFilletAPI.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _BRepFilletAPI.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _BRepFilletAPI.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _BRepFilletAPI.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _BRepFilletAPI.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _BRepFilletAPI.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _BRepFilletAPI.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _BRepFilletAPI.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BRepFilletAPI.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_BRepFilletAPI.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _BRepFilletAPI.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BRepFilletAPI.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BRepFilletAPI.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _BRepFilletAPI.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _BRepFilletAPI.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _BRepFilletAPI.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BRepFilletAPI.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_BRepFilletAPI.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _BRepFilletAPI.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BRepFilletAPI.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BRepFilletAPI.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _BRepFilletAPI.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _BRepFilletAPI.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _BRepFilletAPI.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _BRepFilletAPI.ptr_to_number(item)
ptr_to_number = _BRepFilletAPI.ptr_to_number

def HashCode(*args):
    return _BRepFilletAPI.HashCode(*args)
HashCode = _BRepFilletAPI.HashCode

def ptr_equal(a, b):
    return _BRepFilletAPI.ptr_equal(a, b)
ptr_equal = _BRepFilletAPI.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import ChFi3d
else:
    import ChFi3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopOpeBRepBuild
else:
    import TopOpeBRepBuild
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopOpeBRepDS
else:
    import TopOpeBRepDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopOpeBRepTool
else:
    import TopOpeBRepTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopExp
else:
    import TopExp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepClass3d
else:
    import BRepClass3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntCurveSurface
else:
    import IntCurveSurface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Intf
else:
    import Intf
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntAna
else:
    import IntAna
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntSurf
else:
    import IntSurf
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor3d
else:
    import Adaptor3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor2d
else:
    import Adaptor2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import math
else:
    import math
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntCurvesFace
else:
    import IntCurvesFace
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepAdaptor
else:
    import BRepAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2dAdaptor
else:
    import Geom2dAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAdaptor
else:
    import GeomAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepBlend
else:
    import BRepBlend
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Approx
else:
    import Approx
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import AppCont
else:
    import AppCont
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import AppParCurves
else:
    import AppParCurves
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import AdvApprox
else:
    import AdvApprox
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import PLib
else:
    import PLib
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Law
else:
    import Law
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import ChFiDS
else:
    import ChFiDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import AppBlend
else:
    import AppBlend
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Blend
else:
    import Blend
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BlendFunc
else:
    import BlendFunc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Convert
else:
    import Convert
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepTopAdaptor
else:
    import BRepTopAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import ChFi2d
else:
    import ChFi2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepBuilderAPI
else:
    import BRepBuilderAPI
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepTools
else:
    import BRepTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Poly
else:
    import Poly
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TShort
else:
    import TShort
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRep
else:
    import BRep
del _swig_python_version_info
class BRepFilletAPI_MakeFillet2d(BRepBuilderAPI.BRepBuilderAPI_MakeShape):
    """
    Describes functions to build fillets and chamfers on the
    vertices of a planar face.
    Fillets and Chamfers on the Vertices of a Planar Face
    A MakeFillet2d object provides a framework for:
    - initializing the construction algorithm with a given face,
    - acquiring the data characterizing the fillets and chamfers,
    -   building the fillets and chamfers, and constructing the
    resulting shape, and
    -   consulting the result.
    Warning
    Only segments of straight lines and arcs of circles are
    treated. BSplines are not processed.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BRepFilletAPI_MakeFillet2d self) -> BRepFilletAPI_MakeFillet2d
        __init__(BRepFilletAPI_MakeFillet2d self, TopoDS_Face F) -> BRepFilletAPI_MakeFillet2d

        Initializes an algorithm for computing fillets and chamfers on the face F.
        The vertices on which fillets or chamfers are built are
        defined using the AddFillet or AddChamfer function.
        Warning
        The status of the initialization, as given by the Status
        function, can be one of the following:
        -   ChFi2d_Ready if the initialization is correct,
        -   ChFi2d_NotPlanar if F is not planar,
        -   ChFi2d_NoFace if F is a null face.

        :type F: OCC.wrapper.TopoDS.TopoDS_Face

        """
        this = _BRepFilletAPI.new_BRepFilletAPI_MakeFillet2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(BRepFilletAPI_MakeFillet2d self, TopoDS_Face F)
        Init(BRepFilletAPI_MakeFillet2d self, TopoDS_Face RefFace, TopoDS_Face ModFace)

        This initialize  method allow  to init the builder
        from a  face <RefFace> and  another face <ModFace>
        which derive from  <RefFace>.  This  is usefull to
        modify a fillet or   a chamfer already created  on
        <ModFace> .

        :type RefFace: OCC.wrapper.TopoDS.TopoDS_Face
        :type ModFace: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_Init(self, *args)


    def AddFillet(self, *args):
        """
        AddFillet(BRepFilletAPI_MakeFillet2d self, TopoDS_Vertex V, Standard_Real const Radius) -> TopoDS_Edge

        Adds a fillet of radius Radius between the two edges
        adjacent to the vertex V on the face modified by this
        algorithm. The two edges do not need to be rectilinear.
        This function returns the fillet and builds the resulting face.
        Warning
        The status of the construction, as given by the Status
        function, can be one of the following:
        - ChFi2d_IsDone if the fillet is built,
        - ChFi2d_ConnexionError if V does not belong to the initial face,
        -   ChFi2d_ComputationError if Radius is too large
        to build a fillet between the two adjacent edges,
        -   ChFi2d_NotAuthorized
        -   if one of the two edges connected to V is a fillet or chamfer, or
        -   if a curve other than a straight line or an arc of a
        circle is used as E, E1 or E2.
        Do not use the returned fillet if the status of the construction is not ChFi2d_IsDone.
        Exceptions
        Standard_NegativeValue if Radius is less than or equal to zero.

        :type V: OCC.wrapper.TopoDS.TopoDS_Vertex
        :type Radius: float
        :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_AddFillet(self, *args)


    def ModifyFillet(self, *args):
        """
        ModifyFillet(BRepFilletAPI_MakeFillet2d self, TopoDS_Edge Fillet, Standard_Real const Radius) -> TopoDS_Edge

        Assigns the radius Radius to the fillet Fillet already
        built on the face modified by this algorithm.
        This function returns the new fillet and modifies the existing face.
        Warning
        The status of the construction, as given by the Status
        function, can be one of the following:
        -   ChFi2d_IsDone if the new fillet is built,
        -   ChFi2d_ConnexionError if Fillet does not
        belong to the existing face,
        -   ChFi2d_ComputationError if Radius is too
        large to build a fillet between the two adjacent edges.
        Do not use the returned fillet if the status of the
        construction is not ChFi2d_IsDone.
        Exceptions
        Standard_NegativeValue if Radius is less than or equal to zero.

        :type Fillet: OCC.wrapper.TopoDS.TopoDS_Edge
        :type Radius: float
        :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_ModifyFillet(self, *args)


    def RemoveFillet(self, *args):
        """
        RemoveFillet(BRepFilletAPI_MakeFillet2d self, TopoDS_Edge Fillet) -> TopoDS_Vertex

        Removes the fillet Fillet already built on the face
        modified by this algorithm.
        This function returns the vertex connecting the two
        adjacent edges of Fillet and modifies the existing face.
        Warning
        -   The returned vertex is only valid if the Status
        function returns ChFi2d_IsDone.
        -   A null vertex is returned if the edge Fillet does not
        belong to the initial face.

        :type Fillet: OCC.wrapper.TopoDS.TopoDS_Edge
        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_RemoveFillet(self, *args)


    def AddChamfer(self, *args):
        """
        AddChamfer(BRepFilletAPI_MakeFillet2d self, TopoDS_Edge E1, TopoDS_Edge E2, Standard_Real const D1, Standard_Real const D2) -> TopoDS_Edge
        AddChamfer(BRepFilletAPI_MakeFillet2d self, TopoDS_Edge E, TopoDS_Vertex V, Standard_Real const D, Standard_Real const Ang) -> TopoDS_Edge

        Adds a chamfer on the face modified by this algorithm
        between the two edges connected by the vertex V,
        where E is one of the two edges. The chamfer makes
        an angle Ang with E and one of its extremities is on
        E at distance D from V.
        In cases where the edges are not rectilinear, distances
        are measured using the curvilinear abscissa of the
        edges and the angle is measured with respect to the
        tangent at the corresponding point.
        The angle Ang is given in radians.
        This function returns the chamfer and builds the resulting face.
        Warning
        The status of the construction, as given by the Status function, can
        be one of the following:
        -          ChFi2d_IsDone if the chamfer is built,
        -  ChFi2d_ParametersError if D1, D2, D or Ang is less than or equal to zero,
        -          ChFi2d_ConnexionError if:
        - the edge E, E1 or E2 does not belong to the initial face, or
        -  the edges E1 and E2 are not adjacent, or
        -  the vertex V is not one of the limit points of the edge E,
        -          ChFi2d_ComputationError if the parameters of the chamfer
        are too large to build a chamfer between the two adjacent edges,
        -          ChFi2d_NotAuthorized if:
        - the edge E1, E2 or one of the two edges connected to V is a fillet or chamfer, or
        - a curve other than a straight line or an arc of a circle is used as E, E1 or E2.
        Do not use the returned chamfer if
        the status of the construction is not ChFi2d_IsDone.

        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :type V: OCC.wrapper.TopoDS.TopoDS_Vertex
        :type D: float
        :type Ang: float
        :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_AddChamfer(self, *args)


    def ModifyChamfer(self, *args):
        """
        ModifyChamfer(BRepFilletAPI_MakeFillet2d self, TopoDS_Edge Chamfer, TopoDS_Edge E1, TopoDS_Edge E2, Standard_Real const D1, Standard_Real const D2) -> TopoDS_Edge
        ModifyChamfer(BRepFilletAPI_MakeFillet2d self, TopoDS_Edge Chamfer, TopoDS_Edge E, Standard_Real const D, Standard_Real const Ang) -> TopoDS_Edge

        Modifies the chamfer Chamfer on the face modified
        by this algorithm, where:
        E is one of the two adjacent edges on which
        Chamfer is already built; the new chamfer makes
        an angle Ang with E and one of its extremities is
        on E at distance D from the vertex on which the chamfer is built.
        In cases where the edges are not rectilinear, the
        distances are measured using the curvilinear abscissa
        of the edges and the angle is measured with respect
        to the tangent at the corresponding point.
        The angle Ang is given in radians.
        This function returns the new chamfer and modifies the existing face.
        Warning
        The status of the construction, as given by the Status
        function, can be one of the following:
        -   ChFi2d_IsDone if the chamfer is built,
        -   ChFi2d_ParametersError if D1, D2, D or Ang is less than or equal to zero,
        -   ChFi2d_ConnexionError if:
        -   the edge E, E1, E2 or Chamfer does not belong
        to the existing face, or
        -   the edges E1 and E2 are not adjacent,
        -   ChFi2d_ComputationError if the parameters of
        the chamfer are too large to build a chamfer
        between the two adjacent edges,
        -   ChFi2d_NotAuthorized if E1 or E2 is a fillet or chamfer.
        Do not use the returned chamfer if the status of the
        construction is not ChFi2d_IsDone.

        :type Chamfer: OCC.wrapper.TopoDS.TopoDS_Edge
        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :type D: float
        :type Ang: float
        :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_ModifyChamfer(self, *args)


    def RemoveChamfer(self, *args):
        """
        RemoveChamfer(BRepFilletAPI_MakeFillet2d self, TopoDS_Edge Chamfer) -> TopoDS_Vertex

        Removes the chamfer Chamfer already built on the face
        modified by this algorithm.
        This function returns the vertex connecting the two
        adjacent edges of Chamfer and modifies the existing face.
        Warning
        -   The returned vertex is only valid if the Status
        function returns ChFi2d_IsDone.
        -   A null vertex is returned if the edge Chamfer does
        not belong to the initial face.

        :type Chamfer: OCC.wrapper.TopoDS.TopoDS_Edge
        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_RemoveChamfer(self, *args)


    def IsModified(self, *args):
        """
        IsModified(BRepFilletAPI_MakeFillet2d self, TopoDS_Edge E) -> Standard_Boolean

        Returns true if the edge E on the face modified by this
        algorithm is chamfered or filleted.
        Warning
        Returns false if E does not belong to the face modified by this algorithm.

        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_IsModified(self, *args)


    def FilletEdges(self, *args):
        """
        Returns the table of fillets on the face modified by this algorithm.

        :rtype: OCC.wrapper.TopTools.TopTools_SequenceOfShape

        """
        res = _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_FilletEdges(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NbFillet(self, *args):
        """
        NbFillet(BRepFilletAPI_MakeFillet2d self) -> Standard_Integer

        Returns the number of fillets on the face modified by this algorithm.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_NbFillet(self, *args)


    def ChamferEdges(self, *args):
        """
        Returns the table of chamfers on the face modified by this algorithm.

        :rtype: OCC.wrapper.TopTools.TopTools_SequenceOfShape

        """
        res = _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_ChamferEdges(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NbChamfer(self, *args):
        """
        NbChamfer(BRepFilletAPI_MakeFillet2d self) -> Standard_Integer

        Returns the number of chamfers on the face modified by this algorithm.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_NbChamfer(self, *args)


    def Modified(self, *args):
        """
        Returns the list  of shapes modified from the shape
        <S>.

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_Modified(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NbCurves(self, *args):
        """
        NbCurves(BRepFilletAPI_MakeFillet2d self) -> Standard_Integer

        returns the number of new curves
        after the shape creation.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_NbCurves(self, *args)


    def NewEdges(self, *args):
        """
        Return the Edges created for curve I.

        :type I: int
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_NewEdges(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasDescendant(self, *args):
        """
        HasDescendant(BRepFilletAPI_MakeFillet2d self, TopoDS_Edge E) -> Standard_Boolean

        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_HasDescendant(self, *args)


    def DescendantEdge(self, *args):
        """
        Returns the chamfered or filleted edge built from the
        edge E on the face modified by this algorithm. If E has
        not been modified, this function returns E.
        Exceptions
        Standard_NoSuchObject if the edge E does not
        belong to the initial face.

        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        res = _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_DescendantEdge(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def BasisEdge(self, *args):
        """
        Returns the basis edge on the face modified by this
        algorithm from which the chamfered or filleted edge E is
        built. If E has not been modified, this function returns E.
        Warning
        E is returned if it does not belong to the initial face.

        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        res = _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_BasisEdge(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Status(self, *args):
        """
        Status(BRepFilletAPI_MakeFillet2d self) -> ChFi2d_ConstructionError

        :rtype: OCC.wrapper.ChFi2d.ChFi2d_ConstructionError

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_Status(self, *args)


    def Build(self, *args):
        """
        Build(BRepFilletAPI_MakeFillet2d self)

        Update the result and set the Done flag


        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_Build(self, *args)

    __swig_destroy__ = _BRepFilletAPI.delete_BRepFilletAPI_MakeFillet2d
BRepFilletAPI_MakeFillet2d_swigregister = _BRepFilletAPI.BRepFilletAPI_MakeFillet2d_swigregister
BRepFilletAPI_MakeFillet2d_swigregister(BRepFilletAPI_MakeFillet2d)

class BRepFilletAPI_LocalOperation(BRepBuilderAPI.BRepBuilderAPI_MakeShape):
    """Construction of fillets on the edges of a Shell."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Add(self, *args):
        """
        Add(BRepFilletAPI_LocalOperation self, TopoDS_Edge E)

        Adds a  contour in  the  builder  (builds a
        contour  of tangent edges).

        :type E: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _BRepFilletAPI.BRepFilletAPI_LocalOperation_Add(self, *args)


    def ResetContour(self, *args):
        """
        ResetContour(BRepFilletAPI_LocalOperation self, Standard_Integer const IC)

        Reset the contour of index IC, there is nomore
        information in the contour.

        :type IC: int

        """
        return _BRepFilletAPI.BRepFilletAPI_LocalOperation_ResetContour(self, *args)


    def NbContours(self, *args):
        """
        NbContours(BRepFilletAPI_LocalOperation self) -> Standard_Integer

        Number of contours.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepFilletAPI.BRepFilletAPI_LocalOperation_NbContours(self, *args)


    def Contour(self, *args):
        """
        Contour(BRepFilletAPI_LocalOperation self, TopoDS_Edge E) -> Standard_Integer

        Returns the index of  the  contour containing the edge
        E, returns 0 if E doesn't belong to any contour.

        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepFilletAPI.BRepFilletAPI_LocalOperation_Contour(self, *args)


    def NbEdges(self, *args):
        """
        NbEdges(BRepFilletAPI_LocalOperation self, Standard_Integer const I) -> Standard_Integer

        Number of Edges in the contour I.

        :type I: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepFilletAPI.BRepFilletAPI_LocalOperation_NbEdges(self, *args)


    def Edge(self, *args):
        """
        Returns the Edge J in the contour I.

        :type I: int
        :type J: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        res = _BRepFilletAPI.BRepFilletAPI_LocalOperation_Edge(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Remove(self, *args):
        """
        Remove(BRepFilletAPI_LocalOperation self, TopoDS_Edge E)

        remove the contour containing the Edge E.

        :type E: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _BRepFilletAPI.BRepFilletAPI_LocalOperation_Remove(self, *args)


    def Length(self, *args):
        """
        Length(BRepFilletAPI_LocalOperation self, Standard_Integer const IC) -> Standard_Real

        returns the length the contour of index IC.

        :type IC: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepFilletAPI.BRepFilletAPI_LocalOperation_Length(self, *args)


    def FirstVertex(self, *args):
        """
        FirstVertex(BRepFilletAPI_LocalOperation self, Standard_Integer const IC) -> TopoDS_Vertex

        Returns the first Vertex of the contour of index IC.

        :type IC: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _BRepFilletAPI.BRepFilletAPI_LocalOperation_FirstVertex(self, *args)


    def LastVertex(self, *args):
        """
        LastVertex(BRepFilletAPI_LocalOperation self, Standard_Integer const IC) -> TopoDS_Vertex

        Returns the last Vertex of the contour of index IC.

        :type IC: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _BRepFilletAPI.BRepFilletAPI_LocalOperation_LastVertex(self, *args)


    def Abscissa(self, *args):
        """
        Abscissa(BRepFilletAPI_LocalOperation self, Standard_Integer const IC, TopoDS_Vertex V) -> Standard_Real

        returns the abscissa of the vertex V on
        the contour of index IC.

        :type IC: int
        :type V: OCC.wrapper.TopoDS.TopoDS_Vertex
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepFilletAPI.BRepFilletAPI_LocalOperation_Abscissa(self, *args)


    def RelativeAbscissa(self, *args):
        """
        RelativeAbscissa(BRepFilletAPI_LocalOperation self, Standard_Integer const IC, TopoDS_Vertex V) -> Standard_Real

        returns the relative abscissa([0.,1.]) of the
        vertex V on the contour of index IC.

        :type IC: int
        :type V: OCC.wrapper.TopoDS.TopoDS_Vertex
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepFilletAPI.BRepFilletAPI_LocalOperation_RelativeAbscissa(self, *args)


    def ClosedAndTangent(self, *args):
        """
        ClosedAndTangent(BRepFilletAPI_LocalOperation self, Standard_Integer const IC) -> Standard_Boolean

        returns true if the contour of index IC is closed
        an tangent.

        :type IC: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepFilletAPI.BRepFilletAPI_LocalOperation_ClosedAndTangent(self, *args)


    def Closed(self, *args):
        """
        Closed(BRepFilletAPI_LocalOperation self, Standard_Integer const IC) -> Standard_Boolean

        returns true if the contour of index IC is closed

        :type IC: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepFilletAPI.BRepFilletAPI_LocalOperation_Closed(self, *args)


    def Reset(self, *args):
        """
        Reset(BRepFilletAPI_LocalOperation self)

        Reset all the fields updated   by Build operation  and
        leave the  algorithm in  the  same state  than  before
        build    call.  It   allows   contours    and   radius
        modifications  to build the result another time.


        """
        return _BRepFilletAPI.BRepFilletAPI_LocalOperation_Reset(self, *args)


    def Simulate(self, *args):
        """
        Simulate(BRepFilletAPI_LocalOperation self, Standard_Integer const IC)

        :type IC: int

        """
        return _BRepFilletAPI.BRepFilletAPI_LocalOperation_Simulate(self, *args)


    def NbSurf(self, *args):
        """
        NbSurf(BRepFilletAPI_LocalOperation self, Standard_Integer const IC) -> Standard_Integer

        :type IC: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepFilletAPI.BRepFilletAPI_LocalOperation_NbSurf(self, *args)


    def Sect(self, *args):
        """
        Sect(BRepFilletAPI_LocalOperation self, Standard_Integer const IC, Standard_Integer const IS) -> Handle_ChFiDS_SecHArray1

        :type IC: int
        :type IS: int
        :rtype: OCC.wrapper.ChFiDS.Handle_ChFiDS_SecHArray1

        """
        return _BRepFilletAPI.BRepFilletAPI_LocalOperation_Sect(self, *args)

    __swig_destroy__ = _BRepFilletAPI.delete_BRepFilletAPI_LocalOperation
BRepFilletAPI_LocalOperation_swigregister = _BRepFilletAPI.BRepFilletAPI_LocalOperation_swigregister
BRepFilletAPI_LocalOperation_swigregister(BRepFilletAPI_LocalOperation)

class BRepFilletAPI_MakeChamfer(BRepFilletAPI_LocalOperation):
    """
    Describes functions to build chamfers on edges of a shell or solid.
    Chamfered Edge of a Shell or Solid
    A MakeChamfer object provides a framework for:
    -   initializing the construction algorithm with a given shape,
    -   acquiring the data characterizing the chamfers,
    -   building the chamfers and constructing the resulting shape, and
    -   consulting the result.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BRepFilletAPI_MakeChamfer self, TopoDS_Shape S) -> BRepFilletAPI_MakeChamfer

        Initializes an algorithm for computing chamfers on the shape S.
        The edges on which chamfers are built are defined using the Add function.

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        this = _BRepFilletAPI.new_BRepFilletAPI_MakeChamfer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetDist(self, *args):
        """
        SetDist(BRepFilletAPI_MakeChamfer self, Standard_Real const Dis, Standard_Integer const IC, TopoDS_Face F)

        Sets the distances Dis1 and Dis2 which give the
        parameters of the chamfer along the contour of index
        IC generated using the Add function in the internal
        data structure of this algorithm. The face F identifies
        the side where Dis1 is measured.
        Warning
        Nothing is done if either the edge E or the face F
        does not belong to the initial shape.

        :type Dis: float
        :type IC: int
        :type F: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_SetDist(self, *args)


    def GetDist(self, *args):
        """
        GetDist(BRepFilletAPI_MakeChamfer self, Standard_Integer const IC)

        :type IC: int
        :type Dis: float

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_GetDist(self, *args)


    def Add(self, *args):
        """
        Add(BRepFilletAPI_MakeChamfer self, TopoDS_Edge E)
        Add(BRepFilletAPI_MakeChamfer self, Standard_Real const Dis, TopoDS_Edge E, TopoDS_Face F)
        Add(BRepFilletAPI_MakeChamfer self, Standard_Real const Dis1, Standard_Real const Dis2, TopoDS_Edge E, TopoDS_Face F)

        Adds a  fillet contour in  the  builder  (builds a
        contour  of tangent edges to <E> and sets the two
        distances <Dis1> and <Dis2> ( parameters of the chamfer ) ).

        :type Dis1: float
        :type Dis2: float
        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :type F: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_Add(self, *args)


    def SetDists(self, *args):
        """
        SetDists(BRepFilletAPI_MakeChamfer self, Standard_Real const Dis1, Standard_Real const Dis2, Standard_Integer const IC, TopoDS_Face F)

        Sets the distances Dis1 and Dis2 which give the
        parameters of the chamfer along the contour of index
        IC generated using the Add function in the internal
        data structure of this algorithm. The face F identifies
        the side where Dis1 is measured.
        Warning
        Nothing is done if either the edge E or the face F
        does not belong to the initial shape.

        :type Dis1: float
        :type Dis2: float
        :type IC: int
        :type F: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_SetDists(self, *args)


    def Dists(self, *args):
        """
        Dists(BRepFilletAPI_MakeChamfer self, Standard_Integer const IC)

        Returns the distances Dis1 and Dis2 which give the
        parameters of the chamfer along the contour of index IC
        in the internal data structure of this algorithm.
        Warning
        -1. is returned if IC is outside the bounds of the table of contours.

        :type IC: int
        :type Dis1: float
        :type Dis2: float

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_Dists(self, *args)


    def AddDA(self, *args):
        """
        AddDA(BRepFilletAPI_MakeChamfer self, Standard_Real const Dis, Standard_Real const Angle, TopoDS_Edge E, TopoDS_Face F)

        Adds a  fillet contour in  the  builder  (builds a
        contour  of tangent edges to <E> and sets the
        distance <Dis1> and angle <Angle> ( parameters of the chamfer ) ).

        :type Dis: float
        :type Angle: float
        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :type F: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_AddDA(self, *args)


    def SetDistAngle(self, *args):
        """
        SetDistAngle(BRepFilletAPI_MakeChamfer self, Standard_Real const Dis, Standard_Real const Angle, Standard_Integer const IC, TopoDS_Face F)

        set the distance <Dis> and <Angle> of the fillet
        contour of index <IC> in the DS with <Dis> on <F>.
        if the face <F> is not one of common faces
        of an edge of the contour <IC>

        :type Dis: float
        :type Angle: float
        :type IC: int
        :type F: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_SetDistAngle(self, *args)


    def GetDistAngle(self, *args):
        """
        GetDistAngle(BRepFilletAPI_MakeChamfer self, Standard_Integer const IC)

        gives the distances <Dis> and <Angle> of the fillet
        contour of index <IC> in the DS

        :type IC: int
        :type Dis: float
        :type Angle: float
        :type DisOnFace1: bool

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_GetDistAngle(self, *args)


    def IsSymetric(self, *args):
        """
        IsSymetric(BRepFilletAPI_MakeChamfer self, Standard_Integer const IC) -> Standard_Boolean

        return True if chamfer symetric false else.

        :type IC: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_IsSymetric(self, *args)


    def IsTwoDistances(self, *args):
        """
        IsTwoDistances(BRepFilletAPI_MakeChamfer self, Standard_Integer const IC) -> Standard_Boolean

        return True if chamfer is made with two distances false else.

        :type IC: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_IsTwoDistances(self, *args)


    def IsDistanceAngle(self, *args):
        """
        IsDistanceAngle(BRepFilletAPI_MakeChamfer self, Standard_Integer const IC) -> Standard_Boolean

        return True if chamfer is made with distance and angle false else.

        :type IC: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_IsDistanceAngle(self, *args)


    def ResetContour(self, *args):
        """
        ResetContour(BRepFilletAPI_MakeChamfer self, Standard_Integer const IC)

        Erases the chamfer parameters on the contour of
        index IC in the internal data structure of this algorithm.
        Use the SetDists function to reset this data.
        Warning
        Nothing is done if IC is outside the bounds of the table of contours.

        :type IC: int

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_ResetContour(self, *args)


    def NbContours(self, *args):
        """
        NbContours(BRepFilletAPI_MakeChamfer self) -> Standard_Integer

        Returns the number of contours generated using the
        Add function in the internal data structure of this algorithm.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_NbContours(self, *args)


    def Contour(self, *args):
        """
        Contour(BRepFilletAPI_MakeChamfer self, TopoDS_Edge E) -> Standard_Integer

        Returns the index of the contour in the internal data
        structure of this algorithm, which contains the edge E of the shape.
        This function returns 0 if the edge E does not belong to any contour.
        Warning
        This index can change if a contour is removed from the
        internal data structure of this algorithm using the function Remove.

        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_Contour(self, *args)


    def NbEdges(self, *args):
        """
        NbEdges(BRepFilletAPI_MakeChamfer self, Standard_Integer const I) -> Standard_Integer

        Returns the number of edges in the contour of index I in
        the internal data structure of this algorithm.
        Warning
        Returns 0 if I is outside the bounds of the table of contours.

        :type I: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_NbEdges(self, *args)


    def Edge(self, *args):
        """
        Returns the edge of index J in the contour of index I in
        the internal data structure of this algorithm.
        Warning
        Returns a null shape if:
        -   I is outside the bounds of the table of contours, or
        -   J is outside the bounds of the table of edges of the contour of index I.

        :type I: int
        :type J: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        res = _BRepFilletAPI.BRepFilletAPI_MakeChamfer_Edge(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Remove(self, *args):
        """
        Remove(BRepFilletAPI_MakeChamfer self, TopoDS_Edge E)

        Removes the contour in the internal data structure of
        this algorithm which contains the edge E of the shape.
        Warning
        Nothing is done if the edge E does not belong to the
        contour in the internal data structure of this algorithm.

        :type E: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_Remove(self, *args)


    def Length(self, *args):
        """
        Length(BRepFilletAPI_MakeChamfer self, Standard_Integer const IC) -> Standard_Real

        Returns the length of the contour of index IC in the
        internal data structure of this algorithm.
        Warning
        Returns -1. if IC is outside the bounds of the table of contours.

        :type IC: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_Length(self, *args)


    def FirstVertex(self, *args):
        """
        FirstVertex(BRepFilletAPI_MakeChamfer self, Standard_Integer const IC) -> TopoDS_Vertex

        Returns the first vertex of the contour of index IC
        in the internal data structure of this algorithm.
        Warning
        Returns a null shape if IC is outside the bounds of the table of contours.

        :type IC: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_FirstVertex(self, *args)


    def LastVertex(self, *args):
        """
        LastVertex(BRepFilletAPI_MakeChamfer self, Standard_Integer const IC) -> TopoDS_Vertex

        Returns the last vertex of the contour of index IC
        in the internal data structure of this algorithm.
        Warning
        Returns a null shape if IC is outside the bounds of the table of contours.

        :type IC: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_LastVertex(self, *args)


    def Abscissa(self, *args):
        """
        Abscissa(BRepFilletAPI_MakeChamfer self, Standard_Integer const IC, TopoDS_Vertex V) -> Standard_Real

        Returns the curvilinear abscissa of the vertex V on the
        contour of index IC in the internal data structure of this algorithm.
        Warning
        Returns -1. if:
        -   IC is outside the bounds of the table of contours, or
        -   V is not on the contour of index IC.

        :type IC: int
        :type V: OCC.wrapper.TopoDS.TopoDS_Vertex
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_Abscissa(self, *args)


    def RelativeAbscissa(self, *args):
        """
        RelativeAbscissa(BRepFilletAPI_MakeChamfer self, Standard_Integer const IC, TopoDS_Vertex V) -> Standard_Real

        Returns the relative curvilinear abscissa (i.e. between 0
        and 1) of the vertex V on the contour of index IC in the
        internal data structure of this algorithm.
        Warning
        Returns -1. if:
        -   IC is outside the bounds of the table of contours, or
        -   V is not on the contour of index IC.

        :type IC: int
        :type V: OCC.wrapper.TopoDS.TopoDS_Vertex
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_RelativeAbscissa(self, *args)


    def ClosedAndTangent(self, *args):
        """
        ClosedAndTangent(BRepFilletAPI_MakeChamfer self, Standard_Integer const IC) -> Standard_Boolean

        eturns true if the contour of index IC in the internal
        data structure of this algorithm is closed and tangential at the point of closure.
        Warning
        Returns false if IC is outside the bounds of the table of contours.

        :type IC: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_ClosedAndTangent(self, *args)


    def Closed(self, *args):
        """
        Closed(BRepFilletAPI_MakeChamfer self, Standard_Integer const IC) -> Standard_Boolean

        Returns true if the contour of index IC in the internal
        data structure of this algorithm is closed.
        Warning
        Returns false if IC is outside the bounds of the table of contours.

        :type IC: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_Closed(self, *args)


    def Build(self, *args):
        """
        Build(BRepFilletAPI_MakeChamfer self)

        Builds the chamfers on all the contours in the internal
        data structure of this algorithm and constructs the resulting shape.
        Use the function IsDone to verify that the chamfered
        shape is built. Use the function Shape to retrieve the chamfered shape.
        Warning
        The construction of chamfers implements highly complex
        construction algorithms. Consequently, there may be
        instances where the algorithm fails, for example if the
        data defining the parameters of the chamfer is not
        compatible with the geometry of the initial shape. There
        is no initial analysis of errors and these only become
        evident at the construction stage.
        Additionally, in the current software release, the following
        cases are not handled:
        -   the end point of the contour is the point of
        intersection of 4 or more edges of the shape, or
        -   the intersection of the chamfer with a face which
        limits the contour is not fully contained in this face.


        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_Build(self, *args)


    def Reset(self, *args):
        """
        Reset(BRepFilletAPI_MakeChamfer self)

        Reinitializes this algorithm, thus canceling the effects of the Build function.
        This function allows modifications to be made to the
        contours and chamfer parameters in order to rebuild the shape.


        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_Reset(self, *args)


    def Builder(self, *args):
        """
        Builder(BRepFilletAPI_MakeChamfer self) -> Handle_TopOpeBRepBuild_HBuilder

        Returns the internal filleting algorithm.

        :rtype: OCC.wrapper.TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_Builder(self, *args)


    def Generated(self, *args):
        """
        Returns the  list   of shapes generated   from the
        shape <EorV>.

        :type EorV: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _BRepFilletAPI.BRepFilletAPI_MakeChamfer_Generated(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Modified(self, *args):
        """
        Returns the list  of shapes modified from the shape
        <F>.

        :type F: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _BRepFilletAPI.BRepFilletAPI_MakeChamfer_Modified(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsDeleted(self, *args):
        """
        IsDeleted(BRepFilletAPI_MakeChamfer self, TopoDS_Shape F) -> Standard_Boolean

        :type F: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_IsDeleted(self, *args)


    def Simulate(self, *args):
        """
        Simulate(BRepFilletAPI_MakeChamfer self, Standard_Integer const IC)

        :type IC: int

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_Simulate(self, *args)


    def NbSurf(self, *args):
        """
        NbSurf(BRepFilletAPI_MakeChamfer self, Standard_Integer const IC) -> Standard_Integer

        :type IC: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_NbSurf(self, *args)


    def Sect(self, *args):
        """
        Sect(BRepFilletAPI_MakeChamfer self, Standard_Integer const IC, Standard_Integer const IS) -> Handle_ChFiDS_SecHArray1

        :type IC: int
        :type IS: int
        :rtype: OCC.wrapper.ChFiDS.Handle_ChFiDS_SecHArray1

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeChamfer_Sect(self, *args)

    __swig_destroy__ = _BRepFilletAPI.delete_BRepFilletAPI_MakeChamfer
BRepFilletAPI_MakeChamfer_swigregister = _BRepFilletAPI.BRepFilletAPI_MakeChamfer_swigregister
BRepFilletAPI_MakeChamfer_swigregister(BRepFilletAPI_MakeChamfer)

class BRepFilletAPI_MakeFillet(BRepFilletAPI_LocalOperation):
    """
    Describes functions to build fillets on the broken edges of a shell or solid.
    A MakeFillet object provides a framework for:
    -   initializing the construction algorithm with a given shape,
    -   acquiring the data characterizing the fillets,
    -   building the fillets and constructing the resulting shape, and
    -   consulting the result.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BRepFilletAPI_MakeFillet self, TopoDS_Shape S, ChFi3d_FilletShape const FShape=ChFi3d_Rational) -> BRepFilletAPI_MakeFillet

        Initializes   the computation    of   the  fillets.
        <FShape> sets   the type   of fillet  surface. The
        default value is ChFi3d_Rational (classical  nurbs
        representation of  circles).   ChFi3d_QuasiAngular
        corresponds to  a  nurbs representation of circles
        which   parameterisation matches  the  circle one.
        ChFi3d_Polynomial  corresponds to  a    polynomial
        representation of circles.

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type FShape: OCC.wrapper.ChFi3d.ChFi3d_FilletShape

        """
        this = _BRepFilletAPI.new_BRepFilletAPI_MakeFillet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetParams(self, *args):
        """
        SetParams(BRepFilletAPI_MakeFillet self, Standard_Real const Tang, Standard_Real const Tesp, Standard_Real const T2d, Standard_Real const TApp3d, Standard_Real const TolApp2d, Standard_Real const Fleche)

        :type Tang: float
        :type Tesp: float
        :type T2d: float
        :type TApp3d: float
        :type TolApp2d: float
        :type Fleche: float

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_SetParams(self, *args)


    def SetContinuity(self, *args):
        """
        SetContinuity(BRepFilletAPI_MakeFillet self, GeomAbs_Shape const InternalContinuity, Standard_Real const AngularTolerance)

        Changes     the      parameters     of  continiuity
        InternalContinuity to produce fillet'surfaces with
        an continuity   Ci (i=0,1 or    2).
        By defaultInternalContinuity = GeomAbs_C1.
        AngularTolerance  is the G1 tolerance between fillet
        and support'faces.

        :type InternalContinuity: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :type AngularTolerance: float

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_SetContinuity(self, *args)


    def Add(self, *args):
        """
        Add(BRepFilletAPI_MakeFillet self, TopoDS_Edge E)
        Add(BRepFilletAPI_MakeFillet self, Standard_Real const Radius, TopoDS_Edge E)
        Add(BRepFilletAPI_MakeFillet self, Standard_Real const R1, Standard_Real const R2, TopoDS_Edge E)
        Add(BRepFilletAPI_MakeFillet self, Handle_Law_Function L, TopoDS_Edge E)
        Add(BRepFilletAPI_MakeFillet self, NCollection_Array1_gp_Pnt2d UandR, TopoDS_Edge E)

        Adds a  fillet description in  the  builder
        - builds a contour  of tangent edges,
        - sets the radius evolution law interpolating the values
        given in the array UandR :

        p2d.X() = relative parameter on the spine [0,1]
        p2d.Y() = value of the radius.

        :type UandR: OCC.wrapper.TColgp.TColgp_Array1OfPnt2d
        :type E: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_Add(self, *args)


    def ResetContour(self, *args):
        """
        ResetContour(BRepFilletAPI_MakeFillet self, Standard_Integer const IC)

        Erases the radius information on the contour of index
        IC in the internal data structure of this algorithm.
        Use the SetRadius function to reset this data.
        Warning
        Nothing is done if IC is outside the bounds of the table of contours.

        :type IC: int

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_ResetContour(self, *args)


    def IsConstant(self, *args):
        """
        IsConstant(BRepFilletAPI_MakeFillet self, Standard_Integer const IC) -> Standard_Boolean
        IsConstant(BRepFilletAPI_MakeFillet self, Standard_Integer const IC, TopoDS_Edge E) -> Standard_Boolean

        Returns true if the radius of the fillet along the edge E of the
        contour of index IC in the internal data structure of
        this algorithm is constant.
        Warning
        False is returned if IC is outside the bounds of the table
        of contours or if E does not belong to the contour of index IC.

        :type IC: int
        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_IsConstant(self, *args)


    def Radius(self, *args):
        """
        Radius(BRepFilletAPI_MakeFillet self, Standard_Integer const IC) -> Standard_Real
        Radius(BRepFilletAPI_MakeFillet self, Standard_Integer const IC, TopoDS_Edge E) -> Standard_Real

        Returns the radius of the fillet along the edge E of the contour of index
        IC in the internal data structure of this algorithm.
        Warning
        -   Use this function only if the radius is constant.
        -   -1 is returned if IC is outside the bounds of the
        table of contours or if E does not belong to the contour of index IC.

        :type IC: int
        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_Radius(self, *args)


    def SetRadius(self, *args):
        """
        SetRadius(BRepFilletAPI_MakeFillet self, Standard_Real const Radius, Standard_Integer const IC, Standard_Integer const IinC)
        SetRadius(BRepFilletAPI_MakeFillet self, Standard_Real const R1, Standard_Real const R2, Standard_Integer const IC, Standard_Integer const IinC)
        SetRadius(BRepFilletAPI_MakeFillet self, Handle_Law_Function L, Standard_Integer const IC, Standard_Integer const IinC)
        SetRadius(BRepFilletAPI_MakeFillet self, NCollection_Array1_gp_Pnt2d UandR, Standard_Integer const IC, Standard_Integer const IinC)
        SetRadius(BRepFilletAPI_MakeFillet self, Standard_Real const Radius, Standard_Integer const IC, TopoDS_Edge E)
        SetRadius(BRepFilletAPI_MakeFillet self, Standard_Real const Radius, Standard_Integer const IC, TopoDS_Vertex V)

        :type Radius: float
        :type IC: int
        :type V: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_SetRadius(self, *args)


    def GetBounds(self, *args):
        """
        GetBounds(BRepFilletAPI_MakeFillet self, Standard_Integer const IC, TopoDS_Edge E) -> Standard_Boolean

        :type IC: int
        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :type F: float
        :type L: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_GetBounds(self, *args)


    def GetLaw(self, *args):
        """
        GetLaw(BRepFilletAPI_MakeFillet self, Standard_Integer const IC, TopoDS_Edge E) -> Handle_Law_Function

        :type IC: int
        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :rtype: OCC.wrapper.Law.Handle_Law_Function

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_GetLaw(self, *args)


    def SetLaw(self, *args):
        """
        SetLaw(BRepFilletAPI_MakeFillet self, Standard_Integer const IC, TopoDS_Edge E, Handle_Law_Function L)

        :type IC: int
        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :type L: OCC.wrapper.Law.Handle_Law_Function

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_SetLaw(self, *args)


    def SetFilletShape(self, *args):
        """
        SetFilletShape(BRepFilletAPI_MakeFillet self, ChFi3d_FilletShape const FShape)

        Assigns FShape as the type of fillet shape built by this algorithm.

        :type FShape: OCC.wrapper.ChFi3d.ChFi3d_FilletShape

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_SetFilletShape(self, *args)


    def GetFilletShape(self, *args):
        """
        GetFilletShape(BRepFilletAPI_MakeFillet self) -> ChFi3d_FilletShape

        Returns the type of fillet shape built by this algorithm.

        :rtype: OCC.wrapper.ChFi3d.ChFi3d_FilletShape

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_GetFilletShape(self, *args)


    def NbContours(self, *args):
        """
        NbContours(BRepFilletAPI_MakeFillet self) -> Standard_Integer

        Returns the number of contours generated using the
        Add function in the internal data structure of this algorithm.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_NbContours(self, *args)


    def Contour(self, *args):
        """
        Contour(BRepFilletAPI_MakeFillet self, TopoDS_Edge E) -> Standard_Integer

        Returns the index of the contour in the internal data
        structure of this algorithm which contains the edge E of the shape.
        This function returns 0 if the edge E does not belong to any contour.
        Warning
        This index can change if a contour is removed from the
        internal data structure of this algorithm using the function Remove.

        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_Contour(self, *args)


    def NbEdges(self, *args):
        """
        NbEdges(BRepFilletAPI_MakeFillet self, Standard_Integer const I) -> Standard_Integer

        Returns the number of edges in the contour of index I in
        the internal data structure of this algorithm.
        Warning
        Returns 0 if I is outside the bounds of the table of contours.

        :type I: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_NbEdges(self, *args)


    def Edge(self, *args):
        """
        Returns the edge of index J in the contour of index I in
        the internal data structure of this algorithm.
        Warning
        Returns a null shape if:
        -   I is outside the bounds of the table of contours, or
        -   J is outside the bounds of the table of edges of the index I contour.

        :type I: int
        :type J: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        res = _BRepFilletAPI.BRepFilletAPI_MakeFillet_Edge(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Remove(self, *args):
        """
        Remove(BRepFilletAPI_MakeFillet self, TopoDS_Edge E)

        Removes the contour in the internal data structure of
        this algorithm which contains the edge E of the shape.
        Warning
        Nothing is done if the edge E does not belong to the
        contour in the internal data structure of this algorithm.

        :type E: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_Remove(self, *args)


    def Length(self, *args):
        """
        Length(BRepFilletAPI_MakeFillet self, Standard_Integer const IC) -> Standard_Real

        Returns the length of the contour of index IC in the
        internal data structure of this algorithm.
        Warning
        Returns -1. if IC is outside the bounds of the table of contours.

        :type IC: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_Length(self, *args)


    def FirstVertex(self, *args):
        """
        FirstVertex(BRepFilletAPI_MakeFillet self, Standard_Integer const IC) -> TopoDS_Vertex

        Returns the first vertex of the contour of index IC
        in the internal data structure of this algorithm.
        Warning
        Returns a null shape if IC is outside the bounds of the table of contours.

        :type IC: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_FirstVertex(self, *args)


    def LastVertex(self, *args):
        """
        LastVertex(BRepFilletAPI_MakeFillet self, Standard_Integer const IC) -> TopoDS_Vertex

        Returns the  last vertex of the contour of index IC
        in the internal data structure of this algorithm.
        Warning
        Returns a null shape if IC is outside the bounds of the table of contours.

        :type IC: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_LastVertex(self, *args)


    def Abscissa(self, *args):
        """
        Abscissa(BRepFilletAPI_MakeFillet self, Standard_Integer const IC, TopoDS_Vertex V) -> Standard_Real

        Returns the curvilinear abscissa of the vertex V on the
        contour of index IC in the internal data structure of this algorithm.
        Warning
        Returns -1. if:
        -   IC is outside the bounds of the table of contours, or
        -   V is not on the contour of index IC.

        :type IC: int
        :type V: OCC.wrapper.TopoDS.TopoDS_Vertex
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_Abscissa(self, *args)


    def RelativeAbscissa(self, *args):
        """
        RelativeAbscissa(BRepFilletAPI_MakeFillet self, Standard_Integer const IC, TopoDS_Vertex V) -> Standard_Real

        Returns the relative curvilinear abscissa (i.e. between 0
        and 1) of the vertex V on the contour of index IC in the
        internal data structure of this algorithm.
        Warning
        Returns -1. if:
        -   IC is outside the bounds of the table of contours, or
        -   V is not on the contour of index IC.

        :type IC: int
        :type V: OCC.wrapper.TopoDS.TopoDS_Vertex
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_RelativeAbscissa(self, *args)


    def ClosedAndTangent(self, *args):
        """
        ClosedAndTangent(BRepFilletAPI_MakeFillet self, Standard_Integer const IC) -> Standard_Boolean

        Returns true if the contour of index IC in the internal
        data structure of this algorithm is closed and tangential
        at the point of closure.
        Warning
        Returns false if IC is outside the bounds of the table of contours.

        :type IC: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_ClosedAndTangent(self, *args)


    def Closed(self, *args):
        """
        Closed(BRepFilletAPI_MakeFillet self, Standard_Integer const IC) -> Standard_Boolean

        Returns true if the contour of index IC in the internal
        data structure of this algorithm is closed.
        Warning
        Returns false if IC is outside the bounds of the table of contours.

        :type IC: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_Closed(self, *args)


    def Build(self, *args):
        """
        Build(BRepFilletAPI_MakeFillet self)

        Builds the fillets on all the contours in the internal data
        structure of this algorithm and constructs the resulting shape.
        Use the function IsDone to verify that the filleted shape
        is built. Use the function Shape to retrieve the filleted shape.
        Warning
        The construction of fillets implements highly complex
        construction algorithms. Consequently, there may be
        instances where the algorithm fails, for example if the
        data defining the radius of the fillet is not compatible
        with the geometry of the initial shape. There is no initial
        analysis of errors and they only become evident at the
        construction stage.
        Additionally, in the current software release, the
        following cases are not handled:
        -   the end point of the contour is the point of
        intersection of 4 or more edges of the shape, or
        -   the intersection of the fillet with a face which limits
        the contour is not fully contained in this face.


        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_Build(self, *args)


    def Reset(self, *args):
        """
        Reset(BRepFilletAPI_MakeFillet self)

        Reinitializes this algorithm, thus canceling the effects of the Build function.
        This function allows modifications to be made to the
        contours and fillet parameters in order to rebuild the shape.


        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_Reset(self, *args)


    def Builder(self, *args):
        """
        Builder(BRepFilletAPI_MakeFillet self) -> Handle_TopOpeBRepBuild_HBuilder

        Returns the internal topology building algorithm.

        :rtype: OCC.wrapper.TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_Builder(self, *args)


    def Generated(self, *args):
        """
        Returns the  list   of shapes generated   from the
        shape <EorV>.

        :type EorV: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _BRepFilletAPI.BRepFilletAPI_MakeFillet_Generated(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Modified(self, *args):
        """
        Returns the list  of shapes modified from the shape
        <F>.

        :type F: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _BRepFilletAPI.BRepFilletAPI_MakeFillet_Modified(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsDeleted(self, *args):
        """
        IsDeleted(BRepFilletAPI_MakeFillet self, TopoDS_Shape F) -> Standard_Boolean

        :type F: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_IsDeleted(self, *args)


    def NbSurfaces(self, *args):
        """
        NbSurfaces(BRepFilletAPI_MakeFillet self) -> Standard_Integer

        returns the number of surfaces
        after the shape creation.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_NbSurfaces(self, *args)


    def NewFaces(self, *args):
        """
        Return the faces created for surface <I>.

        :type I: int
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _BRepFilletAPI.BRepFilletAPI_MakeFillet_NewFaces(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Simulate(self, *args):
        """
        Simulate(BRepFilletAPI_MakeFillet self, Standard_Integer const IC)

        :type IC: int

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_Simulate(self, *args)


    def NbSurf(self, *args):
        """
        NbSurf(BRepFilletAPI_MakeFillet self, Standard_Integer const IC) -> Standard_Integer

        :type IC: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_NbSurf(self, *args)


    def Sect(self, *args):
        """
        Sect(BRepFilletAPI_MakeFillet self, Standard_Integer const IC, Standard_Integer const IS) -> Handle_ChFiDS_SecHArray1

        :type IC: int
        :type IS: int
        :rtype: OCC.wrapper.ChFiDS.Handle_ChFiDS_SecHArray1

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_Sect(self, *args)


    def NbFaultyContours(self, *args):
        """
        NbFaultyContours(BRepFilletAPI_MakeFillet self) -> Standard_Integer

        Returns the number of contours where the computation
        of the fillet failed

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_NbFaultyContours(self, *args)


    def FaultyContour(self, *args):
        """
        FaultyContour(BRepFilletAPI_MakeFillet self, Standard_Integer const I) -> Standard_Integer

        for each I in [1.. NbFaultyContours] returns the index IC of
        the contour where the computation of the fillet failed.
        the method NbEdges(IC) gives the number of edges in the contour IC
        the method Edge(IC,ie) gives the edge number ie of the contour IC

        :type I: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_FaultyContour(self, *args)


    def NbComputedSurfaces(self, *args):
        """
        NbComputedSurfaces(BRepFilletAPI_MakeFillet self, Standard_Integer const IC) -> Standard_Integer

        returns the number of surfaces which have been
        computed on the contour IC

        :type IC: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_NbComputedSurfaces(self, *args)


    def ComputedSurface(self, *args):
        """
        ComputedSurface(BRepFilletAPI_MakeFillet self, Standard_Integer const IC, Standard_Integer const IS) -> Handle_Geom_Surface

        returns the surface number IS concerning the contour IC

        :type IC: int
        :type IS: int
        :rtype: OCC.wrapper.Geom.Handle_Geom_Surface

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_ComputedSurface(self, *args)


    def NbFaultyVertices(self, *args):
        """
        NbFaultyVertices(BRepFilletAPI_MakeFillet self) -> Standard_Integer

        returns the number of vertices where the computation failed

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_NbFaultyVertices(self, *args)


    def FaultyVertex(self, *args):
        """
        FaultyVertex(BRepFilletAPI_MakeFillet self, Standard_Integer const IV) -> TopoDS_Vertex

        returns the vertex where the computation failed

        :type IV: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_FaultyVertex(self, *args)


    def HasResult(self, *args):
        """
        HasResult(BRepFilletAPI_MakeFillet self) -> Standard_Boolean

        returns true if a part of the result has been computed
        if the filling in a corner failed a shape with a hole is returned

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_HasResult(self, *args)


    def BadShape(self, *args):
        """
        BadShape(BRepFilletAPI_MakeFillet self) -> TopoDS_Shape

        if (HasResult()) returns the partial result

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_BadShape(self, *args)


    def StripeStatus(self, *args):
        """
        StripeStatus(BRepFilletAPI_MakeFillet self, Standard_Integer const IC) -> ChFiDS_ErrorStatus

        returns the status concerning the contour IC in case of error
        ChFiDS_Ok : the computation is Ok
        ChFiDS_StartsolFailure : the computation can't start, perhaps the
        the radius is too big
        ChFiDS_TwistedSurface : the computation failed because of a twisted
        surface
        ChFiDS_WalkingFailure : there is a problem in the walking
        ChFiDS_Error:  other error different from above

        :type IC: int
        :rtype: OCC.wrapper.ChFiDS.ChFiDS_ErrorStatus

        """
        return _BRepFilletAPI.BRepFilletAPI_MakeFillet_StripeStatus(self, *args)

    __swig_destroy__ = _BRepFilletAPI.delete_BRepFilletAPI_MakeFillet
BRepFilletAPI_MakeFillet_swigregister = _BRepFilletAPI.BRepFilletAPI_MakeFillet_swigregister
BRepFilletAPI_MakeFillet_swigregister(BRepFilletAPI_MakeFillet)



