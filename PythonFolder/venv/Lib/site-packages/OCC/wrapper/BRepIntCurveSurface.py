# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BRepIntCurveSurface')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BRepIntCurveSurface')
    _BRepIntCurveSurface = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepIntCurveSurface', [dirname(__file__)])
        except ImportError:
            import _BRepIntCurveSurface
            return _BRepIntCurveSurface
        try:
            _mod = imp.load_module('_BRepIntCurveSurface', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BRepIntCurveSurface = swig_import_helper()
    del swig_import_helper
else:
    import _BRepIntCurveSurface
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepIntCurveSurface.delete_SwigPyIterator

    def value(self):
        return _BRepIntCurveSurface.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _BRepIntCurveSurface.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _BRepIntCurveSurface.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _BRepIntCurveSurface.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _BRepIntCurveSurface.SwigPyIterator_equal(self, x)

    def copy(self):
        return _BRepIntCurveSurface.SwigPyIterator_copy(self)

    def next(self):
        return _BRepIntCurveSurface.SwigPyIterator_next(self)

    def __next__(self):
        return _BRepIntCurveSurface.SwigPyIterator___next__(self)

    def previous(self):
        return _BRepIntCurveSurface.SwigPyIterator_previous(self)

    def advance(self, n):
        return _BRepIntCurveSurface.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _BRepIntCurveSurface.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _BRepIntCurveSurface.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _BRepIntCurveSurface.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _BRepIntCurveSurface.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _BRepIntCurveSurface.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _BRepIntCurveSurface.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _BRepIntCurveSurface.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BRepIntCurveSurface.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_BRepIntCurveSurface.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _BRepIntCurveSurface.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BRepIntCurveSurface.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BRepIntCurveSurface.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _BRepIntCurveSurface.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _BRepIntCurveSurface.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _BRepIntCurveSurface.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BRepIntCurveSurface.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_BRepIntCurveSurface.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _BRepIntCurveSurface.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BRepIntCurveSurface.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BRepIntCurveSurface.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _BRepIntCurveSurface.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _BRepIntCurveSurface.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _BRepIntCurveSurface.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _BRepIntCurveSurface.ptr_to_number(item)
ptr_to_number = _BRepIntCurveSurface.ptr_to_number

def HashCode(*args):
    return _BRepIntCurveSurface.HashCode(*args)
HashCode = _BRepIntCurveSurface.HashCode

def ptr_equal(a, b):
    return _BRepIntCurveSurface.ptr_equal(a, b)
ptr_equal = _BRepIntCurveSurface.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntCurveSurface
else:
    import IntCurveSurface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Intf
else:
    import Intf
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntAna
else:
    import IntAna
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntSurf
else:
    import IntSurf
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor3d
else:
    import Adaptor3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor2d
else:
    import Adaptor2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import math
else:
    import math
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAdaptor
else:
    import GeomAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
class BRepIntCurveSurface_Inter(object):
    """
    Computes the intersection between a face and a
    curve. To intersect one curve with shape method
    Init(Shape, curve, tTol) should be used.  To
    intersect a few curves with specified shape it is
    necessary to load shape one time using method
    Load(shape, tol) and find intersection points for
    each curve using method Init(curve).  For
    iteration by intersection points method More() and
    Next() should be used.

    Example:
    Inter.Load(shape, tol);
    for( i =1; i <= nbCurves;i++)
    {
    Inter.Init(curve);
    for(  ;Inter.More(); Inter.Next())
    {
    .......
    }
    }
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BRepIntCurveSurface_Inter self) -> BRepIntCurveSurface_Inter

        Empty constructor;


        """
        this = _BRepIntCurveSurface.new_BRepIntCurveSurface_Inter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Load(self, *args):
        """
        Load(BRepIntCurveSurface_Inter self, TopoDS_Shape theShape, Standard_Real const theTol)

        Load the Shape,   and initialize the
        tolerance used for the classification.

        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type theTol: float

        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_Load(self, *args)


    def Init(self, *args):
        """
        Init(BRepIntCurveSurface_Inter self, TopoDS_Shape theShape, GeomAdaptor_Curve theCurve, Standard_Real const theTol)
        Init(BRepIntCurveSurface_Inter self, TopoDS_Shape theShape, gp_Lin theLine, Standard_Real const theTol)
        Init(BRepIntCurveSurface_Inter self, GeomAdaptor_Curve theCurve)

        Method to find intersections of specified curve with loaded shape.

        :type theCurve: OCC.wrapper.GeomAdaptor.GeomAdaptor_Curve

        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_Init(self, *args)


    def More(self, *args):
        """
        More(BRepIntCurveSurface_Inter self) -> Standard_Boolean

        returns True if there is a current face.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_More(self, *args)


    def Next(self, *args):
        """
        Next(BRepIntCurveSurface_Inter self)

        Sets the next intersection point to check.


        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_Next(self, *args)


    def Point(self, *args):
        """
        Point(BRepIntCurveSurface_Inter self) -> IntCurveSurface_IntersectionPoint

        returns the current Intersection point.

        :rtype: OCC.wrapper.IntCurveSurface.IntCurveSurface_IntersectionPoint

        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_Point(self, *args)


    def Pnt(self, *args):
        """
        returns the current geometric Point

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        res = _BRepIntCurveSurface.BRepIntCurveSurface_Inter_Pnt(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def U(self, *args):
        """
        U(BRepIntCurveSurface_Inter self) -> Standard_Real

        returns the U parameter of the current point
        on the current face.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_U(self, *args)


    def V(self, *args):
        """
        V(BRepIntCurveSurface_Inter self) -> Standard_Real

        returns the V parameter of the current point
        on the current face.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_V(self, *args)


    def W(self, *args):
        """
        W(BRepIntCurveSurface_Inter self) -> Standard_Real

        returns the  parameter of the current point
        on the curve.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_W(self, *args)


    def State(self, *args):
        """
        State(BRepIntCurveSurface_Inter self) -> TopAbs_State

        returns the current state  (IN or ON)

        :rtype: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_State(self, *args)


    def Transition(self, *args):
        """
        Transition(BRepIntCurveSurface_Inter self) -> IntCurveSurface_TransitionOnCurve

        returns the transition of the line on the surface (IN or OUT or UNKNOWN)

        :rtype: OCC.wrapper.IntCurveSurface.IntCurveSurface_TransitionOnCurve

        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_Transition(self, *args)


    def Face(self, *args):
        """
        Face(BRepIntCurveSurface_Inter self) -> TopoDS_Face

        returns the current face.

        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _BRepIntCurveSurface.BRepIntCurveSurface_Inter_Face(self, *args)

    __swig_destroy__ = _BRepIntCurveSurface.delete_BRepIntCurveSurface_Inter
BRepIntCurveSurface_Inter_swigregister = _BRepIntCurveSurface.BRepIntCurveSurface_Inter_swigregister
BRepIntCurveSurface_Inter_swigregister(BRepIntCurveSurface_Inter)



