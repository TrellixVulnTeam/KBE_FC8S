# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_FilletSurf')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_FilletSurf')
    _FilletSurf = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_FilletSurf', [dirname(__file__)])
        except ImportError:
            import _FilletSurf
            return _FilletSurf
        try:
            _mod = imp.load_module('_FilletSurf', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _FilletSurf = swig_import_helper()
    del swig_import_helper
else:
    import _FilletSurf
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _FilletSurf.delete_SwigPyIterator

    def value(self):
        return _FilletSurf.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _FilletSurf.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _FilletSurf.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _FilletSurf.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _FilletSurf.SwigPyIterator_equal(self, x)

    def copy(self):
        return _FilletSurf.SwigPyIterator_copy(self)

    def next(self):
        return _FilletSurf.SwigPyIterator_next(self)

    def __next__(self):
        return _FilletSurf.SwigPyIterator___next__(self)

    def previous(self):
        return _FilletSurf.SwigPyIterator_previous(self)

    def advance(self, n):
        return _FilletSurf.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _FilletSurf.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _FilletSurf.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _FilletSurf.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _FilletSurf.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _FilletSurf.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _FilletSurf.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _FilletSurf.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _FilletSurf.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_FilletSurf.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _FilletSurf.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _FilletSurf.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _FilletSurf.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _FilletSurf.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _FilletSurf.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _FilletSurf.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _FilletSurf.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_FilletSurf.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _FilletSurf.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _FilletSurf.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _FilletSurf.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _FilletSurf.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _FilletSurf.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _FilletSurf.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _FilletSurf.ptr_to_number(item)
ptr_to_number = _FilletSurf.ptr_to_number

def HashCode(*args):
    return _FilletSurf.HashCode(*args)
HashCode = _FilletSurf.HashCode

def ptr_equal(a, b):
    return _FilletSurf.ptr_equal(a, b)
ptr_equal = _FilletSurf.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import ChFi3d
else:
    import ChFi3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopOpeBRepBuild
else:
    import TopOpeBRepBuild
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopOpeBRepDS
else:
    import TopOpeBRepDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopOpeBRepTool
else:
    import TopOpeBRepTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopExp
else:
    import TopExp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepClass3d
else:
    import BRepClass3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntCurveSurface
else:
    import IntCurveSurface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Intf
else:
    import Intf
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntAna
else:
    import IntAna
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntSurf
else:
    import IntSurf
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor3d
else:
    import Adaptor3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor2d
else:
    import Adaptor2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import math
else:
    import math
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntCurvesFace
else:
    import IntCurvesFace
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepAdaptor
else:
    import BRepAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2dAdaptor
else:
    import Geom2dAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAdaptor
else:
    import GeomAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepBlend
else:
    import BRepBlend
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Approx
else:
    import Approx
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import AppCont
else:
    import AppCont
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import AppParCurves
else:
    import AppParCurves
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import AdvApprox
else:
    import AdvApprox
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import PLib
else:
    import PLib
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Law
else:
    import Law
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import ChFiDS
else:
    import ChFiDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import AppBlend
else:
    import AppBlend
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Blend
else:
    import Blend
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BlendFunc
else:
    import BlendFunc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Convert
else:
    import Convert
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepTopAdaptor
else:
    import BRepTopAdaptor
del _swig_python_version_info
FilletSurf_TwoExtremityOnEdge = _FilletSurf.FilletSurf_TwoExtremityOnEdge
FilletSurf_OneExtremityOnEdge = _FilletSurf.FilletSurf_OneExtremityOnEdge
FilletSurf_NoExtremityOnEdge = _FilletSurf.FilletSurf_NoExtremityOnEdge
FilletSurf_IsOk = _FilletSurf.FilletSurf_IsOk
FilletSurf_IsNotOk = _FilletSurf.FilletSurf_IsNotOk
FilletSurf_IsPartial = _FilletSurf.FilletSurf_IsPartial
FilletSurf_EmptyList = _FilletSurf.FilletSurf_EmptyList
FilletSurf_EdgeNotG1 = _FilletSurf.FilletSurf_EdgeNotG1
FilletSurf_FacesNotG1 = _FilletSurf.FilletSurf_FacesNotG1
FilletSurf_EdgeNotOnShape = _FilletSurf.FilletSurf_EdgeNotOnShape
FilletSurf_NotSharpEdge = _FilletSurf.FilletSurf_NotSharpEdge
FilletSurf_PbFilletCompute = _FilletSurf.FilletSurf_PbFilletCompute
class FilletSurf_Builder(object):
    """
    API giving the  following  geometric information about fillets
    list of corresponding NUBS surfaces
    for each surface:
    the 2  support faces
    on each face: the 3d curve and the corresponding 2d curve
    the 2d curves on the fillet
    status of start and end section of the fillet
    first and last parameter on edge of the fillet.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FilletSurf_Builder self, TopoDS_Shape S, NCollection_List_TopoDS_Shape E, Standard_Real const R, Standard_Real const Ta=1.0e-2, Standard_Real const Tapp3d=1.0e-4, Standard_Real const Tapp2d=1.0e-5) -> FilletSurf_Builder

        initialize  of the informations necessary for  the
        computation of  the fillet on the
        Shape S from a list of edges E and a radius R.

        Ta is the angular tolerance
        Tapp3d is the 3d approximation tolerance
        Tapp2d is the 2d approximation tolerance

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type E: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type R: float
        :type Ta: float
        :type Tapp3d: float
        :type Tapp2d: float

        """
        this = _FilletSurf.new_FilletSurf_Builder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Perform(self, *args):
        """
        Perform(FilletSurf_Builder self)

        ---Purpose computation  of the fillet (list of NUBS)


        """
        return _FilletSurf.FilletSurf_Builder_Perform(self, *args)


    def Simulate(self, *args):
        """Simulate(FilletSurf_Builder self)"""
        return _FilletSurf.FilletSurf_Builder_Simulate(self, *args)


    def IsDone(self, *args):
        """
        IsDone(FilletSurf_Builder self) -> FilletSurf_StatusDone

        gives the status about the computation of the fillet
        returns:
        IsOK :no problem during the computation
        IsNotOk: no result is produced
        IsPartial: the result is partial

        :rtype: OCC.wrapper.FilletSurf.FilletSurf_StatusDone

        """
        return _FilletSurf.FilletSurf_Builder_IsDone(self, *args)


    def StatusError(self, *args):
        """
        StatusError(FilletSurf_Builder self) -> FilletSurf_ErrorTypeStatus

        gives    informations     about  error   status     if
        IsDone=IsNotOk
        returns
        EdgeNotG1: the edges are not G1
        FacesNotG1 : two connected faces on a same support are
        not  G1
        EdgeNotOnShape: the  edge   is  not on  shape
        NotSharpEdge: the  edge is not sharp
        PbFilletCompute: problem during the computation of the fillet

        :rtype: OCC.wrapper.FilletSurf.FilletSurf_ErrorTypeStatus

        """
        return _FilletSurf.FilletSurf_Builder_StatusError(self, *args)


    def NbSurface(self, *args):
        """
        NbSurface(FilletSurf_Builder self) -> Standard_Integer

        gives the number of NUBS surfaces  of the Fillet.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FilletSurf.FilletSurf_Builder_NbSurface(self, *args)


    def SurfaceFillet(self, *args):
        """
        gives the NUBS surface of index Index.

        :type Index: int
        :rtype: OCC.wrapper.Geom.Handle_Geom_Surface

        """
        res = _FilletSurf.FilletSurf_Builder_SurfaceFillet(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TolApp3d(self, *args):
        """
        TolApp3d(FilletSurf_Builder self, Standard_Integer const Index) -> Standard_Real

        gives  the  3d  tolerance reached during approximation
        of surface of index Index

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _FilletSurf.FilletSurf_Builder_TolApp3d(self, *args)


    def SupportFace1(self, *args):
        """
        SupportFace1(FilletSurf_Builder self, Standard_Integer const Index) -> TopoDS_Face

        gives the first support  face relative to SurfaceFillet(Index);

        :type Index: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _FilletSurf.FilletSurf_Builder_SupportFace1(self, *args)


    def SupportFace2(self, *args):
        """
        SupportFace2(FilletSurf_Builder self, Standard_Integer const Index) -> TopoDS_Face

        gives the second support  face relative to SurfaceFillet(Index);

        :type Index: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _FilletSurf.FilletSurf_Builder_SupportFace2(self, *args)


    def CurveOnFace1(self, *args):
        """
        gives  the 3d curve  of SurfaceFillet(Index)  on SupportFace1(Index)

        :type Index: int
        :rtype: OCC.wrapper.Geom.Handle_Geom_Curve

        """
        res = _FilletSurf.FilletSurf_Builder_CurveOnFace1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def CurveOnFace2(self, *args):
        """
        gives the     3d  curve of  SurfaceFillet(Index) on SupportFace2(Index)

        :type Index: int
        :rtype: OCC.wrapper.Geom.Handle_Geom_Curve

        """
        res = _FilletSurf.FilletSurf_Builder_CurveOnFace2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PCurveOnFace1(self, *args):
        """
        gives the  PCurve associated to CurvOnSup1(Index)  on the support face

        :type Index: int
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        res = _FilletSurf.FilletSurf_Builder_PCurveOnFace1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PCurve1OnFillet(self, *args):
        """
        gives the PCurve associated to CurveOnFace1(Index) on the Fillet

        :type Index: int
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        res = _FilletSurf.FilletSurf_Builder_PCurve1OnFillet(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PCurveOnFace2(self, *args):
        """
        gives the PCurve  associated to CurveOnSup2(Index) on  the  support face

        :type Index: int
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        res = _FilletSurf.FilletSurf_Builder_PCurveOnFace2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PCurve2OnFillet(self, *args):
        """
        gives the PCurve  associated to CurveOnSup2(Index) on  the  fillet

        :type Index: int
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        res = _FilletSurf.FilletSurf_Builder_PCurve2OnFillet(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FirstParameter(self, *args):
        """
        FirstParameter(FilletSurf_Builder self) -> Standard_Real

        gives the parameter of the fillet  on the first edge.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _FilletSurf.FilletSurf_Builder_FirstParameter(self, *args)


    def LastParameter(self, *args):
        """
        LastParameter(FilletSurf_Builder self) -> Standard_Real

        gives the  parameter of the fillet  on the last edge

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _FilletSurf.FilletSurf_Builder_LastParameter(self, *args)


    def StartSectionStatus(self, *args):
        """
        StartSectionStatus(FilletSurf_Builder self) -> FilletSurf_StatusType

        :rtype: OCC.wrapper.FilletSurf.FilletSurf_StatusType

        """
        return _FilletSurf.FilletSurf_Builder_StartSectionStatus(self, *args)


    def EndSectionStatus(self, *args):
        """
        EndSectionStatus(FilletSurf_Builder self) -> FilletSurf_StatusType

        :rtype: OCC.wrapper.FilletSurf.FilletSurf_StatusType

        """
        return _FilletSurf.FilletSurf_Builder_EndSectionStatus(self, *args)


    def NbSection(self, *args):
        """
        NbSection(FilletSurf_Builder self, Standard_Integer const IndexSurf) -> Standard_Integer

        :type IndexSurf: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FilletSurf.FilletSurf_Builder_NbSection(self, *args)


    def Section(self, *args):
        """
        Section(FilletSurf_Builder self, Standard_Integer const IndexSurf, Standard_Integer const IndexSec, Handle_Geom_TrimmedCurve Circ)

        :type IndexSurf: int
        :type IndexSec: int
        :type Circ: OCC.wrapper.Geom.Handle_Geom_TrimmedCurve

        """
        return _FilletSurf.FilletSurf_Builder_Section(self, *args)

    __swig_destroy__ = _FilletSurf.delete_FilletSurf_Builder
FilletSurf_Builder_swigregister = _FilletSurf.FilletSurf_Builder_swigregister
FilletSurf_Builder_swigregister(FilletSurf_Builder)

class FilletSurf_InternalBuilder(ChFi3d.ChFi3d_FilBuilder):
    """
    This class is private. It is  used by the class Builder
    from FilletSurf. It computes geometric information about fillets.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FilletSurf_InternalBuilder self, TopoDS_Shape S, ChFi3d_FilletShape const FShape=ChFi3d_Polynomial, Standard_Real const Ta=1.0e-2, Standard_Real const Tapp3d=1.0e-4, Standard_Real const Tapp2d=1.0e-5) -> FilletSurf_InternalBuilder

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type FShape: OCC.wrapper.ChFi3d.ChFi3d_FilletShape
        :type Ta: float
        :type Tapp3d: float
        :type Tapp2d: float

        """
        this = _FilletSurf.new_FilletSurf_InternalBuilder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Add(self, *args):
        """
        Add(FilletSurf_InternalBuilder self, NCollection_List_TopoDS_Shape E, Standard_Real const R) -> Standard_Integer

        Initializes the contour with a list of Edges
        0 : no problem
        1 : empty list
        2 : the edges are not G1
        3 : two connected faces on a same support are not G1
        4 : the  edge   is  not on  shape
        5 :  NotSharpEdge: the  edge is not sharp

        :type E: OCC.wrapper.TopTools.TopTools_ListOfShape
        :type R: float
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FilletSurf.FilletSurf_InternalBuilder_Add(self, *args)


    def Perform(self, *args):
        """Perform(FilletSurf_InternalBuilder self)"""
        return _FilletSurf.FilletSurf_InternalBuilder_Perform(self, *args)


    def Done(self, *args):
        """
        Done(FilletSurf_InternalBuilder self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _FilletSurf.FilletSurf_InternalBuilder_Done(self, *args)


    def NbSurface(self, *args):
        """
        NbSurface(FilletSurf_InternalBuilder self) -> Standard_Integer

        gives the number of NUBS surfaces  of the Fillet.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FilletSurf.FilletSurf_InternalBuilder_NbSurface(self, *args)


    def SurfaceFillet(self, *args):
        """
        gives the NUBS surface of index Index.

        :type Index: int
        :rtype: OCC.wrapper.Geom.Handle_Geom_Surface

        """
        res = _FilletSurf.FilletSurf_InternalBuilder_SurfaceFillet(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TolApp3d(self, *args):
        """
        TolApp3d(FilletSurf_InternalBuilder self, Standard_Integer const Index) -> Standard_Real

        gives  the  3d  tolerance reached during approximation
        of the surface of index Index

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _FilletSurf.FilletSurf_InternalBuilder_TolApp3d(self, *args)


    def SupportFace1(self, *args):
        """
        SupportFace1(FilletSurf_InternalBuilder self, Standard_Integer const Index) -> TopoDS_Face

        gives the first support  face relative to SurfaceFillet(Index);

        :type Index: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _FilletSurf.FilletSurf_InternalBuilder_SupportFace1(self, *args)


    def SupportFace2(self, *args):
        """
        SupportFace2(FilletSurf_InternalBuilder self, Standard_Integer const Index) -> TopoDS_Face

        gives the second support  face relative to SurfaceFillet(Index);

        :type Index: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _FilletSurf.FilletSurf_InternalBuilder_SupportFace2(self, *args)


    def CurveOnFace1(self, *args):
        """
        gives  the 3d curve  of SurfaceFillet(Index)  on SupportFace1(Index)

        :type Index: int
        :rtype: OCC.wrapper.Geom.Handle_Geom_Curve

        """
        res = _FilletSurf.FilletSurf_InternalBuilder_CurveOnFace1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def CurveOnFace2(self, *args):
        """
        gives the     3d  curve of  SurfaceFillet(Index) on SupportFace2(Index)

        :type Index: int
        :rtype: OCC.wrapper.Geom.Handle_Geom_Curve

        """
        res = _FilletSurf.FilletSurf_InternalBuilder_CurveOnFace2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PCurveOnFace1(self, *args):
        """
        gives the  PCurve associated to CurvOnSup1(Index)  on the support face

        :type Index: int
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        res = _FilletSurf.FilletSurf_InternalBuilder_PCurveOnFace1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PCurve1OnFillet(self, *args):
        """
        gives the PCurve associated to CurveOnFace1(Index) on the Fillet

        :type Index: int
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        res = _FilletSurf.FilletSurf_InternalBuilder_PCurve1OnFillet(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PCurveOnFace2(self, *args):
        """
        gives the PCurve  associated to CurveOnSup2(Index) on  the  support face

        :type Index: int
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        res = _FilletSurf.FilletSurf_InternalBuilder_PCurveOnFace2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PCurve2OnFillet(self, *args):
        """
        gives the PCurve  associated to CurveOnSup2(Index) on  the  fillet

        :type Index: int
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        res = _FilletSurf.FilletSurf_InternalBuilder_PCurve2OnFillet(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FirstParameter(self, *args):
        """
        FirstParameter(FilletSurf_InternalBuilder self) -> Standard_Real

        gives the parameter of the fillet  on the first edge.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _FilletSurf.FilletSurf_InternalBuilder_FirstParameter(self, *args)


    def LastParameter(self, *args):
        """
        LastParameter(FilletSurf_InternalBuilder self) -> Standard_Real

        gives the  parameter of the fillet  on the last edge

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _FilletSurf.FilletSurf_InternalBuilder_LastParameter(self, *args)


    def StartSectionStatus(self, *args):
        """
        StartSectionStatus(FilletSurf_InternalBuilder self) -> FilletSurf_StatusType

        :rtype: OCC.wrapper.FilletSurf.FilletSurf_StatusType

        """
        return _FilletSurf.FilletSurf_InternalBuilder_StartSectionStatus(self, *args)


    def EndSectionStatus(self, *args):
        """
        EndSectionStatus(FilletSurf_InternalBuilder self) -> FilletSurf_StatusType

        :rtype: OCC.wrapper.FilletSurf.FilletSurf_StatusType

        """
        return _FilletSurf.FilletSurf_InternalBuilder_EndSectionStatus(self, *args)


    def Simulate(self, *args):
        """
        Simulate(FilletSurf_InternalBuilder self)

        :type IC: int

        """
        return _FilletSurf.FilletSurf_InternalBuilder_Simulate(self, *args)


    def NbSection(self, *args):
        """
        NbSection(FilletSurf_InternalBuilder self, Standard_Integer const IndexSurf) -> Standard_Integer

        :type IndexSurf: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FilletSurf.FilletSurf_InternalBuilder_NbSection(self, *args)


    def Section(self, *args):
        """
        Section(FilletSurf_InternalBuilder self, Standard_Integer const IndexSurf, Standard_Integer const IndexSec, Handle_Geom_TrimmedCurve Circ)

        :type IndexSurf: int
        :type IndexSec: int
        :type Circ: OCC.wrapper.Geom.Handle_Geom_TrimmedCurve

        """
        return _FilletSurf.FilletSurf_InternalBuilder_Section(self, *args)

    __swig_destroy__ = _FilletSurf.delete_FilletSurf_InternalBuilder
FilletSurf_InternalBuilder_swigregister = _FilletSurf.FilletSurf_InternalBuilder_swigregister
FilletSurf_InternalBuilder_swigregister(FilletSurf_InternalBuilder)



