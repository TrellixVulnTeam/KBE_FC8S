# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_UnitsMethods')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_UnitsMethods')
    _UnitsMethods = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_UnitsMethods', [dirname(__file__)])
        except ImportError:
            import _UnitsMethods
            return _UnitsMethods
        try:
            _mod = imp.load_module('_UnitsMethods', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _UnitsMethods = swig_import_helper()
    del swig_import_helper
else:
    import _UnitsMethods
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _UnitsMethods.delete_SwigPyIterator

    def value(self):
        return _UnitsMethods.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _UnitsMethods.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _UnitsMethods.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _UnitsMethods.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _UnitsMethods.SwigPyIterator_equal(self, x)

    def copy(self):
        return _UnitsMethods.SwigPyIterator_copy(self)

    def next(self):
        return _UnitsMethods.SwigPyIterator_next(self)

    def __next__(self):
        return _UnitsMethods.SwigPyIterator___next__(self)

    def previous(self):
        return _UnitsMethods.SwigPyIterator_previous(self)

    def advance(self, n):
        return _UnitsMethods.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _UnitsMethods.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _UnitsMethods.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _UnitsMethods.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _UnitsMethods.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _UnitsMethods.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _UnitsMethods.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _UnitsMethods.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _UnitsMethods.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_UnitsMethods.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _UnitsMethods.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _UnitsMethods.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _UnitsMethods.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _UnitsMethods.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _UnitsMethods.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _UnitsMethods.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _UnitsMethods.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_UnitsMethods.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _UnitsMethods.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _UnitsMethods.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _UnitsMethods.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _UnitsMethods.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _UnitsMethods.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _UnitsMethods.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _UnitsMethods.ptr_to_number(item)
ptr_to_number = _UnitsMethods.ptr_to_number

def HashCode(*args):
    return _UnitsMethods.HashCode(*args)
HashCode = _UnitsMethods.HashCode

def ptr_equal(a, b):
    return _UnitsMethods.ptr_equal(a, b)
ptr_equal = _UnitsMethods.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
class UnitsMethods_(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def InitializeFactors(*args):
        """
        InitializeFactors(Standard_Real const LengthFactor, Standard_Real const PlaneAngleFactor, Standard_Real const SolidAngleFactor)

        Initializes the 3 factors for the conversion of
        units

        :type LengthFactor: float
        :type PlaneAngleFactor: float
        :type SolidAngleFactor: float

        """
        return _UnitsMethods.UnitsMethods__InitializeFactors(*args)

    InitializeFactors = staticmethod(InitializeFactors)

    def LengthFactor(*args):
        """
        LengthFactor() -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _UnitsMethods.UnitsMethods__LengthFactor(*args)

    LengthFactor = staticmethod(LengthFactor)

    def PlaneAngleFactor(*args):
        """
        PlaneAngleFactor() -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _UnitsMethods.UnitsMethods__PlaneAngleFactor(*args)

    PlaneAngleFactor = staticmethod(PlaneAngleFactor)

    def SolidAngleFactor(*args):
        """
        SolidAngleFactor() -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _UnitsMethods.UnitsMethods__SolidAngleFactor(*args)

    SolidAngleFactor = staticmethod(SolidAngleFactor)

    def Set3dConversion(*args):
        """
        Set3dConversion(Standard_Boolean const B)

        :type B: bool

        """
        return _UnitsMethods.UnitsMethods__Set3dConversion(*args)

    Set3dConversion = staticmethod(Set3dConversion)

    def Convert3d(*args):
        """
        Convert3d() -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _UnitsMethods.UnitsMethods__Convert3d(*args)

    Convert3d = staticmethod(Convert3d)

    def RadianToDegree(*args):
        """
        RadianToDegree(Handle_Geom2d_Curve C, Handle_Geom_Surface S) -> Handle_Geom2d_Curve

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
        :type S: OCC.wrapper.Geom.Handle_Geom_Surface
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _UnitsMethods.UnitsMethods__RadianToDegree(*args)

    RadianToDegree = staticmethod(RadianToDegree)

    def DegreeToRadian(*args):
        """
        DegreeToRadian(Handle_Geom2d_Curve C, Handle_Geom_Surface S) -> Handle_Geom2d_Curve

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
        :type S: OCC.wrapper.Geom.Handle_Geom_Surface
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _UnitsMethods.UnitsMethods__DegreeToRadian(*args)

    DegreeToRadian = staticmethod(DegreeToRadian)

    def MirrorPCurve(*args):
        """
        MirrorPCurve(Handle_Geom2d_Curve C) -> Handle_Geom2d_Curve

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _UnitsMethods.UnitsMethods__MirrorPCurve(*args)

    MirrorPCurve = staticmethod(MirrorPCurve)

    def GetLengthFactorValue(*args):
        """
        GetLengthFactorValue(Standard_Integer const param) -> Standard_Real

        Returns value of unit encoded by parameter param
        (integer value denoting unit, as described in IGES
        standard) in millimeters

        :type param: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _UnitsMethods.UnitsMethods__GetLengthFactorValue(*args)

    GetLengthFactorValue = staticmethod(GetLengthFactorValue)

    def GetCasCadeLengthUnit(*args):
        """
        GetCasCadeLengthUnit() -> Standard_Real

        Returns value of current internal unit for CASCADE
        in millemeters

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _UnitsMethods.UnitsMethods__GetCasCadeLengthUnit(*args)

    GetCasCadeLengthUnit = staticmethod(GetCasCadeLengthUnit)

    def SetCasCadeLengthUnit(*args):
        """
        SetCasCadeLengthUnit(Standard_Integer const param)

        Sets value of current internal unit for CASCADE
        by parameter param (integer value denoting unit,
        as described in IGES standard)
        GetCasCadeLengthUnit() will then return value
        equal to GetLengthFactorValue(param)

        :type param: int

        """
        return _UnitsMethods.UnitsMethods__SetCasCadeLengthUnit(*args)

    SetCasCadeLengthUnit = staticmethod(SetCasCadeLengthUnit)

    def __init__(self):
        this = _UnitsMethods.new_UnitsMethods_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _UnitsMethods.delete_UnitsMethods_
UnitsMethods__swigregister = _UnitsMethods.UnitsMethods__swigregister
UnitsMethods__swigregister(UnitsMethods_)

def UnitsMethods__InitializeFactors(*args):
    """
    UnitsMethods__InitializeFactors(Standard_Real const LengthFactor, Standard_Real const PlaneAngleFactor, Standard_Real const SolidAngleFactor)

    Initializes the 3 factors for the conversion of
    units

    :type LengthFactor: float
    :type PlaneAngleFactor: float
    :type SolidAngleFactor: float

    """
    return _UnitsMethods.UnitsMethods__InitializeFactors(*args)

def UnitsMethods__LengthFactor(*args):
    """
    UnitsMethods__LengthFactor() -> Standard_Real

    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _UnitsMethods.UnitsMethods__LengthFactor(*args)

def UnitsMethods__PlaneAngleFactor(*args):
    """
    UnitsMethods__PlaneAngleFactor() -> Standard_Real

    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _UnitsMethods.UnitsMethods__PlaneAngleFactor(*args)

def UnitsMethods__SolidAngleFactor(*args):
    """
    UnitsMethods__SolidAngleFactor() -> Standard_Real

    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _UnitsMethods.UnitsMethods__SolidAngleFactor(*args)

def UnitsMethods__Set3dConversion(*args):
    """
    UnitsMethods__Set3dConversion(Standard_Boolean const B)

    :type B: bool

    """
    return _UnitsMethods.UnitsMethods__Set3dConversion(*args)

def UnitsMethods__Convert3d(*args):
    """
    UnitsMethods__Convert3d() -> Standard_Boolean

    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _UnitsMethods.UnitsMethods__Convert3d(*args)

def UnitsMethods__RadianToDegree(*args):
    """
    UnitsMethods__RadianToDegree(Handle_Geom2d_Curve C, Handle_Geom_Surface S) -> Handle_Geom2d_Curve

    :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
    :type S: OCC.wrapper.Geom.Handle_Geom_Surface
    :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

    """
    return _UnitsMethods.UnitsMethods__RadianToDegree(*args)

def UnitsMethods__DegreeToRadian(*args):
    """
    UnitsMethods__DegreeToRadian(Handle_Geom2d_Curve C, Handle_Geom_Surface S) -> Handle_Geom2d_Curve

    :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
    :type S: OCC.wrapper.Geom.Handle_Geom_Surface
    :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

    """
    return _UnitsMethods.UnitsMethods__DegreeToRadian(*args)

def UnitsMethods__MirrorPCurve(*args):
    """
    UnitsMethods__MirrorPCurve(Handle_Geom2d_Curve C) -> Handle_Geom2d_Curve

    :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
    :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

    """
    return _UnitsMethods.UnitsMethods__MirrorPCurve(*args)

def UnitsMethods__GetLengthFactorValue(*args):
    """
    UnitsMethods__GetLengthFactorValue(Standard_Integer const param) -> Standard_Real

    Returns value of unit encoded by parameter param
    (integer value denoting unit, as described in IGES
    standard) in millimeters

    :type param: int
    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _UnitsMethods.UnitsMethods__GetLengthFactorValue(*args)

def UnitsMethods__GetCasCadeLengthUnit(*args):
    """
    UnitsMethods__GetCasCadeLengthUnit() -> Standard_Real

    Returns value of current internal unit for CASCADE
    in millemeters

    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _UnitsMethods.UnitsMethods__GetCasCadeLengthUnit(*args)

def UnitsMethods__SetCasCadeLengthUnit(*args):
    """
    UnitsMethods__SetCasCadeLengthUnit(Standard_Integer const param)

    Sets value of current internal unit for CASCADE
    by parameter param (integer value denoting unit,
    as described in IGES standard)
    GetCasCadeLengthUnit() will then return value
    equal to GetLengthFactorValue(param)

    :type param: int

    """
    return _UnitsMethods.UnitsMethods__SetCasCadeLengthUnit(*args)



