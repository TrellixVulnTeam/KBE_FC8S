# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_StdLPersistent')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_StdLPersistent')
    _StdLPersistent = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StdLPersistent', [dirname(__file__)])
        except ImportError:
            import _StdLPersistent
            return _StdLPersistent
        try:
            _mod = imp.load_module('_StdLPersistent', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _StdLPersistent = swig_import_helper()
    del swig_import_helper
else:
    import _StdLPersistent
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StdLPersistent.delete_SwigPyIterator

    def value(self):
        return _StdLPersistent.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _StdLPersistent.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _StdLPersistent.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _StdLPersistent.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _StdLPersistent.SwigPyIterator_equal(self, x)

    def copy(self):
        return _StdLPersistent.SwigPyIterator_copy(self)

    def next(self):
        return _StdLPersistent.SwigPyIterator_next(self)

    def __next__(self):
        return _StdLPersistent.SwigPyIterator___next__(self)

    def previous(self):
        return _StdLPersistent.SwigPyIterator_previous(self)

    def advance(self, n):
        return _StdLPersistent.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _StdLPersistent.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _StdLPersistent.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _StdLPersistent.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _StdLPersistent.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _StdLPersistent.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _StdLPersistent.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _StdLPersistent.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _StdLPersistent.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_StdLPersistent.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _StdLPersistent.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _StdLPersistent.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StdLPersistent.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _StdLPersistent.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _StdLPersistent.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _StdLPersistent.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _StdLPersistent.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_StdLPersistent.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _StdLPersistent.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _StdLPersistent.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StdLPersistent.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _StdLPersistent.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _StdLPersistent.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _StdLPersistent.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _StdLPersistent.ptr_to_number(item)
ptr_to_number = _StdLPersistent.ptr_to_number

def HashCode(*args):
    return _StdLPersistent.HashCode(*args)
HashCode = _StdLPersistent.HashCode

def ptr_equal(a, b):
    return _StdLPersistent.ptr_equal(a, b)
ptr_equal = _StdLPersistent.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDF
else:
    import TDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TFunction
else:
    import TFunction
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDocStd
else:
    import TDocStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import CDF
else:
    import CDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import CDM
else:
    import CDM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Resource
else:
    import Resource
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import PCDM
else:
    import PCDM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import LDOM
else:
    import LDOM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Storage
else:
    import Storage
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StdObjMgt
else:
    import StdObjMgt
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDataStd
else:
    import TDataStd
del _swig_python_version_info
class StdLPersistent_Function(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Read(self, *args):
        """
        Read(StdLPersistent_Function self, StdObjMgt_ReadData theReadData)

        Read persistent data from a file.

        :type theReadData: OCC.wrapper.StdObjMgt.StdObjMgt_ReadData

        """
        return _StdLPersistent.StdLPersistent_Function_Read(self, *args)


    def Write(self, *args):
        """
        Write(StdLPersistent_Function self, StdObjMgt_WriteData theWriteData)

        Write persistent data to a file.

        :type theWriteData: OCC.wrapper.StdObjMgt.StdObjMgt_WriteData

        """
        return _StdLPersistent.StdLPersistent_Function_Write(self, *args)


    def PChildren(self, *args):
        """
        PChildren(StdLPersistent_Function self, NCollection_Sequence_Handle_StdObjMgt_Persistent arg2)

        Gets persistent child objects

        :type : SequenceOfPersistent

        """
        return _StdLPersistent.StdLPersistent_Function_PChildren(self, *args)


    def PName(self, *args):
        """
        PName(StdLPersistent_Function self) -> Standard_CString

        Returns persistent type name

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StdLPersistent.StdLPersistent_Function_PName(self, *args)


    def Import(self, *args):
        """
        Import(StdLPersistent_Function self, Handle_TFunction_Function theAttribute)

        Import transient attribuite from the persistent data.

        :type theAttribute: OCC.wrapper.TFunction.Handle_TFunction_Function

        """
        return _StdLPersistent.StdLPersistent_Function_Import(self, *args)


    def __init__(self):
        this = _StdLPersistent.new_StdLPersistent_Function()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StdLPersistent.delete_StdLPersistent_Function
StdLPersistent_Function_swigregister = _StdLPersistent.StdLPersistent_Function_swigregister
StdLPersistent_Function_swigregister(StdLPersistent_Function)

class StdLPersistent_Document(StdObjMgt.StdObjMgt_Persistent):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StdLPersistent_Document
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StdLPersistent_Document(self) 
            return h


    def Read(self, *args):
        """
        Read(StdLPersistent_Document self, StdObjMgt_ReadData theReadData)

        Read persistent data from a file.

        :type theReadData: OCC.wrapper.StdObjMgt.StdObjMgt_ReadData

        """
        return _StdLPersistent.StdLPersistent_Document_Read(self, *args)


    def Write(self, *args):
        """
        Write(StdLPersistent_Document self, StdObjMgt_WriteData theWriteData)

        Read persistent data from a file.

        :type theWriteData: OCC.wrapper.StdObjMgt.StdObjMgt_WriteData

        """
        return _StdLPersistent.StdLPersistent_Document_Write(self, *args)


    def PChildren(self, *args):
        """
        PChildren(StdLPersistent_Document self, NCollection_Sequence_Handle_StdObjMgt_Persistent arg2)

        Gets persistent child objects

        :type : SequenceOfPersistent

        """
        return _StdLPersistent.StdLPersistent_Document_PChildren(self, *args)


    def PName(self, *args):
        """
        PName(StdLPersistent_Document self) -> Standard_CString

        Returns persistent type name

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StdLPersistent.StdLPersistent_Document_PName(self, *args)


    def ImportDocument(self, *args):
        """
        ImportDocument(StdLPersistent_Document self, Handle_TDocStd_Document theDocument)

        Import transient document from the persistent data.

        :type theDocument: OCC.wrapper.TDocStd.Handle_TDocStd_Document

        """
        return _StdLPersistent.StdLPersistent_Document_ImportDocument(self, *args)


    def __init__(self):
        this = _StdLPersistent.new_StdLPersistent_Document()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle



    __swig_destroy__ = _StdLPersistent.delete_StdLPersistent_Document
StdLPersistent_Document_swigregister = _StdLPersistent.StdLPersistent_Document_swigregister
StdLPersistent_Document_swigregister(StdLPersistent_Document)

class StdLPersistent_Void(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _StdLPersistent.new_StdLPersistent_Void()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StdLPersistent.delete_StdLPersistent_Void
StdLPersistent_Void_swigregister = _StdLPersistent.StdLPersistent_Void_swigregister
StdLPersistent_Void_swigregister(StdLPersistent_Void)

class StdLPersistent_HArray2OfPersistent(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StdLPersistent_HArray2OfPersistent
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StdLPersistent_HArray2OfPersistent(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StdLPersistent_HArray2OfPersistent self, Standard_Integer const theRowLow, Standard_Integer const theRowUpp, Standard_Integer const theColLow, Standard_Integer const theColUpp) -> StdLPersistent_HArray2OfPersistent
        __init__(StdLPersistent_HArray2OfPersistent self, Standard_Integer const theRowLow, Standard_Integer const theRowUpp, Standard_Integer const theColLow, Standard_Integer const theColUpp, NCollection_Array2< handle< StdObjMgt_Persistent > >::value_type const & theValue) -> StdLPersistent_HArray2OfPersistent
        __init__(StdLPersistent_HArray2OfPersistent self, NCollection_Array2_Handle_StdObjMgt_Persistent theOther) -> StdLPersistent_HArray2OfPersistent

        :type theOther: OCC.wrapper.StdLPersistent.NCollection_Array2_Handle_StdObjMgt_Persistent
        :rtype: OCC.wrapper.StdLPersistent.NCollection_Array2_Handle_StdObjMgt_Persistent

        """
        this = _StdLPersistent.new_StdLPersistent_HArray2OfPersistent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array2(self, *args):
        """
        :rtype: OCC.wrapper.StdLPersistent.NCollection_Array2_Handle_StdObjMgt_Persistent

        """
        res = _StdLPersistent.StdLPersistent_HArray2OfPersistent_Array2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray2(self, *args):
        """
        ChangeArray2(StdLPersistent_HArray2OfPersistent self) -> NCollection_Array2_Handle_StdObjMgt_Persistent

        :rtype: OCC.wrapper.StdLPersistent.NCollection_Array2_Handle_StdObjMgt_Persistent

        """
        return _StdLPersistent.StdLPersistent_HArray2OfPersistent_ChangeArray2(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StdLPersistent.StdLPersistent_HArray2OfPersistent_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StdLPersistent.StdLPersistent_HArray2OfPersistent_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdLPersistent.StdLPersistent_HArray2OfPersistent_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StdLPersistent.delete_StdLPersistent_HArray2OfPersistent
StdLPersistent_HArray2OfPersistent_swigregister = _StdLPersistent.StdLPersistent_HArray2OfPersistent_swigregister
StdLPersistent_HArray2OfPersistent_swigregister(StdLPersistent_HArray2OfPersistent)

def StdLPersistent_HArray2OfPersistent_get_type_name(*args):
    """
    StdLPersistent_HArray2OfPersistent_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StdLPersistent.StdLPersistent_HArray2OfPersistent_get_type_name(*args)

def StdLPersistent_HArray2OfPersistent_get_type_descriptor(*args):
    """
    StdLPersistent_HArray2OfPersistent_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StdLPersistent.StdLPersistent_HArray2OfPersistent_get_type_descriptor(*args)

class StdLPersistent_XLink(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Read(self, *args):
        """
        Read(StdLPersistent_XLink self, StdObjMgt_ReadData theReadData)

        Read persistent data from a file.

        :type theReadData: OCC.wrapper.StdObjMgt.StdObjMgt_ReadData

        """
        return _StdLPersistent.StdLPersistent_XLink_Read(self, *args)


    def Write(self, *args):
        """
        Write(StdLPersistent_XLink self, StdObjMgt_WriteData theWriteData)

        Write persistent data to a file.

        :type theWriteData: OCC.wrapper.StdObjMgt.StdObjMgt_WriteData

        """
        return _StdLPersistent.StdLPersistent_XLink_Write(self, *args)


    def PChildren(self, *args):
        """
        PChildren(StdLPersistent_XLink self, NCollection_Sequence_Handle_StdObjMgt_Persistent theChildren)

        Gets persistent child objects

        :type theChildren: SequenceOfPersistent

        """
        return _StdLPersistent.StdLPersistent_XLink_PChildren(self, *args)


    def PName(self, *args):
        """
        PName(StdLPersistent_XLink self) -> Standard_CString

        Returns persistent type name

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StdLPersistent.StdLPersistent_XLink_PName(self, *args)


    def Import(self, *args):
        """
        Import(StdLPersistent_XLink self, Handle_TDocStd_XLink theAttribute)

        Import transient attribuite from the persistent data.

        :type theAttribute: OCC.wrapper.TDocStd.Handle_TDocStd_XLink

        """
        return _StdLPersistent.StdLPersistent_XLink_Import(self, *args)


    def __init__(self):
        this = _StdLPersistent.new_StdLPersistent_XLink()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StdLPersistent.delete_StdLPersistent_XLink
StdLPersistent_XLink_swigregister = _StdLPersistent.StdLPersistent_XLink_swigregister
StdLPersistent_XLink_swigregister(StdLPersistent_XLink)

class StdLPersistent_Dependency(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _StdLPersistent.new_StdLPersistent_Dependency()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StdLPersistent.delete_StdLPersistent_Dependency
StdLPersistent_Dependency_swigregister = _StdLPersistent.StdLPersistent_Dependency_swigregister
StdLPersistent_Dependency_swigregister(StdLPersistent_Dependency)

class StdLPersistent_Collection(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _StdLPersistent.new_StdLPersistent_Collection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StdLPersistent.delete_StdLPersistent_Collection
StdLPersistent_Collection_swigregister = _StdLPersistent.StdLPersistent_Collection_swigregister
StdLPersistent_Collection_swigregister(StdLPersistent_Collection)

class StdLPersistent_HArray1OfPersistent(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StdLPersistent_HArray1OfPersistent
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StdLPersistent_HArray1OfPersistent(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StdLPersistent_HArray1OfPersistent self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StdLPersistent_HArray1OfPersistent
        __init__(StdLPersistent_HArray1OfPersistent self, Standard_Integer const theLower, Standard_Integer const theUpper, NCollection_Array1< handle< StdObjMgt_Persistent > >::value_type const & theValue) -> StdLPersistent_HArray1OfPersistent
        __init__(StdLPersistent_HArray1OfPersistent self, NCollection_Array1_Handle_StdObjMgt_Persistent theOther) -> StdLPersistent_HArray1OfPersistent

        :type theOther: OCC.wrapper.StdLPersistent.NCollection_Array1_Handle_StdObjMgt_Persistent
        :rtype: OCC.wrapper.StdLPersistent.NCollection_Array1_Handle_StdObjMgt_Persistent

        """
        this = _StdLPersistent.new_StdLPersistent_HArray1OfPersistent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StdLPersistent.NCollection_Array1_Handle_StdObjMgt_Persistent

        """
        res = _StdLPersistent.StdLPersistent_HArray1OfPersistent_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StdLPersistent_HArray1OfPersistent self) -> NCollection_Array1_Handle_StdObjMgt_Persistent

        :rtype: OCC.wrapper.StdLPersistent.NCollection_Array1_Handle_StdObjMgt_Persistent

        """
        return _StdLPersistent.StdLPersistent_HArray1OfPersistent_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StdLPersistent.StdLPersistent_HArray1OfPersistent_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StdLPersistent.StdLPersistent_HArray1OfPersistent_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdLPersistent.StdLPersistent_HArray1OfPersistent_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StdLPersistent.delete_StdLPersistent_HArray1OfPersistent
StdLPersistent_HArray1OfPersistent_swigregister = _StdLPersistent.StdLPersistent_HArray1OfPersistent_swigregister
StdLPersistent_HArray1OfPersistent_swigregister(StdLPersistent_HArray1OfPersistent)

def StdLPersistent_HArray1OfPersistent_get_type_name(*args):
    """
    StdLPersistent_HArray1OfPersistent_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StdLPersistent.StdLPersistent_HArray1OfPersistent_get_type_name(*args)

def StdLPersistent_HArray1OfPersistent_get_type_descriptor(*args):
    """
    StdLPersistent_HArray1OfPersistent_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StdLPersistent.StdLPersistent_HArray1OfPersistent_get_type_descriptor(*args)

class StdLPersistent_HArray1(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _StdLPersistent.new_StdLPersistent_HArray1()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StdLPersistent.delete_StdLPersistent_HArray1
StdLPersistent_HArray1_swigregister = _StdLPersistent.StdLPersistent_HArray1_swigregister
StdLPersistent_HArray1_swigregister(StdLPersistent_HArray1)

class Handle_StdLPersistent_HArray1OfPersistent(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StdLPersistent_HArray1OfPersistent self)

        Nullify the handle


        """
        return _StdLPersistent.Handle_StdLPersistent_HArray1OfPersistent_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StdLPersistent_HArray1OfPersistent self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StdLPersistent.Handle_StdLPersistent_HArray1OfPersistent_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StdLPersistent_HArray1OfPersistent self, StdLPersistent_HArray1OfPersistent thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StdLPersistent.Handle_StdLPersistent_HArray1OfPersistent_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StdLPersistent_HArray1OfPersistent self, Handle_StdLPersistent_HArray1OfPersistent theHandle) -> Handle_StdLPersistent_HArray1OfPersistent
        assign(Handle_StdLPersistent_HArray1OfPersistent self, StdLPersistent_HArray1OfPersistent thePtr) -> Handle_StdLPersistent_HArray1OfPersistent
        assign(Handle_StdLPersistent_HArray1OfPersistent self, Handle_StdLPersistent_HArray1OfPersistent theHandle) -> Handle_StdLPersistent_HArray1OfPersistent

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StdLPersistent.Handle_StdLPersistent_HArray1OfPersistent_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StdLPersistent_HArray1OfPersistent self) -> StdLPersistent_HArray1OfPersistent

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StdLPersistent.Handle_StdLPersistent_HArray1OfPersistent_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StdLPersistent_HArray1OfPersistent self) -> StdLPersistent_HArray1OfPersistent

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StdLPersistent.Handle_StdLPersistent_HArray1OfPersistent___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StdLPersistent_HArray1OfPersistent self) -> StdLPersistent_HArray1OfPersistent

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StdLPersistent.Handle_StdLPersistent_HArray1OfPersistent___ref__(self, *args)


    def __hash__(self):
        return _StdLPersistent.Handle_StdLPersistent_HArray1OfPersistent___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StdLPersistent.Handle_StdLPersistent_HArray1OfPersistent___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StdLPersistent.new_Handle_StdLPersistent_HArray1OfPersistent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StdLPersistent.Handle_StdLPersistent_HArray1OfPersistent_DownCast)
    __swig_destroy__ = _StdLPersistent.delete_Handle_StdLPersistent_HArray1OfPersistent

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StdLPersistent.NCollection_Array1_Handle_StdObjMgt_Persistent

        """
        res = _StdLPersistent.Handle_StdLPersistent_HArray1OfPersistent_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StdLPersistent_HArray1OfPersistent self) -> NCollection_Array1_Handle_StdObjMgt_Persistent

        :rtype: OCC.wrapper.StdLPersistent.NCollection_Array1_Handle_StdObjMgt_Persistent

        """
        return _StdLPersistent.Handle_StdLPersistent_HArray1OfPersistent_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StdLPersistent_HArray1OfPersistent self) -> char const *

        :rtype: const char *

        """
        return _StdLPersistent.Handle_StdLPersistent_HArray1OfPersistent_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdLPersistent.Handle_StdLPersistent_HArray1OfPersistent_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdLPersistent.Handle_StdLPersistent_HArray1OfPersistent_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StdLPersistent_HArray1OfPersistent self)

        Memory deallocator for transient classes


        """
        return _StdLPersistent.Handle_StdLPersistent_HArray1OfPersistent_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StdLPersistent_HArray1OfPersistent self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StdLPersistent_HArray1OfPersistent self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdLPersistent.Handle_StdLPersistent_HArray1OfPersistent_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StdLPersistent_HArray1OfPersistent self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StdLPersistent_HArray1OfPersistent self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdLPersistent.Handle_StdLPersistent_HArray1OfPersistent_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StdLPersistent_HArray1OfPersistent self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StdLPersistent.Handle_StdLPersistent_HArray1OfPersistent_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StdLPersistent_HArray1OfPersistent self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdLPersistent.Handle_StdLPersistent_HArray1OfPersistent_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StdLPersistent_HArray1OfPersistent self)

        Increments the reference counter of this object


        """
        return _StdLPersistent.Handle_StdLPersistent_HArray1OfPersistent_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StdLPersistent_HArray1OfPersistent self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdLPersistent.Handle_StdLPersistent_HArray1OfPersistent_DecrementRefCounter(self, *args)

Handle_StdLPersistent_HArray1OfPersistent_swigregister = _StdLPersistent.Handle_StdLPersistent_HArray1OfPersistent_swigregister
Handle_StdLPersistent_HArray1OfPersistent_swigregister(Handle_StdLPersistent_HArray1OfPersistent)

def Handle_StdLPersistent_HArray1OfPersistent_DownCast(thing):
    return _StdLPersistent.Handle_StdLPersistent_HArray1OfPersistent_DownCast(thing)
Handle_StdLPersistent_HArray1OfPersistent_DownCast = _StdLPersistent.Handle_StdLPersistent_HArray1OfPersistent_DownCast

class StdLPersistent_Value(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _StdLPersistent.new_StdLPersistent_Value()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StdLPersistent.delete_StdLPersistent_Value
StdLPersistent_Value_swigregister = _StdLPersistent.StdLPersistent_Value_swigregister
StdLPersistent_Value_swigregister(StdLPersistent_Value)

class StdLPersistent_HArray2(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _StdLPersistent.new_StdLPersistent_HArray2()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StdLPersistent.delete_StdLPersistent_HArray2
StdLPersistent_HArray2_swigregister = _StdLPersistent.StdLPersistent_HArray2_swigregister
StdLPersistent_HArray2_swigregister(StdLPersistent_HArray2)

class Handle_StdLPersistent_HArray2OfPersistent(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StdLPersistent_HArray2OfPersistent self)

        Nullify the handle


        """
        return _StdLPersistent.Handle_StdLPersistent_HArray2OfPersistent_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StdLPersistent_HArray2OfPersistent self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StdLPersistent.Handle_StdLPersistent_HArray2OfPersistent_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StdLPersistent_HArray2OfPersistent self, StdLPersistent_HArray2OfPersistent thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StdLPersistent.Handle_StdLPersistent_HArray2OfPersistent_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StdLPersistent_HArray2OfPersistent self, Handle_StdLPersistent_HArray2OfPersistent theHandle) -> Handle_StdLPersistent_HArray2OfPersistent
        assign(Handle_StdLPersistent_HArray2OfPersistent self, StdLPersistent_HArray2OfPersistent thePtr) -> Handle_StdLPersistent_HArray2OfPersistent
        assign(Handle_StdLPersistent_HArray2OfPersistent self, Handle_StdLPersistent_HArray2OfPersistent theHandle) -> Handle_StdLPersistent_HArray2OfPersistent

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StdLPersistent.Handle_StdLPersistent_HArray2OfPersistent_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StdLPersistent_HArray2OfPersistent self) -> StdLPersistent_HArray2OfPersistent

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StdLPersistent.Handle_StdLPersistent_HArray2OfPersistent_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StdLPersistent_HArray2OfPersistent self) -> StdLPersistent_HArray2OfPersistent

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StdLPersistent.Handle_StdLPersistent_HArray2OfPersistent___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StdLPersistent_HArray2OfPersistent self) -> StdLPersistent_HArray2OfPersistent

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StdLPersistent.Handle_StdLPersistent_HArray2OfPersistent___ref__(self, *args)


    def __hash__(self):
        return _StdLPersistent.Handle_StdLPersistent_HArray2OfPersistent___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StdLPersistent.Handle_StdLPersistent_HArray2OfPersistent___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StdLPersistent.new_Handle_StdLPersistent_HArray2OfPersistent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StdLPersistent.Handle_StdLPersistent_HArray2OfPersistent_DownCast)
    __swig_destroy__ = _StdLPersistent.delete_Handle_StdLPersistent_HArray2OfPersistent

    def Array2(self, *args):
        """
        :rtype: OCC.wrapper.StdLPersistent.NCollection_Array2_Handle_StdObjMgt_Persistent

        """
        res = _StdLPersistent.Handle_StdLPersistent_HArray2OfPersistent_Array2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray2(self, *args):
        """
        ChangeArray2(Handle_StdLPersistent_HArray2OfPersistent self) -> NCollection_Array2_Handle_StdObjMgt_Persistent

        :rtype: OCC.wrapper.StdLPersistent.NCollection_Array2_Handle_StdObjMgt_Persistent

        """
        return _StdLPersistent.Handle_StdLPersistent_HArray2OfPersistent_ChangeArray2(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StdLPersistent_HArray2OfPersistent self) -> char const *

        :rtype: const char *

        """
        return _StdLPersistent.Handle_StdLPersistent_HArray2OfPersistent_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdLPersistent.Handle_StdLPersistent_HArray2OfPersistent_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StdLPersistent.Handle_StdLPersistent_HArray2OfPersistent_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StdLPersistent_HArray2OfPersistent self)

        Memory deallocator for transient classes


        """
        return _StdLPersistent.Handle_StdLPersistent_HArray2OfPersistent_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StdLPersistent_HArray2OfPersistent self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StdLPersistent_HArray2OfPersistent self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdLPersistent.Handle_StdLPersistent_HArray2OfPersistent_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StdLPersistent_HArray2OfPersistent self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StdLPersistent_HArray2OfPersistent self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdLPersistent.Handle_StdLPersistent_HArray2OfPersistent_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StdLPersistent_HArray2OfPersistent self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StdLPersistent.Handle_StdLPersistent_HArray2OfPersistent_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StdLPersistent_HArray2OfPersistent self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdLPersistent.Handle_StdLPersistent_HArray2OfPersistent_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StdLPersistent_HArray2OfPersistent self)

        Increments the reference counter of this object


        """
        return _StdLPersistent.Handle_StdLPersistent_HArray2OfPersistent_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StdLPersistent_HArray2OfPersistent self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdLPersistent.Handle_StdLPersistent_HArray2OfPersistent_DecrementRefCounter(self, *args)

Handle_StdLPersistent_HArray2OfPersistent_swigregister = _StdLPersistent.Handle_StdLPersistent_HArray2OfPersistent_swigregister
Handle_StdLPersistent_HArray2OfPersistent_swigregister(Handle_StdLPersistent_HArray2OfPersistent)

def Handle_StdLPersistent_HArray2OfPersistent_DownCast(thing):
    return _StdLPersistent.Handle_StdLPersistent_HArray2OfPersistent_DownCast(thing)
Handle_StdLPersistent_HArray2OfPersistent_DownCast = _StdLPersistent.Handle_StdLPersistent_HArray2OfPersistent_DownCast

class StdLPersistent_Variable(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Read(self, *args):
        """
        Read(StdLPersistent_Variable self, StdObjMgt_ReadData theReadData)

        Read persistent data from a file.

        :type theReadData: OCC.wrapper.StdObjMgt.StdObjMgt_ReadData

        """
        return _StdLPersistent.StdLPersistent_Variable_Read(self, *args)


    def Write(self, *args):
        """
        Write(StdLPersistent_Variable self, StdObjMgt_WriteData theWriteData)

        Write persistent data to a file.

        :type theWriteData: OCC.wrapper.StdObjMgt.StdObjMgt_WriteData

        """
        return _StdLPersistent.StdLPersistent_Variable_Write(self, *args)


    def PChildren(self, *args):
        """
        PChildren(StdLPersistent_Variable self, NCollection_Sequence_Handle_StdObjMgt_Persistent theChildren)

        Gets persistent child objects

        :type theChildren: SequenceOfPersistent

        """
        return _StdLPersistent.StdLPersistent_Variable_PChildren(self, *args)


    def PName(self, *args):
        """
        PName(StdLPersistent_Variable self) -> Standard_CString

        Returns persistent type name

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StdLPersistent.StdLPersistent_Variable_PName(self, *args)


    def Import(self, *args):
        """
        Import(StdLPersistent_Variable self, Handle_TDataStd_Variable theAttribute)

        Import transient attribuite from the persistent data.

        :type theAttribute: OCC.wrapper.TDataStd.Handle_TDataStd_Variable

        """
        return _StdLPersistent.StdLPersistent_Variable_Import(self, *args)


    def __init__(self):
        this = _StdLPersistent.new_StdLPersistent_Variable()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StdLPersistent.delete_StdLPersistent_Variable
StdLPersistent_Variable_swigregister = _StdLPersistent.StdLPersistent_Variable_swigregister
StdLPersistent_Variable_swigregister(StdLPersistent_Variable)

class StdLPersistent_HString(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _StdLPersistent.new_StdLPersistent_HString()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StdLPersistent.delete_StdLPersistent_HString
StdLPersistent_HString_swigregister = _StdLPersistent.StdLPersistent_HString_swigregister
StdLPersistent_HString_swigregister(StdLPersistent_HString)

class StdLPersistent_(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def BindTypes(*args):
        """
        BindTypes(StdObjMgt_MapOfInstantiators theMap)

        Register types.

        :type theMap: OCC.wrapper.StdObjMgt.StdObjMgt_MapOfInstantiators

        """
        return _StdLPersistent.StdLPersistent__BindTypes(*args)

    BindTypes = staticmethod(BindTypes)

    def __init__(self):
        this = _StdLPersistent.new_StdLPersistent_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StdLPersistent.delete_StdLPersistent_
StdLPersistent__swigregister = _StdLPersistent.StdLPersistent__swigregister
StdLPersistent__swigregister(StdLPersistent_)

def StdLPersistent__BindTypes(*args):
    """
    StdLPersistent__BindTypes(StdObjMgt_MapOfInstantiators theMap)

    Register types.

    :type theMap: OCC.wrapper.StdObjMgt.StdObjMgt_MapOfInstantiators

    """
    return _StdLPersistent.StdLPersistent__BindTypes(*args)

class StdLPersistent_NamedData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Read(self, *args):
        """
        Read(StdLPersistent_NamedData self, StdObjMgt_ReadData theReadData)

        Read persistent data from a file.

        :type theReadData: OCC.wrapper.StdObjMgt.StdObjMgt_ReadData

        """
        return _StdLPersistent.StdLPersistent_NamedData_Read(self, *args)


    def Write(self, *args):
        """
        Write(StdLPersistent_NamedData self, StdObjMgt_WriteData theWriteData)

        Write persistent data to a file.

        :type theWriteData: OCC.wrapper.StdObjMgt.StdObjMgt_WriteData

        """
        return _StdLPersistent.StdLPersistent_NamedData_Write(self, *args)


    def PChildren(self, *args):
        """
        PChildren(StdLPersistent_NamedData self, NCollection_Sequence_Handle_StdObjMgt_Persistent arg2)

        Gets persistent child objects

        :type : SequenceOfPersistent

        """
        return _StdLPersistent.StdLPersistent_NamedData_PChildren(self, *args)


    def PName(self, *args):
        """
        PName(StdLPersistent_NamedData self) -> Standard_CString

        Returns persistent type name

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StdLPersistent.StdLPersistent_NamedData_PName(self, *args)


    def __init__(self):
        this = _StdLPersistent.new_StdLPersistent_NamedData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StdLPersistent.delete_StdLPersistent_NamedData
StdLPersistent_NamedData_swigregister = _StdLPersistent.StdLPersistent_NamedData_swigregister
StdLPersistent_NamedData_swigregister(StdLPersistent_NamedData)

class StdLPersistent_Real(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Read(self, *args):
        """
        Read(StdLPersistent_Real self, StdObjMgt_ReadData theReadData)

        Read persistent data from a file.

        :type theReadData: OCC.wrapper.StdObjMgt.StdObjMgt_ReadData

        """
        return _StdLPersistent.StdLPersistent_Real_Read(self, *args)


    def Write(self, *args):
        """
        Write(StdLPersistent_Real self, StdObjMgt_WriteData theWriteData)

        Write persistent data from a file.

        :type theWriteData: OCC.wrapper.StdObjMgt.StdObjMgt_WriteData

        """
        return _StdLPersistent.StdLPersistent_Real_Write(self, *args)


    def PChildren(self, *args):
        """
        PChildren(StdLPersistent_Real self, NCollection_Sequence_Handle_StdObjMgt_Persistent arg2)

        Gets persistent child objects

        :type : SequenceOfPersistent

        """
        return _StdLPersistent.StdLPersistent_Real_PChildren(self, *args)


    def PName(self, *args):
        """
        PName(StdLPersistent_Real self) -> Standard_CString

        Returns persistent type name

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StdLPersistent.StdLPersistent_Real_PName(self, *args)


    def Import(self, *args):
        """
        Import(StdLPersistent_Real self, Handle_TDataStd_Real theAttribute)

        Import transient attribuite from the persistent data.

        :type theAttribute: OCC.wrapper.TDataStd.Handle_TDataStd_Real

        """
        return _StdLPersistent.StdLPersistent_Real_Import(self, *args)


    def __init__(self):
        this = _StdLPersistent.new_StdLPersistent_Real()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StdLPersistent.delete_StdLPersistent_Real
StdLPersistent_Real_swigregister = _StdLPersistent.StdLPersistent_Real_swigregister
StdLPersistent_Real_swigregister(StdLPersistent_Real)

class NCollection_Array2_Handle_StdObjMgt_Persistent(object):
    """
    Purpose:   The class Array2 represents bi-dimensional arrays 
    of fixed size known at run time. 
    The ranges of indices are user defined.

    Warning:   Programs clients of such class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.LowerRow(); i <= A.UpperRow(); i++)
    for (j = A.LowerCol(); j <= A.UpperCol(); j++)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Purpose:   The class Array2 represents bi-dimensional arrays 
        of fixed size known at run time. 
        The ranges of indices are user defined.

        Warning:   Programs clients of such class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.LowerRow(); i <= A.UpperRow(); i++)
        for (j = A.LowerCol(); j <= A.UpperCol(); j++)
        """
        this = _StdLPersistent.new_NCollection_Array2_Handle_StdObjMgt_Persistent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array2_Handle_StdObjMgt_Persistent self, handle< StdObjMgt_Persistent > const & theValue)

        Initialise the values

        :type theValue: const TheItemType &

        """
        return _StdLPersistent.NCollection_Array2_Handle_StdObjMgt_Persistent_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array2_Handle_StdObjMgt_Persistent self) -> Standard_Integer

        Size (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdLPersistent.NCollection_Array2_Handle_StdObjMgt_Persistent_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array2_Handle_StdObjMgt_Persistent self) -> Standard_Integer

        Length (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdLPersistent.NCollection_Array2_Handle_StdObjMgt_Persistent_Length(self, *args)


    def RowLength(self, *args):
        """
        RowLength(NCollection_Array2_Handle_StdObjMgt_Persistent self) -> Standard_Integer

        Returns length of the row, i.e. number of columns

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdLPersistent.NCollection_Array2_Handle_StdObjMgt_Persistent_RowLength(self, *args)


    def ColLength(self, *args):
        """
        ColLength(NCollection_Array2_Handle_StdObjMgt_Persistent self) -> Standard_Integer

        Returns length of the column, i.e. number of rows

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdLPersistent.NCollection_Array2_Handle_StdObjMgt_Persistent_ColLength(self, *args)


    def LowerRow(self, *args):
        """
        LowerRow(NCollection_Array2_Handle_StdObjMgt_Persistent self) -> Standard_Integer

        LowerRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdLPersistent.NCollection_Array2_Handle_StdObjMgt_Persistent_LowerRow(self, *args)


    def UpperRow(self, *args):
        """
        UpperRow(NCollection_Array2_Handle_StdObjMgt_Persistent self) -> Standard_Integer

        UpperRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdLPersistent.NCollection_Array2_Handle_StdObjMgt_Persistent_UpperRow(self, *args)


    def LowerCol(self, *args):
        """
        LowerCol(NCollection_Array2_Handle_StdObjMgt_Persistent self) -> Standard_Integer

        LowerCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdLPersistent.NCollection_Array2_Handle_StdObjMgt_Persistent_LowerCol(self, *args)


    def UpperCol(self, *args):
        """
        UpperCol(NCollection_Array2_Handle_StdObjMgt_Persistent self) -> Standard_Integer

        UpperCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdLPersistent.NCollection_Array2_Handle_StdObjMgt_Persistent_UpperCol(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array2_Handle_StdObjMgt_Persistent self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdLPersistent.NCollection_Array2_Handle_StdObjMgt_Persistent_IsDeletable(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array2_Handle_StdObjMgt_Persistent self, NCollection_Array2_Handle_StdObjMgt_Persistent theOther) -> NCollection_Array2_Handle_StdObjMgt_Persistent

        Assignment

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _StdLPersistent.NCollection_Array2_Handle_StdObjMgt_Persistent_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array2_Handle_StdObjMgt_Persistent self, NCollection_Array2_Handle_StdObjMgt_Persistent theOther) -> NCollection_Array2_Handle_StdObjMgt_Persistent

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _StdLPersistent.NCollection_Array2_Handle_StdObjMgt_Persistent_assign(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _StdLPersistent.NCollection_Array2_Handle_StdObjMgt_Persistent_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array2_Handle_StdObjMgt_Persistent self, Standard_Integer const theRow, Standard_Integer const theCol) -> handle< StdObjMgt_Persistent > &

        Variable value access

        :type theRow: int
        :type theCol: int
        :rtype: TheItemType &

        """
        return _StdLPersistent.NCollection_Array2_Handle_StdObjMgt_Persistent_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to ChangeValue

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _StdLPersistent.NCollection_Array2_Handle_StdObjMgt_Persistent___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array2_Handle_StdObjMgt_Persistent self, Standard_Integer const theRow, Standard_Integer const theCol, handle< StdObjMgt_Persistent > const & theItem)

        SetValue

        :type theRow: int
        :type theCol: int
        :type theItem: const TheItemType &

        """
        return _StdLPersistent.NCollection_Array2_Handle_StdObjMgt_Persistent_SetValue(self, *args)

    __swig_destroy__ = _StdLPersistent.delete_NCollection_Array2_Handle_StdObjMgt_Persistent
NCollection_Array2_Handle_StdObjMgt_Persistent_swigregister = _StdLPersistent.NCollection_Array2_Handle_StdObjMgt_Persistent_swigregister
NCollection_Array2_Handle_StdObjMgt_Persistent_swigregister(NCollection_Array2_Handle_StdObjMgt_Persistent)

class StdLPersistent_Data(StdObjMgt.StdObjMgt_Persistent):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StdLPersistent_Data
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StdLPersistent_Data(self) 
            return h


    def Read(self, *args):
        """
        Read(StdLPersistent_Data self, StdObjMgt_ReadData theReadData)

        Read persistent data from a file.

        :type theReadData: OCC.wrapper.StdObjMgt.StdObjMgt_ReadData

        """
        return _StdLPersistent.StdLPersistent_Data_Read(self, *args)


    def Write(self, *args):
        """
        Write(StdLPersistent_Data self, StdObjMgt_WriteData theWriteData)

        Write persistent data to a file.

        :type theWriteData: OCC.wrapper.StdObjMgt.StdObjMgt_WriteData

        """
        return _StdLPersistent.StdLPersistent_Data_Write(self, *args)


    def PChildren(self, *args):
        """
        PChildren(StdLPersistent_Data self, NCollection_Sequence_Handle_StdObjMgt_Persistent theChildren)

        Gets persistent child objects

        :type theChildren: SequenceOfPersistent

        """
        return _StdLPersistent.StdLPersistent_Data_PChildren(self, *args)


    def PName(self, *args):
        """
        PName(StdLPersistent_Data self) -> Standard_CString

        Returns persistent type name

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StdLPersistent.StdLPersistent_Data_PName(self, *args)


    def Import(self, *args):
        """
        Import(StdLPersistent_Data self) -> Handle_TDF_Data

        Import transient data from the persistent data.

        :rtype: OCC.wrapper.TDF.Handle_TDF_Data

        """
        return _StdLPersistent.StdLPersistent_Data_Import(self, *args)


    def __init__(self):
        this = _StdLPersistent.new_StdLPersistent_Data()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle



    __swig_destroy__ = _StdLPersistent.delete_StdLPersistent_Data
StdLPersistent_Data_swigregister = _StdLPersistent.StdLPersistent_Data_swigregister
StdLPersistent_Data_swigregister(StdLPersistent_Data)

class NCollection_Array1_Handle_StdObjMgt_Persistent(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_StdObjMgt_Persistent self) -> NCollection_Array1< handle< StdObjMgt_Persistent > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StdLPersistent.NCollection_Array1_Handle_StdObjMgt_Persistent_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_StdObjMgt_Persistent self) -> NCollection_Array1< handle< StdObjMgt_Persistent > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StdLPersistent.NCollection_Array1_Handle_StdObjMgt_Persistent_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_StdObjMgt_Persistent self) -> NCollection_Array1< handle< StdObjMgt_Persistent > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StdLPersistent.NCollection_Array1_Handle_StdObjMgt_Persistent_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_StdObjMgt_Persistent self) -> NCollection_Array1< handle< StdObjMgt_Persistent > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StdLPersistent.NCollection_Array1_Handle_StdObjMgt_Persistent_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StdLPersistent.new_NCollection_Array1_Handle_StdObjMgt_Persistent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_StdObjMgt_Persistent self, handle< StdObjMgt_Persistent > const & theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StdLPersistent.NCollection_Array1_Handle_StdObjMgt_Persistent_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_StdObjMgt_Persistent self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdLPersistent.NCollection_Array1_Handle_StdObjMgt_Persistent_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_StdObjMgt_Persistent self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdLPersistent.NCollection_Array1_Handle_StdObjMgt_Persistent_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_StdObjMgt_Persistent self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdLPersistent.NCollection_Array1_Handle_StdObjMgt_Persistent_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_StdObjMgt_Persistent self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdLPersistent.NCollection_Array1_Handle_StdObjMgt_Persistent_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_StdObjMgt_Persistent self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StdLPersistent.NCollection_Array1_Handle_StdObjMgt_Persistent_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_StdObjMgt_Persistent self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdLPersistent.NCollection_Array1_Handle_StdObjMgt_Persistent_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_StdObjMgt_Persistent self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StdLPersistent.NCollection_Array1_Handle_StdObjMgt_Persistent_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_StdObjMgt_Persistent self, NCollection_Array1_Handle_StdObjMgt_Persistent theOther) -> NCollection_Array1_Handle_StdObjMgt_Persistent

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StdLPersistent.NCollection_Array1_Handle_StdObjMgt_Persistent_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_StdObjMgt_Persistent self, NCollection_Array1_Handle_StdObjMgt_Persistent theOther) -> NCollection_Array1_Handle_StdObjMgt_Persistent

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StdLPersistent.NCollection_Array1_Handle_StdObjMgt_Persistent_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_StdObjMgt_Persistent self, NCollection_Array1_Handle_StdObjMgt_Persistent theOther) -> NCollection_Array1_Handle_StdObjMgt_Persistent
        assign(NCollection_Array1_Handle_StdObjMgt_Persistent self, NCollection_Array1_Handle_StdObjMgt_Persistent theOther) -> NCollection_Array1_Handle_StdObjMgt_Persistent

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StdLPersistent.NCollection_Array1_Handle_StdObjMgt_Persistent_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StdLPersistent.NCollection_Array1_Handle_StdObjMgt_Persistent_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_StdObjMgt_Persistent self) -> handle< StdObjMgt_Persistent > &

        @return first element

        :rtype: TheItemType &

        """
        return _StdLPersistent.NCollection_Array1_Handle_StdObjMgt_Persistent_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StdLPersistent.NCollection_Array1_Handle_StdObjMgt_Persistent_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_StdObjMgt_Persistent self) -> handle< StdObjMgt_Persistent > &

        @return last element

        :rtype: TheItemType &

        """
        return _StdLPersistent.NCollection_Array1_Handle_StdObjMgt_Persistent_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StdLPersistent.NCollection_Array1_Handle_StdObjMgt_Persistent_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_StdObjMgt_Persistent self, Standard_Integer const theIndex) -> handle< StdObjMgt_Persistent > &

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StdLPersistent.NCollection_Array1_Handle_StdObjMgt_Persistent_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StdLPersistent.NCollection_Array1_Handle_StdObjMgt_Persistent___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StdLPersistent.NCollection_Array1_Handle_StdObjMgt_Persistent_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_StdObjMgt_Persistent self, Standard_Integer const theIndex, handle< StdObjMgt_Persistent > const & theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StdLPersistent.NCollection_Array1_Handle_StdObjMgt_Persistent_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_StdObjMgt_Persistent self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StdLPersistent.NCollection_Array1_Handle_StdObjMgt_Persistent_Resize(self, *args)

    __swig_destroy__ = _StdLPersistent.delete_NCollection_Array1_Handle_StdObjMgt_Persistent
NCollection_Array1_Handle_StdObjMgt_Persistent_swigregister = _StdLPersistent.NCollection_Array1_Handle_StdObjMgt_Persistent_swigregister
NCollection_Array1_Handle_StdObjMgt_Persistent_swigregister(NCollection_Array1_Handle_StdObjMgt_Persistent)



