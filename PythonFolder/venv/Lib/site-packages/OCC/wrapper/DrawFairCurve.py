# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_DrawFairCurve')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_DrawFairCurve')
    _DrawFairCurve = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_DrawFairCurve', [dirname(__file__)])
        except ImportError:
            import _DrawFairCurve
            return _DrawFairCurve
        try:
            _mod = imp.load_module('_DrawFairCurve', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _DrawFairCurve = swig_import_helper()
    del swig_import_helper
else:
    import _DrawFairCurve
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _DrawFairCurve.delete_SwigPyIterator

    def value(self):
        return _DrawFairCurve.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _DrawFairCurve.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _DrawFairCurve.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _DrawFairCurve.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _DrawFairCurve.SwigPyIterator_equal(self, x)

    def copy(self):
        return _DrawFairCurve.SwigPyIterator_copy(self)

    def next(self):
        return _DrawFairCurve.SwigPyIterator_next(self)

    def __next__(self):
        return _DrawFairCurve.SwigPyIterator___next__(self)

    def previous(self):
        return _DrawFairCurve.SwigPyIterator_previous(self)

    def advance(self, n):
        return _DrawFairCurve.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _DrawFairCurve.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _DrawFairCurve.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _DrawFairCurve.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _DrawFairCurve.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _DrawFairCurve.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _DrawFairCurve.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _DrawFairCurve.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _DrawFairCurve.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_DrawFairCurve.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _DrawFairCurve.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _DrawFairCurve.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DrawFairCurve.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _DrawFairCurve.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _DrawFairCurve.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _DrawFairCurve.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _DrawFairCurve.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_DrawFairCurve.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _DrawFairCurve.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _DrawFairCurve.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DrawFairCurve.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _DrawFairCurve.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _DrawFairCurve.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _DrawFairCurve.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _DrawFairCurve.ptr_to_number(item)
ptr_to_number = _DrawFairCurve.ptr_to_number

def HashCode(*args):
    return _DrawFairCurve.HashCode(*args)
HashCode = _DrawFairCurve.HashCode

def ptr_equal(a, b):
    return _DrawFairCurve.ptr_equal(a, b)
ptr_equal = _DrawFairCurve.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import DrawTrSurf
else:
    import DrawTrSurf
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Draw
else:
    import Draw
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Poly
else:
    import Poly
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TShort
else:
    import TShort
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor2d
else:
    import Adaptor2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor3d
else:
    import Adaptor3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import math
else:
    import math
del _swig_python_version_info
class DrawFairCurve_Batten(DrawTrSurf.DrawTrSurf_BSplineCurve2d):
    """Interactive Draw object of type "Batten" """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_DrawFairCurve_Batten
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_DrawFairCurve_Batten(self) 
            return h


    def __init__(self, *args):
        """
        __init__(DrawFairCurve_Batten self, Standard_Address const TheBatten) -> DrawFairCurve_Batten

        :type TheBatten: OCC.wrapper.Standard.Standard_Address

        """
        this = _DrawFairCurve.new_DrawFairCurve_Batten(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Compute(self, *args):
        """Compute(DrawFairCurve_Batten self)"""
        return _DrawFairCurve.DrawFairCurve_Batten_Compute(self, *args)


    def SetPoint(self, *args):
        """
        SetPoint(DrawFairCurve_Batten self, Standard_Integer const Side, gp_Pnt2d Point)

        :type Side: int
        :type Point: OCC.wrapper.gp.gp_Pnt2d

        """
        return _DrawFairCurve.DrawFairCurve_Batten_SetPoint(self, *args)


    def SetAngle(self, *args):
        """
        SetAngle(DrawFairCurve_Batten self, Standard_Integer const Side, Standard_Real const Angle)

        :type Side: int
        :type Angle: float

        """
        return _DrawFairCurve.DrawFairCurve_Batten_SetAngle(self, *args)


    def SetSliding(self, *args):
        """
        SetSliding(DrawFairCurve_Batten self, Standard_Real const Length)

        :type Length: float

        """
        return _DrawFairCurve.DrawFairCurve_Batten_SetSliding(self, *args)


    def SetHeight(self, *args):
        """
        SetHeight(DrawFairCurve_Batten self, Standard_Real const Heigth)

        :type Heigth: float

        """
        return _DrawFairCurve.DrawFairCurve_Batten_SetHeight(self, *args)


    def SetSlope(self, *args):
        """
        SetSlope(DrawFairCurve_Batten self, Standard_Real const Slope)

        :type Slope: float

        """
        return _DrawFairCurve.DrawFairCurve_Batten_SetSlope(self, *args)


    def GetAngle(self, *args):
        """
        GetAngle(DrawFairCurve_Batten self, Standard_Integer const Side) -> Standard_Real

        :type Side: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawFairCurve.DrawFairCurve_Batten_GetAngle(self, *args)


    def GetSliding(self, *args):
        """
        GetSliding(DrawFairCurve_Batten self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawFairCurve.DrawFairCurve_Batten_GetSliding(self, *args)


    def FreeSliding(self, *args):
        """FreeSliding(DrawFairCurve_Batten self)"""
        return _DrawFairCurve.DrawFairCurve_Batten_FreeSliding(self, *args)


    def FreeAngle(self, *args):
        """
        FreeAngle(DrawFairCurve_Batten self, Standard_Integer const Side)

        :type Side: int

        """
        return _DrawFairCurve.DrawFairCurve_Batten_FreeAngle(self, *args)


    def Dump(self, *args):
        """
        Dump(DrawFairCurve_Batten self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DrawFairCurve.DrawFairCurve_Batten_Dump(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _DrawFairCurve.DrawFairCurve_Batten_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _DrawFairCurve.DrawFairCurve_Batten_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawFairCurve.DrawFairCurve_Batten_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _DrawFairCurve.delete_DrawFairCurve_Batten
DrawFairCurve_Batten_swigregister = _DrawFairCurve.DrawFairCurve_Batten_swigregister
DrawFairCurve_Batten_swigregister(DrawFairCurve_Batten)

def DrawFairCurve_Batten_get_type_name(*args):
    """
    DrawFairCurve_Batten_get_type_name() -> char const *

    :rtype: const char *

    """
    return _DrawFairCurve.DrawFairCurve_Batten_get_type_name(*args)

def DrawFairCurve_Batten_get_type_descriptor(*args):
    """
    DrawFairCurve_Batten_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _DrawFairCurve.DrawFairCurve_Batten_get_type_descriptor(*args)

class DrawFairCurve_MinimalVariation(DrawFairCurve_Batten):
    """Interactive Draw object of type "MVC" """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_DrawFairCurve_MinimalVariation
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_DrawFairCurve_MinimalVariation(self) 
            return h


    def __init__(self, *args):
        """
        __init__(DrawFairCurve_MinimalVariation self, Standard_Address const TheMVC) -> DrawFairCurve_MinimalVariation

        :type TheMVC: OCC.wrapper.Standard.Standard_Address

        """
        this = _DrawFairCurve.new_DrawFairCurve_MinimalVariation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetCurvature(self, *args):
        """
        SetCurvature(DrawFairCurve_MinimalVariation self, Standard_Integer const Side, Standard_Real const Rho)

        :type Side: int
        :type Rho: float

        """
        return _DrawFairCurve.DrawFairCurve_MinimalVariation_SetCurvature(self, *args)


    def SetPhysicalRatio(self, *args):
        """
        SetPhysicalRatio(DrawFairCurve_MinimalVariation self, Standard_Real const Ratio)

        :type Ratio: float

        """
        return _DrawFairCurve.DrawFairCurve_MinimalVariation_SetPhysicalRatio(self, *args)


    def GetCurvature(self, *args):
        """
        GetCurvature(DrawFairCurve_MinimalVariation self, Standard_Integer const Side) -> Standard_Real

        :type Side: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawFairCurve.DrawFairCurve_MinimalVariation_GetCurvature(self, *args)


    def GetPhysicalRatio(self, *args):
        """
        GetPhysicalRatio(DrawFairCurve_MinimalVariation self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawFairCurve.DrawFairCurve_MinimalVariation_GetPhysicalRatio(self, *args)


    def FreeCurvature(self, *args):
        """
        FreeCurvature(DrawFairCurve_MinimalVariation self, Standard_Integer const Side)

        :type Side: int

        """
        return _DrawFairCurve.DrawFairCurve_MinimalVariation_FreeCurvature(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _DrawFairCurve.DrawFairCurve_MinimalVariation_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _DrawFairCurve.DrawFairCurve_MinimalVariation_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawFairCurve.DrawFairCurve_MinimalVariation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _DrawFairCurve.delete_DrawFairCurve_MinimalVariation
DrawFairCurve_MinimalVariation_swigregister = _DrawFairCurve.DrawFairCurve_MinimalVariation_swigregister
DrawFairCurve_MinimalVariation_swigregister(DrawFairCurve_MinimalVariation)

def DrawFairCurve_MinimalVariation_get_type_name(*args):
    """
    DrawFairCurve_MinimalVariation_get_type_name() -> char const *

    :rtype: const char *

    """
    return _DrawFairCurve.DrawFairCurve_MinimalVariation_get_type_name(*args)

def DrawFairCurve_MinimalVariation_get_type_descriptor(*args):
    """
    DrawFairCurve_MinimalVariation_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _DrawFairCurve.DrawFairCurve_MinimalVariation_get_type_descriptor(*args)

class Handle_DrawFairCurve_MinimalVariation(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_DrawFairCurve_MinimalVariation self)

        Nullify the handle


        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_DrawFairCurve_MinimalVariation self) -> bool

        Check for being null

        :rtype: bool

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_DrawFairCurve_MinimalVariation self, DrawFairCurve_MinimalVariation thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_DrawFairCurve_MinimalVariation self, Handle_DrawFairCurve_MinimalVariation theHandle) -> Handle_DrawFairCurve_MinimalVariation
        assign(Handle_DrawFairCurve_MinimalVariation self, DrawFairCurve_MinimalVariation thePtr) -> Handle_DrawFairCurve_MinimalVariation
        assign(Handle_DrawFairCurve_MinimalVariation self, Handle_DrawFairCurve_MinimalVariation theHandle) -> Handle_DrawFairCurve_MinimalVariation

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_DrawFairCurve_MinimalVariation self) -> DrawFairCurve_MinimalVariation

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_DrawFairCurve_MinimalVariation self) -> DrawFairCurve_MinimalVariation

        Member access operator (note non-const)

        :rtype: T *

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_DrawFairCurve_MinimalVariation self) -> DrawFairCurve_MinimalVariation

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation___ref__(self, *args)


    def __hash__(self):
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _DrawFairCurve.new_Handle_DrawFairCurve_MinimalVariation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_DownCast)
    __swig_destroy__ = _DrawFairCurve.delete_Handle_DrawFairCurve_MinimalVariation

    def SetCurvature(self, *args):
        """
        SetCurvature(Handle_DrawFairCurve_MinimalVariation self, Standard_Integer const Side, Standard_Real const Rho)

        :type Side: int
        :type Rho: float

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_SetCurvature(self, *args)


    def SetPhysicalRatio(self, *args):
        """
        SetPhysicalRatio(Handle_DrawFairCurve_MinimalVariation self, Standard_Real const Ratio)

        :type Ratio: float

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_SetPhysicalRatio(self, *args)


    def GetCurvature(self, *args):
        """
        GetCurvature(Handle_DrawFairCurve_MinimalVariation self, Standard_Integer const Side) -> Standard_Real

        :type Side: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_GetCurvature(self, *args)


    def GetPhysicalRatio(self, *args):
        """
        GetPhysicalRatio(Handle_DrawFairCurve_MinimalVariation self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_GetPhysicalRatio(self, *args)


    def FreeCurvature(self, *args):
        """
        FreeCurvature(Handle_DrawFairCurve_MinimalVariation self, Standard_Integer const Side)

        :type Side: int

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_FreeCurvature(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_DrawFairCurve_MinimalVariation self) -> char const *

        :rtype: const char *

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Compute(self, *args):
        """Compute(Handle_DrawFairCurve_MinimalVariation self)"""
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_Compute(self, *args)


    def SetPoint(self, *args):
        """
        SetPoint(Handle_DrawFairCurve_MinimalVariation self, Standard_Integer const Side, gp_Pnt2d Point)

        :type Side: int
        :type Point: OCC.wrapper.gp.gp_Pnt2d

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_SetPoint(self, *args)


    def SetAngle(self, *args):
        """
        SetAngle(Handle_DrawFairCurve_MinimalVariation self, Standard_Integer const Side, Standard_Real const Angle)

        :type Side: int
        :type Angle: float

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_SetAngle(self, *args)


    def SetSliding(self, *args):
        """
        SetSliding(Handle_DrawFairCurve_MinimalVariation self, Standard_Real const Length)

        :type Length: float

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_SetSliding(self, *args)


    def SetHeight(self, *args):
        """
        SetHeight(Handle_DrawFairCurve_MinimalVariation self, Standard_Real const Heigth)

        :type Heigth: float

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_SetHeight(self, *args)


    def SetSlope(self, *args):
        """
        SetSlope(Handle_DrawFairCurve_MinimalVariation self, Standard_Real const Slope)

        :type Slope: float

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_SetSlope(self, *args)


    def GetAngle(self, *args):
        """
        GetAngle(Handle_DrawFairCurve_MinimalVariation self, Standard_Integer const Side) -> Standard_Real

        :type Side: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_GetAngle(self, *args)


    def GetSliding(self, *args):
        """
        GetSliding(Handle_DrawFairCurve_MinimalVariation self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_GetSliding(self, *args)


    def FreeSliding(self, *args):
        """FreeSliding(Handle_DrawFairCurve_MinimalVariation self)"""
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_FreeSliding(self, *args)


    def FreeAngle(self, *args):
        """
        FreeAngle(Handle_DrawFairCurve_MinimalVariation self, Standard_Integer const Side)

        :type Side: int

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_FreeAngle(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_DrawFairCurve_MinimalVariation self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_Dump(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(Handle_DrawFairCurve_MinimalVariation self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_DrawOn(self, *args)


    def ShowPoles(self, *args):
        """ShowPoles(Handle_DrawFairCurve_MinimalVariation self)"""
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_ShowPoles(self, *args)


    def ShowKnots(self, *args):
        """ShowKnots(Handle_DrawFairCurve_MinimalVariation self)"""
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_ShowKnots(self, *args)


    def ClearPoles(self, *args):
        """ClearPoles(Handle_DrawFairCurve_MinimalVariation self)"""
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_ClearPoles(self, *args)


    def ClearKnots(self, *args):
        """ClearKnots(Handle_DrawFairCurve_MinimalVariation self)"""
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_ClearKnots(self, *args)


    def FindPole(self, *args):
        """
        FindPole(Handle_DrawFairCurve_MinimalVariation self, Standard_Real const X, Standard_Real const Y, Draw_Display D, Standard_Real const Prec)

        Returns in <Index> the index of the first pole  of the
        curve projected by the Display <D> at a distance lower
        than <Prec> from <X,Y>. If no pole  is found  index is
        set to 0, else index is always  greater than the input
        value of index.

        :type X: float
        :type Y: float
        :type D: OCC.wrapper.Draw.Draw_Display
        :type Prec: float
        :type Index: int

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_FindPole(self, *args)


    def FindKnot(self, *args):
        """
        FindKnot(Handle_DrawFairCurve_MinimalVariation self, Standard_Real const X, Standard_Real const Y, Draw_Display D, Standard_Real const Prec)

        :type X: float
        :type Y: float
        :type D: OCC.wrapper.Draw.Draw_Display
        :type Prec: float
        :type Index: int

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_FindKnot(self, *args)


    def SetPolesColor(self, *args):
        """
        SetPolesColor(Handle_DrawFairCurve_MinimalVariation self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_SetPolesColor(self, *args)


    def SetKnotsColor(self, *args):
        """
        SetKnotsColor(Handle_DrawFairCurve_MinimalVariation self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_SetKnotsColor(self, *args)


    def SetKnotsShape(self, *args):
        """
        SetKnotsShape(Handle_DrawFairCurve_MinimalVariation self, Draw_MarkerShape const Shape)

        :type Shape: OCC.wrapper.Draw.Draw_MarkerShape

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_SetKnotsShape(self, *args)


    def KnotsShape(self, *args):
        """
        KnotsShape(Handle_DrawFairCurve_MinimalVariation self) -> Draw_MarkerShape

        :rtype: OCC.wrapper.Draw.Draw_MarkerShape

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_KnotsShape(self, *args)


    def KnotsColor(self, *args):
        """
        KnotsColor(Handle_DrawFairCurve_MinimalVariation self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_KnotsColor(self, *args)


    def PolesColor(self, *args):
        """
        PolesColor(Handle_DrawFairCurve_MinimalVariation self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_PolesColor(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_DrawFairCurve_MinimalVariation self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_Copy(self, *args)


    def GetCurve(self, *args):
        """
        GetCurve(Handle_DrawFairCurve_MinimalVariation self) -> Handle_Geom2d_Curve

        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_GetCurve(self, *args)


    def SetColor(self, *args):
        """
        SetColor(Handle_DrawFairCurve_MinimalVariation self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_SetColor(self, *args)


    def ShowCurvature(self, *args):
        """ShowCurvature(Handle_DrawFairCurve_MinimalVariation self)"""
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_ShowCurvature(self, *args)


    def ClearCurvature(self, *args):
        """ClearCurvature(Handle_DrawFairCurve_MinimalVariation self)"""
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_ClearCurvature(self, *args)


    def SetRadiusMax(self, *args):
        """
        SetRadiusMax(Handle_DrawFairCurve_MinimalVariation self, Standard_Real const Radius)

        :type Radius: float

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_SetRadiusMax(self, *args)


    def SetRadiusRatio(self, *args):
        """
        SetRadiusRatio(Handle_DrawFairCurve_MinimalVariation self, Standard_Real const Ratio)

        :type Ratio: float

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_SetRadiusRatio(self, *args)


    def Color(self, *args):
        """
        Color(Handle_DrawFairCurve_MinimalVariation self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_Color(self, *args)


    def RadiusMax(self, *args):
        """
        RadiusMax(Handle_DrawFairCurve_MinimalVariation self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_RadiusMax(self, *args)


    def RadiusRatio(self, *args):
        """
        RadiusRatio(Handle_DrawFairCurve_MinimalVariation self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_RadiusRatio(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_DrawFairCurve_MinimalVariation self) -> Standard_Boolean

        Returns False.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_Is3D(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_DrawFairCurve_MinimalVariation self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_Whatis(self, *args)


    def DrawCurve2dOn(self, *args):
        """
        DrawCurve2dOn(Handle_DrawFairCurve_MinimalVariation self, Adaptor2d_Curve2d C, Draw_Display D)

        Draw a polygon of the curve on the Display

        :type C: OCC.wrapper.Adaptor2d.Adaptor2d_Curve2d
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_DrawCurve2dOn(self, *args)


    def DrawCurveOn(self, *args):
        """
        DrawCurveOn(Handle_DrawFairCurve_MinimalVariation self, Adaptor3d_Curve C, Draw_Display D)

        Draw a polygon of the curve on the Display

        :type C: OCC.wrapper.Adaptor3d.Adaptor3d_Curve
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_DrawCurveOn(self, *args)


    def DrawIsoCurveOn(self, *args):
        """
        DrawIsoCurveOn(Handle_DrawFairCurve_MinimalVariation self, Adaptor3d_IsoCurve C, GeomAbs_IsoType const T, Standard_Real const P, Standard_Real const F, Standard_Real const L, Draw_Display D)

        Load C  with the specified iso  and Draw a polygon
        of the curve on the Display

        :type C: OCC.wrapper.Adaptor3d.Adaptor3d_IsoCurve
        :type T: OCC.wrapper.GeomAbs.GeomAbs_IsoType
        :type P: float
        :type F: float
        :type L: float
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_DrawIsoCurveOn(self, *args)


    def SetDiscretisation(self, *args):
        """
        SetDiscretisation(Handle_DrawFairCurve_MinimalVariation self, Standard_Integer const Discret)

        :type Discret: int

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_SetDiscretisation(self, *args)


    def GetDiscretisation(self, *args):
        """
        GetDiscretisation(Handle_DrawFairCurve_MinimalVariation self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_GetDiscretisation(self, *args)


    def SetDeflection(self, *args):
        """
        SetDeflection(Handle_DrawFairCurve_MinimalVariation self, Standard_Real const Deflection)

        :type Deflection: float

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_SetDeflection(self, *args)


    def GetDeflection(self, *args):
        """
        GetDeflection(Handle_DrawFairCurve_MinimalVariation self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_GetDeflection(self, *args)


    def SetDrawMode(self, *args):
        """
        SetDrawMode(Handle_DrawFairCurve_MinimalVariation self, Standard_Integer const DrawMode)

        :type DrawMode: int

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_SetDrawMode(self, *args)


    def GetDrawMode(self, *args):
        """
        GetDrawMode(Handle_DrawFairCurve_MinimalVariation self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_GetDrawMode(self, *args)


    def PickReject(self, *args):
        """
        PickReject(Handle_DrawFairCurve_MinimalVariation self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_PickReject(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_DrawFairCurve_MinimalVariation self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_DrawFairCurve_MinimalVariation self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_DrawFairCurve_MinimalVariation self) -> Standard_Boolean
        Visible(Handle_DrawFairCurve_MinimalVariation self, Standard_Boolean const V)

        :type V: bool

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_DrawFairCurve_MinimalVariation self) -> Standard_Boolean
        Protected(Handle_DrawFairCurve_MinimalVariation self, Standard_Boolean const P)

        :type P: bool

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_DrawFairCurve_MinimalVariation self) -> Standard_CString
        Name(Handle_DrawFairCurve_MinimalVariation self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_DrawFairCurve_MinimalVariation self)

        Memory deallocator for transient classes


        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_DrawFairCurve_MinimalVariation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_DrawFairCurve_MinimalVariation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_DrawFairCurve_MinimalVariation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_DrawFairCurve_MinimalVariation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_DrawFairCurve_MinimalVariation self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_DrawFairCurve_MinimalVariation self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_DrawFairCurve_MinimalVariation self)

        Increments the reference counter of this object


        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_DrawFairCurve_MinimalVariation self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_DecrementRefCounter(self, *args)

Handle_DrawFairCurve_MinimalVariation_swigregister = _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_swigregister
Handle_DrawFairCurve_MinimalVariation_swigregister(Handle_DrawFairCurve_MinimalVariation)

def Handle_DrawFairCurve_MinimalVariation_DownCast(thing):
    return _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_DownCast(thing)
Handle_DrawFairCurve_MinimalVariation_DownCast = _DrawFairCurve.Handle_DrawFairCurve_MinimalVariation_DownCast

class Handle_DrawFairCurve_Batten(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_DrawFairCurve_Batten self)

        Nullify the handle


        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_DrawFairCurve_Batten self) -> bool

        Check for being null

        :rtype: bool

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_DrawFairCurve_Batten self, DrawFairCurve_Batten thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_DrawFairCurve_Batten self, Handle_DrawFairCurve_Batten theHandle) -> Handle_DrawFairCurve_Batten
        assign(Handle_DrawFairCurve_Batten self, DrawFairCurve_Batten thePtr) -> Handle_DrawFairCurve_Batten
        assign(Handle_DrawFairCurve_Batten self, Handle_DrawFairCurve_Batten theHandle) -> Handle_DrawFairCurve_Batten

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_DrawFairCurve_Batten self) -> DrawFairCurve_Batten

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_DrawFairCurve_Batten self) -> DrawFairCurve_Batten

        Member access operator (note non-const)

        :rtype: T *

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_DrawFairCurve_Batten self) -> DrawFairCurve_Batten

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten___ref__(self, *args)


    def __hash__(self):
        return _DrawFairCurve.Handle_DrawFairCurve_Batten___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _DrawFairCurve.Handle_DrawFairCurve_Batten___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _DrawFairCurve.new_Handle_DrawFairCurve_Batten(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_DrawFairCurve.Handle_DrawFairCurve_Batten_DownCast)
    __swig_destroy__ = _DrawFairCurve.delete_Handle_DrawFairCurve_Batten

    def Compute(self, *args):
        """Compute(Handle_DrawFairCurve_Batten self)"""
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_Compute(self, *args)


    def SetPoint(self, *args):
        """
        SetPoint(Handle_DrawFairCurve_Batten self, Standard_Integer const Side, gp_Pnt2d Point)

        :type Side: int
        :type Point: OCC.wrapper.gp.gp_Pnt2d

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_SetPoint(self, *args)


    def SetAngle(self, *args):
        """
        SetAngle(Handle_DrawFairCurve_Batten self, Standard_Integer const Side, Standard_Real const Angle)

        :type Side: int
        :type Angle: float

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_SetAngle(self, *args)


    def SetSliding(self, *args):
        """
        SetSliding(Handle_DrawFairCurve_Batten self, Standard_Real const Length)

        :type Length: float

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_SetSliding(self, *args)


    def SetHeight(self, *args):
        """
        SetHeight(Handle_DrawFairCurve_Batten self, Standard_Real const Heigth)

        :type Heigth: float

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_SetHeight(self, *args)


    def SetSlope(self, *args):
        """
        SetSlope(Handle_DrawFairCurve_Batten self, Standard_Real const Slope)

        :type Slope: float

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_SetSlope(self, *args)


    def GetAngle(self, *args):
        """
        GetAngle(Handle_DrawFairCurve_Batten self, Standard_Integer const Side) -> Standard_Real

        :type Side: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_GetAngle(self, *args)


    def GetSliding(self, *args):
        """
        GetSliding(Handle_DrawFairCurve_Batten self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_GetSliding(self, *args)


    def FreeSliding(self, *args):
        """FreeSliding(Handle_DrawFairCurve_Batten self)"""
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_FreeSliding(self, *args)


    def FreeAngle(self, *args):
        """
        FreeAngle(Handle_DrawFairCurve_Batten self, Standard_Integer const Side)

        :type Side: int

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_FreeAngle(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_DrawFairCurve_Batten self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_Dump(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_DrawFairCurve_Batten self) -> char const *

        :rtype: const char *

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawFairCurve.Handle_DrawFairCurve_Batten_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DrawFairCurve.Handle_DrawFairCurve_Batten_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DrawOn(self, *args):
        """
        DrawOn(Handle_DrawFairCurve_Batten self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_DrawOn(self, *args)


    def ShowPoles(self, *args):
        """ShowPoles(Handle_DrawFairCurve_Batten self)"""
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_ShowPoles(self, *args)


    def ShowKnots(self, *args):
        """ShowKnots(Handle_DrawFairCurve_Batten self)"""
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_ShowKnots(self, *args)


    def ClearPoles(self, *args):
        """ClearPoles(Handle_DrawFairCurve_Batten self)"""
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_ClearPoles(self, *args)


    def ClearKnots(self, *args):
        """ClearKnots(Handle_DrawFairCurve_Batten self)"""
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_ClearKnots(self, *args)


    def FindPole(self, *args):
        """
        FindPole(Handle_DrawFairCurve_Batten self, Standard_Real const X, Standard_Real const Y, Draw_Display D, Standard_Real const Prec)

        Returns in <Index> the index of the first pole  of the
        curve projected by the Display <D> at a distance lower
        than <Prec> from <X,Y>. If no pole  is found  index is
        set to 0, else index is always  greater than the input
        value of index.

        :type X: float
        :type Y: float
        :type D: OCC.wrapper.Draw.Draw_Display
        :type Prec: float
        :type Index: int

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_FindPole(self, *args)


    def FindKnot(self, *args):
        """
        FindKnot(Handle_DrawFairCurve_Batten self, Standard_Real const X, Standard_Real const Y, Draw_Display D, Standard_Real const Prec)

        :type X: float
        :type Y: float
        :type D: OCC.wrapper.Draw.Draw_Display
        :type Prec: float
        :type Index: int

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_FindKnot(self, *args)


    def SetPolesColor(self, *args):
        """
        SetPolesColor(Handle_DrawFairCurve_Batten self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_SetPolesColor(self, *args)


    def SetKnotsColor(self, *args):
        """
        SetKnotsColor(Handle_DrawFairCurve_Batten self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_SetKnotsColor(self, *args)


    def SetKnotsShape(self, *args):
        """
        SetKnotsShape(Handle_DrawFairCurve_Batten self, Draw_MarkerShape const Shape)

        :type Shape: OCC.wrapper.Draw.Draw_MarkerShape

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_SetKnotsShape(self, *args)


    def KnotsShape(self, *args):
        """
        KnotsShape(Handle_DrawFairCurve_Batten self) -> Draw_MarkerShape

        :rtype: OCC.wrapper.Draw.Draw_MarkerShape

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_KnotsShape(self, *args)


    def KnotsColor(self, *args):
        """
        KnotsColor(Handle_DrawFairCurve_Batten self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_KnotsColor(self, *args)


    def PolesColor(self, *args):
        """
        PolesColor(Handle_DrawFairCurve_Batten self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_PolesColor(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_DrawFairCurve_Batten self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_Copy(self, *args)


    def GetCurve(self, *args):
        """
        GetCurve(Handle_DrawFairCurve_Batten self) -> Handle_Geom2d_Curve

        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_GetCurve(self, *args)


    def SetColor(self, *args):
        """
        SetColor(Handle_DrawFairCurve_Batten self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_SetColor(self, *args)


    def ShowCurvature(self, *args):
        """ShowCurvature(Handle_DrawFairCurve_Batten self)"""
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_ShowCurvature(self, *args)


    def ClearCurvature(self, *args):
        """ClearCurvature(Handle_DrawFairCurve_Batten self)"""
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_ClearCurvature(self, *args)


    def SetRadiusMax(self, *args):
        """
        SetRadiusMax(Handle_DrawFairCurve_Batten self, Standard_Real const Radius)

        :type Radius: float

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_SetRadiusMax(self, *args)


    def SetRadiusRatio(self, *args):
        """
        SetRadiusRatio(Handle_DrawFairCurve_Batten self, Standard_Real const Ratio)

        :type Ratio: float

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_SetRadiusRatio(self, *args)


    def Color(self, *args):
        """
        Color(Handle_DrawFairCurve_Batten self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_Color(self, *args)


    def RadiusMax(self, *args):
        """
        RadiusMax(Handle_DrawFairCurve_Batten self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_RadiusMax(self, *args)


    def RadiusRatio(self, *args):
        """
        RadiusRatio(Handle_DrawFairCurve_Batten self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_RadiusRatio(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_DrawFairCurve_Batten self) -> Standard_Boolean

        Returns False.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_Is3D(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_DrawFairCurve_Batten self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_Whatis(self, *args)


    def DrawCurve2dOn(self, *args):
        """
        DrawCurve2dOn(Handle_DrawFairCurve_Batten self, Adaptor2d_Curve2d C, Draw_Display D)

        Draw a polygon of the curve on the Display

        :type C: OCC.wrapper.Adaptor2d.Adaptor2d_Curve2d
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_DrawCurve2dOn(self, *args)


    def DrawCurveOn(self, *args):
        """
        DrawCurveOn(Handle_DrawFairCurve_Batten self, Adaptor3d_Curve C, Draw_Display D)

        Draw a polygon of the curve on the Display

        :type C: OCC.wrapper.Adaptor3d.Adaptor3d_Curve
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_DrawCurveOn(self, *args)


    def DrawIsoCurveOn(self, *args):
        """
        DrawIsoCurveOn(Handle_DrawFairCurve_Batten self, Adaptor3d_IsoCurve C, GeomAbs_IsoType const T, Standard_Real const P, Standard_Real const F, Standard_Real const L, Draw_Display D)

        Load C  with the specified iso  and Draw a polygon
        of the curve on the Display

        :type C: OCC.wrapper.Adaptor3d.Adaptor3d_IsoCurve
        :type T: OCC.wrapper.GeomAbs.GeomAbs_IsoType
        :type P: float
        :type F: float
        :type L: float
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_DrawIsoCurveOn(self, *args)


    def SetDiscretisation(self, *args):
        """
        SetDiscretisation(Handle_DrawFairCurve_Batten self, Standard_Integer const Discret)

        :type Discret: int

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_SetDiscretisation(self, *args)


    def GetDiscretisation(self, *args):
        """
        GetDiscretisation(Handle_DrawFairCurve_Batten self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_GetDiscretisation(self, *args)


    def SetDeflection(self, *args):
        """
        SetDeflection(Handle_DrawFairCurve_Batten self, Standard_Real const Deflection)

        :type Deflection: float

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_SetDeflection(self, *args)


    def GetDeflection(self, *args):
        """
        GetDeflection(Handle_DrawFairCurve_Batten self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_GetDeflection(self, *args)


    def SetDrawMode(self, *args):
        """
        SetDrawMode(Handle_DrawFairCurve_Batten self, Standard_Integer const DrawMode)

        :type DrawMode: int

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_SetDrawMode(self, *args)


    def GetDrawMode(self, *args):
        """
        GetDrawMode(Handle_DrawFairCurve_Batten self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_GetDrawMode(self, *args)


    def PickReject(self, *args):
        """
        PickReject(Handle_DrawFairCurve_Batten self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_PickReject(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_DrawFairCurve_Batten self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_DrawFairCurve_Batten self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_DrawFairCurve_Batten self) -> Standard_Boolean
        Visible(Handle_DrawFairCurve_Batten self, Standard_Boolean const V)

        :type V: bool

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_DrawFairCurve_Batten self) -> Standard_Boolean
        Protected(Handle_DrawFairCurve_Batten self, Standard_Boolean const P)

        :type P: bool

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_DrawFairCurve_Batten self) -> Standard_CString
        Name(Handle_DrawFairCurve_Batten self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_DrawFairCurve_Batten self)

        Memory deallocator for transient classes


        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_DrawFairCurve_Batten self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_DrawFairCurve_Batten self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_DrawFairCurve_Batten self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_DrawFairCurve_Batten self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_DrawFairCurve_Batten self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_DrawFairCurve_Batten self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_DrawFairCurve_Batten self)

        Increments the reference counter of this object


        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_DrawFairCurve_Batten self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DrawFairCurve.Handle_DrawFairCurve_Batten_DecrementRefCounter(self, *args)

Handle_DrawFairCurve_Batten_swigregister = _DrawFairCurve.Handle_DrawFairCurve_Batten_swigregister
Handle_DrawFairCurve_Batten_swigregister(Handle_DrawFairCurve_Batten)

def Handle_DrawFairCurve_Batten_DownCast(thing):
    return _DrawFairCurve.Handle_DrawFairCurve_Batten_DownCast(thing)
Handle_DrawFairCurve_Batten_DownCast = _DrawFairCurve.Handle_DrawFairCurve_Batten_DownCast



