# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TShort')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TShort')
    _TShort = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TShort', [dirname(__file__)])
        except ImportError:
            import _TShort
            return _TShort
        try:
            _mod = imp.load_module('_TShort', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TShort = swig_import_helper()
    del swig_import_helper
else:
    import _TShort
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TShort.delete_SwigPyIterator

    def value(self):
        return _TShort.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _TShort.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _TShort.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _TShort.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _TShort.SwigPyIterator_equal(self, x)

    def copy(self):
        return _TShort.SwigPyIterator_copy(self)

    def next(self):
        return _TShort.SwigPyIterator_next(self)

    def __next__(self):
        return _TShort.SwigPyIterator___next__(self)

    def previous(self):
        return _TShort.SwigPyIterator_previous(self)

    def advance(self, n):
        return _TShort.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _TShort.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _TShort.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _TShort.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _TShort.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _TShort.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _TShort.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _TShort.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _TShort.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_TShort.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _TShort.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _TShort.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TShort.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _TShort.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _TShort.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _TShort.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _TShort.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_TShort.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _TShort.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _TShort.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TShort.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _TShort.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _TShort.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _TShort.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _TShort.ptr_to_number(item)
ptr_to_number = _TShort.ptr_to_number

def HashCode(*args):
    return _TShort.HashCode(*args)
HashCode = _TShort.HashCode

def ptr_equal(a, b):
    return _TShort.ptr_equal(a, b)
ptr_equal = _TShort.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
class TShort_HArray1OfShortReal(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TShort_HArray1OfShortReal
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TShort_HArray1OfShortReal(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TShort_HArray1OfShortReal self, Standard_Integer const theLower, Standard_Integer const theUpper) -> TShort_HArray1OfShortReal
        __init__(TShort_HArray1OfShortReal self, Standard_Integer const theLower, Standard_Integer const theUpper, TShort_Array1OfShortReal::value_type const & theValue) -> TShort_HArray1OfShortReal
        __init__(TShort_HArray1OfShortReal self, NCollection_Array1_Standard_ShortReal theOther) -> TShort_HArray1OfShortReal

        :type theOther: OCC.wrapper.TShort.TShort_Array1OfShortReal

        """
        this = _TShort.new_TShort_HArray1OfShortReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.TShort.TShort_Array1OfShortReal

        """
        res = _TShort.TShort_HArray1OfShortReal_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(TShort_HArray1OfShortReal self) -> NCollection_Array1_Standard_ShortReal

        :rtype: OCC.wrapper.TShort.TShort_Array1OfShortReal

        """
        return _TShort.TShort_HArray1OfShortReal_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TShort.TShort_HArray1OfShortReal_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TShort.TShort_HArray1OfShortReal_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TShort.TShort_HArray1OfShortReal_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TShort.delete_TShort_HArray1OfShortReal
TShort_HArray1OfShortReal_swigregister = _TShort.TShort_HArray1OfShortReal_swigregister
TShort_HArray1OfShortReal_swigregister(TShort_HArray1OfShortReal)

def TShort_HArray1OfShortReal_get_type_name(*args):
    """
    TShort_HArray1OfShortReal_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TShort.TShort_HArray1OfShortReal_get_type_name(*args)

def TShort_HArray1OfShortReal_get_type_descriptor(*args):
    """
    TShort_HArray1OfShortReal_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TShort.TShort_HArray1OfShortReal_get_type_descriptor(*args)

class NCollection_Array2_Standard_ShortReal(object):
    """
    Purpose:   The class Array2 represents bi-dimensional arrays 
    of fixed size known at run time. 
    The ranges of indices are user defined.

    Warning:   Programs clients of such class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.LowerRow(); i <= A.UpperRow(); i++)
    for (j = A.LowerCol(); j <= A.UpperCol(); j++)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Purpose:   The class Array2 represents bi-dimensional arrays 
        of fixed size known at run time. 
        The ranges of indices are user defined.

        Warning:   Programs clients of such class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.LowerRow(); i <= A.UpperRow(); i++)
        for (j = A.LowerCol(); j <= A.UpperCol(); j++)
        """
        this = _TShort.new_NCollection_Array2_Standard_ShortReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array2_Standard_ShortReal self, float const & theValue)

        Initialise the values

        :type theValue: const TheItemType &

        """
        return _TShort.NCollection_Array2_Standard_ShortReal_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array2_Standard_ShortReal self) -> Standard_Integer

        Size (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TShort.NCollection_Array2_Standard_ShortReal_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array2_Standard_ShortReal self) -> Standard_Integer

        Length (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TShort.NCollection_Array2_Standard_ShortReal_Length(self, *args)


    def RowLength(self, *args):
        """
        RowLength(NCollection_Array2_Standard_ShortReal self) -> Standard_Integer

        Returns length of the row, i.e. number of columns

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TShort.NCollection_Array2_Standard_ShortReal_RowLength(self, *args)


    def ColLength(self, *args):
        """
        ColLength(NCollection_Array2_Standard_ShortReal self) -> Standard_Integer

        Returns length of the column, i.e. number of rows

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TShort.NCollection_Array2_Standard_ShortReal_ColLength(self, *args)


    def LowerRow(self, *args):
        """
        LowerRow(NCollection_Array2_Standard_ShortReal self) -> Standard_Integer

        LowerRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TShort.NCollection_Array2_Standard_ShortReal_LowerRow(self, *args)


    def UpperRow(self, *args):
        """
        UpperRow(NCollection_Array2_Standard_ShortReal self) -> Standard_Integer

        UpperRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TShort.NCollection_Array2_Standard_ShortReal_UpperRow(self, *args)


    def LowerCol(self, *args):
        """
        LowerCol(NCollection_Array2_Standard_ShortReal self) -> Standard_Integer

        LowerCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TShort.NCollection_Array2_Standard_ShortReal_LowerCol(self, *args)


    def UpperCol(self, *args):
        """
        UpperCol(NCollection_Array2_Standard_ShortReal self) -> Standard_Integer

        UpperCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TShort.NCollection_Array2_Standard_ShortReal_UpperCol(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array2_Standard_ShortReal self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TShort.NCollection_Array2_Standard_ShortReal_IsDeletable(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array2_Standard_ShortReal self, NCollection_Array2_Standard_ShortReal theOther) -> NCollection_Array2_Standard_ShortReal

        Assignment

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _TShort.NCollection_Array2_Standard_ShortReal_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array2_Standard_ShortReal self, NCollection_Array2_Standard_ShortReal theOther) -> NCollection_Array2_Standard_ShortReal

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _TShort.NCollection_Array2_Standard_ShortReal_assign(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _TShort.NCollection_Array2_Standard_ShortReal_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array2_Standard_ShortReal self, Standard_Integer const theRow, Standard_Integer const theCol) -> float &

        Variable value access

        :type theRow: int
        :type theCol: int
        :rtype: TheItemType &

        """
        return _TShort.NCollection_Array2_Standard_ShortReal_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to ChangeValue

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _TShort.NCollection_Array2_Standard_ShortReal___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array2_Standard_ShortReal self, Standard_Integer const theRow, Standard_Integer const theCol, float const & theItem)

        SetValue

        :type theRow: int
        :type theCol: int
        :type theItem: const TheItemType &

        """
        return _TShort.NCollection_Array2_Standard_ShortReal_SetValue(self, *args)

    __swig_destroy__ = _TShort.delete_NCollection_Array2_Standard_ShortReal
NCollection_Array2_Standard_ShortReal_swigregister = _TShort.NCollection_Array2_Standard_ShortReal_swigregister
NCollection_Array2_Standard_ShortReal_swigregister(NCollection_Array2_Standard_ShortReal)


try:
	TShort_Array2OfShortReal = NCollection_Array2_Standard_ShortReal
except NameError:
	pass # does not exist, probably ignored

class TShort_HSequenceOfShortReal(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TShort_HSequenceOfShortReal
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TShort_HSequenceOfShortReal(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TShort_HSequenceOfShortReal self) -> TShort_HSequenceOfShortReal
        __init__(TShort_HSequenceOfShortReal self, NCollection_Sequence_Standard_ShortReal theOther) -> TShort_HSequenceOfShortReal

        :type theOther: OCC.wrapper.TShort.TShort_SequenceOfShortReal

        """
        this = _TShort.new_TShort_HSequenceOfShortReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.TShort.TShort_SequenceOfShortReal

        """
        res = _TShort.TShort_HSequenceOfShortReal_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(TShort_HSequenceOfShortReal self, TShort_SequenceOfShortReal::value_type const & theItem)
        Append(TShort_HSequenceOfShortReal self, NCollection_Sequence_Standard_ShortReal theSequence)

        :type theSequence: OCC.wrapper.TShort.TShort_SequenceOfShortReal

        """
        return _TShort.TShort_HSequenceOfShortReal_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(TShort_HSequenceOfShortReal self) -> NCollection_Sequence_Standard_ShortReal

        :rtype: OCC.wrapper.TShort.TShort_SequenceOfShortReal

        """
        return _TShort.TShort_HSequenceOfShortReal_ChangeSequence(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TShort.TShort_HSequenceOfShortReal_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TShort.TShort_HSequenceOfShortReal_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TShort.TShort_HSequenceOfShortReal_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TShort.delete_TShort_HSequenceOfShortReal
TShort_HSequenceOfShortReal_swigregister = _TShort.TShort_HSequenceOfShortReal_swigregister
TShort_HSequenceOfShortReal_swigregister(TShort_HSequenceOfShortReal)

def TShort_HSequenceOfShortReal_get_type_name(*args):
    """
    TShort_HSequenceOfShortReal_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TShort.TShort_HSequenceOfShortReal_get_type_name(*args)

def TShort_HSequenceOfShortReal_get_type_descriptor(*args):
    """
    TShort_HSequenceOfShortReal_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TShort.TShort_HSequenceOfShortReal_get_type_descriptor(*args)

class Handle_TShort_HSequenceOfShortReal(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TShort_HSequenceOfShortReal self)

        Nullify the handle


        """
        return _TShort.Handle_TShort_HSequenceOfShortReal_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TShort_HSequenceOfShortReal self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TShort.Handle_TShort_HSequenceOfShortReal_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TShort_HSequenceOfShortReal self, TShort_HSequenceOfShortReal thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TShort.Handle_TShort_HSequenceOfShortReal_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TShort_HSequenceOfShortReal self, Handle_TShort_HSequenceOfShortReal theHandle) -> Handle_TShort_HSequenceOfShortReal
        assign(Handle_TShort_HSequenceOfShortReal self, TShort_HSequenceOfShortReal thePtr) -> Handle_TShort_HSequenceOfShortReal
        assign(Handle_TShort_HSequenceOfShortReal self, Handle_TShort_HSequenceOfShortReal theHandle) -> Handle_TShort_HSequenceOfShortReal

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TShort.Handle_TShort_HSequenceOfShortReal_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TShort_HSequenceOfShortReal self) -> TShort_HSequenceOfShortReal

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TShort.Handle_TShort_HSequenceOfShortReal_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TShort_HSequenceOfShortReal self) -> TShort_HSequenceOfShortReal

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TShort.Handle_TShort_HSequenceOfShortReal___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TShort_HSequenceOfShortReal self) -> TShort_HSequenceOfShortReal

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TShort.Handle_TShort_HSequenceOfShortReal___ref__(self, *args)


    def __hash__(self):
        return _TShort.Handle_TShort_HSequenceOfShortReal___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TShort.Handle_TShort_HSequenceOfShortReal___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TShort.new_Handle_TShort_HSequenceOfShortReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TShort.Handle_TShort_HSequenceOfShortReal_DownCast)
    __swig_destroy__ = _TShort.delete_Handle_TShort_HSequenceOfShortReal

    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.TShort.TShort_SequenceOfShortReal

        """
        res = _TShort.Handle_TShort_HSequenceOfShortReal_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(Handle_TShort_HSequenceOfShortReal self, TShort_SequenceOfShortReal::value_type const & theItem)
        Append(Handle_TShort_HSequenceOfShortReal self, NCollection_Sequence_Standard_ShortReal theSequence)

        :type theSequence: OCC.wrapper.TShort.TShort_SequenceOfShortReal

        """
        return _TShort.Handle_TShort_HSequenceOfShortReal_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(Handle_TShort_HSequenceOfShortReal self) -> NCollection_Sequence_Standard_ShortReal

        :rtype: OCC.wrapper.TShort.TShort_SequenceOfShortReal

        """
        return _TShort.Handle_TShort_HSequenceOfShortReal_ChangeSequence(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TShort_HSequenceOfShortReal self) -> char const *

        :rtype: const char *

        """
        return _TShort.Handle_TShort_HSequenceOfShortReal_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TShort.Handle_TShort_HSequenceOfShortReal_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TShort.Handle_TShort_HSequenceOfShortReal_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TShort_HSequenceOfShortReal self)

        Memory deallocator for transient classes


        """
        return _TShort.Handle_TShort_HSequenceOfShortReal_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TShort_HSequenceOfShortReal self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TShort_HSequenceOfShortReal self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TShort.Handle_TShort_HSequenceOfShortReal_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TShort_HSequenceOfShortReal self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TShort_HSequenceOfShortReal self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TShort.Handle_TShort_HSequenceOfShortReal_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TShort_HSequenceOfShortReal self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TShort.Handle_TShort_HSequenceOfShortReal_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TShort_HSequenceOfShortReal self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TShort.Handle_TShort_HSequenceOfShortReal_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TShort_HSequenceOfShortReal self)

        Increments the reference counter of this object


        """
        return _TShort.Handle_TShort_HSequenceOfShortReal_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TShort_HSequenceOfShortReal self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TShort.Handle_TShort_HSequenceOfShortReal_DecrementRefCounter(self, *args)

Handle_TShort_HSequenceOfShortReal_swigregister = _TShort.Handle_TShort_HSequenceOfShortReal_swigregister
Handle_TShort_HSequenceOfShortReal_swigregister(Handle_TShort_HSequenceOfShortReal)

def Handle_TShort_HSequenceOfShortReal_DownCast(thing):
    return _TShort.Handle_TShort_HSequenceOfShortReal_DownCast(thing)
Handle_TShort_HSequenceOfShortReal_DownCast = _TShort.Handle_TShort_HSequenceOfShortReal_DownCast

class NCollection_Array1_Standard_ShortReal(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Standard_ShortReal self) -> NCollection_Array1< Standard_ShortReal >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _TShort.NCollection_Array1_Standard_ShortReal_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Standard_ShortReal self) -> NCollection_Array1< Standard_ShortReal >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _TShort.NCollection_Array1_Standard_ShortReal_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Standard_ShortReal self) -> NCollection_Array1< Standard_ShortReal >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _TShort.NCollection_Array1_Standard_ShortReal_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Standard_ShortReal self) -> NCollection_Array1< Standard_ShortReal >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _TShort.NCollection_Array1_Standard_ShortReal_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _TShort.new_NCollection_Array1_Standard_ShortReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Standard_ShortReal self, float const & theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _TShort.NCollection_Array1_Standard_ShortReal_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Standard_ShortReal self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TShort.NCollection_Array1_Standard_ShortReal_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Standard_ShortReal self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TShort.NCollection_Array1_Standard_ShortReal_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Standard_ShortReal self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TShort.NCollection_Array1_Standard_ShortReal_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Standard_ShortReal self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TShort.NCollection_Array1_Standard_ShortReal_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Standard_ShortReal self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TShort.NCollection_Array1_Standard_ShortReal_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Standard_ShortReal self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TShort.NCollection_Array1_Standard_ShortReal_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Standard_ShortReal self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TShort.NCollection_Array1_Standard_ShortReal_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Standard_ShortReal self, NCollection_Array1_Standard_ShortReal theOther) -> NCollection_Array1_Standard_ShortReal

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TShort.NCollection_Array1_Standard_ShortReal_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Standard_ShortReal self, NCollection_Array1_Standard_ShortReal theOther) -> NCollection_Array1_Standard_ShortReal

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TShort.NCollection_Array1_Standard_ShortReal_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Standard_ShortReal self, NCollection_Array1_Standard_ShortReal theOther) -> NCollection_Array1_Standard_ShortReal
        assign(NCollection_Array1_Standard_ShortReal self, NCollection_Array1_Standard_ShortReal theOther) -> NCollection_Array1_Standard_ShortReal

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TShort.NCollection_Array1_Standard_ShortReal_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _TShort.NCollection_Array1_Standard_ShortReal_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Standard_ShortReal self) -> float &

        @return first element

        :rtype: TheItemType &

        """
        return _TShort.NCollection_Array1_Standard_ShortReal_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _TShort.NCollection_Array1_Standard_ShortReal_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Standard_ShortReal self) -> float &

        @return last element

        :rtype: TheItemType &

        """
        return _TShort.NCollection_Array1_Standard_ShortReal_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TShort.NCollection_Array1_Standard_ShortReal_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Standard_ShortReal self, Standard_Integer const theIndex) -> float &

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _TShort.NCollection_Array1_Standard_ShortReal_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TShort.NCollection_Array1_Standard_ShortReal___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TShort.NCollection_Array1_Standard_ShortReal_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Standard_ShortReal self, Standard_Integer const theIndex, float const & theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TShort.NCollection_Array1_Standard_ShortReal_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Standard_ShortReal self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _TShort.NCollection_Array1_Standard_ShortReal_Resize(self, *args)

    __swig_destroy__ = _TShort.delete_NCollection_Array1_Standard_ShortReal
NCollection_Array1_Standard_ShortReal_swigregister = _TShort.NCollection_Array1_Standard_ShortReal_swigregister
NCollection_Array1_Standard_ShortReal_swigregister(NCollection_Array1_Standard_ShortReal)


try:
	TShort_Array1OfShortReal = NCollection_Array1_Standard_ShortReal
except NameError:
	pass # does not exist, probably ignored

class Handle_TShort_HArray1OfShortReal(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TShort_HArray1OfShortReal self)

        Nullify the handle


        """
        return _TShort.Handle_TShort_HArray1OfShortReal_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TShort_HArray1OfShortReal self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TShort.Handle_TShort_HArray1OfShortReal_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TShort_HArray1OfShortReal self, TShort_HArray1OfShortReal thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TShort.Handle_TShort_HArray1OfShortReal_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TShort_HArray1OfShortReal self, Handle_TShort_HArray1OfShortReal theHandle) -> Handle_TShort_HArray1OfShortReal
        assign(Handle_TShort_HArray1OfShortReal self, TShort_HArray1OfShortReal thePtr) -> Handle_TShort_HArray1OfShortReal
        assign(Handle_TShort_HArray1OfShortReal self, Handle_TShort_HArray1OfShortReal theHandle) -> Handle_TShort_HArray1OfShortReal

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TShort.Handle_TShort_HArray1OfShortReal_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TShort_HArray1OfShortReal self) -> TShort_HArray1OfShortReal

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TShort.Handle_TShort_HArray1OfShortReal_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TShort_HArray1OfShortReal self) -> TShort_HArray1OfShortReal

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TShort.Handle_TShort_HArray1OfShortReal___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TShort_HArray1OfShortReal self) -> TShort_HArray1OfShortReal

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TShort.Handle_TShort_HArray1OfShortReal___ref__(self, *args)


    def __hash__(self):
        return _TShort.Handle_TShort_HArray1OfShortReal___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TShort.Handle_TShort_HArray1OfShortReal___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TShort.new_Handle_TShort_HArray1OfShortReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TShort.Handle_TShort_HArray1OfShortReal_DownCast)
    __swig_destroy__ = _TShort.delete_Handle_TShort_HArray1OfShortReal

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.TShort.TShort_Array1OfShortReal

        """
        res = _TShort.Handle_TShort_HArray1OfShortReal_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_TShort_HArray1OfShortReal self) -> NCollection_Array1_Standard_ShortReal

        :rtype: OCC.wrapper.TShort.TShort_Array1OfShortReal

        """
        return _TShort.Handle_TShort_HArray1OfShortReal_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TShort_HArray1OfShortReal self) -> char const *

        :rtype: const char *

        """
        return _TShort.Handle_TShort_HArray1OfShortReal_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TShort.Handle_TShort_HArray1OfShortReal_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TShort.Handle_TShort_HArray1OfShortReal_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TShort_HArray1OfShortReal self)

        Memory deallocator for transient classes


        """
        return _TShort.Handle_TShort_HArray1OfShortReal_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TShort_HArray1OfShortReal self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TShort_HArray1OfShortReal self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TShort.Handle_TShort_HArray1OfShortReal_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TShort_HArray1OfShortReal self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TShort_HArray1OfShortReal self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TShort.Handle_TShort_HArray1OfShortReal_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TShort_HArray1OfShortReal self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TShort.Handle_TShort_HArray1OfShortReal_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TShort_HArray1OfShortReal self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TShort.Handle_TShort_HArray1OfShortReal_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TShort_HArray1OfShortReal self)

        Increments the reference counter of this object


        """
        return _TShort.Handle_TShort_HArray1OfShortReal_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TShort_HArray1OfShortReal self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TShort.Handle_TShort_HArray1OfShortReal_DecrementRefCounter(self, *args)

Handle_TShort_HArray1OfShortReal_swigregister = _TShort.Handle_TShort_HArray1OfShortReal_swigregister
Handle_TShort_HArray1OfShortReal_swigregister(Handle_TShort_HArray1OfShortReal)

def Handle_TShort_HArray1OfShortReal_DownCast(thing):
    return _TShort.Handle_TShort_HArray1OfShortReal_DownCast(thing)
Handle_TShort_HArray1OfShortReal_DownCast = _TShort.Handle_TShort_HArray1OfShortReal_DownCast

class TShort_HArray2OfShortReal(NCollection_Array2_Standard_ShortReal, Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TShort_HArray2OfShortReal
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TShort_HArray2OfShortReal(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TShort_HArray2OfShortReal self, Standard_Integer const theRowLow, Standard_Integer const theRowUpp, Standard_Integer const theColLow, Standard_Integer const theColUpp) -> TShort_HArray2OfShortReal
        __init__(TShort_HArray2OfShortReal self, Standard_Integer const theRowLow, Standard_Integer const theRowUpp, Standard_Integer const theColLow, Standard_Integer const theColUpp, TShort_Array2OfShortReal::value_type const & theValue) -> TShort_HArray2OfShortReal
        __init__(TShort_HArray2OfShortReal self, NCollection_Array2_Standard_ShortReal theOther) -> TShort_HArray2OfShortReal

        :type theOther: OCC.wrapper.TShort.TShort_Array2OfShortReal

        """
        this = _TShort.new_TShort_HArray2OfShortReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array2(self, *args):
        """
        :rtype: OCC.wrapper.TShort.TShort_Array2OfShortReal

        """
        res = _TShort.TShort_HArray2OfShortReal_Array2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray2(self, *args):
        """
        ChangeArray2(TShort_HArray2OfShortReal self) -> NCollection_Array2_Standard_ShortReal

        :rtype: OCC.wrapper.TShort.TShort_Array2OfShortReal

        """
        return _TShort.TShort_HArray2OfShortReal_ChangeArray2(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TShort.TShort_HArray2OfShortReal_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TShort.TShort_HArray2OfShortReal_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TShort.TShort_HArray2OfShortReal_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TShort.delete_TShort_HArray2OfShortReal
TShort_HArray2OfShortReal_swigregister = _TShort.TShort_HArray2OfShortReal_swigregister
TShort_HArray2OfShortReal_swigregister(TShort_HArray2OfShortReal)

def TShort_HArray2OfShortReal_get_type_name(*args):
    """
    TShort_HArray2OfShortReal_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TShort.TShort_HArray2OfShortReal_get_type_name(*args)

def TShort_HArray2OfShortReal_get_type_descriptor(*args):
    """
    TShort_HArray2OfShortReal_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TShort.TShort_HArray2OfShortReal_get_type_descriptor(*args)

class Handle_TShort_HArray2OfShortReal(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TShort_HArray2OfShortReal self)

        Nullify the handle


        """
        return _TShort.Handle_TShort_HArray2OfShortReal_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TShort_HArray2OfShortReal self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TShort.Handle_TShort_HArray2OfShortReal_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TShort_HArray2OfShortReal self, TShort_HArray2OfShortReal thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TShort.Handle_TShort_HArray2OfShortReal_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TShort_HArray2OfShortReal self, Handle_TShort_HArray2OfShortReal theHandle) -> Handle_TShort_HArray2OfShortReal
        assign(Handle_TShort_HArray2OfShortReal self, TShort_HArray2OfShortReal thePtr) -> Handle_TShort_HArray2OfShortReal
        assign(Handle_TShort_HArray2OfShortReal self, Handle_TShort_HArray2OfShortReal theHandle) -> Handle_TShort_HArray2OfShortReal

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TShort.Handle_TShort_HArray2OfShortReal_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TShort_HArray2OfShortReal self) -> TShort_HArray2OfShortReal

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TShort.Handle_TShort_HArray2OfShortReal_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TShort_HArray2OfShortReal self) -> TShort_HArray2OfShortReal

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TShort.Handle_TShort_HArray2OfShortReal___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TShort_HArray2OfShortReal self) -> TShort_HArray2OfShortReal

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TShort.Handle_TShort_HArray2OfShortReal___ref__(self, *args)


    def __hash__(self):
        return _TShort.Handle_TShort_HArray2OfShortReal___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TShort.Handle_TShort_HArray2OfShortReal___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TShort.new_Handle_TShort_HArray2OfShortReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TShort.Handle_TShort_HArray2OfShortReal_DownCast)
    __swig_destroy__ = _TShort.delete_Handle_TShort_HArray2OfShortReal

    def Array2(self, *args):
        """
        :rtype: OCC.wrapper.TShort.TShort_Array2OfShortReal

        """
        res = _TShort.Handle_TShort_HArray2OfShortReal_Array2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray2(self, *args):
        """
        ChangeArray2(Handle_TShort_HArray2OfShortReal self) -> NCollection_Array2_Standard_ShortReal

        :rtype: OCC.wrapper.TShort.TShort_Array2OfShortReal

        """
        return _TShort.Handle_TShort_HArray2OfShortReal_ChangeArray2(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TShort_HArray2OfShortReal self) -> char const *

        :rtype: const char *

        """
        return _TShort.Handle_TShort_HArray2OfShortReal_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TShort.Handle_TShort_HArray2OfShortReal_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TShort.Handle_TShort_HArray2OfShortReal_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_TShort_HArray2OfShortReal self, float const & theValue)

        Initialise the values

        :type theValue: const TheItemType &

        """
        return _TShort.Handle_TShort_HArray2OfShortReal_Init(self, *args)


    def Size(self, *args):
        """
        Size(Handle_TShort_HArray2OfShortReal self) -> Standard_Integer

        Size (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TShort.Handle_TShort_HArray2OfShortReal_Size(self, *args)


    def Length(self, *args):
        """
        Length(Handle_TShort_HArray2OfShortReal self) -> Standard_Integer

        Length (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TShort.Handle_TShort_HArray2OfShortReal_Length(self, *args)


    def RowLength(self, *args):
        """
        RowLength(Handle_TShort_HArray2OfShortReal self) -> Standard_Integer

        Returns length of the row, i.e. number of columns

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TShort.Handle_TShort_HArray2OfShortReal_RowLength(self, *args)


    def ColLength(self, *args):
        """
        ColLength(Handle_TShort_HArray2OfShortReal self) -> Standard_Integer

        Returns length of the column, i.e. number of rows

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TShort.Handle_TShort_HArray2OfShortReal_ColLength(self, *args)


    def LowerRow(self, *args):
        """
        LowerRow(Handle_TShort_HArray2OfShortReal self) -> Standard_Integer

        LowerRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TShort.Handle_TShort_HArray2OfShortReal_LowerRow(self, *args)


    def UpperRow(self, *args):
        """
        UpperRow(Handle_TShort_HArray2OfShortReal self) -> Standard_Integer

        UpperRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TShort.Handle_TShort_HArray2OfShortReal_UpperRow(self, *args)


    def LowerCol(self, *args):
        """
        LowerCol(Handle_TShort_HArray2OfShortReal self) -> Standard_Integer

        LowerCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TShort.Handle_TShort_HArray2OfShortReal_LowerCol(self, *args)


    def UpperCol(self, *args):
        """
        UpperCol(Handle_TShort_HArray2OfShortReal self) -> Standard_Integer

        UpperCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TShort.Handle_TShort_HArray2OfShortReal_UpperCol(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(Handle_TShort_HArray2OfShortReal self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TShort.Handle_TShort_HArray2OfShortReal_IsDeletable(self, *args)


    def Assign(self, *args):
        """
        Assign(Handle_TShort_HArray2OfShortReal self, NCollection_Array2_Standard_ShortReal theOther) -> NCollection_Array2_Standard_ShortReal

        Assignment

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _TShort.Handle_TShort_HArray2OfShortReal_Assign(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _TShort.Handle_TShort_HArray2OfShortReal_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __call__(self, *args):
        """
        operator() - alias to ChangeValue

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _TShort.Handle_TShort_HArray2OfShortReal___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(Handle_TShort_HArray2OfShortReal self, Standard_Integer const theRow, Standard_Integer const theCol) -> float &

        Variable value access

        :type theRow: int
        :type theCol: int
        :rtype: TheItemType &

        """
        return _TShort.Handle_TShort_HArray2OfShortReal_ChangeValue(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_TShort_HArray2OfShortReal self, Standard_Integer const theRow, Standard_Integer const theCol, float const & theItem)

        SetValue

        :type theRow: int
        :type theCol: int
        :type theItem: const TheItemType &

        """
        return _TShort.Handle_TShort_HArray2OfShortReal_SetValue(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_TShort_HArray2OfShortReal self)

        Memory deallocator for transient classes


        """
        return _TShort.Handle_TShort_HArray2OfShortReal_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TShort_HArray2OfShortReal self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TShort_HArray2OfShortReal self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TShort.Handle_TShort_HArray2OfShortReal_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TShort_HArray2OfShortReal self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TShort_HArray2OfShortReal self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TShort.Handle_TShort_HArray2OfShortReal_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TShort_HArray2OfShortReal self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TShort.Handle_TShort_HArray2OfShortReal_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TShort_HArray2OfShortReal self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TShort.Handle_TShort_HArray2OfShortReal_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TShort_HArray2OfShortReal self)

        Increments the reference counter of this object


        """
        return _TShort.Handle_TShort_HArray2OfShortReal_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TShort_HArray2OfShortReal self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TShort.Handle_TShort_HArray2OfShortReal_DecrementRefCounter(self, *args)

Handle_TShort_HArray2OfShortReal_swigregister = _TShort.Handle_TShort_HArray2OfShortReal_swigregister
Handle_TShort_HArray2OfShortReal_swigregister(Handle_TShort_HArray2OfShortReal)

def Handle_TShort_HArray2OfShortReal_DownCast(thing):
    return _TShort.Handle_TShort_HArray2OfShortReal_DownCast(thing)
Handle_TShort_HArray2OfShortReal_DownCast = _TShort.Handle_TShort_HArray2OfShortReal_DownCast

class NCollection_Sequence_Standard_ShortReal(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_Standard_ShortReal self) -> NCollection_Sequence< Standard_ShortReal >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _TShort.NCollection_Sequence_Standard_ShortReal_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_Standard_ShortReal self) -> NCollection_Sequence< Standard_ShortReal >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _TShort.NCollection_Sequence_Standard_ShortReal_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_Standard_ShortReal self) -> NCollection_Sequence< Standard_ShortReal >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _TShort.NCollection_Sequence_Standard_ShortReal_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_Standard_ShortReal self) -> NCollection_Sequence< Standard_ShortReal >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _TShort.NCollection_Sequence_Standard_ShortReal_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _TShort.new_NCollection_Sequence_Standard_ShortReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_Standard_ShortReal self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TShort.NCollection_Sequence_Standard_ShortReal_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_Standard_ShortReal self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TShort.NCollection_Sequence_Standard_ShortReal_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_Standard_ShortReal self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TShort.NCollection_Sequence_Standard_ShortReal_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_Standard_ShortReal self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TShort.NCollection_Sequence_Standard_ShortReal_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_Standard_ShortReal self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TShort.NCollection_Sequence_Standard_ShortReal_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_Standard_ShortReal self)

        Reverse sequence


        """
        return _TShort.NCollection_Sequence_Standard_ShortReal_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_Standard_ShortReal self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _TShort.NCollection_Sequence_Standard_ShortReal_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _TShort.NCollection_Sequence_Standard_ShortReal_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_Standard_ShortReal self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _TShort.NCollection_Sequence_Standard_ShortReal_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_Standard_ShortReal self, NCollection_Sequence_Standard_ShortReal theOther) -> NCollection_Sequence_Standard_ShortReal

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TShort.NCollection_Sequence_Standard_ShortReal_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_Standard_ShortReal self, NCollection_Sequence_Standard_ShortReal theOther) -> NCollection_Sequence_Standard_ShortReal

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TShort.NCollection_Sequence_Standard_ShortReal_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_Standard_ShortReal self, NCollection_Sequence< Standard_ShortReal >::Iterator & thePosition)
        Remove(NCollection_Sequence_Standard_ShortReal self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_Standard_ShortReal self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _TShort.NCollection_Sequence_Standard_ShortReal_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_Standard_ShortReal self, float const & theItem)
        Append(NCollection_Sequence_Standard_ShortReal self, NCollection_Sequence_Standard_ShortReal theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TShort.NCollection_Sequence_Standard_ShortReal_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_Standard_ShortReal self, float const & theItem)
        Prepend(NCollection_Sequence_Standard_ShortReal self, NCollection_Sequence_Standard_ShortReal theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TShort.NCollection_Sequence_Standard_ShortReal_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_Standard_ShortReal self, Standard_Integer const theIndex, float const & theItem)
        InsertBefore(NCollection_Sequence_Standard_ShortReal self, Standard_Integer const theIndex, NCollection_Sequence_Standard_ShortReal theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TShort.NCollection_Sequence_Standard_ShortReal_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_Standard_ShortReal self, NCollection_Sequence< Standard_ShortReal >::Iterator & thePosition, float const & theItem)
        InsertAfter(NCollection_Sequence_Standard_ShortReal self, Standard_Integer const theIndex, NCollection_Sequence_Standard_ShortReal theSeq)
        InsertAfter(NCollection_Sequence_Standard_ShortReal self, Standard_Integer const theIndex, float const & theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TShort.NCollection_Sequence_Standard_ShortReal_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_Standard_ShortReal self, Standard_Integer const theIndex, NCollection_Sequence_Standard_ShortReal theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TShort.NCollection_Sequence_Standard_ShortReal_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _TShort.NCollection_Sequence_Standard_ShortReal_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_Standard_ShortReal self) -> float &

        First item access

        :rtype: TheItemType &

        """
        return _TShort.NCollection_Sequence_Standard_ShortReal_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _TShort.NCollection_Sequence_Standard_ShortReal_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_Standard_ShortReal self) -> float &

        Last item access

        :rtype: TheItemType &

        """
        return _TShort.NCollection_Sequence_Standard_ShortReal_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TShort.NCollection_Sequence_Standard_ShortReal_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_Standard_ShortReal self, Standard_Integer const theIndex) -> float &

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _TShort.NCollection_Sequence_Standard_ShortReal_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TShort.NCollection_Sequence_Standard_ShortReal___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_Standard_ShortReal self, Standard_Integer const theIndex, float const & theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TShort.NCollection_Sequence_Standard_ShortReal_SetValue(self, *args)


    def __iter__(self):
        return _TShort.NCollection_Sequence_Standard_ShortReal___iter__(self)
    __swig_destroy__ = _TShort.delete_NCollection_Sequence_Standard_ShortReal
NCollection_Sequence_Standard_ShortReal_swigregister = _TShort.NCollection_Sequence_Standard_ShortReal_swigregister
NCollection_Sequence_Standard_ShortReal_swigregister(NCollection_Sequence_Standard_ShortReal)

def NCollection_Sequence_Standard_ShortReal_delNode(*args):
    """
    NCollection_Sequence_Standard_ShortReal_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _TShort.NCollection_Sequence_Standard_ShortReal_delNode(*args)

class NCollection_Sequence_Standard_ShortReal_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _TShort.new_NCollection_Sequence_Standard_ShortReal_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TShort.delete_NCollection_Sequence_Standard_ShortReal_IteratorHelper

    def __next__(self):
        return _TShort.NCollection_Sequence_Standard_ShortReal_IteratorHelper___next__(self)
NCollection_Sequence_Standard_ShortReal_IteratorHelper_swigregister = _TShort.NCollection_Sequence_Standard_ShortReal_IteratorHelper_swigregister
NCollection_Sequence_Standard_ShortReal_IteratorHelper_swigregister(NCollection_Sequence_Standard_ShortReal_IteratorHelper)


try:
	TShort_SequenceOfShortReal = NCollection_Sequence_Standard_ShortReal
except NameError:
	pass # does not exist, probably ignored



