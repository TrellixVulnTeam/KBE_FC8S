# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TColQuantity')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TColQuantity')
    _TColQuantity = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TColQuantity', [dirname(__file__)])
        except ImportError:
            import _TColQuantity
            return _TColQuantity
        try:
            _mod = imp.load_module('_TColQuantity', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TColQuantity = swig_import_helper()
    del swig_import_helper
else:
    import _TColQuantity
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TColQuantity.delete_SwigPyIterator

    def value(self):
        return _TColQuantity.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _TColQuantity.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _TColQuantity.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _TColQuantity.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _TColQuantity.SwigPyIterator_equal(self, x)

    def copy(self):
        return _TColQuantity.SwigPyIterator_copy(self)

    def next(self):
        return _TColQuantity.SwigPyIterator_next(self)

    def __next__(self):
        return _TColQuantity.SwigPyIterator___next__(self)

    def previous(self):
        return _TColQuantity.SwigPyIterator_previous(self)

    def advance(self, n):
        return _TColQuantity.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _TColQuantity.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _TColQuantity.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _TColQuantity.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _TColQuantity.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _TColQuantity.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _TColQuantity.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _TColQuantity.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _TColQuantity.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_TColQuantity.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _TColQuantity.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _TColQuantity.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TColQuantity.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _TColQuantity.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _TColQuantity.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _TColQuantity.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _TColQuantity.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_TColQuantity.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _TColQuantity.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _TColQuantity.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TColQuantity.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _TColQuantity.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _TColQuantity.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _TColQuantity.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _TColQuantity.ptr_to_number(item)
ptr_to_number = _TColQuantity.ptr_to_number

def HashCode(*args):
    return _TColQuantity.HashCode(*args)
HashCode = _TColQuantity.HashCode

def ptr_equal(a, b):
    return _TColQuantity.ptr_equal(a, b)
ptr_equal = _TColQuantity.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
class TColQuantity_HArray2OfLength(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TColQuantity_HArray2OfLength
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TColQuantity_HArray2OfLength(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TColQuantity_HArray2OfLength self, Standard_Integer const theRowLow, Standard_Integer const theRowUpp, Standard_Integer const theColLow, Standard_Integer const theColUpp) -> TColQuantity_HArray2OfLength
        __init__(TColQuantity_HArray2OfLength self, Standard_Integer const theRowLow, Standard_Integer const theRowUpp, Standard_Integer const theColLow, Standard_Integer const theColUpp, TColQuantity_Array2OfLength::value_type const & theValue) -> TColQuantity_HArray2OfLength
        __init__(TColQuantity_HArray2OfLength self, NCollection_Array2_Quantity_Length theOther) -> TColQuantity_HArray2OfLength

        :type theOther: OCC.wrapper.TColQuantity.TColQuantity_Array2OfLength

        """
        this = _TColQuantity.new_TColQuantity_HArray2OfLength(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array2(self, *args):
        """
        :rtype: OCC.wrapper.TColQuantity.TColQuantity_Array2OfLength

        """
        res = _TColQuantity.TColQuantity_HArray2OfLength_Array2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray2(self, *args):
        """
        ChangeArray2(TColQuantity_HArray2OfLength self) -> NCollection_Array2_Quantity_Length

        :rtype: OCC.wrapper.TColQuantity.TColQuantity_Array2OfLength

        """
        return _TColQuantity.TColQuantity_HArray2OfLength_ChangeArray2(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TColQuantity.TColQuantity_HArray2OfLength_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TColQuantity.TColQuantity_HArray2OfLength_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColQuantity.TColQuantity_HArray2OfLength_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TColQuantity.delete_TColQuantity_HArray2OfLength
TColQuantity_HArray2OfLength_swigregister = _TColQuantity.TColQuantity_HArray2OfLength_swigregister
TColQuantity_HArray2OfLength_swigregister(TColQuantity_HArray2OfLength)

def TColQuantity_HArray2OfLength_get_type_name(*args):
    """
    TColQuantity_HArray2OfLength_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TColQuantity.TColQuantity_HArray2OfLength_get_type_name(*args)

def TColQuantity_HArray2OfLength_get_type_descriptor(*args):
    """
    TColQuantity_HArray2OfLength_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TColQuantity.TColQuantity_HArray2OfLength_get_type_descriptor(*args)

class Handle_TColQuantity_HArray2OfLength(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TColQuantity_HArray2OfLength self)

        Nullify the handle


        """
        return _TColQuantity.Handle_TColQuantity_HArray2OfLength_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TColQuantity_HArray2OfLength self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TColQuantity.Handle_TColQuantity_HArray2OfLength_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TColQuantity_HArray2OfLength self, TColQuantity_HArray2OfLength thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TColQuantity.Handle_TColQuantity_HArray2OfLength_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TColQuantity_HArray2OfLength self, Handle_TColQuantity_HArray2OfLength theHandle) -> Handle_TColQuantity_HArray2OfLength
        assign(Handle_TColQuantity_HArray2OfLength self, TColQuantity_HArray2OfLength thePtr) -> Handle_TColQuantity_HArray2OfLength
        assign(Handle_TColQuantity_HArray2OfLength self, Handle_TColQuantity_HArray2OfLength theHandle) -> Handle_TColQuantity_HArray2OfLength

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TColQuantity.Handle_TColQuantity_HArray2OfLength_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TColQuantity_HArray2OfLength self) -> TColQuantity_HArray2OfLength

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TColQuantity.Handle_TColQuantity_HArray2OfLength_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TColQuantity_HArray2OfLength self) -> TColQuantity_HArray2OfLength

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TColQuantity.Handle_TColQuantity_HArray2OfLength___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TColQuantity_HArray2OfLength self) -> TColQuantity_HArray2OfLength

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TColQuantity.Handle_TColQuantity_HArray2OfLength___ref__(self, *args)


    def __hash__(self):
        return _TColQuantity.Handle_TColQuantity_HArray2OfLength___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TColQuantity.Handle_TColQuantity_HArray2OfLength___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TColQuantity.new_Handle_TColQuantity_HArray2OfLength(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TColQuantity.Handle_TColQuantity_HArray2OfLength_DownCast)
    __swig_destroy__ = _TColQuantity.delete_Handle_TColQuantity_HArray2OfLength

    def Array2(self, *args):
        """
        :rtype: OCC.wrapper.TColQuantity.TColQuantity_Array2OfLength

        """
        res = _TColQuantity.Handle_TColQuantity_HArray2OfLength_Array2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray2(self, *args):
        """
        ChangeArray2(Handle_TColQuantity_HArray2OfLength self) -> NCollection_Array2_Quantity_Length

        :rtype: OCC.wrapper.TColQuantity.TColQuantity_Array2OfLength

        """
        return _TColQuantity.Handle_TColQuantity_HArray2OfLength_ChangeArray2(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TColQuantity_HArray2OfLength self) -> char const *

        :rtype: const char *

        """
        return _TColQuantity.Handle_TColQuantity_HArray2OfLength_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColQuantity.Handle_TColQuantity_HArray2OfLength_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColQuantity.Handle_TColQuantity_HArray2OfLength_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TColQuantity_HArray2OfLength self)

        Memory deallocator for transient classes


        """
        return _TColQuantity.Handle_TColQuantity_HArray2OfLength_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TColQuantity_HArray2OfLength self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TColQuantity_HArray2OfLength self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColQuantity.Handle_TColQuantity_HArray2OfLength_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TColQuantity_HArray2OfLength self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TColQuantity_HArray2OfLength self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColQuantity.Handle_TColQuantity_HArray2OfLength_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TColQuantity_HArray2OfLength self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TColQuantity.Handle_TColQuantity_HArray2OfLength_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TColQuantity_HArray2OfLength self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColQuantity.Handle_TColQuantity_HArray2OfLength_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TColQuantity_HArray2OfLength self)

        Increments the reference counter of this object


        """
        return _TColQuantity.Handle_TColQuantity_HArray2OfLength_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TColQuantity_HArray2OfLength self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColQuantity.Handle_TColQuantity_HArray2OfLength_DecrementRefCounter(self, *args)

Handle_TColQuantity_HArray2OfLength_swigregister = _TColQuantity.Handle_TColQuantity_HArray2OfLength_swigregister
Handle_TColQuantity_HArray2OfLength_swigregister(Handle_TColQuantity_HArray2OfLength)

def Handle_TColQuantity_HArray2OfLength_DownCast(thing):
    return _TColQuantity.Handle_TColQuantity_HArray2OfLength_DownCast(thing)
Handle_TColQuantity_HArray2OfLength_DownCast = _TColQuantity.Handle_TColQuantity_HArray2OfLength_DownCast

class TColQuantity_HArray1OfLength(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TColQuantity_HArray1OfLength
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TColQuantity_HArray1OfLength(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TColQuantity_HArray1OfLength self, Standard_Integer const theLower, Standard_Integer const theUpper) -> TColQuantity_HArray1OfLength
        __init__(TColQuantity_HArray1OfLength self, Standard_Integer const theLower, Standard_Integer const theUpper, TColQuantity_Array1OfLength::value_type const & theValue) -> TColQuantity_HArray1OfLength
        __init__(TColQuantity_HArray1OfLength self, TColQuantity_Array1OfLength const & theOther) -> TColQuantity_HArray1OfLength

        :type theOther: OCC.wrapper.TColQuantity.TColQuantity_Array1OfLength

        """
        this = _TColQuantity.new_TColQuantity_HArray1OfLength(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.TColQuantity.TColQuantity_Array1OfLength

        """
        res = _TColQuantity.TColQuantity_HArray1OfLength_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(TColQuantity_HArray1OfLength self) -> TColQuantity_Array1OfLength &

        :rtype: OCC.wrapper.TColQuantity.TColQuantity_Array1OfLength

        """
        return _TColQuantity.TColQuantity_HArray1OfLength_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TColQuantity.TColQuantity_HArray1OfLength_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TColQuantity.TColQuantity_HArray1OfLength_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColQuantity.TColQuantity_HArray1OfLength_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TColQuantity.delete_TColQuantity_HArray1OfLength
TColQuantity_HArray1OfLength_swigregister = _TColQuantity.TColQuantity_HArray1OfLength_swigregister
TColQuantity_HArray1OfLength_swigregister(TColQuantity_HArray1OfLength)

def TColQuantity_HArray1OfLength_get_type_name(*args):
    """
    TColQuantity_HArray1OfLength_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TColQuantity.TColQuantity_HArray1OfLength_get_type_name(*args)

def TColQuantity_HArray1OfLength_get_type_descriptor(*args):
    """
    TColQuantity_HArray1OfLength_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TColQuantity.TColQuantity_HArray1OfLength_get_type_descriptor(*args)

class Handle_TColQuantity_HArray1OfLength(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TColQuantity_HArray1OfLength self)

        Nullify the handle


        """
        return _TColQuantity.Handle_TColQuantity_HArray1OfLength_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TColQuantity_HArray1OfLength self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TColQuantity.Handle_TColQuantity_HArray1OfLength_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TColQuantity_HArray1OfLength self, TColQuantity_HArray1OfLength thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TColQuantity.Handle_TColQuantity_HArray1OfLength_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TColQuantity_HArray1OfLength self, Handle_TColQuantity_HArray1OfLength theHandle) -> Handle_TColQuantity_HArray1OfLength
        assign(Handle_TColQuantity_HArray1OfLength self, TColQuantity_HArray1OfLength thePtr) -> Handle_TColQuantity_HArray1OfLength
        assign(Handle_TColQuantity_HArray1OfLength self, Handle_TColQuantity_HArray1OfLength theHandle) -> Handle_TColQuantity_HArray1OfLength

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TColQuantity.Handle_TColQuantity_HArray1OfLength_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TColQuantity_HArray1OfLength self) -> TColQuantity_HArray1OfLength

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TColQuantity.Handle_TColQuantity_HArray1OfLength_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TColQuantity_HArray1OfLength self) -> TColQuantity_HArray1OfLength

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TColQuantity.Handle_TColQuantity_HArray1OfLength___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TColQuantity_HArray1OfLength self) -> TColQuantity_HArray1OfLength

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TColQuantity.Handle_TColQuantity_HArray1OfLength___ref__(self, *args)


    def __hash__(self):
        return _TColQuantity.Handle_TColQuantity_HArray1OfLength___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TColQuantity.Handle_TColQuantity_HArray1OfLength___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TColQuantity.new_Handle_TColQuantity_HArray1OfLength(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TColQuantity.Handle_TColQuantity_HArray1OfLength_DownCast)
    __swig_destroy__ = _TColQuantity.delete_Handle_TColQuantity_HArray1OfLength

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.TColQuantity.TColQuantity_Array1OfLength

        """
        res = _TColQuantity.Handle_TColQuantity_HArray1OfLength_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_TColQuantity_HArray1OfLength self) -> TColQuantity_Array1OfLength &

        :rtype: OCC.wrapper.TColQuantity.TColQuantity_Array1OfLength

        """
        return _TColQuantity.Handle_TColQuantity_HArray1OfLength_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TColQuantity_HArray1OfLength self) -> char const *

        :rtype: const char *

        """
        return _TColQuantity.Handle_TColQuantity_HArray1OfLength_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColQuantity.Handle_TColQuantity_HArray1OfLength_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColQuantity.Handle_TColQuantity_HArray1OfLength_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TColQuantity_HArray1OfLength self)

        Memory deallocator for transient classes


        """
        return _TColQuantity.Handle_TColQuantity_HArray1OfLength_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TColQuantity_HArray1OfLength self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TColQuantity_HArray1OfLength self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColQuantity.Handle_TColQuantity_HArray1OfLength_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TColQuantity_HArray1OfLength self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TColQuantity_HArray1OfLength self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColQuantity.Handle_TColQuantity_HArray1OfLength_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TColQuantity_HArray1OfLength self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TColQuantity.Handle_TColQuantity_HArray1OfLength_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TColQuantity_HArray1OfLength self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColQuantity.Handle_TColQuantity_HArray1OfLength_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TColQuantity_HArray1OfLength self)

        Increments the reference counter of this object


        """
        return _TColQuantity.Handle_TColQuantity_HArray1OfLength_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TColQuantity_HArray1OfLength self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColQuantity.Handle_TColQuantity_HArray1OfLength_DecrementRefCounter(self, *args)

Handle_TColQuantity_HArray1OfLength_swigregister = _TColQuantity.Handle_TColQuantity_HArray1OfLength_swigregister
Handle_TColQuantity_HArray1OfLength_swigregister(Handle_TColQuantity_HArray1OfLength)

def Handle_TColQuantity_HArray1OfLength_DownCast(thing):
    return _TColQuantity.Handle_TColQuantity_HArray1OfLength_DownCast(thing)
Handle_TColQuantity_HArray1OfLength_DownCast = _TColQuantity.Handle_TColQuantity_HArray1OfLength_DownCast

class NCollection_Array2_Quantity_Length(object):
    """
    Purpose:   The class Array2 represents bi-dimensional arrays 
    of fixed size known at run time. 
    The ranges of indices are user defined.

    Warning:   Programs clients of such class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.LowerRow(); i <= A.UpperRow(); i++)
    for (j = A.LowerCol(); j <= A.UpperCol(); j++)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Purpose:   The class Array2 represents bi-dimensional arrays 
        of fixed size known at run time. 
        The ranges of indices are user defined.

        Warning:   Programs clients of such class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.LowerRow(); i <= A.UpperRow(); i++)
        for (j = A.LowerCol(); j <= A.UpperCol(); j++)
        """
        this = _TColQuantity.new_NCollection_Array2_Quantity_Length(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array2_Quantity_Length self, double const & theValue)

        Initialise the values

        :type theValue: const TheItemType &

        """
        return _TColQuantity.NCollection_Array2_Quantity_Length_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array2_Quantity_Length self) -> Standard_Integer

        Size (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColQuantity.NCollection_Array2_Quantity_Length_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array2_Quantity_Length self) -> Standard_Integer

        Length (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColQuantity.NCollection_Array2_Quantity_Length_Length(self, *args)


    def RowLength(self, *args):
        """
        RowLength(NCollection_Array2_Quantity_Length self) -> Standard_Integer

        Returns length of the row, i.e. number of columns

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColQuantity.NCollection_Array2_Quantity_Length_RowLength(self, *args)


    def ColLength(self, *args):
        """
        ColLength(NCollection_Array2_Quantity_Length self) -> Standard_Integer

        Returns length of the column, i.e. number of rows

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColQuantity.NCollection_Array2_Quantity_Length_ColLength(self, *args)


    def LowerRow(self, *args):
        """
        LowerRow(NCollection_Array2_Quantity_Length self) -> Standard_Integer

        LowerRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColQuantity.NCollection_Array2_Quantity_Length_LowerRow(self, *args)


    def UpperRow(self, *args):
        """
        UpperRow(NCollection_Array2_Quantity_Length self) -> Standard_Integer

        UpperRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColQuantity.NCollection_Array2_Quantity_Length_UpperRow(self, *args)


    def LowerCol(self, *args):
        """
        LowerCol(NCollection_Array2_Quantity_Length self) -> Standard_Integer

        LowerCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColQuantity.NCollection_Array2_Quantity_Length_LowerCol(self, *args)


    def UpperCol(self, *args):
        """
        UpperCol(NCollection_Array2_Quantity_Length self) -> Standard_Integer

        UpperCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColQuantity.NCollection_Array2_Quantity_Length_UpperCol(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array2_Quantity_Length self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColQuantity.NCollection_Array2_Quantity_Length_IsDeletable(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array2_Quantity_Length self, NCollection_Array2_Quantity_Length theOther) -> NCollection_Array2_Quantity_Length

        Assignment

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _TColQuantity.NCollection_Array2_Quantity_Length_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array2_Quantity_Length self, NCollection_Array2_Quantity_Length theOther) -> NCollection_Array2_Quantity_Length

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _TColQuantity.NCollection_Array2_Quantity_Length_assign(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _TColQuantity.NCollection_Array2_Quantity_Length_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array2_Quantity_Length self, Standard_Integer const theRow, Standard_Integer const theCol) -> double &

        Variable value access

        :type theRow: int
        :type theCol: int
        :rtype: TheItemType &

        """
        return _TColQuantity.NCollection_Array2_Quantity_Length_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to ChangeValue

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _TColQuantity.NCollection_Array2_Quantity_Length___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array2_Quantity_Length self, Standard_Integer const theRow, Standard_Integer const theCol, double const & theItem)

        SetValue

        :type theRow: int
        :type theCol: int
        :type theItem: const TheItemType &

        """
        return _TColQuantity.NCollection_Array2_Quantity_Length_SetValue(self, *args)

    __swig_destroy__ = _TColQuantity.delete_NCollection_Array2_Quantity_Length
NCollection_Array2_Quantity_Length_swigregister = _TColQuantity.NCollection_Array2_Quantity_Length_swigregister
NCollection_Array2_Quantity_Length_swigregister(NCollection_Array2_Quantity_Length)


try:
	TColQuantity_Array2OfLength = NCollection_Array2_Quantity_Length
except NameError:
	pass # does not exist, probably ignored


try:
	TColQuantity_Array1OfLength = NCollection_Array1_Quantity_Length
except NameError:
	pass # does not exist, probably ignored



