# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_GeomTools')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_GeomTools')
    _GeomTools = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GeomTools', [dirname(__file__)])
        except ImportError:
            import _GeomTools
            return _GeomTools
        try:
            _mod = imp.load_module('_GeomTools', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _GeomTools = swig_import_helper()
    del swig_import_helper
else:
    import _GeomTools
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GeomTools.delete_SwigPyIterator

    def value(self):
        return _GeomTools.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _GeomTools.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _GeomTools.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _GeomTools.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _GeomTools.SwigPyIterator_equal(self, x)

    def copy(self):
        return _GeomTools.SwigPyIterator_copy(self)

    def next(self):
        return _GeomTools.SwigPyIterator_next(self)

    def __next__(self):
        return _GeomTools.SwigPyIterator___next__(self)

    def previous(self):
        return _GeomTools.SwigPyIterator_previous(self)

    def advance(self, n):
        return _GeomTools.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _GeomTools.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _GeomTools.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _GeomTools.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _GeomTools.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _GeomTools.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _GeomTools.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _GeomTools.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _GeomTools.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_GeomTools.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _GeomTools.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _GeomTools.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GeomTools.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _GeomTools.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _GeomTools.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _GeomTools.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _GeomTools.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_GeomTools.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _GeomTools.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _GeomTools.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GeomTools.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _GeomTools.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _GeomTools.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _GeomTools.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _GeomTools.ptr_to_number(item)
ptr_to_number = _GeomTools.ptr_to_number

def HashCode(*args):
    return _GeomTools.HashCode(*args)
HashCode = _GeomTools.HashCode

def ptr_equal(a, b):
    return _GeomTools.ptr_equal(a, b)
ptr_equal = _GeomTools.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
class GeomTools_SurfaceSet(object):
    """Stores a set of Surfaces from Geom."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomTools_SurfaceSet self) -> GeomTools_SurfaceSet

        Returns an empty set of Surfaces.


        """
        this = _GeomTools.new_GeomTools_SurfaceSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Clear(self, *args):
        """
        Clear(GeomTools_SurfaceSet self)

        Clears the content of the set.


        """
        return _GeomTools.GeomTools_SurfaceSet_Clear(self, *args)


    def Add(self, *args):
        """
        Add(GeomTools_SurfaceSet self, Handle_Geom_Surface S) -> Standard_Integer

        Incorporate a new Surface in the  set and returns
        its index.

        :type S: OCC.wrapper.Geom.Handle_Geom_Surface
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomTools.GeomTools_SurfaceSet_Add(self, *args)


    def Surface(self, *args):
        """
        Surface(GeomTools_SurfaceSet self, Standard_Integer const I) -> Handle_Geom_Surface

        Returns the Surface of index <I>.

        :type I: int
        :rtype: OCC.wrapper.Geom.Handle_Geom_Surface

        """
        return _GeomTools.GeomTools_SurfaceSet_Surface(self, *args)


    def Index(self, *args):
        """
        Index(GeomTools_SurfaceSet self, Handle_Geom_Surface S) -> Standard_Integer

        Returns the index of <L>.

        :type S: OCC.wrapper.Geom.Handle_Geom_Surface
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomTools.GeomTools_SurfaceSet_Index(self, *args)


    def Dump(self, *args):
        """
        Dump(GeomTools_SurfaceSet self, Standard_OStream & OS)

        Dumps the content of me on the stream <OS>.

        :type OS: OCC.wrapper.Standard.Standard_OStream

        """
        return _GeomTools.GeomTools_SurfaceSet_Dump(self, *args)


    def Write(self, *args):
        """
        Write(GeomTools_SurfaceSet self, Standard_OStream & OS)

        Writes the content of  me  on the stream <OS> in a
        format that can be read back by Read.

        :type OS: OCC.wrapper.Standard.Standard_OStream

        """
        return _GeomTools.GeomTools_SurfaceSet_Write(self, *args)


    def Read(self, *args):
        """
        Read(GeomTools_SurfaceSet self, Standard_IStream & IS)

        Reads the content of me from the  stream  <IS>. me
        is first cleared.

        :type IS: OCC.wrapper.Standard.Standard_IStream

        """
        return _GeomTools.GeomTools_SurfaceSet_Read(self, *args)


    def PrintSurface(*args):
        """
        PrintSurface(Handle_Geom_Surface S, Standard_OStream & OS, Standard_Boolean const compact)

        Dumps the surface on the stream,  if compact is True
        use the compact format that can be read back.

        :type S: OCC.wrapper.Geom.Handle_Geom_Surface
        :type OS: OCC.wrapper.Standard.Standard_OStream
        :type compact: bool

        """
        return _GeomTools.GeomTools_SurfaceSet_PrintSurface(*args)

    PrintSurface = staticmethod(PrintSurface)

    def ReadSurface(*args):
        """
        ReadSurface(Standard_IStream & IS) -> Handle_Geom_Surface

        Reads the surface  from  the stream.  The  surface  is
        assumed   to have  been  written  with  the Print
        method (compact = True).

        :type IS: OCC.wrapper.Standard.Standard_IStream
        :rtype: OCC.wrapper.Geom.Handle_Geom_Surface

        """
        return _GeomTools.GeomTools_SurfaceSet_ReadSurface(*args)

    ReadSurface = staticmethod(ReadSurface)

    def SetProgress(self, *args):
        """
        SetProgress(GeomTools_SurfaceSet self, Handle_Message_ProgressIndicator PR)

        :type PR: OCC.wrapper.Message.Handle_Message_ProgressIndicator

        """
        return _GeomTools.GeomTools_SurfaceSet_SetProgress(self, *args)


    def GetProgress(self, *args):
        """
        GetProgress(GeomTools_SurfaceSet self) -> Handle_Message_ProgressIndicator

        :rtype: OCC.wrapper.Message.Handle_Message_ProgressIndicator

        """
        return _GeomTools.GeomTools_SurfaceSet_GetProgress(self, *args)

    __swig_destroy__ = _GeomTools.delete_GeomTools_SurfaceSet
GeomTools_SurfaceSet_swigregister = _GeomTools.GeomTools_SurfaceSet_swigregister
GeomTools_SurfaceSet_swigregister(GeomTools_SurfaceSet)

def GeomTools_SurfaceSet_PrintSurface(*args):
    """
    GeomTools_SurfaceSet_PrintSurface(Handle_Geom_Surface S, Standard_OStream & OS, Standard_Boolean const compact)

    Dumps the surface on the stream,  if compact is True
    use the compact format that can be read back.

    :type S: OCC.wrapper.Geom.Handle_Geom_Surface
    :type OS: OCC.wrapper.Standard.Standard_OStream
    :type compact: bool

    """
    return _GeomTools.GeomTools_SurfaceSet_PrintSurface(*args)

def GeomTools_SurfaceSet_ReadSurface(*args):
    """
    GeomTools_SurfaceSet_ReadSurface(Standard_IStream & IS) -> Handle_Geom_Surface

    Reads the surface  from  the stream.  The  surface  is
    assumed   to have  been  written  with  the Print
    method (compact = True).

    :type IS: OCC.wrapper.Standard.Standard_IStream
    :rtype: OCC.wrapper.Geom.Handle_Geom_Surface

    """
    return _GeomTools.GeomTools_SurfaceSet_ReadSurface(*args)

class GeomTools_Curve2dSet(object):
    """Stores a set of Curves from Geom2d."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomTools_Curve2dSet self) -> GeomTools_Curve2dSet

        Returns an empty set of Curves.


        """
        this = _GeomTools.new_GeomTools_Curve2dSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Clear(self, *args):
        """
        Clear(GeomTools_Curve2dSet self)

        Clears the content of the set.


        """
        return _GeomTools.GeomTools_Curve2dSet_Clear(self, *args)


    def Add(self, *args):
        """
        Add(GeomTools_Curve2dSet self, Handle_Geom2d_Curve C) -> Standard_Integer

        Incorporate a new Curve in the  set and returns
        its index.

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomTools.GeomTools_Curve2dSet_Add(self, *args)


    def Curve2d(self, *args):
        """
        Curve2d(GeomTools_Curve2dSet self, Standard_Integer const I) -> Handle_Geom2d_Curve

        Returns the Curve of index <I>.

        :type I: int
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _GeomTools.GeomTools_Curve2dSet_Curve2d(self, *args)


    def Index(self, *args):
        """
        Index(GeomTools_Curve2dSet self, Handle_Geom2d_Curve C) -> Standard_Integer

        Returns the index of <L>.

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomTools.GeomTools_Curve2dSet_Index(self, *args)


    def Dump(self, *args):
        """
        Dump(GeomTools_Curve2dSet self, Standard_OStream & OS)

        Dumps the content of me on the stream <OS>.

        :type OS: OCC.wrapper.Standard.Standard_OStream

        """
        return _GeomTools.GeomTools_Curve2dSet_Dump(self, *args)


    def Write(self, *args):
        """
        Write(GeomTools_Curve2dSet self, Standard_OStream & OS)

        Writes the content of  me  on the stream <OS> in a
        format that can be read back by Read.

        :type OS: OCC.wrapper.Standard.Standard_OStream

        """
        return _GeomTools.GeomTools_Curve2dSet_Write(self, *args)


    def Read(self, *args):
        """
        Read(GeomTools_Curve2dSet self, Standard_IStream & IS)

        Reads the content of me from the  stream  <IS>. me
        is first cleared.

        :type IS: OCC.wrapper.Standard.Standard_IStream

        """
        return _GeomTools.GeomTools_Curve2dSet_Read(self, *args)


    def PrintCurve2d(*args):
        """
        PrintCurve2d(Handle_Geom2d_Curve C, Standard_OStream & OS, Standard_Boolean const compact)

        Dumps the curve on the stream,  if compact is True
        use the compact format that can be read back.

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
        :type OS: OCC.wrapper.Standard.Standard_OStream
        :type compact: bool

        """
        return _GeomTools.GeomTools_Curve2dSet_PrintCurve2d(*args)

    PrintCurve2d = staticmethod(PrintCurve2d)

    def ReadCurve2d(*args):
        """
        ReadCurve2d(Standard_IStream & IS) -> Handle_Geom2d_Curve

        Reads the curve  from  the stream.  The  curve  is
        assumed   to have  been  written  with  the Print
        method (compact = True).

        :type IS: OCC.wrapper.Standard.Standard_IStream
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _GeomTools.GeomTools_Curve2dSet_ReadCurve2d(*args)

    ReadCurve2d = staticmethod(ReadCurve2d)

    def SetProgress(self, *args):
        """
        SetProgress(GeomTools_Curve2dSet self, Handle_Message_ProgressIndicator PR)

        :type PR: OCC.wrapper.Message.Handle_Message_ProgressIndicator

        """
        return _GeomTools.GeomTools_Curve2dSet_SetProgress(self, *args)


    def GetProgress(self, *args):
        """
        GetProgress(GeomTools_Curve2dSet self) -> Handle_Message_ProgressIndicator

        :rtype: OCC.wrapper.Message.Handle_Message_ProgressIndicator

        """
        return _GeomTools.GeomTools_Curve2dSet_GetProgress(self, *args)

    __swig_destroy__ = _GeomTools.delete_GeomTools_Curve2dSet
GeomTools_Curve2dSet_swigregister = _GeomTools.GeomTools_Curve2dSet_swigregister
GeomTools_Curve2dSet_swigregister(GeomTools_Curve2dSet)

def GeomTools_Curve2dSet_PrintCurve2d(*args):
    """
    GeomTools_Curve2dSet_PrintCurve2d(Handle_Geom2d_Curve C, Standard_OStream & OS, Standard_Boolean const compact)

    Dumps the curve on the stream,  if compact is True
    use the compact format that can be read back.

    :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
    :type OS: OCC.wrapper.Standard.Standard_OStream
    :type compact: bool

    """
    return _GeomTools.GeomTools_Curve2dSet_PrintCurve2d(*args)

def GeomTools_Curve2dSet_ReadCurve2d(*args):
    """
    GeomTools_Curve2dSet_ReadCurve2d(Standard_IStream & IS) -> Handle_Geom2d_Curve

    Reads the curve  from  the stream.  The  curve  is
    assumed   to have  been  written  with  the Print
    method (compact = True).

    :type IS: OCC.wrapper.Standard.Standard_IStream
    :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

    """
    return _GeomTools.GeomTools_Curve2dSet_ReadCurve2d(*args)

class GeomTools_UndefinedTypeHandler(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_GeomTools_UndefinedTypeHandler
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_GeomTools_UndefinedTypeHandler(self) 
            return h


    def __init__(self, *args):
        """__init__(GeomTools_UndefinedTypeHandler self) -> GeomTools_UndefinedTypeHandler"""
        this = _GeomTools.new_GeomTools_UndefinedTypeHandler(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def PrintCurve(self, *args):
        """
        PrintCurve(GeomTools_UndefinedTypeHandler self, Handle_Geom_Curve C, Standard_OStream & OS, Standard_Boolean const compact)

        :type C: OCC.wrapper.Geom.Handle_Geom_Curve
        :type OS: OCC.wrapper.Standard.Standard_OStream
        :type compact: bool

        """
        return _GeomTools.GeomTools_UndefinedTypeHandler_PrintCurve(self, *args)


    def ReadCurve(self, *args):
        """
        ReadCurve(GeomTools_UndefinedTypeHandler self, Standard_Integer const ctype, Standard_IStream & IS, Handle_Geom_Curve C) -> Standard_IStream &

        :type ctype: int
        :type IS: OCC.wrapper.Standard.Standard_IStream
        :type C: OCC.wrapper.Geom.Handle_Geom_Curve
        :rtype: OCC.wrapper.Standard.Standard_IStream

        """
        return _GeomTools.GeomTools_UndefinedTypeHandler_ReadCurve(self, *args)


    def PrintCurve2d(self, *args):
        """
        PrintCurve2d(GeomTools_UndefinedTypeHandler self, Handle_Geom2d_Curve C, Standard_OStream & OS, Standard_Boolean const compact)

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
        :type OS: OCC.wrapper.Standard.Standard_OStream
        :type compact: bool

        """
        return _GeomTools.GeomTools_UndefinedTypeHandler_PrintCurve2d(self, *args)


    def ReadCurve2d(self, *args):
        """
        ReadCurve2d(GeomTools_UndefinedTypeHandler self, Standard_Integer const ctype, Standard_IStream & IS, Handle_Geom2d_Curve C) -> Standard_IStream &

        :type ctype: int
        :type IS: OCC.wrapper.Standard.Standard_IStream
        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
        :rtype: OCC.wrapper.Standard.Standard_IStream

        """
        return _GeomTools.GeomTools_UndefinedTypeHandler_ReadCurve2d(self, *args)


    def PrintSurface(self, *args):
        """
        PrintSurface(GeomTools_UndefinedTypeHandler self, Handle_Geom_Surface S, Standard_OStream & OS, Standard_Boolean const compact)

        :type S: OCC.wrapper.Geom.Handle_Geom_Surface
        :type OS: OCC.wrapper.Standard.Standard_OStream
        :type compact: bool

        """
        return _GeomTools.GeomTools_UndefinedTypeHandler_PrintSurface(self, *args)


    def ReadSurface(self, *args):
        """
        ReadSurface(GeomTools_UndefinedTypeHandler self, Standard_Integer const ctype, Standard_IStream & IS, Handle_Geom_Surface S) -> Standard_IStream &

        :type ctype: int
        :type IS: OCC.wrapper.Standard.Standard_IStream
        :type S: OCC.wrapper.Geom.Handle_Geom_Surface
        :rtype: OCC.wrapper.Standard.Standard_IStream

        """
        return _GeomTools.GeomTools_UndefinedTypeHandler_ReadSurface(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _GeomTools.GeomTools_UndefinedTypeHandler_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _GeomTools.GeomTools_UndefinedTypeHandler_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomTools.GeomTools_UndefinedTypeHandler_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomTools.delete_GeomTools_UndefinedTypeHandler
GeomTools_UndefinedTypeHandler_swigregister = _GeomTools.GeomTools_UndefinedTypeHandler_swigregister
GeomTools_UndefinedTypeHandler_swigregister(GeomTools_UndefinedTypeHandler)

def GeomTools_UndefinedTypeHandler_get_type_name(*args):
    """
    GeomTools_UndefinedTypeHandler_get_type_name() -> char const *

    :rtype: const char *

    """
    return _GeomTools.GeomTools_UndefinedTypeHandler_get_type_name(*args)

def GeomTools_UndefinedTypeHandler_get_type_descriptor(*args):
    """
    GeomTools_UndefinedTypeHandler_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _GeomTools.GeomTools_UndefinedTypeHandler_get_type_descriptor(*args)

class GeomTools_CurveSet(object):
    """Stores a set of Curves from Geom."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomTools_CurveSet self) -> GeomTools_CurveSet

        Returns an empty set of Curves.


        """
        this = _GeomTools.new_GeomTools_CurveSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Clear(self, *args):
        """
        Clear(GeomTools_CurveSet self)

        Clears the content of the set.


        """
        return _GeomTools.GeomTools_CurveSet_Clear(self, *args)


    def Add(self, *args):
        """
        Add(GeomTools_CurveSet self, Handle_Geom_Curve C) -> Standard_Integer

        Incorporate a new Curve in the  set and returns
        its index.

        :type C: OCC.wrapper.Geom.Handle_Geom_Curve
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomTools.GeomTools_CurveSet_Add(self, *args)


    def Curve(self, *args):
        """
        Curve(GeomTools_CurveSet self, Standard_Integer const I) -> Handle_Geom_Curve

        Returns the Curve of index <I>.

        :type I: int
        :rtype: OCC.wrapper.Geom.Handle_Geom_Curve

        """
        return _GeomTools.GeomTools_CurveSet_Curve(self, *args)


    def Index(self, *args):
        """
        Index(GeomTools_CurveSet self, Handle_Geom_Curve C) -> Standard_Integer

        Returns the index of <L>.

        :type C: OCC.wrapper.Geom.Handle_Geom_Curve
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomTools.GeomTools_CurveSet_Index(self, *args)


    def Dump(self, *args):
        """
        Dump(GeomTools_CurveSet self, Standard_OStream & OS)

        Dumps the content of me on the stream <OS>.

        :type OS: OCC.wrapper.Standard.Standard_OStream

        """
        return _GeomTools.GeomTools_CurveSet_Dump(self, *args)


    def Write(self, *args):
        """
        Write(GeomTools_CurveSet self, Standard_OStream & OS)

        Writes the content of  me  on the stream <OS> in a
        format that can be read back by Read.

        :type OS: OCC.wrapper.Standard.Standard_OStream

        """
        return _GeomTools.GeomTools_CurveSet_Write(self, *args)


    def Read(self, *args):
        """
        Read(GeomTools_CurveSet self, Standard_IStream & IS)

        Reads the content of me from the  stream  <IS>. me
        is first cleared.

        :type IS: OCC.wrapper.Standard.Standard_IStream

        """
        return _GeomTools.GeomTools_CurveSet_Read(self, *args)


    def PrintCurve(*args):
        """
        PrintCurve(Handle_Geom_Curve C, Standard_OStream & OS, Standard_Boolean const compact)

        Dumps the curve on the stream,  if compact is True
        use the compact format that can be read back.

        :type C: OCC.wrapper.Geom.Handle_Geom_Curve
        :type OS: OCC.wrapper.Standard.Standard_OStream
        :type compact: bool

        """
        return _GeomTools.GeomTools_CurveSet_PrintCurve(*args)

    PrintCurve = staticmethod(PrintCurve)

    def ReadCurve(*args):
        """
        ReadCurve(Standard_IStream & IS) -> Handle_Geom_Curve

        Reads the curve  from  the stream.  The  curve  is
        assumed   to have  been  written  with  the Print
        method (compact = True).

        :type IS: OCC.wrapper.Standard.Standard_IStream
        :rtype: OCC.wrapper.Geom.Handle_Geom_Curve

        """
        return _GeomTools.GeomTools_CurveSet_ReadCurve(*args)

    ReadCurve = staticmethod(ReadCurve)

    def SetProgress(self, *args):
        """
        SetProgress(GeomTools_CurveSet self, Handle_Message_ProgressIndicator PR)

        :type PR: OCC.wrapper.Message.Handle_Message_ProgressIndicator

        """
        return _GeomTools.GeomTools_CurveSet_SetProgress(self, *args)


    def GetProgress(self, *args):
        """
        GetProgress(GeomTools_CurveSet self) -> Handle_Message_ProgressIndicator

        :rtype: OCC.wrapper.Message.Handle_Message_ProgressIndicator

        """
        return _GeomTools.GeomTools_CurveSet_GetProgress(self, *args)

    __swig_destroy__ = _GeomTools.delete_GeomTools_CurveSet
GeomTools_CurveSet_swigregister = _GeomTools.GeomTools_CurveSet_swigregister
GeomTools_CurveSet_swigregister(GeomTools_CurveSet)

def GeomTools_CurveSet_PrintCurve(*args):
    """
    GeomTools_CurveSet_PrintCurve(Handle_Geom_Curve C, Standard_OStream & OS, Standard_Boolean const compact)

    Dumps the curve on the stream,  if compact is True
    use the compact format that can be read back.

    :type C: OCC.wrapper.Geom.Handle_Geom_Curve
    :type OS: OCC.wrapper.Standard.Standard_OStream
    :type compact: bool

    """
    return _GeomTools.GeomTools_CurveSet_PrintCurve(*args)

def GeomTools_CurveSet_ReadCurve(*args):
    """
    GeomTools_CurveSet_ReadCurve(Standard_IStream & IS) -> Handle_Geom_Curve

    Reads the curve  from  the stream.  The  curve  is
    assumed   to have  been  written  with  the Print
    method (compact = True).

    :type IS: OCC.wrapper.Standard.Standard_IStream
    :rtype: OCC.wrapper.Geom.Handle_Geom_Curve

    """
    return _GeomTools.GeomTools_CurveSet_ReadCurve(*args)

class Handle_GeomTools_UndefinedTypeHandler(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_GeomTools_UndefinedTypeHandler self)

        Nullify the handle


        """
        return _GeomTools.Handle_GeomTools_UndefinedTypeHandler_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_GeomTools_UndefinedTypeHandler self) -> bool

        Check for being null

        :rtype: bool

        """
        return _GeomTools.Handle_GeomTools_UndefinedTypeHandler_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_GeomTools_UndefinedTypeHandler self, GeomTools_UndefinedTypeHandler thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _GeomTools.Handle_GeomTools_UndefinedTypeHandler_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_GeomTools_UndefinedTypeHandler self, Handle_GeomTools_UndefinedTypeHandler theHandle) -> Handle_GeomTools_UndefinedTypeHandler
        assign(Handle_GeomTools_UndefinedTypeHandler self, GeomTools_UndefinedTypeHandler thePtr) -> Handle_GeomTools_UndefinedTypeHandler
        assign(Handle_GeomTools_UndefinedTypeHandler self, Handle_GeomTools_UndefinedTypeHandler theHandle) -> Handle_GeomTools_UndefinedTypeHandler

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _GeomTools.Handle_GeomTools_UndefinedTypeHandler_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_GeomTools_UndefinedTypeHandler self) -> GeomTools_UndefinedTypeHandler

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _GeomTools.Handle_GeomTools_UndefinedTypeHandler_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_GeomTools_UndefinedTypeHandler self) -> GeomTools_UndefinedTypeHandler

        Member access operator (note non-const)

        :rtype: T *

        """
        return _GeomTools.Handle_GeomTools_UndefinedTypeHandler___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_GeomTools_UndefinedTypeHandler self) -> GeomTools_UndefinedTypeHandler

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _GeomTools.Handle_GeomTools_UndefinedTypeHandler___ref__(self, *args)


    def __hash__(self):
        return _GeomTools.Handle_GeomTools_UndefinedTypeHandler___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _GeomTools.Handle_GeomTools_UndefinedTypeHandler___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _GeomTools.new_Handle_GeomTools_UndefinedTypeHandler(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_GeomTools.Handle_GeomTools_UndefinedTypeHandler_DownCast)
    __swig_destroy__ = _GeomTools.delete_Handle_GeomTools_UndefinedTypeHandler

    def PrintCurve(self, *args):
        """
        PrintCurve(Handle_GeomTools_UndefinedTypeHandler self, Handle_Geom_Curve C, Standard_OStream & OS, Standard_Boolean const compact)

        :type C: OCC.wrapper.Geom.Handle_Geom_Curve
        :type OS: OCC.wrapper.Standard.Standard_OStream
        :type compact: bool

        """
        return _GeomTools.Handle_GeomTools_UndefinedTypeHandler_PrintCurve(self, *args)


    def ReadCurve(self, *args):
        """
        ReadCurve(Handle_GeomTools_UndefinedTypeHandler self, Standard_Integer const ctype, Standard_IStream & IS, Handle_Geom_Curve C) -> Standard_IStream &

        :type ctype: int
        :type IS: OCC.wrapper.Standard.Standard_IStream
        :type C: OCC.wrapper.Geom.Handle_Geom_Curve
        :rtype: OCC.wrapper.Standard.Standard_IStream

        """
        return _GeomTools.Handle_GeomTools_UndefinedTypeHandler_ReadCurve(self, *args)


    def PrintCurve2d(self, *args):
        """
        PrintCurve2d(Handle_GeomTools_UndefinedTypeHandler self, Handle_Geom2d_Curve C, Standard_OStream & OS, Standard_Boolean const compact)

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
        :type OS: OCC.wrapper.Standard.Standard_OStream
        :type compact: bool

        """
        return _GeomTools.Handle_GeomTools_UndefinedTypeHandler_PrintCurve2d(self, *args)


    def ReadCurve2d(self, *args):
        """
        ReadCurve2d(Handle_GeomTools_UndefinedTypeHandler self, Standard_Integer const ctype, Standard_IStream & IS, Handle_Geom2d_Curve C) -> Standard_IStream &

        :type ctype: int
        :type IS: OCC.wrapper.Standard.Standard_IStream
        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
        :rtype: OCC.wrapper.Standard.Standard_IStream

        """
        return _GeomTools.Handle_GeomTools_UndefinedTypeHandler_ReadCurve2d(self, *args)


    def PrintSurface(self, *args):
        """
        PrintSurface(Handle_GeomTools_UndefinedTypeHandler self, Handle_Geom_Surface S, Standard_OStream & OS, Standard_Boolean const compact)

        :type S: OCC.wrapper.Geom.Handle_Geom_Surface
        :type OS: OCC.wrapper.Standard.Standard_OStream
        :type compact: bool

        """
        return _GeomTools.Handle_GeomTools_UndefinedTypeHandler_PrintSurface(self, *args)


    def ReadSurface(self, *args):
        """
        ReadSurface(Handle_GeomTools_UndefinedTypeHandler self, Standard_Integer const ctype, Standard_IStream & IS, Handle_Geom_Surface S) -> Standard_IStream &

        :type ctype: int
        :type IS: OCC.wrapper.Standard.Standard_IStream
        :type S: OCC.wrapper.Geom.Handle_Geom_Surface
        :rtype: OCC.wrapper.Standard.Standard_IStream

        """
        return _GeomTools.Handle_GeomTools_UndefinedTypeHandler_ReadSurface(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_GeomTools_UndefinedTypeHandler self) -> char const *

        :rtype: const char *

        """
        return _GeomTools.Handle_GeomTools_UndefinedTypeHandler_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomTools.Handle_GeomTools_UndefinedTypeHandler_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomTools.Handle_GeomTools_UndefinedTypeHandler_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_GeomTools_UndefinedTypeHandler self)

        Memory deallocator for transient classes


        """
        return _GeomTools.Handle_GeomTools_UndefinedTypeHandler_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_GeomTools_UndefinedTypeHandler self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_GeomTools_UndefinedTypeHandler self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomTools.Handle_GeomTools_UndefinedTypeHandler_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_GeomTools_UndefinedTypeHandler self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_GeomTools_UndefinedTypeHandler self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomTools.Handle_GeomTools_UndefinedTypeHandler_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_GeomTools_UndefinedTypeHandler self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _GeomTools.Handle_GeomTools_UndefinedTypeHandler_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_GeomTools_UndefinedTypeHandler self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomTools.Handle_GeomTools_UndefinedTypeHandler_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_GeomTools_UndefinedTypeHandler self)

        Increments the reference counter of this object


        """
        return _GeomTools.Handle_GeomTools_UndefinedTypeHandler_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_GeomTools_UndefinedTypeHandler self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomTools.Handle_GeomTools_UndefinedTypeHandler_DecrementRefCounter(self, *args)

Handle_GeomTools_UndefinedTypeHandler_swigregister = _GeomTools.Handle_GeomTools_UndefinedTypeHandler_swigregister
Handle_GeomTools_UndefinedTypeHandler_swigregister(Handle_GeomTools_UndefinedTypeHandler)

def Handle_GeomTools_UndefinedTypeHandler_DownCast(thing):
    return _GeomTools.Handle_GeomTools_UndefinedTypeHandler_DownCast(thing)
Handle_GeomTools_UndefinedTypeHandler_DownCast = _GeomTools.Handle_GeomTools_UndefinedTypeHandler_DownCast

class GeomTools_(object):
    """
    The GeomTools package provides  utilities for Geometry.

    *  SurfaceSet,  CurveSet, Curve2dSet  : Tools used
    for dumping, writing and reading.

    * Methods to dump, write, read curves and surfaces.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Dump(*args):
        """
        Dump(Handle_Geom_Surface S, Standard_OStream & OS)
        Dump(Handle_Geom_Curve C, Standard_OStream & OS)
        Dump(Handle_Geom2d_Curve C, Standard_OStream & OS)

        Dumps the Curve on the stream.

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
        :type OS: OCC.wrapper.Standard.Standard_OStream

        """
        return _GeomTools.GeomTools__Dump(*args)

    Dump = staticmethod(Dump)

    def Write(*args):
        """
        Write(Handle_Geom_Surface S, Standard_OStream & OS)
        Write(Handle_Geom_Curve C, Standard_OStream & OS)
        Write(Handle_Geom2d_Curve C, Standard_OStream & OS)

        Writes the Curve on the stream.

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
        :type OS: OCC.wrapper.Standard.Standard_OStream

        """
        return _GeomTools.GeomTools__Write(*args)

    Write = staticmethod(Write)

    def Read(*args):
        """
        Read(Handle_Geom_Surface S, Standard_IStream & IS)
        Read(Handle_Geom_Curve C, Standard_IStream & IS)
        Read(Handle_Geom2d_Curve C, Standard_IStream & IS)

        Reads the Curve from the stream.

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
        :type IS: OCC.wrapper.Standard.Standard_IStream

        """
        return _GeomTools.GeomTools__Read(*args)

    Read = staticmethod(Read)

    def SetUndefinedTypeHandler(*args):
        """
        SetUndefinedTypeHandler(Handle_GeomTools_UndefinedTypeHandler aHandler)

        :type aHandler: OCC.wrapper.GeomTools.Handle_GeomTools_UndefinedTypeHandler

        """
        return _GeomTools.GeomTools__SetUndefinedTypeHandler(*args)

    SetUndefinedTypeHandler = staticmethod(SetUndefinedTypeHandler)

    def GetUndefinedTypeHandler(*args):
        """
        GetUndefinedTypeHandler() -> Handle_GeomTools_UndefinedTypeHandler

        :rtype: OCC.wrapper.GeomTools.Handle_GeomTools_UndefinedTypeHandler

        """
        return _GeomTools.GeomTools__GetUndefinedTypeHandler(*args)

    GetUndefinedTypeHandler = staticmethod(GetUndefinedTypeHandler)

    def GetReal(*args):
        """
        GetReal(Standard_IStream & IS)

        Reads the Standard_Real value from the stream. Zero is read
        in case of error

        :type IS: OCC.wrapper.Standard.Standard_IStream
        :type theValue: float

        """
        return _GeomTools.GeomTools__GetReal(*args)

    GetReal = staticmethod(GetReal)

    def __init__(self):
        """
        The GeomTools package provides  utilities for Geometry.

        *  SurfaceSet,  CurveSet, Curve2dSet  : Tools used
        for dumping, writing and reading.

        * Methods to dump, write, read curves and surfaces.
        """
        this = _GeomTools.new_GeomTools_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GeomTools.delete_GeomTools_
GeomTools__swigregister = _GeomTools.GeomTools__swigregister
GeomTools__swigregister(GeomTools_)

def GeomTools__Dump(*args):
    """
    Dump(Handle_Geom_Surface S, Standard_OStream & OS)
    Dump(Handle_Geom_Curve C, Standard_OStream & OS)
    GeomTools__Dump(Handle_Geom2d_Curve C, Standard_OStream & OS)

    Dumps the Curve on the stream.

    :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
    :type OS: OCC.wrapper.Standard.Standard_OStream

    """
    return _GeomTools.GeomTools__Dump(*args)

def GeomTools__Write(*args):
    """
    Write(Handle_Geom_Surface S, Standard_OStream & OS)
    Write(Handle_Geom_Curve C, Standard_OStream & OS)
    GeomTools__Write(Handle_Geom2d_Curve C, Standard_OStream & OS)

    Writes the Curve on the stream.

    :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
    :type OS: OCC.wrapper.Standard.Standard_OStream

    """
    return _GeomTools.GeomTools__Write(*args)

def GeomTools__Read(*args):
    """
    Read(Handle_Geom_Surface S, Standard_IStream & IS)
    Read(Handle_Geom_Curve C, Standard_IStream & IS)
    GeomTools__Read(Handle_Geom2d_Curve C, Standard_IStream & IS)

    Reads the Curve from the stream.

    :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
    :type IS: OCC.wrapper.Standard.Standard_IStream

    """
    return _GeomTools.GeomTools__Read(*args)

def GeomTools__SetUndefinedTypeHandler(*args):
    """
    GeomTools__SetUndefinedTypeHandler(Handle_GeomTools_UndefinedTypeHandler aHandler)

    :type aHandler: OCC.wrapper.GeomTools.Handle_GeomTools_UndefinedTypeHandler

    """
    return _GeomTools.GeomTools__SetUndefinedTypeHandler(*args)

def GeomTools__GetUndefinedTypeHandler(*args):
    """
    GeomTools__GetUndefinedTypeHandler() -> Handle_GeomTools_UndefinedTypeHandler

    :rtype: OCC.wrapper.GeomTools.Handle_GeomTools_UndefinedTypeHandler

    """
    return _GeomTools.GeomTools__GetUndefinedTypeHandler(*args)

def GeomTools__GetReal(*args):
    """
    GeomTools__GetReal(Standard_IStream & IS)

    Reads the Standard_Real value from the stream. Zero is read
    in case of error

    :type IS: OCC.wrapper.Standard.Standard_IStream
    :type theValue: float

    """
    return _GeomTools.GeomTools__GetReal(*args)



