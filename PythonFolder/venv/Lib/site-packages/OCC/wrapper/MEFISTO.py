# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_MEFISTO')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_MEFISTO')
    _MEFISTO = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_MEFISTO', [dirname(__file__)])
        except ImportError:
            import _MEFISTO
            return _MEFISTO
        try:
            _mod = imp.load_module('_MEFISTO', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _MEFISTO = swig_import_helper()
    del swig_import_helper
else:
    import _MEFISTO
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MEFISTO.delete_SwigPyIterator

    def value(self):
        return _MEFISTO.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _MEFISTO.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _MEFISTO.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _MEFISTO.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _MEFISTO.SwigPyIterator_equal(self, x)

    def copy(self):
        return _MEFISTO.SwigPyIterator_copy(self)

    def next(self):
        return _MEFISTO.SwigPyIterator_next(self)

    def __next__(self):
        return _MEFISTO.SwigPyIterator___next__(self)

    def previous(self):
        return _MEFISTO.SwigPyIterator_previous(self)

    def advance(self, n):
        return _MEFISTO.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _MEFISTO.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _MEFISTO.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _MEFISTO.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _MEFISTO.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _MEFISTO.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _MEFISTO.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _MEFISTO.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _MEFISTO.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_MEFISTO.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _MEFISTO.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _MEFISTO.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MEFISTO.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _MEFISTO.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _MEFISTO.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _MEFISTO.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _MEFISTO.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_MEFISTO.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _MEFISTO.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _MEFISTO.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MEFISTO.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _MEFISTO.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _MEFISTO.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _MEFISTO.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _MEFISTO.ptr_to_number(item)
ptr_to_number = _MEFISTO.ptr_to_number

def HashCode(*args):
    return _MEFISTO.HashCode(*args)
HashCode = _MEFISTO.HashCode

def ptr_equal(a, b):
    return _MEFISTO.ptr_equal(a, b)
ptr_equal = _MEFISTO.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
class R3(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(R3 self) -> R3
        __init__(R3 self, R a, R b, R c) -> R3
        __init__(R3 self, R3 A, R3 B) -> R3
        __init__(R3 self, gp_Pnt P) -> R3
        __init__(R3 self, gp_Vec V) -> R3
        __init__(R3 self, gp_Dir P) -> R3

        :type P: OCC.wrapper.gp.gp_Dir

        """
        this = _MEFISTO.new_R3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __add__(self, *args):
        """
        __add__(R3 self, R3 P) -> R3

        :type P: OCC.wrapper.MEFISTO.R3
        :rtype: OCC.wrapper.MEFISTO.R3

        """
        return _MEFISTO.R3___add__(self, *args)


    def __iadd__(self, *args):
        """
        __iadd__(R3 self, R3 P) -> R3

        :type P: OCC.wrapper.MEFISTO.R3
        :rtype: OCC.wrapper.MEFISTO.R3

        """
        return _MEFISTO.R3___iadd__(self, *args)


    def __sub__(self, *args):
        """
        __sub__(R3 self, R3 P) -> R3

        :type P: OCC.wrapper.MEFISTO.R3
        :rtype: OCC.wrapper.MEFISTO.R3

        """
        return _MEFISTO.R3___sub__(self, *args)


    def __isub__(self, *args):
        """
        __isub__(R3 self, R3 P) -> R3

        :type P: OCC.wrapper.MEFISTO.R3
        :rtype: OCC.wrapper.MEFISTO.R3

        """
        return _MEFISTO.R3___isub__(self, *args)


    def __neg__(self, *args):
        """
        __neg__(R3 self) -> R3

        :rtype: OCC.wrapper.MEFISTO.R3

        """
        return _MEFISTO.R3___neg__(self, *args)


    def __pos__(self, *args):
        """
        __pos__(R3 self) -> R3

        :rtype: OCC.wrapper.MEFISTO.R3

        """
        return _MEFISTO.R3___pos__(self, *args)


    def __xor__(self, *args):
        """
        __xor__(R3 self, R3 P) -> R3

        :type P: OCC.wrapper.MEFISTO.R3
        :rtype: OCC.wrapper.MEFISTO.R3

        """
        return _MEFISTO.R3___xor__(self, *args)


    def __mul__(self, *args):
        """
        __mul__(R3 self, R c) -> R3

        :type c: R
        :rtype: OCC.wrapper.MEFISTO.R3

        """
        return _MEFISTO.R3___mul__(self, *args)


    def __imul__(self, *args):
        """
        __imul__(R3 self, R c) -> R3

        :type c: R
        :rtype: OCC.wrapper.MEFISTO.R3

        """
        return _MEFISTO.R3___imul__(self, *args)


    def __truediv__(self, *args):
        return _MEFISTO.R3___truediv__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _MEFISTO.R3___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def at(self, *args):
        """
        at(R3 self, int i) -> R &

        :type i: int
        :rtype: R

        """
        return _MEFISTO.R3_at(self, *args)


    def assign(self, *args):
        """
        assign(R3 self, gp_Pnt P) -> R3
        assign(R3 self, gp_Dir P) -> R3

        :type P: OCC.wrapper.gp.gp_Dir
        :rtype: OCC.wrapper.MEFISTO.R3

        """
        return _MEFISTO.R3_assign(self, *args)


    def DansPave(self, *args):
        """
        DansPave(R3 self, R3 xyzMin, R3 xyzMax) -> bool

        :type xyzMin: OCC.wrapper.MEFISTO.R3
        :type xyzMax: OCC.wrapper.MEFISTO.R3
        :rtype: bool

        """
        return _MEFISTO.R3_DansPave(self, *args)

    __swig_destroy__ = _MEFISTO.delete_R3
R3_swigregister = _MEFISTO.R3_swigregister
R3_swigregister(R3)

class R4(R3):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(R4 self) -> R4
        __init__(R4 self, R a, R b, R c, R d) -> R4
        __init__(R4 self, R4 A, R4 B) -> R4

        :type A: OCC.wrapper.MEFISTO.R4
        :type B: OCC.wrapper.MEFISTO.R4

        """
        this = _MEFISTO.new_R4(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __add__(self, *args):
        """
        __add__(R4 self, R4 P) -> R4

        :type P: OCC.wrapper.MEFISTO.R4
        :rtype: OCC.wrapper.MEFISTO.R4

        """
        return _MEFISTO.R4___add__(self, *args)


    def __iadd__(self, *args):
        """
        __iadd__(R4 self, R4 P) -> R4

        :type P: OCC.wrapper.MEFISTO.R4
        :rtype: OCC.wrapper.MEFISTO.R4

        """
        return _MEFISTO.R4___iadd__(self, *args)


    def __sub__(self, *args):
        """
        __sub__(R4 self, R4 P) -> R4

        :type P: OCC.wrapper.MEFISTO.R4
        :rtype: OCC.wrapper.MEFISTO.R4

        """
        return _MEFISTO.R4___sub__(self, *args)


    def __isub__(self, *args):
        """
        __isub__(R4 self, R4 P) -> R4

        :type P: OCC.wrapper.MEFISTO.R4
        :rtype: OCC.wrapper.MEFISTO.R4

        """
        return _MEFISTO.R4___isub__(self, *args)


    def __neg__(self, *args):
        """
        __neg__(R4 self) -> R4

        :rtype: OCC.wrapper.MEFISTO.R4

        """
        return _MEFISTO.R4___neg__(self, *args)


    def __pos__(self, *args):
        """
        __pos__(R4 self) -> R4

        :rtype: OCC.wrapper.MEFISTO.R4

        """
        return _MEFISTO.R4___pos__(self, *args)


    def __mul__(self, *args):
        """
        __mul__(R4 self, R c) -> R4

        :type c: R
        :rtype: OCC.wrapper.MEFISTO.R4

        """
        return _MEFISTO.R4___mul__(self, *args)


    def __imul__(self, *args):
        """
        __imul__(R4 self, R c) -> R4

        :type c: R
        :rtype: OCC.wrapper.MEFISTO.R4

        """
        return _MEFISTO.R4___imul__(self, *args)


    def __truediv__(self, *args):
        return _MEFISTO.R4___truediv__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _MEFISTO.R4___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def at(self, *args):
        """
        at(R4 self, int i) -> R &

        :type i: int
        :rtype: R

        """
        return _MEFISTO.R4_at(self, *args)

    __swig_destroy__ = _MEFISTO.delete_R4
R4_swigregister = _MEFISTO.R4_swigregister
R4_swigregister(R4)

class R2(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(R2 self) -> R2
        __init__(R2 self, R a, R b) -> R2
        __init__(R2 self, R2 A, R2 B) -> R2

        :type A: OCC.wrapper.MEFISTO.R2
        :type B: OCC.wrapper.MEFISTO.R2

        """
        this = _MEFISTO.new_R2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __add__(self, *args):
        """
        __add__(R2 self, R2 P) -> R2

        :type P: OCC.wrapper.MEFISTO.R2
        :rtype: OCC.wrapper.MEFISTO.R2

        """
        return _MEFISTO.R2___add__(self, *args)


    def __iadd__(self, *args):
        """
        __iadd__(R2 self, R2 P) -> R2

        :type P: OCC.wrapper.MEFISTO.R2
        :rtype: OCC.wrapper.MEFISTO.R2

        """
        return _MEFISTO.R2___iadd__(self, *args)


    def __sub__(self, *args):
        """
        __sub__(R2 self, R2 P) -> R2

        :type P: OCC.wrapper.MEFISTO.R2
        :rtype: OCC.wrapper.MEFISTO.R2

        """
        return _MEFISTO.R2___sub__(self, *args)


    def __isub__(self, *args):
        """
        __isub__(R2 self, R2 P) -> R2

        :type P: OCC.wrapper.MEFISTO.R2
        :rtype: OCC.wrapper.MEFISTO.R2

        """
        return _MEFISTO.R2___isub__(self, *args)


    def __neg__(self, *args):
        """
        __neg__(R2 self) -> R2

        :rtype: OCC.wrapper.MEFISTO.R2

        """
        return _MEFISTO.R2___neg__(self, *args)


    def __pos__(self, *args):
        """
        __pos__(R2 self) -> R2

        :rtype: OCC.wrapper.MEFISTO.R2

        """
        return _MEFISTO.R2___pos__(self, *args)


    def __xor__(self, *args):
        """
        __xor__(R2 self, R2 P) -> R

        :type P: OCC.wrapper.MEFISTO.R2
        :rtype: R

        """
        return _MEFISTO.R2___xor__(self, *args)


    def __mul__(self, *args):
        """
        __mul__(R2 self, R c) -> R2

        :type c: R
        :rtype: OCC.wrapper.MEFISTO.R2

        """
        return _MEFISTO.R2___mul__(self, *args)


    def __imul__(self, *args):
        """
        __imul__(R2 self, R c) -> R2

        :type c: R
        :rtype: OCC.wrapper.MEFISTO.R2

        """
        return _MEFISTO.R2___imul__(self, *args)


    def __truediv__(self, *args):
        return _MEFISTO.R2___truediv__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _MEFISTO.R2___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def at(self, *args):
        """
        at(R2 self, int i) -> R &

        :type i: int
        :rtype: R

        """
        return _MEFISTO.R2_at(self, *args)


    def orthogonal(self, *args):
        """
        orthogonal(R2 self) -> R2

        :rtype: OCC.wrapper.MEFISTO.R2

        """
        return _MEFISTO.R2_orthogonal(self, *args)

    __swig_destroy__ = _MEFISTO.delete_R2
R2_swigregister = _MEFISTO.R2_swigregister
R2_swigregister(R2)



