# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_XCAFNoteObjects')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_XCAFNoteObjects')
    _XCAFNoteObjects = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_XCAFNoteObjects', [dirname(__file__)])
        except ImportError:
            import _XCAFNoteObjects
            return _XCAFNoteObjects
        try:
            _mod = imp.load_module('_XCAFNoteObjects', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _XCAFNoteObjects = swig_import_helper()
    del swig_import_helper
else:
    import _XCAFNoteObjects
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XCAFNoteObjects.delete_SwigPyIterator

    def value(self):
        return _XCAFNoteObjects.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _XCAFNoteObjects.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _XCAFNoteObjects.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _XCAFNoteObjects.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _XCAFNoteObjects.SwigPyIterator_equal(self, x)

    def copy(self):
        return _XCAFNoteObjects.SwigPyIterator_copy(self)

    def next(self):
        return _XCAFNoteObjects.SwigPyIterator_next(self)

    def __next__(self):
        return _XCAFNoteObjects.SwigPyIterator___next__(self)

    def previous(self):
        return _XCAFNoteObjects.SwigPyIterator_previous(self)

    def advance(self, n):
        return _XCAFNoteObjects.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _XCAFNoteObjects.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _XCAFNoteObjects.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _XCAFNoteObjects.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _XCAFNoteObjects.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _XCAFNoteObjects.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _XCAFNoteObjects.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _XCAFNoteObjects.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _XCAFNoteObjects.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_XCAFNoteObjects.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _XCAFNoteObjects.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _XCAFNoteObjects.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XCAFNoteObjects.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _XCAFNoteObjects.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _XCAFNoteObjects.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _XCAFNoteObjects.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _XCAFNoteObjects.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_XCAFNoteObjects.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _XCAFNoteObjects.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _XCAFNoteObjects.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XCAFNoteObjects.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _XCAFNoteObjects.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _XCAFNoteObjects.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _XCAFNoteObjects.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _XCAFNoteObjects.ptr_to_number(item)
ptr_to_number = _XCAFNoteObjects.ptr_to_number

def HashCode(*args):
    return _XCAFNoteObjects.HashCode(*args)
HashCode = _XCAFNoteObjects.HashCode

def ptr_equal(a, b):
    return _XCAFNoteObjects.ptr_equal(a, b)
ptr_equal = _XCAFNoteObjects.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
class XCAFNoteObjects_NoteObject(Standard.Standard_Transient):
    """object to store note auxiliary data"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XCAFNoteObjects_NoteObject
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XCAFNoteObjects_NoteObject(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XCAFNoteObjects.XCAFNoteObjects_NoteObject_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XCAFNoteObjects.XCAFNoteObjects_NoteObject_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFNoteObjects.XCAFNoteObjects_NoteObject_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(XCAFNoteObjects_NoteObject self) -> XCAFNoteObjects_NoteObject
        __init__(XCAFNoteObjects_NoteObject self, Handle_XCAFNoteObjects_NoteObject theObj) -> XCAFNoteObjects_NoteObject

        Copy constructor.

        :type theObj: OCC.wrapper.XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject

        """
        this = _XCAFNoteObjects.new_XCAFNoteObjects_NoteObject(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def HasPlane(self, *args):
        """
        HasPlane(XCAFNoteObjects_NoteObject self) -> Standard_Boolean

        Returns True if plane is specified

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFNoteObjects.XCAFNoteObjects_NoteObject_HasPlane(self, *args)


    def GetPlane(self, *args):
        """
        Returns a right-handed coordinate system of the plane

        :rtype: OCC.wrapper.gp.gp_Ax2

        """
        res = _XCAFNoteObjects.XCAFNoteObjects_NoteObject_GetPlane(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetPlane(self, *args):
        """
        SetPlane(XCAFNoteObjects_NoteObject self, gp_Ax2 thePlane)

        Sets a right-handed coordinate system of the plane

        :type thePlane: OCC.wrapper.gp.gp_Ax2

        """
        return _XCAFNoteObjects.XCAFNoteObjects_NoteObject_SetPlane(self, *args)


    def HasPoint(self, *args):
        """
        HasPoint(XCAFNoteObjects_NoteObject self) -> Standard_Boolean

        Returns True if the attachment point on the annotated object is specified

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFNoteObjects.XCAFNoteObjects_NoteObject_HasPoint(self, *args)


    def GetPoint(self, *args):
        """
        Returns the attachment point on the annotated object

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        res = _XCAFNoteObjects.XCAFNoteObjects_NoteObject_GetPoint(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetPoint(self, *args):
        """
        SetPoint(XCAFNoteObjects_NoteObject self, gp_Pnt thePnt)

        Sets the anchor point on the annotated object

        :type thePnt: OCC.wrapper.gp.gp_Pnt

        """
        return _XCAFNoteObjects.XCAFNoteObjects_NoteObject_SetPoint(self, *args)


    def HasPointText(self, *args):
        """
        HasPointText(XCAFNoteObjects_NoteObject self) -> Standard_Boolean

        Returns True if the text position is specified

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFNoteObjects.XCAFNoteObjects_NoteObject_HasPointText(self, *args)


    def GetPointText(self, *args):
        """
        Returns the text position

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        res = _XCAFNoteObjects.XCAFNoteObjects_NoteObject_GetPointText(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetPointText(self, *args):
        """
        SetPointText(XCAFNoteObjects_NoteObject self, gp_Pnt thePnt)

        Sets the text position

        :type thePnt: OCC.wrapper.gp.gp_Pnt

        """
        return _XCAFNoteObjects.XCAFNoteObjects_NoteObject_SetPointText(self, *args)


    def GetPresentation(self, *args):
        """
        Returns a tesselated annotation if specified

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _XCAFNoteObjects.XCAFNoteObjects_NoteObject_GetPresentation(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetPresentation(self, *args):
        """
        SetPresentation(XCAFNoteObjects_NoteObject self, TopoDS_Shape thePresentation)

        Sets a tesselated annotation

        :type thePresentation: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _XCAFNoteObjects.XCAFNoteObjects_NoteObject_SetPresentation(self, *args)


    def Reset(self, *args):
        """
        Reset(XCAFNoteObjects_NoteObject self)

        Resets data to the state after calling the default constructor


        """
        return _XCAFNoteObjects.XCAFNoteObjects_NoteObject_Reset(self, *args)

    __swig_destroy__ = _XCAFNoteObjects.delete_XCAFNoteObjects_NoteObject
XCAFNoteObjects_NoteObject_swigregister = _XCAFNoteObjects.XCAFNoteObjects_NoteObject_swigregister
XCAFNoteObjects_NoteObject_swigregister(XCAFNoteObjects_NoteObject)

def XCAFNoteObjects_NoteObject_get_type_name(*args):
    """
    XCAFNoteObjects_NoteObject_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XCAFNoteObjects.XCAFNoteObjects_NoteObject_get_type_name(*args)

def XCAFNoteObjects_NoteObject_get_type_descriptor(*args):
    """
    XCAFNoteObjects_NoteObject_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XCAFNoteObjects.XCAFNoteObjects_NoteObject_get_type_descriptor(*args)

class Handle_XCAFNoteObjects_NoteObject(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XCAFNoteObjects_NoteObject self)

        Nullify the handle


        """
        return _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XCAFNoteObjects_NoteObject self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XCAFNoteObjects_NoteObject self, XCAFNoteObjects_NoteObject thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XCAFNoteObjects_NoteObject self, Handle_XCAFNoteObjects_NoteObject theHandle) -> Handle_XCAFNoteObjects_NoteObject
        assign(Handle_XCAFNoteObjects_NoteObject self, XCAFNoteObjects_NoteObject thePtr) -> Handle_XCAFNoteObjects_NoteObject
        assign(Handle_XCAFNoteObjects_NoteObject self, Handle_XCAFNoteObjects_NoteObject theHandle) -> Handle_XCAFNoteObjects_NoteObject

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XCAFNoteObjects_NoteObject self) -> XCAFNoteObjects_NoteObject

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XCAFNoteObjects_NoteObject self) -> XCAFNoteObjects_NoteObject

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XCAFNoteObjects_NoteObject self) -> XCAFNoteObjects_NoteObject

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject___ref__(self, *args)


    def __hash__(self):
        return _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XCAFNoteObjects.new_Handle_XCAFNoteObjects_NoteObject(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject_DownCast)
    __swig_destroy__ = _XCAFNoteObjects.delete_Handle_XCAFNoteObjects_NoteObject

    def get_type_name(self, *args):
        """
        get_type_name(Handle_XCAFNoteObjects_NoteObject self) -> char const *

        :rtype: const char *

        """
        return _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasPlane(self, *args):
        """
        HasPlane(Handle_XCAFNoteObjects_NoteObject self) -> Standard_Boolean

        Returns True if plane is specified

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject_HasPlane(self, *args)


    def GetPlane(self, *args):
        """
        Returns a right-handed coordinate system of the plane

        :rtype: OCC.wrapper.gp.gp_Ax2

        """
        res = _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject_GetPlane(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetPlane(self, *args):
        """
        SetPlane(Handle_XCAFNoteObjects_NoteObject self, gp_Ax2 thePlane)

        Sets a right-handed coordinate system of the plane

        :type thePlane: OCC.wrapper.gp.gp_Ax2

        """
        return _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject_SetPlane(self, *args)


    def HasPoint(self, *args):
        """
        HasPoint(Handle_XCAFNoteObjects_NoteObject self) -> Standard_Boolean

        Returns True if the attachment point on the annotated object is specified

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject_HasPoint(self, *args)


    def GetPoint(self, *args):
        """
        Returns the attachment point on the annotated object

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        res = _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject_GetPoint(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetPoint(self, *args):
        """
        SetPoint(Handle_XCAFNoteObjects_NoteObject self, gp_Pnt thePnt)

        Sets the anchor point on the annotated object

        :type thePnt: OCC.wrapper.gp.gp_Pnt

        """
        return _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject_SetPoint(self, *args)


    def HasPointText(self, *args):
        """
        HasPointText(Handle_XCAFNoteObjects_NoteObject self) -> Standard_Boolean

        Returns True if the text position is specified

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject_HasPointText(self, *args)


    def GetPointText(self, *args):
        """
        Returns the text position

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        res = _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject_GetPointText(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetPointText(self, *args):
        """
        SetPointText(Handle_XCAFNoteObjects_NoteObject self, gp_Pnt thePnt)

        Sets the text position

        :type thePnt: OCC.wrapper.gp.gp_Pnt

        """
        return _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject_SetPointText(self, *args)


    def GetPresentation(self, *args):
        """
        Returns a tesselated annotation if specified

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject_GetPresentation(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetPresentation(self, *args):
        """
        SetPresentation(Handle_XCAFNoteObjects_NoteObject self, TopoDS_Shape thePresentation)

        Sets a tesselated annotation

        :type thePresentation: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject_SetPresentation(self, *args)


    def Reset(self, *args):
        """
        Reset(Handle_XCAFNoteObjects_NoteObject self)

        Resets data to the state after calling the default constructor


        """
        return _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject_Reset(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_XCAFNoteObjects_NoteObject self)

        Memory deallocator for transient classes


        """
        return _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XCAFNoteObjects_NoteObject self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XCAFNoteObjects_NoteObject self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XCAFNoteObjects_NoteObject self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XCAFNoteObjects_NoteObject self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XCAFNoteObjects_NoteObject self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XCAFNoteObjects_NoteObject self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XCAFNoteObjects_NoteObject self)

        Increments the reference counter of this object


        """
        return _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XCAFNoteObjects_NoteObject self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject_DecrementRefCounter(self, *args)

Handle_XCAFNoteObjects_NoteObject_swigregister = _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject_swigregister
Handle_XCAFNoteObjects_NoteObject_swigregister(Handle_XCAFNoteObjects_NoteObject)

def Handle_XCAFNoteObjects_NoteObject_DownCast(thing):
    return _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject_DownCast(thing)
Handle_XCAFNoteObjects_NoteObject_DownCast = _XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject_DownCast



