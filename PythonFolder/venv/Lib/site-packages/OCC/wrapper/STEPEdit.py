# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_STEPEdit')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_STEPEdit')
    _STEPEdit = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_STEPEdit', [dirname(__file__)])
        except ImportError:
            import _STEPEdit
            return _STEPEdit
        try:
            _mod = imp.load_module('_STEPEdit', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _STEPEdit = swig_import_helper()
    del swig_import_helper
else:
    import _STEPEdit
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _STEPEdit.delete_SwigPyIterator

    def value(self):
        return _STEPEdit.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _STEPEdit.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _STEPEdit.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _STEPEdit.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _STEPEdit.SwigPyIterator_equal(self, x)

    def copy(self):
        return _STEPEdit.SwigPyIterator_copy(self)

    def next(self):
        return _STEPEdit.SwigPyIterator_next(self)

    def __next__(self):
        return _STEPEdit.SwigPyIterator___next__(self)

    def previous(self):
        return _STEPEdit.SwigPyIterator_previous(self)

    def advance(self, n):
        return _STEPEdit.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _STEPEdit.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _STEPEdit.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _STEPEdit.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _STEPEdit.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _STEPEdit.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _STEPEdit.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _STEPEdit.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _STEPEdit.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_STEPEdit.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _STEPEdit.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _STEPEdit.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _STEPEdit.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _STEPEdit.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _STEPEdit.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _STEPEdit.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _STEPEdit.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_STEPEdit.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _STEPEdit.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _STEPEdit.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _STEPEdit.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _STEPEdit.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _STEPEdit.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _STEPEdit.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _STEPEdit.ptr_to_number(item)
ptr_to_number = _STEPEdit.ptr_to_number

def HashCode(*args):
    return _STEPEdit.HashCode(*args)
HashCode = _STEPEdit.HashCode

def ptr_equal(a, b):
    return _STEPEdit.ptr_equal(a, b)
ptr_equal = _STEPEdit.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepData
else:
    import StepData
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IFSelect
else:
    import IFSelect
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IFGraph
else:
    import IFGraph
del _swig_python_version_info
class STEPEdit_EditContext(IFSelect.IFSelect_Editor):
    """
    EditContext is an Editor fit for
    Product Definition Context (one per Model) , i.e. :
    - ProductDefinition
    - ApplicationProtocolDefinition
    - ProductRelatedProductCategory
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_STEPEdit_EditContext
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_STEPEdit_EditContext(self) 
            return h


    def __init__(self, *args):
        """
        __init__(STEPEdit_EditContext self) -> STEPEdit_EditContext

        EditContext is an Editor fit for
        Product Definition Context (one per Model) , i.e. :
        - ProductDefinition
        - ApplicationProtocolDefinition
        - ProductRelatedProductCategory
        """
        this = _STEPEdit.new_STEPEdit_EditContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Label(self, *args):
        """
        Label(STEPEdit_EditContext self) -> TCollection_AsciiString

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _STEPEdit.STEPEdit_EditContext_Label(self, *args)


    def Recognize(self, *args):
        """
        Recognize(STEPEdit_EditContext self, Handle_IFSelect_EditForm form) -> Standard_Boolean

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _STEPEdit.STEPEdit_EditContext_Recognize(self, *args)


    def StringValue(self, *args):
        """
        StringValue(STEPEdit_EditContext self, Handle_IFSelect_EditForm form, Standard_Integer const num) -> Handle_TCollection_HAsciiString

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type num: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _STEPEdit.STEPEdit_EditContext_StringValue(self, *args)


    def Apply(self, *args):
        """
        Apply(STEPEdit_EditContext self, Handle_IFSelect_EditForm form, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _STEPEdit.STEPEdit_EditContext_Apply(self, *args)


    def Load(self, *args):
        """
        Load(STEPEdit_EditContext self, Handle_IFSelect_EditForm form, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _STEPEdit.STEPEdit_EditContext_Load(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _STEPEdit.STEPEdit_EditContext_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _STEPEdit.STEPEdit_EditContext_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _STEPEdit.STEPEdit_EditContext_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _STEPEdit.delete_STEPEdit_EditContext
STEPEdit_EditContext_swigregister = _STEPEdit.STEPEdit_EditContext_swigregister
STEPEdit_EditContext_swigregister(STEPEdit_EditContext)

def STEPEdit_EditContext_get_type_name(*args):
    """
    STEPEdit_EditContext_get_type_name() -> char const *

    :rtype: const char *

    """
    return _STEPEdit.STEPEdit_EditContext_get_type_name(*args)

def STEPEdit_EditContext_get_type_descriptor(*args):
    """
    STEPEdit_EditContext_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _STEPEdit.STEPEdit_EditContext_get_type_descriptor(*args)

class STEPEdit_EditSDR(IFSelect.IFSelect_Editor):
    """
    EditSDR is an Editor fit for a Shape Definition Representation
    which designates a Product Definition
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_STEPEdit_EditSDR
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_STEPEdit_EditSDR(self) 
            return h


    def __init__(self, *args):
        """
        __init__(STEPEdit_EditSDR self) -> STEPEdit_EditSDR

        EditSDR is an Editor fit for a Shape Definition Representation
        which designates a Product Definition
        """
        this = _STEPEdit.new_STEPEdit_EditSDR(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Label(self, *args):
        """
        Label(STEPEdit_EditSDR self) -> TCollection_AsciiString

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _STEPEdit.STEPEdit_EditSDR_Label(self, *args)


    def Recognize(self, *args):
        """
        Recognize(STEPEdit_EditSDR self, Handle_IFSelect_EditForm form) -> Standard_Boolean

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _STEPEdit.STEPEdit_EditSDR_Recognize(self, *args)


    def StringValue(self, *args):
        """
        StringValue(STEPEdit_EditSDR self, Handle_IFSelect_EditForm form, Standard_Integer const num) -> Handle_TCollection_HAsciiString

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type num: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _STEPEdit.STEPEdit_EditSDR_StringValue(self, *args)


    def Apply(self, *args):
        """
        Apply(STEPEdit_EditSDR self, Handle_IFSelect_EditForm form, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _STEPEdit.STEPEdit_EditSDR_Apply(self, *args)


    def Load(self, *args):
        """
        Load(STEPEdit_EditSDR self, Handle_IFSelect_EditForm form, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _STEPEdit.STEPEdit_EditSDR_Load(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _STEPEdit.STEPEdit_EditSDR_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _STEPEdit.STEPEdit_EditSDR_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _STEPEdit.STEPEdit_EditSDR_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _STEPEdit.delete_STEPEdit_EditSDR
STEPEdit_EditSDR_swigregister = _STEPEdit.STEPEdit_EditSDR_swigregister
STEPEdit_EditSDR_swigregister(STEPEdit_EditSDR)

def STEPEdit_EditSDR_get_type_name(*args):
    """
    STEPEdit_EditSDR_get_type_name() -> char const *

    :rtype: const char *

    """
    return _STEPEdit.STEPEdit_EditSDR_get_type_name(*args)

def STEPEdit_EditSDR_get_type_descriptor(*args):
    """
    STEPEdit_EditSDR_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _STEPEdit.STEPEdit_EditSDR_get_type_descriptor(*args)

class Handle_STEPEdit_EditContext(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_STEPEdit_EditContext self)

        Nullify the handle


        """
        return _STEPEdit.Handle_STEPEdit_EditContext_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_STEPEdit_EditContext self) -> bool

        Check for being null

        :rtype: bool

        """
        return _STEPEdit.Handle_STEPEdit_EditContext_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_STEPEdit_EditContext self, STEPEdit_EditContext thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _STEPEdit.Handle_STEPEdit_EditContext_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_STEPEdit_EditContext self, Handle_STEPEdit_EditContext theHandle) -> Handle_STEPEdit_EditContext
        assign(Handle_STEPEdit_EditContext self, STEPEdit_EditContext thePtr) -> Handle_STEPEdit_EditContext
        assign(Handle_STEPEdit_EditContext self, Handle_STEPEdit_EditContext theHandle) -> Handle_STEPEdit_EditContext

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _STEPEdit.Handle_STEPEdit_EditContext_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_STEPEdit_EditContext self) -> STEPEdit_EditContext

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _STEPEdit.Handle_STEPEdit_EditContext_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_STEPEdit_EditContext self) -> STEPEdit_EditContext

        Member access operator (note non-const)

        :rtype: T *

        """
        return _STEPEdit.Handle_STEPEdit_EditContext___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_STEPEdit_EditContext self) -> STEPEdit_EditContext

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _STEPEdit.Handle_STEPEdit_EditContext___ref__(self, *args)


    def __hash__(self):
        return _STEPEdit.Handle_STEPEdit_EditContext___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _STEPEdit.Handle_STEPEdit_EditContext___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _STEPEdit.new_Handle_STEPEdit_EditContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_STEPEdit.Handle_STEPEdit_EditContext_DownCast)
    __swig_destroy__ = _STEPEdit.delete_Handle_STEPEdit_EditContext

    def Label(self, *args):
        """
        Label(Handle_STEPEdit_EditContext self) -> TCollection_AsciiString

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _STEPEdit.Handle_STEPEdit_EditContext_Label(self, *args)


    def Recognize(self, *args):
        """
        Recognize(Handle_STEPEdit_EditContext self, Handle_IFSelect_EditForm form) -> Standard_Boolean

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _STEPEdit.Handle_STEPEdit_EditContext_Recognize(self, *args)


    def StringValue(self, *args):
        """
        StringValue(Handle_STEPEdit_EditContext self, Handle_IFSelect_EditForm form, Standard_Integer const num) -> Handle_TCollection_HAsciiString

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type num: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _STEPEdit.Handle_STEPEdit_EditContext_StringValue(self, *args)


    def Apply(self, *args):
        """
        Apply(Handle_STEPEdit_EditContext self, Handle_IFSelect_EditForm form, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _STEPEdit.Handle_STEPEdit_EditContext_Apply(self, *args)


    def Load(self, *args):
        """
        Load(Handle_STEPEdit_EditContext self, Handle_IFSelect_EditForm form, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _STEPEdit.Handle_STEPEdit_EditContext_Load(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_STEPEdit_EditContext self) -> char const *

        :rtype: const char *

        """
        return _STEPEdit.Handle_STEPEdit_EditContext_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _STEPEdit.Handle_STEPEdit_EditContext_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _STEPEdit.Handle_STEPEdit_EditContext_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(Handle_STEPEdit_EditContext self, Standard_Integer const num, Handle_Interface_TypedValue typval, Standard_CString const shortname, IFSelect_EditValue const accessmode=IFSelect_Editable)

        Sets a Typed Value for a given ident and short name, with an
        Edit Mode

        :type num: int
        :type typval: OCC.wrapper.Interface.Handle_Interface_TypedValue
        :type shortname: OCC.wrapper.Standard.Standard_CString
        :type accessmode: OCC.wrapper.IFSelect.IFSelect_EditValue

        """
        return _STEPEdit.Handle_STEPEdit_EditContext_SetValue(self, *args)


    def SetList(self, *args):
        """
        SetList(Handle_STEPEdit_EditContext self, Standard_Integer const num, Standard_Integer const max=0)

        Sets a parameter to be a List
        max < 0 : not for a list (set when starting)
        max = 0 : list with no length limit (default for SetList)
        max > 0 : list limited to <max> items

        :type num: int
        :type max: int

        """
        return _STEPEdit.Handle_STEPEdit_EditContext_SetList(self, *args)


    def NbValues(self, *args):
        """
        NbValues(Handle_STEPEdit_EditContext self) -> Standard_Integer

        Returns the count of Typed Values

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _STEPEdit.Handle_STEPEdit_EditContext_NbValues(self, *args)


    def TypedValue(self, *args):
        """
        TypedValue(Handle_STEPEdit_EditContext self, Standard_Integer const num) -> Handle_Interface_TypedValue

        Returns a Typed Value from its ident

        :type num: int
        :rtype: OCC.wrapper.Interface.Handle_Interface_TypedValue

        """
        return _STEPEdit.Handle_STEPEdit_EditContext_TypedValue(self, *args)


    def IsList(self, *args):
        """
        IsList(Handle_STEPEdit_EditContext self, Standard_Integer const num) -> Standard_Boolean

        Tells if a parameter is a list

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _STEPEdit.Handle_STEPEdit_EditContext_IsList(self, *args)


    def MaxList(self, *args):
        """
        MaxList(Handle_STEPEdit_EditContext self, Standard_Integer const num) -> Standard_Integer

        Returns max length allowed for a list
        = 0 means : list with no limit
        < 0 means : not a list

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _STEPEdit.Handle_STEPEdit_EditContext_MaxList(self, *args)


    def Name(self, *args):
        """
        Name(Handle_STEPEdit_EditContext self, Standard_Integer const num, Standard_Boolean const isshort) -> Standard_CString

        Returns the name of a Value (complete or short) from its ident
        Short Name can be empty

        :type num: int
        :type isshort: bool
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _STEPEdit.Handle_STEPEdit_EditContext_Name(self, *args)


    def EditMode(self, *args):
        """
        EditMode(Handle_STEPEdit_EditContext self, Standard_Integer const num) -> IFSelect_EditValue

        Returns the edit mode of a Value

        :type num: int
        :rtype: OCC.wrapper.IFSelect.IFSelect_EditValue

        """
        return _STEPEdit.Handle_STEPEdit_EditContext_EditMode(self, *args)


    def NameNumber(self, *args):
        """
        NameNumber(Handle_STEPEdit_EditContext self, Standard_CString const name) -> Standard_Integer

        Returns the number (ident) of a Value, from its name, short or
        complete. If not found, returns 0

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _STEPEdit.Handle_STEPEdit_EditContext_NameNumber(self, *args)


    def PrintNames(self, *args):
        """
        PrintNames(Handle_STEPEdit_EditContext self, Handle_Message_Messenger S)

        :type S: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _STEPEdit.Handle_STEPEdit_EditContext_PrintNames(self, *args)


    def PrintDefs(self, *args):
        """
        PrintDefs(Handle_STEPEdit_EditContext self, Handle_Message_Messenger S, Standard_Boolean const labels)

        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type labels: bool

        """
        return _STEPEdit.Handle_STEPEdit_EditContext_PrintDefs(self, *args)


    def MaxNameLength(self, *args):
        """
        MaxNameLength(Handle_STEPEdit_EditContext self, Standard_Integer const what) -> Standard_Integer

        Returns the MaxLength of, according to what :
        <what> = -1 : length of short names
        <what> =  0 : length of complete names
        <what> =  1 : length of values labels

        :type what: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _STEPEdit.Handle_STEPEdit_EditContext_MaxNameLength(self, *args)


    def Form(self, *args):
        """
        Form(Handle_STEPEdit_EditContext self, Standard_Boolean const readonly, Standard_Boolean const undoable) -> Handle_IFSelect_EditForm

        Builds and Returns an EditForm, empty (no data yet)
        Can be redefined to return a specific type of EditForm

        :type readonly: bool
        :type undoable: bool
        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm

        """
        return _STEPEdit.Handle_STEPEdit_EditContext_Form(self, *args)


    def ListEditor(self, *args):
        """
        ListEditor(Handle_STEPEdit_EditContext self, Standard_Integer const num) -> Handle_IFSelect_ListEditor

        Returns a ListEditor for a parameter which is a List
        Default returns a basic ListEditor for a List, a Null Handle
        if <num> is not for a List. Can be redefined

        :type num: int
        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_ListEditor

        """
        return _STEPEdit.Handle_STEPEdit_EditContext_ListEditor(self, *args)


    def ListValue(self, *args):
        """
        ListValue(Handle_STEPEdit_EditContext self, Handle_IFSelect_EditForm form, Standard_Integer const num) -> Handle_TColStd_HSequenceOfHAsciiString

        Returns the value of an EditForm as a List, for a given item
        If not a list, a Null Handle should be returned
        Default returns a Null Handle, because many Editors have
        no list to edit. To be redefined as required

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type num: int
        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfHAsciiString

        """
        return _STEPEdit.Handle_STEPEdit_EditContext_ListValue(self, *args)


    def Update(self, *args):
        """
        Update(Handle_STEPEdit_EditContext self, Handle_IFSelect_EditForm form, Standard_Integer const num, Handle_TCollection_HAsciiString newval, Standard_Boolean const enforce) -> Standard_Boolean

        Updates the EditForm when a parameter is modified
        I.E.  default does nothing, can be redefined, as follows :
        Returns True when done (even if does nothing), False in case
        of refuse (for instance, if the new value is not suitable)
        <num> is the rank of the parameter for the EDITOR itself
        <enforce> True means that protected parameters can be touched

        If a parameter commands the value of other ones, when it is
        modified, it is necessary to touch them by Touch from EditForm

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type num: int
        :type newval: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type enforce: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _STEPEdit.Handle_STEPEdit_EditContext_Update(self, *args)


    def UpdateList(self, *args):
        """
        UpdateList(Handle_STEPEdit_EditContext self, Handle_IFSelect_EditForm form, Standard_Integer const num, Handle_TColStd_HSequenceOfHAsciiString newlist, Standard_Boolean const enforce) -> Standard_Boolean

        Acts as Update, but when the value is a list

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type num: int
        :type newlist: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfHAsciiString
        :type enforce: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _STEPEdit.Handle_STEPEdit_EditContext_UpdateList(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_STEPEdit_EditContext self)

        Memory deallocator for transient classes


        """
        return _STEPEdit.Handle_STEPEdit_EditContext_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_STEPEdit_EditContext self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_STEPEdit_EditContext self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _STEPEdit.Handle_STEPEdit_EditContext_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_STEPEdit_EditContext self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_STEPEdit_EditContext self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _STEPEdit.Handle_STEPEdit_EditContext_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_STEPEdit_EditContext self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _STEPEdit.Handle_STEPEdit_EditContext_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_STEPEdit_EditContext self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _STEPEdit.Handle_STEPEdit_EditContext_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_STEPEdit_EditContext self)

        Increments the reference counter of this object


        """
        return _STEPEdit.Handle_STEPEdit_EditContext_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_STEPEdit_EditContext self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _STEPEdit.Handle_STEPEdit_EditContext_DecrementRefCounter(self, *args)

Handle_STEPEdit_EditContext_swigregister = _STEPEdit.Handle_STEPEdit_EditContext_swigregister
Handle_STEPEdit_EditContext_swigregister(Handle_STEPEdit_EditContext)

def Handle_STEPEdit_EditContext_DownCast(thing):
    return _STEPEdit.Handle_STEPEdit_EditContext_DownCast(thing)
Handle_STEPEdit_EditContext_DownCast = _STEPEdit.Handle_STEPEdit_EditContext_DownCast

class Handle_STEPEdit_EditSDR(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_STEPEdit_EditSDR self)

        Nullify the handle


        """
        return _STEPEdit.Handle_STEPEdit_EditSDR_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_STEPEdit_EditSDR self) -> bool

        Check for being null

        :rtype: bool

        """
        return _STEPEdit.Handle_STEPEdit_EditSDR_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_STEPEdit_EditSDR self, STEPEdit_EditSDR thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _STEPEdit.Handle_STEPEdit_EditSDR_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_STEPEdit_EditSDR self, Handle_STEPEdit_EditSDR theHandle) -> Handle_STEPEdit_EditSDR
        assign(Handle_STEPEdit_EditSDR self, STEPEdit_EditSDR thePtr) -> Handle_STEPEdit_EditSDR
        assign(Handle_STEPEdit_EditSDR self, Handle_STEPEdit_EditSDR theHandle) -> Handle_STEPEdit_EditSDR

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _STEPEdit.Handle_STEPEdit_EditSDR_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_STEPEdit_EditSDR self) -> STEPEdit_EditSDR

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _STEPEdit.Handle_STEPEdit_EditSDR_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_STEPEdit_EditSDR self) -> STEPEdit_EditSDR

        Member access operator (note non-const)

        :rtype: T *

        """
        return _STEPEdit.Handle_STEPEdit_EditSDR___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_STEPEdit_EditSDR self) -> STEPEdit_EditSDR

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _STEPEdit.Handle_STEPEdit_EditSDR___ref__(self, *args)


    def __hash__(self):
        return _STEPEdit.Handle_STEPEdit_EditSDR___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _STEPEdit.Handle_STEPEdit_EditSDR___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _STEPEdit.new_Handle_STEPEdit_EditSDR(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_STEPEdit.Handle_STEPEdit_EditSDR_DownCast)
    __swig_destroy__ = _STEPEdit.delete_Handle_STEPEdit_EditSDR

    def Label(self, *args):
        """
        Label(Handle_STEPEdit_EditSDR self) -> TCollection_AsciiString

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _STEPEdit.Handle_STEPEdit_EditSDR_Label(self, *args)


    def Recognize(self, *args):
        """
        Recognize(Handle_STEPEdit_EditSDR self, Handle_IFSelect_EditForm form) -> Standard_Boolean

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _STEPEdit.Handle_STEPEdit_EditSDR_Recognize(self, *args)


    def StringValue(self, *args):
        """
        StringValue(Handle_STEPEdit_EditSDR self, Handle_IFSelect_EditForm form, Standard_Integer const num) -> Handle_TCollection_HAsciiString

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type num: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _STEPEdit.Handle_STEPEdit_EditSDR_StringValue(self, *args)


    def Apply(self, *args):
        """
        Apply(Handle_STEPEdit_EditSDR self, Handle_IFSelect_EditForm form, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _STEPEdit.Handle_STEPEdit_EditSDR_Apply(self, *args)


    def Load(self, *args):
        """
        Load(Handle_STEPEdit_EditSDR self, Handle_IFSelect_EditForm form, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _STEPEdit.Handle_STEPEdit_EditSDR_Load(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_STEPEdit_EditSDR self) -> char const *

        :rtype: const char *

        """
        return _STEPEdit.Handle_STEPEdit_EditSDR_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _STEPEdit.Handle_STEPEdit_EditSDR_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _STEPEdit.Handle_STEPEdit_EditSDR_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(Handle_STEPEdit_EditSDR self, Standard_Integer const num, Handle_Interface_TypedValue typval, Standard_CString const shortname, IFSelect_EditValue const accessmode=IFSelect_Editable)

        Sets a Typed Value for a given ident and short name, with an
        Edit Mode

        :type num: int
        :type typval: OCC.wrapper.Interface.Handle_Interface_TypedValue
        :type shortname: OCC.wrapper.Standard.Standard_CString
        :type accessmode: OCC.wrapper.IFSelect.IFSelect_EditValue

        """
        return _STEPEdit.Handle_STEPEdit_EditSDR_SetValue(self, *args)


    def SetList(self, *args):
        """
        SetList(Handle_STEPEdit_EditSDR self, Standard_Integer const num, Standard_Integer const max=0)

        Sets a parameter to be a List
        max < 0 : not for a list (set when starting)
        max = 0 : list with no length limit (default for SetList)
        max > 0 : list limited to <max> items

        :type num: int
        :type max: int

        """
        return _STEPEdit.Handle_STEPEdit_EditSDR_SetList(self, *args)


    def NbValues(self, *args):
        """
        NbValues(Handle_STEPEdit_EditSDR self) -> Standard_Integer

        Returns the count of Typed Values

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _STEPEdit.Handle_STEPEdit_EditSDR_NbValues(self, *args)


    def TypedValue(self, *args):
        """
        TypedValue(Handle_STEPEdit_EditSDR self, Standard_Integer const num) -> Handle_Interface_TypedValue

        Returns a Typed Value from its ident

        :type num: int
        :rtype: OCC.wrapper.Interface.Handle_Interface_TypedValue

        """
        return _STEPEdit.Handle_STEPEdit_EditSDR_TypedValue(self, *args)


    def IsList(self, *args):
        """
        IsList(Handle_STEPEdit_EditSDR self, Standard_Integer const num) -> Standard_Boolean

        Tells if a parameter is a list

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _STEPEdit.Handle_STEPEdit_EditSDR_IsList(self, *args)


    def MaxList(self, *args):
        """
        MaxList(Handle_STEPEdit_EditSDR self, Standard_Integer const num) -> Standard_Integer

        Returns max length allowed for a list
        = 0 means : list with no limit
        < 0 means : not a list

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _STEPEdit.Handle_STEPEdit_EditSDR_MaxList(self, *args)


    def Name(self, *args):
        """
        Name(Handle_STEPEdit_EditSDR self, Standard_Integer const num, Standard_Boolean const isshort) -> Standard_CString

        Returns the name of a Value (complete or short) from its ident
        Short Name can be empty

        :type num: int
        :type isshort: bool
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _STEPEdit.Handle_STEPEdit_EditSDR_Name(self, *args)


    def EditMode(self, *args):
        """
        EditMode(Handle_STEPEdit_EditSDR self, Standard_Integer const num) -> IFSelect_EditValue

        Returns the edit mode of a Value

        :type num: int
        :rtype: OCC.wrapper.IFSelect.IFSelect_EditValue

        """
        return _STEPEdit.Handle_STEPEdit_EditSDR_EditMode(self, *args)


    def NameNumber(self, *args):
        """
        NameNumber(Handle_STEPEdit_EditSDR self, Standard_CString const name) -> Standard_Integer

        Returns the number (ident) of a Value, from its name, short or
        complete. If not found, returns 0

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _STEPEdit.Handle_STEPEdit_EditSDR_NameNumber(self, *args)


    def PrintNames(self, *args):
        """
        PrintNames(Handle_STEPEdit_EditSDR self, Handle_Message_Messenger S)

        :type S: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _STEPEdit.Handle_STEPEdit_EditSDR_PrintNames(self, *args)


    def PrintDefs(self, *args):
        """
        PrintDefs(Handle_STEPEdit_EditSDR self, Handle_Message_Messenger S, Standard_Boolean const labels)

        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type labels: bool

        """
        return _STEPEdit.Handle_STEPEdit_EditSDR_PrintDefs(self, *args)


    def MaxNameLength(self, *args):
        """
        MaxNameLength(Handle_STEPEdit_EditSDR self, Standard_Integer const what) -> Standard_Integer

        Returns the MaxLength of, according to what :
        <what> = -1 : length of short names
        <what> =  0 : length of complete names
        <what> =  1 : length of values labels

        :type what: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _STEPEdit.Handle_STEPEdit_EditSDR_MaxNameLength(self, *args)


    def Form(self, *args):
        """
        Form(Handle_STEPEdit_EditSDR self, Standard_Boolean const readonly, Standard_Boolean const undoable) -> Handle_IFSelect_EditForm

        Builds and Returns an EditForm, empty (no data yet)
        Can be redefined to return a specific type of EditForm

        :type readonly: bool
        :type undoable: bool
        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm

        """
        return _STEPEdit.Handle_STEPEdit_EditSDR_Form(self, *args)


    def ListEditor(self, *args):
        """
        ListEditor(Handle_STEPEdit_EditSDR self, Standard_Integer const num) -> Handle_IFSelect_ListEditor

        Returns a ListEditor for a parameter which is a List
        Default returns a basic ListEditor for a List, a Null Handle
        if <num> is not for a List. Can be redefined

        :type num: int
        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_ListEditor

        """
        return _STEPEdit.Handle_STEPEdit_EditSDR_ListEditor(self, *args)


    def ListValue(self, *args):
        """
        ListValue(Handle_STEPEdit_EditSDR self, Handle_IFSelect_EditForm form, Standard_Integer const num) -> Handle_TColStd_HSequenceOfHAsciiString

        Returns the value of an EditForm as a List, for a given item
        If not a list, a Null Handle should be returned
        Default returns a Null Handle, because many Editors have
        no list to edit. To be redefined as required

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type num: int
        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfHAsciiString

        """
        return _STEPEdit.Handle_STEPEdit_EditSDR_ListValue(self, *args)


    def Update(self, *args):
        """
        Update(Handle_STEPEdit_EditSDR self, Handle_IFSelect_EditForm form, Standard_Integer const num, Handle_TCollection_HAsciiString newval, Standard_Boolean const enforce) -> Standard_Boolean

        Updates the EditForm when a parameter is modified
        I.E.  default does nothing, can be redefined, as follows :
        Returns True when done (even if does nothing), False in case
        of refuse (for instance, if the new value is not suitable)
        <num> is the rank of the parameter for the EDITOR itself
        <enforce> True means that protected parameters can be touched

        If a parameter commands the value of other ones, when it is
        modified, it is necessary to touch them by Touch from EditForm

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type num: int
        :type newval: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type enforce: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _STEPEdit.Handle_STEPEdit_EditSDR_Update(self, *args)


    def UpdateList(self, *args):
        """
        UpdateList(Handle_STEPEdit_EditSDR self, Handle_IFSelect_EditForm form, Standard_Integer const num, Handle_TColStd_HSequenceOfHAsciiString newlist, Standard_Boolean const enforce) -> Standard_Boolean

        Acts as Update, but when the value is a list

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type num: int
        :type newlist: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfHAsciiString
        :type enforce: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _STEPEdit.Handle_STEPEdit_EditSDR_UpdateList(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_STEPEdit_EditSDR self)

        Memory deallocator for transient classes


        """
        return _STEPEdit.Handle_STEPEdit_EditSDR_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_STEPEdit_EditSDR self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_STEPEdit_EditSDR self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _STEPEdit.Handle_STEPEdit_EditSDR_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_STEPEdit_EditSDR self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_STEPEdit_EditSDR self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _STEPEdit.Handle_STEPEdit_EditSDR_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_STEPEdit_EditSDR self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _STEPEdit.Handle_STEPEdit_EditSDR_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_STEPEdit_EditSDR self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _STEPEdit.Handle_STEPEdit_EditSDR_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_STEPEdit_EditSDR self)

        Increments the reference counter of this object


        """
        return _STEPEdit.Handle_STEPEdit_EditSDR_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_STEPEdit_EditSDR self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _STEPEdit.Handle_STEPEdit_EditSDR_DecrementRefCounter(self, *args)

Handle_STEPEdit_EditSDR_swigregister = _STEPEdit.Handle_STEPEdit_EditSDR_swigregister
Handle_STEPEdit_EditSDR_swigregister(Handle_STEPEdit_EditSDR)

def Handle_STEPEdit_EditSDR_DownCast(thing):
    return _STEPEdit.Handle_STEPEdit_EditSDR_DownCast(thing)
Handle_STEPEdit_EditSDR_DownCast = _STEPEdit.Handle_STEPEdit_EditSDR_DownCast

class STEPEdit_(object):
    """
    Provides tools to exploit and edit a set of STEP data :
    editors, selections ..
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Protocol(*args):
        """
        Protocol() -> Handle_Interface_Protocol

        Returns a Protocol fit for STEP (creates the first time)

        :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _STEPEdit.STEPEdit__Protocol(*args)

    Protocol = staticmethod(Protocol)

    def NewModel(*args):
        """
        NewModel() -> Handle_StepData_StepModel

        Returns a new empty StepModel fit for STEP
        i.e. with its header determined from Protocol

        :rtype: OCC.wrapper.StepData.Handle_StepData_StepModel

        """
        return _STEPEdit.STEPEdit__NewModel(*args)

    NewModel = staticmethod(NewModel)

    def SignType(*args):
        """
        SignType() -> Handle_IFSelect_Signature

        Returns a SignType fit for STEP (creates the first time)

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Signature

        """
        return _STEPEdit.STEPEdit__SignType(*args)

    SignType = staticmethod(SignType)

    def NewSelectSDR(*args):
        """
        NewSelectSDR() -> Handle_IFSelect_SelectSignature

        Creates a Selection for ShapeDefinitionRepresentation
        By default searches among root entities

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_SelectSignature

        """
        return _STEPEdit.STEPEdit__NewSelectSDR(*args)

    NewSelectSDR = staticmethod(NewSelectSDR)

    def NewSelectPlacedItem(*args):
        """
        NewSelectPlacedItem() -> Handle_IFSelect_SelectSignature

        Creates a Selection for Placed Items, i.e. MappedItem or
        ContextDependentShapeRepresentation, which itself refers to a
        RepresentationRelationship with possible subtypes (Shape...
        and/or ...WithTransformation)
        By default in the whole StepModel

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_SelectSignature

        """
        return _STEPEdit.STEPEdit__NewSelectPlacedItem(*args)

    NewSelectPlacedItem = staticmethod(NewSelectPlacedItem)

    def NewSelectShapeRepr(*args):
        """
        NewSelectShapeRepr() -> Handle_IFSelect_SelectSignature

        Creates a Selection for ShapeRepresentation and its sub-types,
        plus ContextDependentShapeRepresentation (which is not a
        sub-type of ShapeRepresentation)
        By default in the whole StepModel

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_SelectSignature

        """
        return _STEPEdit.STEPEdit__NewSelectShapeRepr(*args)

    NewSelectShapeRepr = staticmethod(NewSelectShapeRepr)

    def __init__(self):
        """
        Provides tools to exploit and edit a set of STEP data :
        editors, selections ..
        """
        this = _STEPEdit.new_STEPEdit_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _STEPEdit.delete_STEPEdit_
STEPEdit__swigregister = _STEPEdit.STEPEdit__swigregister
STEPEdit__swigregister(STEPEdit_)

def STEPEdit__Protocol(*args):
    """
    STEPEdit__Protocol() -> Handle_Interface_Protocol

    Returns a Protocol fit for STEP (creates the first time)

    :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

    """
    return _STEPEdit.STEPEdit__Protocol(*args)

def STEPEdit__NewModel(*args):
    """
    STEPEdit__NewModel() -> Handle_StepData_StepModel

    Returns a new empty StepModel fit for STEP
    i.e. with its header determined from Protocol

    :rtype: OCC.wrapper.StepData.Handle_StepData_StepModel

    """
    return _STEPEdit.STEPEdit__NewModel(*args)

def STEPEdit__SignType(*args):
    """
    STEPEdit__SignType() -> Handle_IFSelect_Signature

    Returns a SignType fit for STEP (creates the first time)

    :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_Signature

    """
    return _STEPEdit.STEPEdit__SignType(*args)

def STEPEdit__NewSelectSDR(*args):
    """
    STEPEdit__NewSelectSDR() -> Handle_IFSelect_SelectSignature

    Creates a Selection for ShapeDefinitionRepresentation
    By default searches among root entities

    :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_SelectSignature

    """
    return _STEPEdit.STEPEdit__NewSelectSDR(*args)

def STEPEdit__NewSelectPlacedItem(*args):
    """
    STEPEdit__NewSelectPlacedItem() -> Handle_IFSelect_SelectSignature

    Creates a Selection for Placed Items, i.e. MappedItem or
    ContextDependentShapeRepresentation, which itself refers to a
    RepresentationRelationship with possible subtypes (Shape...
    and/or ...WithTransformation)
    By default in the whole StepModel

    :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_SelectSignature

    """
    return _STEPEdit.STEPEdit__NewSelectPlacedItem(*args)

def STEPEdit__NewSelectShapeRepr(*args):
    """
    STEPEdit__NewSelectShapeRepr() -> Handle_IFSelect_SelectSignature

    Creates a Selection for ShapeRepresentation and its sub-types,
    plus ContextDependentShapeRepresentation (which is not a
    sub-type of ShapeRepresentation)
    By default in the whole StepModel

    :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_SelectSignature

    """
    return _STEPEdit.STEPEdit__NewSelectShapeRepr(*args)



