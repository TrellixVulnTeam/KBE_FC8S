# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BRepToIGES')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BRepToIGES')
    _BRepToIGES = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepToIGES', [dirname(__file__)])
        except ImportError:
            import _BRepToIGES
            return _BRepToIGES
        try:
            _mod = imp.load_module('_BRepToIGES', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BRepToIGES = swig_import_helper()
    del swig_import_helper
else:
    import _BRepToIGES
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepToIGES.delete_SwigPyIterator

    def value(self):
        return _BRepToIGES.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _BRepToIGES.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _BRepToIGES.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _BRepToIGES.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _BRepToIGES.SwigPyIterator_equal(self, x)

    def copy(self):
        return _BRepToIGES.SwigPyIterator_copy(self)

    def next(self):
        return _BRepToIGES.SwigPyIterator_next(self)

    def __next__(self):
        return _BRepToIGES.SwigPyIterator___next__(self)

    def previous(self):
        return _BRepToIGES.SwigPyIterator_previous(self)

    def advance(self, n):
        return _BRepToIGES.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _BRepToIGES.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _BRepToIGES.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _BRepToIGES.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _BRepToIGES.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _BRepToIGES.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _BRepToIGES.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _BRepToIGES.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BRepToIGES.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_BRepToIGES.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _BRepToIGES.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BRepToIGES.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BRepToIGES.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _BRepToIGES.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _BRepToIGES.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _BRepToIGES.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BRepToIGES.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_BRepToIGES.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _BRepToIGES.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BRepToIGES.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BRepToIGES.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _BRepToIGES.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _BRepToIGES.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _BRepToIGES.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _BRepToIGES.ptr_to_number(item)
ptr_to_number = _BRepToIGES.ptr_to_number

def HashCode(*args):
    return _BRepToIGES.HashCode(*args)
HashCode = _BRepToIGES.HashCode

def ptr_equal(a, b):
    return _BRepToIGES.ptr_equal(a, b)
ptr_equal = _BRepToIGES.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Transfer
else:
    import Transfer
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESData
else:
    import IGESData
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
class BRepToIGES_BREntity(object):
    """provides methods to transfer BRep entity from CASCADE to IGES."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BRepToIGES_BREntity self) -> BRepToIGES_BREntity

        Creates a tool BREntity


        """
        this = _BRepToIGES.new_BRepToIGES_BREntity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(BRepToIGES_BREntity self)

        Initializes the field of the tool BREntity with
        default creating values.


        """
        return _BRepToIGES.BRepToIGES_BREntity_Init(self, *args)


    def SetModel(self, *args):
        """
        SetModel(BRepToIGES_BREntity self, Handle_IGESData_IGESModel model)

        Set the value of "TheModel"

        :type model: OCC.wrapper.IGESData.Handle_IGESData_IGESModel

        """
        return _BRepToIGES.BRepToIGES_BREntity_SetModel(self, *args)


    def GetModel(self, *args):
        """
        GetModel(BRepToIGES_BREntity self) -> Handle_IGESData_IGESModel

        Returns the value of "TheModel"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESModel

        """
        return _BRepToIGES.BRepToIGES_BREntity_GetModel(self, *args)


    def GetUnit(self, *args):
        """
        GetUnit(BRepToIGES_BREntity self) -> Standard_Real

        Returns the value of the UnitFlag of the header of the model
        in meters.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepToIGES.BRepToIGES_BREntity_GetUnit(self, *args)


    def SetTransferProcess(self, *args):
        """
        SetTransferProcess(BRepToIGES_BREntity self, Handle_Transfer_FinderProcess TP)

        Set the value of "TheMap"

        :type TP: OCC.wrapper.Transfer.Handle_Transfer_FinderProcess

        """
        return _BRepToIGES.BRepToIGES_BREntity_SetTransferProcess(self, *args)


    def GetTransferProcess(self, *args):
        """
        GetTransferProcess(BRepToIGES_BREntity self) -> Handle_Transfer_FinderProcess

        Returns the value of "TheMap"

        :rtype: OCC.wrapper.Transfer.Handle_Transfer_FinderProcess

        """
        return _BRepToIGES.BRepToIGES_BREntity_GetTransferProcess(self, *args)


    def TransferShape(self, *args):
        """
        TransferShape(BRepToIGES_BREntity self, TopoDS_Shape start) -> Handle_IGESData_IGESEntity

        Returns the result of the transfert of any Shape
        If  the transfer has  failed, this member return a NullEntity.

        :type start: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _BRepToIGES.BRepToIGES_BREntity_TransferShape(self, *args)


    def AddFail(self, *args):
        """
        AddFail(BRepToIGES_BREntity self, TopoDS_Shape start, Standard_CString const amess)
        AddFail(BRepToIGES_BREntity self, Handle_Standard_Transient start, Standard_CString const amess)

        Records a new Fail message

        :type start: OCC.wrapper.Standard.Handle_Standard_Transient
        :type amess: OCC.wrapper.Standard.Standard_CString

        """
        return _BRepToIGES.BRepToIGES_BREntity_AddFail(self, *args)


    def AddWarning(self, *args):
        """
        AddWarning(BRepToIGES_BREntity self, TopoDS_Shape start, Standard_CString const amess)
        AddWarning(BRepToIGES_BREntity self, Handle_Standard_Transient start, Standard_CString const amess)

        Records a new Warning message

        :type start: OCC.wrapper.Standard.Handle_Standard_Transient
        :type amess: OCC.wrapper.Standard.Standard_CString

        """
        return _BRepToIGES.BRepToIGES_BREntity_AddWarning(self, *args)


    def HasShapeResult(self, *args):
        """
        HasShapeResult(BRepToIGES_BREntity self, TopoDS_Shape start) -> Standard_Boolean
        HasShapeResult(BRepToIGES_BREntity self, Handle_Standard_Transient start) -> Standard_Boolean

        Returns True if start was already treated and has a result in "TheMap"
        else returns False.

        :type start: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepToIGES.BRepToIGES_BREntity_HasShapeResult(self, *args)


    def GetShapeResult(self, *args):
        """
        GetShapeResult(BRepToIGES_BREntity self, TopoDS_Shape start) -> Handle_Standard_Transient
        GetShapeResult(BRepToIGES_BREntity self, Handle_Standard_Transient start) -> Handle_Standard_Transient

        Returns the result of the transfer of the Transient "start" contained
        in "TheMap" . (if HasShapeResult is True).

        :type start: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _BRepToIGES.BRepToIGES_BREntity_GetShapeResult(self, *args)


    def SetShapeResult(self, *args):
        """
        SetShapeResult(BRepToIGES_BREntity self, TopoDS_Shape start, Handle_Standard_Transient result)
        SetShapeResult(BRepToIGES_BREntity self, Handle_Standard_Transient start, Handle_Standard_Transient result)

        set in "TheMap" the result of the transfer of the Transient "start".

        :type start: OCC.wrapper.Standard.Handle_Standard_Transient
        :type result: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _BRepToIGES.BRepToIGES_BREntity_SetShapeResult(self, *args)


    def GetConvertSurfaceMode(self, *args):
        """
        GetConvertSurfaceMode(BRepToIGES_BREntity self) -> Standard_Boolean

        Returns mode for conversion of surfaces
        (value of parameter write.convertsurface.mode)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepToIGES.BRepToIGES_BREntity_GetConvertSurfaceMode(self, *args)


    def GetPCurveMode(self, *args):
        """
        GetPCurveMode(BRepToIGES_BREntity self) -> Standard_Boolean

        Returns mode for writing pcurves
        (value of parameter write.surfacecurve.mode)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepToIGES.BRepToIGES_BREntity_GetPCurveMode(self, *args)

    __swig_destroy__ = _BRepToIGES.delete_BRepToIGES_BREntity
BRepToIGES_BREntity_swigregister = _BRepToIGES.BRepToIGES_BREntity_swigregister
BRepToIGES_BREntity_swigregister(BRepToIGES_BREntity)

class BRepToIGES_BRSolid(BRepToIGES_BREntity):
    """
    This class implements the transfer of Shape Entities from Geom
    To IGES. These can be :
    . Vertex
    . Edge
    . Wire
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BRepToIGES_BRSolid self) -> BRepToIGES_BRSolid
        __init__(BRepToIGES_BRSolid self, BRepToIGES_BREntity BR) -> BRepToIGES_BRSolid

        :type BR: OCC.wrapper.BRepToIGES.BRepToIGES_BREntity

        """
        this = _BRepToIGES.new_BRepToIGES_BRSolid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def TransferSolid(self, *args):
        """
        TransferSolid(BRepToIGES_BRSolid self, TopoDS_Shape start) -> Handle_IGESData_IGESEntity
        TransferSolid(BRepToIGES_BRSolid self, TopoDS_Solid start) -> Handle_IGESData_IGESEntity

        Transfert a Solid entity from TopoDS to IGES
        If this Entity could not be converted, this member returns a NullEntity.

        :type start: OCC.wrapper.TopoDS.TopoDS_Solid
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _BRepToIGES.BRepToIGES_BRSolid_TransferSolid(self, *args)


    def TransferCompSolid(self, *args):
        """
        TransferCompSolid(BRepToIGES_BRSolid self, TopoDS_CompSolid start) -> Handle_IGESData_IGESEntity

        Transfert an CompSolid entity from TopoDS to IGES
        If this Entity could not be converted, this member returns a NullEntity.

        :type start: OCC.wrapper.TopoDS.TopoDS_CompSolid
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _BRepToIGES.BRepToIGES_BRSolid_TransferCompSolid(self, *args)


    def TransferCompound(self, *args):
        """
        TransferCompound(BRepToIGES_BRSolid self, TopoDS_Compound start) -> Handle_IGESData_IGESEntity

        Transfert a Compound entity from TopoDS to IGES
        If this Entity could not be converted, this member returns a NullEntity.

        :type start: OCC.wrapper.TopoDS.TopoDS_Compound
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _BRepToIGES.BRepToIGES_BRSolid_TransferCompound(self, *args)

    __swig_destroy__ = _BRepToIGES.delete_BRepToIGES_BRSolid
BRepToIGES_BRSolid_swigregister = _BRepToIGES.BRepToIGES_BRSolid_swigregister
BRepToIGES_BRSolid_swigregister(BRepToIGES_BRSolid)

class BRepToIGES_BRShell(BRepToIGES_BREntity):
    """
    This class implements the transfer of Shape Entities from Geom
    To IGES. These can be :
    . Vertex
    . Edge
    . Wire
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BRepToIGES_BRShell self) -> BRepToIGES_BRShell
        __init__(BRepToIGES_BRShell self, BRepToIGES_BREntity BR) -> BRepToIGES_BRShell

        :type BR: OCC.wrapper.BRepToIGES.BRepToIGES_BREntity

        """
        this = _BRepToIGES.new_BRepToIGES_BRShell(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def TransferShell(self, *args):
        """
        TransferShell(BRepToIGES_BRShell self, TopoDS_Shape start) -> Handle_IGESData_IGESEntity
        TransferShell(BRepToIGES_BRShell self, TopoDS_Shell start) -> Handle_IGESData_IGESEntity

        Transfert an Shell entity from TopoDS to IGES
        If this Entity could not be converted, this member returns a NullEntity.

        :type start: OCC.wrapper.TopoDS.TopoDS_Shell
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _BRepToIGES.BRepToIGES_BRShell_TransferShell(self, *args)


    def TransferFace(self, *args):
        """
        TransferFace(BRepToIGES_BRShell self, TopoDS_Face start) -> Handle_IGESData_IGESEntity

        Transfert a Face entity from TopoDS to IGES
        If this Entity could not be converted, this member returns a NullEntity.

        :type start: OCC.wrapper.TopoDS.TopoDS_Face
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _BRepToIGES.BRepToIGES_BRShell_TransferFace(self, *args)

    __swig_destroy__ = _BRepToIGES.delete_BRepToIGES_BRShell
BRepToIGES_BRShell_swigregister = _BRepToIGES.BRepToIGES_BRShell_swigregister
BRepToIGES_BRShell_swigregister(BRepToIGES_BRShell)

class BRepToIGES_BRWire(BRepToIGES_BREntity):
    """
    This class implements the transfer of Shape Entities
    from Geom To IGES. These can be :
    . Vertex
    . Edge
    . Wire
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BRepToIGES_BRWire self) -> BRepToIGES_BRWire
        __init__(BRepToIGES_BRWire self, BRepToIGES_BREntity BR) -> BRepToIGES_BRWire

        :type BR: OCC.wrapper.BRepToIGES.BRepToIGES_BREntity

        """
        this = _BRepToIGES.new_BRepToIGES_BRWire(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def TransferVertex(self, *args):
        """
        TransferVertex(BRepToIGES_BRWire self, TopoDS_Vertex myvertex) -> Handle_IGESData_IGESEntity
        TransferVertex(BRepToIGES_BRWire self, TopoDS_Vertex myvertex, TopoDS_Edge myedge) -> Handle_IGESData_IGESEntity
        TransferVertex(BRepToIGES_BRWire self, TopoDS_Vertex myvertex, TopoDS_Edge myedge, TopoDS_Face myface) -> Handle_IGESData_IGESEntity
        TransferVertex(BRepToIGES_BRWire self, TopoDS_Vertex myvertex, TopoDS_Edge myedge, Handle_Geom_Surface mysurface, TopLoc_Location myloc) -> Handle_IGESData_IGESEntity
        TransferVertex(BRepToIGES_BRWire self, TopoDS_Vertex myvertex, TopoDS_Face myface, gp_Pnt2d mypoint) -> Handle_IGESData_IGESEntity

        Transfert a Vertex entity on a Face from TopoDS to IGES
        Returns the parameters of myvertex on myface
        If this Entity could not be converted,
        this member returns a NullEntity.

        :type myvertex: OCC.wrapper.TopoDS.TopoDS_Vertex
        :type myface: OCC.wrapper.TopoDS.TopoDS_Face
        :type mypoint: OCC.wrapper.gp.gp_Pnt2d
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _BRepToIGES.BRepToIGES_BRWire_TransferVertex(self, *args)


    def TransferEdge(self, *args):
        """
        TransferEdge(BRepToIGES_BRWire self, TopoDS_Edge myedge, Standard_Boolean const isBRepMode) -> Handle_IGESData_IGESEntity
        TransferEdge(BRepToIGES_BRWire self, TopoDS_Edge myedge, TopoDS_Face myface, Standard_Real const length, Standard_Boolean const isBRepMode) -> Handle_IGESData_IGESEntity

        Transfert an Edge entity on a Face from TopoDS to IGES
        If this Entity could not be converted,
        this member returns a NullEntity.
        isBRepMode indicates if write mode is BRep
        (True when called from BRepToIGESBRep and False when from BRepToIGES)
        passing into Transform2dCurve()

        :type myedge: OCC.wrapper.TopoDS.TopoDS_Edge
        :type myface: OCC.wrapper.TopoDS.TopoDS_Face
        :type length: float
        :type isBRepMode: bool
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _BRepToIGES.BRepToIGES_BRWire_TransferEdge(self, *args)


    def TransferWire(self, *args):
        """
        TransferWire(BRepToIGES_BRWire self, TopoDS_Shape start) -> Handle_IGESData_IGESEntity
        TransferWire(BRepToIGES_BRWire self, TopoDS_Wire mywire) -> Handle_IGESData_IGESEntity
        TransferWire(BRepToIGES_BRWire self, TopoDS_Wire mywire, TopoDS_Face myface, Handle_IGESData_IGESEntity mycurve2d, Standard_Real const length) -> Handle_IGESData_IGESEntity

        Transfert a Wire entity from TopoDS to IGES.
        Returns the curve associated to mywire in
        the parametric space of myface.
        If this Entity could not be converted,
        this member returns a NullEntity.
        Parameter IsRevol is not used anymore

        :type mywire: OCC.wrapper.TopoDS.TopoDS_Wire
        :type myface: OCC.wrapper.TopoDS.TopoDS_Face
        :type mycurve2d: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type length: float
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _BRepToIGES.BRepToIGES_BRWire_TransferWire(self, *args)

    __swig_destroy__ = _BRepToIGES.delete_BRepToIGES_BRWire
BRepToIGES_BRWire_swigregister = _BRepToIGES.BRepToIGES_BRWire_swigregister
BRepToIGES_BRWire_swigregister(BRepToIGES_BRWire)



