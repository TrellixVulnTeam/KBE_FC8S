# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_XmlObjMgt')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_XmlObjMgt')
    _XmlObjMgt = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_XmlObjMgt', [dirname(__file__)])
        except ImportError:
            import _XmlObjMgt
            return _XmlObjMgt
        try:
            _mod = imp.load_module('_XmlObjMgt', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _XmlObjMgt = swig_import_helper()
    del swig_import_helper
else:
    import _XmlObjMgt
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XmlObjMgt.delete_SwigPyIterator

    def value(self):
        return _XmlObjMgt.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _XmlObjMgt.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _XmlObjMgt.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _XmlObjMgt.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _XmlObjMgt.SwigPyIterator_equal(self, x)

    def copy(self):
        return _XmlObjMgt.SwigPyIterator_copy(self)

    def next(self):
        return _XmlObjMgt.SwigPyIterator_next(self)

    def __next__(self):
        return _XmlObjMgt.SwigPyIterator___next__(self)

    def previous(self):
        return _XmlObjMgt.SwigPyIterator_previous(self)

    def advance(self, n):
        return _XmlObjMgt.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _XmlObjMgt.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _XmlObjMgt.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _XmlObjMgt.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _XmlObjMgt.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _XmlObjMgt.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _XmlObjMgt.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _XmlObjMgt.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _XmlObjMgt.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_XmlObjMgt.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _XmlObjMgt.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _XmlObjMgt.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlObjMgt.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _XmlObjMgt.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _XmlObjMgt.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _XmlObjMgt.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _XmlObjMgt.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_XmlObjMgt.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _XmlObjMgt.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _XmlObjMgt.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlObjMgt.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _XmlObjMgt.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _XmlObjMgt.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _XmlObjMgt.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _XmlObjMgt.ptr_to_number(item)
ptr_to_number = _XmlObjMgt.ptr_to_number

def HashCode(*args):
    return _XmlObjMgt.HashCode(*args)
HashCode = _XmlObjMgt.HashCode

def ptr_equal(a, b):
    return _XmlObjMgt.ptr_equal(a, b)
ptr_equal = _XmlObjMgt.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import LDOM
else:
    import LDOM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
class XmlObjMgt_(object):
    """
    This package defines services to manage the storage
    grain of data produced by applications and those classes
    to manage persistent extern reference.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def IdString(*args):
        """
        IdString() -> LDOMString

        Define the name of XMLattribute 'ID' (to be used everywhere)

        :rtype: OCC.wrapper.XmlObjMgt.XmlObjMgt_DOMString

        """
        return _XmlObjMgt.XmlObjMgt__IdString(*args)

    IdString = staticmethod(IdString)

    def SetExtendedString(*args):
        """
        SetExtendedString(LDOM_Element theElement, TCollection_ExtendedString theString) -> Standard_Boolean

        Add attribute <theElement extstring="theString" ...>

        :type theElement: OCC.wrapper.XmlObjMgt.XmlObjMgt_Element
        :type theString: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlObjMgt.XmlObjMgt__SetExtendedString(*args)

    SetExtendedString = staticmethod(SetExtendedString)

    def GetExtendedString(*args):
        """
        GetExtendedString(LDOM_Element theElement, TCollection_ExtendedString theString) -> Standard_Boolean

        Get attribute <theElement extstring="theString" ...>

        :type theElement: OCC.wrapper.XmlObjMgt.XmlObjMgt_Element
        :type theString: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlObjMgt.XmlObjMgt__GetExtendedString(*args)

    GetExtendedString = staticmethod(GetExtendedString)

    def GetStringValue(*args):
        """
        GetStringValue(LDOM_Element theElement) -> LDOMString

        Returns the first child text node

        :type theElement: OCC.wrapper.XmlObjMgt.XmlObjMgt_Element
        :rtype: OCC.wrapper.XmlObjMgt.XmlObjMgt_DOMString

        """
        return _XmlObjMgt.XmlObjMgt__GetStringValue(*args)

    GetStringValue = staticmethod(GetStringValue)

    def SetStringValue(*args):
        """
        SetStringValue(LDOM_Element theElement, LDOMString theData, Standard_Boolean const isClearText)

        Add theData as the last child text node to theElement
        isClearText(True) avoids analysis of the string and replacement
        of characters like '<' and '&' during XML file storage.
        Do NEVER set isClearText unless you have a hell of a reason

        :type theElement: OCC.wrapper.XmlObjMgt.XmlObjMgt_Element
        :type theData: OCC.wrapper.XmlObjMgt.XmlObjMgt_DOMString
        :type isClearText: bool

        """
        return _XmlObjMgt.XmlObjMgt__SetStringValue(*args)

    SetStringValue = staticmethod(SetStringValue)

    def GetTagEntryString(*args):
        """
        GetTagEntryString(LDOMString theTarget, TCollection_AsciiString theTagEntry) -> Standard_Boolean

        Convert XPath expression (DOMString) into TagEntry string
        returns False on Error

        :type theTarget: OCC.wrapper.XmlObjMgt.XmlObjMgt_DOMString
        :type theTagEntry: OCC.wrapper.TCollection.TCollection_AsciiString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlObjMgt.XmlObjMgt__GetTagEntryString(*args)

    GetTagEntryString = staticmethod(GetTagEntryString)

    def SetTagEntryString(*args):
        """
        SetTagEntryString(LDOMString theSource, TCollection_AsciiString theTagEntry)

        Convert XPath expression (DOMString) into TagEntry string
        returns False on Error

        :type theSource: OCC.wrapper.XmlObjMgt.XmlObjMgt_DOMString
        :type theTagEntry: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _XmlObjMgt.XmlObjMgt__SetTagEntryString(*args)

    SetTagEntryString = staticmethod(SetTagEntryString)

    def FindChildElement(*args):
        """
        FindChildElement(LDOM_Element theSource, Standard_Integer const theObjId) -> LDOM_Element

        :type theSource: OCC.wrapper.XmlObjMgt.XmlObjMgt_Element
        :type theObjId: int
        :rtype: OCC.wrapper.XmlObjMgt.XmlObjMgt_Element

        """
        return _XmlObjMgt.XmlObjMgt__FindChildElement(*args)

    FindChildElement = staticmethod(FindChildElement)

    def FindChildByRef(*args):
        """
        FindChildByRef(LDOM_Element theSource, LDOMString theRefName) -> LDOM_Element

        :type theSource: OCC.wrapper.XmlObjMgt.XmlObjMgt_Element
        :type theRefName: OCC.wrapper.XmlObjMgt.XmlObjMgt_DOMString
        :rtype: OCC.wrapper.XmlObjMgt.XmlObjMgt_Element

        """
        return _XmlObjMgt.XmlObjMgt__FindChildByRef(*args)

    FindChildByRef = staticmethod(FindChildByRef)

    def FindChildByName(*args):
        """
        FindChildByName(LDOM_Element theSource, LDOMString theName) -> LDOM_Element

        :type theSource: OCC.wrapper.XmlObjMgt.XmlObjMgt_Element
        :type theName: OCC.wrapper.XmlObjMgt.XmlObjMgt_DOMString
        :rtype: OCC.wrapper.XmlObjMgt.XmlObjMgt_Element

        """
        return _XmlObjMgt.XmlObjMgt__FindChildByName(*args)

    FindChildByName = staticmethod(FindChildByName)

    def GetInteger(*args):
        """
        GetInteger(Standard_CString & theString) -> Standard_Boolean

        :type theString: OCC.wrapper.Standard.Standard_CString
        :type theValue: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlObjMgt.XmlObjMgt__GetInteger(*args)

    GetInteger = staticmethod(GetInteger)

    def GetReal(*args):
        """
        GetReal(Standard_CString & theString) -> Standard_Boolean
        GetReal(LDOMString theString) -> Standard_Boolean

        :type theString: OCC.wrapper.XmlObjMgt.XmlObjMgt_DOMString
        :type theValue: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlObjMgt.XmlObjMgt__GetReal(*args)

    GetReal = staticmethod(GetReal)

    def __init__(self):
        """
        This package defines services to manage the storage
        grain of data produced by applications and those classes
        to manage persistent extern reference.
        """
        this = _XmlObjMgt.new_XmlObjMgt_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlObjMgt.delete_XmlObjMgt_
XmlObjMgt__swigregister = _XmlObjMgt.XmlObjMgt__swigregister
XmlObjMgt__swigregister(XmlObjMgt_)

def XmlObjMgt__IdString(*args):
    """
    XmlObjMgt__IdString() -> LDOMString

    Define the name of XMLattribute 'ID' (to be used everywhere)

    :rtype: OCC.wrapper.XmlObjMgt.XmlObjMgt_DOMString

    """
    return _XmlObjMgt.XmlObjMgt__IdString(*args)

def XmlObjMgt__SetExtendedString(*args):
    """
    XmlObjMgt__SetExtendedString(LDOM_Element theElement, TCollection_ExtendedString theString) -> Standard_Boolean

    Add attribute <theElement extstring="theString" ...>

    :type theElement: OCC.wrapper.XmlObjMgt.XmlObjMgt_Element
    :type theString: OCC.wrapper.TCollection.TCollection_ExtendedString
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _XmlObjMgt.XmlObjMgt__SetExtendedString(*args)

def XmlObjMgt__GetExtendedString(*args):
    """
    XmlObjMgt__GetExtendedString(LDOM_Element theElement, TCollection_ExtendedString theString) -> Standard_Boolean

    Get attribute <theElement extstring="theString" ...>

    :type theElement: OCC.wrapper.XmlObjMgt.XmlObjMgt_Element
    :type theString: OCC.wrapper.TCollection.TCollection_ExtendedString
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _XmlObjMgt.XmlObjMgt__GetExtendedString(*args)

def XmlObjMgt__GetStringValue(*args):
    """
    XmlObjMgt__GetStringValue(LDOM_Element theElement) -> LDOMString

    Returns the first child text node

    :type theElement: OCC.wrapper.XmlObjMgt.XmlObjMgt_Element
    :rtype: OCC.wrapper.XmlObjMgt.XmlObjMgt_DOMString

    """
    return _XmlObjMgt.XmlObjMgt__GetStringValue(*args)

def XmlObjMgt__SetStringValue(*args):
    """
    XmlObjMgt__SetStringValue(LDOM_Element theElement, LDOMString theData, Standard_Boolean const isClearText)

    Add theData as the last child text node to theElement
    isClearText(True) avoids analysis of the string and replacement
    of characters like '<' and '&' during XML file storage.
    Do NEVER set isClearText unless you have a hell of a reason

    :type theElement: OCC.wrapper.XmlObjMgt.XmlObjMgt_Element
    :type theData: OCC.wrapper.XmlObjMgt.XmlObjMgt_DOMString
    :type isClearText: bool

    """
    return _XmlObjMgt.XmlObjMgt__SetStringValue(*args)

def XmlObjMgt__GetTagEntryString(*args):
    """
    XmlObjMgt__GetTagEntryString(LDOMString theTarget, TCollection_AsciiString theTagEntry) -> Standard_Boolean

    Convert XPath expression (DOMString) into TagEntry string
    returns False on Error

    :type theTarget: OCC.wrapper.XmlObjMgt.XmlObjMgt_DOMString
    :type theTagEntry: OCC.wrapper.TCollection.TCollection_AsciiString
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _XmlObjMgt.XmlObjMgt__GetTagEntryString(*args)

def XmlObjMgt__SetTagEntryString(*args):
    """
    XmlObjMgt__SetTagEntryString(LDOMString theSource, TCollection_AsciiString theTagEntry)

    Convert XPath expression (DOMString) into TagEntry string
    returns False on Error

    :type theSource: OCC.wrapper.XmlObjMgt.XmlObjMgt_DOMString
    :type theTagEntry: OCC.wrapper.TCollection.TCollection_AsciiString

    """
    return _XmlObjMgt.XmlObjMgt__SetTagEntryString(*args)

def XmlObjMgt__FindChildElement(*args):
    """
    XmlObjMgt__FindChildElement(LDOM_Element theSource, Standard_Integer const theObjId) -> LDOM_Element

    :type theSource: OCC.wrapper.XmlObjMgt.XmlObjMgt_Element
    :type theObjId: int
    :rtype: OCC.wrapper.XmlObjMgt.XmlObjMgt_Element

    """
    return _XmlObjMgt.XmlObjMgt__FindChildElement(*args)

def XmlObjMgt__FindChildByRef(*args):
    """
    XmlObjMgt__FindChildByRef(LDOM_Element theSource, LDOMString theRefName) -> LDOM_Element

    :type theSource: OCC.wrapper.XmlObjMgt.XmlObjMgt_Element
    :type theRefName: OCC.wrapper.XmlObjMgt.XmlObjMgt_DOMString
    :rtype: OCC.wrapper.XmlObjMgt.XmlObjMgt_Element

    """
    return _XmlObjMgt.XmlObjMgt__FindChildByRef(*args)

def XmlObjMgt__FindChildByName(*args):
    """
    XmlObjMgt__FindChildByName(LDOM_Element theSource, LDOMString theName) -> LDOM_Element

    :type theSource: OCC.wrapper.XmlObjMgt.XmlObjMgt_Element
    :type theName: OCC.wrapper.XmlObjMgt.XmlObjMgt_DOMString
    :rtype: OCC.wrapper.XmlObjMgt.XmlObjMgt_Element

    """
    return _XmlObjMgt.XmlObjMgt__FindChildByName(*args)

def XmlObjMgt__GetInteger(*args):
    """
    XmlObjMgt__GetInteger(Standard_CString & theString) -> Standard_Boolean

    :type theString: OCC.wrapper.Standard.Standard_CString
    :type theValue: int
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _XmlObjMgt.XmlObjMgt__GetInteger(*args)

def XmlObjMgt__GetReal(*args):
    """
    GetReal(Standard_CString & theString) -> Standard_Boolean
    XmlObjMgt__GetReal(LDOMString theString) -> Standard_Boolean

    :type theString: OCC.wrapper.XmlObjMgt.XmlObjMgt_DOMString
    :type theValue: float
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _XmlObjMgt.XmlObjMgt__GetReal(*args)

class XmlObjMgt_GP(object):
    """Translation of gp (simple geometry) objects"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Translate(*args):
        """
        Translate(gp_Trsf aTrsf) -> LDOMString
        Translate(gp_Mat aMat) -> LDOMString
        Translate(gp_XYZ anXYZ) -> LDOMString
        Translate(LDOMString aStr, gp_Trsf T) -> Standard_Boolean
        Translate(LDOMString aStr, gp_Mat T) -> Standard_Boolean
        Translate(LDOMString aStr, gp_XYZ T) -> Standard_Boolean

        :type aStr: OCC.wrapper.XmlObjMgt.XmlObjMgt_DOMString
        :type T: OCC.wrapper.gp.gp_XYZ
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlObjMgt.XmlObjMgt_GP_Translate(*args)

    Translate = staticmethod(Translate)

    def __init__(self):
        """Translation of gp (simple geometry) objects"""
        this = _XmlObjMgt.new_XmlObjMgt_GP()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlObjMgt.delete_XmlObjMgt_GP
XmlObjMgt_GP_swigregister = _XmlObjMgt.XmlObjMgt_GP_swigregister
XmlObjMgt_GP_swigregister(XmlObjMgt_GP)

def XmlObjMgt_GP_Translate(*args):
    """
    Translate(gp_Trsf aTrsf) -> LDOMString
    Translate(gp_Mat aMat) -> LDOMString
    Translate(gp_XYZ anXYZ) -> LDOMString
    Translate(LDOMString aStr, gp_Trsf T) -> Standard_Boolean
    Translate(LDOMString aStr, gp_Mat T) -> Standard_Boolean
    XmlObjMgt_GP_Translate(LDOMString aStr, gp_XYZ T) -> Standard_Boolean

    :type aStr: OCC.wrapper.XmlObjMgt.XmlObjMgt_DOMString
    :type T: OCC.wrapper.gp.gp_XYZ
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _XmlObjMgt.XmlObjMgt_GP_Translate(*args)

class XmlObjMgt_Persistent(object):
    """root for XML-persistence"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(XmlObjMgt_Persistent self) -> XmlObjMgt_Persistent
        __init__(XmlObjMgt_Persistent self, LDOM_Element theElement) -> XmlObjMgt_Persistent
        __init__(XmlObjMgt_Persistent self, LDOM_Element theElement, LDOMString theRef) -> XmlObjMgt_Persistent

        constructor from sub-element of Element referenced by theRef

        :type theElement: OCC.wrapper.XmlObjMgt.XmlObjMgt_Element
        :type theRef: OCC.wrapper.XmlObjMgt.XmlObjMgt_DOMString

        """
        this = _XmlObjMgt.new_XmlObjMgt_Persistent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CreateElement(self, *args):
        """
        CreateElement(XmlObjMgt_Persistent self, LDOM_Element theParent, LDOMString theType, Standard_Integer const theID)

        myElement := <theType id="theID"/>

        :type theParent: OCC.wrapper.XmlObjMgt.XmlObjMgt_Element
        :type theType: OCC.wrapper.XmlObjMgt.XmlObjMgt_DOMString
        :type theID: int

        """
        return _XmlObjMgt.XmlObjMgt_Persistent_CreateElement(self, *args)


    def SetId(self, *args):
        """
        SetId(XmlObjMgt_Persistent self, Standard_Integer const theId)

        :type theId: int

        """
        return _XmlObjMgt.XmlObjMgt_Persistent_SetId(self, *args)


    def Element(self, *args):
        """
        return myElement

        :rtype: OCC.wrapper.XmlObjMgt.XmlObjMgt_Element

        """
        res = _XmlObjMgt.XmlObjMgt_Persistent_Element(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Id(self, *args):
        """
        Id(XmlObjMgt_Persistent self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlObjMgt.XmlObjMgt_Persistent_Id(self, *args)

    __swig_destroy__ = _XmlObjMgt.delete_XmlObjMgt_Persistent
XmlObjMgt_Persistent_swigregister = _XmlObjMgt.XmlObjMgt_Persistent_swigregister
XmlObjMgt_Persistent_swigregister(XmlObjMgt_Persistent)

class XmlObjMgt_Array1(object):
    """
    The class Array1 represents unidimensionnal
    array of fixed size known at run time.
    The range of the index is user defined.
    Warning: Programs clients of such class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this
    for (i = A->Lower(); i <= A->Upper(); i++)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(XmlObjMgt_Array1 self, Standard_Integer const Low, Standard_Integer const Up) -> XmlObjMgt_Array1
        __init__(XmlObjMgt_Array1 self, LDOM_Element theParent, LDOMString theName) -> XmlObjMgt_Array1

        for restoration from DOM_Element which is child of
        theParent:
        <theParent ...>
        <theName ...>

        :type theParent: OCC.wrapper.XmlObjMgt.XmlObjMgt_Element
        :type theName: OCC.wrapper.XmlObjMgt.XmlObjMgt_DOMString

        """
        this = _XmlObjMgt.new_XmlObjMgt_Array1(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CreateArrayElement(self, *args):
        """
        CreateArrayElement(XmlObjMgt_Array1 self, LDOM_Element theParent, LDOMString theName)

        Create DOM_Element representing the array, under 'theParent'

        :type theParent: OCC.wrapper.XmlObjMgt.XmlObjMgt_Element
        :type theName: OCC.wrapper.XmlObjMgt.XmlObjMgt_DOMString

        """
        return _XmlObjMgt.XmlObjMgt_Array1_CreateArrayElement(self, *args)


    def Element(self, *args):
        """
        Returns the DOM element of <me>.

        :rtype: OCC.wrapper.XmlObjMgt.XmlObjMgt_Element

        """
        res = _XmlObjMgt.XmlObjMgt_Array1_Element(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Length(self, *args):
        """
        Length(XmlObjMgt_Array1 self) -> Standard_Integer

        Returns the number of elements of <me>.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlObjMgt.XmlObjMgt_Array1_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(XmlObjMgt_Array1 self) -> Standard_Integer

        Returns the lower bound.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlObjMgt.XmlObjMgt_Array1_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(XmlObjMgt_Array1 self) -> Standard_Integer

        Returns the upper bound.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlObjMgt.XmlObjMgt_Array1_Upper(self, *args)


    def SetValue(self, *args):
        """
        SetValue(XmlObjMgt_Array1 self, Standard_Integer const Index, LDOM_Element Value)

        Set the <Index>th element of the array to <Value>.

        :type Index: int
        :type Value: OCC.wrapper.XmlObjMgt.XmlObjMgt_Element

        """
        return _XmlObjMgt.XmlObjMgt_Array1_SetValue(self, *args)


    def Value(self, *args):
        """
        Value(XmlObjMgt_Array1 self, Standard_Integer const Index) -> LDOM_Element

        Returns the value of <Index>th element of the array.

        :type Index: int
        :rtype: OCC.wrapper.XmlObjMgt.XmlObjMgt_Element

        """
        return _XmlObjMgt.XmlObjMgt_Array1_Value(self, *args)

    __swig_destroy__ = _XmlObjMgt.delete_XmlObjMgt_Array1
XmlObjMgt_Array1_swigregister = _XmlObjMgt.XmlObjMgt_Array1_swigregister
XmlObjMgt_Array1_swigregister(XmlObjMgt_Array1)



