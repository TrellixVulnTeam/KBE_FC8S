# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_GeomToStep')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_GeomToStep')
    _GeomToStep = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GeomToStep', [dirname(__file__)])
        except ImportError:
            import _GeomToStep
            return _GeomToStep
        try:
            _mod = imp.load_module('_GeomToStep', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _GeomToStep = swig_import_helper()
    del swig_import_helper
else:
    import _GeomToStep
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GeomToStep.delete_SwigPyIterator

    def value(self):
        return _GeomToStep.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _GeomToStep.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _GeomToStep.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _GeomToStep.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _GeomToStep.SwigPyIterator_equal(self, x)

    def copy(self):
        return _GeomToStep.SwigPyIterator_copy(self)

    def next(self):
        return _GeomToStep.SwigPyIterator_next(self)

    def __next__(self):
        return _GeomToStep.SwigPyIterator___next__(self)

    def previous(self):
        return _GeomToStep.SwigPyIterator_previous(self)

    def advance(self, n):
        return _GeomToStep.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _GeomToStep.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _GeomToStep.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _GeomToStep.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _GeomToStep.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _GeomToStep.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _GeomToStep.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _GeomToStep.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _GeomToStep.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_GeomToStep.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _GeomToStep.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _GeomToStep.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GeomToStep.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _GeomToStep.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _GeomToStep.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _GeomToStep.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _GeomToStep.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_GeomToStep.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _GeomToStep.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _GeomToStep.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GeomToStep.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _GeomToStep.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _GeomToStep.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _GeomToStep.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _GeomToStep.ptr_to_number(item)
ptr_to_number = _GeomToStep.ptr_to_number

def HashCode(*args):
    return _GeomToStep.HashCode(*args)
HashCode = _GeomToStep.HashCode

def ptr_equal(a, b):
    return _GeomToStep.ptr_equal(a, b)
ptr_equal = _GeomToStep.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepGeom
else:
    import StepGeom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepBasic
else:
    import StepBasic
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepData
else:
    import StepData
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepRepr
else:
    import StepRepr
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepShape
else:
    import StepShape
del _swig_python_version_info
class GeomToStep_Root(object):
    """
    This class implements the common services for
    all classes of GeomToStep which report error.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def IsDone(self, *args):
        """
        IsDone(GeomToStep_Root self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomToStep.GeomToStep_Root_IsDone(self, *args)


    def __init__(self):
        """
        This class implements the common services for
        all classes of GeomToStep which report error.
        """
        this = _GeomToStep.new_GeomToStep_Root()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GeomToStep.delete_GeomToStep_Root
GeomToStep_Root_swigregister = _GeomToStep.GeomToStep_Root_swigregister
GeomToStep_Root_swigregister(GeomToStep_Root)

class GeomToStep_MakeCartesianPoint(GeomToStep_Root):
    """
    This class implements the mapping between classes
    CartesianPoint from Geom and Pnt from gp, and the class
    CartesianPoint from StepGeom which describes a point from
    Prostep.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomToStep_MakeCartesianPoint self, gp_Pnt P) -> GeomToStep_MakeCartesianPoint
        __init__(GeomToStep_MakeCartesianPoint self, gp_Pnt2d P) -> GeomToStep_MakeCartesianPoint
        __init__(GeomToStep_MakeCartesianPoint self, Handle_Geom_CartesianPoint P) -> GeomToStep_MakeCartesianPoint
        __init__(GeomToStep_MakeCartesianPoint self, Handle_Geom2d_CartesianPoint P) -> GeomToStep_MakeCartesianPoint

        :type P: OCC.wrapper.Geom2d.Handle_Geom2d_CartesianPoint

        """
        this = _GeomToStep.new_GeomToStep_MakeCartesianPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        :rtype: OCC.wrapper.GeomToStep.Handle_StepGeom_CartesianPoint

        """
        res = _GeomToStep.GeomToStep_MakeCartesianPoint_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeCartesianPoint
GeomToStep_MakeCartesianPoint_swigregister = _GeomToStep.GeomToStep_MakeCartesianPoint_swigregister
GeomToStep_MakeCartesianPoint_swigregister(GeomToStep_MakeCartesianPoint)

class GeomToStep_MakeToroidalSurface(GeomToStep_Root):
    """
    This class implements the mapping between class
    ToroidalSurface from Geom and the class
    ToroidalSurface from StepGeom which describes a
    toroidal_surface from Prostep
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomToStep_MakeToroidalSurface self, Handle_Geom_ToroidalSurface TorSurf) -> GeomToStep_MakeToroidalSurface

        :type TorSurf: OCC.wrapper.Geom.Handle_Geom_ToroidalSurface

        """
        this = _GeomToStep.new_GeomToStep_MakeToroidalSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_ToroidalSurface

        """
        res = _GeomToStep.GeomToStep_MakeToroidalSurface_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeToroidalSurface
GeomToStep_MakeToroidalSurface_swigregister = _GeomToStep.GeomToStep_MakeToroidalSurface_swigregister
GeomToStep_MakeToroidalSurface_swigregister(GeomToStep_MakeToroidalSurface)

class GeomToStep_MakeCircle(GeomToStep_Root):
    """
    This class implements the mapping between classes
    Circle from Geom, and Circ from gp, and the class
    Circle from StepGeom which describes a circle from
    Prostep.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomToStep_MakeCircle self, gp_Circ C) -> GeomToStep_MakeCircle
        __init__(GeomToStep_MakeCircle self, Handle_Geom_Circle C) -> GeomToStep_MakeCircle
        __init__(GeomToStep_MakeCircle self, Handle_Geom2d_Circle C) -> GeomToStep_MakeCircle

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Circle

        """
        this = _GeomToStep.new_GeomToStep_MakeCircle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Circle

        """
        res = _GeomToStep.GeomToStep_MakeCircle_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeCircle
GeomToStep_MakeCircle_swigregister = _GeomToStep.GeomToStep_MakeCircle_swigregister
GeomToStep_MakeCircle_swigregister(GeomToStep_MakeCircle)

class GeomToStep_MakeElementarySurface(GeomToStep_Root):
    """
    This class implements the mapping between classes
    ElementarySurface from Geom and the class ElementarySurface
    from StepGeom which describes a ElementarySurface from
    prostep. As ElementarySurface is an abstract Surface this
    class is an access to the sub-class required.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomToStep_MakeElementarySurface self, Handle_Geom_ElementarySurface S) -> GeomToStep_MakeElementarySurface

        :type S: OCC.wrapper.Geom.Handle_Geom_ElementarySurface

        """
        this = _GeomToStep.new_GeomToStep_MakeElementarySurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_ElementarySurface

        """
        res = _GeomToStep.GeomToStep_MakeElementarySurface_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeElementarySurface
GeomToStep_MakeElementarySurface_swigregister = _GeomToStep.GeomToStep_MakeElementarySurface_swigregister
GeomToStep_MakeElementarySurface_swigregister(GeomToStep_MakeElementarySurface)

class GeomToStep_MakeBoundedCurve(GeomToStep_Root):
    """
    This class implements the mapping between classes
    BoundedCurve from Geom, Geom2d and the class BoundedCurve from
    StepGeom which describes a BoundedCurve from prostep.
    As BoundedCurve is an abstract BoundedCurve this class
    is an access to the sub-class required.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomToStep_MakeBoundedCurve self, Handle_Geom_BoundedCurve C) -> GeomToStep_MakeBoundedCurve
        __init__(GeomToStep_MakeBoundedCurve self, Handle_Geom2d_BoundedCurve C) -> GeomToStep_MakeBoundedCurve

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_BoundedCurve

        """
        this = _GeomToStep.new_GeomToStep_MakeBoundedCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_BoundedCurve

        """
        res = _GeomToStep.GeomToStep_MakeBoundedCurve_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeBoundedCurve
GeomToStep_MakeBoundedCurve_swigregister = _GeomToStep.GeomToStep_MakeBoundedCurve_swigregister
GeomToStep_MakeBoundedCurve_swigregister(GeomToStep_MakeBoundedCurve)

class GeomToStep_MakeVector(GeomToStep_Root):
    """
    This class implements the mapping between classes
    Vector from Geom, Geom2d and Vec, Vec2d from gp, and the class
    Vector from StepGeom which describes a Vector from
    Prostep.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomToStep_MakeVector self, gp_Vec V) -> GeomToStep_MakeVector
        __init__(GeomToStep_MakeVector self, gp_Vec2d V) -> GeomToStep_MakeVector
        __init__(GeomToStep_MakeVector self, Handle_Geom_Vector V) -> GeomToStep_MakeVector
        __init__(GeomToStep_MakeVector self, Handle_Geom2d_Vector V) -> GeomToStep_MakeVector

        :type V: OCC.wrapper.Geom2d.Handle_Geom2d_Vector

        """
        this = _GeomToStep.new_GeomToStep_MakeVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Vector

        """
        res = _GeomToStep.GeomToStep_MakeVector_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeVector
GeomToStep_MakeVector_swigregister = _GeomToStep.GeomToStep_MakeVector_swigregister
GeomToStep_MakeVector_swigregister(GeomToStep_MakeVector)

class GeomToStep_MakeSurface(GeomToStep_Root):
    """
    This class implements the mapping between classes
    Surface from Geom and the class Surface from StepGeom which
    describes a Surface from prostep. As Surface is an abstract
    Surface this class is an access to the sub-class required.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomToStep_MakeSurface self, Handle_Geom_Surface C) -> GeomToStep_MakeSurface

        :type C: OCC.wrapper.Geom.Handle_Geom_Surface

        """
        this = _GeomToStep.new_GeomToStep_MakeSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        :rtype: OCC.wrapper.GeomToStep.Handle_StepGeom_Surface

        """
        res = _GeomToStep.GeomToStep_MakeSurface_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeSurface
GeomToStep_MakeSurface_swigregister = _GeomToStep.GeomToStep_MakeSurface_swigregister
GeomToStep_MakeSurface_swigregister(GeomToStep_MakeSurface)

class GeomToStep_MakeSurfaceOfLinearExtrusion(GeomToStep_Root):
    """
    This class implements the mapping between class
    SurfaceOfLinearExtrusion from Geom and the class
    SurfaceOfLinearExtrusion from StepGeom which describes a
    surface_of_linear_extrusion from Prostep
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomToStep_MakeSurfaceOfLinearExtrusion self, Handle_Geom_SurfaceOfLinearExtrusion CSurf) -> GeomToStep_MakeSurfaceOfLinearExtrusion

        :type CSurf: OCC.wrapper.Geom.Handle_Geom_SurfaceOfLinearExtrusion

        """
        this = _GeomToStep.new_GeomToStep_MakeSurfaceOfLinearExtrusion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion

        """
        res = _GeomToStep.GeomToStep_MakeSurfaceOfLinearExtrusion_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeSurfaceOfLinearExtrusion
GeomToStep_MakeSurfaceOfLinearExtrusion_swigregister = _GeomToStep.GeomToStep_MakeSurfaceOfLinearExtrusion_swigregister
GeomToStep_MakeSurfaceOfLinearExtrusion_swigregister(GeomToStep_MakeSurfaceOfLinearExtrusion)

class GeomToStep_MakeConic(GeomToStep_Root):
    """
    This class implements the mapping between classes
    Conic from Geom and the class Conic from StepGeom
    which describes a Conic from prostep. As Conic is an abstract
    Conic this class is an access to the sub-class required.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomToStep_MakeConic self, Handle_Geom_Conic C) -> GeomToStep_MakeConic
        __init__(GeomToStep_MakeConic self, Handle_Geom2d_Conic C) -> GeomToStep_MakeConic

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Conic

        """
        this = _GeomToStep.new_GeomToStep_MakeConic(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Conic

        """
        res = _GeomToStep.GeomToStep_MakeConic_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeConic
GeomToStep_MakeConic_swigregister = _GeomToStep.GeomToStep_MakeConic_swigregister
GeomToStep_MakeConic_swigregister(GeomToStep_MakeConic)

class GeomToStep_MakeParabola(GeomToStep_Root):
    """
    This class implements the mapping between the class
    Parabola from Geom and the class Parabola from
    StepGeom which describes a Parabola from ProSTEP
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomToStep_MakeParabola self, Handle_Geom2d_Parabola C) -> GeomToStep_MakeParabola
        __init__(GeomToStep_MakeParabola self, Handle_Geom_Parabola C) -> GeomToStep_MakeParabola

        :type C: OCC.wrapper.Geom.Handle_Geom_Parabola

        """
        this = _GeomToStep.new_GeomToStep_MakeParabola(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Parabola

        """
        res = _GeomToStep.GeomToStep_MakeParabola_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeParabola
GeomToStep_MakeParabola_swigregister = _GeomToStep.GeomToStep_MakeParabola_swigregister
GeomToStep_MakeParabola_swigregister(GeomToStep_MakeParabola)

class GeomToStep_MakeAxis2Placement3d(GeomToStep_Root):
    """
    This class implements the mapping between classes
    Axis2Placement from Geom and Ax2, Ax3 from gp, and the class
    Axis2Placement3d from StepGeom which describes an
    axis2_placement_3d from Prostep.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomToStep_MakeAxis2Placement3d self) -> GeomToStep_MakeAxis2Placement3d
        __init__(GeomToStep_MakeAxis2Placement3d self, gp_Ax2 A) -> GeomToStep_MakeAxis2Placement3d
        __init__(GeomToStep_MakeAxis2Placement3d self, gp_Ax3 A) -> GeomToStep_MakeAxis2Placement3d
        __init__(GeomToStep_MakeAxis2Placement3d self, gp_Trsf T) -> GeomToStep_MakeAxis2Placement3d
        __init__(GeomToStep_MakeAxis2Placement3d self, Handle_Geom_Axis2Placement A) -> GeomToStep_MakeAxis2Placement3d

        :type A: OCC.wrapper.Geom.Handle_Geom_Axis2Placement

        """
        this = _GeomToStep.new_GeomToStep_MakeAxis2Placement3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        :rtype: OCC.wrapper.GeomToStep.Handle_StepGeom_Axis2Placement3d

        """
        res = _GeomToStep.GeomToStep_MakeAxis2Placement3d_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeAxis2Placement3d
GeomToStep_MakeAxis2Placement3d_swigregister = _GeomToStep.GeomToStep_MakeAxis2Placement3d_swigregister
GeomToStep_MakeAxis2Placement3d_swigregister(GeomToStep_MakeAxis2Placement3d)

class GeomToStep_MakePlane(GeomToStep_Root):
    """
    This class implements the mapping between classes
    Plane from Geom and Pln from gp, and the class
    Plane from StepGeom which describes a plane from
    Prostep.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomToStep_MakePlane self, gp_Pln P) -> GeomToStep_MakePlane
        __init__(GeomToStep_MakePlane self, Handle_Geom_Plane P) -> GeomToStep_MakePlane

        :type P: OCC.wrapper.Geom.Handle_Geom_Plane

        """
        this = _GeomToStep.new_GeomToStep_MakePlane(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Plane

        """
        res = _GeomToStep.GeomToStep_MakePlane_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakePlane
GeomToStep_MakePlane_swigregister = _GeomToStep.GeomToStep_MakePlane_swigregister
GeomToStep_MakePlane_swigregister(GeomToStep_MakePlane)

class GeomToStep_MakeBSplineSurfaceWithKnots(GeomToStep_Root):
    """
    This class implements the mapping between class
    BSplineSurface from Geom and the class
    BSplineSurfaceWithKnots from
    StepGeom which describes a
    bspline_Surface_with_knots from Prostep
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomToStep_MakeBSplineSurfaceWithKnots self, Handle_Geom_BSplineSurface Bsplin) -> GeomToStep_MakeBSplineSurfaceWithKnots

        :type Bsplin: OCC.wrapper.Geom.Handle_Geom_BSplineSurface

        """
        this = _GeomToStep.new_GeomToStep_MakeBSplineSurfaceWithKnots(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots

        """
        res = _GeomToStep.GeomToStep_MakeBSplineSurfaceWithKnots_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeBSplineSurfaceWithKnots
GeomToStep_MakeBSplineSurfaceWithKnots_swigregister = _GeomToStep.GeomToStep_MakeBSplineSurfaceWithKnots_swigregister
GeomToStep_MakeBSplineSurfaceWithKnots_swigregister(GeomToStep_MakeBSplineSurfaceWithKnots)

class GeomToStep_MakeEllipse(GeomToStep_Root):
    """
    This class implements the mapping between classes
    Ellipse from Geom, and Circ from gp, and the class
    Ellipse from StepGeom which describes a Ellipse from
    Prostep.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomToStep_MakeEllipse self, gp_Elips C) -> GeomToStep_MakeEllipse
        __init__(GeomToStep_MakeEllipse self, Handle_Geom_Ellipse C) -> GeomToStep_MakeEllipse
        __init__(GeomToStep_MakeEllipse self, Handle_Geom2d_Ellipse C) -> GeomToStep_MakeEllipse

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Ellipse

        """
        this = _GeomToStep.new_GeomToStep_MakeEllipse(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Ellipse

        """
        res = _GeomToStep.GeomToStep_MakeEllipse_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeEllipse
GeomToStep_MakeEllipse_swigregister = _GeomToStep.GeomToStep_MakeEllipse_swigregister
GeomToStep_MakeEllipse_swigregister(GeomToStep_MakeEllipse)

class GeomToStep_MakeSphericalSurface(GeomToStep_Root):
    """
    This class implements the mapping between class
    SphericalSurface from Geom and the class
    SphericalSurface from StepGeom which describes a
    spherical_surface from Prostep
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomToStep_MakeSphericalSurface self, Handle_Geom_SphericalSurface CSurf) -> GeomToStep_MakeSphericalSurface

        :type CSurf: OCC.wrapper.Geom.Handle_Geom_SphericalSurface

        """
        this = _GeomToStep.new_GeomToStep_MakeSphericalSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_SphericalSurface

        """
        res = _GeomToStep.GeomToStep_MakeSphericalSurface_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeSphericalSurface
GeomToStep_MakeSphericalSurface_swigregister = _GeomToStep.GeomToStep_MakeSphericalSurface_swigregister
GeomToStep_MakeSphericalSurface_swigregister(GeomToStep_MakeSphericalSurface)

class GeomToStep_MakeSweptSurface(GeomToStep_Root):
    """
    This class implements the mapping between classes
    SweptSurface from Geom and the class SweptSurface from
    StepGeom which describes a SweptSurface from prostep.
    As SweptSurface is an abstract SweptSurface this class
    is an access to the sub-class required.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomToStep_MakeSweptSurface self, Handle_Geom_SweptSurface S) -> GeomToStep_MakeSweptSurface

        :type S: OCC.wrapper.Geom.Handle_Geom_SweptSurface

        """
        this = _GeomToStep.new_GeomToStep_MakeSweptSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_SweptSurface

        """
        res = _GeomToStep.GeomToStep_MakeSweptSurface_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeSweptSurface
GeomToStep_MakeSweptSurface_swigregister = _GeomToStep.GeomToStep_MakeSweptSurface_swigregister
GeomToStep_MakeSweptSurface_swigregister(GeomToStep_MakeSweptSurface)

class GeomToStep_MakeCylindricalSurface(GeomToStep_Root):
    """
    This class implements the mapping between class
    CylindricalSurface from Geom and the class
    CylindricalSurface from StepGeom which describes a
    cylindrical_surface from Prostep
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomToStep_MakeCylindricalSurface self, Handle_Geom_CylindricalSurface CSurf) -> GeomToStep_MakeCylindricalSurface

        :type CSurf: OCC.wrapper.Geom.Handle_Geom_CylindricalSurface

        """
        this = _GeomToStep.new_GeomToStep_MakeCylindricalSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_CylindricalSurface

        """
        res = _GeomToStep.GeomToStep_MakeCylindricalSurface_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeCylindricalSurface
GeomToStep_MakeCylindricalSurface_swigregister = _GeomToStep.GeomToStep_MakeCylindricalSurface_swigregister
GeomToStep_MakeCylindricalSurface_swigregister(GeomToStep_MakeCylindricalSurface)

class GeomToStep_MakeBSplineCurveWithKnots(GeomToStep_Root):
    """
    This class implements the mapping between classes
    BSplineCurve from Geom, Geom2d and the class
    BSplineCurveWithKnots from StepGeom
    which describes a bspline_curve_with_knots from
    Prostep
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomToStep_MakeBSplineCurveWithKnots self, Handle_Geom_BSplineCurve Bsplin) -> GeomToStep_MakeBSplineCurveWithKnots
        __init__(GeomToStep_MakeBSplineCurveWithKnots self, Handle_Geom2d_BSplineCurve Bsplin) -> GeomToStep_MakeBSplineCurveWithKnots

        :type Bsplin: OCC.wrapper.Geom2d.Handle_Geom2d_BSplineCurve

        """
        this = _GeomToStep.new_GeomToStep_MakeBSplineCurveWithKnots(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_BSplineCurveWithKnots

        """
        res = _GeomToStep.GeomToStep_MakeBSplineCurveWithKnots_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeBSplineCurveWithKnots
GeomToStep_MakeBSplineCurveWithKnots_swigregister = _GeomToStep.GeomToStep_MakeBSplineCurveWithKnots_swigregister
GeomToStep_MakeBSplineCurveWithKnots_swigregister(GeomToStep_MakeBSplineCurveWithKnots)

class GeomToStep_MakeAxis2Placement2d(GeomToStep_Root):
    """
    This class implements the mapping between classes
    Axis2Placement from Geom and Ax2, Ax22d from gp, and the class
    Axis2Placement2d from StepGeom which describes an
    axis2_placement_2d from Prostep.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomToStep_MakeAxis2Placement2d self, gp_Ax2 A) -> GeomToStep_MakeAxis2Placement2d
        __init__(GeomToStep_MakeAxis2Placement2d self, gp_Ax22d A) -> GeomToStep_MakeAxis2Placement2d

        :type A: OCC.wrapper.gp.gp_Ax22d

        """
        this = _GeomToStep.new_GeomToStep_MakeAxis2Placement2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Axis2Placement2d

        """
        res = _GeomToStep.GeomToStep_MakeAxis2Placement2d_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeAxis2Placement2d
GeomToStep_MakeAxis2Placement2d_swigregister = _GeomToStep.GeomToStep_MakeAxis2Placement2d_swigregister
GeomToStep_MakeAxis2Placement2d_swigregister(GeomToStep_MakeAxis2Placement2d)

class GeomToStep_MakeDirection(GeomToStep_Root):
    """
    This class implements the mapping between classes
    Direction from Geom, Geom2d and Dir, Dir2d from gp, and the
    class Direction from StepGeom which describes a direction
    from Prostep.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomToStep_MakeDirection self, gp_Dir D) -> GeomToStep_MakeDirection
        __init__(GeomToStep_MakeDirection self, gp_Dir2d D) -> GeomToStep_MakeDirection
        __init__(GeomToStep_MakeDirection self, Handle_Geom_Direction D) -> GeomToStep_MakeDirection
        __init__(GeomToStep_MakeDirection self, Handle_Geom2d_Direction D) -> GeomToStep_MakeDirection

        :type D: OCC.wrapper.Geom2d.Handle_Geom2d_Direction

        """
        this = _GeomToStep.new_GeomToStep_MakeDirection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        :rtype: OCC.wrapper.GeomToStep.Handle_StepGeom_Direction

        """
        res = _GeomToStep.GeomToStep_MakeDirection_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeDirection
GeomToStep_MakeDirection_swigregister = _GeomToStep.GeomToStep_MakeDirection_swigregister
GeomToStep_MakeDirection_swigregister(GeomToStep_MakeDirection)

class GeomToStep_MakeLine(GeomToStep_Root):
    """
    This class implements the mapping between classes
    Line from Geom and Lin from gp, and the class
    Line from StepGeom which describes a line from
    Prostep.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomToStep_MakeLine self, gp_Lin L) -> GeomToStep_MakeLine
        __init__(GeomToStep_MakeLine self, gp_Lin2d L) -> GeomToStep_MakeLine
        __init__(GeomToStep_MakeLine self, Handle_Geom_Line C) -> GeomToStep_MakeLine
        __init__(GeomToStep_MakeLine self, Handle_Geom2d_Line C) -> GeomToStep_MakeLine

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Line

        """
        this = _GeomToStep.new_GeomToStep_MakeLine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Line

        """
        res = _GeomToStep.GeomToStep_MakeLine_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeLine
GeomToStep_MakeLine_swigregister = _GeomToStep.GeomToStep_MakeLine_swigregister
GeomToStep_MakeLine_swigregister(GeomToStep_MakeLine)

class GeomToStep_MakeConicalSurface(GeomToStep_Root):
    """
    This class implements the mapping between class
    ConicalSurface from Geom and the class
    ConicalSurface from StepGeom which describes a
    conical_surface from Prostep
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomToStep_MakeConicalSurface self, Handle_Geom_ConicalSurface CSurf) -> GeomToStep_MakeConicalSurface

        :type CSurf: OCC.wrapper.Geom.Handle_Geom_ConicalSurface

        """
        this = _GeomToStep.new_GeomToStep_MakeConicalSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_ConicalSurface

        """
        res = _GeomToStep.GeomToStep_MakeConicalSurface_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeConicalSurface
GeomToStep_MakeConicalSurface_swigregister = _GeomToStep.GeomToStep_MakeConicalSurface_swigregister
GeomToStep_MakeConicalSurface_swigregister(GeomToStep_MakeConicalSurface)

class GeomToStep_MakeBoundedSurface(GeomToStep_Root):
    """
    This class implements the mapping between classes
    BoundedSurface from Geom and the class BoundedSurface from
    StepGeom which describes a BoundedSurface from prostep.
    As BoundedSurface is an abstract BoundedSurface this class
    is an access to the sub-class required.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomToStep_MakeBoundedSurface self, Handle_Geom_BoundedSurface C) -> GeomToStep_MakeBoundedSurface

        :type C: OCC.wrapper.Geom.Handle_Geom_BoundedSurface

        """
        this = _GeomToStep.new_GeomToStep_MakeBoundedSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_BoundedSurface

        """
        res = _GeomToStep.GeomToStep_MakeBoundedSurface_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeBoundedSurface
GeomToStep_MakeBoundedSurface_swigregister = _GeomToStep.GeomToStep_MakeBoundedSurface_swigregister
GeomToStep_MakeBoundedSurface_swigregister(GeomToStep_MakeBoundedSurface)

class GeomToStep_MakePolyline(GeomToStep_Root):
    """
    This class implements the mapping between an Array1 of points
    from gp and a Polyline from StepGeom.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomToStep_MakePolyline self, NCollection_Array1_gp_Pnt P) -> GeomToStep_MakePolyline
        __init__(GeomToStep_MakePolyline self, NCollection_Array1_gp_Pnt2d P) -> GeomToStep_MakePolyline

        :type P: OCC.wrapper.TColgp.TColgp_Array1OfPnt2d

        """
        this = _GeomToStep.new_GeomToStep_MakePolyline(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Polyline

        """
        res = _GeomToStep.GeomToStep_MakePolyline_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakePolyline
GeomToStep_MakePolyline_swigregister = _GeomToStep.GeomToStep_MakePolyline_swigregister
GeomToStep_MakePolyline_swigregister(GeomToStep_MakePolyline)

class GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface(GeomToStep_Root):
    """
    This class implements the mapping between class
    BSplineSurface from Geom and the class
    BSplineSurfaceWithKnotsAndRationalBSplineSurface from
    StepGeom which describes a
    rational_bspline_Surface_with_knots from Prostep
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface self, Handle_Geom_BSplineSurface Bsplin) -> GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface

        :type Bsplin: OCC.wrapper.Geom.Handle_Geom_BSplineSurface

        """
        this = _GeomToStep.new_GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface

        """
        res = _GeomToStep.GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface
GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface_swigregister = _GeomToStep.GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface_swigregister
GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface_swigregister(GeomToStep_MakeBSplineSurfaceWithKnotsAndRationalBSplineSurface)

class GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve(GeomToStep_Root):
    """
    This class implements the mapping between classes
    BSplineCurve from Geom, Geom2d and the class
    BSplineCurveWithKnotsAndRationalBSplineCurve from StepGeom
    which describes a rational_bspline_curve_with_knots from
    Prostep
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve self, Handle_Geom_BSplineCurve Bsplin) -> GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve
        __init__(GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve self, Handle_Geom2d_BSplineCurve Bsplin) -> GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve

        :type Bsplin: OCC.wrapper.Geom2d.Handle_Geom2d_BSplineCurve

        """
        this = _GeomToStep.new_GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve

        """
        res = _GeomToStep.GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve
GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve_swigregister = _GeomToStep.GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve_swigregister
GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve_swigregister(GeomToStep_MakeBSplineCurveWithKnotsAndRationalBSplineCurve)

class GeomToStep_MakeRectangularTrimmedSurface(GeomToStep_Root):
    """
    This class implements the mapping between class
    RectangularTrimmedSurface from Geom and the class
    RectangularTrimmedSurface from
    StepGeom which describes a
    rectangular_trimmed_surface from ISO-IS 10303-42
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomToStep_MakeRectangularTrimmedSurface self, Handle_Geom_RectangularTrimmedSurface RTSurf) -> GeomToStep_MakeRectangularTrimmedSurface

        :type RTSurf: OCC.wrapper.Geom.Handle_Geom_RectangularTrimmedSurface

        """
        this = _GeomToStep.new_GeomToStep_MakeRectangularTrimmedSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_RectangularTrimmedSurface

        """
        res = _GeomToStep.GeomToStep_MakeRectangularTrimmedSurface_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeRectangularTrimmedSurface
GeomToStep_MakeRectangularTrimmedSurface_swigregister = _GeomToStep.GeomToStep_MakeRectangularTrimmedSurface_swigregister
GeomToStep_MakeRectangularTrimmedSurface_swigregister(GeomToStep_MakeRectangularTrimmedSurface)

class GeomToStep_MakeHyperbola(GeomToStep_Root):
    """
    This class implements the mapping between the class
    Hyperbola from Geom and the class Hyperbola from
    StepGeom which describes a Hyperbola from ProSTEP
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomToStep_MakeHyperbola self, Handle_Geom2d_Hyperbola C) -> GeomToStep_MakeHyperbola
        __init__(GeomToStep_MakeHyperbola self, Handle_Geom_Hyperbola C) -> GeomToStep_MakeHyperbola

        :type C: OCC.wrapper.Geom.Handle_Geom_Hyperbola

        """
        this = _GeomToStep.new_GeomToStep_MakeHyperbola(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_Hyperbola

        """
        res = _GeomToStep.GeomToStep_MakeHyperbola_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeHyperbola
GeomToStep_MakeHyperbola_swigregister = _GeomToStep.GeomToStep_MakeHyperbola_swigregister
GeomToStep_MakeHyperbola_swigregister(GeomToStep_MakeHyperbola)

class GeomToStep_MakeCurve(GeomToStep_Root):
    """
    This class implements the mapping between classes
    Curve from Geom and the class Curve from StepGeom which
    describes a Curve from prostep. As Curve is an
    abstract curve this class an access to the sub-class required.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomToStep_MakeCurve self, Handle_Geom_Curve C) -> GeomToStep_MakeCurve
        __init__(GeomToStep_MakeCurve self, Handle_Geom2d_Curve C) -> GeomToStep_MakeCurve

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        this = _GeomToStep.new_GeomToStep_MakeCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        :rtype: OCC.wrapper.GeomToStep.Handle_StepGeom_Curve

        """
        res = _GeomToStep.GeomToStep_MakeCurve_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeCurve
GeomToStep_MakeCurve_swigregister = _GeomToStep.GeomToStep_MakeCurve_swigregister
GeomToStep_MakeCurve_swigregister(GeomToStep_MakeCurve)

class GeomToStep_MakeAxis1Placement(GeomToStep_Root):
    """
    This class implements the mapping between classes
    Axis1Placement from Geom and Ax1 from gp, and the class
    Axis1Placement from StepGeom which describes an
    Axis1Placement from Prostep.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomToStep_MakeAxis1Placement self, gp_Ax1 A) -> GeomToStep_MakeAxis1Placement
        __init__(GeomToStep_MakeAxis1Placement self, gp_Ax2d A) -> GeomToStep_MakeAxis1Placement
        __init__(GeomToStep_MakeAxis1Placement self, Handle_Geom_Axis1Placement A) -> GeomToStep_MakeAxis1Placement
        __init__(GeomToStep_MakeAxis1Placement self, Handle_Geom2d_AxisPlacement A) -> GeomToStep_MakeAxis1Placement

        :type A: OCC.wrapper.Geom2d.Handle_Geom2d_AxisPlacement

        """
        this = _GeomToStep.new_GeomToStep_MakeAxis1Placement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        :rtype: OCC.wrapper.GeomToStep.Handle_StepGeom_Axis1Placement

        """
        res = _GeomToStep.GeomToStep_MakeAxis1Placement_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeAxis1Placement
GeomToStep_MakeAxis1Placement_swigregister = _GeomToStep.GeomToStep_MakeAxis1Placement_swigregister
GeomToStep_MakeAxis1Placement_swigregister(GeomToStep_MakeAxis1Placement)

class GeomToStep_MakeSurfaceOfRevolution(GeomToStep_Root):
    """
    This class implements the mapping between class
    SurfaceOfRevolution from Geom and the class
    SurfaceOfRevolution from StepGeom which describes a
    surface_of_revolution from Prostep
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomToStep_MakeSurfaceOfRevolution self, Handle_Geom_SurfaceOfRevolution RevSurf) -> GeomToStep_MakeSurfaceOfRevolution

        :type RevSurf: OCC.wrapper.Geom.Handle_Geom_SurfaceOfRevolution

        """
        this = _GeomToStep.new_GeomToStep_MakeSurfaceOfRevolution(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_SurfaceOfRevolution

        """
        res = _GeomToStep.GeomToStep_MakeSurfaceOfRevolution_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomToStep.delete_GeomToStep_MakeSurfaceOfRevolution
GeomToStep_MakeSurfaceOfRevolution_swigregister = _GeomToStep.GeomToStep_MakeSurfaceOfRevolution_swigregister
GeomToStep_MakeSurfaceOfRevolution_swigregister(GeomToStep_MakeSurfaceOfRevolution)



