# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_IGESCAFControl')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_IGESCAFControl')
    _IGESCAFControl = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IGESCAFControl', [dirname(__file__)])
        except ImportError:
            import _IGESCAFControl
            return _IGESCAFControl
        try:
            _mod = imp.load_module('_IGESCAFControl', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _IGESCAFControl = swig_import_helper()
    del swig_import_helper
else:
    import _IGESCAFControl
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IGESCAFControl.delete_SwigPyIterator

    def value(self):
        return _IGESCAFControl.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _IGESCAFControl.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _IGESCAFControl.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _IGESCAFControl.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _IGESCAFControl.SwigPyIterator_equal(self, x)

    def copy(self):
        return _IGESCAFControl.SwigPyIterator_copy(self)

    def next(self):
        return _IGESCAFControl.SwigPyIterator_next(self)

    def __next__(self):
        return _IGESCAFControl.SwigPyIterator___next__(self)

    def previous(self):
        return _IGESCAFControl.SwigPyIterator_previous(self)

    def advance(self, n):
        return _IGESCAFControl.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _IGESCAFControl.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _IGESCAFControl.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _IGESCAFControl.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _IGESCAFControl.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _IGESCAFControl.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _IGESCAFControl.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _IGESCAFControl.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _IGESCAFControl.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_IGESCAFControl.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _IGESCAFControl.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _IGESCAFControl.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IGESCAFControl.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _IGESCAFControl.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _IGESCAFControl.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _IGESCAFControl.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _IGESCAFControl.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_IGESCAFControl.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _IGESCAFControl.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _IGESCAFControl.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IGESCAFControl.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _IGESCAFControl.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _IGESCAFControl.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _IGESCAFControl.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _IGESCAFControl.ptr_to_number(item)
ptr_to_number = _IGESCAFControl.ptr_to_number

def HashCode(*args):
    return _IGESCAFControl.HashCode(*args)
HashCode = _IGESCAFControl.HashCode

def ptr_equal(a, b):
    return _IGESCAFControl.ptr_equal(a, b)
ptr_equal = _IGESCAFControl.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import XCAFPrs
else:
    import XCAFPrs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TPrsStd
else:
    import TPrsStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDataXtd
else:
    import TDataXtd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TShort
else:
    import TShort
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDF
else:
    import TDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Poly
else:
    import Poly
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TNaming
else:
    import TNaming
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDataStd
else:
    import TDataStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import AIS
else:
    import AIS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import PrsMgr
else:
    import PrsMgr
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Graphic3d
else:
    import Graphic3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BVH
else:
    import BVH
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Image
else:
    import Image
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Aspect
else:
    import Aspect
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Font
else:
    import Font
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import V3d
else:
    import V3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Prs3d
else:
    import Prs3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import HLRAlgo
else:
    import HLRAlgo
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import DsgPrs
else:
    import DsgPrs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Select3D
else:
    import Select3D
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import SelectBasics
else:
    import SelectBasics
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import SelectMgr
else:
    import SelectMgr
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StdSelect
else:
    import StdSelect
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESControl
else:
    import IGESControl
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Transfer
else:
    import Transfer
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESData
else:
    import IGESData
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IFSelect
else:
    import IFSelect
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IFGraph
else:
    import IFGraph
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import XSControl
else:
    import XSControl
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import ShapeExtend
else:
    import ShapeExtend
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColGeom
else:
    import TColGeom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESToBRep
else:
    import IGESToBRep
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESSolid
else:
    import IGESSolid
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESGeom
else:
    import IGESGeom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESBasic
else:
    import IGESBasic
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDocStd
else:
    import TDocStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import CDF
else:
    import CDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import CDM
else:
    import CDM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Resource
else:
    import Resource
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import PCDM
else:
    import PCDM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import LDOM
else:
    import LDOM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Storage
else:
    import Storage
del _swig_python_version_info
class IGESCAFControl_Writer(IGESControl.IGESControl_Writer):
    """
    Provides a tool to write DECAF document to the
    IGES file. Besides transfer of shapes (including
    assemblies) provided by IGESControl, supports also
    colors and part names
    IGESCAFControl_Writer writer();
    Methods for writing IGES file:
    writer.Transfer (Document);
    writer.Write("filename") or writer.Write(OStream)  or
    writer.Perform(Document,"filename");
    Methods for managing the writing of attributes.
    Colors
    writer.SetColorMode(colormode);
    Standard_Boolean colormode = writer.GetColorMode();
    Layers
    writer.SetLayerMode(layermode);
    Standard_Boolean layermode = writer.GetLayerMode();
    Names
    writer.SetNameMode(namemode);
    Standard_Boolean namemode = writer.GetNameMode();
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESCAFControl_Writer self) -> IGESCAFControl_Writer
        __init__(IGESCAFControl_Writer self, Handle_XSControl_WorkSession WS, Standard_Boolean const scratch) -> IGESCAFControl_Writer

        Creates a reader tool and attaches it to an already existing Session
        Clears the session if it was not yet set for IGES

        :type WS: OCC.wrapper.XSControl.Handle_XSControl_WorkSession
        :type scratch: bool

        """
        this = _IGESCAFControl.new_IGESCAFControl_Writer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Transfer(self, *args):
        """
        Transfer(IGESCAFControl_Writer self, Handle_TDocStd_Document doc) -> Standard_Boolean
        Transfer(IGESCAFControl_Writer self, NCollection_Sequence_TDF_Label labels) -> Standard_Boolean
        Transfer(IGESCAFControl_Writer self, TDF_Label label) -> Standard_Boolean

        Transfers label to a IGES model
        Returns True if translation is OK

        :type label: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESCAFControl.IGESCAFControl_Writer_Transfer(self, *args)


    def Perform(self, *args):
        """
        Perform(IGESCAFControl_Writer self, Handle_TDocStd_Document doc, TCollection_AsciiString filename) -> Standard_Boolean
        Perform(IGESCAFControl_Writer self, Handle_TDocStd_Document doc, Standard_CString const filename) -> Standard_Boolean

        Transfers a document and writes it to a IGES file
        Returns True if translation is OK

        :type doc: OCC.wrapper.TDocStd.Handle_TDocStd_Document
        :type filename: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESCAFControl.IGESCAFControl_Writer_Perform(self, *args)


    def SetColorMode(self, *args):
        """
        SetColorMode(IGESCAFControl_Writer self, Standard_Boolean const colormode)

        Set ColorMode for indicate write Colors or not.

        :type colormode: bool

        """
        return _IGESCAFControl.IGESCAFControl_Writer_SetColorMode(self, *args)


    def GetColorMode(self, *args):
        """
        GetColorMode(IGESCAFControl_Writer self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESCAFControl.IGESCAFControl_Writer_GetColorMode(self, *args)


    def SetNameMode(self, *args):
        """
        SetNameMode(IGESCAFControl_Writer self, Standard_Boolean const namemode)

        Set NameMode for indicate write Name or not.

        :type namemode: bool

        """
        return _IGESCAFControl.IGESCAFControl_Writer_SetNameMode(self, *args)


    def GetNameMode(self, *args):
        """
        GetNameMode(IGESCAFControl_Writer self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESCAFControl.IGESCAFControl_Writer_GetNameMode(self, *args)


    def SetLayerMode(self, *args):
        """
        SetLayerMode(IGESCAFControl_Writer self, Standard_Boolean const layermode)

        Set LayerMode for indicate write Layers or not.

        :type layermode: bool

        """
        return _IGESCAFControl.IGESCAFControl_Writer_SetLayerMode(self, *args)


    def GetLayerMode(self, *args):
        """
        GetLayerMode(IGESCAFControl_Writer self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESCAFControl.IGESCAFControl_Writer_GetLayerMode(self, *args)

    __swig_destroy__ = _IGESCAFControl.delete_IGESCAFControl_Writer
IGESCAFControl_Writer_swigregister = _IGESCAFControl.IGESCAFControl_Writer_swigregister
IGESCAFControl_Writer_swigregister(IGESCAFControl_Writer)

class IGESCAFControl_(object):
    """
    Provides high-level API to translate IGES file
    to and from DECAF document
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def DecodeColor(*args):
        """
        DecodeColor(Standard_Integer const col) -> Quantity_Color

        Provides a tool for writing IGES file
        Converts IGES color index to CASCADE color

        :type col: int
        :rtype: OCC.wrapper.Quantity.Quantity_Color

        """
        return _IGESCAFControl.IGESCAFControl__DecodeColor(*args)

    DecodeColor = staticmethod(DecodeColor)

    def EncodeColor(*args):
        """
        EncodeColor(Quantity_Color col) -> Standard_Integer

        Tries to Convert CASCADE color to IGES color index
        If no corresponding color defined in IGES, returns 0

        :type col: OCC.wrapper.Quantity.Quantity_Color
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESCAFControl.IGESCAFControl__EncodeColor(*args)

    EncodeColor = staticmethod(EncodeColor)

    def __init__(self):
        """
        Provides high-level API to translate IGES file
        to and from DECAF document
        """
        this = _IGESCAFControl.new_IGESCAFControl_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IGESCAFControl.delete_IGESCAFControl_
IGESCAFControl__swigregister = _IGESCAFControl.IGESCAFControl__swigregister
IGESCAFControl__swigregister(IGESCAFControl_)

def IGESCAFControl__DecodeColor(*args):
    """
    IGESCAFControl__DecodeColor(Standard_Integer const col) -> Quantity_Color

    Provides a tool for writing IGES file
    Converts IGES color index to CASCADE color

    :type col: int
    :rtype: OCC.wrapper.Quantity.Quantity_Color

    """
    return _IGESCAFControl.IGESCAFControl__DecodeColor(*args)

def IGESCAFControl__EncodeColor(*args):
    """
    IGESCAFControl__EncodeColor(Quantity_Color col) -> Standard_Integer

    Tries to Convert CASCADE color to IGES color index
    If no corresponding color defined in IGES, returns 0

    :type col: OCC.wrapper.Quantity.Quantity_Color
    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _IGESCAFControl.IGESCAFControl__EncodeColor(*args)

class IGESCAFControl_Reader(IGESControl.IGESControl_Reader):
    """
    Provides a tool to read IGES file and put it into
    DECAF document. Besides transfer of shapes (including
    assemblies) provided by IGESControl, supports also
    colors and part names
    IGESCAFControl_Reader reader; Methods for translation of an IGES file:
    reader.ReadFile("filename");
    reader.Transfer(Document); or
    reader.Perform("filename",doc);
    Methods for managing reading attributes.
    Colors
    reader.SetColorMode(colormode);
    Standard_Boolean colormode = reader.GetColorMode();
    Layers
    reader.SetLayerMode(layermode);
    Standard_Boolean layermode = reader.GetLayerMode();
    Names
    reader.SetNameMode(namemode);
    Standard_Boolean namemode = reader.GetNameMode();
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESCAFControl_Reader self) -> IGESCAFControl_Reader
        __init__(IGESCAFControl_Reader self, Handle_XSControl_WorkSession theWS, Standard_Boolean const FromScratch) -> IGESCAFControl_Reader

        Creates a reader tool and attaches it to an already existing Session
        Clears the session if it was not yet set for IGES

        :type theWS: OCC.wrapper.XSControl.Handle_XSControl_WorkSession
        :type FromScratch: bool

        """
        this = _IGESCAFControl.new_IGESCAFControl_Reader(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Transfer(self, *args):
        """
        Transfer(IGESCAFControl_Reader self, Handle_TDocStd_Document theDoc) -> Standard_Boolean

        Translates currently loaded IGES file into the document
        Returns True if succeeded, and False in case of fail

        :type theDoc: OCC.wrapper.TDocStd.Handle_TDocStd_Document
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESCAFControl.IGESCAFControl_Reader_Transfer(self, *args)


    def Perform(self, *args):
        """
        Perform(IGESCAFControl_Reader self, TCollection_AsciiString theFileName, Handle_TDocStd_Document theDoc) -> Standard_Boolean
        Perform(IGESCAFControl_Reader self, Standard_CString const theFileName, Handle_TDocStd_Document theDoc) -> Standard_Boolean

        Translate IGES file given by filename into the document
        Return True if succeeded, and False in case of fail

        :type theFileName: OCC.wrapper.Standard.Standard_CString
        :type theDoc: OCC.wrapper.TDocStd.Handle_TDocStd_Document
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESCAFControl.IGESCAFControl_Reader_Perform(self, *args)


    def SetColorMode(self, *args):
        """
        SetColorMode(IGESCAFControl_Reader self, Standard_Boolean const theMode)

        Set ColorMode for indicate read Colors or not.

        :type theMode: bool

        """
        return _IGESCAFControl.IGESCAFControl_Reader_SetColorMode(self, *args)


    def GetColorMode(self, *args):
        """
        GetColorMode(IGESCAFControl_Reader self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESCAFControl.IGESCAFControl_Reader_GetColorMode(self, *args)


    def SetNameMode(self, *args):
        """
        SetNameMode(IGESCAFControl_Reader self, Standard_Boolean const theMode)

        Set NameMode for indicate read Name or not.

        :type theMode: bool

        """
        return _IGESCAFControl.IGESCAFControl_Reader_SetNameMode(self, *args)


    def GetNameMode(self, *args):
        """
        GetNameMode(IGESCAFControl_Reader self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESCAFControl.IGESCAFControl_Reader_GetNameMode(self, *args)


    def SetLayerMode(self, *args):
        """
        SetLayerMode(IGESCAFControl_Reader self, Standard_Boolean const theMode)

        Set LayerMode for indicate read Layers or not.

        :type theMode: bool

        """
        return _IGESCAFControl.IGESCAFControl_Reader_SetLayerMode(self, *args)


    def GetLayerMode(self, *args):
        """
        GetLayerMode(IGESCAFControl_Reader self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESCAFControl.IGESCAFControl_Reader_GetLayerMode(self, *args)

    __swig_destroy__ = _IGESCAFControl.delete_IGESCAFControl_Reader
IGESCAFControl_Reader_swigregister = _IGESCAFControl.IGESCAFControl_Reader_swigregister
IGESCAFControl_Reader_swigregister(IGESCAFControl_Reader)



