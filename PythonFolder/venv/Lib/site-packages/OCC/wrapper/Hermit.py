# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Hermit')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Hermit')
    _Hermit = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Hermit', [dirname(__file__)])
        except ImportError:
            import _Hermit
            return _Hermit
        try:
            _mod = imp.load_module('_Hermit', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Hermit = swig_import_helper()
    del swig_import_helper
else:
    import _Hermit
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Hermit.delete_SwigPyIterator

    def value(self):
        return _Hermit.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Hermit.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Hermit.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Hermit.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Hermit.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Hermit.SwigPyIterator_copy(self)

    def next(self):
        return _Hermit.SwigPyIterator_next(self)

    def __next__(self):
        return _Hermit.SwigPyIterator___next__(self)

    def previous(self):
        return _Hermit.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Hermit.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Hermit.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Hermit.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Hermit.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Hermit.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Hermit.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Hermit.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Hermit.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _Hermit.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_Hermit.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _Hermit.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _Hermit.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Hermit.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _Hermit.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _Hermit.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _Hermit.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _Hermit.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_Hermit.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _Hermit.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _Hermit.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Hermit.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _Hermit.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _Hermit.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _Hermit.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _Hermit.ptr_to_number(item)
ptr_to_number = _Hermit.ptr_to_number

def HashCode(*args):
    return _Hermit.HashCode(*args)
HashCode = _Hermit.HashCode

def ptr_equal(a, b):
    return _Hermit.ptr_equal(a, b)
ptr_equal = _Hermit.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
class Hermit_(object):
    """
    This  is used to  reparameterize Rational  BSpline
    Curves so that we can   concatenate them later to
    build C1 Curves  It builds and 1D-reparameterizing
    function starting from an Hermite interpolation and
    adding knots and modifying poles of the 1D BSpline
    obtained that way. The goal is to build a(u) so that
    if we consider a BSpline curve
    N(u)
    f(u) =  -----
    D(u)

    the function a(u)D(u) has value 1 at the umin and umax
    and has 0.0e0 derivative value a umin and umax.
    The details of the computation occuring in this package
    can be found by reading :
    " Etude sur la concatenation de NURBS en vue du
    balayage de surfaces" PFE n S85 Ensam Lille
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Solution(*args):
        """
        Solution(Handle_Geom_BSplineCurve BS, Standard_Real const TolPoles=0.000001, Standard_Real const TolKnots=0.000001) -> Handle_Geom2d_BSplineCurve
        Solution(Handle_Geom2d_BSplineCurve BS, Standard_Real const TolPoles=0.000001, Standard_Real const TolKnots=0.000001) -> Handle_Geom2d_BSplineCurve

        returns the correct spline a(u) which will
        be multiplicated with BS later.

        :type BS: OCC.wrapper.Geom2d.Handle_Geom2d_BSplineCurve
        :type TolPoles: float
        :type TolKnots: float
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_BSplineCurve

        """
        return _Hermit.Hermit__Solution(*args)

    Solution = staticmethod(Solution)

    def Solutionbis(*args):
        """
        Solutionbis(Handle_Geom_BSplineCurve BS, Standard_Real const TolPoles=0.000001, Standard_Real const TolKnots=0.000001)

        returns the knots to insert to a(u) to
        stay with a constant sign and in the
        tolerances.

        :type BS: OCC.wrapper.Geom.Handle_Geom_BSplineCurve
        :type Knotmin: float
        :type Knotmax: float
        :type TolPoles: float
        :type TolKnots: float

        """
        return _Hermit.Hermit__Solutionbis(*args)

    Solutionbis = staticmethod(Solutionbis)

    def __init__(self):
        """
        This  is used to  reparameterize Rational  BSpline
        Curves so that we can   concatenate them later to
        build C1 Curves  It builds and 1D-reparameterizing
        function starting from an Hermite interpolation and
        adding knots and modifying poles of the 1D BSpline
        obtained that way. The goal is to build a(u) so that
        if we consider a BSpline curve
        N(u)
        f(u) =  -----
        D(u)

        the function a(u)D(u) has value 1 at the umin and umax
        and has 0.0e0 derivative value a umin and umax.
        The details of the computation occuring in this package
        can be found by reading :
        " Etude sur la concatenation de NURBS en vue du
        balayage de surfaces" PFE n S85 Ensam Lille
        """
        this = _Hermit.new_Hermit_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Hermit.delete_Hermit_
Hermit__swigregister = _Hermit.Hermit__swigregister
Hermit__swigregister(Hermit_)

def Hermit__Solution(*args):
    """
    Solution(Handle_Geom_BSplineCurve BS, Standard_Real const TolPoles=0.000001, Standard_Real const TolKnots=0.000001) -> Handle_Geom2d_BSplineCurve
    Hermit__Solution(Handle_Geom2d_BSplineCurve BS, Standard_Real const TolPoles=0.000001, Standard_Real const TolKnots=0.000001) -> Handle_Geom2d_BSplineCurve

    returns the correct spline a(u) which will
    be multiplicated with BS later.

    :type BS: OCC.wrapper.Geom2d.Handle_Geom2d_BSplineCurve
    :type TolPoles: float
    :type TolKnots: float
    :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_BSplineCurve

    """
    return _Hermit.Hermit__Solution(*args)

def Hermit__Solutionbis(*args):
    """
    Hermit__Solutionbis(Handle_Geom_BSplineCurve BS, Standard_Real const TolPoles=0.000001, Standard_Real const TolKnots=0.000001)

    returns the knots to insert to a(u) to
    stay with a constant sign and in the
    tolerances.

    :type BS: OCC.wrapper.Geom.Handle_Geom_BSplineCurve
    :type Knotmin: float
    :type Knotmax: float
    :type TolPoles: float
    :type TolKnots: float

    """
    return _Hermit.Hermit__Solutionbis(*args)



