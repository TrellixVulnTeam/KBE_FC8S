# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TPrsStd')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TPrsStd')
    _TPrsStd = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TPrsStd', [dirname(__file__)])
        except ImportError:
            import _TPrsStd
            return _TPrsStd
        try:
            _mod = imp.load_module('_TPrsStd', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TPrsStd = swig_import_helper()
    del swig_import_helper
else:
    import _TPrsStd
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TPrsStd.delete_SwigPyIterator

    def value(self):
        return _TPrsStd.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _TPrsStd.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _TPrsStd.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _TPrsStd.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _TPrsStd.SwigPyIterator_equal(self, x)

    def copy(self):
        return _TPrsStd.SwigPyIterator_copy(self)

    def next(self):
        return _TPrsStd.SwigPyIterator_next(self)

    def __next__(self):
        return _TPrsStd.SwigPyIterator___next__(self)

    def previous(self):
        return _TPrsStd.SwigPyIterator_previous(self)

    def advance(self, n):
        return _TPrsStd.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _TPrsStd.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _TPrsStd.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _TPrsStd.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _TPrsStd.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _TPrsStd.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _TPrsStd.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _TPrsStd.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _TPrsStd.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_TPrsStd.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _TPrsStd.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _TPrsStd.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TPrsStd.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _TPrsStd.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _TPrsStd.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _TPrsStd.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _TPrsStd.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_TPrsStd.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _TPrsStd.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _TPrsStd.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TPrsStd.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _TPrsStd.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _TPrsStd.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _TPrsStd.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _TPrsStd.ptr_to_number(item)
ptr_to_number = _TPrsStd.ptr_to_number

def HashCode(*args):
    return _TPrsStd.HashCode(*args)
HashCode = _TPrsStd.HashCode

def ptr_equal(a, b):
    return _TPrsStd.ptr_equal(a, b)
ptr_equal = _TPrsStd.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDataXtd
else:
    import TDataXtd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TShort
else:
    import TShort
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDF
else:
    import TDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Poly
else:
    import Poly
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TNaming
else:
    import TNaming
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDataStd
else:
    import TDataStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import AIS
else:
    import AIS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import PrsMgr
else:
    import PrsMgr
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Graphic3d
else:
    import Graphic3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BVH
else:
    import BVH
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Image
else:
    import Image
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Aspect
else:
    import Aspect
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Font
else:
    import Font
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import V3d
else:
    import V3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Prs3d
else:
    import Prs3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import HLRAlgo
else:
    import HLRAlgo
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import DsgPrs
else:
    import DsgPrs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Select3D
else:
    import Select3D
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import SelectBasics
else:
    import SelectBasics
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import SelectMgr
else:
    import SelectMgr
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StdSelect
else:
    import StdSelect
del _swig_python_version_info
class TPrsStd_Driver(Standard.Standard_Transient):
    """
    Driver for AIS
    ==============
    An abstract class, which - in classes inheriting
    from it - allows you to update an
    AIS_InteractiveObject or create one if one does
    not already exist.
    For both creation and update, the interactive
    object is filled with information contained in
    attributes. These attributes are those found on
    the label given as an argument in the method Update.
    true is returned if the interactive object was modified by the update.
    This class  provide  an algorithm  to  Build with its  default
    values (if Null) or Update (if !Null) an AIS_InteractiveObject
    .   Resources are found  in  attributes associated to  a given
    label.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TPrsStd_Driver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TPrsStd_Driver(self) 
            return h


    def Update(self, *args):
        """
        Update(TPrsStd_Driver self, TDF_Label L, Handle_AIS_InteractiveObject ais) -> Standard_Boolean

        Updates the interactive object ais with
        information found on the attributes associated with the label L.

        :type L: OCC.wrapper.TDF.TDF_Label
        :type ais: OCC.wrapper.AIS.Handle_AIS_InteractiveObject
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.TPrsStd_Driver_Update(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TPrsStd.TPrsStd_Driver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TPrsStd.TPrsStd_Driver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TPrsStd.TPrsStd_Driver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TPrsStd.delete_TPrsStd_Driver
TPrsStd_Driver_swigregister = _TPrsStd.TPrsStd_Driver_swigregister
TPrsStd_Driver_swigregister(TPrsStd_Driver)

def TPrsStd_Driver_get_type_name(*args):
    """
    TPrsStd_Driver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TPrsStd.TPrsStd_Driver_get_type_name(*args)

def TPrsStd_Driver_get_type_descriptor(*args):
    """
    TPrsStd_Driver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TPrsStd.TPrsStd_Driver_get_type_descriptor(*args)

class TPrsStd_DriverTable(Standard.Standard_Transient):
    """
    This class is   a  container to record  (AddDriver)
    binding between  GUID and  TPrsStd_Driver.
    You create a new instance of TPrsStd_Driver
    and use the method AddDriver to load it into the driver table. the method
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TPrsStd_DriverTable
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TPrsStd_DriverTable(self) 
            return h


    def Get(*args):
        """
        Get() -> Handle_TPrsStd_DriverTable

        Returns the static table.
        If it does not exist, creates it and fills it with standard drivers.

        :rtype: OCC.wrapper.TPrsStd.Handle_TPrsStd_DriverTable

        """
        return _TPrsStd.TPrsStd_DriverTable_Get(*args)

    Get = staticmethod(Get)

    def __init__(self, *args):
        """
        __init__(TPrsStd_DriverTable self) -> TPrsStd_DriverTable

        Default constructor


        """
        this = _TPrsStd.new_TPrsStd_DriverTable(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def InitStandardDrivers(self, *args):
        """
        InitStandardDrivers(TPrsStd_DriverTable self)

        Fills the table with standard drivers


        """
        return _TPrsStd.TPrsStd_DriverTable_InitStandardDrivers(self, *args)


    def AddDriver(self, *args):
        """
        AddDriver(TPrsStd_DriverTable self, Standard_GUID guid, Handle_TPrsStd_Driver driver) -> Standard_Boolean

        Returns true if the driver has been added successfully to the driver table.

        :type guid: OCC.wrapper.Standard.Standard_GUID
        :type driver: OCC.wrapper.TPrsStd.Handle_TPrsStd_Driver
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.TPrsStd_DriverTable_AddDriver(self, *args)


    def FindDriver(self, *args):
        """
        FindDriver(TPrsStd_DriverTable self, Standard_GUID guid, Handle_TPrsStd_Driver driver) -> Standard_Boolean

        Returns true if the driver was found.

        :type guid: OCC.wrapper.Standard.Standard_GUID
        :type driver: OCC.wrapper.TPrsStd.Handle_TPrsStd_Driver
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.TPrsStd_DriverTable_FindDriver(self, *args)


    def RemoveDriver(self, *args):
        """
        RemoveDriver(TPrsStd_DriverTable self, Standard_GUID guid) -> Standard_Boolean

        Removes a driver with the given GUID.
        Returns true if the driver has been removed successfully.

        :type guid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.TPrsStd_DriverTable_RemoveDriver(self, *args)


    def Clear(self, *args):
        """
        Clear(TPrsStd_DriverTable self)

        Removes all drivers. Returns
        true if the driver has been removed successfully.
        If this method is used, the InitStandardDrivers method should be
        called to fill the table with standard drivers.


        """
        return _TPrsStd.TPrsStd_DriverTable_Clear(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TPrsStd.TPrsStd_DriverTable_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TPrsStd.TPrsStd_DriverTable_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TPrsStd.TPrsStd_DriverTable_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TPrsStd.delete_TPrsStd_DriverTable
TPrsStd_DriverTable_swigregister = _TPrsStd.TPrsStd_DriverTable_swigregister
TPrsStd_DriverTable_swigregister(TPrsStd_DriverTable)

def TPrsStd_DriverTable_Get(*args):
    """
    TPrsStd_DriverTable_Get() -> Handle_TPrsStd_DriverTable

    Returns the static table.
    If it does not exist, creates it and fills it with standard drivers.

    :rtype: OCC.wrapper.TPrsStd.Handle_TPrsStd_DriverTable

    """
    return _TPrsStd.TPrsStd_DriverTable_Get(*args)

def TPrsStd_DriverTable_get_type_name(*args):
    """
    TPrsStd_DriverTable_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TPrsStd.TPrsStd_DriverTable_get_type_name(*args)

def TPrsStd_DriverTable_get_type_descriptor(*args):
    """
    TPrsStd_DriverTable_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TPrsStd.TPrsStd_DriverTable_get_type_descriptor(*args)

class TPrsStd_AxisDriver(TPrsStd_Driver):
    """An implementation of TPrsStd_Driver for axes."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TPrsStd_AxisDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TPrsStd_AxisDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TPrsStd_AxisDriver self) -> TPrsStd_AxisDriver

        Constructs an empty axis driver.


        """
        this = _TPrsStd.new_TPrsStd_AxisDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Update(self, *args):
        """
        Update(TPrsStd_AxisDriver self, TDF_Label aLabel, Handle_AIS_InteractiveObject anAISObject) -> Standard_Boolean

        Build the AISObject (if null) or update it.
        No compute is done.
        Returns <True> if informations was found
        and AISObject updated.

        :type aLabel: OCC.wrapper.TDF.TDF_Label
        :type anAISObject: OCC.wrapper.AIS.Handle_AIS_InteractiveObject
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.TPrsStd_AxisDriver_Update(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TPrsStd.TPrsStd_AxisDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TPrsStd.TPrsStd_AxisDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TPrsStd.TPrsStd_AxisDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TPrsStd.delete_TPrsStd_AxisDriver
TPrsStd_AxisDriver_swigregister = _TPrsStd.TPrsStd_AxisDriver_swigregister
TPrsStd_AxisDriver_swigregister(TPrsStd_AxisDriver)

def TPrsStd_AxisDriver_get_type_name(*args):
    """
    TPrsStd_AxisDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TPrsStd.TPrsStd_AxisDriver_get_type_name(*args)

def TPrsStd_AxisDriver_get_type_descriptor(*args):
    """
    TPrsStd_AxisDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TPrsStd.TPrsStd_AxisDriver_get_type_descriptor(*args)

class TPrsStd_AISViewer(TDF.TDF_Attribute):
    """
    The groundwork to define an interactive viewer attribute.
    This attribute stores an interactive context at the root label.
    You can only have one instance of this class per data framework.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TPrsStd_AISViewer
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TPrsStd_AISViewer(self) 
            return h


    def GetID(*args):
        """
        GetID() -> Standard_GUID

        class methods
        =============

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _TPrsStd.TPrsStd_AISViewer_GetID(*args)

    GetID = staticmethod(GetID)

    def Has(*args):
        """
        Has(TDF_Label acces) -> Standard_Boolean

        returns True if   there is an AISViewer attribute  in
        <acces> Data Framework.

        :type acces: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.TPrsStd_AISViewer_Has(*args)

    Has = staticmethod(Has)

    def New(*args):
        """
        New(TDF_Label access, Handle_AIS_InteractiveContext selector) -> Handle_TPrsStd_AISViewer
        New(TDF_Label acces, Handle_V3d_Viewer viewer) -> Handle_TPrsStd_AISViewer

        create  and set an   AISAttribute at root  label. The
        interactive context is  build.  Raise an exception  if
        Has.

        :type acces: OCC.wrapper.TDF.TDF_Label
        :type viewer: OCC.wrapper.V3d.Handle_V3d_Viewer
        :rtype: OCC.wrapper.TPrsStd.Handle_TPrsStd_AISViewer

        """
        return _TPrsStd.TPrsStd_AISViewer_New(*args)

    New = staticmethod(New)

    def Find(*args):
        """
        Find(TDF_Label acces, Handle_TPrsStd_AISViewer A) -> Standard_Boolean
        Find(TDF_Label acces, Handle_AIS_InteractiveContext IC) -> Standard_Boolean
        Find(TDF_Label acces, Handle_V3d_Viewer V) -> Standard_Boolean

        :type acces: OCC.wrapper.TDF.TDF_Label
        :type V: OCC.wrapper.V3d.Handle_V3d_Viewer
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.TPrsStd_AISViewer_Find(*args)

    Find = staticmethod(Find)

    def __init__(self, *args):
        """
        __init__(TPrsStd_AISViewer self) -> TPrsStd_AISViewer

        The groundwork to define an interactive viewer attribute.
        This attribute stores an interactive context at the root label.
        You can only have one instance of this class per data framework.
        """
        this = _TPrsStd.new_TPrsStd_AISViewer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Update(self, *args):
        """
        Update(TPrsStd_AISViewer self, TDF_Label acces)
        Update(TPrsStd_AISViewer self)

        Updates the viewer at the label access.
        access is the root of the data framework.


        """
        return _TPrsStd.TPrsStd_AISViewer_Update(self, *args)


    def SetInteractiveContext(self, *args):
        """
        SetInteractiveContext(TPrsStd_AISViewer self, Handle_AIS_InteractiveContext ctx)

        Sets the interactive context ctx for this attribute.

        :type ctx: OCC.wrapper.AIS.Handle_AIS_InteractiveContext

        """
        return _TPrsStd.TPrsStd_AISViewer_SetInteractiveContext(self, *args)


    def GetInteractiveContext(self, *args):
        """
        GetInteractiveContext(TPrsStd_AISViewer self) -> Handle_AIS_InteractiveContext

        Returns the interactive context in this attribute.

        :rtype: OCC.wrapper.AIS.Handle_AIS_InteractiveContext

        """
        return _TPrsStd.TPrsStd_AISViewer_GetInteractiveContext(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TPrsStd.TPrsStd_AISViewer_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(TPrsStd_AISViewer self, Handle_TDF_Attribute arg2)

        :type with: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TPrsStd.TPrsStd_AISViewer_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(TPrsStd_AISViewer self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TPrsStd.TPrsStd_AISViewer_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(TPrsStd_AISViewer self, Handle_TDF_Attribute into, Handle_TDF_RelocationTable RT)

        :type into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _TPrsStd.TPrsStd_AISViewer_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TPrsStd.TPrsStd_AISViewer_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TPrsStd.TPrsStd_AISViewer_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TPrsStd.TPrsStd_AISViewer_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TPrsStd.delete_TPrsStd_AISViewer
TPrsStd_AISViewer_swigregister = _TPrsStd.TPrsStd_AISViewer_swigregister
TPrsStd_AISViewer_swigregister(TPrsStd_AISViewer)

def TPrsStd_AISViewer_GetID(*args):
    """
    TPrsStd_AISViewer_GetID() -> Standard_GUID

    class methods
    =============

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _TPrsStd.TPrsStd_AISViewer_GetID(*args)

def TPrsStd_AISViewer_Has(*args):
    """
    TPrsStd_AISViewer_Has(TDF_Label acces) -> Standard_Boolean

    returns True if   there is an AISViewer attribute  in
    <acces> Data Framework.

    :type acces: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _TPrsStd.TPrsStd_AISViewer_Has(*args)

def TPrsStd_AISViewer_New(*args):
    """
    New(TDF_Label access, Handle_AIS_InteractiveContext selector) -> Handle_TPrsStd_AISViewer
    TPrsStd_AISViewer_New(TDF_Label acces, Handle_V3d_Viewer viewer) -> Handle_TPrsStd_AISViewer

    create  and set an   AISAttribute at root  label. The
    interactive context is  build.  Raise an exception  if
    Has.

    :type acces: OCC.wrapper.TDF.TDF_Label
    :type viewer: OCC.wrapper.V3d.Handle_V3d_Viewer
    :rtype: OCC.wrapper.TPrsStd.Handle_TPrsStd_AISViewer

    """
    return _TPrsStd.TPrsStd_AISViewer_New(*args)

def TPrsStd_AISViewer_Find(*args):
    """
    Find(TDF_Label acces, Handle_TPrsStd_AISViewer A) -> Standard_Boolean
    Find(TDF_Label acces, Handle_AIS_InteractiveContext IC) -> Standard_Boolean
    TPrsStd_AISViewer_Find(TDF_Label acces, Handle_V3d_Viewer V) -> Standard_Boolean

    :type acces: OCC.wrapper.TDF.TDF_Label
    :type V: OCC.wrapper.V3d.Handle_V3d_Viewer
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _TPrsStd.TPrsStd_AISViewer_Find(*args)

def TPrsStd_AISViewer_get_type_name(*args):
    """
    TPrsStd_AISViewer_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TPrsStd.TPrsStd_AISViewer_get_type_name(*args)

def TPrsStd_AISViewer_get_type_descriptor(*args):
    """
    TPrsStd_AISViewer_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TPrsStd.TPrsStd_AISViewer_get_type_descriptor(*args)

class TPrsStd_PointDriver(TPrsStd_Driver):
    """An implementation of TPrsStd_Driver for points."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TPrsStd_PointDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TPrsStd_PointDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TPrsStd_PointDriver self) -> TPrsStd_PointDriver

        Constructs an empty point driver.


        """
        this = _TPrsStd.new_TPrsStd_PointDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Update(self, *args):
        """
        Update(TPrsStd_PointDriver self, TDF_Label aLabel, Handle_AIS_InteractiveObject anAISObject) -> Standard_Boolean

        Build the AISObject (if null) or update it.
        No compute is done.
        Returns <True> if informations was found
        and AISObject updated.

        :type aLabel: OCC.wrapper.TDF.TDF_Label
        :type anAISObject: OCC.wrapper.AIS.Handle_AIS_InteractiveObject
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.TPrsStd_PointDriver_Update(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TPrsStd.TPrsStd_PointDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TPrsStd.TPrsStd_PointDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TPrsStd.TPrsStd_PointDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TPrsStd.delete_TPrsStd_PointDriver
TPrsStd_PointDriver_swigregister = _TPrsStd.TPrsStd_PointDriver_swigregister
TPrsStd_PointDriver_swigregister(TPrsStd_PointDriver)

def TPrsStd_PointDriver_get_type_name(*args):
    """
    TPrsStd_PointDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TPrsStd.TPrsStd_PointDriver_get_type_name(*args)

def TPrsStd_PointDriver_get_type_descriptor(*args):
    """
    TPrsStd_PointDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TPrsStd.TPrsStd_PointDriver_get_type_descriptor(*args)

class TPrsStd_GeometryDriver(TPrsStd_Driver):
    """This method is an implementation of TPrsStd_Driver for geometries."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TPrsStd_GeometryDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TPrsStd_GeometryDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TPrsStd_GeometryDriver self) -> TPrsStd_GeometryDriver

        Constructs an empty geometry driver.


        """
        this = _TPrsStd.new_TPrsStd_GeometryDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Update(self, *args):
        """
        Update(TPrsStd_GeometryDriver self, TDF_Label aLabel, Handle_AIS_InteractiveObject anAISObject) -> Standard_Boolean

        Build the AISObject (if null) or update it.
        No compute is done.
        Returns <True> if informations was found
        and AISObject updated.

        :type aLabel: OCC.wrapper.TDF.TDF_Label
        :type anAISObject: OCC.wrapper.AIS.Handle_AIS_InteractiveObject
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.TPrsStd_GeometryDriver_Update(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TPrsStd.TPrsStd_GeometryDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TPrsStd.TPrsStd_GeometryDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TPrsStd.TPrsStd_GeometryDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TPrsStd.delete_TPrsStd_GeometryDriver
TPrsStd_GeometryDriver_swigregister = _TPrsStd.TPrsStd_GeometryDriver_swigregister
TPrsStd_GeometryDriver_swigregister(TPrsStd_GeometryDriver)

def TPrsStd_GeometryDriver_get_type_name(*args):
    """
    TPrsStd_GeometryDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TPrsStd.TPrsStd_GeometryDriver_get_type_name(*args)

def TPrsStd_GeometryDriver_get_type_descriptor(*args):
    """
    TPrsStd_GeometryDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TPrsStd.TPrsStd_GeometryDriver_get_type_descriptor(*args)

class TPrsStd_NamedShapeDriver(TPrsStd_Driver):
    """An implementation of TPrsStd_Driver for named shapes."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TPrsStd_NamedShapeDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TPrsStd_NamedShapeDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TPrsStd_NamedShapeDriver self) -> TPrsStd_NamedShapeDriver

        Constructs an empty named shape driver.


        """
        this = _TPrsStd.new_TPrsStd_NamedShapeDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Update(self, *args):
        """
        Update(TPrsStd_NamedShapeDriver self, TDF_Label aLabel, Handle_AIS_InteractiveObject anAISObject) -> Standard_Boolean

        Build the AISObject (if null) or update it.
        No compute is done.
        Returns <True> if informations was found
        and AISObject updated.

        :type aLabel: OCC.wrapper.TDF.TDF_Label
        :type anAISObject: OCC.wrapper.AIS.Handle_AIS_InteractiveObject
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.TPrsStd_NamedShapeDriver_Update(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TPrsStd.TPrsStd_NamedShapeDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TPrsStd.TPrsStd_NamedShapeDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TPrsStd.TPrsStd_NamedShapeDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TPrsStd.delete_TPrsStd_NamedShapeDriver
TPrsStd_NamedShapeDriver_swigregister = _TPrsStd.TPrsStd_NamedShapeDriver_swigregister
TPrsStd_NamedShapeDriver_swigregister(TPrsStd_NamedShapeDriver)

def TPrsStd_NamedShapeDriver_get_type_name(*args):
    """
    TPrsStd_NamedShapeDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TPrsStd.TPrsStd_NamedShapeDriver_get_type_name(*args)

def TPrsStd_NamedShapeDriver_get_type_descriptor(*args):
    """
    TPrsStd_NamedShapeDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TPrsStd.TPrsStd_NamedShapeDriver_get_type_descriptor(*args)

class TPrsStd_ConstraintTools(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def UpdateOnlyValue(*args):
        """
        UpdateOnlyValue(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

        :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
        :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

        """
        return _TPrsStd.TPrsStd_ConstraintTools_UpdateOnlyValue(*args)

    UpdateOnlyValue = staticmethod(UpdateOnlyValue)

    def ComputeDistance(*args):
        """
        ComputeDistance(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

        :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
        :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeDistance(*args)

    ComputeDistance = staticmethod(ComputeDistance)

    def ComputeParallel(*args):
        """
        ComputeParallel(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

        :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
        :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeParallel(*args)

    ComputeParallel = staticmethod(ComputeParallel)

    def ComputeTangent(*args):
        """
        ComputeTangent(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

        :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
        :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeTangent(*args)

    ComputeTangent = staticmethod(ComputeTangent)

    def ComputePerpendicular(*args):
        """
        ComputePerpendicular(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

        :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
        :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputePerpendicular(*args)

    ComputePerpendicular = staticmethod(ComputePerpendicular)

    def ComputeConcentric(*args):
        """
        ComputeConcentric(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

        :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
        :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeConcentric(*args)

    ComputeConcentric = staticmethod(ComputeConcentric)

    def ComputeSymmetry(*args):
        """
        ComputeSymmetry(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

        :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
        :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeSymmetry(*args)

    ComputeSymmetry = staticmethod(ComputeSymmetry)

    def ComputeMidPoint(*args):
        """
        ComputeMidPoint(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

        :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
        :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeMidPoint(*args)

    ComputeMidPoint = staticmethod(ComputeMidPoint)

    def ComputeAngle(*args):
        """
        ComputeAngle(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

        :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
        :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeAngle(*args)

    ComputeAngle = staticmethod(ComputeAngle)

    def ComputeRadius(*args):
        """
        ComputeRadius(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

        :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
        :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeRadius(*args)

    ComputeRadius = staticmethod(ComputeRadius)

    def ComputeMinRadius(*args):
        """
        ComputeMinRadius(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

        :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
        :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeMinRadius(*args)

    ComputeMinRadius = staticmethod(ComputeMinRadius)

    def ComputeMaxRadius(*args):
        """
        ComputeMaxRadius(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

        :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
        :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeMaxRadius(*args)

    ComputeMaxRadius = staticmethod(ComputeMaxRadius)

    def ComputeEqualDistance(*args):
        """
        ComputeEqualDistance(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

        :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
        :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeEqualDistance(*args)

    ComputeEqualDistance = staticmethod(ComputeEqualDistance)

    def ComputeEqualRadius(*args):
        """
        ComputeEqualRadius(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

        :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
        :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeEqualRadius(*args)

    ComputeEqualRadius = staticmethod(ComputeEqualRadius)

    def ComputeFix(*args):
        """
        ComputeFix(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

        :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
        :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeFix(*args)

    ComputeFix = staticmethod(ComputeFix)

    def ComputeDiameter(*args):
        """
        ComputeDiameter(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

        :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
        :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeDiameter(*args)

    ComputeDiameter = staticmethod(ComputeDiameter)

    def ComputeOffset(*args):
        """
        ComputeOffset(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

        :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
        :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeOffset(*args)

    ComputeOffset = staticmethod(ComputeOffset)

    def ComputePlacement(*args):
        """
        ComputePlacement(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

        :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
        :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputePlacement(*args)

    ComputePlacement = staticmethod(ComputePlacement)

    def ComputeCoincident(*args):
        """
        ComputeCoincident(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

        :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
        :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeCoincident(*args)

    ComputeCoincident = staticmethod(ComputeCoincident)

    def ComputeRound(*args):
        """
        ComputeRound(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

        :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
        :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeRound(*args)

    ComputeRound = staticmethod(ComputeRound)

    def ComputeOthers(*args):
        """
        ComputeOthers(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

        :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
        :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeOthers(*args)

    ComputeOthers = staticmethod(ComputeOthers)

    def ComputeTextAndValue(*args):
        """
        ComputeTextAndValue(Handle_TDataXtd_Constraint aConst, TCollection_ExtendedString aText, Standard_Boolean const anIsAngle)

        :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
        :type aValue: float
        :type aText: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type anIsAngle: bool

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeTextAndValue(*args)

    ComputeTextAndValue = staticmethod(ComputeTextAndValue)

    def ComputeAngleForOneFace(*args):
        """
        ComputeAngleForOneFace(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

        :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
        :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

        """
        return _TPrsStd.TPrsStd_ConstraintTools_ComputeAngleForOneFace(*args)

    ComputeAngleForOneFace = staticmethod(ComputeAngleForOneFace)

    def __init__(self):
        this = _TPrsStd.new_TPrsStd_ConstraintTools()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TPrsStd.delete_TPrsStd_ConstraintTools
TPrsStd_ConstraintTools_swigregister = _TPrsStd.TPrsStd_ConstraintTools_swigregister
TPrsStd_ConstraintTools_swigregister(TPrsStd_ConstraintTools)

def TPrsStd_ConstraintTools_UpdateOnlyValue(*args):
    """
    TPrsStd_ConstraintTools_UpdateOnlyValue(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

    :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
    :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

    """
    return _TPrsStd.TPrsStd_ConstraintTools_UpdateOnlyValue(*args)

def TPrsStd_ConstraintTools_ComputeDistance(*args):
    """
    TPrsStd_ConstraintTools_ComputeDistance(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

    :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
    :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeDistance(*args)

def TPrsStd_ConstraintTools_ComputeParallel(*args):
    """
    TPrsStd_ConstraintTools_ComputeParallel(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

    :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
    :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeParallel(*args)

def TPrsStd_ConstraintTools_ComputeTangent(*args):
    """
    TPrsStd_ConstraintTools_ComputeTangent(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

    :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
    :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeTangent(*args)

def TPrsStd_ConstraintTools_ComputePerpendicular(*args):
    """
    TPrsStd_ConstraintTools_ComputePerpendicular(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

    :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
    :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputePerpendicular(*args)

def TPrsStd_ConstraintTools_ComputeConcentric(*args):
    """
    TPrsStd_ConstraintTools_ComputeConcentric(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

    :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
    :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeConcentric(*args)

def TPrsStd_ConstraintTools_ComputeSymmetry(*args):
    """
    TPrsStd_ConstraintTools_ComputeSymmetry(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

    :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
    :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeSymmetry(*args)

def TPrsStd_ConstraintTools_ComputeMidPoint(*args):
    """
    TPrsStd_ConstraintTools_ComputeMidPoint(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

    :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
    :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeMidPoint(*args)

def TPrsStd_ConstraintTools_ComputeAngle(*args):
    """
    TPrsStd_ConstraintTools_ComputeAngle(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

    :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
    :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeAngle(*args)

def TPrsStd_ConstraintTools_ComputeRadius(*args):
    """
    TPrsStd_ConstraintTools_ComputeRadius(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

    :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
    :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeRadius(*args)

def TPrsStd_ConstraintTools_ComputeMinRadius(*args):
    """
    TPrsStd_ConstraintTools_ComputeMinRadius(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

    :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
    :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeMinRadius(*args)

def TPrsStd_ConstraintTools_ComputeMaxRadius(*args):
    """
    TPrsStd_ConstraintTools_ComputeMaxRadius(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

    :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
    :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeMaxRadius(*args)

def TPrsStd_ConstraintTools_ComputeEqualDistance(*args):
    """
    TPrsStd_ConstraintTools_ComputeEqualDistance(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

    :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
    :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeEqualDistance(*args)

def TPrsStd_ConstraintTools_ComputeEqualRadius(*args):
    """
    TPrsStd_ConstraintTools_ComputeEqualRadius(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

    :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
    :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeEqualRadius(*args)

def TPrsStd_ConstraintTools_ComputeFix(*args):
    """
    TPrsStd_ConstraintTools_ComputeFix(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

    :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
    :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeFix(*args)

def TPrsStd_ConstraintTools_ComputeDiameter(*args):
    """
    TPrsStd_ConstraintTools_ComputeDiameter(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

    :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
    :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeDiameter(*args)

def TPrsStd_ConstraintTools_ComputeOffset(*args):
    """
    TPrsStd_ConstraintTools_ComputeOffset(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

    :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
    :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeOffset(*args)

def TPrsStd_ConstraintTools_ComputePlacement(*args):
    """
    TPrsStd_ConstraintTools_ComputePlacement(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

    :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
    :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputePlacement(*args)

def TPrsStd_ConstraintTools_ComputeCoincident(*args):
    """
    TPrsStd_ConstraintTools_ComputeCoincident(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

    :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
    :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeCoincident(*args)

def TPrsStd_ConstraintTools_ComputeRound(*args):
    """
    TPrsStd_ConstraintTools_ComputeRound(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

    :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
    :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeRound(*args)

def TPrsStd_ConstraintTools_ComputeOthers(*args):
    """
    TPrsStd_ConstraintTools_ComputeOthers(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

    :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
    :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeOthers(*args)

def TPrsStd_ConstraintTools_ComputeTextAndValue(*args):
    """
    TPrsStd_ConstraintTools_ComputeTextAndValue(Handle_TDataXtd_Constraint aConst, TCollection_ExtendedString aText, Standard_Boolean const anIsAngle)

    :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
    :type aValue: float
    :type aText: OCC.wrapper.TCollection.TCollection_ExtendedString
    :type anIsAngle: bool

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeTextAndValue(*args)

def TPrsStd_ConstraintTools_ComputeAngleForOneFace(*args):
    """
    TPrsStd_ConstraintTools_ComputeAngleForOneFace(Handle_TDataXtd_Constraint aConst, Handle_AIS_InteractiveObject anAIS)

    :type aConst: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
    :type anAIS: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

    """
    return _TPrsStd.TPrsStd_ConstraintTools_ComputeAngleForOneFace(*args)

class NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID(NCollection.NCollection_BaseMap):
    """
    Purpose:     The DataMap is a Map to store keys with associated
    Items. See Map  from NCollection for  a discussion
    about the number of buckets.

    The DataMap can be seen as an extended array where
    the Keys  are the   indices.  For this reason  the
    operator () is defined on DataMap to fetch an Item
    from a Key. So the following syntax can be used :

    anItem = aMap(aKey);
    aMap(aKey) = anItem;

    This analogy has its  limit.   aMap(aKey) = anItem
    can  be done only  if aKey was previously bound to
    an item in the map.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID self) -> NCollection_DataMap< Standard_GUID,opencascade::handle< TPrsStd_Driver >,Standard_GUID >::iterator

        Returns an iterator pointing to the first element in the map.

        :rtype: iterator

        """
        return _TPrsStd.NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID self) -> NCollection_DataMap< Standard_GUID,opencascade::handle< TPrsStd_Driver >,Standard_GUID >::iterator

        Returns an iterator referring to the past-the-end element in the map.

        :rtype: iterator

        """
        return _TPrsStd.NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID self) -> NCollection_DataMap< Standard_GUID,opencascade::handle< TPrsStd_Driver >,Standard_GUID >::const_iterator

        Returns a const iterator pointing to the first element in the map.

        :rtype: const_iterator

        """
        return _TPrsStd.NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID self) -> NCollection_DataMap< Standard_GUID,opencascade::handle< TPrsStd_Driver >,Standard_GUID >::const_iterator

        Returns a const iterator referring to the past-the-end element in the map.

        :rtype: const_iterator

        """
        return _TPrsStd.NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The DataMap is a Map to store keys with associated
        Items. See Map  from NCollection for  a discussion
        about the number of buckets.

        The DataMap can be seen as an extended array where
        the Keys  are the   indices.  For this reason  the
        operator () is defined on DataMap to fetch an Item
        from a Key. So the following syntax can be used :

        anItem = aMap(aKey);
        aMap(aKey) = anItem;

        This analogy has its  limit.   aMap(aKey) = anItem
        can  be done only  if aKey was previously bound to
        an item in the map.
        """
        this = _TPrsStd.new_NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, *args):
        """
        Exchange(NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID self, NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID theOther)

        Exchange the content of two maps without re-allocations.
        Notice that allocators will be swapped as well!

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _TPrsStd.NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID_Exchange(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID self, NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID theOther) -> NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID

        Assignment.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _TPrsStd.NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID self, NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID theOther) -> NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _TPrsStd.NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID_assign(self, *args)


    def ReSize(self, *args):
        """
        ReSize(NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID self, Standard_Integer const N)

        ReSize

        :type N: int

        """
        return _TPrsStd.NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID_ReSize(self, *args)


    def Bind(self, *args):
        """
        Bind(NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID self, Standard_GUID theKey, Handle_TPrsStd_Driver theItem) -> Standard_Boolean

        Bind binds Item to Key in map.
        @param theKey  key to add/update
        @param theItem new item; overrides value previously bound to the key, if any
        @return Standard_True if Key was not bound already

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID_Bind(self, *args)


    def Bound(self, *args):
        """
        Bound(NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID self, Standard_GUID theKey, Handle_TPrsStd_Driver theItem) -> Handle_TPrsStd_Driver

        Bound binds Item to Key in map. Returns modifiable Item 

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: TheItemType *

        """
        return _TPrsStd.NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID_Bound(self, *args)


    def IsBound(self, *args):
        """
        IsBound(NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID self, Standard_GUID theKey) -> Standard_Boolean

        IsBound

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID_IsBound(self, *args)


    def UnBind(self, *args):
        """
        UnBind(NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID self, Standard_GUID theKey) -> Standard_Boolean

        UnBind removes Item Key pair from map

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID_UnBind(self, *args)


    def Seek(self, *args):
        """
        Seek(NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID self, Standard_GUID theKey) -> Handle_TPrsStd_Driver

        Seek returns pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: const TheItemType *

        """
        return _TPrsStd.NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID_Seek(self, *args)


    def Find(self, *args):
        """
        Find returns the Item for Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _TPrsStd.NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID_Find(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeSeek(self, *args):
        """
        ChangeSeek(NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID self, Standard_GUID theKey) -> Handle_TPrsStd_Driver

        ChangeSeek returns modifiable pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: TheItemType *

        """
        return _TPrsStd.NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID_ChangeSeek(self, *args)


    def ChangeFind(self, *args):
        """
        ChangeFind(NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID self, Standard_GUID theKey) -> Handle_TPrsStd_Driver

        ChangeFind returns mofifiable Item by Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: TheItemType &

        """
        return _TPrsStd.NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID_ChangeFind(self, *args)


    def __call__(self, *args):
        """
        operator ()

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _TPrsStd.NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Clear(self, *args):
        """
        Clear(NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID self, Standard_Boolean const doReleaseMemory)
        Clear(NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID self, Handle_NCollection_BaseAllocator theAllocator)

        Clear data and reset allocator

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _TPrsStd.NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID_Clear(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID self) -> Standard_Integer

        Size

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TPrsStd.NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID_Size(self, *args)


    def __iter__(self):
        return _TPrsStd.NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID___iter__(self)
    __swig_destroy__ = _TPrsStd.delete_NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID
NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID_swigregister = _TPrsStd.NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID_swigregister
NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID_swigregister(NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID)

class NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _TPrsStd.new_NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TPrsStd.delete_NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID_IteratorHelper

    def __next__(self):
        return _TPrsStd.NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID_IteratorHelper___next__(self)
NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID_IteratorHelper_swigregister = _TPrsStd.NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID_IteratorHelper_swigregister
NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID_IteratorHelper_swigregister(NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID_IteratorHelper)


try:
	TPrsStd_DataMapOfGUIDDriver = NCollection_DataMap_Standard_GUID_Handle_TPrsStd_Driver_Standard_GUID
except NameError:
	pass # does not exist, probably ignored

class Handle_TPrsStd_DriverTable(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TPrsStd_DriverTable self)

        Nullify the handle


        """
        return _TPrsStd.Handle_TPrsStd_DriverTable_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TPrsStd_DriverTable self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TPrsStd.Handle_TPrsStd_DriverTable_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TPrsStd_DriverTable self, TPrsStd_DriverTable thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TPrsStd.Handle_TPrsStd_DriverTable_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TPrsStd_DriverTable self, Handle_TPrsStd_DriverTable theHandle) -> Handle_TPrsStd_DriverTable
        assign(Handle_TPrsStd_DriverTable self, TPrsStd_DriverTable thePtr) -> Handle_TPrsStd_DriverTable
        assign(Handle_TPrsStd_DriverTable self, Handle_TPrsStd_DriverTable theHandle) -> Handle_TPrsStd_DriverTable

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TPrsStd.Handle_TPrsStd_DriverTable_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TPrsStd_DriverTable self) -> TPrsStd_DriverTable

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TPrsStd.Handle_TPrsStd_DriverTable_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TPrsStd_DriverTable self) -> TPrsStd_DriverTable

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TPrsStd.Handle_TPrsStd_DriverTable___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TPrsStd_DriverTable self) -> TPrsStd_DriverTable

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TPrsStd.Handle_TPrsStd_DriverTable___ref__(self, *args)


    def __hash__(self):
        return _TPrsStd.Handle_TPrsStd_DriverTable___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TPrsStd.Handle_TPrsStd_DriverTable___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TPrsStd.new_Handle_TPrsStd_DriverTable(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TPrsStd.Handle_TPrsStd_DriverTable_DownCast)
    __swig_destroy__ = _TPrsStd.delete_Handle_TPrsStd_DriverTable

    def Get(self, *args):
        """
        Get(Handle_TPrsStd_DriverTable self) -> Handle_TPrsStd_DriverTable

        Returns the static table.
        If it does not exist, creates it and fills it with standard drivers.

        :rtype: OCC.wrapper.TPrsStd.Handle_TPrsStd_DriverTable

        """
        return _TPrsStd.Handle_TPrsStd_DriverTable_Get(self, *args)


    def InitStandardDrivers(self, *args):
        """
        InitStandardDrivers(Handle_TPrsStd_DriverTable self)

        Fills the table with standard drivers


        """
        return _TPrsStd.Handle_TPrsStd_DriverTable_InitStandardDrivers(self, *args)


    def AddDriver(self, *args):
        """
        AddDriver(Handle_TPrsStd_DriverTable self, Standard_GUID guid, Handle_TPrsStd_Driver driver) -> Standard_Boolean

        Returns true if the driver has been added successfully to the driver table.

        :type guid: OCC.wrapper.Standard.Standard_GUID
        :type driver: OCC.wrapper.TPrsStd.Handle_TPrsStd_Driver
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_DriverTable_AddDriver(self, *args)


    def FindDriver(self, *args):
        """
        FindDriver(Handle_TPrsStd_DriverTable self, Standard_GUID guid, Handle_TPrsStd_Driver driver) -> Standard_Boolean

        Returns true if the driver was found.

        :type guid: OCC.wrapper.Standard.Standard_GUID
        :type driver: OCC.wrapper.TPrsStd.Handle_TPrsStd_Driver
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_DriverTable_FindDriver(self, *args)


    def RemoveDriver(self, *args):
        """
        RemoveDriver(Handle_TPrsStd_DriverTable self, Standard_GUID guid) -> Standard_Boolean

        Removes a driver with the given GUID.
        Returns true if the driver has been removed successfully.

        :type guid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_DriverTable_RemoveDriver(self, *args)


    def Clear(self, *args):
        """
        Clear(Handle_TPrsStd_DriverTable self)

        Removes all drivers. Returns
        true if the driver has been removed successfully.
        If this method is used, the InitStandardDrivers method should be
        called to fill the table with standard drivers.


        """
        return _TPrsStd.Handle_TPrsStd_DriverTable_Clear(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TPrsStd_DriverTable self) -> char const *

        :rtype: const char *

        """
        return _TPrsStd.Handle_TPrsStd_DriverTable_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TPrsStd.Handle_TPrsStd_DriverTable_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TPrsStd.Handle_TPrsStd_DriverTable_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TPrsStd_DriverTable self)

        Memory deallocator for transient classes


        """
        return _TPrsStd.Handle_TPrsStd_DriverTable_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TPrsStd_DriverTable self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TPrsStd_DriverTable self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_DriverTable_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TPrsStd_DriverTable self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TPrsStd_DriverTable self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_DriverTable_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TPrsStd_DriverTable self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TPrsStd.Handle_TPrsStd_DriverTable_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TPrsStd_DriverTable self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TPrsStd.Handle_TPrsStd_DriverTable_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TPrsStd_DriverTable self)

        Increments the reference counter of this object


        """
        return _TPrsStd.Handle_TPrsStd_DriverTable_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TPrsStd_DriverTable self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TPrsStd.Handle_TPrsStd_DriverTable_DecrementRefCounter(self, *args)

Handle_TPrsStd_DriverTable_swigregister = _TPrsStd.Handle_TPrsStd_DriverTable_swigregister
Handle_TPrsStd_DriverTable_swigregister(Handle_TPrsStd_DriverTable)

def Handle_TPrsStd_DriverTable_DownCast(thing):
    return _TPrsStd.Handle_TPrsStd_DriverTable_DownCast(thing)
Handle_TPrsStd_DriverTable_DownCast = _TPrsStd.Handle_TPrsStd_DriverTable_DownCast

class Handle_TPrsStd_NamedShapeDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TPrsStd_NamedShapeDriver self)

        Nullify the handle


        """
        return _TPrsStd.Handle_TPrsStd_NamedShapeDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TPrsStd_NamedShapeDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TPrsStd.Handle_TPrsStd_NamedShapeDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TPrsStd_NamedShapeDriver self, TPrsStd_NamedShapeDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TPrsStd.Handle_TPrsStd_NamedShapeDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TPrsStd_NamedShapeDriver self, Handle_TPrsStd_NamedShapeDriver theHandle) -> Handle_TPrsStd_NamedShapeDriver
        assign(Handle_TPrsStd_NamedShapeDriver self, TPrsStd_NamedShapeDriver thePtr) -> Handle_TPrsStd_NamedShapeDriver
        assign(Handle_TPrsStd_NamedShapeDriver self, Handle_TPrsStd_NamedShapeDriver theHandle) -> Handle_TPrsStd_NamedShapeDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TPrsStd.Handle_TPrsStd_NamedShapeDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TPrsStd_NamedShapeDriver self) -> TPrsStd_NamedShapeDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TPrsStd.Handle_TPrsStd_NamedShapeDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TPrsStd_NamedShapeDriver self) -> TPrsStd_NamedShapeDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TPrsStd.Handle_TPrsStd_NamedShapeDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TPrsStd_NamedShapeDriver self) -> TPrsStd_NamedShapeDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TPrsStd.Handle_TPrsStd_NamedShapeDriver___ref__(self, *args)


    def __hash__(self):
        return _TPrsStd.Handle_TPrsStd_NamedShapeDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TPrsStd.Handle_TPrsStd_NamedShapeDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TPrsStd.new_Handle_TPrsStd_NamedShapeDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TPrsStd.Handle_TPrsStd_NamedShapeDriver_DownCast)
    __swig_destroy__ = _TPrsStd.delete_Handle_TPrsStd_NamedShapeDriver

    def Update(self, *args):
        """
        Update(Handle_TPrsStd_NamedShapeDriver self, TDF_Label aLabel, Handle_AIS_InteractiveObject anAISObject) -> Standard_Boolean

        Build the AISObject (if null) or update it.
        No compute is done.
        Returns <True> if informations was found
        and AISObject updated.

        :type aLabel: OCC.wrapper.TDF.TDF_Label
        :type anAISObject: OCC.wrapper.AIS.Handle_AIS_InteractiveObject
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_NamedShapeDriver_Update(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TPrsStd_NamedShapeDriver self) -> char const *

        :rtype: const char *

        """
        return _TPrsStd.Handle_TPrsStd_NamedShapeDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TPrsStd.Handle_TPrsStd_NamedShapeDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TPrsStd.Handle_TPrsStd_NamedShapeDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TPrsStd_NamedShapeDriver self)

        Memory deallocator for transient classes


        """
        return _TPrsStd.Handle_TPrsStd_NamedShapeDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TPrsStd_NamedShapeDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TPrsStd_NamedShapeDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_NamedShapeDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TPrsStd_NamedShapeDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TPrsStd_NamedShapeDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_NamedShapeDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TPrsStd_NamedShapeDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TPrsStd.Handle_TPrsStd_NamedShapeDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TPrsStd_NamedShapeDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TPrsStd.Handle_TPrsStd_NamedShapeDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TPrsStd_NamedShapeDriver self)

        Increments the reference counter of this object


        """
        return _TPrsStd.Handle_TPrsStd_NamedShapeDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TPrsStd_NamedShapeDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TPrsStd.Handle_TPrsStd_NamedShapeDriver_DecrementRefCounter(self, *args)

Handle_TPrsStd_NamedShapeDriver_swigregister = _TPrsStd.Handle_TPrsStd_NamedShapeDriver_swigregister
Handle_TPrsStd_NamedShapeDriver_swigregister(Handle_TPrsStd_NamedShapeDriver)

def Handle_TPrsStd_NamedShapeDriver_DownCast(thing):
    return _TPrsStd.Handle_TPrsStd_NamedShapeDriver_DownCast(thing)
Handle_TPrsStd_NamedShapeDriver_DownCast = _TPrsStd.Handle_TPrsStd_NamedShapeDriver_DownCast

class TPrsStd_PlaneDriver(TPrsStd_Driver):
    """An implementation of TPrsStd_Driver for planes."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TPrsStd_PlaneDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TPrsStd_PlaneDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TPrsStd_PlaneDriver self) -> TPrsStd_PlaneDriver

        Constructs an empty plane driver.


        """
        this = _TPrsStd.new_TPrsStd_PlaneDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Update(self, *args):
        """
        Update(TPrsStd_PlaneDriver self, TDF_Label aLabel, Handle_AIS_InteractiveObject anAISObject) -> Standard_Boolean

        Build the AISObject (if null) or update it.
        No compute is done.
        Returns <True> if informations was found
        and AISObject updated.

        :type aLabel: OCC.wrapper.TDF.TDF_Label
        :type anAISObject: OCC.wrapper.AIS.Handle_AIS_InteractiveObject
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.TPrsStd_PlaneDriver_Update(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TPrsStd.TPrsStd_PlaneDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TPrsStd.TPrsStd_PlaneDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TPrsStd.TPrsStd_PlaneDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TPrsStd.delete_TPrsStd_PlaneDriver
TPrsStd_PlaneDriver_swigregister = _TPrsStd.TPrsStd_PlaneDriver_swigregister
TPrsStd_PlaneDriver_swigregister(TPrsStd_PlaneDriver)

def TPrsStd_PlaneDriver_get_type_name(*args):
    """
    TPrsStd_PlaneDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TPrsStd.TPrsStd_PlaneDriver_get_type_name(*args)

def TPrsStd_PlaneDriver_get_type_descriptor(*args):
    """
    TPrsStd_PlaneDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TPrsStd.TPrsStd_PlaneDriver_get_type_descriptor(*args)

class TPrsStd_ConstraintDriver(TPrsStd_Driver):
    """An implementation of TPrsStd_Driver for constraints."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TPrsStd_ConstraintDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TPrsStd_ConstraintDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TPrsStd_ConstraintDriver self) -> TPrsStd_ConstraintDriver

        Constructs an empty constraint driver.


        """
        this = _TPrsStd.new_TPrsStd_ConstraintDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Update(self, *args):
        """
        Update(TPrsStd_ConstraintDriver self, TDF_Label aLabel, Handle_AIS_InteractiveObject anAISObject) -> Standard_Boolean

        Build the AISObject (if null) or update it.
        No compute is done.
        Returns <True> if informations was found
        and AISObject updated.

        :type aLabel: OCC.wrapper.TDF.TDF_Label
        :type anAISObject: OCC.wrapper.AIS.Handle_AIS_InteractiveObject
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.TPrsStd_ConstraintDriver_Update(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TPrsStd.TPrsStd_ConstraintDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TPrsStd.TPrsStd_ConstraintDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TPrsStd.TPrsStd_ConstraintDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TPrsStd.delete_TPrsStd_ConstraintDriver
TPrsStd_ConstraintDriver_swigregister = _TPrsStd.TPrsStd_ConstraintDriver_swigregister
TPrsStd_ConstraintDriver_swigregister(TPrsStd_ConstraintDriver)

def TPrsStd_ConstraintDriver_get_type_name(*args):
    """
    TPrsStd_ConstraintDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TPrsStd.TPrsStd_ConstraintDriver_get_type_name(*args)

def TPrsStd_ConstraintDriver_get_type_descriptor(*args):
    """
    TPrsStd_ConstraintDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TPrsStd.TPrsStd_ConstraintDriver_get_type_descriptor(*args)

class Handle_TPrsStd_AxisDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TPrsStd_AxisDriver self)

        Nullify the handle


        """
        return _TPrsStd.Handle_TPrsStd_AxisDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TPrsStd_AxisDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TPrsStd.Handle_TPrsStd_AxisDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TPrsStd_AxisDriver self, TPrsStd_AxisDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TPrsStd.Handle_TPrsStd_AxisDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TPrsStd_AxisDriver self, Handle_TPrsStd_AxisDriver theHandle) -> Handle_TPrsStd_AxisDriver
        assign(Handle_TPrsStd_AxisDriver self, TPrsStd_AxisDriver thePtr) -> Handle_TPrsStd_AxisDriver
        assign(Handle_TPrsStd_AxisDriver self, Handle_TPrsStd_AxisDriver theHandle) -> Handle_TPrsStd_AxisDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TPrsStd.Handle_TPrsStd_AxisDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TPrsStd_AxisDriver self) -> TPrsStd_AxisDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TPrsStd.Handle_TPrsStd_AxisDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TPrsStd_AxisDriver self) -> TPrsStd_AxisDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TPrsStd.Handle_TPrsStd_AxisDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TPrsStd_AxisDriver self) -> TPrsStd_AxisDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TPrsStd.Handle_TPrsStd_AxisDriver___ref__(self, *args)


    def __hash__(self):
        return _TPrsStd.Handle_TPrsStd_AxisDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TPrsStd.Handle_TPrsStd_AxisDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TPrsStd.new_Handle_TPrsStd_AxisDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TPrsStd.Handle_TPrsStd_AxisDriver_DownCast)
    __swig_destroy__ = _TPrsStd.delete_Handle_TPrsStd_AxisDriver

    def Update(self, *args):
        """
        Update(Handle_TPrsStd_AxisDriver self, TDF_Label aLabel, Handle_AIS_InteractiveObject anAISObject) -> Standard_Boolean

        Build the AISObject (if null) or update it.
        No compute is done.
        Returns <True> if informations was found
        and AISObject updated.

        :type aLabel: OCC.wrapper.TDF.TDF_Label
        :type anAISObject: OCC.wrapper.AIS.Handle_AIS_InteractiveObject
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_AxisDriver_Update(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TPrsStd_AxisDriver self) -> char const *

        :rtype: const char *

        """
        return _TPrsStd.Handle_TPrsStd_AxisDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TPrsStd.Handle_TPrsStd_AxisDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TPrsStd.Handle_TPrsStd_AxisDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TPrsStd_AxisDriver self)

        Memory deallocator for transient classes


        """
        return _TPrsStd.Handle_TPrsStd_AxisDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TPrsStd_AxisDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TPrsStd_AxisDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_AxisDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TPrsStd_AxisDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TPrsStd_AxisDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_AxisDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TPrsStd_AxisDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TPrsStd.Handle_TPrsStd_AxisDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TPrsStd_AxisDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TPrsStd.Handle_TPrsStd_AxisDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TPrsStd_AxisDriver self)

        Increments the reference counter of this object


        """
        return _TPrsStd.Handle_TPrsStd_AxisDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TPrsStd_AxisDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TPrsStd.Handle_TPrsStd_AxisDriver_DecrementRefCounter(self, *args)

Handle_TPrsStd_AxisDriver_swigregister = _TPrsStd.Handle_TPrsStd_AxisDriver_swigregister
Handle_TPrsStd_AxisDriver_swigregister(Handle_TPrsStd_AxisDriver)

def Handle_TPrsStd_AxisDriver_DownCast(thing):
    return _TPrsStd.Handle_TPrsStd_AxisDriver_DownCast(thing)
Handle_TPrsStd_AxisDriver_DownCast = _TPrsStd.Handle_TPrsStd_AxisDriver_DownCast

class Handle_TPrsStd_Driver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TPrsStd_Driver self)

        Nullify the handle


        """
        return _TPrsStd.Handle_TPrsStd_Driver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TPrsStd_Driver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TPrsStd.Handle_TPrsStd_Driver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TPrsStd_Driver self, TPrsStd_Driver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TPrsStd.Handle_TPrsStd_Driver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TPrsStd_Driver self, Handle_TPrsStd_Driver theHandle) -> Handle_TPrsStd_Driver
        assign(Handle_TPrsStd_Driver self, TPrsStd_Driver thePtr) -> Handle_TPrsStd_Driver
        assign(Handle_TPrsStd_Driver self, Handle_TPrsStd_Driver theHandle) -> Handle_TPrsStd_Driver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TPrsStd.Handle_TPrsStd_Driver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TPrsStd_Driver self) -> TPrsStd_Driver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TPrsStd.Handle_TPrsStd_Driver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TPrsStd_Driver self) -> TPrsStd_Driver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TPrsStd.Handle_TPrsStd_Driver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TPrsStd_Driver self) -> TPrsStd_Driver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TPrsStd.Handle_TPrsStd_Driver___ref__(self, *args)


    def __hash__(self):
        return _TPrsStd.Handle_TPrsStd_Driver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TPrsStd.Handle_TPrsStd_Driver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TPrsStd.new_Handle_TPrsStd_Driver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TPrsStd.Handle_TPrsStd_Driver_DownCast)
    __swig_destroy__ = _TPrsStd.delete_Handle_TPrsStd_Driver

    def Update(self, *args):
        """
        Update(Handle_TPrsStd_Driver self, TDF_Label L, Handle_AIS_InteractiveObject ais) -> Standard_Boolean

        Updates the interactive object ais with
        information found on the attributes associated with the label L.

        :type L: OCC.wrapper.TDF.TDF_Label
        :type ais: OCC.wrapper.AIS.Handle_AIS_InteractiveObject
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_Driver_Update(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TPrsStd_Driver self) -> char const *

        :rtype: const char *

        """
        return _TPrsStd.Handle_TPrsStd_Driver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TPrsStd.Handle_TPrsStd_Driver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TPrsStd.Handle_TPrsStd_Driver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TPrsStd_Driver self)

        Memory deallocator for transient classes


        """
        return _TPrsStd.Handle_TPrsStd_Driver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TPrsStd_Driver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TPrsStd_Driver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_Driver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TPrsStd_Driver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TPrsStd_Driver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_Driver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TPrsStd_Driver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TPrsStd.Handle_TPrsStd_Driver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TPrsStd_Driver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TPrsStd.Handle_TPrsStd_Driver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TPrsStd_Driver self)

        Increments the reference counter of this object


        """
        return _TPrsStd.Handle_TPrsStd_Driver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TPrsStd_Driver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TPrsStd.Handle_TPrsStd_Driver_DecrementRefCounter(self, *args)

Handle_TPrsStd_Driver_swigregister = _TPrsStd.Handle_TPrsStd_Driver_swigregister
Handle_TPrsStd_Driver_swigregister(Handle_TPrsStd_Driver)

def Handle_TPrsStd_Driver_DownCast(thing):
    return _TPrsStd.Handle_TPrsStd_Driver_DownCast(thing)
Handle_TPrsStd_Driver_DownCast = _TPrsStd.Handle_TPrsStd_Driver_DownCast

class Handle_TPrsStd_PlaneDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TPrsStd_PlaneDriver self)

        Nullify the handle


        """
        return _TPrsStd.Handle_TPrsStd_PlaneDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TPrsStd_PlaneDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TPrsStd.Handle_TPrsStd_PlaneDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TPrsStd_PlaneDriver self, TPrsStd_PlaneDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TPrsStd.Handle_TPrsStd_PlaneDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TPrsStd_PlaneDriver self, Handle_TPrsStd_PlaneDriver theHandle) -> Handle_TPrsStd_PlaneDriver
        assign(Handle_TPrsStd_PlaneDriver self, TPrsStd_PlaneDriver thePtr) -> Handle_TPrsStd_PlaneDriver
        assign(Handle_TPrsStd_PlaneDriver self, Handle_TPrsStd_PlaneDriver theHandle) -> Handle_TPrsStd_PlaneDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TPrsStd.Handle_TPrsStd_PlaneDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TPrsStd_PlaneDriver self) -> TPrsStd_PlaneDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TPrsStd.Handle_TPrsStd_PlaneDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TPrsStd_PlaneDriver self) -> TPrsStd_PlaneDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TPrsStd.Handle_TPrsStd_PlaneDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TPrsStd_PlaneDriver self) -> TPrsStd_PlaneDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TPrsStd.Handle_TPrsStd_PlaneDriver___ref__(self, *args)


    def __hash__(self):
        return _TPrsStd.Handle_TPrsStd_PlaneDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TPrsStd.Handle_TPrsStd_PlaneDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TPrsStd.new_Handle_TPrsStd_PlaneDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TPrsStd.Handle_TPrsStd_PlaneDriver_DownCast)
    __swig_destroy__ = _TPrsStd.delete_Handle_TPrsStd_PlaneDriver

    def Update(self, *args):
        """
        Update(Handle_TPrsStd_PlaneDriver self, TDF_Label aLabel, Handle_AIS_InteractiveObject anAISObject) -> Standard_Boolean

        Build the AISObject (if null) or update it.
        No compute is done.
        Returns <True> if informations was found
        and AISObject updated.

        :type aLabel: OCC.wrapper.TDF.TDF_Label
        :type anAISObject: OCC.wrapper.AIS.Handle_AIS_InteractiveObject
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_PlaneDriver_Update(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TPrsStd_PlaneDriver self) -> char const *

        :rtype: const char *

        """
        return _TPrsStd.Handle_TPrsStd_PlaneDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TPrsStd.Handle_TPrsStd_PlaneDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TPrsStd.Handle_TPrsStd_PlaneDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TPrsStd_PlaneDriver self)

        Memory deallocator for transient classes


        """
        return _TPrsStd.Handle_TPrsStd_PlaneDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TPrsStd_PlaneDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TPrsStd_PlaneDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_PlaneDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TPrsStd_PlaneDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TPrsStd_PlaneDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_PlaneDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TPrsStd_PlaneDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TPrsStd.Handle_TPrsStd_PlaneDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TPrsStd_PlaneDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TPrsStd.Handle_TPrsStd_PlaneDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TPrsStd_PlaneDriver self)

        Increments the reference counter of this object


        """
        return _TPrsStd.Handle_TPrsStd_PlaneDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TPrsStd_PlaneDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TPrsStd.Handle_TPrsStd_PlaneDriver_DecrementRefCounter(self, *args)

Handle_TPrsStd_PlaneDriver_swigregister = _TPrsStd.Handle_TPrsStd_PlaneDriver_swigregister
Handle_TPrsStd_PlaneDriver_swigregister(Handle_TPrsStd_PlaneDriver)

def Handle_TPrsStd_PlaneDriver_DownCast(thing):
    return _TPrsStd.Handle_TPrsStd_PlaneDriver_DownCast(thing)
Handle_TPrsStd_PlaneDriver_DownCast = _TPrsStd.Handle_TPrsStd_PlaneDriver_DownCast

class Handle_TPrsStd_AISViewer(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TPrsStd_AISViewer self)

        Nullify the handle


        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TPrsStd_AISViewer self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TPrsStd_AISViewer self, TPrsStd_AISViewer thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TPrsStd_AISViewer self, Handle_TPrsStd_AISViewer theHandle) -> Handle_TPrsStd_AISViewer
        assign(Handle_TPrsStd_AISViewer self, TPrsStd_AISViewer thePtr) -> Handle_TPrsStd_AISViewer
        assign(Handle_TPrsStd_AISViewer self, Handle_TPrsStd_AISViewer theHandle) -> Handle_TPrsStd_AISViewer

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TPrsStd_AISViewer self) -> TPrsStd_AISViewer

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TPrsStd_AISViewer self) -> TPrsStd_AISViewer

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TPrsStd_AISViewer self) -> TPrsStd_AISViewer

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer___ref__(self, *args)


    def __hash__(self):
        return _TPrsStd.Handle_TPrsStd_AISViewer___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TPrsStd.Handle_TPrsStd_AISViewer___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TPrsStd.new_Handle_TPrsStd_AISViewer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TPrsStd.Handle_TPrsStd_AISViewer_DownCast)
    __swig_destroy__ = _TPrsStd.delete_Handle_TPrsStd_AISViewer

    def GetID(self, *args):
        """
        class methods
        =============

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TPrsStd.Handle_TPrsStd_AISViewer_GetID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Has(self, *args):
        """
        Has(Handle_TPrsStd_AISViewer self, TDF_Label acces) -> Standard_Boolean

        returns True if   there is an AISViewer attribute  in
        <acces> Data Framework.

        :type acces: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_Has(self, *args)


    def New(self, *args):
        """
        New(Handle_TPrsStd_AISViewer self, TDF_Label access, Handle_AIS_InteractiveContext selector) -> Handle_TPrsStd_AISViewer
        New(Handle_TPrsStd_AISViewer self, TDF_Label acces, Handle_V3d_Viewer viewer) -> Handle_TPrsStd_AISViewer

        create  and set an   AISAttribute at root  label. The
        interactive context is  build.  Raise an exception  if
        Has.

        :type acces: OCC.wrapper.TDF.TDF_Label
        :type viewer: OCC.wrapper.V3d.Handle_V3d_Viewer
        :rtype: OCC.wrapper.TPrsStd.Handle_TPrsStd_AISViewer

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_New(self, *args)


    def Find(self, *args):
        """
        Find(Handle_TPrsStd_AISViewer self, TDF_Label acces, Handle_TPrsStd_AISViewer A) -> Standard_Boolean
        Find(Handle_TPrsStd_AISViewer self, TDF_Label acces, Handle_AIS_InteractiveContext IC) -> Standard_Boolean
        Find(Handle_TPrsStd_AISViewer self, TDF_Label acces, Handle_V3d_Viewer V) -> Standard_Boolean

        :type acces: OCC.wrapper.TDF.TDF_Label
        :type V: OCC.wrapper.V3d.Handle_V3d_Viewer
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_Find(self, *args)


    def Update(self, *args):
        """
        Update(Handle_TPrsStd_AISViewer self, TDF_Label acces)
        Update(Handle_TPrsStd_AISViewer self)

        Updates the viewer at the label access.
        access is the root of the data framework.


        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_Update(self, *args)


    def SetInteractiveContext(self, *args):
        """
        SetInteractiveContext(Handle_TPrsStd_AISViewer self, Handle_AIS_InteractiveContext ctx)

        Sets the interactive context ctx for this attribute.

        :type ctx: OCC.wrapper.AIS.Handle_AIS_InteractiveContext

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_SetInteractiveContext(self, *args)


    def GetInteractiveContext(self, *args):
        """
        GetInteractiveContext(Handle_TPrsStd_AISViewer self) -> Handle_AIS_InteractiveContext

        Returns the interactive context in this attribute.

        :rtype: OCC.wrapper.AIS.Handle_AIS_InteractiveContext

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_GetInteractiveContext(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TPrsStd.Handle_TPrsStd_AISViewer_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(Handle_TPrsStd_AISViewer self, Handle_TDF_Attribute arg2)

        :type with: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_TPrsStd_AISViewer self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_TPrsStd_AISViewer self, Handle_TDF_Attribute into, Handle_TDF_RelocationTable RT)

        :type into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TPrsStd_AISViewer self) -> char const *

        :rtype: const char *

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TPrsStd.Handle_TPrsStd_AISViewer_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TPrsStd.Handle_TPrsStd_AISViewer_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetID(self, *args):
        """
        SetID(Handle_TPrsStd_AISViewer self, Standard_GUID arg2)
        SetID(Handle_TPrsStd_AISViewer self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_TPrsStd_AISViewer self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_TPrsStd_AISViewer self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_TPrsStd_AISViewer self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_TPrsStd_AISViewer self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_TPrsStd_AISViewer self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_TPrsStd_AISViewer self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_TPrsStd_AISViewer self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_TPrsStd_AISViewer self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_TPrsStd_AISViewer self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_TPrsStd_AISViewer self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_TPrsStd_AISViewer self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_ForgetAllAttributes(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_TPrsStd_AISViewer self)

        Something to do after adding an Attribute to a label.


        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_TPrsStd_AISViewer self)

        Something to do before removing an Attribute from
        a label.


        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_TPrsStd_AISViewer self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_TPrsStd_AISViewer self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_AfterResume(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_TPrsStd_AISViewer self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_AfterRetrieval(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_TPrsStd_AISViewer self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do before applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_TPrsStd_AISViewer self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do after applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_AfterUndo(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_TPrsStd_AISViewer self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_TPrsStd_AISViewer self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_TPrsStd_AISViewer self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_IsBackuped(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_TPrsStd_AISViewer self) -> Handle_TDF_Attribute

        Copies  the attribute  contents into  a  new other
        attribute. It is used by Backup().

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_BackupCopy(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_TPrsStd_AISViewer self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_TPrsStd_AISViewer self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_TPrsStd_AISViewer self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_TPrsStd_AISViewer self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_DeltaOnRemoval(self, *args)


    def References(self, *args):
        """
        References(Handle_TPrsStd_AISViewer self, Handle_TDF_DataSet aDataSet)

        Adds the first level referenced attributes and labels
        to <aDataSet>.

        For this, use the AddLabel or AddAttribute of
        DataSet.

        If there is none, do not implement the method.

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_References(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_TPrsStd_AISViewer self, Standard_OStream & anOS) -> Standard_OStream &

        Dumps the minimum information about <me> on
        <aStream>.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_Dump(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_TPrsStd_AISViewer self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_TPrsStd_AISViewer self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_TPrsStd_AISViewer self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_TPrsStd_AISViewer self)

        Memory deallocator for transient classes


        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TPrsStd_AISViewer self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TPrsStd_AISViewer self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TPrsStd_AISViewer self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TPrsStd_AISViewer self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TPrsStd_AISViewer self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TPrsStd_AISViewer self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TPrsStd_AISViewer self)

        Increments the reference counter of this object


        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TPrsStd_AISViewer self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TPrsStd.Handle_TPrsStd_AISViewer_DecrementRefCounter(self, *args)

Handle_TPrsStd_AISViewer_swigregister = _TPrsStd.Handle_TPrsStd_AISViewer_swigregister
Handle_TPrsStd_AISViewer_swigregister(Handle_TPrsStd_AISViewer)

def Handle_TPrsStd_AISViewer_DownCast(thing):
    return _TPrsStd.Handle_TPrsStd_AISViewer_DownCast(thing)
Handle_TPrsStd_AISViewer_DownCast = _TPrsStd.Handle_TPrsStd_AISViewer_DownCast

class TPrsStd_AISPresentation(TDF.TDF_Attribute):
    """
    An attribute to associate an
    AIS_InteractiveObject to a label in an AIS viewer.
    This attribute works in collaboration with TPrsStd_AISViewer.
    Note that all the Set... and Unset... attribute
    methods as well as the query methods for
    visualization attributes and the HasOwn... test
    methods are shortcuts to the respective
    AIS_InteractiveObject settings.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TPrsStd_AISPresentation
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TPrsStd_AISPresentation(self) 
            return h


    def GetID(*args):
        """
        GetID() -> Standard_GUID

        Returns the GUID for TPrsStd_AISPresentation attributes.

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _TPrsStd.TPrsStd_AISPresentation_GetID(*args)

    GetID = staticmethod(GetID)

    def Unset(*args):
        """
        Unset(TDF_Label L)

        Delete (if exist) the presentation attribute associated to the label <L>.

        :type L: OCC.wrapper.TDF.TDF_Label

        """
        return _TPrsStd.TPrsStd_AISPresentation_Unset(*args)

    Unset = staticmethod(Unset)

    def Set(*args):
        """
        Set(TDF_Label L, Standard_GUID driver) -> Handle_TPrsStd_AISPresentation
        Set(Handle_TDF_Attribute master) -> Handle_TPrsStd_AISPresentation

        Creates or retrieves the AISPresentation
        attribute attached to master.
        The GUID of the driver will be the GUID of master.
        master is the attribute you want to display.

        :type master: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.TPrsStd.Handle_TPrsStd_AISPresentation

        """
        return _TPrsStd.TPrsStd_AISPresentation_Set(*args)

    Set = staticmethod(Set)

    def __init__(self, *args):
        """
        __init__(TPrsStd_AISPresentation self) -> TPrsStd_AISPresentation

        An attribute to associate an
        AIS_InteractiveObject to a label in an AIS viewer.
        This attribute works in collaboration with TPrsStd_AISViewer.
        Note that all the Set... and Unset... attribute
        methods as well as the query methods for
        visualization attributes and the HasOwn... test
        methods are shortcuts to the respective
        AIS_InteractiveObject settings.
        """
        this = _TPrsStd.new_TPrsStd_AISPresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetDisplayed(self, *args):
        """
        SetDisplayed(TPrsStd_AISPresentation self, Standard_Boolean const B)

        :type B: bool

        """
        return _TPrsStd.TPrsStd_AISPresentation_SetDisplayed(self, *args)


    def Display(self, *args):
        """
        Display(TPrsStd_AISPresentation self, Standard_Boolean const update)

        Display presentation of object in AIS viewer.
        If <update> = True then AISObject is recomputed and all
        the visualization settings are applied

        :type update: bool

        """
        return _TPrsStd.TPrsStd_AISPresentation_Display(self, *args)


    def Erase(self, *args):
        """
        Erase(TPrsStd_AISPresentation self, Standard_Boolean const remove)

        Removes the presentation of this AIS
        presentation attribute from the TPrsStd_AISViewer.
        If remove is true, this AIS presentation attribute
        is removed from the interactive context.

        :type remove: bool

        """
        return _TPrsStd.TPrsStd_AISPresentation_Erase(self, *args)


    def Update(self, *args):
        """
        Update(TPrsStd_AISPresentation self)

        Recompute presentation of object and apply the visualization settings


        """
        return _TPrsStd.TPrsStd_AISPresentation_Update(self, *args)


    def GetDriverGUID(self, *args):
        """
        GetDriverGUID(TPrsStd_AISPresentation self) -> Standard_GUID

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _TPrsStd.TPrsStd_AISPresentation_GetDriverGUID(self, *args)


    def SetDriverGUID(self, *args):
        """
        SetDriverGUID(TPrsStd_AISPresentation self, Standard_GUID guid)

        :type guid: OCC.wrapper.Standard.Standard_GUID

        """
        return _TPrsStd.TPrsStd_AISPresentation_SetDriverGUID(self, *args)


    def IsDisplayed(self, *args):
        """
        IsDisplayed(TPrsStd_AISPresentation self) -> Standard_Boolean

        Returns true if this AIS presentation attribute is displayed.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.TPrsStd_AISPresentation_IsDisplayed(self, *args)


    def GetAIS(self, *args):
        """
        GetAIS(TPrsStd_AISPresentation self) -> Handle_AIS_InteractiveObject

        Returns AIS_InteractiveObject stored in the presentation attribute

        :rtype: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

        """
        return _TPrsStd.TPrsStd_AISPresentation_GetAIS(self, *args)


    def Material(self, *args):
        """
        Material(TPrsStd_AISPresentation self) -> Graphic3d_NameOfMaterial

        Returns the material setting for this presentation attribute.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_NameOfMaterial

        """
        return _TPrsStd.TPrsStd_AISPresentation_Material(self, *args)


    def SetMaterial(self, *args):
        """
        SetMaterial(TPrsStd_AISPresentation self, Graphic3d_NameOfMaterial const aName)

        Sets the material aName for this presentation  attribute.

        :type aName: OCC.wrapper.Graphic3d.Graphic3d_NameOfMaterial

        """
        return _TPrsStd.TPrsStd_AISPresentation_SetMaterial(self, *args)


    def HasOwnMaterial(self, *args):
        """
        HasOwnMaterial(TPrsStd_AISPresentation self) -> Standard_Boolean

        Returns true if this presentation attribute already has a material setting.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.TPrsStd_AISPresentation_HasOwnMaterial(self, *args)


    def UnsetMaterial(self, *args):
        """
        UnsetMaterial(TPrsStd_AISPresentation self)

        Removes the material setting from this presentation attribute.


        """
        return _TPrsStd.TPrsStd_AISPresentation_UnsetMaterial(self, *args)


    def SetTransparency(self, *args):
        """
        SetTransparency(TPrsStd_AISPresentation self, Standard_Real const aValue=0.6)

        Sets the transparency value aValue for this
        presentation attribute.
        This value is 0.6 by default.

        :type aValue: float

        """
        return _TPrsStd.TPrsStd_AISPresentation_SetTransparency(self, *args)


    def Transparency(self, *args):
        """
        Transparency(TPrsStd_AISPresentation self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _TPrsStd.TPrsStd_AISPresentation_Transparency(self, *args)


    def HasOwnTransparency(self, *args):
        """
        HasOwnTransparency(TPrsStd_AISPresentation self) -> Standard_Boolean

        Returns true if this presentation attribute already has a transparency setting.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.TPrsStd_AISPresentation_HasOwnTransparency(self, *args)


    def UnsetTransparency(self, *args):
        """
        UnsetTransparency(TPrsStd_AISPresentation self)

        Removes the transparency setting from this presentation attribute.


        """
        return _TPrsStd.TPrsStd_AISPresentation_UnsetTransparency(self, *args)


    def Color(self, *args):
        """
        Color(TPrsStd_AISPresentation self) -> Quantity_NameOfColor

        :rtype: OCC.wrapper.Quantity.Quantity_NameOfColor

        """
        return _TPrsStd.TPrsStd_AISPresentation_Color(self, *args)


    def SetColor(self, *args):
        """
        SetColor(TPrsStd_AISPresentation self, Quantity_NameOfColor const aColor)

        Sets the color aColor for this presentation attribute.

        :type aColor: OCC.wrapper.Quantity.Quantity_NameOfColor

        """
        return _TPrsStd.TPrsStd_AISPresentation_SetColor(self, *args)


    def HasOwnColor(self, *args):
        """
        HasOwnColor(TPrsStd_AISPresentation self) -> Standard_Boolean

        Returns true if this presentation attribute already has a color setting.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.TPrsStd_AISPresentation_HasOwnColor(self, *args)


    def UnsetColor(self, *args):
        """
        UnsetColor(TPrsStd_AISPresentation self)

        Removes the color setting from this presentation attribute.


        """
        return _TPrsStd.TPrsStd_AISPresentation_UnsetColor(self, *args)


    def Width(self, *args):
        """
        Width(TPrsStd_AISPresentation self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _TPrsStd.TPrsStd_AISPresentation_Width(self, *args)


    def SetWidth(self, *args):
        """
        SetWidth(TPrsStd_AISPresentation self, Standard_Real const aWidth)

        Sets the width aWidth for this presentation attribute.

        :type aWidth: float

        """
        return _TPrsStd.TPrsStd_AISPresentation_SetWidth(self, *args)


    def HasOwnWidth(self, *args):
        """
        HasOwnWidth(TPrsStd_AISPresentation self) -> Standard_Boolean

        Returns true if this presentation attribute already has a width setting.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.TPrsStd_AISPresentation_HasOwnWidth(self, *args)


    def UnsetWidth(self, *args):
        """
        UnsetWidth(TPrsStd_AISPresentation self)

        Removes the width setting from this presentation attribute.


        """
        return _TPrsStd.TPrsStd_AISPresentation_UnsetWidth(self, *args)


    def Mode(self, *args):
        """
        Mode(TPrsStd_AISPresentation self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TPrsStd.TPrsStd_AISPresentation_Mode(self, *args)


    def SetMode(self, *args):
        """
        SetMode(TPrsStd_AISPresentation self, Standard_Integer const theMode)

        :type theMode: int

        """
        return _TPrsStd.TPrsStd_AISPresentation_SetMode(self, *args)


    def HasOwnMode(self, *args):
        """
        HasOwnMode(TPrsStd_AISPresentation self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.TPrsStd_AISPresentation_HasOwnMode(self, *args)


    def UnsetMode(self, *args):
        """UnsetMode(TPrsStd_AISPresentation self)"""
        return _TPrsStd.TPrsStd_AISPresentation_UnsetMode(self, *args)


    def SelectionMode(self, *args):
        """
        SelectionMode(TPrsStd_AISPresentation self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TPrsStd.TPrsStd_AISPresentation_SelectionMode(self, *args)


    def SetSelectionMode(self, *args):
        """
        SetSelectionMode(TPrsStd_AISPresentation self, Standard_Integer const theSelectionMode)

        :type theSelectionMode: int

        """
        return _TPrsStd.TPrsStd_AISPresentation_SetSelectionMode(self, *args)


    def HasOwnSelectionMode(self, *args):
        """
        HasOwnSelectionMode(TPrsStd_AISPresentation self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.TPrsStd_AISPresentation_HasOwnSelectionMode(self, *args)


    def UnsetSelectionMode(self, *args):
        """UnsetSelectionMode(TPrsStd_AISPresentation self)"""
        return _TPrsStd.TPrsStd_AISPresentation_UnsetSelectionMode(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TPrsStd.TPrsStd_AISPresentation_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NewEmpty(self, *args):
        """
        NewEmpty(TPrsStd_AISPresentation self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TPrsStd.TPrsStd_AISPresentation_NewEmpty(self, *args)


    def Restore(self, *args):
        """
        Restore(TPrsStd_AISPresentation self, Handle_TDF_Attribute arg2)

        :type with: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TPrsStd.TPrsStd_AISPresentation_Restore(self, *args)


    def Paste(self, *args):
        """
        Paste(TPrsStd_AISPresentation self, Handle_TDF_Attribute into, Handle_TDF_RelocationTable RT)

        :type into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _TPrsStd.TPrsStd_AISPresentation_Paste(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(TPrsStd_AISPresentation self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TPrsStd.TPrsStd_AISPresentation_BackupCopy(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(TPrsStd_AISPresentation self)

        Something to do after adding an Attribute to a label.


        """
        return _TPrsStd.TPrsStd_AISPresentation_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(TPrsStd_AISPresentation self)

        Something to do before removing an Attribute from
        a label.


        """
        return _TPrsStd.TPrsStd_AISPresentation_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(TPrsStd_AISPresentation self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _TPrsStd.TPrsStd_AISPresentation_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(TPrsStd_AISPresentation self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _TPrsStd.TPrsStd_AISPresentation_AfterResume(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(TPrsStd_AISPresentation self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.TPrsStd_AISPresentation_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(TPrsStd_AISPresentation self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        update AIS viewer according to delta

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.TPrsStd_AISPresentation_AfterUndo(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TPrsStd.TPrsStd_AISPresentation_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TPrsStd.TPrsStd_AISPresentation_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TPrsStd.TPrsStd_AISPresentation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TPrsStd.delete_TPrsStd_AISPresentation
TPrsStd_AISPresentation_swigregister = _TPrsStd.TPrsStd_AISPresentation_swigregister
TPrsStd_AISPresentation_swigregister(TPrsStd_AISPresentation)

def TPrsStd_AISPresentation_GetID(*args):
    """
    TPrsStd_AISPresentation_GetID() -> Standard_GUID

    Returns the GUID for TPrsStd_AISPresentation attributes.

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _TPrsStd.TPrsStd_AISPresentation_GetID(*args)

def TPrsStd_AISPresentation_Unset(*args):
    """
    TPrsStd_AISPresentation_Unset(TDF_Label L)

    Delete (if exist) the presentation attribute associated to the label <L>.

    :type L: OCC.wrapper.TDF.TDF_Label

    """
    return _TPrsStd.TPrsStd_AISPresentation_Unset(*args)

def TPrsStd_AISPresentation_Set(*args):
    """
    Set(TDF_Label L, Standard_GUID driver) -> Handle_TPrsStd_AISPresentation
    TPrsStd_AISPresentation_Set(Handle_TDF_Attribute master) -> Handle_TPrsStd_AISPresentation

    Creates or retrieves the AISPresentation
    attribute attached to master.
    The GUID of the driver will be the GUID of master.
    master is the attribute you want to display.

    :type master: OCC.wrapper.TDF.Handle_TDF_Attribute
    :rtype: OCC.wrapper.TPrsStd.Handle_TPrsStd_AISPresentation

    """
    return _TPrsStd.TPrsStd_AISPresentation_Set(*args)

def TPrsStd_AISPresentation_get_type_name(*args):
    """
    TPrsStd_AISPresentation_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TPrsStd.TPrsStd_AISPresentation_get_type_name(*args)

def TPrsStd_AISPresentation_get_type_descriptor(*args):
    """
    TPrsStd_AISPresentation_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TPrsStd.TPrsStd_AISPresentation_get_type_descriptor(*args)

class Handle_TPrsStd_AISPresentation(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TPrsStd_AISPresentation self)

        Nullify the handle


        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TPrsStd_AISPresentation self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TPrsStd_AISPresentation self, TPrsStd_AISPresentation thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TPrsStd_AISPresentation self, Handle_TPrsStd_AISPresentation theHandle) -> Handle_TPrsStd_AISPresentation
        assign(Handle_TPrsStd_AISPresentation self, TPrsStd_AISPresentation thePtr) -> Handle_TPrsStd_AISPresentation
        assign(Handle_TPrsStd_AISPresentation self, Handle_TPrsStd_AISPresentation theHandle) -> Handle_TPrsStd_AISPresentation

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TPrsStd_AISPresentation self) -> TPrsStd_AISPresentation

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TPrsStd_AISPresentation self) -> TPrsStd_AISPresentation

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TPrsStd_AISPresentation self) -> TPrsStd_AISPresentation

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation___ref__(self, *args)


    def __hash__(self):
        return _TPrsStd.Handle_TPrsStd_AISPresentation___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TPrsStd.Handle_TPrsStd_AISPresentation___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TPrsStd.new_Handle_TPrsStd_AISPresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TPrsStd.Handle_TPrsStd_AISPresentation_DownCast)
    __swig_destroy__ = _TPrsStd.delete_Handle_TPrsStd_AISPresentation

    def GetID(self, *args):
        """
        Returns the GUID for TPrsStd_AISPresentation attributes.

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TPrsStd.Handle_TPrsStd_AISPresentation_GetID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Set(self, *args):
        """
        Set(Handle_TPrsStd_AISPresentation self, TDF_Label L, Standard_GUID driver) -> Handle_TPrsStd_AISPresentation
        Set(Handle_TPrsStd_AISPresentation self, Handle_TDF_Attribute master) -> Handle_TPrsStd_AISPresentation

        Creates or retrieves the AISPresentation
        attribute attached to master.
        The GUID of the driver will be the GUID of master.
        master is the attribute you want to display.

        :type master: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.TPrsStd.Handle_TPrsStd_AISPresentation

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_Set(self, *args)


    def Unset(self, *args):
        """
        Unset(Handle_TPrsStd_AISPresentation self, TDF_Label L)

        Delete (if exist) the presentation attribute associated to the label <L>.

        :type L: OCC.wrapper.TDF.TDF_Label

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_Unset(self, *args)


    def SetDisplayed(self, *args):
        """
        SetDisplayed(Handle_TPrsStd_AISPresentation self, Standard_Boolean const B)

        :type B: bool

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_SetDisplayed(self, *args)


    def Display(self, *args):
        """
        Display(Handle_TPrsStd_AISPresentation self, Standard_Boolean const update)

        Display presentation of object in AIS viewer.
        If <update> = True then AISObject is recomputed and all
        the visualization settings are applied

        :type update: bool

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_Display(self, *args)


    def Erase(self, *args):
        """
        Erase(Handle_TPrsStd_AISPresentation self, Standard_Boolean const remove)

        Removes the presentation of this AIS
        presentation attribute from the TPrsStd_AISViewer.
        If remove is true, this AIS presentation attribute
        is removed from the interactive context.

        :type remove: bool

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_Erase(self, *args)


    def Update(self, *args):
        """
        Update(Handle_TPrsStd_AISPresentation self)

        Recompute presentation of object and apply the visualization settings


        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_Update(self, *args)


    def GetDriverGUID(self, *args):
        """
        GetDriverGUID(Handle_TPrsStd_AISPresentation self) -> Standard_GUID

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_GetDriverGUID(self, *args)


    def SetDriverGUID(self, *args):
        """
        SetDriverGUID(Handle_TPrsStd_AISPresentation self, Standard_GUID guid)

        :type guid: OCC.wrapper.Standard.Standard_GUID

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_SetDriverGUID(self, *args)


    def IsDisplayed(self, *args):
        """
        IsDisplayed(Handle_TPrsStd_AISPresentation self) -> Standard_Boolean

        Returns true if this AIS presentation attribute is displayed.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_IsDisplayed(self, *args)


    def GetAIS(self, *args):
        """
        GetAIS(Handle_TPrsStd_AISPresentation self) -> Handle_AIS_InteractiveObject

        Returns AIS_InteractiveObject stored in the presentation attribute

        :rtype: OCC.wrapper.AIS.Handle_AIS_InteractiveObject

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_GetAIS(self, *args)


    def Material(self, *args):
        """
        Material(Handle_TPrsStd_AISPresentation self) -> Graphic3d_NameOfMaterial

        Returns the material setting for this presentation attribute.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_NameOfMaterial

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_Material(self, *args)


    def SetMaterial(self, *args):
        """
        SetMaterial(Handle_TPrsStd_AISPresentation self, Graphic3d_NameOfMaterial const aName)

        Sets the material aName for this presentation  attribute.

        :type aName: OCC.wrapper.Graphic3d.Graphic3d_NameOfMaterial

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_SetMaterial(self, *args)


    def HasOwnMaterial(self, *args):
        """
        HasOwnMaterial(Handle_TPrsStd_AISPresentation self) -> Standard_Boolean

        Returns true if this presentation attribute already has a material setting.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_HasOwnMaterial(self, *args)


    def UnsetMaterial(self, *args):
        """
        UnsetMaterial(Handle_TPrsStd_AISPresentation self)

        Removes the material setting from this presentation attribute.


        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_UnsetMaterial(self, *args)


    def SetTransparency(self, *args):
        """
        SetTransparency(Handle_TPrsStd_AISPresentation self, Standard_Real const aValue=0.6)

        Sets the transparency value aValue for this
        presentation attribute.
        This value is 0.6 by default.

        :type aValue: float

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_SetTransparency(self, *args)


    def Transparency(self, *args):
        """
        Transparency(Handle_TPrsStd_AISPresentation self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_Transparency(self, *args)


    def HasOwnTransparency(self, *args):
        """
        HasOwnTransparency(Handle_TPrsStd_AISPresentation self) -> Standard_Boolean

        Returns true if this presentation attribute already has a transparency setting.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_HasOwnTransparency(self, *args)


    def UnsetTransparency(self, *args):
        """
        UnsetTransparency(Handle_TPrsStd_AISPresentation self)

        Removes the transparency setting from this presentation attribute.


        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_UnsetTransparency(self, *args)


    def Color(self, *args):
        """
        Color(Handle_TPrsStd_AISPresentation self) -> Quantity_NameOfColor

        :rtype: OCC.wrapper.Quantity.Quantity_NameOfColor

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_Color(self, *args)


    def SetColor(self, *args):
        """
        SetColor(Handle_TPrsStd_AISPresentation self, Quantity_NameOfColor const aColor)

        Sets the color aColor for this presentation attribute.

        :type aColor: OCC.wrapper.Quantity.Quantity_NameOfColor

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_SetColor(self, *args)


    def HasOwnColor(self, *args):
        """
        HasOwnColor(Handle_TPrsStd_AISPresentation self) -> Standard_Boolean

        Returns true if this presentation attribute already has a color setting.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_HasOwnColor(self, *args)


    def UnsetColor(self, *args):
        """
        UnsetColor(Handle_TPrsStd_AISPresentation self)

        Removes the color setting from this presentation attribute.


        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_UnsetColor(self, *args)


    def Width(self, *args):
        """
        Width(Handle_TPrsStd_AISPresentation self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_Width(self, *args)


    def SetWidth(self, *args):
        """
        SetWidth(Handle_TPrsStd_AISPresentation self, Standard_Real const aWidth)

        Sets the width aWidth for this presentation attribute.

        :type aWidth: float

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_SetWidth(self, *args)


    def HasOwnWidth(self, *args):
        """
        HasOwnWidth(Handle_TPrsStd_AISPresentation self) -> Standard_Boolean

        Returns true if this presentation attribute already has a width setting.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_HasOwnWidth(self, *args)


    def UnsetWidth(self, *args):
        """
        UnsetWidth(Handle_TPrsStd_AISPresentation self)

        Removes the width setting from this presentation attribute.


        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_UnsetWidth(self, *args)


    def Mode(self, *args):
        """
        Mode(Handle_TPrsStd_AISPresentation self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_Mode(self, *args)


    def SetMode(self, *args):
        """
        SetMode(Handle_TPrsStd_AISPresentation self, Standard_Integer const theMode)

        :type theMode: int

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_SetMode(self, *args)


    def HasOwnMode(self, *args):
        """
        HasOwnMode(Handle_TPrsStd_AISPresentation self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_HasOwnMode(self, *args)


    def UnsetMode(self, *args):
        """UnsetMode(Handle_TPrsStd_AISPresentation self)"""
        return _TPrsStd.Handle_TPrsStd_AISPresentation_UnsetMode(self, *args)


    def SelectionMode(self, *args):
        """
        SelectionMode(Handle_TPrsStd_AISPresentation self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_SelectionMode(self, *args)


    def SetSelectionMode(self, *args):
        """
        SetSelectionMode(Handle_TPrsStd_AISPresentation self, Standard_Integer const theSelectionMode)

        :type theSelectionMode: int

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_SetSelectionMode(self, *args)


    def HasOwnSelectionMode(self, *args):
        """
        HasOwnSelectionMode(Handle_TPrsStd_AISPresentation self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_HasOwnSelectionMode(self, *args)


    def UnsetSelectionMode(self, *args):
        """UnsetSelectionMode(Handle_TPrsStd_AISPresentation self)"""
        return _TPrsStd.Handle_TPrsStd_AISPresentation_UnsetSelectionMode(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TPrsStd.Handle_TPrsStd_AISPresentation_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_TPrsStd_AISPresentation self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_NewEmpty(self, *args)


    def Restore(self, *args):
        """
        Restore(Handle_TPrsStd_AISPresentation self, Handle_TDF_Attribute arg2)

        :type with: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_Restore(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_TPrsStd_AISPresentation self, Handle_TDF_Attribute into, Handle_TDF_RelocationTable RT)

        :type into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_Paste(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_TPrsStd_AISPresentation self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_BackupCopy(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_TPrsStd_AISPresentation self)

        Something to do after adding an Attribute to a label.


        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_TPrsStd_AISPresentation self)

        Something to do before removing an Attribute from
        a label.


        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_TPrsStd_AISPresentation self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_TPrsStd_AISPresentation self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_AfterResume(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_TPrsStd_AISPresentation self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_TPrsStd_AISPresentation self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        update AIS viewer according to delta

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_AfterUndo(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TPrsStd_AISPresentation self) -> char const *

        :rtype: const char *

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TPrsStd.Handle_TPrsStd_AISPresentation_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TPrsStd.Handle_TPrsStd_AISPresentation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetID(self, *args):
        """
        SetID(Handle_TPrsStd_AISPresentation self, Standard_GUID arg2)
        SetID(Handle_TPrsStd_AISPresentation self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_TPrsStd_AISPresentation self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_TPrsStd_AISPresentation self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_TPrsStd_AISPresentation self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_TPrsStd_AISPresentation self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_TPrsStd_AISPresentation self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_TPrsStd_AISPresentation self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_TPrsStd_AISPresentation self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_TPrsStd_AISPresentation self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_TPrsStd_AISPresentation self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_TPrsStd_AISPresentation self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_TPrsStd_AISPresentation self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_ForgetAllAttributes(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_TPrsStd_AISPresentation self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_AfterRetrieval(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_TPrsStd_AISPresentation self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_TPrsStd_AISPresentation self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_TPrsStd_AISPresentation self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_IsBackuped(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_TPrsStd_AISPresentation self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_TPrsStd_AISPresentation self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_TPrsStd_AISPresentation self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_TPrsStd_AISPresentation self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_DeltaOnRemoval(self, *args)


    def References(self, *args):
        """
        References(Handle_TPrsStd_AISPresentation self, Handle_TDF_DataSet aDataSet)

        Adds the first level referenced attributes and labels
        to <aDataSet>.

        For this, use the AddLabel or AddAttribute of
        DataSet.

        If there is none, do not implement the method.

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_References(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_TPrsStd_AISPresentation self, Standard_OStream & anOS) -> Standard_OStream &

        Dumps the minimum information about <me> on
        <aStream>.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_Dump(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_TPrsStd_AISPresentation self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_TPrsStd_AISPresentation self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_TPrsStd_AISPresentation self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_TPrsStd_AISPresentation self)

        Memory deallocator for transient classes


        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TPrsStd_AISPresentation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TPrsStd_AISPresentation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TPrsStd_AISPresentation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TPrsStd_AISPresentation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TPrsStd_AISPresentation self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TPrsStd_AISPresentation self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TPrsStd_AISPresentation self)

        Increments the reference counter of this object


        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TPrsStd_AISPresentation self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TPrsStd.Handle_TPrsStd_AISPresentation_DecrementRefCounter(self, *args)

Handle_TPrsStd_AISPresentation_swigregister = _TPrsStd.Handle_TPrsStd_AISPresentation_swigregister
Handle_TPrsStd_AISPresentation_swigregister(Handle_TPrsStd_AISPresentation)

def Handle_TPrsStd_AISPresentation_DownCast(thing):
    return _TPrsStd.Handle_TPrsStd_AISPresentation_DownCast(thing)
Handle_TPrsStd_AISPresentation_DownCast = _TPrsStd.Handle_TPrsStd_AISPresentation_DownCast

class Handle_TPrsStd_ConstraintDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TPrsStd_ConstraintDriver self)

        Nullify the handle


        """
        return _TPrsStd.Handle_TPrsStd_ConstraintDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TPrsStd_ConstraintDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TPrsStd.Handle_TPrsStd_ConstraintDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TPrsStd_ConstraintDriver self, TPrsStd_ConstraintDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TPrsStd.Handle_TPrsStd_ConstraintDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TPrsStd_ConstraintDriver self, Handle_TPrsStd_ConstraintDriver theHandle) -> Handle_TPrsStd_ConstraintDriver
        assign(Handle_TPrsStd_ConstraintDriver self, TPrsStd_ConstraintDriver thePtr) -> Handle_TPrsStd_ConstraintDriver
        assign(Handle_TPrsStd_ConstraintDriver self, Handle_TPrsStd_ConstraintDriver theHandle) -> Handle_TPrsStd_ConstraintDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TPrsStd.Handle_TPrsStd_ConstraintDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TPrsStd_ConstraintDriver self) -> TPrsStd_ConstraintDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TPrsStd.Handle_TPrsStd_ConstraintDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TPrsStd_ConstraintDriver self) -> TPrsStd_ConstraintDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TPrsStd.Handle_TPrsStd_ConstraintDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TPrsStd_ConstraintDriver self) -> TPrsStd_ConstraintDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TPrsStd.Handle_TPrsStd_ConstraintDriver___ref__(self, *args)


    def __hash__(self):
        return _TPrsStd.Handle_TPrsStd_ConstraintDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TPrsStd.Handle_TPrsStd_ConstraintDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TPrsStd.new_Handle_TPrsStd_ConstraintDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TPrsStd.Handle_TPrsStd_ConstraintDriver_DownCast)
    __swig_destroy__ = _TPrsStd.delete_Handle_TPrsStd_ConstraintDriver

    def Update(self, *args):
        """
        Update(Handle_TPrsStd_ConstraintDriver self, TDF_Label aLabel, Handle_AIS_InteractiveObject anAISObject) -> Standard_Boolean

        Build the AISObject (if null) or update it.
        No compute is done.
        Returns <True> if informations was found
        and AISObject updated.

        :type aLabel: OCC.wrapper.TDF.TDF_Label
        :type anAISObject: OCC.wrapper.AIS.Handle_AIS_InteractiveObject
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_ConstraintDriver_Update(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TPrsStd_ConstraintDriver self) -> char const *

        :rtype: const char *

        """
        return _TPrsStd.Handle_TPrsStd_ConstraintDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TPrsStd.Handle_TPrsStd_ConstraintDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TPrsStd.Handle_TPrsStd_ConstraintDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TPrsStd_ConstraintDriver self)

        Memory deallocator for transient classes


        """
        return _TPrsStd.Handle_TPrsStd_ConstraintDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TPrsStd_ConstraintDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TPrsStd_ConstraintDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_ConstraintDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TPrsStd_ConstraintDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TPrsStd_ConstraintDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_ConstraintDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TPrsStd_ConstraintDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TPrsStd.Handle_TPrsStd_ConstraintDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TPrsStd_ConstraintDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TPrsStd.Handle_TPrsStd_ConstraintDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TPrsStd_ConstraintDriver self)

        Increments the reference counter of this object


        """
        return _TPrsStd.Handle_TPrsStd_ConstraintDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TPrsStd_ConstraintDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TPrsStd.Handle_TPrsStd_ConstraintDriver_DecrementRefCounter(self, *args)

Handle_TPrsStd_ConstraintDriver_swigregister = _TPrsStd.Handle_TPrsStd_ConstraintDriver_swigregister
Handle_TPrsStd_ConstraintDriver_swigregister(Handle_TPrsStd_ConstraintDriver)

def Handle_TPrsStd_ConstraintDriver_DownCast(thing):
    return _TPrsStd.Handle_TPrsStd_ConstraintDriver_DownCast(thing)
Handle_TPrsStd_ConstraintDriver_DownCast = _TPrsStd.Handle_TPrsStd_ConstraintDriver_DownCast

class Handle_TPrsStd_PointDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TPrsStd_PointDriver self)

        Nullify the handle


        """
        return _TPrsStd.Handle_TPrsStd_PointDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TPrsStd_PointDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TPrsStd.Handle_TPrsStd_PointDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TPrsStd_PointDriver self, TPrsStd_PointDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TPrsStd.Handle_TPrsStd_PointDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TPrsStd_PointDriver self, Handle_TPrsStd_PointDriver theHandle) -> Handle_TPrsStd_PointDriver
        assign(Handle_TPrsStd_PointDriver self, TPrsStd_PointDriver thePtr) -> Handle_TPrsStd_PointDriver
        assign(Handle_TPrsStd_PointDriver self, Handle_TPrsStd_PointDriver theHandle) -> Handle_TPrsStd_PointDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TPrsStd.Handle_TPrsStd_PointDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TPrsStd_PointDriver self) -> TPrsStd_PointDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TPrsStd.Handle_TPrsStd_PointDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TPrsStd_PointDriver self) -> TPrsStd_PointDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TPrsStd.Handle_TPrsStd_PointDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TPrsStd_PointDriver self) -> TPrsStd_PointDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TPrsStd.Handle_TPrsStd_PointDriver___ref__(self, *args)


    def __hash__(self):
        return _TPrsStd.Handle_TPrsStd_PointDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TPrsStd.Handle_TPrsStd_PointDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TPrsStd.new_Handle_TPrsStd_PointDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TPrsStd.Handle_TPrsStd_PointDriver_DownCast)
    __swig_destroy__ = _TPrsStd.delete_Handle_TPrsStd_PointDriver

    def Update(self, *args):
        """
        Update(Handle_TPrsStd_PointDriver self, TDF_Label aLabel, Handle_AIS_InteractiveObject anAISObject) -> Standard_Boolean

        Build the AISObject (if null) or update it.
        No compute is done.
        Returns <True> if informations was found
        and AISObject updated.

        :type aLabel: OCC.wrapper.TDF.TDF_Label
        :type anAISObject: OCC.wrapper.AIS.Handle_AIS_InteractiveObject
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_PointDriver_Update(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TPrsStd_PointDriver self) -> char const *

        :rtype: const char *

        """
        return _TPrsStd.Handle_TPrsStd_PointDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TPrsStd.Handle_TPrsStd_PointDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TPrsStd.Handle_TPrsStd_PointDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TPrsStd_PointDriver self)

        Memory deallocator for transient classes


        """
        return _TPrsStd.Handle_TPrsStd_PointDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TPrsStd_PointDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TPrsStd_PointDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_PointDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TPrsStd_PointDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TPrsStd_PointDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_PointDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TPrsStd_PointDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TPrsStd.Handle_TPrsStd_PointDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TPrsStd_PointDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TPrsStd.Handle_TPrsStd_PointDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TPrsStd_PointDriver self)

        Increments the reference counter of this object


        """
        return _TPrsStd.Handle_TPrsStd_PointDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TPrsStd_PointDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TPrsStd.Handle_TPrsStd_PointDriver_DecrementRefCounter(self, *args)

Handle_TPrsStd_PointDriver_swigregister = _TPrsStd.Handle_TPrsStd_PointDriver_swigregister
Handle_TPrsStd_PointDriver_swigregister(Handle_TPrsStd_PointDriver)

def Handle_TPrsStd_PointDriver_DownCast(thing):
    return _TPrsStd.Handle_TPrsStd_PointDriver_DownCast(thing)
Handle_TPrsStd_PointDriver_DownCast = _TPrsStd.Handle_TPrsStd_PointDriver_DownCast

class Handle_TPrsStd_GeometryDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TPrsStd_GeometryDriver self)

        Nullify the handle


        """
        return _TPrsStd.Handle_TPrsStd_GeometryDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TPrsStd_GeometryDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TPrsStd.Handle_TPrsStd_GeometryDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TPrsStd_GeometryDriver self, TPrsStd_GeometryDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TPrsStd.Handle_TPrsStd_GeometryDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TPrsStd_GeometryDriver self, Handle_TPrsStd_GeometryDriver theHandle) -> Handle_TPrsStd_GeometryDriver
        assign(Handle_TPrsStd_GeometryDriver self, TPrsStd_GeometryDriver thePtr) -> Handle_TPrsStd_GeometryDriver
        assign(Handle_TPrsStd_GeometryDriver self, Handle_TPrsStd_GeometryDriver theHandle) -> Handle_TPrsStd_GeometryDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TPrsStd.Handle_TPrsStd_GeometryDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TPrsStd_GeometryDriver self) -> TPrsStd_GeometryDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TPrsStd.Handle_TPrsStd_GeometryDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TPrsStd_GeometryDriver self) -> TPrsStd_GeometryDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TPrsStd.Handle_TPrsStd_GeometryDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TPrsStd_GeometryDriver self) -> TPrsStd_GeometryDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TPrsStd.Handle_TPrsStd_GeometryDriver___ref__(self, *args)


    def __hash__(self):
        return _TPrsStd.Handle_TPrsStd_GeometryDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TPrsStd.Handle_TPrsStd_GeometryDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TPrsStd.new_Handle_TPrsStd_GeometryDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TPrsStd.Handle_TPrsStd_GeometryDriver_DownCast)
    __swig_destroy__ = _TPrsStd.delete_Handle_TPrsStd_GeometryDriver

    def Update(self, *args):
        """
        Update(Handle_TPrsStd_GeometryDriver self, TDF_Label aLabel, Handle_AIS_InteractiveObject anAISObject) -> Standard_Boolean

        Build the AISObject (if null) or update it.
        No compute is done.
        Returns <True> if informations was found
        and AISObject updated.

        :type aLabel: OCC.wrapper.TDF.TDF_Label
        :type anAISObject: OCC.wrapper.AIS.Handle_AIS_InteractiveObject
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_GeometryDriver_Update(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TPrsStd_GeometryDriver self) -> char const *

        :rtype: const char *

        """
        return _TPrsStd.Handle_TPrsStd_GeometryDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TPrsStd.Handle_TPrsStd_GeometryDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TPrsStd.Handle_TPrsStd_GeometryDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TPrsStd_GeometryDriver self)

        Memory deallocator for transient classes


        """
        return _TPrsStd.Handle_TPrsStd_GeometryDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TPrsStd_GeometryDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TPrsStd_GeometryDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_GeometryDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TPrsStd_GeometryDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TPrsStd_GeometryDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TPrsStd.Handle_TPrsStd_GeometryDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TPrsStd_GeometryDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TPrsStd.Handle_TPrsStd_GeometryDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TPrsStd_GeometryDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TPrsStd.Handle_TPrsStd_GeometryDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TPrsStd_GeometryDriver self)

        Increments the reference counter of this object


        """
        return _TPrsStd.Handle_TPrsStd_GeometryDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TPrsStd_GeometryDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TPrsStd.Handle_TPrsStd_GeometryDriver_DecrementRefCounter(self, *args)

Handle_TPrsStd_GeometryDriver_swigregister = _TPrsStd.Handle_TPrsStd_GeometryDriver_swigregister
Handle_TPrsStd_GeometryDriver_swigregister(Handle_TPrsStd_GeometryDriver)

def Handle_TPrsStd_GeometryDriver_DownCast(thing):
    return _TPrsStd.Handle_TPrsStd_GeometryDriver_DownCast(thing)
Handle_TPrsStd_GeometryDriver_DownCast = _TPrsStd.Handle_TPrsStd_GeometryDriver_DownCast



