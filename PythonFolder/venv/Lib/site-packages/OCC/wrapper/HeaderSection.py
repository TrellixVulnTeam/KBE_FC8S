# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_HeaderSection')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_HeaderSection')
    _HeaderSection = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_HeaderSection', [dirname(__file__)])
        except ImportError:
            import _HeaderSection
            return _HeaderSection
        try:
            _mod = imp.load_module('_HeaderSection', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _HeaderSection = swig_import_helper()
    del swig_import_helper
else:
    import _HeaderSection
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _HeaderSection.delete_SwigPyIterator

    def value(self):
        return _HeaderSection.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _HeaderSection.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _HeaderSection.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _HeaderSection.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _HeaderSection.SwigPyIterator_equal(self, x)

    def copy(self):
        return _HeaderSection.SwigPyIterator_copy(self)

    def next(self):
        return _HeaderSection.SwigPyIterator_next(self)

    def __next__(self):
        return _HeaderSection.SwigPyIterator___next__(self)

    def previous(self):
        return _HeaderSection.SwigPyIterator_previous(self)

    def advance(self, n):
        return _HeaderSection.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _HeaderSection.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _HeaderSection.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _HeaderSection.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _HeaderSection.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _HeaderSection.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _HeaderSection.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _HeaderSection.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _HeaderSection.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_HeaderSection.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _HeaderSection.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _HeaderSection.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _HeaderSection.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _HeaderSection.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _HeaderSection.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _HeaderSection.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _HeaderSection.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_HeaderSection.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _HeaderSection.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _HeaderSection.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _HeaderSection.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _HeaderSection.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _HeaderSection.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _HeaderSection.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _HeaderSection.ptr_to_number(item)
ptr_to_number = _HeaderSection.ptr_to_number

def HashCode(*args):
    return _HeaderSection.HashCode(*args)
HashCode = _HeaderSection.HashCode

def ptr_equal(a, b):
    return _HeaderSection.ptr_equal(a, b)
ptr_equal = _HeaderSection.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepData
else:
    import StepData
del _swig_python_version_info
class HeaderSection_FileDescription(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_HeaderSection_FileDescription
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_HeaderSection_FileDescription(self) 
            return h


    def __init__(self, *args):
        """
        __init__(HeaderSection_FileDescription self) -> HeaderSection_FileDescription

        Returns a FileDescription


        """
        this = _HeaderSection.new_HeaderSection_FileDescription(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(HeaderSection_FileDescription self, Handle_Interface_HArray1OfHAsciiString aDescription, Handle_TCollection_HAsciiString aImplementationLevel)

        :type aDescription: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString
        :type aImplementationLevel: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _HeaderSection.HeaderSection_FileDescription_Init(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(HeaderSection_FileDescription self, Handle_Interface_HArray1OfHAsciiString aDescription)

        :type aDescription: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString

        """
        return _HeaderSection.HeaderSection_FileDescription_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(HeaderSection_FileDescription self) -> Handle_Interface_HArray1OfHAsciiString

        :rtype: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString

        """
        return _HeaderSection.HeaderSection_FileDescription_Description(self, *args)


    def DescriptionValue(self, *args):
        """
        DescriptionValue(HeaderSection_FileDescription self, Standard_Integer const num) -> Handle_TCollection_HAsciiString

        :type num: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _HeaderSection.HeaderSection_FileDescription_DescriptionValue(self, *args)


    def NbDescription(self, *args):
        """
        NbDescription(HeaderSection_FileDescription self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HeaderSection.HeaderSection_FileDescription_NbDescription(self, *args)


    def SetImplementationLevel(self, *args):
        """
        SetImplementationLevel(HeaderSection_FileDescription self, Handle_TCollection_HAsciiString aImplementationLevel)

        :type aImplementationLevel: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _HeaderSection.HeaderSection_FileDescription_SetImplementationLevel(self, *args)


    def ImplementationLevel(self, *args):
        """
        ImplementationLevel(HeaderSection_FileDescription self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _HeaderSection.HeaderSection_FileDescription_ImplementationLevel(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _HeaderSection.HeaderSection_FileDescription_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _HeaderSection.HeaderSection_FileDescription_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HeaderSection.HeaderSection_FileDescription_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _HeaderSection.delete_HeaderSection_FileDescription
HeaderSection_FileDescription_swigregister = _HeaderSection.HeaderSection_FileDescription_swigregister
HeaderSection_FileDescription_swigregister(HeaderSection_FileDescription)

def HeaderSection_FileDescription_get_type_name(*args):
    """
    HeaderSection_FileDescription_get_type_name() -> char const *

    :rtype: const char *

    """
    return _HeaderSection.HeaderSection_FileDescription_get_type_name(*args)

def HeaderSection_FileDescription_get_type_descriptor(*args):
    """
    HeaderSection_FileDescription_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _HeaderSection.HeaderSection_FileDescription_get_type_descriptor(*args)

class HeaderSection_Protocol(StepData.StepData_Protocol):
    """
    Protocol for HeaderSection Entities
    It requires HeaderSection as a Resource
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_HeaderSection_Protocol
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_HeaderSection_Protocol(self) 
            return h


    def __init__(self, *args):
        """
        __init__(HeaderSection_Protocol self) -> HeaderSection_Protocol

        Protocol for HeaderSection Entities
        It requires HeaderSection as a Resource
        """
        this = _HeaderSection.new_HeaderSection_Protocol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def TypeNumber(self, *args):
        """
        TypeNumber(HeaderSection_Protocol self, Handle_Standard_Type atype) -> Standard_Integer

        Returns a Case Number for each of the HeaderSection Entities

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HeaderSection.HeaderSection_Protocol_TypeNumber(self, *args)


    def SchemaName(self, *args):
        """
        SchemaName(HeaderSection_Protocol self) -> Standard_CString

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _HeaderSection.HeaderSection_Protocol_SchemaName(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _HeaderSection.HeaderSection_Protocol_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _HeaderSection.HeaderSection_Protocol_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HeaderSection.HeaderSection_Protocol_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _HeaderSection.delete_HeaderSection_Protocol
HeaderSection_Protocol_swigregister = _HeaderSection.HeaderSection_Protocol_swigregister
HeaderSection_Protocol_swigregister(HeaderSection_Protocol)

def HeaderSection_Protocol_get_type_name(*args):
    """
    HeaderSection_Protocol_get_type_name() -> char const *

    :rtype: const char *

    """
    return _HeaderSection.HeaderSection_Protocol_get_type_name(*args)

def HeaderSection_Protocol_get_type_descriptor(*args):
    """
    HeaderSection_Protocol_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _HeaderSection.HeaderSection_Protocol_get_type_descriptor(*args)

class HeaderSection_FileName(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_HeaderSection_FileName
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_HeaderSection_FileName(self) 
            return h


    def __init__(self, *args):
        """
        __init__(HeaderSection_FileName self) -> HeaderSection_FileName

        Returns a FileName


        """
        this = _HeaderSection.new_HeaderSection_FileName(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(HeaderSection_FileName self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aTimeStamp, Handle_Interface_HArray1OfHAsciiString aAuthor, Handle_Interface_HArray1OfHAsciiString aOrganization, Handle_TCollection_HAsciiString aPreprocessorVersion, Handle_TCollection_HAsciiString aOriginatingSystem, Handle_TCollection_HAsciiString aAuthorisation)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aTimeStamp: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aAuthor: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString
        :type aOrganization: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString
        :type aPreprocessorVersion: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aOriginatingSystem: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aAuthorisation: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _HeaderSection.HeaderSection_FileName_Init(self, *args)


    def SetName(self, *args):
        """
        SetName(HeaderSection_FileName self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _HeaderSection.HeaderSection_FileName_SetName(self, *args)


    def Name(self, *args):
        """
        Name(HeaderSection_FileName self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _HeaderSection.HeaderSection_FileName_Name(self, *args)


    def SetTimeStamp(self, *args):
        """
        SetTimeStamp(HeaderSection_FileName self, Handle_TCollection_HAsciiString aTimeStamp)

        :type aTimeStamp: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _HeaderSection.HeaderSection_FileName_SetTimeStamp(self, *args)


    def TimeStamp(self, *args):
        """
        TimeStamp(HeaderSection_FileName self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _HeaderSection.HeaderSection_FileName_TimeStamp(self, *args)


    def SetAuthor(self, *args):
        """
        SetAuthor(HeaderSection_FileName self, Handle_Interface_HArray1OfHAsciiString aAuthor)

        :type aAuthor: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString

        """
        return _HeaderSection.HeaderSection_FileName_SetAuthor(self, *args)


    def Author(self, *args):
        """
        Author(HeaderSection_FileName self) -> Handle_Interface_HArray1OfHAsciiString

        :rtype: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString

        """
        return _HeaderSection.HeaderSection_FileName_Author(self, *args)


    def AuthorValue(self, *args):
        """
        AuthorValue(HeaderSection_FileName self, Standard_Integer const num) -> Handle_TCollection_HAsciiString

        :type num: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _HeaderSection.HeaderSection_FileName_AuthorValue(self, *args)


    def NbAuthor(self, *args):
        """
        NbAuthor(HeaderSection_FileName self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HeaderSection.HeaderSection_FileName_NbAuthor(self, *args)


    def SetOrganization(self, *args):
        """
        SetOrganization(HeaderSection_FileName self, Handle_Interface_HArray1OfHAsciiString aOrganization)

        :type aOrganization: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString

        """
        return _HeaderSection.HeaderSection_FileName_SetOrganization(self, *args)


    def Organization(self, *args):
        """
        Organization(HeaderSection_FileName self) -> Handle_Interface_HArray1OfHAsciiString

        :rtype: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString

        """
        return _HeaderSection.HeaderSection_FileName_Organization(self, *args)


    def OrganizationValue(self, *args):
        """
        OrganizationValue(HeaderSection_FileName self, Standard_Integer const num) -> Handle_TCollection_HAsciiString

        :type num: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _HeaderSection.HeaderSection_FileName_OrganizationValue(self, *args)


    def NbOrganization(self, *args):
        """
        NbOrganization(HeaderSection_FileName self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HeaderSection.HeaderSection_FileName_NbOrganization(self, *args)


    def SetPreprocessorVersion(self, *args):
        """
        SetPreprocessorVersion(HeaderSection_FileName self, Handle_TCollection_HAsciiString aPreprocessorVersion)

        :type aPreprocessorVersion: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _HeaderSection.HeaderSection_FileName_SetPreprocessorVersion(self, *args)


    def PreprocessorVersion(self, *args):
        """
        PreprocessorVersion(HeaderSection_FileName self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _HeaderSection.HeaderSection_FileName_PreprocessorVersion(self, *args)


    def SetOriginatingSystem(self, *args):
        """
        SetOriginatingSystem(HeaderSection_FileName self, Handle_TCollection_HAsciiString aOriginatingSystem)

        :type aOriginatingSystem: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _HeaderSection.HeaderSection_FileName_SetOriginatingSystem(self, *args)


    def OriginatingSystem(self, *args):
        """
        OriginatingSystem(HeaderSection_FileName self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _HeaderSection.HeaderSection_FileName_OriginatingSystem(self, *args)


    def SetAuthorisation(self, *args):
        """
        SetAuthorisation(HeaderSection_FileName self, Handle_TCollection_HAsciiString aAuthorisation)

        :type aAuthorisation: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _HeaderSection.HeaderSection_FileName_SetAuthorisation(self, *args)


    def Authorisation(self, *args):
        """
        Authorisation(HeaderSection_FileName self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _HeaderSection.HeaderSection_FileName_Authorisation(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _HeaderSection.HeaderSection_FileName_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _HeaderSection.HeaderSection_FileName_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HeaderSection.HeaderSection_FileName_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _HeaderSection.delete_HeaderSection_FileName
HeaderSection_FileName_swigregister = _HeaderSection.HeaderSection_FileName_swigregister
HeaderSection_FileName_swigregister(HeaderSection_FileName)

def HeaderSection_FileName_get_type_name(*args):
    """
    HeaderSection_FileName_get_type_name() -> char const *

    :rtype: const char *

    """
    return _HeaderSection.HeaderSection_FileName_get_type_name(*args)

def HeaderSection_FileName_get_type_descriptor(*args):
    """
    HeaderSection_FileName_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _HeaderSection.HeaderSection_FileName_get_type_descriptor(*args)

class Handle_HeaderSection_FileName(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_HeaderSection_FileName self)

        Nullify the handle


        """
        return _HeaderSection.Handle_HeaderSection_FileName_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_HeaderSection_FileName self) -> bool

        Check for being null

        :rtype: bool

        """
        return _HeaderSection.Handle_HeaderSection_FileName_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_HeaderSection_FileName self, HeaderSection_FileName thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _HeaderSection.Handle_HeaderSection_FileName_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_HeaderSection_FileName self, Handle_HeaderSection_FileName theHandle) -> Handle_HeaderSection_FileName
        assign(Handle_HeaderSection_FileName self, HeaderSection_FileName thePtr) -> Handle_HeaderSection_FileName
        assign(Handle_HeaderSection_FileName self, Handle_HeaderSection_FileName theHandle) -> Handle_HeaderSection_FileName

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _HeaderSection.Handle_HeaderSection_FileName_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_HeaderSection_FileName self) -> HeaderSection_FileName

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _HeaderSection.Handle_HeaderSection_FileName_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_HeaderSection_FileName self) -> HeaderSection_FileName

        Member access operator (note non-const)

        :rtype: T *

        """
        return _HeaderSection.Handle_HeaderSection_FileName___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_HeaderSection_FileName self) -> HeaderSection_FileName

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _HeaderSection.Handle_HeaderSection_FileName___ref__(self, *args)


    def __hash__(self):
        return _HeaderSection.Handle_HeaderSection_FileName___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _HeaderSection.Handle_HeaderSection_FileName___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _HeaderSection.new_Handle_HeaderSection_FileName(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_HeaderSection.Handle_HeaderSection_FileName_DownCast)
    __swig_destroy__ = _HeaderSection.delete_Handle_HeaderSection_FileName

    def Init(self, *args):
        """
        Init(Handle_HeaderSection_FileName self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aTimeStamp, Handle_Interface_HArray1OfHAsciiString aAuthor, Handle_Interface_HArray1OfHAsciiString aOrganization, Handle_TCollection_HAsciiString aPreprocessorVersion, Handle_TCollection_HAsciiString aOriginatingSystem, Handle_TCollection_HAsciiString aAuthorisation)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aTimeStamp: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aAuthor: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString
        :type aOrganization: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString
        :type aPreprocessorVersion: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aOriginatingSystem: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aAuthorisation: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _HeaderSection.Handle_HeaderSection_FileName_Init(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_HeaderSection_FileName self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _HeaderSection.Handle_HeaderSection_FileName_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_HeaderSection_FileName self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _HeaderSection.Handle_HeaderSection_FileName_Name(self, *args)


    def SetTimeStamp(self, *args):
        """
        SetTimeStamp(Handle_HeaderSection_FileName self, Handle_TCollection_HAsciiString aTimeStamp)

        :type aTimeStamp: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _HeaderSection.Handle_HeaderSection_FileName_SetTimeStamp(self, *args)


    def TimeStamp(self, *args):
        """
        TimeStamp(Handle_HeaderSection_FileName self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _HeaderSection.Handle_HeaderSection_FileName_TimeStamp(self, *args)


    def SetAuthor(self, *args):
        """
        SetAuthor(Handle_HeaderSection_FileName self, Handle_Interface_HArray1OfHAsciiString aAuthor)

        :type aAuthor: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString

        """
        return _HeaderSection.Handle_HeaderSection_FileName_SetAuthor(self, *args)


    def Author(self, *args):
        """
        Author(Handle_HeaderSection_FileName self) -> Handle_Interface_HArray1OfHAsciiString

        :rtype: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString

        """
        return _HeaderSection.Handle_HeaderSection_FileName_Author(self, *args)


    def AuthorValue(self, *args):
        """
        AuthorValue(Handle_HeaderSection_FileName self, Standard_Integer const num) -> Handle_TCollection_HAsciiString

        :type num: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _HeaderSection.Handle_HeaderSection_FileName_AuthorValue(self, *args)


    def NbAuthor(self, *args):
        """
        NbAuthor(Handle_HeaderSection_FileName self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HeaderSection.Handle_HeaderSection_FileName_NbAuthor(self, *args)


    def SetOrganization(self, *args):
        """
        SetOrganization(Handle_HeaderSection_FileName self, Handle_Interface_HArray1OfHAsciiString aOrganization)

        :type aOrganization: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString

        """
        return _HeaderSection.Handle_HeaderSection_FileName_SetOrganization(self, *args)


    def Organization(self, *args):
        """
        Organization(Handle_HeaderSection_FileName self) -> Handle_Interface_HArray1OfHAsciiString

        :rtype: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString

        """
        return _HeaderSection.Handle_HeaderSection_FileName_Organization(self, *args)


    def OrganizationValue(self, *args):
        """
        OrganizationValue(Handle_HeaderSection_FileName self, Standard_Integer const num) -> Handle_TCollection_HAsciiString

        :type num: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _HeaderSection.Handle_HeaderSection_FileName_OrganizationValue(self, *args)


    def NbOrganization(self, *args):
        """
        NbOrganization(Handle_HeaderSection_FileName self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HeaderSection.Handle_HeaderSection_FileName_NbOrganization(self, *args)


    def SetPreprocessorVersion(self, *args):
        """
        SetPreprocessorVersion(Handle_HeaderSection_FileName self, Handle_TCollection_HAsciiString aPreprocessorVersion)

        :type aPreprocessorVersion: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _HeaderSection.Handle_HeaderSection_FileName_SetPreprocessorVersion(self, *args)


    def PreprocessorVersion(self, *args):
        """
        PreprocessorVersion(Handle_HeaderSection_FileName self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _HeaderSection.Handle_HeaderSection_FileName_PreprocessorVersion(self, *args)


    def SetOriginatingSystem(self, *args):
        """
        SetOriginatingSystem(Handle_HeaderSection_FileName self, Handle_TCollection_HAsciiString aOriginatingSystem)

        :type aOriginatingSystem: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _HeaderSection.Handle_HeaderSection_FileName_SetOriginatingSystem(self, *args)


    def OriginatingSystem(self, *args):
        """
        OriginatingSystem(Handle_HeaderSection_FileName self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _HeaderSection.Handle_HeaderSection_FileName_OriginatingSystem(self, *args)


    def SetAuthorisation(self, *args):
        """
        SetAuthorisation(Handle_HeaderSection_FileName self, Handle_TCollection_HAsciiString aAuthorisation)

        :type aAuthorisation: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _HeaderSection.Handle_HeaderSection_FileName_SetAuthorisation(self, *args)


    def Authorisation(self, *args):
        """
        Authorisation(Handle_HeaderSection_FileName self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _HeaderSection.Handle_HeaderSection_FileName_Authorisation(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_HeaderSection_FileName self) -> char const *

        :rtype: const char *

        """
        return _HeaderSection.Handle_HeaderSection_FileName_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HeaderSection.Handle_HeaderSection_FileName_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HeaderSection.Handle_HeaderSection_FileName_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_HeaderSection_FileName self)

        Memory deallocator for transient classes


        """
        return _HeaderSection.Handle_HeaderSection_FileName_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_HeaderSection_FileName self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_HeaderSection_FileName self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HeaderSection.Handle_HeaderSection_FileName_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_HeaderSection_FileName self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_HeaderSection_FileName self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HeaderSection.Handle_HeaderSection_FileName_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_HeaderSection_FileName self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _HeaderSection.Handle_HeaderSection_FileName_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_HeaderSection_FileName self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HeaderSection.Handle_HeaderSection_FileName_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_HeaderSection_FileName self)

        Increments the reference counter of this object


        """
        return _HeaderSection.Handle_HeaderSection_FileName_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_HeaderSection_FileName self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HeaderSection.Handle_HeaderSection_FileName_DecrementRefCounter(self, *args)

Handle_HeaderSection_FileName_swigregister = _HeaderSection.Handle_HeaderSection_FileName_swigregister
Handle_HeaderSection_FileName_swigregister(Handle_HeaderSection_FileName)

def Handle_HeaderSection_FileName_DownCast(thing):
    return _HeaderSection.Handle_HeaderSection_FileName_DownCast(thing)
Handle_HeaderSection_FileName_DownCast = _HeaderSection.Handle_HeaderSection_FileName_DownCast

class Handle_HeaderSection_FileDescription(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_HeaderSection_FileDescription self)

        Nullify the handle


        """
        return _HeaderSection.Handle_HeaderSection_FileDescription_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_HeaderSection_FileDescription self) -> bool

        Check for being null

        :rtype: bool

        """
        return _HeaderSection.Handle_HeaderSection_FileDescription_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_HeaderSection_FileDescription self, HeaderSection_FileDescription thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _HeaderSection.Handle_HeaderSection_FileDescription_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_HeaderSection_FileDescription self, Handle_HeaderSection_FileDescription theHandle) -> Handle_HeaderSection_FileDescription
        assign(Handle_HeaderSection_FileDescription self, HeaderSection_FileDescription thePtr) -> Handle_HeaderSection_FileDescription
        assign(Handle_HeaderSection_FileDescription self, Handle_HeaderSection_FileDescription theHandle) -> Handle_HeaderSection_FileDescription

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _HeaderSection.Handle_HeaderSection_FileDescription_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_HeaderSection_FileDescription self) -> HeaderSection_FileDescription

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _HeaderSection.Handle_HeaderSection_FileDescription_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_HeaderSection_FileDescription self) -> HeaderSection_FileDescription

        Member access operator (note non-const)

        :rtype: T *

        """
        return _HeaderSection.Handle_HeaderSection_FileDescription___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_HeaderSection_FileDescription self) -> HeaderSection_FileDescription

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _HeaderSection.Handle_HeaderSection_FileDescription___ref__(self, *args)


    def __hash__(self):
        return _HeaderSection.Handle_HeaderSection_FileDescription___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _HeaderSection.Handle_HeaderSection_FileDescription___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _HeaderSection.new_Handle_HeaderSection_FileDescription(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_HeaderSection.Handle_HeaderSection_FileDescription_DownCast)
    __swig_destroy__ = _HeaderSection.delete_Handle_HeaderSection_FileDescription

    def Init(self, *args):
        """
        Init(Handle_HeaderSection_FileDescription self, Handle_Interface_HArray1OfHAsciiString aDescription, Handle_TCollection_HAsciiString aImplementationLevel)

        :type aDescription: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString
        :type aImplementationLevel: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _HeaderSection.Handle_HeaderSection_FileDescription_Init(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_HeaderSection_FileDescription self, Handle_Interface_HArray1OfHAsciiString aDescription)

        :type aDescription: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString

        """
        return _HeaderSection.Handle_HeaderSection_FileDescription_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(Handle_HeaderSection_FileDescription self) -> Handle_Interface_HArray1OfHAsciiString

        :rtype: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString

        """
        return _HeaderSection.Handle_HeaderSection_FileDescription_Description(self, *args)


    def DescriptionValue(self, *args):
        """
        DescriptionValue(Handle_HeaderSection_FileDescription self, Standard_Integer const num) -> Handle_TCollection_HAsciiString

        :type num: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _HeaderSection.Handle_HeaderSection_FileDescription_DescriptionValue(self, *args)


    def NbDescription(self, *args):
        """
        NbDescription(Handle_HeaderSection_FileDescription self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HeaderSection.Handle_HeaderSection_FileDescription_NbDescription(self, *args)


    def SetImplementationLevel(self, *args):
        """
        SetImplementationLevel(Handle_HeaderSection_FileDescription self, Handle_TCollection_HAsciiString aImplementationLevel)

        :type aImplementationLevel: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _HeaderSection.Handle_HeaderSection_FileDescription_SetImplementationLevel(self, *args)


    def ImplementationLevel(self, *args):
        """
        ImplementationLevel(Handle_HeaderSection_FileDescription self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _HeaderSection.Handle_HeaderSection_FileDescription_ImplementationLevel(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_HeaderSection_FileDescription self) -> char const *

        :rtype: const char *

        """
        return _HeaderSection.Handle_HeaderSection_FileDescription_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HeaderSection.Handle_HeaderSection_FileDescription_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HeaderSection.Handle_HeaderSection_FileDescription_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_HeaderSection_FileDescription self)

        Memory deallocator for transient classes


        """
        return _HeaderSection.Handle_HeaderSection_FileDescription_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_HeaderSection_FileDescription self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_HeaderSection_FileDescription self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HeaderSection.Handle_HeaderSection_FileDescription_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_HeaderSection_FileDescription self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_HeaderSection_FileDescription self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HeaderSection.Handle_HeaderSection_FileDescription_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_HeaderSection_FileDescription self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _HeaderSection.Handle_HeaderSection_FileDescription_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_HeaderSection_FileDescription self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HeaderSection.Handle_HeaderSection_FileDescription_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_HeaderSection_FileDescription self)

        Increments the reference counter of this object


        """
        return _HeaderSection.Handle_HeaderSection_FileDescription_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_HeaderSection_FileDescription self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HeaderSection.Handle_HeaderSection_FileDescription_DecrementRefCounter(self, *args)

Handle_HeaderSection_FileDescription_swigregister = _HeaderSection.Handle_HeaderSection_FileDescription_swigregister
Handle_HeaderSection_FileDescription_swigregister(Handle_HeaderSection_FileDescription)

def Handle_HeaderSection_FileDescription_DownCast(thing):
    return _HeaderSection.Handle_HeaderSection_FileDescription_DownCast(thing)
Handle_HeaderSection_FileDescription_DownCast = _HeaderSection.Handle_HeaderSection_FileDescription_DownCast

class HeaderSection_FileSchema(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_HeaderSection_FileSchema
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_HeaderSection_FileSchema(self) 
            return h


    def __init__(self, *args):
        """
        __init__(HeaderSection_FileSchema self) -> HeaderSection_FileSchema

        Returns a FileSchema


        """
        this = _HeaderSection.new_HeaderSection_FileSchema(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(HeaderSection_FileSchema self, Handle_Interface_HArray1OfHAsciiString aSchemaIdentifiers)

        :type aSchemaIdentifiers: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString

        """
        return _HeaderSection.HeaderSection_FileSchema_Init(self, *args)


    def SetSchemaIdentifiers(self, *args):
        """
        SetSchemaIdentifiers(HeaderSection_FileSchema self, Handle_Interface_HArray1OfHAsciiString aSchemaIdentifiers)

        :type aSchemaIdentifiers: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString

        """
        return _HeaderSection.HeaderSection_FileSchema_SetSchemaIdentifiers(self, *args)


    def SchemaIdentifiers(self, *args):
        """
        SchemaIdentifiers(HeaderSection_FileSchema self) -> Handle_Interface_HArray1OfHAsciiString

        :rtype: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString

        """
        return _HeaderSection.HeaderSection_FileSchema_SchemaIdentifiers(self, *args)


    def SchemaIdentifiersValue(self, *args):
        """
        SchemaIdentifiersValue(HeaderSection_FileSchema self, Standard_Integer const num) -> Handle_TCollection_HAsciiString

        :type num: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _HeaderSection.HeaderSection_FileSchema_SchemaIdentifiersValue(self, *args)


    def NbSchemaIdentifiers(self, *args):
        """
        NbSchemaIdentifiers(HeaderSection_FileSchema self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HeaderSection.HeaderSection_FileSchema_NbSchemaIdentifiers(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _HeaderSection.HeaderSection_FileSchema_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _HeaderSection.HeaderSection_FileSchema_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HeaderSection.HeaderSection_FileSchema_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _HeaderSection.delete_HeaderSection_FileSchema
HeaderSection_FileSchema_swigregister = _HeaderSection.HeaderSection_FileSchema_swigregister
HeaderSection_FileSchema_swigregister(HeaderSection_FileSchema)

def HeaderSection_FileSchema_get_type_name(*args):
    """
    HeaderSection_FileSchema_get_type_name() -> char const *

    :rtype: const char *

    """
    return _HeaderSection.HeaderSection_FileSchema_get_type_name(*args)

def HeaderSection_FileSchema_get_type_descriptor(*args):
    """
    HeaderSection_FileSchema_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _HeaderSection.HeaderSection_FileSchema_get_type_descriptor(*args)

class Handle_HeaderSection_Protocol(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_HeaderSection_Protocol self)

        Nullify the handle


        """
        return _HeaderSection.Handle_HeaderSection_Protocol_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_HeaderSection_Protocol self) -> bool

        Check for being null

        :rtype: bool

        """
        return _HeaderSection.Handle_HeaderSection_Protocol_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_HeaderSection_Protocol self, HeaderSection_Protocol thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _HeaderSection.Handle_HeaderSection_Protocol_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_HeaderSection_Protocol self, Handle_HeaderSection_Protocol theHandle) -> Handle_HeaderSection_Protocol
        assign(Handle_HeaderSection_Protocol self, HeaderSection_Protocol thePtr) -> Handle_HeaderSection_Protocol
        assign(Handle_HeaderSection_Protocol self, Handle_HeaderSection_Protocol theHandle) -> Handle_HeaderSection_Protocol

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _HeaderSection.Handle_HeaderSection_Protocol_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_HeaderSection_Protocol self) -> HeaderSection_Protocol

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _HeaderSection.Handle_HeaderSection_Protocol_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_HeaderSection_Protocol self) -> HeaderSection_Protocol

        Member access operator (note non-const)

        :rtype: T *

        """
        return _HeaderSection.Handle_HeaderSection_Protocol___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_HeaderSection_Protocol self) -> HeaderSection_Protocol

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _HeaderSection.Handle_HeaderSection_Protocol___ref__(self, *args)


    def __hash__(self):
        return _HeaderSection.Handle_HeaderSection_Protocol___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _HeaderSection.Handle_HeaderSection_Protocol___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _HeaderSection.new_Handle_HeaderSection_Protocol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_HeaderSection.Handle_HeaderSection_Protocol_DownCast)
    __swig_destroy__ = _HeaderSection.delete_Handle_HeaderSection_Protocol

    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_HeaderSection_Protocol self, Handle_Standard_Type atype) -> Standard_Integer

        Returns a Case Number for each of the HeaderSection Entities

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HeaderSection.Handle_HeaderSection_Protocol_TypeNumber(self, *args)


    def SchemaName(self, *args):
        """
        SchemaName(Handle_HeaderSection_Protocol self) -> Standard_CString

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _HeaderSection.Handle_HeaderSection_Protocol_SchemaName(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_HeaderSection_Protocol self) -> char const *

        :rtype: const char *

        """
        return _HeaderSection.Handle_HeaderSection_Protocol_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HeaderSection.Handle_HeaderSection_Protocol_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HeaderSection.Handle_HeaderSection_Protocol_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NbResources(self, *args):
        """
        NbResources(Handle_HeaderSection_Protocol self) -> Standard_Integer

        Gives the count of Protocols used as Resource (can be zero)
        Here, No resource

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HeaderSection.Handle_HeaderSection_Protocol_NbResources(self, *args)


    def Resource(self, *args):
        """
        Resource(Handle_HeaderSection_Protocol self, Standard_Integer const num) -> Handle_Interface_Protocol

        Returns a Resource, given a rank. Here, none

        :type num: int
        :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _HeaderSection.Handle_HeaderSection_Protocol_Resource(self, *args)


    def CaseNumber(self, *args):
        """
        CaseNumber(Handle_HeaderSection_Protocol self, Handle_Standard_Transient obj) -> Standard_Integer

        Returns a unique positive number for any recognized entity
        Redefined to work by calling both TypeNumber and, for a
        Described Entity (late binding) DescrNumber

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HeaderSection.Handle_HeaderSection_Protocol_CaseNumber(self, *args)


    def NewModel(self, *args):
        """
        NewModel(Handle_HeaderSection_Protocol self) -> Handle_Interface_InterfaceModel

        Creates an empty Model for Step Norm

        :rtype: OCC.wrapper.Interface.Handle_Interface_InterfaceModel

        """
        return _HeaderSection.Handle_HeaderSection_Protocol_NewModel(self, *args)


    def IsSuitableModel(self, *args):
        """
        IsSuitableModel(Handle_HeaderSection_Protocol self, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        Returns True if <model> is a Model of Step Norm

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HeaderSection.Handle_HeaderSection_Protocol_IsSuitableModel(self, *args)


    def UnknownEntity(self, *args):
        """
        UnknownEntity(Handle_HeaderSection_Protocol self) -> Handle_Standard_Transient

        Creates a new Unknown Entity for Step (UndefinedEntity)

        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _HeaderSection.Handle_HeaderSection_Protocol_UnknownEntity(self, *args)


    def IsUnknownEntity(self, *args):
        """
        IsUnknownEntity(Handle_HeaderSection_Protocol self, Handle_Standard_Transient ent) -> Standard_Boolean

        Returns True if <ent> is an Unknown Entity for the Norm, i.e.
        Type UndefinedEntity, status Unknown

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HeaderSection.Handle_HeaderSection_Protocol_IsUnknownEntity(self, *args)


    def DescrNumber(self, *args):
        """
        DescrNumber(Handle_HeaderSection_Protocol self, Handle_StepData_EDescr adescr) -> Standard_Integer

        Returns a unique positive CaseNumber for types described by
        an EDescr (late binding)
        Warning : TypeNumber and DescrNumber must give together a unique
        positive case number for each distinct case, type or descr

        :type adescr: OCC.wrapper.StepData.Handle_StepData_EDescr
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HeaderSection.Handle_HeaderSection_Protocol_DescrNumber(self, *args)


    def AddDescr(self, *args):
        """
        AddDescr(Handle_HeaderSection_Protocol self, Handle_StepData_EDescr adescr, Standard_Integer const CN)

        Records an EDescr with its case number
        Also records its name for an ESDescr (simple type): an ESDescr
        is then used, for case number, or for type name

        :type adescr: OCC.wrapper.StepData.Handle_StepData_EDescr
        :type CN: int

        """
        return _HeaderSection.Handle_HeaderSection_Protocol_AddDescr(self, *args)


    def HasDescr(self, *args):
        """
        HasDescr(Handle_HeaderSection_Protocol self) -> Standard_Boolean

        Tells if a Protocol brings at least one ESDescr, i.e. if it
        defines at least one entity description by ESDescr mechanism

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HeaderSection.Handle_HeaderSection_Protocol_HasDescr(self, *args)


    def Descr(self, *args):
        """
        Descr(Handle_HeaderSection_Protocol self, Standard_Integer const num) -> Handle_StepData_EDescr
        Descr(Handle_HeaderSection_Protocol self, Standard_CString const name, Standard_Boolean const anylevel) -> Handle_StepData_EDescr

        Returns a description according to its name
        <anylevel> True (D) : for <me> and its resources
        <anylevel> False : for <me> only

        :type name: OCC.wrapper.Standard.Standard_CString
        :type anylevel: bool
        :rtype: OCC.wrapper.StepData.Handle_StepData_EDescr

        """
        return _HeaderSection.Handle_HeaderSection_Protocol_Descr(self, *args)


    def ESDescr(self, *args):
        """
        ESDescr(Handle_HeaderSection_Protocol self, Standard_CString const name, Standard_Boolean const anylevel) -> Handle_StepData_ESDescr

        Idem as Descr but cast to simple description

        :type name: OCC.wrapper.Standard.Standard_CString
        :type anylevel: bool
        :rtype: OCC.wrapper.StepData.Handle_StepData_ESDescr

        """
        return _HeaderSection.Handle_HeaderSection_Protocol_ESDescr(self, *args)


    def ECDescr(self, *args):
        """
        ECDescr(Handle_HeaderSection_Protocol self, NCollection_Sequence_TCollection_AsciiString names, Standard_Boolean const anylevel) -> Handle_StepData_ECDescr

        Returns a complex description according to list of names
        <anylevel> True (D) : for <me> and its resources
        <anylevel> False : for <me> only

        :type names: OCC.wrapper.TColStd.TColStd_SequenceOfAsciiString
        :type anylevel: bool
        :rtype: OCC.wrapper.StepData.Handle_StepData_ECDescr

        """
        return _HeaderSection.Handle_HeaderSection_Protocol_ECDescr(self, *args)


    def AddPDescr(self, *args):
        """
        AddPDescr(Handle_HeaderSection_Protocol self, Handle_StepData_PDescr pdescr)

        Records an PDescr

        :type pdescr: OCC.wrapper.StepData.Handle_StepData_PDescr

        """
        return _HeaderSection.Handle_HeaderSection_Protocol_AddPDescr(self, *args)


    def PDescr(self, *args):
        """
        PDescr(Handle_HeaderSection_Protocol self, Standard_CString const name, Standard_Boolean const anylevel) -> Handle_StepData_PDescr

        Returns a parameter description according to its name
        <anylevel> True (D) : for <me> and its resources
        <anylevel> False : for <me> only

        :type name: OCC.wrapper.Standard.Standard_CString
        :type anylevel: bool
        :rtype: OCC.wrapper.StepData.Handle_StepData_PDescr

        """
        return _HeaderSection.Handle_HeaderSection_Protocol_PDescr(self, *args)


    def AddBasicDescr(self, *args):
        """
        AddBasicDescr(Handle_HeaderSection_Protocol self, Handle_StepData_ESDescr esdescr)

        Records an ESDescr, intended to build complex descriptions

        :type esdescr: OCC.wrapper.StepData.Handle_StepData_ESDescr

        """
        return _HeaderSection.Handle_HeaderSection_Protocol_AddBasicDescr(self, *args)


    def BasicDescr(self, *args):
        """
        BasicDescr(Handle_HeaderSection_Protocol self, Standard_CString const name, Standard_Boolean const anylevel) -> Handle_StepData_EDescr

        Returns a basic description according to its name
        <anylevel> True (D) : for <me> and its resources
        <anylevel> False : for <me> only

        :type name: OCC.wrapper.Standard.Standard_CString
        :type anylevel: bool
        :rtype: OCC.wrapper.StepData.Handle_StepData_EDescr

        """
        return _HeaderSection.Handle_HeaderSection_Protocol_BasicDescr(self, *args)


    def Active(self, *args):
        """
        Active(Handle_HeaderSection_Protocol self) -> Handle_Interface_Protocol

        Returns the Active Protocol, if defined (else, returns a
        Null Handle, which means "no defined active protocol")

        :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _HeaderSection.Handle_HeaderSection_Protocol_Active(self, *args)


    def SetActive(self, *args):
        """
        SetActive(Handle_HeaderSection_Protocol self, Handle_Interface_Protocol aprotocol)

        Sets a given Protocol to be the Active one (for the users of
        Active, see just above). Applies to every sub-type of Protocol

        :type aprotocol: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _HeaderSection.Handle_HeaderSection_Protocol_SetActive(self, *args)


    def ClearActive(self, *args):
        """
        ClearActive(Handle_HeaderSection_Protocol self)

        Erases the Active Protocol (hence it becomes undefined)


        """
        return _HeaderSection.Handle_HeaderSection_Protocol_ClearActive(self, *args)


    def IsDynamicType(self, *args):
        """
        IsDynamicType(Handle_HeaderSection_Protocol self, Handle_Standard_Transient obj) -> Standard_Boolean

        Returns True if type of <obj> is that defined from CDL
        This is the default but it may change according implementation

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HeaderSection.Handle_HeaderSection_Protocol_IsDynamicType(self, *args)


    def NbTypes(self, *args):
        """
        NbTypes(Handle_HeaderSection_Protocol self, Handle_Standard_Transient obj) -> Standard_Integer

        Returns the count of DISTINCT types under which an entity may
        be processed. Each one is candidate to be recognized by
        TypeNumber, <obj> is then processed according it
        By default, returns 1 (the DynamicType)

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HeaderSection.Handle_HeaderSection_Protocol_NbTypes(self, *args)


    def Type(self, *args):
        """
        Type(Handle_HeaderSection_Protocol self, Handle_Standard_Transient obj, Standard_Integer const nt=1) -> Handle_Standard_Type

        Returns a type under which <obj> can be recognized and
        processed, according its rank in its definition list (see
        NbTypes).
        By default, returns DynamicType

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :type nt: int
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _HeaderSection.Handle_HeaderSection_Protocol_Type(self, *args)


    def GlobalCheck(self, *args):
        """
        GlobalCheck(Handle_HeaderSection_Protocol self, Interface_Graph G, Handle_Interface_Check ach) -> Standard_Boolean

        Evaluates a Global Check for a model (with its Graph)
        Returns True when done, False if data in model do not apply

        Very specific of each norm, i.e. of each protocol : the
        uppest level Protocol assumes it, it can call GlobalCheck of
        its ressources only if it is necessary

        Default does nothing, can be redefined

        :type G: OCC.wrapper.Interface.Interface_Graph
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HeaderSection.Handle_HeaderSection_Protocol_GlobalCheck(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_HeaderSection_Protocol self)

        Memory deallocator for transient classes


        """
        return _HeaderSection.Handle_HeaderSection_Protocol_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_HeaderSection_Protocol self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_HeaderSection_Protocol self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HeaderSection.Handle_HeaderSection_Protocol_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_HeaderSection_Protocol self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_HeaderSection_Protocol self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HeaderSection.Handle_HeaderSection_Protocol_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_HeaderSection_Protocol self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _HeaderSection.Handle_HeaderSection_Protocol_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_HeaderSection_Protocol self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HeaderSection.Handle_HeaderSection_Protocol_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_HeaderSection_Protocol self)

        Increments the reference counter of this object


        """
        return _HeaderSection.Handle_HeaderSection_Protocol_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_HeaderSection_Protocol self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HeaderSection.Handle_HeaderSection_Protocol_DecrementRefCounter(self, *args)

Handle_HeaderSection_Protocol_swigregister = _HeaderSection.Handle_HeaderSection_Protocol_swigregister
Handle_HeaderSection_Protocol_swigregister(Handle_HeaderSection_Protocol)

def Handle_HeaderSection_Protocol_DownCast(thing):
    return _HeaderSection.Handle_HeaderSection_Protocol_DownCast(thing)
Handle_HeaderSection_Protocol_DownCast = _HeaderSection.Handle_HeaderSection_Protocol_DownCast

class Handle_HeaderSection_FileSchema(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_HeaderSection_FileSchema self)

        Nullify the handle


        """
        return _HeaderSection.Handle_HeaderSection_FileSchema_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_HeaderSection_FileSchema self) -> bool

        Check for being null

        :rtype: bool

        """
        return _HeaderSection.Handle_HeaderSection_FileSchema_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_HeaderSection_FileSchema self, HeaderSection_FileSchema thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _HeaderSection.Handle_HeaderSection_FileSchema_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_HeaderSection_FileSchema self, Handle_HeaderSection_FileSchema theHandle) -> Handle_HeaderSection_FileSchema
        assign(Handle_HeaderSection_FileSchema self, HeaderSection_FileSchema thePtr) -> Handle_HeaderSection_FileSchema
        assign(Handle_HeaderSection_FileSchema self, Handle_HeaderSection_FileSchema theHandle) -> Handle_HeaderSection_FileSchema

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _HeaderSection.Handle_HeaderSection_FileSchema_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_HeaderSection_FileSchema self) -> HeaderSection_FileSchema

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _HeaderSection.Handle_HeaderSection_FileSchema_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_HeaderSection_FileSchema self) -> HeaderSection_FileSchema

        Member access operator (note non-const)

        :rtype: T *

        """
        return _HeaderSection.Handle_HeaderSection_FileSchema___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_HeaderSection_FileSchema self) -> HeaderSection_FileSchema

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _HeaderSection.Handle_HeaderSection_FileSchema___ref__(self, *args)


    def __hash__(self):
        return _HeaderSection.Handle_HeaderSection_FileSchema___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _HeaderSection.Handle_HeaderSection_FileSchema___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _HeaderSection.new_Handle_HeaderSection_FileSchema(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_HeaderSection.Handle_HeaderSection_FileSchema_DownCast)
    __swig_destroy__ = _HeaderSection.delete_Handle_HeaderSection_FileSchema

    def Init(self, *args):
        """
        Init(Handle_HeaderSection_FileSchema self, Handle_Interface_HArray1OfHAsciiString aSchemaIdentifiers)

        :type aSchemaIdentifiers: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString

        """
        return _HeaderSection.Handle_HeaderSection_FileSchema_Init(self, *args)


    def SetSchemaIdentifiers(self, *args):
        """
        SetSchemaIdentifiers(Handle_HeaderSection_FileSchema self, Handle_Interface_HArray1OfHAsciiString aSchemaIdentifiers)

        :type aSchemaIdentifiers: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString

        """
        return _HeaderSection.Handle_HeaderSection_FileSchema_SetSchemaIdentifiers(self, *args)


    def SchemaIdentifiers(self, *args):
        """
        SchemaIdentifiers(Handle_HeaderSection_FileSchema self) -> Handle_Interface_HArray1OfHAsciiString

        :rtype: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString

        """
        return _HeaderSection.Handle_HeaderSection_FileSchema_SchemaIdentifiers(self, *args)


    def SchemaIdentifiersValue(self, *args):
        """
        SchemaIdentifiersValue(Handle_HeaderSection_FileSchema self, Standard_Integer const num) -> Handle_TCollection_HAsciiString

        :type num: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _HeaderSection.Handle_HeaderSection_FileSchema_SchemaIdentifiersValue(self, *args)


    def NbSchemaIdentifiers(self, *args):
        """
        NbSchemaIdentifiers(Handle_HeaderSection_FileSchema self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HeaderSection.Handle_HeaderSection_FileSchema_NbSchemaIdentifiers(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_HeaderSection_FileSchema self) -> char const *

        :rtype: const char *

        """
        return _HeaderSection.Handle_HeaderSection_FileSchema_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HeaderSection.Handle_HeaderSection_FileSchema_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HeaderSection.Handle_HeaderSection_FileSchema_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_HeaderSection_FileSchema self)

        Memory deallocator for transient classes


        """
        return _HeaderSection.Handle_HeaderSection_FileSchema_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_HeaderSection_FileSchema self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_HeaderSection_FileSchema self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HeaderSection.Handle_HeaderSection_FileSchema_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_HeaderSection_FileSchema self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_HeaderSection_FileSchema self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HeaderSection.Handle_HeaderSection_FileSchema_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_HeaderSection_FileSchema self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _HeaderSection.Handle_HeaderSection_FileSchema_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_HeaderSection_FileSchema self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HeaderSection.Handle_HeaderSection_FileSchema_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_HeaderSection_FileSchema self)

        Increments the reference counter of this object


        """
        return _HeaderSection.Handle_HeaderSection_FileSchema_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_HeaderSection_FileSchema self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HeaderSection.Handle_HeaderSection_FileSchema_DecrementRefCounter(self, *args)

Handle_HeaderSection_FileSchema_swigregister = _HeaderSection.Handle_HeaderSection_FileSchema_swigregister
Handle_HeaderSection_FileSchema_swigregister(Handle_HeaderSection_FileSchema)

def Handle_HeaderSection_FileSchema_DownCast(thing):
    return _HeaderSection.Handle_HeaderSection_FileSchema_DownCast(thing)
Handle_HeaderSection_FileSchema_DownCast = _HeaderSection.Handle_HeaderSection_FileSchema_DownCast

class HeaderSection_HeaderRecognizer(StepData.StepData_FileRecognizer):
    """
    Recognizes STEP Standard Header Entities
    (FileName, FileDescription, FileSchema)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_HeaderSection_HeaderRecognizer
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_HeaderSection_HeaderRecognizer(self) 
            return h


    def __init__(self, *args):
        """
        __init__(HeaderSection_HeaderRecognizer self) -> HeaderSection_HeaderRecognizer

        Recognizes STEP Standard Header Entities
        (FileName, FileDescription, FileSchema)
        """
        this = _HeaderSection.new_HeaderSection_HeaderRecognizer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _HeaderSection.HeaderSection_HeaderRecognizer_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _HeaderSection.HeaderSection_HeaderRecognizer_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HeaderSection.HeaderSection_HeaderRecognizer_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _HeaderSection.delete_HeaderSection_HeaderRecognizer
HeaderSection_HeaderRecognizer_swigregister = _HeaderSection.HeaderSection_HeaderRecognizer_swigregister
HeaderSection_HeaderRecognizer_swigregister(HeaderSection_HeaderRecognizer)

def HeaderSection_HeaderRecognizer_get_type_name(*args):
    """
    HeaderSection_HeaderRecognizer_get_type_name() -> char const *

    :rtype: const char *

    """
    return _HeaderSection.HeaderSection_HeaderRecognizer_get_type_name(*args)

def HeaderSection_HeaderRecognizer_get_type_descriptor(*args):
    """
    HeaderSection_HeaderRecognizer_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _HeaderSection.HeaderSection_HeaderRecognizer_get_type_descriptor(*args)

class HeaderSection_(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Protocol(*args):
        """
        Protocol() -> Handle_HeaderSection_Protocol

        creates a Protocol

        :rtype: OCC.wrapper.HeaderSection.Handle_HeaderSection_Protocol

        """
        return _HeaderSection.HeaderSection__Protocol(*args)

    Protocol = staticmethod(Protocol)

    def __init__(self):
        this = _HeaderSection.new_HeaderSection_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _HeaderSection.delete_HeaderSection_
HeaderSection__swigregister = _HeaderSection.HeaderSection__swigregister
HeaderSection__swigregister(HeaderSection_)

def HeaderSection__Protocol(*args):
    """
    HeaderSection__Protocol() -> Handle_HeaderSection_Protocol

    creates a Protocol

    :rtype: OCC.wrapper.HeaderSection.Handle_HeaderSection_Protocol

    """
    return _HeaderSection.HeaderSection__Protocol(*args)

class Handle_HeaderSection_HeaderRecognizer(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_HeaderSection_HeaderRecognizer self)

        Nullify the handle


        """
        return _HeaderSection.Handle_HeaderSection_HeaderRecognizer_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_HeaderSection_HeaderRecognizer self) -> bool

        Check for being null

        :rtype: bool

        """
        return _HeaderSection.Handle_HeaderSection_HeaderRecognizer_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_HeaderSection_HeaderRecognizer self, HeaderSection_HeaderRecognizer thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _HeaderSection.Handle_HeaderSection_HeaderRecognizer_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_HeaderSection_HeaderRecognizer self, Handle_HeaderSection_HeaderRecognizer theHandle) -> Handle_HeaderSection_HeaderRecognizer
        assign(Handle_HeaderSection_HeaderRecognizer self, HeaderSection_HeaderRecognizer thePtr) -> Handle_HeaderSection_HeaderRecognizer
        assign(Handle_HeaderSection_HeaderRecognizer self, Handle_HeaderSection_HeaderRecognizer theHandle) -> Handle_HeaderSection_HeaderRecognizer

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _HeaderSection.Handle_HeaderSection_HeaderRecognizer_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_HeaderSection_HeaderRecognizer self) -> HeaderSection_HeaderRecognizer

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _HeaderSection.Handle_HeaderSection_HeaderRecognizer_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_HeaderSection_HeaderRecognizer self) -> HeaderSection_HeaderRecognizer

        Member access operator (note non-const)

        :rtype: T *

        """
        return _HeaderSection.Handle_HeaderSection_HeaderRecognizer___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_HeaderSection_HeaderRecognizer self) -> HeaderSection_HeaderRecognizer

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _HeaderSection.Handle_HeaderSection_HeaderRecognizer___ref__(self, *args)


    def __hash__(self):
        return _HeaderSection.Handle_HeaderSection_HeaderRecognizer___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _HeaderSection.Handle_HeaderSection_HeaderRecognizer___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _HeaderSection.new_Handle_HeaderSection_HeaderRecognizer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_HeaderSection.Handle_HeaderSection_HeaderRecognizer_DownCast)
    __swig_destroy__ = _HeaderSection.delete_Handle_HeaderSection_HeaderRecognizer

    def get_type_name(self, *args):
        """
        get_type_name(Handle_HeaderSection_HeaderRecognizer self) -> char const *

        :rtype: const char *

        """
        return _HeaderSection.Handle_HeaderSection_HeaderRecognizer_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HeaderSection.Handle_HeaderSection_HeaderRecognizer_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HeaderSection.Handle_HeaderSection_HeaderRecognizer_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Evaluate(self, *args):
        """
        Evaluate(Handle_HeaderSection_HeaderRecognizer self, TCollection_AsciiString akey, Handle_Standard_Transient res) -> Standard_Boolean

        Evaluates if recognition has a result, returns it if yes
        In case of success, Returns True and puts result in "res"
        In case of Failure, simply Returns False
        Works by calling deferred method Eval, and in case of failure,
        looks for Added Recognizers to work

        :type akey: OCC.wrapper.TCollection.TCollection_AsciiString
        :type res: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HeaderSection.Handle_HeaderSection_HeaderRecognizer_Evaluate(self, *args)


    def Result(self, *args):
        """
        Result(Handle_HeaderSection_HeaderRecognizer self) -> Handle_Standard_Transient

        Returns result of last recognition (call of Evaluate)

        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _HeaderSection.Handle_HeaderSection_HeaderRecognizer_Result(self, *args)


    def Add(self, *args):
        """
        Add(Handle_HeaderSection_HeaderRecognizer self, Handle_StepData_FileRecognizer reco)

        Adds a new Recognizer to the Compound, at the end
        Several calls to Add work by adding in the order of calls :
        Hence, when Eval has failed to recognize, Evaluate will call
        Evaluate from the first added Recognizer if there is one,
        and to the second if there is still no result, and so on

        :type reco: OCC.wrapper.StepData.Handle_StepData_FileRecognizer

        """
        return _HeaderSection.Handle_HeaderSection_HeaderRecognizer_Add(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_HeaderSection_HeaderRecognizer self)

        Memory deallocator for transient classes


        """
        return _HeaderSection.Handle_HeaderSection_HeaderRecognizer_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_HeaderSection_HeaderRecognizer self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_HeaderSection_HeaderRecognizer self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HeaderSection.Handle_HeaderSection_HeaderRecognizer_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_HeaderSection_HeaderRecognizer self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_HeaderSection_HeaderRecognizer self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HeaderSection.Handle_HeaderSection_HeaderRecognizer_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_HeaderSection_HeaderRecognizer self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _HeaderSection.Handle_HeaderSection_HeaderRecognizer_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_HeaderSection_HeaderRecognizer self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HeaderSection.Handle_HeaderSection_HeaderRecognizer_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_HeaderSection_HeaderRecognizer self)

        Increments the reference counter of this object


        """
        return _HeaderSection.Handle_HeaderSection_HeaderRecognizer_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_HeaderSection_HeaderRecognizer self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HeaderSection.Handle_HeaderSection_HeaderRecognizer_DecrementRefCounter(self, *args)

Handle_HeaderSection_HeaderRecognizer_swigregister = _HeaderSection.Handle_HeaderSection_HeaderRecognizer_swigregister
Handle_HeaderSection_HeaderRecognizer_swigregister(Handle_HeaderSection_HeaderRecognizer)

def Handle_HeaderSection_HeaderRecognizer_DownCast(thing):
    return _HeaderSection.Handle_HeaderSection_HeaderRecognizer_DownCast(thing)
Handle_HeaderSection_HeaderRecognizer_DownCast = _HeaderSection.Handle_HeaderSection_HeaderRecognizer_DownCast



