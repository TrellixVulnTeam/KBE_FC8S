# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Prs3d')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Prs3d')
    _Prs3d = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Prs3d', [dirname(__file__)])
        except ImportError:
            import _Prs3d
            return _Prs3d
        try:
            _mod = imp.load_module('_Prs3d', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Prs3d = swig_import_helper()
    del swig_import_helper
else:
    import _Prs3d
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Prs3d.delete_SwigPyIterator

    def value(self):
        return _Prs3d.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Prs3d.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Prs3d.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Prs3d.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Prs3d.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Prs3d.SwigPyIterator_copy(self)

    def next(self):
        return _Prs3d.SwigPyIterator_next(self)

    def __next__(self):
        return _Prs3d.SwigPyIterator___next__(self)

    def previous(self):
        return _Prs3d.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Prs3d.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Prs3d.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Prs3d.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Prs3d.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Prs3d.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Prs3d.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Prs3d.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Prs3d.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _Prs3d.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_Prs3d.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _Prs3d.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _Prs3d.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Prs3d.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _Prs3d.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _Prs3d.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _Prs3d.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _Prs3d.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_Prs3d.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _Prs3d.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _Prs3d.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Prs3d.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _Prs3d.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _Prs3d.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _Prs3d.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _Prs3d.ptr_to_number(item)
ptr_to_number = _Prs3d.ptr_to_number

def HashCode(*args):
    return _Prs3d.HashCode(*args)
HashCode = _Prs3d.HashCode

def ptr_equal(a, b):
    return _Prs3d.ptr_equal(a, b)
ptr_equal = _Prs3d.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import HLRAlgo
else:
    import HLRAlgo
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Poly
else:
    import Poly
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TShort
else:
    import TShort
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Graphic3d
else:
    import Graphic3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BVH
else:
    import BVH
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Image
else:
    import Image
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Aspect
else:
    import Aspect
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Font
else:
    import Font
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
Prs3d_VDM_Isolated = _Prs3d.Prs3d_VDM_Isolated
Prs3d_VDM_All = _Prs3d.Prs3d_VDM_All
Prs3d_VDM_Inherited = _Prs3d.Prs3d_VDM_Inherited
Prs3d_TOH_NotSet = _Prs3d.Prs3d_TOH_NotSet
Prs3d_TOH_PolyAlgo = _Prs3d.Prs3d_TOH_PolyAlgo
Prs3d_TOH_Algo = _Prs3d.Prs3d_TOH_Algo
Prs3d_DA_XAxisLength = _Prs3d.Prs3d_DA_XAxisLength
Prs3d_DA_YAxisLength = _Prs3d.Prs3d_DA_YAxisLength
Prs3d_DA_ZAxisLength = _Prs3d.Prs3d_DA_ZAxisLength
Prs3d_DP_ShadingTubeRadiusPercent = _Prs3d.Prs3d_DP_ShadingTubeRadiusPercent
Prs3d_DP_ShadingConeRadiusPercent = _Prs3d.Prs3d_DP_ShadingConeRadiusPercent
Prs3d_DP_ShadingConeLengthPercent = _Prs3d.Prs3d_DP_ShadingConeLengthPercent
Prs3d_DP_ShadingOriginRadiusPercent = _Prs3d.Prs3d_DP_ShadingOriginRadiusPercent
Prs3d_DP_ShadingNumberOfFacettes = _Prs3d.Prs3d_DP_ShadingNumberOfFacettes
Prs3d_DA_XAxis = _Prs3d.Prs3d_DA_XAxis
Prs3d_DA_YAxis = _Prs3d.Prs3d_DA_YAxis
Prs3d_DA_ZAxis = _Prs3d.Prs3d_DA_ZAxis
Prs3d_DA_XYAxis = _Prs3d.Prs3d_DA_XYAxis
Prs3d_DA_YZAxis = _Prs3d.Prs3d_DA_YZAxis
Prs3d_DA_XZAxis = _Prs3d.Prs3d_DA_XZAxis
Prs3d_DA_XYZAxis = _Prs3d.Prs3d_DA_XYZAxis
Prs3d_DM_WireFrame = _Prs3d.Prs3d_DM_WireFrame
Prs3d_DM_Shaded = _Prs3d.Prs3d_DM_Shaded
Prs3d_DP_Origin = _Prs3d.Prs3d_DP_Origin
Prs3d_DP_XAxis = _Prs3d.Prs3d_DP_XAxis
Prs3d_DP_YAxis = _Prs3d.Prs3d_DP_YAxis
Prs3d_DP_ZAxis = _Prs3d.Prs3d_DP_ZAxis
Prs3d_DP_XArrow = _Prs3d.Prs3d_DP_XArrow
Prs3d_DP_YArrow = _Prs3d.Prs3d_DP_YArrow
Prs3d_DP_ZArrow = _Prs3d.Prs3d_DP_ZArrow
Prs3d_DP_XOYAxis = _Prs3d.Prs3d_DP_XOYAxis
Prs3d_DP_YOZAxis = _Prs3d.Prs3d_DP_YOZAxis
Prs3d_DP_XOZAxis = _Prs3d.Prs3d_DP_XOZAxis
Prs3d_DP_None = _Prs3d.Prs3d_DP_None
Prs3d_DAO_Internal = _Prs3d.Prs3d_DAO_Internal
Prs3d_DAO_External = _Prs3d.Prs3d_DAO_External
Prs3d_DAO_Fit = _Prs3d.Prs3d_DAO_Fit
Prs3d_DTHP_Left = _Prs3d.Prs3d_DTHP_Left
Prs3d_DTHP_Right = _Prs3d.Prs3d_DTHP_Right
Prs3d_DTHP_Center = _Prs3d.Prs3d_DTHP_Center
Prs3d_DTHP_Fit = _Prs3d.Prs3d_DTHP_Fit
Prs3d_DTVP_Above = _Prs3d.Prs3d_DTVP_Above
Prs3d_DTVP_Below = _Prs3d.Prs3d_DTVP_Below
Prs3d_DTVP_Center = _Prs3d.Prs3d_DTVP_Center
Prs3d_TypeOfHighlight_None = _Prs3d.Prs3d_TypeOfHighlight_None
Prs3d_TypeOfHighlight_Selected = _Prs3d.Prs3d_TypeOfHighlight_Selected
Prs3d_TypeOfHighlight_Dynamic = _Prs3d.Prs3d_TypeOfHighlight_Dynamic
Prs3d_TypeOfHighlight_LocalSelected = _Prs3d.Prs3d_TypeOfHighlight_LocalSelected
Prs3d_TypeOfHighlight_LocalDynamic = _Prs3d.Prs3d_TypeOfHighlight_LocalDynamic
Prs3d_TypeOfHighlight_SubIntensity = _Prs3d.Prs3d_TypeOfHighlight_SubIntensity
Prs3d_TypeOfHighlight_NB = _Prs3d.Prs3d_TypeOfHighlight_NB
Prs3d_TOLP_Point = _Prs3d.Prs3d_TOLP_Point
Prs3d_TOLP_Segment = _Prs3d.Prs3d_TOLP_Segment
class Prs3d_InvalidAngle(Standard.Standard_RangeError):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Prs3d_InvalidAngle
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Prs3d_InvalidAngle(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Prs3d_InvalidAngle self) -> Prs3d_InvalidAngle
        __init__(Prs3d_InvalidAngle self, Standard_CString const theMessage) -> Prs3d_InvalidAngle

        :type theMessage: OCC.wrapper.Standard.Standard_CString

        """
        this = _Prs3d.new_Prs3d_InvalidAngle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewInstance(*args):
        """
        NewInstance(Standard_CString const theMessage) -> Handle_Prs3d_InvalidAngle

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_InvalidAngle

        """
        return _Prs3d.Prs3d_InvalidAngle_NewInstance(*args)

    NewInstance = staticmethod(NewInstance)

    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Prs3d.Prs3d_InvalidAngle_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Prs3d.Prs3d_InvalidAngle_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Prs3d_InvalidAngle_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Prs3d.delete_Prs3d_InvalidAngle
Prs3d_InvalidAngle_swigregister = _Prs3d.Prs3d_InvalidAngle_swigregister
Prs3d_InvalidAngle_swigregister(Prs3d_InvalidAngle)

def Prs3d_InvalidAngle_NewInstance(*args):
    """
    Prs3d_InvalidAngle_NewInstance(Standard_CString const theMessage) -> Handle_Prs3d_InvalidAngle

    :type theMessage: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_InvalidAngle

    """
    return _Prs3d.Prs3d_InvalidAngle_NewInstance(*args)

def Prs3d_InvalidAngle_get_type_name(*args):
    """
    Prs3d_InvalidAngle_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Prs3d.Prs3d_InvalidAngle_get_type_name(*args)

def Prs3d_InvalidAngle_get_type_descriptor(*args):
    """
    Prs3d_InvalidAngle_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Prs3d.Prs3d_InvalidAngle_get_type_descriptor(*args)

class Prs3d_Presentation(Graphic3d.Graphic3d_Structure):
    """
    Defines a presentation object which can be displayed,
    highlighted or erased.
    The presentation object stores the results of the
    presentation algorithms as defined in the StdPrs
    classes and the Prs3d classes inheriting Prs3d_Root.
    This presentation object is used to give display
    attributes defined at this level to
    ApplicationInteractiveServices classes at the level above.
    A presentation object is attached to a given Viewer.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Prs3d_Presentation
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Prs3d_Presentation(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Prs3d_Presentation self, Handle_Graphic3d_StructureManager theStructManager, Standard_Boolean const theToInit) -> Prs3d_Presentation
        __init__(Prs3d_Presentation self, Handle_Graphic3d_StructureManager theStructManager, Handle_Prs3d_Presentation thePrs) -> Prs3d_Presentation

        Constructs a presentation object.

        :type theStructManager: OCC.wrapper.Graphic3d.Handle_Graphic3d_StructureManager
        :type thePrs: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation

        """
        this = _Prs3d.new_Prs3d_Presentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Compute(self, *args):
        """
        Compute(Prs3d_Presentation self, Handle_Graphic3d_DataStructureManager aProjector) -> Handle_Graphic3d_Structure
        Compute(Prs3d_Presentation self, Handle_Graphic3d_DataStructureManager theProjector, Handle_Geom_Transformation theTrsf) -> Handle_Graphic3d_Structure
        Compute(Prs3d_Presentation self, Handle_Graphic3d_DataStructureManager aProjector, Handle_Graphic3d_Structure aStructure)
        Compute(Prs3d_Presentation self, Handle_Graphic3d_DataStructureManager theProjector, Handle_Geom_Transformation theTrsf, Handle_Graphic3d_Structure theStructure)

        Returns the new Structure defined for the new visualization

        :type theProjector: OCC.wrapper.Graphic3d.Handle_Graphic3d_DataStructureManager
        :type theTrsf: OCC.wrapper.Geom.Handle_Geom_Transformation
        :type theStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        return _Prs3d.Prs3d_Presentation_Compute(self, *args)


    def Connect(self, *args):
        """
        Connect(Prs3d_Presentation self, Handle_Prs3d_Presentation aPresentation)

        :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation

        """
        return _Prs3d.Prs3d_Presentation_Connect(self, *args)


    def Remove(self, *args):
        """
        Remove(Prs3d_Presentation self, Handle_Prs3d_Presentation aPresentation)

        :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation

        """
        return _Prs3d.Prs3d_Presentation_Remove(self, *args)


    def RemoveAll(self, *args):
        """RemoveAll(Prs3d_Presentation self)"""
        return _Prs3d.Prs3d_Presentation_RemoveAll(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Prs3d.Prs3d_Presentation_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Prs3d.Prs3d_Presentation_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Prs3d_Presentation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Prs3d.delete_Prs3d_Presentation
Prs3d_Presentation_swigregister = _Prs3d.Prs3d_Presentation_swigregister
Prs3d_Presentation_swigregister(Prs3d_Presentation)

def Prs3d_Presentation_get_type_name(*args):
    """
    Prs3d_Presentation_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Prs3d.Prs3d_Presentation_get_type_name(*args)

def Prs3d_Presentation_get_type_descriptor(*args):
    """
    Prs3d_Presentation_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Prs3d.Prs3d_Presentation_get_type_descriptor(*args)

class Prs3d_BasicAspect(Standard.Standard_Transient):
    """
    All basic Prs3d_xxxAspect must inherits from this class
    The aspect classes qualifies how to represent a given kind of object.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Prs3d_BasicAspect
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Prs3d_BasicAspect(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Prs3d.Prs3d_BasicAspect_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Prs3d.Prs3d_BasicAspect_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Prs3d_BasicAspect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self):
        """
        All basic Prs3d_xxxAspect must inherits from this class
        The aspect classes qualifies how to represent a given kind of object.
        """
        this = _Prs3d.new_Prs3d_BasicAspect()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle



    __swig_destroy__ = _Prs3d.delete_Prs3d_BasicAspect
Prs3d_BasicAspect_swigregister = _Prs3d.Prs3d_BasicAspect_swigregister
Prs3d_BasicAspect_swigregister(Prs3d_BasicAspect)

def Prs3d_BasicAspect_get_type_name(*args):
    """
    Prs3d_BasicAspect_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Prs3d.Prs3d_BasicAspect_get_type_name(*args)

def Prs3d_BasicAspect_get_type_descriptor(*args):
    """
    Prs3d_BasicAspect_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Prs3d.Prs3d_BasicAspect_get_type_descriptor(*args)

class Prs3d_ArrowAspect(Prs3d_BasicAspect):
    """A framework for displaying arrows in representations of dimensions and relations."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Prs3d_ArrowAspect
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Prs3d_ArrowAspect(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Prs3d.Prs3d_ArrowAspect_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Prs3d.Prs3d_ArrowAspect_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Prs3d_ArrowAspect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Prs3d_ArrowAspect self) -> Prs3d_ArrowAspect
        __init__(Prs3d_ArrowAspect self, Standard_Real const anAngle, Standard_Real const aLength) -> Prs3d_ArrowAspect
        __init__(Prs3d_ArrowAspect self, Handle_Graphic3d_AspectLine3d theAspect) -> Prs3d_ArrowAspect

        :type theAspect: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectLine3d

        """
        this = _Prs3d.new_Prs3d_ArrowAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetAngle(self, *args):
        """
        SetAngle(Prs3d_ArrowAspect self, Standard_Real const anAngle)

        defines the angle of the arrows.

        :type anAngle: float

        """
        return _Prs3d.Prs3d_ArrowAspect_SetAngle(self, *args)


    def Angle(self, *args):
        """
        Angle(Prs3d_ArrowAspect self) -> Standard_Real

        returns the current value of the angle used when drawing an arrow.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Prs3d_ArrowAspect_Angle(self, *args)


    def SetLength(self, *args):
        """
        SetLength(Prs3d_ArrowAspect self, Standard_Real const theLength)

        Defines the length of the arrows.

        :type theLength: float

        """
        return _Prs3d.Prs3d_ArrowAspect_SetLength(self, *args)


    def Length(self, *args):
        """
        Length(Prs3d_ArrowAspect self) -> Standard_Real

        Returns the current value of the length used when drawing an arrow.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Prs3d_ArrowAspect_Length(self, *args)


    def SetColor(self, *args):
        """
        SetColor(Prs3d_ArrowAspect self, Quantity_Color theColor)

        :type theColor: OCC.wrapper.Quantity.Quantity_Color

        """
        return _Prs3d.Prs3d_ArrowAspect_SetColor(self, *args)


    def Aspect(self, *args):
        """
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectLine3d

        """
        res = _Prs3d.Prs3d_ArrowAspect_Aspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetAspect(self, *args):
        """
        SetAspect(Prs3d_ArrowAspect self, Handle_Graphic3d_AspectLine3d theAspect)

        :type theAspect: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectLine3d

        """
        return _Prs3d.Prs3d_ArrowAspect_SetAspect(self, *args)

    __swig_destroy__ = _Prs3d.delete_Prs3d_ArrowAspect
Prs3d_ArrowAspect_swigregister = _Prs3d.Prs3d_ArrowAspect_swigregister
Prs3d_ArrowAspect_swigregister(Prs3d_ArrowAspect)

def Prs3d_ArrowAspect_get_type_name(*args):
    """
    Prs3d_ArrowAspect_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Prs3d.Prs3d_ArrowAspect_get_type_name(*args)

def Prs3d_ArrowAspect_get_type_descriptor(*args):
    """
    Prs3d_ArrowAspect_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Prs3d.Prs3d_ArrowAspect_get_type_descriptor(*args)

class Prs3d_LineAspect(Prs3d_BasicAspect):
    """
    A framework for defining how a line will be displayed
    in a presentation. Aspects of line display include
    width, color and type of line.
    The definition set by this class is then passed to the
    attribute manager Prs3d_Drawer.
    Any object which requires a value for line aspect as
    an argument may then be given the attribute manager
    as a substitute argument in the form of a field such as myDrawer for example.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Prs3d_LineAspect
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Prs3d_LineAspect(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Prs3d.Prs3d_LineAspect_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Prs3d.Prs3d_LineAspect_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Prs3d_LineAspect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Prs3d_LineAspect self, Quantity_Color theColor, Aspect_TypeOfLine const theType, Standard_Real const theWidth) -> Prs3d_LineAspect
        __init__(Prs3d_LineAspect self, Handle_Graphic3d_AspectLine3d theAspect) -> Prs3d_LineAspect

        :type theAspect: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectLine3d

        """
        this = _Prs3d.new_Prs3d_LineAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetColor(self, *args):
        """
        SetColor(Prs3d_LineAspect self, Quantity_Color theColor)

        Sets the line color defined at the time of construction.
        Default value: Quantity_NOC_YELLOW

        :type theColor: OCC.wrapper.Quantity.Quantity_Color

        """
        return _Prs3d.Prs3d_LineAspect_SetColor(self, *args)


    def SetTypeOfLine(self, *args):
        """
        SetTypeOfLine(Prs3d_LineAspect self, Aspect_TypeOfLine const theType)

        Sets the type of line defined at the time of construction.
        This could, for example, be solid, dotted or made up of dashes.
        Default value: Aspect_TOL_SOLID

        :type theType: OCC.wrapper.Aspect.Aspect_TypeOfLine

        """
        return _Prs3d.Prs3d_LineAspect_SetTypeOfLine(self, *args)


    def SetWidth(self, *args):
        """
        SetWidth(Prs3d_LineAspect self, Standard_Real const theWidth)

        Sets the line width defined at the time of construction.
        Default value: 1.

        :type theWidth: float

        """
        return _Prs3d.Prs3d_LineAspect_SetWidth(self, *args)


    def Aspect(self, *args):
        """
        Returns the line aspect. This is defined as the set of
        color, type and thickness attributes.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectLine3d

        """
        res = _Prs3d.Prs3d_LineAspect_Aspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetAspect(self, *args):
        """
        SetAspect(Prs3d_LineAspect self, Handle_Graphic3d_AspectLine3d theAspect)

        :type theAspect: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectLine3d

        """
        return _Prs3d.Prs3d_LineAspect_SetAspect(self, *args)

    __swig_destroy__ = _Prs3d.delete_Prs3d_LineAspect
Prs3d_LineAspect_swigregister = _Prs3d.Prs3d_LineAspect_swigregister
Prs3d_LineAspect_swigregister(Prs3d_LineAspect)

def Prs3d_LineAspect_get_type_name(*args):
    """
    Prs3d_LineAspect_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Prs3d.Prs3d_LineAspect_get_type_name(*args)

def Prs3d_LineAspect_get_type_descriptor(*args):
    """
    Prs3d_LineAspect_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Prs3d.Prs3d_LineAspect_get_type_descriptor(*args)

class Prs3d_Drawer(Graphic3d.Graphic3d_PresentationAttributes):
    """
    A graphic attribute manager which governs how
    objects such as color, width, line thickness and deflection are displayed.
    A drawer includes an instance of the Aspect classes with particular default values.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Prs3d_Drawer
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Prs3d_Drawer(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Prs3d.Prs3d_Drawer_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Prs3d.Prs3d_Drawer_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Prs3d_Drawer_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Prs3d_Drawer self) -> Prs3d_Drawer

        Default constructor.


        """
        this = _Prs3d.new_Prs3d_Drawer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetTypeOfDeflection(self, *args):
        """
        SetTypeOfDeflection(Prs3d_Drawer self, Aspect_TypeOfDeflection const theTypeOfDeflection)

        Sets the type of chordal deflection.
        This indicates whether the deflection value is absolute or relative to the size of the object.

        :type theTypeOfDeflection: OCC.wrapper.Aspect.Aspect_TypeOfDeflection

        """
        return _Prs3d.Prs3d_Drawer_SetTypeOfDeflection(self, *args)


    def TypeOfDeflection(self, *args):
        """
        TypeOfDeflection(Prs3d_Drawer self) -> Aspect_TypeOfDeflection

        Returns the type of chordal deflection.
        This indicates whether the deflection value is absolute or relative to the size of the object.

        :rtype: OCC.wrapper.Aspect.Aspect_TypeOfDeflection

        """
        return _Prs3d.Prs3d_Drawer_TypeOfDeflection(self, *args)


    def HasOwnTypeOfDeflection(self, *args):
        """
        HasOwnTypeOfDeflection(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has a type of deflection setting active.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnTypeOfDeflection(self, *args)


    def SetMaximalChordialDeviation(self, *args):
        """
        SetMaximalChordialDeviation(Prs3d_Drawer self, Standard_Real const theChordialDeviation)

        Defines the maximal chordial deviation when drawing any curve.
        Even if the type of deviation is set to TOD_Relative, this value is used by: 
        Prs3d_DeflectionCurve
        Prs3d_WFDeflectionSurface
        Prs3d_WFDeflectionRestrictedFace

        :type theChordialDeviation: float

        """
        return _Prs3d.Prs3d_Drawer_SetMaximalChordialDeviation(self, *args)


    def MaximalChordialDeviation(self, *args):
        """
        MaximalChordialDeviation(Prs3d_Drawer self) -> Standard_Real

        Returns the maximal chordal deviation. The default value is 0.1.
        Drawings of curves or patches are made with respect to an absolute maximal chordal deviation.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Prs3d_Drawer_MaximalChordialDeviation(self, *args)


    def HasOwnMaximalChordialDeviation(self, *args):
        """
        HasOwnMaximalChordialDeviation(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has a maximal chordial deviation setting active.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnMaximalChordialDeviation(self, *args)


    def SetTypeOfHLR(self, *args):
        """
        SetTypeOfHLR(Prs3d_Drawer self, Prs3d_TypeOfHLR const theTypeOfHLR)

        Sets the type of HLR algorithm used by drawer's interactive objects

        :type theTypeOfHLR: OCC.wrapper.Prs3d.Prs3d_TypeOfHLR

        """
        return _Prs3d.Prs3d_Drawer_SetTypeOfHLR(self, *args)


    def TypeOfHLR(self, *args):
        """
        TypeOfHLR(Prs3d_Drawer self) -> Prs3d_TypeOfHLR

        Returns the type of HLR algorithm currently in use.

        :rtype: OCC.wrapper.Prs3d.Prs3d_TypeOfHLR

        """
        return _Prs3d.Prs3d_Drawer_TypeOfHLR(self, *args)


    def HasOwnTypeOfHLR(self, *args):
        """
        HasOwnTypeOfHLR(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the type of HLR is not equal to Prs3d_TOH_NotSet.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnTypeOfHLR(self, *args)


    def SetMaximalParameterValue(self, *args):
        """
        SetMaximalParameterValue(Prs3d_Drawer self, Standard_Real const theValue)

        Defines the maximum value allowed for the first and last
        parameters of an infinite curve.

        :type theValue: float

        """
        return _Prs3d.Prs3d_Drawer_SetMaximalParameterValue(self, *args)


    def MaximalParameterValue(self, *args):
        """
        MaximalParameterValue(Prs3d_Drawer self) -> Standard_Real

        Sets the maximum value allowed for the first and last
        parameters of an infinite curve. By default, this value is 500000.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Prs3d_Drawer_MaximalParameterValue(self, *args)


    def HasOwnMaximalParameterValue(self, *args):
        """
        HasOwnMaximalParameterValue(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has a maximum value allowed for the first and last
        parameters of an infinite curve setting active.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnMaximalParameterValue(self, *args)


    def SetIsoOnPlane(self, *args):
        """
        SetIsoOnPlane(Prs3d_Drawer self, Standard_Boolean const theIsEnabled)

        Sets IsoOnPlane on or off by setting the parameter theIsEnabled to true or false.

        :type theIsEnabled: bool

        """
        return _Prs3d.Prs3d_Drawer_SetIsoOnPlane(self, *args)


    def IsoOnPlane(self, *args):
        """
        IsoOnPlane(Prs3d_Drawer self) -> Standard_Boolean

        Returns True if the drawing of isos on planes is enabled.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_IsoOnPlane(self, *args)


    def HasOwnIsoOnPlane(self, *args):
        """
        HasOwnIsoOnPlane(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has IsoOnPlane setting active.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnIsoOnPlane(self, *args)


    def IsoOnTriangulation(self, *args):
        """
        IsoOnTriangulation(Prs3d_Drawer self) -> Standard_Boolean

        Returns True if the drawing of isos on triangulation is enabled.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_IsoOnTriangulation(self, *args)


    def HasOwnIsoOnTriangulation(self, *args):
        """
        HasOwnIsoOnTriangulation(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has IsoOnTriangulation setting active.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnIsoOnTriangulation(self, *args)


    def SetIsoOnTriangulation(self, *args):
        """
        SetIsoOnTriangulation(Prs3d_Drawer self, Standard_Boolean const theToEnable)

        Enables or disables isolines on triangulation by setting the parameter theIsEnabled to true or false.

        :type theToEnable: bool

        """
        return _Prs3d.Prs3d_Drawer_SetIsoOnTriangulation(self, *args)


    def SetDiscretisation(self, *args):
        """
        SetDiscretisation(Prs3d_Drawer self, Standard_Integer const theValue)

        Sets the discretisation parameter theValue.

        :type theValue: int

        """
        return _Prs3d.Prs3d_Drawer_SetDiscretisation(self, *args)


    def Discretisation(self, *args):
        """
        Discretisation(Prs3d_Drawer self) -> Standard_Integer

        Returns the discretisation setting. 

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Prs3d_Drawer_Discretisation(self, *args)


    def HasOwnDiscretisation(self, *args):
        """
        HasOwnDiscretisation(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has discretisation setting active.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnDiscretisation(self, *args)


    def DeviationCoefficient(self, *args):
        """
        DeviationCoefficient(Prs3d_Drawer self) -> Standard_Real

        Returns the deviation coefficient.
        Drawings of curves or patches are made with respect
        to a maximal chordal deviation. A Deviation coefficient
        is used in the shading display mode. The shape is
        seen decomposed into triangles. These are used to
        calculate reflection of light from the surface of the
        object. The triangles are formed from chords of the
        curves in the shape. The deviation coefficient gives
        the highest value of the angle with which a chord can
        deviate from a tangent to a   curve. If this limit is
        reached, a new triangle is begun.
        This deviation is absolute and is set through the
        method: SetMaximalChordialDeviation. The default value is 0.001.
        In drawing shapes, however, you are allowed to ask
        for a relative deviation. This deviation will be:
        SizeOfObject * DeviationCoefficient.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Prs3d_Drawer_DeviationCoefficient(self, *args)


    def SetDeviationCoefficient(self, *args):
        """
        SetDeviationCoefficient(Prs3d_Drawer self, Standard_Real const theCoefficient)
        SetDeviationCoefficient(Prs3d_Drawer self)

        Sets the hasOwnDeviationCoefficient flag to Standard_False


        """
        return _Prs3d.Prs3d_Drawer_SetDeviationCoefficient(self, *args)


    def HasOwnDeviationCoefficient(self, *args):
        """
        HasOwnDeviationCoefficient(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if there is a local setting for deviation
        coefficient in this framework for a specific interactive object.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnDeviationCoefficient(self, *args)


    def PreviousDeviationCoefficient(self, *args):
        """
        PreviousDeviationCoefficient(Prs3d_Drawer self) -> Standard_Real

        Saves the previous value used for the chordal
        deviation coefficient. 

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Prs3d_Drawer_PreviousDeviationCoefficient(self, *args)


    def UpdatePreviousDeviationCoefficient(self, *args):
        """
        UpdatePreviousDeviationCoefficient(Prs3d_Drawer self)

        Updates the previous value used for the chordal deviation coefficient to the current state.


        """
        return _Prs3d.Prs3d_Drawer_UpdatePreviousDeviationCoefficient(self, *args)


    def HLRDeviationCoefficient(self, *args):
        """
        HLRDeviationCoefficient(Prs3d_Drawer self) -> Standard_Real

        Returns the real number value of the hidden line
        removal deviation coefficient in this framework, if the flag
        hasOwnHLRDeviationCoefficient is true or there is no Link.
        Else the shape's HLR deviation coefficient is used.
        A Deviation coefficient is used in the shading display
        mode. The shape is seen decomposed into triangles.
        These are used to calculate reflection of light from the
        surface of the object.
        The triangles are formed from chords of the curves in
        the shape. The deviation coefficient give the highest
        value of the angle with which a chord can deviate
        from a tangent to a curve. If this limit is reached, a new triangle is begun.
        To find the hidden lines, hidden line display mode
        entails recalculation of the view at each different projector perspective.
        Since hidden lines entail calculations of more than
        usual complexity to decompose them into these
        triangles, a deviation coefficient allowing greater
        tolerance is used. This increases efficiency in calculation.
        The Default value is 0.02.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Prs3d_Drawer_HLRDeviationCoefficient(self, *args)


    def SetHLRDeviationCoefficient(self, *args):
        """
        SetHLRDeviationCoefficient(Prs3d_Drawer self, Standard_Real const theCoefficient)
        SetHLRDeviationCoefficient(Prs3d_Drawer self)

        Sets the hasOwnHLRDeviationCoefficient flag to Standard_False 


        """
        return _Prs3d.Prs3d_Drawer_SetHLRDeviationCoefficient(self, *args)


    def HasOwnHLRDeviationCoefficient(self, *args):
        """
        HasOwnHLRDeviationCoefficient(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the there is a setting for HLR deviation
        coefficient in this framework for a specific interactive object.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnHLRDeviationCoefficient(self, *args)


    def PreviousHLRDeviationCoefficient(self, *args):
        """
        PreviousHLRDeviationCoefficient(Prs3d_Drawer self) -> Standard_Real

        Returns the previous value of the hidden line removal deviation coefficient.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Prs3d_Drawer_PreviousHLRDeviationCoefficient(self, *args)


    def DeviationAngle(self, *args):
        """
        DeviationAngle(Prs3d_Drawer self) -> Standard_Real

        Returns the value for deviation angle.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Prs3d_Drawer_DeviationAngle(self, *args)


    def SetDeviationAngle(self, *args):
        """
        SetDeviationAngle(Prs3d_Drawer self, Standard_Real const theAngle)
        SetDeviationAngle(Prs3d_Drawer self)

        Sets the hasOwnDeviationAngle flag to Standard_False


        """
        return _Prs3d.Prs3d_Drawer_SetDeviationAngle(self, *args)


    def HasOwnDeviationAngle(self, *args):
        """
        HasOwnDeviationAngle(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the there is a local setting for deviation
        angle in this framework for a specific interactive object.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnDeviationAngle(self, *args)


    def PreviousDeviationAngle(self, *args):
        """
        PreviousDeviationAngle(Prs3d_Drawer self) -> Standard_Real

        Returns the previous deviation angle

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Prs3d_Drawer_PreviousDeviationAngle(self, *args)


    def UpdatePreviousDeviationAngle(self, *args):
        """
        UpdatePreviousDeviationAngle(Prs3d_Drawer self)

        Updates the previous deviation angle to the current value


        """
        return _Prs3d.Prs3d_Drawer_UpdatePreviousDeviationAngle(self, *args)


    def HLRAngle(self, *args):
        """
        HLRAngle(Prs3d_Drawer self) -> Standard_Real

        Returns the real number value of the deviation angle
        in hidden line removal views. The default value is 20 * M_PI / 180.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Prs3d_Drawer_HLRAngle(self, *args)


    def SetHLRAngle(self, *args):
        """
        SetHLRAngle(Prs3d_Drawer self, Standard_Real const theAngle)
        SetHLRAngle(Prs3d_Drawer self)

        Sets the hasOwnHLRDeviationAngle flag to Standard_False


        """
        return _Prs3d.Prs3d_Drawer_SetHLRAngle(self, *args)


    def HasOwnHLRDeviationAngle(self, *args):
        """
        HasOwnHLRDeviationAngle(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the there is a setting for HLR deviation
        angle in this framework for a specific interactive object.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnHLRDeviationAngle(self, *args)


    def PreviousHLRDeviationAngle(self, *args):
        """
        PreviousHLRDeviationAngle(Prs3d_Drawer self) -> Standard_Real

        Returns the previous value of the HLR deviation angle.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Prs3d_Drawer_PreviousHLRDeviationAngle(self, *args)


    def SetAutoTriangulation(self, *args):
        """
        SetAutoTriangulation(Prs3d_Drawer self, Standard_Boolean const theIsEnabled)

        Sets IsAutoTriangulated on or off by setting the parameter theIsEnabled to true or false.
        If this flag is True automatic re-triangulation with deflection-check logic will be applied.
        Else this feature will be disable and triangulation is expected to be computed by application itself
        and no shading presentation at all if unavailable.

        :type theIsEnabled: bool

        """
        return _Prs3d.Prs3d_Drawer_SetAutoTriangulation(self, *args)


    def IsAutoTriangulation(self, *args):
        """
        IsAutoTriangulation(Prs3d_Drawer self) -> Standard_Boolean

        Returns True if automatic triangulation is enabled.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_IsAutoTriangulation(self, *args)


    def HasOwnIsAutoTriangulation(self, *args):
        """
        HasOwnIsAutoTriangulation(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has IsoOnPlane setting active.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnIsAutoTriangulation(self, *args)


    def UIsoAspect(self, *args):
        """
        Defines the attributes which are used when drawing an
        U isoparametric curve of a face. Defines the number
        of U isoparametric curves to be drawn for a single face.
        The LineAspect for U isoparametric lines can be edited
        (methods SetColor, SetTypeOfLine, SetWidth, SetNumber)
        The default values are:
        COLOR       : Quantity_NOC_GRAY75
        TYPE OF LINE: Aspect_TOL_SOLID
        WIDTH       : 0.5

        These attributes are used by the following algorithms:
        Prs3d_WFDeflectionSurface
        Prs3d_WFDeflectionRestrictedFace

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_IsoAspect

        """
        res = _Prs3d.Prs3d_Drawer_UIsoAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetUIsoAspect(self, *args):
        """
        SetUIsoAspect(Prs3d_Drawer self, Handle_Prs3d_IsoAspect theAspect)

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_IsoAspect

        """
        return _Prs3d.Prs3d_Drawer_SetUIsoAspect(self, *args)


    def HasOwnUIsoAspect(self, *args):
        """
        HasOwnUIsoAspect(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        UIso aspect that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnUIsoAspect(self, *args)


    def VIsoAspect(self, *args):
        """
        Defines the attributes which are used when drawing an
        V isoparametric curve of a face. Defines the number
        of V isoparametric curves to be drawn for a single face.
        The LineAspect for V isoparametric lines can be edited
        (methods SetColor, SetTypeOfLine, SetWidth, SetNumber)
        The default values are:
        COLOR       : Quantity_NOC_GRAY82
        TYPE OF LINE: Aspect_TOL_SOLID
        WIDTH       : 0.5

        These attributes are used by the following algorithms:
        Prs3d_WFDeflectionSurface
        Prs3d_WFDeflectionRestrictedFace

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_IsoAspect

        """
        res = _Prs3d.Prs3d_Drawer_VIsoAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetVIsoAspect(self, *args):
        """
        SetVIsoAspect(Prs3d_Drawer self, Handle_Prs3d_IsoAspect theAspect)

        Sets the appearance of V isoparameters - theAspect.

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_IsoAspect

        """
        return _Prs3d.Prs3d_Drawer_SetVIsoAspect(self, *args)


    def HasOwnVIsoAspect(self, *args):
        """
        HasOwnVIsoAspect(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        VIso aspect that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnVIsoAspect(self, *args)


    def WireAspect(self, *args):
        """
        Returns wire aspect settings.
        The LineAspect for the free boundaries can be edited.
        The default values are:
        Color: Quantity_NOC_GREEN
        Type of line: Aspect_TOL_SOLID
        Width: 1.0
        These attributes are used by the algorithm Prs3d_WFShape.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        res = _Prs3d.Prs3d_Drawer_WireAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetWireAspect(self, *args):
        """
        SetWireAspect(Prs3d_Drawer self, Handle_Prs3d_LineAspect theAspect)

        Sets the parameter theAspect for display of wires.

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        return _Prs3d.Prs3d_Drawer_SetWireAspect(self, *args)


    def HasOwnWireAspect(self, *args):
        """
        HasOwnWireAspect(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        wire aspect that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnWireAspect(self, *args)


    def SetWireDraw(self, *args):
        """
        SetWireDraw(Prs3d_Drawer self, Standard_Boolean const theIsEnabled)

        Sets WireDraw on or off by setting the parameter theIsEnabled to true or false.

        :type theIsEnabled: bool

        """
        return _Prs3d.Prs3d_Drawer_SetWireDraw(self, *args)


    def WireDraw(self, *args):
        """
        WireDraw(Prs3d_Drawer self) -> Standard_Boolean

        Returns True if the drawing of the wire is enabled.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_WireDraw(self, *args)


    def HasOwnWireDraw(self, *args):
        """
        HasOwnWireDraw(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        "draw wires" flag that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnWireDraw(self, *args)


    def PointAspect(self, *args):
        """
        Returns the point aspect setting. The default values are
        Color: Quantity_NOC_YELLOW
        Type of marker: Aspect_TOM_PLUS
        Scale: 1.0
        These attributes are used by the algorithms Prs3d_Point.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_PointAspect

        """
        res = _Prs3d.Prs3d_Drawer_PointAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetPointAspect(self, *args):
        """
        SetPointAspect(Prs3d_Drawer self, Handle_Prs3d_PointAspect theAspect)

        Sets the parameter theAspect for display attributes of points

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_PointAspect

        """
        return _Prs3d.Prs3d_Drawer_SetPointAspect(self, *args)


    def HasOwnPointAspect(self, *args):
        """
        HasOwnPointAspect(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        point aspect that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnPointAspect(self, *args)


    def LineAspect(self, *args):
        """
        Returns settings for line aspects.
        These settings can be edited. The default values are:
        Color: Quantity_NOC_YELLOW
        Type of line: Aspect_TOL_SOLID
        Width: 1.0
        These attributes are used by the following algorithms:
        Prs3d_Curve
        Prs3d_Line
        Prs3d_HLRShape

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        res = _Prs3d.Prs3d_Drawer_LineAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetLineAspect(self, *args):
        """
        SetLineAspect(Prs3d_Drawer self, Handle_Prs3d_LineAspect theAspect)

        Sets the parameter theAspect for display attributes of lines.

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        return _Prs3d.Prs3d_Drawer_SetLineAspect(self, *args)


    def HasOwnLineAspect(self, *args):
        """
        HasOwnLineAspect(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        line aspect that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnLineAspect(self, *args)


    def TextAspect(self, *args):
        """
        Returns settings for text aspect.
        These settings can be edited. The default value is:
        - Color: Quantity_NOC_YELLOW

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_TextAspect

        """
        res = _Prs3d.Prs3d_Drawer_TextAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetTextAspect(self, *args):
        """
        SetTextAspect(Prs3d_Drawer self, Handle_Prs3d_TextAspect theAspect)

        Sets the parameter theAspect for display attributes of text.

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_TextAspect

        """
        return _Prs3d.Prs3d_Drawer_SetTextAspect(self, *args)


    def HasOwnTextAspect(self, *args):
        """
        HasOwnTextAspect(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        text aspect that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnTextAspect(self, *args)


    def ShadingAspect(self, *args):
        """
        Returns settings for shading aspects.
        These settings can be edited. The default values are:
        -   Color: Quantity_NOC_YELLOW
        -   Material: Graphic3d_NOM_BRASS
        Shading aspect is obtained through decomposition of
        3d faces into triangles, each side of each triangle
        being a chord of the corresponding curved edge in the face.
        Reflection of light in each projector perspective is then calculated for each of the
        resultant triangular planes.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_ShadingAspect

        """
        res = _Prs3d.Prs3d_Drawer_ShadingAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetShadingAspect(self, *args):
        """
        SetShadingAspect(Prs3d_Drawer self, Handle_Prs3d_ShadingAspect theAspect)

        Sets the parameter theAspect for display attributes of shading.

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_ShadingAspect

        """
        return _Prs3d.Prs3d_Drawer_SetShadingAspect(self, *args)


    def HasOwnShadingAspect(self, *args):
        """
        HasOwnShadingAspect(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        shading aspect that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnShadingAspect(self, *args)


    def SeenLineAspect(self, *args):
        """
        Returns settings for seen line aspects.
        These settings can be edited. The default values are:
        Color: Quantity_NOC_YELLOW
        Type of line: Aspect_TOL_SOLID
        Width: 1.0

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        res = _Prs3d.Prs3d_Drawer_SeenLineAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetSeenLineAspect(self, *args):
        """
        SetSeenLineAspect(Prs3d_Drawer self, Handle_Prs3d_LineAspect theAspect)

        Sets the parameter theAspect for the display of seen lines in hidden line removal mode.

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        return _Prs3d.Prs3d_Drawer_SetSeenLineAspect(self, *args)


    def HasOwnSeenLineAspect(self, *args):
        """
        HasOwnSeenLineAspect(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        seen line aspect that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnSeenLineAspect(self, *args)


    def PlaneAspect(self, *args):
        """
        Returns settings for the appearance of planes.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_PlaneAspect

        """
        res = _Prs3d.Prs3d_Drawer_PlaneAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetPlaneAspect(self, *args):
        """
        SetPlaneAspect(Prs3d_Drawer self, Handle_Prs3d_PlaneAspect theAspect)

        Sets the parameter theAspect for the display of planes. 

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_PlaneAspect

        """
        return _Prs3d.Prs3d_Drawer_SetPlaneAspect(self, *args)


    def HasOwnPlaneAspect(self, *args):
        """
        HasOwnPlaneAspect(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        plane aspect that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnPlaneAspect(self, *args)


    def ArrowAspect(self, *args):
        """
        Returns the attributes for display of arrows.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_ArrowAspect

        """
        res = _Prs3d.Prs3d_Drawer_ArrowAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetArrowAspect(self, *args):
        """
        SetArrowAspect(Prs3d_Drawer self, Handle_Prs3d_ArrowAspect theAspect)

        Sets the parameter theAspect for display attributes of arrows.

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_ArrowAspect

        """
        return _Prs3d.Prs3d_Drawer_SetArrowAspect(self, *args)


    def HasOwnArrowAspect(self, *args):
        """
        HasOwnArrowAspect(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        arrow aspect that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnArrowAspect(self, *args)


    def SetLineArrowDraw(self, *args):
        """
        SetLineArrowDraw(Prs3d_Drawer self, Standard_Boolean const theIsEnabled)

        Enables the drawing of an arrow at the end of each line.
        By default the arrows are not drawn.

        :type theIsEnabled: bool

        """
        return _Prs3d.Prs3d_Drawer_SetLineArrowDraw(self, *args)


    def LineArrowDraw(self, *args):
        """
        LineArrowDraw(Prs3d_Drawer self) -> Standard_Boolean

        Returns True if drawing an arrow at the end of each edge is enabled
        and False otherwise (the default).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_LineArrowDraw(self, *args)


    def HasOwnLineArrowDraw(self, *args):
        """
        HasOwnLineArrowDraw(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        "draw arrow" flag that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnLineArrowDraw(self, *args)


    def HiddenLineAspect(self, *args):
        """
        Returns settings for hidden line aspects.
        These settings can be edited. The default values are:
        Color: Quantity_NOC_YELLOW
        Type of line: Aspect_TOL_DASH
        Width: 1.0

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        res = _Prs3d.Prs3d_Drawer_HiddenLineAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetHiddenLineAspect(self, *args):
        """
        SetHiddenLineAspect(Prs3d_Drawer self, Handle_Prs3d_LineAspect theAspect)

        Sets the parameter theAspect for the display of hidden lines in hidden line removal mode.

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        return _Prs3d.Prs3d_Drawer_SetHiddenLineAspect(self, *args)


    def HasOwnHiddenLineAspect(self, *args):
        """
        HasOwnHiddenLineAspect(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        hidden lines aspect that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnHiddenLineAspect(self, *args)


    def DrawHiddenLine(self, *args):
        """
        DrawHiddenLine(Prs3d_Drawer self) -> Standard_Boolean

        Returns Standard_True if the hidden lines are to be drawn.
        By default the hidden lines are not drawn.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_DrawHiddenLine(self, *args)


    def EnableDrawHiddenLine(self, *args):
        """
        EnableDrawHiddenLine(Prs3d_Drawer self)

        Enables the DrawHiddenLine function.


        """
        return _Prs3d.Prs3d_Drawer_EnableDrawHiddenLine(self, *args)


    def DisableDrawHiddenLine(self, *args):
        """
        DisableDrawHiddenLine(Prs3d_Drawer self)

        Disables the DrawHiddenLine function.


        """
        return _Prs3d.Prs3d_Drawer_DisableDrawHiddenLine(self, *args)


    def HasOwnDrawHiddenLine(self, *args):
        """
        HasOwnDrawHiddenLine(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        "draw hidden lines" flag that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnDrawHiddenLine(self, *args)


    def VectorAspect(self, *args):
        """
        Returns settings for the appearance of vectors.
        These settings can be edited. The default values are:
        Color: Quantity_NOC_SKYBLUE
        Type of line: Aspect_TOL_SOLID
        Width: 1.0

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        res = _Prs3d.Prs3d_Drawer_VectorAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetVectorAspect(self, *args):
        """
        SetVectorAspect(Prs3d_Drawer self, Handle_Prs3d_LineAspect theAspect)

        Sets the modality theAspect for the display of vectors.

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        return _Prs3d.Prs3d_Drawer_SetVectorAspect(self, *args)


    def HasOwnVectorAspect(self, *args):
        """
        HasOwnVectorAspect(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        vector aspect that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnVectorAspect(self, *args)


    def SetVertexDrawMode(self, *args):
        """
        SetVertexDrawMode(Prs3d_Drawer self, Prs3d_VertexDrawMode const theMode)

        Sets the mode of visualization of vertices of a TopoDS_Shape instance.
        By default, only stand-alone vertices (not belonging topologically to an edge) are drawn,
        that corresponds to Prs3d_VDM_Standalone mode. 
        Switching to Prs3d_VDM_Standalone mode makes all shape's vertices visible.
        To inherit this parameter from the global drawer instance ("the link") when it is present,
        Prs3d_VDM_Inherited value should be used.

        :type theMode: OCC.wrapper.Prs3d.Prs3d_VertexDrawMode

        """
        return _Prs3d.Prs3d_Drawer_SetVertexDrawMode(self, *args)


    def VertexDrawMode(self, *args):
        """
        VertexDrawMode(Prs3d_Drawer self) -> Prs3d_VertexDrawMode

        Returns the current mode of visualization of vertices of a TopoDS_Shape instance.

        :rtype: OCC.wrapper.Prs3d.Prs3d_VertexDrawMode

        """
        return _Prs3d.Prs3d_Drawer_VertexDrawMode(self, *args)


    def HasOwnVertexDrawMode(self, *args):
        """
        HasOwnVertexDrawMode(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the vertex draw mode is not equal to <b>Prs3d_VDM_Inherited</b>. 
        This means that individual vertex draw mode value (i.e. not inherited from the global 
        drawer) is used for a specific interactive object.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnVertexDrawMode(self, *args)


    def DatumAspect(self, *args):
        """
        Returns settings for the appearance of datums.
        These settings can be edited. The default values for the three axes are:
        Color: Quantity_NOC_PEACHPUFF
        Type of line: Aspect_TOL_SOLID
        Width: 1.0

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_DatumAspect

        """
        res = _Prs3d.Prs3d_Drawer_DatumAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetDatumAspect(self, *args):
        """
        SetDatumAspect(Prs3d_Drawer self, Handle_Prs3d_DatumAspect theAspect)

        Sets the modality theAspect for the display of datums.

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_DatumAspect

        """
        return _Prs3d.Prs3d_Drawer_SetDatumAspect(self, *args)


    def HasOwnDatumAspect(self, *args):
        """
        HasOwnDatumAspect(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        datum aspect that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnDatumAspect(self, *args)


    def SectionAspect(self, *args):
        """
        The LineAspect for the wire can be edited.
        The default values are:
        Color: Quantity_NOC_ORANGE
        Type of line: Aspect_TOL_SOLID
        Width: 1.0
        These attributes are used by the algorithm Prs3d_WFShape.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        res = _Prs3d.Prs3d_Drawer_SectionAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetSectionAspect(self, *args):
        """
        SetSectionAspect(Prs3d_Drawer self, Handle_Prs3d_LineAspect theAspect)

        Sets the parameter theAspect for display attributes of sections. 

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        return _Prs3d.Prs3d_Drawer_SetSectionAspect(self, *args)


    def HasOwnSectionAspect(self, *args):
        """
        HasOwnSectionAspect(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        section aspect that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnSectionAspect(self, *args)


    def SetFreeBoundaryAspect(self, *args):
        """
        SetFreeBoundaryAspect(Prs3d_Drawer self, Handle_Prs3d_LineAspect theAspect)

        Sets the parameter theAspect for the display of free boundaries.
        The method sets aspect owned by the drawer that will be used during
        visualization instead of the one set in link.

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        return _Prs3d.Prs3d_Drawer_SetFreeBoundaryAspect(self, *args)


    def FreeBoundaryAspect(self, *args):
        """
        Returns the values for presentation of free boundaries,
        in other words, boundaries which are not shared.
        The LineAspect for the  free boundaries can be edited.
        The default values are:
        Color: Quantity_NOC_GREEN
        Type of line: Aspect_TOL_SOLID
        Width: 1.0
        These attributes are used by the algorithm Prs3d_WFShape

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        res = _Prs3d.Prs3d_Drawer_FreeBoundaryAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasOwnFreeBoundaryAspect(self, *args):
        """
        HasOwnFreeBoundaryAspect(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        free boundaries aspect that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnFreeBoundaryAspect(self, *args)


    def SetFreeBoundaryDraw(self, *args):
        """
        SetFreeBoundaryDraw(Prs3d_Drawer self, Standard_Boolean const theIsEnabled)

        Enables or disables drawing of free boundaries for shading presentations.
        The method sets drawing flag owned by the drawer that will be used during
        visualization instead of the one set in link.
        theIsEnabled is a boolean flag indicating whether the free boundaries should be
        drawn or not.

        :type theIsEnabled: bool

        """
        return _Prs3d.Prs3d_Drawer_SetFreeBoundaryDraw(self, *args)


    def FreeBoundaryDraw(self, *args):
        """
        FreeBoundaryDraw(Prs3d_Drawer self) -> Standard_Boolean

        Returns True if the drawing of the free boundaries is enabled
        True is the default setting.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_FreeBoundaryDraw(self, *args)


    def HasOwnFreeBoundaryDraw(self, *args):
        """
        HasOwnFreeBoundaryDraw(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        "draw free boundaries" flag that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnFreeBoundaryDraw(self, *args)


    def SetUnFreeBoundaryAspect(self, *args):
        """
        SetUnFreeBoundaryAspect(Prs3d_Drawer self, Handle_Prs3d_LineAspect theAspect)

        Sets the parameter theAspect for the display of shared boundaries.
        The method sets aspect owned by the drawer that will be used during
        visualization instead of the one set in link.

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        return _Prs3d.Prs3d_Drawer_SetUnFreeBoundaryAspect(self, *args)


    def UnFreeBoundaryAspect(self, *args):
        """
        Returns settings for shared boundary line aspects.
        The LineAspect for the unfree boundaries can be edited.
        The default values are:
        Color: Quantity_NOC_YELLOW
        Type of line: Aspect_TOL_SOLID
        Width: 1.
        These attributes are used by the algorithm Prs3d_WFShape

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        res = _Prs3d.Prs3d_Drawer_UnFreeBoundaryAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasOwnUnFreeBoundaryAspect(self, *args):
        """
        HasOwnUnFreeBoundaryAspect(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        unfree boundaries aspect that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnUnFreeBoundaryAspect(self, *args)


    def SetUnFreeBoundaryDraw(self, *args):
        """
        SetUnFreeBoundaryDraw(Prs3d_Drawer self, Standard_Boolean const theIsEnabled)

        Enables or disables drawing of shared boundaries for shading presentations.
        The method sets drawing flag owned by the drawer that will be used during
        visualization instead of the one set in link.
        theIsEnabled is a boolean flag indicating whether the shared boundaries should be drawn or not.

        :type theIsEnabled: bool

        """
        return _Prs3d.Prs3d_Drawer_SetUnFreeBoundaryDraw(self, *args)


    def UnFreeBoundaryDraw(self, *args):
        """
        UnFreeBoundaryDraw(Prs3d_Drawer self) -> Standard_Boolean

        Returns True if the drawing of the shared boundaries is enabled.
        True is the default setting.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_UnFreeBoundaryDraw(self, *args)


    def HasOwnUnFreeBoundaryDraw(self, *args):
        """
        HasOwnUnFreeBoundaryDraw(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        "draw shared boundaries" flag that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnUnFreeBoundaryDraw(self, *args)


    def SetFaceBoundaryAspect(self, *args):
        """
        SetFaceBoundaryAspect(Prs3d_Drawer self, Handle_Prs3d_LineAspect theAspect)

        Sets line aspect for face boundaries.
        The method sets line aspect owned by the drawer that will be used during
        visualization instead of the one set in link.
        theAspect is the line aspect that determines the look of the face boundaries.

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        return _Prs3d.Prs3d_Drawer_SetFaceBoundaryAspect(self, *args)


    def FaceBoundaryAspect(self, *args):
        """
        Returns line aspect of face boundaries.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        res = _Prs3d.Prs3d_Drawer_FaceBoundaryAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasOwnFaceBoundaryAspect(self, *args):
        """
        HasOwnFaceBoundaryAspect(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        face boundaries aspect that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnFaceBoundaryAspect(self, *args)


    def SetFaceBoundaryDraw(self, *args):
        """
        SetFaceBoundaryDraw(Prs3d_Drawer self, Standard_Boolean const theIsEnabled)

        Enables or disables face boundary drawing for shading presentations. 
        The method sets drawing flag owned by the drawer that will be used during
        visualization instead of the one set in link.
        theIsEnabled is a boolean flag indicating whether the face boundaries should be drawn or not.

        :type theIsEnabled: bool

        """
        return _Prs3d.Prs3d_Drawer_SetFaceBoundaryDraw(self, *args)


    def FaceBoundaryDraw(self, *args):
        """
        FaceBoundaryDraw(Prs3d_Drawer self) -> Standard_Boolean

        Checks whether the face boundary drawing is enabled or not.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_FaceBoundaryDraw(self, *args)


    def HasOwnFaceBoundaryDraw(self, *args):
        """
        HasOwnFaceBoundaryDraw(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        "draw face boundaries" flag that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnFaceBoundaryDraw(self, *args)


    def DimensionAspect(self, *args):
        """
        Returns settings for the appearance of dimensions. 

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_DimensionAspect

        """
        res = _Prs3d.Prs3d_Drawer_DimensionAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetDimensionAspect(self, *args):
        """
        SetDimensionAspect(Prs3d_Drawer self, Handle_Prs3d_DimensionAspect theAspect)

        Sets the settings for the appearance of dimensions.
        The method sets aspect owned by the drawer that will be used during
        visualization instead of the one set in link.

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_DimensionAspect

        """
        return _Prs3d.Prs3d_Drawer_SetDimensionAspect(self, *args)


    def HasOwnDimensionAspect(self, *args):
        """
        HasOwnDimensionAspect(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        the appearance of dimensions that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnDimensionAspect(self, *args)


    def SetDimLengthModelUnits(self, *args):
        """
        SetDimLengthModelUnits(Prs3d_Drawer self, TCollection_AsciiString theUnits)

        Sets dimension length model units for computing of dimension presentation.
        The method sets value owned by the drawer that will be used during
        visualization instead of the one set in link.

        :type theUnits: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Prs3d.Prs3d_Drawer_SetDimLengthModelUnits(self, *args)


    def SetDimAngleModelUnits(self, *args):
        """
        SetDimAngleModelUnits(Prs3d_Drawer self, TCollection_AsciiString theUnits)

        Sets dimension angle model units for computing of dimension presentation.
        The method sets value owned by the drawer that will be used during
        visualization instead of the one set in link.

        :type theUnits: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Prs3d.Prs3d_Drawer_SetDimAngleModelUnits(self, *args)


    def DimLengthModelUnits(self, *args):
        """
        Returns length model units for the dimension presentation. 

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Prs3d.Prs3d_Drawer_DimLengthModelUnits(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DimAngleModelUnits(self, *args):
        """
        Returns angle model units for the dimension presentation. 

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Prs3d.Prs3d_Drawer_DimAngleModelUnits(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasOwnDimLengthModelUnits(self, *args):
        """
        HasOwnDimLengthModelUnits(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        dimension length model units that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnDimLengthModelUnits(self, *args)


    def HasOwnDimAngleModelUnits(self, *args):
        """
        HasOwnDimAngleModelUnits(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        dimension angle model units that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnDimAngleModelUnits(self, *args)


    def SetDimLengthDisplayUnits(self, *args):
        """
        SetDimLengthDisplayUnits(Prs3d_Drawer self, TCollection_AsciiString theUnits)

        Sets length units in which value for dimension presentation is displayed.
        The method sets value owned by the drawer that will be used during
        visualization instead of the one set in link.

        :type theUnits: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Prs3d.Prs3d_Drawer_SetDimLengthDisplayUnits(self, *args)


    def SetDimAngleDisplayUnits(self, *args):
        """
        SetDimAngleDisplayUnits(Prs3d_Drawer self, TCollection_AsciiString theUnits)

        Sets angle units in which value for dimension presentation is displayed.
        The method sets value owned by the drawer that will be used during
        visualization instead of the one set in link.

        :type theUnits: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Prs3d.Prs3d_Drawer_SetDimAngleDisplayUnits(self, *args)


    def DimLengthDisplayUnits(self, *args):
        """
        Returns length units in which dimension presentation is displayed.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Prs3d.Prs3d_Drawer_DimLengthDisplayUnits(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DimAngleDisplayUnits(self, *args):
        """
        Returns angle units in which dimension presentation is displayed.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Prs3d.Prs3d_Drawer_DimAngleDisplayUnits(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasOwnDimLengthDisplayUnits(self, *args):
        """
        HasOwnDimLengthDisplayUnits(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        length units in which dimension presentation is displayed
        that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnDimLengthDisplayUnits(self, *args)


    def HasOwnDimAngleDisplayUnits(self, *args):
        """
        HasOwnDimAngleDisplayUnits(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        angle units in which dimension presentation is displayed
        that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasOwnDimAngleDisplayUnits(self, *args)


    def HasLink(self, *args):
        """
        HasLink(Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the current object has a link on the other drawer.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_Drawer_HasLink(self, *args)


    def Link(self, *args):
        """
        Returns the drawer to which the current object references.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer

        """
        res = _Prs3d.Prs3d_Drawer_Link(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetLink(self, *args):
        """
        SetLink(Prs3d_Drawer self, Handle_Prs3d_Drawer theDrawer)

        Sets theDrawer as a link to which the current object references.

        :type theDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer

        """
        return _Prs3d.Prs3d_Drawer_SetLink(self, *args)


    def ClearLocalAttributes(self, *args):
        """
        ClearLocalAttributes(Prs3d_Drawer self)

        Removes local attributes. 


        """
        return _Prs3d.Prs3d_Drawer_ClearLocalAttributes(self, *args)


    def SetShaderProgram(self, *args):
        """
        SetShaderProgram(Prs3d_Drawer self, Handle_Graphic3d_ShaderProgram theProgram, Graphic3d_GroupAspect const theAspect, bool const theToOverrideDefaults=False) -> bool

        Assign shader program for specified type of primitives.
        @param theProgram new program to set (might be NULL)
        @param theAspect  the type of primitives
        @param theToOverrideDefaults if true then non-overridden attributes using defaults will be allocated and copied from the Link;
        otherwise, only already customized attributes will be changed
        @return TRUE if presentation should be recomputed after creating aspects not previously customized (if theToOverrideDefaults is also TRUE)

        :type theProgram: OCC.wrapper.Graphic3d.Handle_Graphic3d_ShaderProgram
        :type theAspect: OCC.wrapper.Graphic3d.Graphic3d_GroupAspect
        :type theToOverrideDefaults: const bool
        :rtype: bool

        """
        return _Prs3d.Prs3d_Drawer_SetShaderProgram(self, *args)


    def SetShadingModel(self, *args):
        """
        SetShadingModel(Prs3d_Drawer self, Graphic3d_TypeOfShadingModel theModel, bool theToOverrideDefaults=False) -> bool

        Sets Shading Model type for the shading aspect.

        :type theModel: OCC.wrapper.Graphic3d.Graphic3d_TypeOfShadingModel
        :type theToOverrideDefaults: bool
        :rtype: bool

        """
        return _Prs3d.Prs3d_Drawer_SetShadingModel(self, *args)

    __swig_destroy__ = _Prs3d.delete_Prs3d_Drawer
Prs3d_Drawer_swigregister = _Prs3d.Prs3d_Drawer_swigregister
Prs3d_Drawer_swigregister(Prs3d_Drawer)

def Prs3d_Drawer_get_type_name(*args):
    """
    Prs3d_Drawer_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Prs3d.Prs3d_Drawer_get_type_name(*args)

def Prs3d_Drawer_get_type_descriptor(*args):
    """
    Prs3d_Drawer_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Prs3d.Prs3d_Drawer_get_type_descriptor(*args)

class Prs3d_DimensionAspect(Prs3d_BasicAspect):
    """defines the attributes when drawing a Length Presentation."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Prs3d_DimensionAspect
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Prs3d_DimensionAspect(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Prs3d.Prs3d_DimensionAspect_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Prs3d.Prs3d_DimensionAspect_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Prs3d_DimensionAspect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Prs3d_DimensionAspect self) -> Prs3d_DimensionAspect

        Constructs an empty framework to define the display of dimensions.


        """
        this = _Prs3d.new_Prs3d_DimensionAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def LineAspect(self, *args):
        """
        Returns the settings for the display of lines used in presentation of dimensions.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        res = _Prs3d.Prs3d_DimensionAspect_LineAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetLineAspect(self, *args):
        """
        SetLineAspect(Prs3d_DimensionAspect self, Handle_Prs3d_LineAspect theAspect)

        Sets the display attributes of lines used in presentation of dimensions.

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        return _Prs3d.Prs3d_DimensionAspect_SetLineAspect(self, *args)


    def TextAspect(self, *args):
        """
        Returns the settings for the display of text used in presentation of dimensions.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_TextAspect

        """
        res = _Prs3d.Prs3d_DimensionAspect_TextAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetTextAspect(self, *args):
        """
        SetTextAspect(Prs3d_DimensionAspect self, Handle_Prs3d_TextAspect theAspect)

        Sets the display attributes of text used in presentation of dimensions.

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_TextAspect

        """
        return _Prs3d.Prs3d_DimensionAspect_SetTextAspect(self, *args)


    def IsText3d(self, *args):
        """
        IsText3d(Prs3d_DimensionAspect self) -> Standard_Boolean

        Check if text for dimension label is 3d.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_DimensionAspect_IsText3d(self, *args)


    def MakeText3d(self, *args):
        """
        MakeText3d(Prs3d_DimensionAspect self, Standard_Boolean const isText3d)

        Sets type of text.

        :type isText3d: bool

        """
        return _Prs3d.Prs3d_DimensionAspect_MakeText3d(self, *args)


    def IsTextShaded(self, *args):
        """
        IsTextShaded(Prs3d_DimensionAspect self) -> Standard_Boolean

        Check if 3d text for dimension label is shaded.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_DimensionAspect_IsTextShaded(self, *args)


    def MakeTextShaded(self, *args):
        """
        MakeTextShaded(Prs3d_DimensionAspect self, Standard_Boolean const theIsTextShaded)

        Turns on/off text shading for 3d text.

        :type theIsTextShaded: bool

        """
        return _Prs3d.Prs3d_DimensionAspect_MakeTextShaded(self, *args)


    def IsArrows3d(self, *args):
        """
        IsArrows3d(Prs3d_DimensionAspect self) -> Standard_Boolean

        Gets type of arrows.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_DimensionAspect_IsArrows3d(self, *args)


    def MakeArrows3d(self, *args):
        """
        MakeArrows3d(Prs3d_DimensionAspect self, Standard_Boolean const theIsArrows3d)

        Sets type of arrows.

        :type theIsArrows3d: bool

        """
        return _Prs3d.Prs3d_DimensionAspect_MakeArrows3d(self, *args)


    def IsUnitsDisplayed(self, *args):
        """
        IsUnitsDisplayed(Prs3d_DimensionAspect self) -> Standard_Boolean

        Shows if Units are to be displayed along with dimension value.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_DimensionAspect_IsUnitsDisplayed(self, *args)


    def MakeUnitsDisplayed(self, *args):
        """
        MakeUnitsDisplayed(Prs3d_DimensionAspect self, Standard_Boolean const theIsDisplayed)

        Specifies whether the units string should be displayed
        along with value label or not.

        :type theIsDisplayed: bool

        """
        return _Prs3d.Prs3d_DimensionAspect_MakeUnitsDisplayed(self, *args)


    def SetArrowOrientation(self, *args):
        """
        SetArrowOrientation(Prs3d_DimensionAspect self, Prs3d_DimensionArrowOrientation const theArrowOrient)

        Sets orientation of arrows (external or internal).
        By default orientation is chosen automatically according to situation and text label size.

        :type theArrowOrient: OCC.wrapper.Prs3d.Prs3d_DimensionArrowOrientation

        """
        return _Prs3d.Prs3d_DimensionAspect_SetArrowOrientation(self, *args)


    def ArrowOrientation(self, *args):
        """
        ArrowOrientation(Prs3d_DimensionAspect self) -> Prs3d_DimensionArrowOrientation

        Gets orientation of arrows (external or internal).

        :rtype: OCC.wrapper.Prs3d.Prs3d_DimensionArrowOrientation

        """
        return _Prs3d.Prs3d_DimensionAspect_ArrowOrientation(self, *args)


    def SetTextVerticalPosition(self, *args):
        """
        SetTextVerticalPosition(Prs3d_DimensionAspect self, Prs3d_DimensionTextVerticalPosition const thePosition)

        Sets vertical text alignment for text label.

        :type thePosition: OCC.wrapper.Prs3d.Prs3d_DimensionTextVerticalPosition

        """
        return _Prs3d.Prs3d_DimensionAspect_SetTextVerticalPosition(self, *args)


    def TextVerticalPosition(self, *args):
        """
        TextVerticalPosition(Prs3d_DimensionAspect self) -> Prs3d_DimensionTextVerticalPosition

        Gets vertical text alignment for text label.

        :rtype: OCC.wrapper.Prs3d.Prs3d_DimensionTextVerticalPosition

        """
        return _Prs3d.Prs3d_DimensionAspect_TextVerticalPosition(self, *args)


    def SetTextHorizontalPosition(self, *args):
        """
        SetTextHorizontalPosition(Prs3d_DimensionAspect self, Prs3d_DimensionTextHorizontalPosition const thePosition)

        Sets horizontal text alignment for text label.

        :type thePosition: OCC.wrapper.Prs3d.Prs3d_DimensionTextHorizontalPosition

        """
        return _Prs3d.Prs3d_DimensionAspect_SetTextHorizontalPosition(self, *args)


    def TextHorizontalPosition(self, *args):
        """
        TextHorizontalPosition(Prs3d_DimensionAspect self) -> Prs3d_DimensionTextHorizontalPosition

        Gets horizontal text alignment for text label.

        :rtype: OCC.wrapper.Prs3d.Prs3d_DimensionTextHorizontalPosition

        """
        return _Prs3d.Prs3d_DimensionAspect_TextHorizontalPosition(self, *args)


    def ArrowAspect(self, *args):
        """
        Returns the settings for displaying arrows.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_ArrowAspect

        """
        res = _Prs3d.Prs3d_DimensionAspect_ArrowAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetArrowAspect(self, *args):
        """
        SetArrowAspect(Prs3d_DimensionAspect self, Handle_Prs3d_ArrowAspect theAspect)

        Sets the display attributes of arrows used in presentation of dimensions.

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_ArrowAspect

        """
        return _Prs3d.Prs3d_DimensionAspect_SetArrowAspect(self, *args)


    def SetCommonColor(self, *args):
        """
        SetCommonColor(Prs3d_DimensionAspect self, Quantity_Color theColor)

        Sets the same color for all parts of dimension: lines, arrows and text.

        :type theColor: OCC.wrapper.Quantity.Quantity_Color

        """
        return _Prs3d.Prs3d_DimensionAspect_SetCommonColor(self, *args)


    def SetExtensionSize(self, *args):
        """
        SetExtensionSize(Prs3d_DimensionAspect self, Standard_Real const theSize)

        Sets extension size.

        :type theSize: float

        """
        return _Prs3d.Prs3d_DimensionAspect_SetExtensionSize(self, *args)


    def ExtensionSize(self, *args):
        """
        ExtensionSize(Prs3d_DimensionAspect self) -> Standard_Real

        Returns extension size.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Prs3d_DimensionAspect_ExtensionSize(self, *args)


    def SetArrowTailSize(self, *args):
        """
        SetArrowTailSize(Prs3d_DimensionAspect self, Standard_Real const theSize)

        Set size for arrow tail (extension without text).

        :type theSize: float

        """
        return _Prs3d.Prs3d_DimensionAspect_SetArrowTailSize(self, *args)


    def ArrowTailSize(self, *args):
        """
        ArrowTailSize(Prs3d_DimensionAspect self) -> Standard_Real

        Returns arrow tail size.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Prs3d_DimensionAspect_ArrowTailSize(self, *args)


    def SetValueStringFormat(self, *args):
        """
        SetValueStringFormat(Prs3d_DimensionAspect self, TCollection_AsciiString theFormat)

        Sets "sprintf"-syntax format for formatting dimension value labels.

        :type theFormat: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Prs3d.Prs3d_DimensionAspect_SetValueStringFormat(self, *args)


    def ValueStringFormat(self, *args):
        """
        Returns format.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Prs3d.Prs3d_DimensionAspect_ValueStringFormat(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Prs3d.delete_Prs3d_DimensionAspect
Prs3d_DimensionAspect_swigregister = _Prs3d.Prs3d_DimensionAspect_swigregister
Prs3d_DimensionAspect_swigregister(Prs3d_DimensionAspect)

def Prs3d_DimensionAspect_get_type_name(*args):
    """
    Prs3d_DimensionAspect_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Prs3d.Prs3d_DimensionAspect_get_type_name(*args)

def Prs3d_DimensionAspect_get_type_descriptor(*args):
    """
    Prs3d_DimensionAspect_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Prs3d.Prs3d_DimensionAspect_get_type_descriptor(*args)

class Prs3d_DatumAspect(Prs3d_BasicAspect):
    """A framework to define the display of datums."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Prs3d_DatumAspect
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Prs3d_DatumAspect(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Prs3d.Prs3d_DatumAspect_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Prs3d.Prs3d_DatumAspect_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Prs3d_DatumAspect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Prs3d_DatumAspect self) -> Prs3d_DatumAspect

        An empty framework to define the display of datums.


        """
        this = _Prs3d.new_Prs3d_DatumAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def LineAspect(self, *args):
        """
        LineAspect(Prs3d_DatumAspect self, Prs3d_DatumParts thePart) -> Handle_Prs3d_LineAspect

        Returns the right-handed coordinate system set in SetComponent.

        :type thePart: OCC.wrapper.Prs3d.Prs3d_DatumParts
        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        return _Prs3d.Prs3d_DatumAspect_LineAspect(self, *args)


    def ShadingAspect(self, *args):
        """
        ShadingAspect(Prs3d_DatumAspect self, Prs3d_DatumParts thePart) -> Handle_Prs3d_ShadingAspect

        Returns the right-handed coordinate system set in SetComponent.

        :type thePart: OCC.wrapper.Prs3d.Prs3d_DatumParts
        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_ShadingAspect

        """
        return _Prs3d.Prs3d_DatumAspect_ShadingAspect(self, *args)


    def TextAspect(self, *args):
        """
        Returns the right-handed coordinate system set in SetComponent.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_TextAspect

        """
        res = _Prs3d.Prs3d_DatumAspect_TextAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PointAspect(self, *args):
        """
        Returns the point aspect of origin wireframe presentation

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_PointAspect

        """
        res = _Prs3d.Prs3d_DatumAspect_PointAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ArrowAspect(self, *args):
        """
        Returns the arrow aspect of presentation

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_ArrowAspect

        """
        res = _Prs3d.Prs3d_DatumAspect_ArrowAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FirstAxisAspect(self, *args):
        """
        Returns the attributes for display of the first axis.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        res = _Prs3d.Prs3d_DatumAspect_FirstAxisAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SecondAxisAspect(self, *args):
        """
        Returns the attributes for display of the second axis.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        res = _Prs3d.Prs3d_DatumAspect_SecondAxisAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ThirdAxisAspect(self, *args):
        """
        Returns the attributes for display of the third axis.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        res = _Prs3d.Prs3d_DatumAspect_ThirdAxisAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetDrawFirstAndSecondAxis(self, *args):
        """
        SetDrawFirstAndSecondAxis(Prs3d_DatumAspect self, Standard_Boolean theToDraw)

        Sets the DrawFirstAndSecondAxis attributes to active.

        :type theToDraw: bool

        """
        return _Prs3d.Prs3d_DatumAspect_SetDrawFirstAndSecondAxis(self, *args)


    def DrawFirstAndSecondAxis(self, *args):
        """
        DrawFirstAndSecondAxis(Prs3d_DatumAspect self) -> Standard_Boolean

        Returns true if the first and second axes can be drawn.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_DatumAspect_DrawFirstAndSecondAxis(self, *args)


    def SetDrawThirdAxis(self, *args):
        """
        SetDrawThirdAxis(Prs3d_DatumAspect self, Standard_Boolean theToDraw)

        Sets the DrawThirdAxis attributes to active.

        :type theToDraw: bool

        """
        return _Prs3d.Prs3d_DatumAspect_SetDrawThirdAxis(self, *args)


    def DrawThirdAxis(self, *args):
        """
        DrawThirdAxis(Prs3d_DatumAspect self) -> Standard_Boolean

        Returns true if the third axis can be drawn.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_DatumAspect_DrawThirdAxis(self, *args)


    def DrawDatumPart(self, *args):
        """
        DrawDatumPart(Prs3d_DatumAspect self, Prs3d_DatumParts thePart) -> Standard_Boolean

        Returns true if the given part is used in axes of aspect

        :type thePart: OCC.wrapper.Prs3d.Prs3d_DatumParts
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_DatumAspect_DrawDatumPart(self, *args)


    def SetDrawDatumAxes(self, *args):
        """
        SetDrawDatumAxes(Prs3d_DatumAspect self, Prs3d_DatumAxes theType)

        Sets the axes used in the datum aspect

        :type theType: OCC.wrapper.Prs3d.Prs3d_DatumAxes

        """
        return _Prs3d.Prs3d_DatumAspect_SetDrawDatumAxes(self, *args)


    def DatumAxes(self, *args):
        """
        DatumAxes(Prs3d_DatumAspect self) -> Prs3d_DatumAxes

        Returns axes used in the datum aspect

        :rtype: OCC.wrapper.Prs3d.Prs3d_DatumAxes

        """
        return _Prs3d.Prs3d_DatumAspect_DatumAxes(self, *args)


    def SetAttribute(self, *args):
        """
        SetAttribute(Prs3d_DatumAspect self, Prs3d_DatumAttribute theType, Standard_Real const & theValue)

        Sets the attribute of the datum type

        :type theType: OCC.wrapper.Prs3d.Prs3d_DatumAttribute
        :type theValue: float

        """
        return _Prs3d.Prs3d_DatumAspect_SetAttribute(self, *args)


    def Attribute(self, *args):
        """
        Attribute(Prs3d_DatumAspect self, Prs3d_DatumAttribute theType) -> Standard_Real

        Returns the attribute of the datum type

        :type theType: OCC.wrapper.Prs3d.Prs3d_DatumAttribute
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Prs3d_DatumAspect_Attribute(self, *args)


    def SetAxisLength(self, *args):
        """
        SetAxisLength(Prs3d_DatumAspect self, Standard_Real theL1, Standard_Real theL2, Standard_Real theL3)

        Sets the lengths of the three axes.

        :type theL1: float
        :type theL2: float
        :type theL3: float

        """
        return _Prs3d.Prs3d_DatumAspect_SetAxisLength(self, *args)


    def AxisLength(self, *args):
        """
        AxisLength(Prs3d_DatumAspect self, Prs3d_DatumParts thePart) -> Standard_Real

        Returns the length of the displayed first axis.

        :type thePart: OCC.wrapper.Prs3d.Prs3d_DatumParts
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Prs3d_DatumAspect_AxisLength(self, *args)


    def FirstAxisLength(self, *args):
        """
        FirstAxisLength(Prs3d_DatumAspect self) -> Standard_Real

        Returns the length of the displayed first axis.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Prs3d_DatumAspect_FirstAxisLength(self, *args)


    def SecondAxisLength(self, *args):
        """
        SecondAxisLength(Prs3d_DatumAspect self) -> Standard_Real

        Returns the length of the displayed second axis.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Prs3d_DatumAspect_SecondAxisLength(self, *args)


    def ThirdAxisLength(self, *args):
        """
        ThirdAxisLength(Prs3d_DatumAspect self) -> Standard_Real

        Returns the length of the displayed third axis.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Prs3d_DatumAspect_ThirdAxisLength(self, *args)


    def ToDrawLabels(self, *args):
        """
        ToDrawLabels(Prs3d_DatumAspect self) -> Standard_Boolean

        @return true if axes labels are drawn; TRUE by default.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_DatumAspect_ToDrawLabels(self, *args)


    def SetDrawLabels(self, *args):
        """
        SetDrawLabels(Prs3d_DatumAspect self, Standard_Boolean theToDraw)

        Sets option to draw or not to draw text labels for axes

        :type theToDraw: bool

        """
        return _Prs3d.Prs3d_DatumAspect_SetDrawLabels(self, *args)


    def SetToDrawLabels(self, *args):
        """
        SetToDrawLabels(Prs3d_DatumAspect self, Standard_Boolean theToDraw)

        :type theToDraw: bool

        """
        return _Prs3d.Prs3d_DatumAspect_SetToDrawLabels(self, *args)


    def ToDrawArrows(self, *args):
        """
        ToDrawArrows(Prs3d_DatumAspect self) -> Standard_Boolean

        @return true if axes arrows are drawn; TRUE by default.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_DatumAspect_ToDrawArrows(self, *args)


    def SetDrawArrows(self, *args):
        """
        SetDrawArrows(Prs3d_DatumAspect self, Standard_Boolean theToDraw)

        Sets option to draw or not arrows for axes

        :type theToDraw: bool

        """
        return _Prs3d.Prs3d_DatumAspect_SetDrawArrows(self, *args)


    def ArrowPartForAxis(self, *args):
        """
        ArrowPartForAxis(Prs3d_DatumAspect self, Prs3d_DatumParts thePart) -> Prs3d_DatumParts

        Returns type of arrow for a type of axis

        :type thePart: OCC.wrapper.Prs3d.Prs3d_DatumParts
        :rtype: OCC.wrapper.Prs3d.Prs3d_DatumParts

        """
        return _Prs3d.Prs3d_DatumAspect_ArrowPartForAxis(self, *args)

    __swig_destroy__ = _Prs3d.delete_Prs3d_DatumAspect
Prs3d_DatumAspect_swigregister = _Prs3d.Prs3d_DatumAspect_swigregister
Prs3d_DatumAspect_swigregister(Prs3d_DatumAspect)

def Prs3d_DatumAspect_get_type_name(*args):
    """
    Prs3d_DatumAspect_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Prs3d.Prs3d_DatumAspect_get_type_name(*args)

def Prs3d_DatumAspect_get_type_descriptor(*args):
    """
    Prs3d_DatumAspect_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Prs3d.Prs3d_DatumAspect_get_type_descriptor(*args)

class Prs3d_PresentationShadow(Prs3d_Presentation):
    """Defines a "shadow" of existing presentation object with custom aspects."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Prs3d_PresentationShadow
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Prs3d_PresentationShadow(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Prs3d_PresentationShadow self, Handle_Graphic3d_StructureManager theViewer, Handle_Prs3d_Presentation thePrs) -> Prs3d_PresentationShadow

        Constructs a shadow of existing presentation object.

        :type theViewer: OCC.wrapper.Graphic3d.Handle_Graphic3d_StructureManager
        :type thePrs: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation

        """
        this = _Prs3d.new_Prs3d_PresentationShadow(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def ParentId(self, *args):
        """
        ParentId(Prs3d_PresentationShadow self) -> Standard_Integer

        Returns the id of the parent presentation

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Prs3d_PresentationShadow_ParentId(self, *args)


    def ParentAffinity(self, *args):
        """
        Returns view affinity of the parent presentation

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_ViewAffinity

        """
        res = _Prs3d.Prs3d_PresentationShadow_ParentAffinity(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def CalculateBoundBox(self, *args):
        """
        CalculateBoundBox(Prs3d_PresentationShadow self)

        Do nothing - axis-aligned bounding box should be initialized from parent structure.


        """
        return _Prs3d.Prs3d_PresentationShadow_CalculateBoundBox(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Prs3d.Prs3d_PresentationShadow_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Prs3d.Prs3d_PresentationShadow_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Prs3d_PresentationShadow_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Prs3d.delete_Prs3d_PresentationShadow
Prs3d_PresentationShadow_swigregister = _Prs3d.Prs3d_PresentationShadow_swigregister
Prs3d_PresentationShadow_swigregister(Prs3d_PresentationShadow)

def Prs3d_PresentationShadow_get_type_name(*args):
    """
    Prs3d_PresentationShadow_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Prs3d.Prs3d_PresentationShadow_get_type_name(*args)

def Prs3d_PresentationShadow_get_type_descriptor(*args):
    """
    Prs3d_PresentationShadow_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Prs3d.Prs3d_PresentationShadow_get_type_descriptor(*args)

class Prs3d_PointAspect(Prs3d_BasicAspect):
    """
    This  class  defines  attributes for the points
    The points are drawn using markers, whose size does not depend on
    the zoom value of the views.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Prs3d_PointAspect
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Prs3d_PointAspect(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Prs3d.Prs3d_PointAspect_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Prs3d.Prs3d_PointAspect_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Prs3d_PointAspect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Prs3d_PointAspect self, Aspect_TypeOfMarker const theType, Quantity_Color theColor, Standard_Real const theScale) -> Prs3d_PointAspect
        __init__(Prs3d_PointAspect self, Quantity_Color theColor, Standard_Integer const theWidth, Standard_Integer const theHeight, Handle_TColStd_HArray1OfByte theTexture) -> Prs3d_PointAspect
        __init__(Prs3d_PointAspect self, Handle_Graphic3d_AspectMarker3d theAspect) -> Prs3d_PointAspect

        :type theAspect: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectMarker3d

        """
        this = _Prs3d.new_Prs3d_PointAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetColor(self, *args):
        """
        SetColor(Prs3d_PointAspect self, Quantity_Color theColor)

        defines the color to be used when drawing a point.
        Default value: Quantity_NOC_YELLOW

        :type theColor: OCC.wrapper.Quantity.Quantity_Color

        """
        return _Prs3d.Prs3d_PointAspect_SetColor(self, *args)


    def SetTypeOfMarker(self, *args):
        """
        SetTypeOfMarker(Prs3d_PointAspect self, Aspect_TypeOfMarker const theType)

        defines the type of representation to be used when drawing a point.
        Default value: Aspect_TOM_PLUS

        :type theType: OCC.wrapper.Aspect.Aspect_TypeOfMarker

        """
        return _Prs3d.Prs3d_PointAspect_SetTypeOfMarker(self, *args)


    def SetScale(self, *args):
        """
        SetScale(Prs3d_PointAspect self, Standard_Real const theScale)

        defines the size of the marker used when drawing a point.
        Default value: 1.

        :type theScale: float

        """
        return _Prs3d.Prs3d_PointAspect_SetScale(self, *args)


    def Aspect(self, *args):
        """
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectMarker3d

        """
        res = _Prs3d.Prs3d_PointAspect_Aspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetAspect(self, *args):
        """
        SetAspect(Prs3d_PointAspect self, Handle_Graphic3d_AspectMarker3d theAspect)

        :type theAspect: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectMarker3d

        """
        return _Prs3d.Prs3d_PointAspect_SetAspect(self, *args)


    def GetTextureSize(self, *args):
        """
        GetTextureSize(Prs3d_PointAspect self)

        Returns marker's texture size.

        :type theWidth: int
        :type theHeight: int

        """
        return _Prs3d.Prs3d_PointAspect_GetTextureSize(self, *args)


    def GetTexture(self, *args):
        """
        Returns marker's texture.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_MarkerImage

        """
        res = _Prs3d.Prs3d_PointAspect_GetTexture(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Prs3d.delete_Prs3d_PointAspect
Prs3d_PointAspect_swigregister = _Prs3d.Prs3d_PointAspect_swigregister
Prs3d_PointAspect_swigregister(Prs3d_PointAspect)

def Prs3d_PointAspect_get_type_name(*args):
    """
    Prs3d_PointAspect_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Prs3d.Prs3d_PointAspect_get_type_name(*args)

def Prs3d_PointAspect_get_type_descriptor(*args):
    """
    Prs3d_PointAspect_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Prs3d.Prs3d_PointAspect_get_type_descriptor(*args)

class Handle_Prs3d_Drawer(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Prs3d_Drawer self)

        Nullify the handle


        """
        return _Prs3d.Handle_Prs3d_Drawer_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Prs3d_Drawer self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Prs3d.Handle_Prs3d_Drawer_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Prs3d_Drawer self, Prs3d_Drawer thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Prs3d.Handle_Prs3d_Drawer_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Prs3d_Drawer self, Handle_Prs3d_Drawer theHandle) -> Handle_Prs3d_Drawer
        assign(Handle_Prs3d_Drawer self, Prs3d_Drawer thePtr) -> Handle_Prs3d_Drawer
        assign(Handle_Prs3d_Drawer self, Handle_Prs3d_Drawer theHandle) -> Handle_Prs3d_Drawer

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Prs3d.Handle_Prs3d_Drawer_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Prs3d_Drawer self) -> Prs3d_Drawer

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Prs3d.Handle_Prs3d_Drawer_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Prs3d_Drawer self) -> Prs3d_Drawer

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Prs3d.Handle_Prs3d_Drawer___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Prs3d_Drawer self) -> Prs3d_Drawer

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Prs3d.Handle_Prs3d_Drawer___ref__(self, *args)


    def __hash__(self):
        return _Prs3d.Handle_Prs3d_Drawer___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Prs3d.Handle_Prs3d_Drawer___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Prs3d.new_Handle_Prs3d_Drawer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Prs3d.Handle_Prs3d_Drawer_DownCast)
    __swig_destroy__ = _Prs3d.delete_Handle_Prs3d_Drawer

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Prs3d_Drawer self) -> char const *

        :rtype: const char *

        """
        return _Prs3d.Handle_Prs3d_Drawer_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Handle_Prs3d_Drawer_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Handle_Prs3d_Drawer_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetTypeOfDeflection(self, *args):
        """
        SetTypeOfDeflection(Handle_Prs3d_Drawer self, Aspect_TypeOfDeflection const theTypeOfDeflection)

        Sets the type of chordal deflection.
        This indicates whether the deflection value is absolute or relative to the size of the object.

        :type theTypeOfDeflection: OCC.wrapper.Aspect.Aspect_TypeOfDeflection

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetTypeOfDeflection(self, *args)


    def TypeOfDeflection(self, *args):
        """
        TypeOfDeflection(Handle_Prs3d_Drawer self) -> Aspect_TypeOfDeflection

        Returns the type of chordal deflection.
        This indicates whether the deflection value is absolute or relative to the size of the object.

        :rtype: OCC.wrapper.Aspect.Aspect_TypeOfDeflection

        """
        return _Prs3d.Handle_Prs3d_Drawer_TypeOfDeflection(self, *args)


    def HasOwnTypeOfDeflection(self, *args):
        """
        HasOwnTypeOfDeflection(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has a type of deflection setting active.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnTypeOfDeflection(self, *args)


    def SetMaximalChordialDeviation(self, *args):
        """
        SetMaximalChordialDeviation(Handle_Prs3d_Drawer self, Standard_Real const theChordialDeviation)

        Defines the maximal chordial deviation when drawing any curve.
        Even if the type of deviation is set to TOD_Relative, this value is used by: 
        Prs3d_DeflectionCurve
        Prs3d_WFDeflectionSurface
        Prs3d_WFDeflectionRestrictedFace

        :type theChordialDeviation: float

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetMaximalChordialDeviation(self, *args)


    def MaximalChordialDeviation(self, *args):
        """
        MaximalChordialDeviation(Handle_Prs3d_Drawer self) -> Standard_Real

        Returns the maximal chordal deviation. The default value is 0.1.
        Drawings of curves or patches are made with respect to an absolute maximal chordal deviation.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Handle_Prs3d_Drawer_MaximalChordialDeviation(self, *args)


    def HasOwnMaximalChordialDeviation(self, *args):
        """
        HasOwnMaximalChordialDeviation(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has a maximal chordial deviation setting active.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnMaximalChordialDeviation(self, *args)


    def SetTypeOfHLR(self, *args):
        """
        SetTypeOfHLR(Handle_Prs3d_Drawer self, Prs3d_TypeOfHLR const theTypeOfHLR)

        Sets the type of HLR algorithm used by drawer's interactive objects

        :type theTypeOfHLR: OCC.wrapper.Prs3d.Prs3d_TypeOfHLR

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetTypeOfHLR(self, *args)


    def TypeOfHLR(self, *args):
        """
        TypeOfHLR(Handle_Prs3d_Drawer self) -> Prs3d_TypeOfHLR

        Returns the type of HLR algorithm currently in use.

        :rtype: OCC.wrapper.Prs3d.Prs3d_TypeOfHLR

        """
        return _Prs3d.Handle_Prs3d_Drawer_TypeOfHLR(self, *args)


    def HasOwnTypeOfHLR(self, *args):
        """
        HasOwnTypeOfHLR(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the type of HLR is not equal to Prs3d_TOH_NotSet.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnTypeOfHLR(self, *args)


    def SetMaximalParameterValue(self, *args):
        """
        SetMaximalParameterValue(Handle_Prs3d_Drawer self, Standard_Real const theValue)

        Defines the maximum value allowed for the first and last
        parameters of an infinite curve.

        :type theValue: float

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetMaximalParameterValue(self, *args)


    def MaximalParameterValue(self, *args):
        """
        MaximalParameterValue(Handle_Prs3d_Drawer self) -> Standard_Real

        Sets the maximum value allowed for the first and last
        parameters of an infinite curve. By default, this value is 500000.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Handle_Prs3d_Drawer_MaximalParameterValue(self, *args)


    def HasOwnMaximalParameterValue(self, *args):
        """
        HasOwnMaximalParameterValue(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has a maximum value allowed for the first and last
        parameters of an infinite curve setting active.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnMaximalParameterValue(self, *args)


    def SetIsoOnPlane(self, *args):
        """
        SetIsoOnPlane(Handle_Prs3d_Drawer self, Standard_Boolean const theIsEnabled)

        Sets IsoOnPlane on or off by setting the parameter theIsEnabled to true or false.

        :type theIsEnabled: bool

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetIsoOnPlane(self, *args)


    def IsoOnPlane(self, *args):
        """
        IsoOnPlane(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns True if the drawing of isos on planes is enabled.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_IsoOnPlane(self, *args)


    def HasOwnIsoOnPlane(self, *args):
        """
        HasOwnIsoOnPlane(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has IsoOnPlane setting active.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnIsoOnPlane(self, *args)


    def IsoOnTriangulation(self, *args):
        """
        IsoOnTriangulation(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns True if the drawing of isos on triangulation is enabled.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_IsoOnTriangulation(self, *args)


    def HasOwnIsoOnTriangulation(self, *args):
        """
        HasOwnIsoOnTriangulation(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has IsoOnTriangulation setting active.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnIsoOnTriangulation(self, *args)


    def SetIsoOnTriangulation(self, *args):
        """
        SetIsoOnTriangulation(Handle_Prs3d_Drawer self, Standard_Boolean const theToEnable)

        Enables or disables isolines on triangulation by setting the parameter theIsEnabled to true or false.

        :type theToEnable: bool

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetIsoOnTriangulation(self, *args)


    def SetDiscretisation(self, *args):
        """
        SetDiscretisation(Handle_Prs3d_Drawer self, Standard_Integer const theValue)

        Sets the discretisation parameter theValue.

        :type theValue: int

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetDiscretisation(self, *args)


    def Discretisation(self, *args):
        """
        Discretisation(Handle_Prs3d_Drawer self) -> Standard_Integer

        Returns the discretisation setting. 

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Handle_Prs3d_Drawer_Discretisation(self, *args)


    def HasOwnDiscretisation(self, *args):
        """
        HasOwnDiscretisation(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has discretisation setting active.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnDiscretisation(self, *args)


    def SetDeviationCoefficient(self, *args):
        """
        SetDeviationCoefficient(Handle_Prs3d_Drawer self, Standard_Real const theCoefficient)
        SetDeviationCoefficient(Handle_Prs3d_Drawer self)

        Sets the hasOwnDeviationCoefficient flag to Standard_False


        """
        return _Prs3d.Handle_Prs3d_Drawer_SetDeviationCoefficient(self, *args)


    def DeviationCoefficient(self, *args):
        """
        DeviationCoefficient(Handle_Prs3d_Drawer self) -> Standard_Real

        Returns the deviation coefficient.
        Drawings of curves or patches are made with respect
        to a maximal chordal deviation. A Deviation coefficient
        is used in the shading display mode. The shape is
        seen decomposed into triangles. These are used to
        calculate reflection of light from the surface of the
        object. The triangles are formed from chords of the
        curves in the shape. The deviation coefficient gives
        the highest value of the angle with which a chord can
        deviate from a tangent to a   curve. If this limit is
        reached, a new triangle is begun.
        This deviation is absolute and is set through the
        method: SetMaximalChordialDeviation. The default value is 0.001.
        In drawing shapes, however, you are allowed to ask
        for a relative deviation. This deviation will be:
        SizeOfObject * DeviationCoefficient.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Handle_Prs3d_Drawer_DeviationCoefficient(self, *args)


    def HasOwnDeviationCoefficient(self, *args):
        """
        HasOwnDeviationCoefficient(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if there is a local setting for deviation
        coefficient in this framework for a specific interactive object.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnDeviationCoefficient(self, *args)


    def PreviousDeviationCoefficient(self, *args):
        """
        PreviousDeviationCoefficient(Handle_Prs3d_Drawer self) -> Standard_Real

        Saves the previous value used for the chordal
        deviation coefficient. 

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Handle_Prs3d_Drawer_PreviousDeviationCoefficient(self, *args)


    def UpdatePreviousDeviationCoefficient(self, *args):
        """
        UpdatePreviousDeviationCoefficient(Handle_Prs3d_Drawer self)

        Updates the previous value used for the chordal deviation coefficient to the current state.


        """
        return _Prs3d.Handle_Prs3d_Drawer_UpdatePreviousDeviationCoefficient(self, *args)


    def SetHLRDeviationCoefficient(self, *args):
        """
        SetHLRDeviationCoefficient(Handle_Prs3d_Drawer self, Standard_Real const theCoefficient)
        SetHLRDeviationCoefficient(Handle_Prs3d_Drawer self)

        Sets the hasOwnHLRDeviationCoefficient flag to Standard_False 


        """
        return _Prs3d.Handle_Prs3d_Drawer_SetHLRDeviationCoefficient(self, *args)


    def HLRDeviationCoefficient(self, *args):
        """
        HLRDeviationCoefficient(Handle_Prs3d_Drawer self) -> Standard_Real

        Returns the real number value of the hidden line
        removal deviation coefficient in this framework, if the flag
        hasOwnHLRDeviationCoefficient is true or there is no Link.
        Else the shape's HLR deviation coefficient is used.
        A Deviation coefficient is used in the shading display
        mode. The shape is seen decomposed into triangles.
        These are used to calculate reflection of light from the
        surface of the object.
        The triangles are formed from chords of the curves in
        the shape. The deviation coefficient give the highest
        value of the angle with which a chord can deviate
        from a tangent to a curve. If this limit is reached, a new triangle is begun.
        To find the hidden lines, hidden line display mode
        entails recalculation of the view at each different projector perspective.
        Since hidden lines entail calculations of more than
        usual complexity to decompose them into these
        triangles, a deviation coefficient allowing greater
        tolerance is used. This increases efficiency in calculation.
        The Default value is 0.02.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Handle_Prs3d_Drawer_HLRDeviationCoefficient(self, *args)


    def HasOwnHLRDeviationCoefficient(self, *args):
        """
        HasOwnHLRDeviationCoefficient(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the there is a setting for HLR deviation
        coefficient in this framework for a specific interactive object.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnHLRDeviationCoefficient(self, *args)


    def PreviousHLRDeviationCoefficient(self, *args):
        """
        PreviousHLRDeviationCoefficient(Handle_Prs3d_Drawer self) -> Standard_Real

        Returns the previous value of the hidden line removal deviation coefficient.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Handle_Prs3d_Drawer_PreviousHLRDeviationCoefficient(self, *args)


    def SetDeviationAngle(self, *args):
        """
        SetDeviationAngle(Handle_Prs3d_Drawer self, Standard_Real const theAngle)
        SetDeviationAngle(Handle_Prs3d_Drawer self)

        Sets the hasOwnDeviationAngle flag to Standard_False


        """
        return _Prs3d.Handle_Prs3d_Drawer_SetDeviationAngle(self, *args)


    def DeviationAngle(self, *args):
        """
        DeviationAngle(Handle_Prs3d_Drawer self) -> Standard_Real

        Returns the value for deviation angle.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Handle_Prs3d_Drawer_DeviationAngle(self, *args)


    def HasOwnDeviationAngle(self, *args):
        """
        HasOwnDeviationAngle(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the there is a local setting for deviation
        angle in this framework for a specific interactive object.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnDeviationAngle(self, *args)


    def PreviousDeviationAngle(self, *args):
        """
        PreviousDeviationAngle(Handle_Prs3d_Drawer self) -> Standard_Real

        Returns the previous deviation angle

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Handle_Prs3d_Drawer_PreviousDeviationAngle(self, *args)


    def UpdatePreviousDeviationAngle(self, *args):
        """
        UpdatePreviousDeviationAngle(Handle_Prs3d_Drawer self)

        Updates the previous deviation angle to the current value


        """
        return _Prs3d.Handle_Prs3d_Drawer_UpdatePreviousDeviationAngle(self, *args)


    def SetHLRAngle(self, *args):
        """
        SetHLRAngle(Handle_Prs3d_Drawer self, Standard_Real const theAngle)
        SetHLRAngle(Handle_Prs3d_Drawer self)

        Sets the hasOwnHLRDeviationAngle flag to Standard_False


        """
        return _Prs3d.Handle_Prs3d_Drawer_SetHLRAngle(self, *args)


    def HLRAngle(self, *args):
        """
        HLRAngle(Handle_Prs3d_Drawer self) -> Standard_Real

        Returns the real number value of the deviation angle
        in hidden line removal views. The default value is 20 * M_PI / 180.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Handle_Prs3d_Drawer_HLRAngle(self, *args)


    def HasOwnHLRDeviationAngle(self, *args):
        """
        HasOwnHLRDeviationAngle(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the there is a setting for HLR deviation
        angle in this framework for a specific interactive object.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnHLRDeviationAngle(self, *args)


    def PreviousHLRDeviationAngle(self, *args):
        """
        PreviousHLRDeviationAngle(Handle_Prs3d_Drawer self) -> Standard_Real

        Returns the previous value of the HLR deviation angle.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Handle_Prs3d_Drawer_PreviousHLRDeviationAngle(self, *args)


    def SetAutoTriangulation(self, *args):
        """
        SetAutoTriangulation(Handle_Prs3d_Drawer self, Standard_Boolean const theIsEnabled)

        Sets IsAutoTriangulated on or off by setting the parameter theIsEnabled to true or false.
        If this flag is True automatic re-triangulation with deflection-check logic will be applied.
        Else this feature will be disable and triangulation is expected to be computed by application itself
        and no shading presentation at all if unavailable.

        :type theIsEnabled: bool

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetAutoTriangulation(self, *args)


    def IsAutoTriangulation(self, *args):
        """
        IsAutoTriangulation(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns True if automatic triangulation is enabled.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_IsAutoTriangulation(self, *args)


    def HasOwnIsAutoTriangulation(self, *args):
        """
        HasOwnIsAutoTriangulation(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has IsoOnPlane setting active.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnIsAutoTriangulation(self, *args)


    def UIsoAspect(self, *args):
        """
        Defines the attributes which are used when drawing an
        U isoparametric curve of a face. Defines the number
        of U isoparametric curves to be drawn for a single face.
        The LineAspect for U isoparametric lines can be edited
        (methods SetColor, SetTypeOfLine, SetWidth, SetNumber)
        The default values are:
        COLOR       : Quantity_NOC_GRAY75
        TYPE OF LINE: Aspect_TOL_SOLID
        WIDTH       : 0.5

        These attributes are used by the following algorithms:
        Prs3d_WFDeflectionSurface
        Prs3d_WFDeflectionRestrictedFace

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_IsoAspect

        """
        res = _Prs3d.Handle_Prs3d_Drawer_UIsoAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetUIsoAspect(self, *args):
        """
        SetUIsoAspect(Handle_Prs3d_Drawer self, Handle_Prs3d_IsoAspect theAspect)

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_IsoAspect

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetUIsoAspect(self, *args)


    def HasOwnUIsoAspect(self, *args):
        """
        HasOwnUIsoAspect(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        UIso aspect that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnUIsoAspect(self, *args)


    def VIsoAspect(self, *args):
        """
        Defines the attributes which are used when drawing an
        V isoparametric curve of a face. Defines the number
        of V isoparametric curves to be drawn for a single face.
        The LineAspect for V isoparametric lines can be edited
        (methods SetColor, SetTypeOfLine, SetWidth, SetNumber)
        The default values are:
        COLOR       : Quantity_NOC_GRAY82
        TYPE OF LINE: Aspect_TOL_SOLID
        WIDTH       : 0.5

        These attributes are used by the following algorithms:
        Prs3d_WFDeflectionSurface
        Prs3d_WFDeflectionRestrictedFace

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_IsoAspect

        """
        res = _Prs3d.Handle_Prs3d_Drawer_VIsoAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetVIsoAspect(self, *args):
        """
        SetVIsoAspect(Handle_Prs3d_Drawer self, Handle_Prs3d_IsoAspect theAspect)

        Sets the appearance of V isoparameters - theAspect.

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_IsoAspect

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetVIsoAspect(self, *args)


    def HasOwnVIsoAspect(self, *args):
        """
        HasOwnVIsoAspect(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        VIso aspect that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnVIsoAspect(self, *args)


    def WireAspect(self, *args):
        """
        Returns wire aspect settings.
        The LineAspect for the free boundaries can be edited.
        The default values are:
        Color: Quantity_NOC_GREEN
        Type of line: Aspect_TOL_SOLID
        Width: 1.0
        These attributes are used by the algorithm Prs3d_WFShape.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        res = _Prs3d.Handle_Prs3d_Drawer_WireAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetWireAspect(self, *args):
        """
        SetWireAspect(Handle_Prs3d_Drawer self, Handle_Prs3d_LineAspect theAspect)

        Sets the parameter theAspect for display of wires.

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetWireAspect(self, *args)


    def HasOwnWireAspect(self, *args):
        """
        HasOwnWireAspect(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        wire aspect that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnWireAspect(self, *args)


    def SetWireDraw(self, *args):
        """
        SetWireDraw(Handle_Prs3d_Drawer self, Standard_Boolean const theIsEnabled)

        Sets WireDraw on or off by setting the parameter theIsEnabled to true or false.

        :type theIsEnabled: bool

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetWireDraw(self, *args)


    def WireDraw(self, *args):
        """
        WireDraw(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns True if the drawing of the wire is enabled.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_WireDraw(self, *args)


    def HasOwnWireDraw(self, *args):
        """
        HasOwnWireDraw(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        "draw wires" flag that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnWireDraw(self, *args)


    def PointAspect(self, *args):
        """
        Returns the point aspect setting. The default values are
        Color: Quantity_NOC_YELLOW
        Type of marker: Aspect_TOM_PLUS
        Scale: 1.0
        These attributes are used by the algorithms Prs3d_Point.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_PointAspect

        """
        res = _Prs3d.Handle_Prs3d_Drawer_PointAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetPointAspect(self, *args):
        """
        SetPointAspect(Handle_Prs3d_Drawer self, Handle_Prs3d_PointAspect theAspect)

        Sets the parameter theAspect for display attributes of points

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_PointAspect

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetPointAspect(self, *args)


    def HasOwnPointAspect(self, *args):
        """
        HasOwnPointAspect(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        point aspect that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnPointAspect(self, *args)


    def LineAspect(self, *args):
        """
        Returns settings for line aspects.
        These settings can be edited. The default values are:
        Color: Quantity_NOC_YELLOW
        Type of line: Aspect_TOL_SOLID
        Width: 1.0
        These attributes are used by the following algorithms:
        Prs3d_Curve
        Prs3d_Line
        Prs3d_HLRShape

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        res = _Prs3d.Handle_Prs3d_Drawer_LineAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetLineAspect(self, *args):
        """
        SetLineAspect(Handle_Prs3d_Drawer self, Handle_Prs3d_LineAspect theAspect)

        Sets the parameter theAspect for display attributes of lines.

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetLineAspect(self, *args)


    def HasOwnLineAspect(self, *args):
        """
        HasOwnLineAspect(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        line aspect that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnLineAspect(self, *args)


    def TextAspect(self, *args):
        """
        Returns settings for text aspect.
        These settings can be edited. The default value is:
        - Color: Quantity_NOC_YELLOW

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_TextAspect

        """
        res = _Prs3d.Handle_Prs3d_Drawer_TextAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetTextAspect(self, *args):
        """
        SetTextAspect(Handle_Prs3d_Drawer self, Handle_Prs3d_TextAspect theAspect)

        Sets the parameter theAspect for display attributes of text.

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_TextAspect

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetTextAspect(self, *args)


    def HasOwnTextAspect(self, *args):
        """
        HasOwnTextAspect(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        text aspect that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnTextAspect(self, *args)


    def ShadingAspect(self, *args):
        """
        Returns settings for shading aspects.
        These settings can be edited. The default values are:
        -   Color: Quantity_NOC_YELLOW
        -   Material: Graphic3d_NOM_BRASS
        Shading aspect is obtained through decomposition of
        3d faces into triangles, each side of each triangle
        being a chord of the corresponding curved edge in the face.
        Reflection of light in each projector perspective is then calculated for each of the
        resultant triangular planes.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_ShadingAspect

        """
        res = _Prs3d.Handle_Prs3d_Drawer_ShadingAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetShadingAspect(self, *args):
        """
        SetShadingAspect(Handle_Prs3d_Drawer self, Handle_Prs3d_ShadingAspect theAspect)

        Sets the parameter theAspect for display attributes of shading.

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_ShadingAspect

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetShadingAspect(self, *args)


    def HasOwnShadingAspect(self, *args):
        """
        HasOwnShadingAspect(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        shading aspect that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnShadingAspect(self, *args)


    def SeenLineAspect(self, *args):
        """
        Returns settings for seen line aspects.
        These settings can be edited. The default values are:
        Color: Quantity_NOC_YELLOW
        Type of line: Aspect_TOL_SOLID
        Width: 1.0

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        res = _Prs3d.Handle_Prs3d_Drawer_SeenLineAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetSeenLineAspect(self, *args):
        """
        SetSeenLineAspect(Handle_Prs3d_Drawer self, Handle_Prs3d_LineAspect theAspect)

        Sets the parameter theAspect for the display of seen lines in hidden line removal mode.

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetSeenLineAspect(self, *args)


    def HasOwnSeenLineAspect(self, *args):
        """
        HasOwnSeenLineAspect(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        seen line aspect that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnSeenLineAspect(self, *args)


    def PlaneAspect(self, *args):
        """
        Returns settings for the appearance of planes.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_PlaneAspect

        """
        res = _Prs3d.Handle_Prs3d_Drawer_PlaneAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetPlaneAspect(self, *args):
        """
        SetPlaneAspect(Handle_Prs3d_Drawer self, Handle_Prs3d_PlaneAspect theAspect)

        Sets the parameter theAspect for the display of planes. 

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_PlaneAspect

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetPlaneAspect(self, *args)


    def HasOwnPlaneAspect(self, *args):
        """
        HasOwnPlaneAspect(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        plane aspect that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnPlaneAspect(self, *args)


    def ArrowAspect(self, *args):
        """
        Returns the attributes for display of arrows.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_ArrowAspect

        """
        res = _Prs3d.Handle_Prs3d_Drawer_ArrowAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetArrowAspect(self, *args):
        """
        SetArrowAspect(Handle_Prs3d_Drawer self, Handle_Prs3d_ArrowAspect theAspect)

        Sets the parameter theAspect for display attributes of arrows.

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_ArrowAspect

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetArrowAspect(self, *args)


    def HasOwnArrowAspect(self, *args):
        """
        HasOwnArrowAspect(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        arrow aspect that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnArrowAspect(self, *args)


    def SetLineArrowDraw(self, *args):
        """
        SetLineArrowDraw(Handle_Prs3d_Drawer self, Standard_Boolean const theIsEnabled)

        Enables the drawing of an arrow at the end of each line.
        By default the arrows are not drawn.

        :type theIsEnabled: bool

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetLineArrowDraw(self, *args)


    def LineArrowDraw(self, *args):
        """
        LineArrowDraw(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns True if drawing an arrow at the end of each edge is enabled
        and False otherwise (the default).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_LineArrowDraw(self, *args)


    def HasOwnLineArrowDraw(self, *args):
        """
        HasOwnLineArrowDraw(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        "draw arrow" flag that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnLineArrowDraw(self, *args)


    def HiddenLineAspect(self, *args):
        """
        Returns settings for hidden line aspects.
        These settings can be edited. The default values are:
        Color: Quantity_NOC_YELLOW
        Type of line: Aspect_TOL_DASH
        Width: 1.0

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        res = _Prs3d.Handle_Prs3d_Drawer_HiddenLineAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetHiddenLineAspect(self, *args):
        """
        SetHiddenLineAspect(Handle_Prs3d_Drawer self, Handle_Prs3d_LineAspect theAspect)

        Sets the parameter theAspect for the display of hidden lines in hidden line removal mode.

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetHiddenLineAspect(self, *args)


    def HasOwnHiddenLineAspect(self, *args):
        """
        HasOwnHiddenLineAspect(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        hidden lines aspect that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnHiddenLineAspect(self, *args)


    def DrawHiddenLine(self, *args):
        """
        DrawHiddenLine(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns Standard_True if the hidden lines are to be drawn.
        By default the hidden lines are not drawn.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_DrawHiddenLine(self, *args)


    def EnableDrawHiddenLine(self, *args):
        """
        EnableDrawHiddenLine(Handle_Prs3d_Drawer self)

        Enables the DrawHiddenLine function.


        """
        return _Prs3d.Handle_Prs3d_Drawer_EnableDrawHiddenLine(self, *args)


    def DisableDrawHiddenLine(self, *args):
        """
        DisableDrawHiddenLine(Handle_Prs3d_Drawer self)

        Disables the DrawHiddenLine function.


        """
        return _Prs3d.Handle_Prs3d_Drawer_DisableDrawHiddenLine(self, *args)


    def HasOwnDrawHiddenLine(self, *args):
        """
        HasOwnDrawHiddenLine(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        "draw hidden lines" flag that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnDrawHiddenLine(self, *args)


    def VectorAspect(self, *args):
        """
        Returns settings for the appearance of vectors.
        These settings can be edited. The default values are:
        Color: Quantity_NOC_SKYBLUE
        Type of line: Aspect_TOL_SOLID
        Width: 1.0

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        res = _Prs3d.Handle_Prs3d_Drawer_VectorAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetVectorAspect(self, *args):
        """
        SetVectorAspect(Handle_Prs3d_Drawer self, Handle_Prs3d_LineAspect theAspect)

        Sets the modality theAspect for the display of vectors.

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetVectorAspect(self, *args)


    def HasOwnVectorAspect(self, *args):
        """
        HasOwnVectorAspect(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        vector aspect that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnVectorAspect(self, *args)


    def SetVertexDrawMode(self, *args):
        """
        SetVertexDrawMode(Handle_Prs3d_Drawer self, Prs3d_VertexDrawMode const theMode)

        Sets the mode of visualization of vertices of a TopoDS_Shape instance.
        By default, only stand-alone vertices (not belonging topologically to an edge) are drawn,
        that corresponds to Prs3d_VDM_Standalone mode. 
        Switching to Prs3d_VDM_Standalone mode makes all shape's vertices visible.
        To inherit this parameter from the global drawer instance ("the link") when it is present,
        Prs3d_VDM_Inherited value should be used.

        :type theMode: OCC.wrapper.Prs3d.Prs3d_VertexDrawMode

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetVertexDrawMode(self, *args)


    def VertexDrawMode(self, *args):
        """
        VertexDrawMode(Handle_Prs3d_Drawer self) -> Prs3d_VertexDrawMode

        Returns the current mode of visualization of vertices of a TopoDS_Shape instance.

        :rtype: OCC.wrapper.Prs3d.Prs3d_VertexDrawMode

        """
        return _Prs3d.Handle_Prs3d_Drawer_VertexDrawMode(self, *args)


    def HasOwnVertexDrawMode(self, *args):
        """
        HasOwnVertexDrawMode(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the vertex draw mode is not equal to <b>Prs3d_VDM_Inherited</b>. 
        This means that individual vertex draw mode value (i.e. not inherited from the global 
        drawer) is used for a specific interactive object.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnVertexDrawMode(self, *args)


    def DatumAspect(self, *args):
        """
        Returns settings for the appearance of datums.
        These settings can be edited. The default values for the three axes are:
        Color: Quantity_NOC_PEACHPUFF
        Type of line: Aspect_TOL_SOLID
        Width: 1.0

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_DatumAspect

        """
        res = _Prs3d.Handle_Prs3d_Drawer_DatumAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetDatumAspect(self, *args):
        """
        SetDatumAspect(Handle_Prs3d_Drawer self, Handle_Prs3d_DatumAspect theAspect)

        Sets the modality theAspect for the display of datums.

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_DatumAspect

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetDatumAspect(self, *args)


    def HasOwnDatumAspect(self, *args):
        """
        HasOwnDatumAspect(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        datum aspect that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnDatumAspect(self, *args)


    def SectionAspect(self, *args):
        """
        The LineAspect for the wire can be edited.
        The default values are:
        Color: Quantity_NOC_ORANGE
        Type of line: Aspect_TOL_SOLID
        Width: 1.0
        These attributes are used by the algorithm Prs3d_WFShape.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        res = _Prs3d.Handle_Prs3d_Drawer_SectionAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetSectionAspect(self, *args):
        """
        SetSectionAspect(Handle_Prs3d_Drawer self, Handle_Prs3d_LineAspect theAspect)

        Sets the parameter theAspect for display attributes of sections. 

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetSectionAspect(self, *args)


    def HasOwnSectionAspect(self, *args):
        """
        HasOwnSectionAspect(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        section aspect that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnSectionAspect(self, *args)


    def SetFreeBoundaryAspect(self, *args):
        """
        SetFreeBoundaryAspect(Handle_Prs3d_Drawer self, Handle_Prs3d_LineAspect theAspect)

        Sets the parameter theAspect for the display of free boundaries.
        The method sets aspect owned by the drawer that will be used during
        visualization instead of the one set in link.

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetFreeBoundaryAspect(self, *args)


    def FreeBoundaryAspect(self, *args):
        """
        Returns the values for presentation of free boundaries,
        in other words, boundaries which are not shared.
        The LineAspect for the  free boundaries can be edited.
        The default values are:
        Color: Quantity_NOC_GREEN
        Type of line: Aspect_TOL_SOLID
        Width: 1.0
        These attributes are used by the algorithm Prs3d_WFShape

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        res = _Prs3d.Handle_Prs3d_Drawer_FreeBoundaryAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasOwnFreeBoundaryAspect(self, *args):
        """
        HasOwnFreeBoundaryAspect(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        free boundaries aspect that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnFreeBoundaryAspect(self, *args)


    def SetFreeBoundaryDraw(self, *args):
        """
        SetFreeBoundaryDraw(Handle_Prs3d_Drawer self, Standard_Boolean const theIsEnabled)

        Enables or disables drawing of free boundaries for shading presentations.
        The method sets drawing flag owned by the drawer that will be used during
        visualization instead of the one set in link.
        theIsEnabled is a boolean flag indicating whether the free boundaries should be
        drawn or not.

        :type theIsEnabled: bool

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetFreeBoundaryDraw(self, *args)


    def FreeBoundaryDraw(self, *args):
        """
        FreeBoundaryDraw(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns True if the drawing of the free boundaries is enabled
        True is the default setting.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_FreeBoundaryDraw(self, *args)


    def HasOwnFreeBoundaryDraw(self, *args):
        """
        HasOwnFreeBoundaryDraw(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        "draw free boundaries" flag that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnFreeBoundaryDraw(self, *args)


    def SetUnFreeBoundaryAspect(self, *args):
        """
        SetUnFreeBoundaryAspect(Handle_Prs3d_Drawer self, Handle_Prs3d_LineAspect theAspect)

        Sets the parameter theAspect for the display of shared boundaries.
        The method sets aspect owned by the drawer that will be used during
        visualization instead of the one set in link.

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetUnFreeBoundaryAspect(self, *args)


    def UnFreeBoundaryAspect(self, *args):
        """
        Returns settings for shared boundary line aspects.
        The LineAspect for the unfree boundaries can be edited.
        The default values are:
        Color: Quantity_NOC_YELLOW
        Type of line: Aspect_TOL_SOLID
        Width: 1.
        These attributes are used by the algorithm Prs3d_WFShape

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        res = _Prs3d.Handle_Prs3d_Drawer_UnFreeBoundaryAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasOwnUnFreeBoundaryAspect(self, *args):
        """
        HasOwnUnFreeBoundaryAspect(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        unfree boundaries aspect that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnUnFreeBoundaryAspect(self, *args)


    def SetUnFreeBoundaryDraw(self, *args):
        """
        SetUnFreeBoundaryDraw(Handle_Prs3d_Drawer self, Standard_Boolean const theIsEnabled)

        Enables or disables drawing of shared boundaries for shading presentations.
        The method sets drawing flag owned by the drawer that will be used during
        visualization instead of the one set in link.
        theIsEnabled is a boolean flag indicating whether the shared boundaries should be drawn or not.

        :type theIsEnabled: bool

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetUnFreeBoundaryDraw(self, *args)


    def UnFreeBoundaryDraw(self, *args):
        """
        UnFreeBoundaryDraw(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns True if the drawing of the shared boundaries is enabled.
        True is the default setting.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_UnFreeBoundaryDraw(self, *args)


    def HasOwnUnFreeBoundaryDraw(self, *args):
        """
        HasOwnUnFreeBoundaryDraw(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        "draw shared boundaries" flag that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnUnFreeBoundaryDraw(self, *args)


    def SetFaceBoundaryAspect(self, *args):
        """
        SetFaceBoundaryAspect(Handle_Prs3d_Drawer self, Handle_Prs3d_LineAspect theAspect)

        Sets line aspect for face boundaries.
        The method sets line aspect owned by the drawer that will be used during
        visualization instead of the one set in link.
        theAspect is the line aspect that determines the look of the face boundaries.

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetFaceBoundaryAspect(self, *args)


    def FaceBoundaryAspect(self, *args):
        """
        Returns line aspect of face boundaries.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        res = _Prs3d.Handle_Prs3d_Drawer_FaceBoundaryAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasOwnFaceBoundaryAspect(self, *args):
        """
        HasOwnFaceBoundaryAspect(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        face boundaries aspect that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnFaceBoundaryAspect(self, *args)


    def SetFaceBoundaryDraw(self, *args):
        """
        SetFaceBoundaryDraw(Handle_Prs3d_Drawer self, Standard_Boolean const theIsEnabled)

        Enables or disables face boundary drawing for shading presentations. 
        The method sets drawing flag owned by the drawer that will be used during
        visualization instead of the one set in link.
        theIsEnabled is a boolean flag indicating whether the face boundaries should be drawn or not.

        :type theIsEnabled: bool

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetFaceBoundaryDraw(self, *args)


    def FaceBoundaryDraw(self, *args):
        """
        FaceBoundaryDraw(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Checks whether the face boundary drawing is enabled or not.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_FaceBoundaryDraw(self, *args)


    def HasOwnFaceBoundaryDraw(self, *args):
        """
        HasOwnFaceBoundaryDraw(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        "draw face boundaries" flag that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnFaceBoundaryDraw(self, *args)


    def DimensionAspect(self, *args):
        """
        Returns settings for the appearance of dimensions. 

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_DimensionAspect

        """
        res = _Prs3d.Handle_Prs3d_Drawer_DimensionAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetDimensionAspect(self, *args):
        """
        SetDimensionAspect(Handle_Prs3d_Drawer self, Handle_Prs3d_DimensionAspect theAspect)

        Sets the settings for the appearance of dimensions.
        The method sets aspect owned by the drawer that will be used during
        visualization instead of the one set in link.

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_DimensionAspect

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetDimensionAspect(self, *args)


    def HasOwnDimensionAspect(self, *args):
        """
        HasOwnDimensionAspect(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        the appearance of dimensions that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnDimensionAspect(self, *args)


    def SetDimLengthModelUnits(self, *args):
        """
        SetDimLengthModelUnits(Handle_Prs3d_Drawer self, TCollection_AsciiString theUnits)

        Sets dimension length model units for computing of dimension presentation.
        The method sets value owned by the drawer that will be used during
        visualization instead of the one set in link.

        :type theUnits: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetDimLengthModelUnits(self, *args)


    def SetDimAngleModelUnits(self, *args):
        """
        SetDimAngleModelUnits(Handle_Prs3d_Drawer self, TCollection_AsciiString theUnits)

        Sets dimension angle model units for computing of dimension presentation.
        The method sets value owned by the drawer that will be used during
        visualization instead of the one set in link.

        :type theUnits: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetDimAngleModelUnits(self, *args)


    def DimLengthModelUnits(self, *args):
        """
        Returns length model units for the dimension presentation. 

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Prs3d.Handle_Prs3d_Drawer_DimLengthModelUnits(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DimAngleModelUnits(self, *args):
        """
        Returns angle model units for the dimension presentation. 

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Prs3d.Handle_Prs3d_Drawer_DimAngleModelUnits(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasOwnDimLengthModelUnits(self, *args):
        """
        HasOwnDimLengthModelUnits(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        dimension length model units that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnDimLengthModelUnits(self, *args)


    def HasOwnDimAngleModelUnits(self, *args):
        """
        HasOwnDimAngleModelUnits(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        dimension angle model units that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnDimAngleModelUnits(self, *args)


    def SetDimLengthDisplayUnits(self, *args):
        """
        SetDimLengthDisplayUnits(Handle_Prs3d_Drawer self, TCollection_AsciiString theUnits)

        Sets length units in which value for dimension presentation is displayed.
        The method sets value owned by the drawer that will be used during
        visualization instead of the one set in link.

        :type theUnits: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetDimLengthDisplayUnits(self, *args)


    def SetDimAngleDisplayUnits(self, *args):
        """
        SetDimAngleDisplayUnits(Handle_Prs3d_Drawer self, TCollection_AsciiString theUnits)

        Sets angle units in which value for dimension presentation is displayed.
        The method sets value owned by the drawer that will be used during
        visualization instead of the one set in link.

        :type theUnits: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetDimAngleDisplayUnits(self, *args)


    def DimLengthDisplayUnits(self, *args):
        """
        Returns length units in which dimension presentation is displayed.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Prs3d.Handle_Prs3d_Drawer_DimLengthDisplayUnits(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DimAngleDisplayUnits(self, *args):
        """
        Returns angle units in which dimension presentation is displayed.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Prs3d.Handle_Prs3d_Drawer_DimAngleDisplayUnits(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasOwnDimLengthDisplayUnits(self, *args):
        """
        HasOwnDimLengthDisplayUnits(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        length units in which dimension presentation is displayed
        that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnDimLengthDisplayUnits(self, *args)


    def HasOwnDimAngleDisplayUnits(self, *args):
        """
        HasOwnDimAngleDisplayUnits(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the drawer has its own attribute for
        angle units in which dimension presentation is displayed
        that overrides the one in the link.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasOwnDimAngleDisplayUnits(self, *args)


    def Link(self, *args):
        """
        Returns the drawer to which the current object references.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer

        """
        res = _Prs3d.Handle_Prs3d_Drawer_Link(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasLink(self, *args):
        """
        HasLink(Handle_Prs3d_Drawer self) -> Standard_Boolean

        Returns true if the current object has a link on the other drawer.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_HasLink(self, *args)


    def SetLink(self, *args):
        """
        SetLink(Handle_Prs3d_Drawer self, Handle_Prs3d_Drawer theDrawer)

        Sets theDrawer as a link to which the current object references.

        :type theDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetLink(self, *args)


    def ClearLocalAttributes(self, *args):
        """
        ClearLocalAttributes(Handle_Prs3d_Drawer self)

        Removes local attributes. 


        """
        return _Prs3d.Handle_Prs3d_Drawer_ClearLocalAttributes(self, *args)


    def SetShaderProgram(self, *args):
        """
        SetShaderProgram(Handle_Prs3d_Drawer self, Handle_Graphic3d_ShaderProgram theProgram, Graphic3d_GroupAspect const theAspect, bool const theToOverrideDefaults=False) -> bool

        Assign shader program for specified type of primitives.
        @param theProgram new program to set (might be NULL)
        @param theAspect  the type of primitives
        @param theToOverrideDefaults if true then non-overridden attributes using defaults will be allocated and copied from the Link;
        otherwise, only already customized attributes will be changed
        @return TRUE if presentation should be recomputed after creating aspects not previously customized (if theToOverrideDefaults is also TRUE)

        :type theProgram: OCC.wrapper.Graphic3d.Handle_Graphic3d_ShaderProgram
        :type theAspect: OCC.wrapper.Graphic3d.Graphic3d_GroupAspect
        :type theToOverrideDefaults: const bool
        :rtype: bool

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetShaderProgram(self, *args)


    def SetShadingModel(self, *args):
        """
        SetShadingModel(Handle_Prs3d_Drawer self, Graphic3d_TypeOfShadingModel theModel, bool theToOverrideDefaults=False) -> bool

        Sets Shading Model type for the shading aspect.

        :type theModel: OCC.wrapper.Graphic3d.Graphic3d_TypeOfShadingModel
        :type theToOverrideDefaults: bool
        :rtype: bool

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetShadingModel(self, *args)


    def Method(self, *args):
        """
        Method(Handle_Prs3d_Drawer self) -> Aspect_TypeOfHighlightMethod

        Returns highlight method, Aspect_TOHM_COLOR by default.

        :rtype: OCC.wrapper.Aspect.Aspect_TypeOfHighlightMethod

        """
        return _Prs3d.Handle_Prs3d_Drawer_Method(self, *args)


    def SetMethod(self, *args):
        """
        SetMethod(Handle_Prs3d_Drawer self, Aspect_TypeOfHighlightMethod const theMethod)

        Changes highlight method to the given one.

        :type theMethod: OCC.wrapper.Aspect.Aspect_TypeOfHighlightMethod

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetMethod(self, *args)


    def ColorRGBA(self, *args):
        """
        Returns basic presentation color (including alpha channel).

        :rtype: OCC.wrapper.Quantity.Quantity_ColorRGBA

        """
        res = _Prs3d.Handle_Prs3d_Drawer_ColorRGBA(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Color(self, *args):
        """
        Returns basic presentation color, Quantity_NOC_WHITE by default.

        :rtype: OCC.wrapper.Quantity.Quantity_Color

        """
        res = _Prs3d.Handle_Prs3d_Drawer_Color(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetColor(self, *args):
        """
        SetColor(Handle_Prs3d_Drawer self, Quantity_Color theColor)

        Sets basic presentation color (RGB components, does not modifies transparency).

        :type theColor: OCC.wrapper.Quantity.Quantity_Color

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetColor(self, *args)


    def Transparency(self, *args):
        """
        Transparency(Handle_Prs3d_Drawer self) -> Standard_ShortReal

        Returns basic presentation transparency (0 - opaque, 1 - fully transparent), 0 by default (opaque).

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Prs3d.Handle_Prs3d_Drawer_Transparency(self, *args)


    def SetTransparency(self, *args):
        """
        SetTransparency(Handle_Prs3d_Drawer self, Standard_ShortReal const theTranspCoef)

        Sets basic presentation transparency (0 - opaque, 1 - fully transparent).

        :type theTranspCoef: float

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetTransparency(self, *args)


    def ZLayer(self, *args):
        """
        ZLayer(Handle_Prs3d_Drawer self) -> Graphic3d_ZLayerId

        Returns presentation Zlayer, Graphic3d_ZLayerId_Default by default.
        Graphic3d_ZLayerId_UNKNOWN means undefined (a layer of main presentation to be used).

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _Prs3d.Handle_Prs3d_Drawer_ZLayer(self, *args)


    def SetZLayer(self, *args):
        """
        SetZLayer(Handle_Prs3d_Drawer self, Graphic3d_ZLayerId const theLayer)

        Sets presentation Zlayer.

        :type theLayer: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetZLayer(self, *args)


    def DisplayMode(self, *args):
        """
        DisplayMode(Handle_Prs3d_Drawer self) -> Standard_Integer

        Returns display mode, 0 by default.
        -1 means undefined (main display mode of presentation to be used).

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Handle_Prs3d_Drawer_DisplayMode(self, *args)


    def SetDisplayMode(self, *args):
        """
        SetDisplayMode(Handle_Prs3d_Drawer self, Standard_Integer const theMode)

        Sets display mode.

        :type theMode: int

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetDisplayMode(self, *args)


    def BasicFillAreaAspect(self, *args):
        """
        Return basic presentation fill area aspect, NULL by default.
        When set, might be used instead of Color() property.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectFillArea3d

        """
        res = _Prs3d.Handle_Prs3d_Drawer_BasicFillAreaAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetBasicFillAreaAspect(self, *args):
        """
        SetBasicFillAreaAspect(Handle_Prs3d_Drawer self, Handle_Graphic3d_AspectFillArea3d theAspect)

        Sets basic presentation fill area aspect.

        :type theAspect: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectFillArea3d

        """
        return _Prs3d.Handle_Prs3d_Drawer_SetBasicFillAreaAspect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Prs3d_Drawer self)

        Memory deallocator for transient classes


        """
        return _Prs3d.Handle_Prs3d_Drawer_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Prs3d_Drawer self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Prs3d_Drawer self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Prs3d_Drawer self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Prs3d_Drawer self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Drawer_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Prs3d_Drawer self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Prs3d.Handle_Prs3d_Drawer_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Prs3d_Drawer self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Handle_Prs3d_Drawer_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Prs3d_Drawer self)

        Increments the reference counter of this object


        """
        return _Prs3d.Handle_Prs3d_Drawer_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Prs3d_Drawer self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Handle_Prs3d_Drawer_DecrementRefCounter(self, *args)

Handle_Prs3d_Drawer_swigregister = _Prs3d.Handle_Prs3d_Drawer_swigregister
Handle_Prs3d_Drawer_swigregister(Handle_Prs3d_Drawer)

def Handle_Prs3d_Drawer_DownCast(thing):
    return _Prs3d.Handle_Prs3d_Drawer_DownCast(thing)
Handle_Prs3d_Drawer_DownCast = _Prs3d.Handle_Prs3d_Drawer_DownCast

class Handle_Prs3d_InvalidAngle(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Prs3d_InvalidAngle self)

        Nullify the handle


        """
        return _Prs3d.Handle_Prs3d_InvalidAngle_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Prs3d_InvalidAngle self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Prs3d.Handle_Prs3d_InvalidAngle_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Prs3d_InvalidAngle self, Prs3d_InvalidAngle thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Prs3d.Handle_Prs3d_InvalidAngle_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Prs3d_InvalidAngle self, Handle_Prs3d_InvalidAngle theHandle) -> Handle_Prs3d_InvalidAngle
        assign(Handle_Prs3d_InvalidAngle self, Prs3d_InvalidAngle thePtr) -> Handle_Prs3d_InvalidAngle
        assign(Handle_Prs3d_InvalidAngle self, Handle_Prs3d_InvalidAngle theHandle) -> Handle_Prs3d_InvalidAngle

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Prs3d.Handle_Prs3d_InvalidAngle_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Prs3d_InvalidAngle self) -> Prs3d_InvalidAngle

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Prs3d.Handle_Prs3d_InvalidAngle_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Prs3d_InvalidAngle self) -> Prs3d_InvalidAngle

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Prs3d.Handle_Prs3d_InvalidAngle___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Prs3d_InvalidAngle self) -> Prs3d_InvalidAngle

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Prs3d.Handle_Prs3d_InvalidAngle___ref__(self, *args)


    def __hash__(self):
        return _Prs3d.Handle_Prs3d_InvalidAngle___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Prs3d.Handle_Prs3d_InvalidAngle___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Prs3d.new_Handle_Prs3d_InvalidAngle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Prs3d.Handle_Prs3d_InvalidAngle_DownCast)
    __swig_destroy__ = _Prs3d.delete_Handle_Prs3d_InvalidAngle

    def NewInstance(self, *args):
        """
        NewInstance(Handle_Prs3d_InvalidAngle self, Standard_CString const theMessage) -> Handle_Prs3d_InvalidAngle

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_InvalidAngle

        """
        return _Prs3d.Handle_Prs3d_InvalidAngle_NewInstance(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Prs3d_InvalidAngle self) -> char const *

        :rtype: const char *

        """
        return _Prs3d.Handle_Prs3d_InvalidAngle_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Handle_Prs3d_InvalidAngle_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Handle_Prs3d_InvalidAngle_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Print(self, *args):
        """
        Print(Handle_Prs3d_InvalidAngle self, Standard_OStream & s)

        Prints on the stream <s> the exception name followed by
        the error message.
        Level: Advanced
        Warning:
        The operator "OStream& operator<< (Standard_OStream&,
        Handle(Standard_Failure)&)"
        is implemented. (This operator uses the method Print)

        :type s: OCC.wrapper.Standard.Standard_OStream

        """
        return _Prs3d.Handle_Prs3d_InvalidAngle_Print(self, *args)


    def GetMessageString(self, *args):
        """
        GetMessageString(Handle_Prs3d_InvalidAngle self) -> Standard_CString

        Returns error message

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _Prs3d.Handle_Prs3d_InvalidAngle_GetMessageString(self, *args)


    def SetMessageString(self, *args):
        """
        SetMessageString(Handle_Prs3d_InvalidAngle self, Standard_CString const aMessage)

        Sets error message

        :type aMessage: OCC.wrapper.Standard.Standard_CString

        """
        return _Prs3d.Handle_Prs3d_InvalidAngle_SetMessageString(self, *args)


    def Reraise(self, *args):
        """
        Reraise(Handle_Prs3d_InvalidAngle self)
        Reraise(Handle_Prs3d_InvalidAngle self, Standard_CString const aMessage)
        Reraise(Handle_Prs3d_InvalidAngle self, Standard_SStream const & aReason)

        Reraises a caught exception and changes its error message.

        :type aReason: OCC.wrapper.Standard.Standard_SStream

        """
        return _Prs3d.Handle_Prs3d_InvalidAngle_Reraise(self, *args)


    def Jump(self, *args):
        """
        Jump(Handle_Prs3d_InvalidAngle self)

        Used to throw CASCADE exception from C signal handler.
        On platforms that do not allow throwing C++ exceptions
        from this handler (e.g. Linux), uses longjump to get to
        the current active signal handler, and only then is
        converted to C++ exception.


        """
        return _Prs3d.Handle_Prs3d_InvalidAngle_Jump(self, *args)


    def Caught(self, *args):
        """
        Caught(Handle_Prs3d_InvalidAngle self) -> Handle_Standard_Failure

        Returns the last caught exception.
        Needed when exceptions are emulated by C longjumps,
        in other cases is also provided for compatibility.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Failure

        """
        return _Prs3d.Handle_Prs3d_InvalidAngle_Caught(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Prs3d_InvalidAngle self)

        Memory deallocator for transient classes


        """
        return _Prs3d.Handle_Prs3d_InvalidAngle_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Prs3d_InvalidAngle self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Prs3d_InvalidAngle self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_InvalidAngle_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Prs3d_InvalidAngle self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Prs3d_InvalidAngle self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_InvalidAngle_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Prs3d_InvalidAngle self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Prs3d.Handle_Prs3d_InvalidAngle_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Prs3d_InvalidAngle self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Handle_Prs3d_InvalidAngle_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Prs3d_InvalidAngle self)

        Increments the reference counter of this object


        """
        return _Prs3d.Handle_Prs3d_InvalidAngle_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Prs3d_InvalidAngle self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Handle_Prs3d_InvalidAngle_DecrementRefCounter(self, *args)

Handle_Prs3d_InvalidAngle_swigregister = _Prs3d.Handle_Prs3d_InvalidAngle_swigregister
Handle_Prs3d_InvalidAngle_swigregister(Handle_Prs3d_InvalidAngle)

def Handle_Prs3d_InvalidAngle_DownCast(thing):
    return _Prs3d.Handle_Prs3d_InvalidAngle_DownCast(thing)
Handle_Prs3d_InvalidAngle_DownCast = _Prs3d.Handle_Prs3d_InvalidAngle_DownCast

class Prs3d_ShadingAspect(Prs3d_BasicAspect):
    """
    A framework to define the display of shading.
    The attributes which make up this definition include:
    -   fill aspect
    -   color, and
    -   material
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Prs3d_ShadingAspect
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Prs3d_ShadingAspect(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Prs3d.Prs3d_ShadingAspect_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Prs3d.Prs3d_ShadingAspect_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Prs3d_ShadingAspect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Prs3d_ShadingAspect self) -> Prs3d_ShadingAspect
        __init__(Prs3d_ShadingAspect self, Handle_Graphic3d_AspectFillArea3d theAspect) -> Prs3d_ShadingAspect

        Constructor with initialization.

        :type theAspect: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectFillArea3d

        """
        this = _Prs3d.new_Prs3d_ShadingAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetColor(self, *args):
        """
        SetColor(Prs3d_ShadingAspect self, Quantity_Color aColor, Aspect_TypeOfFacingModel const aModel=Aspect_TOFM_BOTH_SIDE)

        Change the polygons interior color and material ambient color.

        :type aColor: OCC.wrapper.Quantity.Quantity_Color
        :type aModel: OCC.wrapper.Aspect.Aspect_TypeOfFacingModel

        """
        return _Prs3d.Prs3d_ShadingAspect_SetColor(self, *args)


    def SetMaterial(self, *args):
        """
        SetMaterial(Prs3d_ShadingAspect self, Graphic3d_MaterialAspect aMaterial, Aspect_TypeOfFacingModel const aModel=Aspect_TOFM_BOTH_SIDE)

        Change the polygons material aspect.

        :type aMaterial: OCC.wrapper.Graphic3d.Graphic3d_MaterialAspect
        :type aModel: OCC.wrapper.Aspect.Aspect_TypeOfFacingModel

        """
        return _Prs3d.Prs3d_ShadingAspect_SetMaterial(self, *args)


    def SetTransparency(self, *args):
        """
        SetTransparency(Prs3d_ShadingAspect self, Standard_Real const aValue, Aspect_TypeOfFacingModel const aModel=Aspect_TOFM_BOTH_SIDE)

        Change the polygons transparency value.
        Warning : aValue must be in the range 0,1. 0 is the default (NO transparent)

        :type aValue: float
        :type aModel: OCC.wrapper.Aspect.Aspect_TypeOfFacingModel

        """
        return _Prs3d.Prs3d_ShadingAspect_SetTransparency(self, *args)


    def Color(self, *args):
        """
        Returns the polygons color.

        :type aModel: OCC.wrapper.Aspect.Aspect_TypeOfFacingModel
        :rtype: OCC.wrapper.Quantity.Quantity_Color

        """
        res = _Prs3d.Prs3d_ShadingAspect_Color(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Material(self, *args):
        """
        Returns the polygons material aspect.

        :type aModel: OCC.wrapper.Aspect.Aspect_TypeOfFacingModel
        :rtype: OCC.wrapper.Graphic3d.Graphic3d_MaterialAspect

        """
        res = _Prs3d.Prs3d_ShadingAspect_Material(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Transparency(self, *args):
        """
        Transparency(Prs3d_ShadingAspect self, Aspect_TypeOfFacingModel const aModel=Aspect_TOFM_FRONT_SIDE) -> Standard_Real

        Returns the polygons transparency value.

        :type aModel: OCC.wrapper.Aspect.Aspect_TypeOfFacingModel
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Prs3d_ShadingAspect_Transparency(self, *args)


    def Aspect(self, *args):
        """
        Returns the polygons aspect properties.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectFillArea3d

        """
        res = _Prs3d.Prs3d_ShadingAspect_Aspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetAspect(self, *args):
        """
        SetAspect(Prs3d_ShadingAspect self, Handle_Graphic3d_AspectFillArea3d theAspect)

        :type theAspect: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectFillArea3d

        """
        return _Prs3d.Prs3d_ShadingAspect_SetAspect(self, *args)

    __swig_destroy__ = _Prs3d.delete_Prs3d_ShadingAspect
Prs3d_ShadingAspect_swigregister = _Prs3d.Prs3d_ShadingAspect_swigregister
Prs3d_ShadingAspect_swigregister(Prs3d_ShadingAspect)

def Prs3d_ShadingAspect_get_type_name(*args):
    """
    Prs3d_ShadingAspect_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Prs3d.Prs3d_ShadingAspect_get_type_name(*args)

def Prs3d_ShadingAspect_get_type_descriptor(*args):
    """
    Prs3d_ShadingAspect_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Prs3d.Prs3d_ShadingAspect_get_type_descriptor(*args)

class Handle_Prs3d_PointAspect(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Prs3d_PointAspect self)

        Nullify the handle


        """
        return _Prs3d.Handle_Prs3d_PointAspect_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Prs3d_PointAspect self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Prs3d.Handle_Prs3d_PointAspect_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Prs3d_PointAspect self, Prs3d_PointAspect thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Prs3d.Handle_Prs3d_PointAspect_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Prs3d_PointAspect self, Handle_Prs3d_PointAspect theHandle) -> Handle_Prs3d_PointAspect
        assign(Handle_Prs3d_PointAspect self, Prs3d_PointAspect thePtr) -> Handle_Prs3d_PointAspect
        assign(Handle_Prs3d_PointAspect self, Handle_Prs3d_PointAspect theHandle) -> Handle_Prs3d_PointAspect

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Prs3d.Handle_Prs3d_PointAspect_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Prs3d_PointAspect self) -> Prs3d_PointAspect

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Prs3d.Handle_Prs3d_PointAspect_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Prs3d_PointAspect self) -> Prs3d_PointAspect

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Prs3d.Handle_Prs3d_PointAspect___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Prs3d_PointAspect self) -> Prs3d_PointAspect

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Prs3d.Handle_Prs3d_PointAspect___ref__(self, *args)


    def __hash__(self):
        return _Prs3d.Handle_Prs3d_PointAspect___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Prs3d.Handle_Prs3d_PointAspect___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Prs3d.new_Handle_Prs3d_PointAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Prs3d.Handle_Prs3d_PointAspect_DownCast)
    __swig_destroy__ = _Prs3d.delete_Handle_Prs3d_PointAspect

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Prs3d_PointAspect self) -> char const *

        :rtype: const char *

        """
        return _Prs3d.Handle_Prs3d_PointAspect_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Handle_Prs3d_PointAspect_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Handle_Prs3d_PointAspect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetColor(self, *args):
        """
        SetColor(Handle_Prs3d_PointAspect self, Quantity_Color theColor)

        defines the color to be used when drawing a point.
        Default value: Quantity_NOC_YELLOW

        :type theColor: OCC.wrapper.Quantity.Quantity_Color

        """
        return _Prs3d.Handle_Prs3d_PointAspect_SetColor(self, *args)


    def SetTypeOfMarker(self, *args):
        """
        SetTypeOfMarker(Handle_Prs3d_PointAspect self, Aspect_TypeOfMarker const theType)

        defines the type of representation to be used when drawing a point.
        Default value: Aspect_TOM_PLUS

        :type theType: OCC.wrapper.Aspect.Aspect_TypeOfMarker

        """
        return _Prs3d.Handle_Prs3d_PointAspect_SetTypeOfMarker(self, *args)


    def SetScale(self, *args):
        """
        SetScale(Handle_Prs3d_PointAspect self, Standard_Real const theScale)

        defines the size of the marker used when drawing a point.
        Default value: 1.

        :type theScale: float

        """
        return _Prs3d.Handle_Prs3d_PointAspect_SetScale(self, *args)


    def Aspect(self, *args):
        """
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectMarker3d

        """
        res = _Prs3d.Handle_Prs3d_PointAspect_Aspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetAspect(self, *args):
        """
        SetAspect(Handle_Prs3d_PointAspect self, Handle_Graphic3d_AspectMarker3d theAspect)

        :type theAspect: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectMarker3d

        """
        return _Prs3d.Handle_Prs3d_PointAspect_SetAspect(self, *args)


    def GetTextureSize(self, *args):
        """
        GetTextureSize(Handle_Prs3d_PointAspect self)

        Returns marker's texture size.

        :type theWidth: int
        :type theHeight: int

        """
        return _Prs3d.Handle_Prs3d_PointAspect_GetTextureSize(self, *args)


    def GetTexture(self, *args):
        """
        Returns marker's texture.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_MarkerImage

        """
        res = _Prs3d.Handle_Prs3d_PointAspect_GetTexture(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Prs3d_PointAspect self)

        Memory deallocator for transient classes


        """
        return _Prs3d.Handle_Prs3d_PointAspect_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Prs3d_PointAspect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Prs3d_PointAspect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_PointAspect_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Prs3d_PointAspect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Prs3d_PointAspect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_PointAspect_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Prs3d_PointAspect self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Prs3d.Handle_Prs3d_PointAspect_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Prs3d_PointAspect self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Handle_Prs3d_PointAspect_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Prs3d_PointAspect self)

        Increments the reference counter of this object


        """
        return _Prs3d.Handle_Prs3d_PointAspect_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Prs3d_PointAspect self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Handle_Prs3d_PointAspect_DecrementRefCounter(self, *args)

Handle_Prs3d_PointAspect_swigregister = _Prs3d.Handle_Prs3d_PointAspect_swigregister
Handle_Prs3d_PointAspect_swigregister(Handle_Prs3d_PointAspect)

def Handle_Prs3d_PointAspect_DownCast(thing):
    return _Prs3d.Handle_Prs3d_PointAspect_DownCast(thing)
Handle_Prs3d_PointAspect_DownCast = _Prs3d.Handle_Prs3d_PointAspect_DownCast

class Prs3d_ToolQuadric(object):
    """Base class to build 3D surfaces presentation of quadric surfaces."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def FillArray(self, *args):
        """
        FillArray(Prs3d_ToolQuadric self, Handle_Graphic3d_ArrayOfTriangles theArray, gp_Trsf theTrsf)
        FillArray(Prs3d_ToolQuadric self, Handle_Graphic3d_ArrayOfTriangles theArray, Handle_Poly_Triangulation theTriangulation, gp_Trsf theTrsf)

        Generate primitives for 3D quadric surface presentation and fill the given array and poly triangulation structure. Optional transformation is applied.

        :type theArray: OCC.wrapper.Graphic3d.Handle_Graphic3d_ArrayOfTriangles
        :type theTriangulation: OCC.wrapper.Poly.Handle_Poly_Triangulation
        :type theTrsf: OCC.wrapper.gp.gp_Trsf

        """
        return _Prs3d.Prs3d_ToolQuadric_FillArray(self, *args)


    def TrianglesNb(*args):
        """
        TrianglesNb(Standard_Integer const theSlicesNb, Standard_Integer const theStacksNb) -> Standard_Integer

        Number of triangles for presentation with the given params.

        :type theSlicesNb: int
        :type theStacksNb: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Prs3d_ToolQuadric_TrianglesNb(*args)

    TrianglesNb = staticmethod(TrianglesNb)
    __swig_destroy__ = _Prs3d.delete_Prs3d_ToolQuadric
Prs3d_ToolQuadric_swigregister = _Prs3d.Prs3d_ToolQuadric_swigregister
Prs3d_ToolQuadric_swigregister(Prs3d_ToolQuadric)

def Prs3d_ToolQuadric_TrianglesNb(*args):
    """
    Prs3d_ToolQuadric_TrianglesNb(Standard_Integer const theSlicesNb, Standard_Integer const theStacksNb) -> Standard_Integer

    Number of triangles for presentation with the given params.

    :type theSlicesNb: int
    :type theStacksNb: int
    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _Prs3d.Prs3d_ToolQuadric_TrianglesNb(*args)

class Prs3d_TextAspect(Prs3d_BasicAspect):
    """Defines the attributes when displaying a text."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Prs3d_TextAspect
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Prs3d_TextAspect(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Prs3d.Prs3d_TextAspect_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Prs3d.Prs3d_TextAspect_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Prs3d_TextAspect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Prs3d_TextAspect self) -> Prs3d_TextAspect
        __init__(Prs3d_TextAspect self, Handle_Graphic3d_AspectText3d theAspect) -> Prs3d_TextAspect

        :type theAspect: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectText3d

        """
        this = _Prs3d.new_Prs3d_TextAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetColor(self, *args):
        """
        SetColor(Prs3d_TextAspect self, Quantity_Color theColor)

        Sets the color of the type used in text display.

        :type theColor: OCC.wrapper.Quantity.Quantity_Color

        """
        return _Prs3d.Prs3d_TextAspect_SetColor(self, *args)


    def SetFont(self, *args):
        """
        SetFont(Prs3d_TextAspect self, Standard_CString const theFont)

        Sets the font used in text display.

        :type theFont: OCC.wrapper.Standard.Standard_CString

        """
        return _Prs3d.Prs3d_TextAspect_SetFont(self, *args)


    def SetHeightWidthRatio(self, *args):
        """
        SetHeightWidthRatio(Prs3d_TextAspect self, Standard_Real const theRatio)

        Returns the height-width ratio, also known as the expansion factor.

        :type theRatio: float

        """
        return _Prs3d.Prs3d_TextAspect_SetHeightWidthRatio(self, *args)


    def SetSpace(self, *args):
        """
        SetSpace(Prs3d_TextAspect self, Standard_Real const theSpace)

        Sets the length of the box which text will occupy.

        :type theSpace: float

        """
        return _Prs3d.Prs3d_TextAspect_SetSpace(self, *args)


    def SetHeight(self, *args):
        """
        SetHeight(Prs3d_TextAspect self, Standard_Real const theHeight)

        Sets the height of the text.

        :type theHeight: float

        """
        return _Prs3d.Prs3d_TextAspect_SetHeight(self, *args)


    def SetAngle(self, *args):
        """
        SetAngle(Prs3d_TextAspect self, Standard_Real const theAngle)

        Sets the angle

        :type theAngle: float

        """
        return _Prs3d.Prs3d_TextAspect_SetAngle(self, *args)


    def Height(self, *args):
        """
        Height(Prs3d_TextAspect self) -> Standard_Real

        Returns the height of the text box.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Prs3d_TextAspect_Height(self, *args)


    def Angle(self, *args):
        """
        Angle(Prs3d_TextAspect self) -> Standard_Real

        Returns the angle

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Prs3d_TextAspect_Angle(self, *args)


    def SetHorizontalJustification(self, *args):
        """
        SetHorizontalJustification(Prs3d_TextAspect self, Graphic3d_HorizontalTextAlignment const theJustification)

        Sets horizontal alignment of text.

        :type theJustification: OCC.wrapper.Graphic3d.Graphic3d_HorizontalTextAlignment

        """
        return _Prs3d.Prs3d_TextAspect_SetHorizontalJustification(self, *args)


    def SetVerticalJustification(self, *args):
        """
        SetVerticalJustification(Prs3d_TextAspect self, Graphic3d_VerticalTextAlignment const theJustification)

        Sets the vertical alignment of text.

        :type theJustification: OCC.wrapper.Graphic3d.Graphic3d_VerticalTextAlignment

        """
        return _Prs3d.Prs3d_TextAspect_SetVerticalJustification(self, *args)


    def SetOrientation(self, *args):
        """
        SetOrientation(Prs3d_TextAspect self, Graphic3d_TextPath const theOrientation)

        Sets the orientation of text.

        :type theOrientation: OCC.wrapper.Graphic3d.Graphic3d_TextPath

        """
        return _Prs3d.Prs3d_TextAspect_SetOrientation(self, *args)


    def HorizontalJustification(self, *args):
        """
        HorizontalJustification(Prs3d_TextAspect self) -> Graphic3d_HorizontalTextAlignment

        Returns the horizontal alignment of the text.
        The range of values includes:
        -   left
        -   center
        -   right, and
        -   normal (justified).

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_HorizontalTextAlignment

        """
        return _Prs3d.Prs3d_TextAspect_HorizontalJustification(self, *args)


    def VerticalJustification(self, *args):
        """
        VerticalJustification(Prs3d_TextAspect self) -> Graphic3d_VerticalTextAlignment

        Returns the vertical alignment of the text.
        The range of values includes:
        -   normal
        -   top
        -   cap
        -   half
        -   base
        -   bottom

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_VerticalTextAlignment

        """
        return _Prs3d.Prs3d_TextAspect_VerticalJustification(self, *args)


    def Orientation(self, *args):
        """
        Orientation(Prs3d_TextAspect self) -> Graphic3d_TextPath

        Returns the orientation of the text.
        Text can be displayed in the following directions:
        -   up
        -   down
        -   left, or
        -   right

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TextPath

        """
        return _Prs3d.Prs3d_TextAspect_Orientation(self, *args)


    def Aspect(self, *args):
        """
        Returns the purely textual attributes used in the display of text.
        These include:
        -   color
        -   font
        -   height/width ratio, that is, the expansion factor, and
        -   space between characters.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectText3d

        """
        res = _Prs3d.Prs3d_TextAspect_Aspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetAspect(self, *args):
        """
        SetAspect(Prs3d_TextAspect self, Handle_Graphic3d_AspectText3d theAspect)

        :type theAspect: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectText3d

        """
        return _Prs3d.Prs3d_TextAspect_SetAspect(self, *args)

    __swig_destroy__ = _Prs3d.delete_Prs3d_TextAspect
Prs3d_TextAspect_swigregister = _Prs3d.Prs3d_TextAspect_swigregister
Prs3d_TextAspect_swigregister(Prs3d_TextAspect)

def Prs3d_TextAspect_get_type_name(*args):
    """
    Prs3d_TextAspect_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Prs3d.Prs3d_TextAspect_get_type_name(*args)

def Prs3d_TextAspect_get_type_descriptor(*args):
    """
    Prs3d_TextAspect_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Prs3d.Prs3d_TextAspect_get_type_descriptor(*args)

class Prs3d_(object):
    """
    The Prs3d package provides the following services
    -   a presentation object (the context for all
    modifications to the display, its presentation will be
    displayed in every view of an active viewer)
    -   an attribute manager governing how objects such
    as color, width, and type of line are displayed;
    these are generic objects, whereas those in
    StdPrs are specific geometries and topologies.
    -   generic   algorithms providing default settings for
    objects such as points, curves, surfaces and shapes
    -   a root object which provides the abstract
    framework for the DsgPrs definitions at work in
    display of dimensions, relations and trihedra.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def MatchSegment(*args):
        """
        MatchSegment(Standard_Real const X, Standard_Real const Y, Standard_Real const Z, Standard_Real const aDistance, gp_Pnt p1, gp_Pnt p2) -> Standard_Boolean

        draws an arrow at a given location, with respect
        to a given direction.

        :type X: float
        :type Y: float
        :type Z: float
        :type aDistance: float
        :type p1: OCC.wrapper.gp.gp_Pnt
        :type p2: OCC.wrapper.gp.gp_Pnt
        :type dist: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d__MatchSegment(*args)

    MatchSegment = staticmethod(MatchSegment)

    def GetDeflection(*args):
        """
        GetDeflection(TopoDS_Shape theShape, Handle_Prs3d_Drawer theDrawer) -> Standard_Real

        Computes the absolute deflection value depending on
        the type of deflection in theDrawer:
        <ul>
        <li><b>Aspect_TOD_RELATIVE</b>: the absolute deflection is computed using the relative
        deviation coefficient from theDrawer and the shape's bounding box;</li>
        <li><b>Aspect_TOD_ABSOLUTE</b>: the maximal chordial deviation from theDrawer is returned.</li>
        </ul>
        In case of the type of deflection in theDrawer computed relative deflection for shape
        is stored as absolute deflection. It is necessary to use it later on for sub-shapes.
        This function should always be used to compute the deflection value for building
        discrete representations of the shape (triangualtion, wireframe) to avoid incosistencies
        between different representations of the shape and undesirable visual artifacts.

        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type theDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Prs3d__GetDeflection(*args)

    GetDeflection = staticmethod(GetDeflection)

    def PrimitivesFromPolylines(*args):
        """
        PrimitivesFromPolylines(NCollection_List_Handle_TColgp_HSequenceOfPnt thePoints) -> Handle_Graphic3d_ArrayOfPrimitives

        Assembles array of primitives for sequence of polylines.
        @param thePoints [in] the polylines sequence
        @return array of primitives

        :type thePoints: OCC.wrapper.Prs3d.Prs3d_NListOfSequenceOfPnt
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_ArrayOfPrimitives

        """
        return _Prs3d.Prs3d__PrimitivesFromPolylines(*args)

    PrimitivesFromPolylines = staticmethod(PrimitivesFromPolylines)

    def AddPrimitivesGroup(*args):
        """
        AddPrimitivesGroup(Handle_Prs3d_Presentation thePrs, Handle_Prs3d_LineAspect theAspect, NCollection_List_Handle_TColgp_HSequenceOfPnt thePolylines)

        Add primitives into new group in presentation and clear the list of polylines.

        :type thePrs: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect
        :type thePolylines: OCC.wrapper.Prs3d.Prs3d_NListOfSequenceOfPnt

        """
        return _Prs3d.Prs3d__AddPrimitivesGroup(*args)

    AddPrimitivesGroup = staticmethod(AddPrimitivesGroup)

    def __init__(self):
        """
        The Prs3d package provides the following services
        -   a presentation object (the context for all
        modifications to the display, its presentation will be
        displayed in every view of an active viewer)
        -   an attribute manager governing how objects such
        as color, width, and type of line are displayed;
        these are generic objects, whereas those in
        StdPrs are specific geometries and topologies.
        -   generic   algorithms providing default settings for
        objects such as points, curves, surfaces and shapes
        -   a root object which provides the abstract
        framework for the DsgPrs definitions at work in
        display of dimensions, relations and trihedra.
        """
        this = _Prs3d.new_Prs3d_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Prs3d.delete_Prs3d_
Prs3d__swigregister = _Prs3d.Prs3d__swigregister
Prs3d__swigregister(Prs3d_)

def Prs3d__MatchSegment(*args):
    """
    Prs3d__MatchSegment(Standard_Real const X, Standard_Real const Y, Standard_Real const Z, Standard_Real const aDistance, gp_Pnt p1, gp_Pnt p2) -> Standard_Boolean

    draws an arrow at a given location, with respect
    to a given direction.

    :type X: float
    :type Y: float
    :type Z: float
    :type aDistance: float
    :type p1: OCC.wrapper.gp.gp_Pnt
    :type p2: OCC.wrapper.gp.gp_Pnt
    :type dist: float
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _Prs3d.Prs3d__MatchSegment(*args)

def Prs3d__GetDeflection(*args):
    """
    Prs3d__GetDeflection(TopoDS_Shape theShape, Handle_Prs3d_Drawer theDrawer) -> Standard_Real

    Computes the absolute deflection value depending on
    the type of deflection in theDrawer:
    <ul>
    <li><b>Aspect_TOD_RELATIVE</b>: the absolute deflection is computed using the relative
    deviation coefficient from theDrawer and the shape's bounding box;</li>
    <li><b>Aspect_TOD_ABSOLUTE</b>: the maximal chordial deviation from theDrawer is returned.</li>
    </ul>
    In case of the type of deflection in theDrawer computed relative deflection for shape
    is stored as absolute deflection. It is necessary to use it later on for sub-shapes.
    This function should always be used to compute the deflection value for building
    discrete representations of the shape (triangualtion, wireframe) to avoid incosistencies
    between different representations of the shape and undesirable visual artifacts.

    :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
    :type theDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _Prs3d.Prs3d__GetDeflection(*args)

def Prs3d__PrimitivesFromPolylines(*args):
    """
    Prs3d__PrimitivesFromPolylines(NCollection_List_Handle_TColgp_HSequenceOfPnt thePoints) -> Handle_Graphic3d_ArrayOfPrimitives

    Assembles array of primitives for sequence of polylines.
    @param thePoints [in] the polylines sequence
    @return array of primitives

    :type thePoints: OCC.wrapper.Prs3d.Prs3d_NListOfSequenceOfPnt
    :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_ArrayOfPrimitives

    """
    return _Prs3d.Prs3d__PrimitivesFromPolylines(*args)

def Prs3d__AddPrimitivesGroup(*args):
    """
    Prs3d__AddPrimitivesGroup(Handle_Prs3d_Presentation thePrs, Handle_Prs3d_LineAspect theAspect, NCollection_List_Handle_TColgp_HSequenceOfPnt thePolylines)

    Add primitives into new group in presentation and clear the list of polylines.

    :type thePrs: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
    :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect
    :type thePolylines: OCC.wrapper.Prs3d.Prs3d_NListOfSequenceOfPnt

    """
    return _Prs3d.Prs3d__AddPrimitivesGroup(*args)

class Prs3d_IsoAspect(Prs3d_LineAspect):
    """
    A framework to define the display attributes of isoparameters.
    This framework can be used to modify the default
    setting for isoparameters in Prs3d_Drawer.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Prs3d_IsoAspect
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Prs3d_IsoAspect(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Prs3d.Prs3d_IsoAspect_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Prs3d.Prs3d_IsoAspect_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Prs3d_IsoAspect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Prs3d_IsoAspect self, Quantity_Color theColor, Aspect_TypeOfLine const theType, Standard_Real const theWidth, Standard_Integer const theNumber) -> Prs3d_IsoAspect

        Constructs a framework to define display attributes of isoparameters.
        These include:
        -   the color attribute aColor
        -   the type of line aType
        -   the width value aWidth
        -   aNumber, the number of isoparameters to be   displayed.

        :type theColor: OCC.wrapper.Quantity.Quantity_Color
        :type theType: OCC.wrapper.Aspect.Aspect_TypeOfLine
        :type theWidth: float
        :type theNumber: int

        """
        this = _Prs3d.new_Prs3d_IsoAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetNumber(self, *args):
        """
        SetNumber(Prs3d_IsoAspect self, Standard_Integer const theNumber)

        defines the number of U or V isoparametric curves
        to be drawn for a single face.
        Default value: 10

        :type theNumber: int

        """
        return _Prs3d.Prs3d_IsoAspect_SetNumber(self, *args)


    def Number(self, *args):
        """
        Number(Prs3d_IsoAspect self) -> Standard_Integer

        returns the number of U or V isoparametric curves drawn for a single face.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Prs3d_IsoAspect_Number(self, *args)

    __swig_destroy__ = _Prs3d.delete_Prs3d_IsoAspect
Prs3d_IsoAspect_swigregister = _Prs3d.Prs3d_IsoAspect_swigregister
Prs3d_IsoAspect_swigregister(Prs3d_IsoAspect)

def Prs3d_IsoAspect_get_type_name(*args):
    """
    Prs3d_IsoAspect_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Prs3d.Prs3d_IsoAspect_get_type_name(*args)

def Prs3d_IsoAspect_get_type_descriptor(*args):
    """
    Prs3d_IsoAspect_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Prs3d.Prs3d_IsoAspect_get_type_descriptor(*args)

class Prs3d_ToolSphere(Prs3d_ToolQuadric):
    """Standard presentation algorithm that outputs graphical primitives for spherical surface."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Create(*args):
        """
        Create(Standard_Real const theRadius, Standard_Integer const theNbSlices, Standard_Integer const theNbStacks, gp_Trsf theTrsf) -> Handle_Graphic3d_ArrayOfTriangles

        Generate primitives for 3D quadric surface and return a filled array.

        :type theRadius: float
        :type theNbSlices: int
        :type theNbStacks: int
        :type theTrsf: OCC.wrapper.gp.gp_Trsf
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_ArrayOfTriangles

        """
        return _Prs3d.Prs3d_ToolSphere_Create(*args)

    Create = staticmethod(Create)

    def __init__(self, *args):
        """
        __init__(Prs3d_ToolSphere self, Standard_Real const theRadius, Standard_Integer const theNbSlices, Standard_Integer const theNbStacks) -> Prs3d_ToolSphere

        Initializes the algorithm.

        :type theRadius: float
        :type theNbSlices: int
        :type theNbStacks: int

        """
        this = _Prs3d.new_Prs3d_ToolSphere(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Prs3d.delete_Prs3d_ToolSphere
Prs3d_ToolSphere_swigregister = _Prs3d.Prs3d_ToolSphere_swigregister
Prs3d_ToolSphere_swigregister(Prs3d_ToolSphere)

def Prs3d_ToolSphere_Create(*args):
    """
    Prs3d_ToolSphere_Create(Standard_Real const theRadius, Standard_Integer const theNbSlices, Standard_Integer const theNbStacks, gp_Trsf theTrsf) -> Handle_Graphic3d_ArrayOfTriangles

    Generate primitives for 3D quadric surface and return a filled array.

    :type theRadius: float
    :type theNbSlices: int
    :type theNbStacks: int
    :type theTrsf: OCC.wrapper.gp.gp_Trsf
    :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_ArrayOfTriangles

    """
    return _Prs3d.Prs3d_ToolSphere_Create(*args)

class Handle_Prs3d_ArrowAspect(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Prs3d_ArrowAspect self)

        Nullify the handle


        """
        return _Prs3d.Handle_Prs3d_ArrowAspect_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Prs3d_ArrowAspect self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Prs3d.Handle_Prs3d_ArrowAspect_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Prs3d_ArrowAspect self, Prs3d_ArrowAspect thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Prs3d.Handle_Prs3d_ArrowAspect_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Prs3d_ArrowAspect self, Handle_Prs3d_ArrowAspect theHandle) -> Handle_Prs3d_ArrowAspect
        assign(Handle_Prs3d_ArrowAspect self, Prs3d_ArrowAspect thePtr) -> Handle_Prs3d_ArrowAspect
        assign(Handle_Prs3d_ArrowAspect self, Handle_Prs3d_ArrowAspect theHandle) -> Handle_Prs3d_ArrowAspect

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Prs3d.Handle_Prs3d_ArrowAspect_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Prs3d_ArrowAspect self) -> Prs3d_ArrowAspect

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Prs3d.Handle_Prs3d_ArrowAspect_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Prs3d_ArrowAspect self) -> Prs3d_ArrowAspect

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Prs3d.Handle_Prs3d_ArrowAspect___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Prs3d_ArrowAspect self) -> Prs3d_ArrowAspect

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Prs3d.Handle_Prs3d_ArrowAspect___ref__(self, *args)


    def __hash__(self):
        return _Prs3d.Handle_Prs3d_ArrowAspect___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Prs3d.Handle_Prs3d_ArrowAspect___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Prs3d.new_Handle_Prs3d_ArrowAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Prs3d.Handle_Prs3d_ArrowAspect_DownCast)
    __swig_destroy__ = _Prs3d.delete_Handle_Prs3d_ArrowAspect

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Prs3d_ArrowAspect self) -> char const *

        :rtype: const char *

        """
        return _Prs3d.Handle_Prs3d_ArrowAspect_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Handle_Prs3d_ArrowAspect_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Handle_Prs3d_ArrowAspect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetAngle(self, *args):
        """
        SetAngle(Handle_Prs3d_ArrowAspect self, Standard_Real const anAngle)

        defines the angle of the arrows.

        :type anAngle: float

        """
        return _Prs3d.Handle_Prs3d_ArrowAspect_SetAngle(self, *args)


    def Angle(self, *args):
        """
        Angle(Handle_Prs3d_ArrowAspect self) -> Standard_Real

        returns the current value of the angle used when drawing an arrow.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Handle_Prs3d_ArrowAspect_Angle(self, *args)


    def SetLength(self, *args):
        """
        SetLength(Handle_Prs3d_ArrowAspect self, Standard_Real const theLength)

        Defines the length of the arrows.

        :type theLength: float

        """
        return _Prs3d.Handle_Prs3d_ArrowAspect_SetLength(self, *args)


    def Length(self, *args):
        """
        Length(Handle_Prs3d_ArrowAspect self) -> Standard_Real

        Returns the current value of the length used when drawing an arrow.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Handle_Prs3d_ArrowAspect_Length(self, *args)


    def SetColor(self, *args):
        """
        SetColor(Handle_Prs3d_ArrowAspect self, Quantity_Color theColor)

        :type theColor: OCC.wrapper.Quantity.Quantity_Color

        """
        return _Prs3d.Handle_Prs3d_ArrowAspect_SetColor(self, *args)


    def Aspect(self, *args):
        """
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectLine3d

        """
        res = _Prs3d.Handle_Prs3d_ArrowAspect_Aspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetAspect(self, *args):
        """
        SetAspect(Handle_Prs3d_ArrowAspect self, Handle_Graphic3d_AspectLine3d theAspect)

        :type theAspect: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectLine3d

        """
        return _Prs3d.Handle_Prs3d_ArrowAspect_SetAspect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Prs3d_ArrowAspect self)

        Memory deallocator for transient classes


        """
        return _Prs3d.Handle_Prs3d_ArrowAspect_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Prs3d_ArrowAspect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Prs3d_ArrowAspect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_ArrowAspect_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Prs3d_ArrowAspect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Prs3d_ArrowAspect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_ArrowAspect_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Prs3d_ArrowAspect self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Prs3d.Handle_Prs3d_ArrowAspect_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Prs3d_ArrowAspect self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Handle_Prs3d_ArrowAspect_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Prs3d_ArrowAspect self)

        Increments the reference counter of this object


        """
        return _Prs3d.Handle_Prs3d_ArrowAspect_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Prs3d_ArrowAspect self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Handle_Prs3d_ArrowAspect_DecrementRefCounter(self, *args)

Handle_Prs3d_ArrowAspect_swigregister = _Prs3d.Handle_Prs3d_ArrowAspect_swigregister
Handle_Prs3d_ArrowAspect_swigregister(Handle_Prs3d_ArrowAspect)

def Handle_Prs3d_ArrowAspect_DownCast(thing):
    return _Prs3d.Handle_Prs3d_ArrowAspect_DownCast(thing)
Handle_Prs3d_ArrowAspect_DownCast = _Prs3d.Handle_Prs3d_ArrowAspect_DownCast

class Handle_Prs3d_DimensionAspect(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Prs3d_DimensionAspect self)

        Nullify the handle


        """
        return _Prs3d.Handle_Prs3d_DimensionAspect_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Prs3d_DimensionAspect self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Prs3d.Handle_Prs3d_DimensionAspect_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Prs3d_DimensionAspect self, Prs3d_DimensionAspect thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Prs3d.Handle_Prs3d_DimensionAspect_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Prs3d_DimensionAspect self, Handle_Prs3d_DimensionAspect theHandle) -> Handle_Prs3d_DimensionAspect
        assign(Handle_Prs3d_DimensionAspect self, Prs3d_DimensionAspect thePtr) -> Handle_Prs3d_DimensionAspect
        assign(Handle_Prs3d_DimensionAspect self, Handle_Prs3d_DimensionAspect theHandle) -> Handle_Prs3d_DimensionAspect

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Prs3d.Handle_Prs3d_DimensionAspect_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Prs3d_DimensionAspect self) -> Prs3d_DimensionAspect

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Prs3d.Handle_Prs3d_DimensionAspect_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Prs3d_DimensionAspect self) -> Prs3d_DimensionAspect

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Prs3d.Handle_Prs3d_DimensionAspect___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Prs3d_DimensionAspect self) -> Prs3d_DimensionAspect

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Prs3d.Handle_Prs3d_DimensionAspect___ref__(self, *args)


    def __hash__(self):
        return _Prs3d.Handle_Prs3d_DimensionAspect___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Prs3d.Handle_Prs3d_DimensionAspect___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Prs3d.new_Handle_Prs3d_DimensionAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Prs3d.Handle_Prs3d_DimensionAspect_DownCast)
    __swig_destroy__ = _Prs3d.delete_Handle_Prs3d_DimensionAspect

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Prs3d_DimensionAspect self) -> char const *

        :rtype: const char *

        """
        return _Prs3d.Handle_Prs3d_DimensionAspect_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Handle_Prs3d_DimensionAspect_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Handle_Prs3d_DimensionAspect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def LineAspect(self, *args):
        """
        Returns the settings for the display of lines used in presentation of dimensions.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        res = _Prs3d.Handle_Prs3d_DimensionAspect_LineAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetLineAspect(self, *args):
        """
        SetLineAspect(Handle_Prs3d_DimensionAspect self, Handle_Prs3d_LineAspect theAspect)

        Sets the display attributes of lines used in presentation of dimensions.

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        return _Prs3d.Handle_Prs3d_DimensionAspect_SetLineAspect(self, *args)


    def TextAspect(self, *args):
        """
        Returns the settings for the display of text used in presentation of dimensions.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_TextAspect

        """
        res = _Prs3d.Handle_Prs3d_DimensionAspect_TextAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetTextAspect(self, *args):
        """
        SetTextAspect(Handle_Prs3d_DimensionAspect self, Handle_Prs3d_TextAspect theAspect)

        Sets the display attributes of text used in presentation of dimensions.

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_TextAspect

        """
        return _Prs3d.Handle_Prs3d_DimensionAspect_SetTextAspect(self, *args)


    def IsText3d(self, *args):
        """
        IsText3d(Handle_Prs3d_DimensionAspect self) -> Standard_Boolean

        Check if text for dimension label is 3d.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_DimensionAspect_IsText3d(self, *args)


    def MakeText3d(self, *args):
        """
        MakeText3d(Handle_Prs3d_DimensionAspect self, Standard_Boolean const isText3d)

        Sets type of text.

        :type isText3d: bool

        """
        return _Prs3d.Handle_Prs3d_DimensionAspect_MakeText3d(self, *args)


    def IsTextShaded(self, *args):
        """
        IsTextShaded(Handle_Prs3d_DimensionAspect self) -> Standard_Boolean

        Check if 3d text for dimension label is shaded.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_DimensionAspect_IsTextShaded(self, *args)


    def MakeTextShaded(self, *args):
        """
        MakeTextShaded(Handle_Prs3d_DimensionAspect self, Standard_Boolean const theIsTextShaded)

        Turns on/off text shading for 3d text.

        :type theIsTextShaded: bool

        """
        return _Prs3d.Handle_Prs3d_DimensionAspect_MakeTextShaded(self, *args)


    def IsArrows3d(self, *args):
        """
        IsArrows3d(Handle_Prs3d_DimensionAspect self) -> Standard_Boolean

        Gets type of arrows.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_DimensionAspect_IsArrows3d(self, *args)


    def MakeArrows3d(self, *args):
        """
        MakeArrows3d(Handle_Prs3d_DimensionAspect self, Standard_Boolean const theIsArrows3d)

        Sets type of arrows.

        :type theIsArrows3d: bool

        """
        return _Prs3d.Handle_Prs3d_DimensionAspect_MakeArrows3d(self, *args)


    def IsUnitsDisplayed(self, *args):
        """
        IsUnitsDisplayed(Handle_Prs3d_DimensionAspect self) -> Standard_Boolean

        Shows if Units are to be displayed along with dimension value.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_DimensionAspect_IsUnitsDisplayed(self, *args)


    def MakeUnitsDisplayed(self, *args):
        """
        MakeUnitsDisplayed(Handle_Prs3d_DimensionAspect self, Standard_Boolean const theIsDisplayed)

        Specifies whether the units string should be displayed
        along with value label or not.

        :type theIsDisplayed: bool

        """
        return _Prs3d.Handle_Prs3d_DimensionAspect_MakeUnitsDisplayed(self, *args)


    def SetArrowOrientation(self, *args):
        """
        SetArrowOrientation(Handle_Prs3d_DimensionAspect self, Prs3d_DimensionArrowOrientation const theArrowOrient)

        Sets orientation of arrows (external or internal).
        By default orientation is chosen automatically according to situation and text label size.

        :type theArrowOrient: OCC.wrapper.Prs3d.Prs3d_DimensionArrowOrientation

        """
        return _Prs3d.Handle_Prs3d_DimensionAspect_SetArrowOrientation(self, *args)


    def ArrowOrientation(self, *args):
        """
        ArrowOrientation(Handle_Prs3d_DimensionAspect self) -> Prs3d_DimensionArrowOrientation

        Gets orientation of arrows (external or internal).

        :rtype: OCC.wrapper.Prs3d.Prs3d_DimensionArrowOrientation

        """
        return _Prs3d.Handle_Prs3d_DimensionAspect_ArrowOrientation(self, *args)


    def SetTextVerticalPosition(self, *args):
        """
        SetTextVerticalPosition(Handle_Prs3d_DimensionAspect self, Prs3d_DimensionTextVerticalPosition const thePosition)

        Sets vertical text alignment for text label.

        :type thePosition: OCC.wrapper.Prs3d.Prs3d_DimensionTextVerticalPosition

        """
        return _Prs3d.Handle_Prs3d_DimensionAspect_SetTextVerticalPosition(self, *args)


    def TextVerticalPosition(self, *args):
        """
        TextVerticalPosition(Handle_Prs3d_DimensionAspect self) -> Prs3d_DimensionTextVerticalPosition

        Gets vertical text alignment for text label.

        :rtype: OCC.wrapper.Prs3d.Prs3d_DimensionTextVerticalPosition

        """
        return _Prs3d.Handle_Prs3d_DimensionAspect_TextVerticalPosition(self, *args)


    def SetTextHorizontalPosition(self, *args):
        """
        SetTextHorizontalPosition(Handle_Prs3d_DimensionAspect self, Prs3d_DimensionTextHorizontalPosition const thePosition)

        Sets horizontal text alignment for text label.

        :type thePosition: OCC.wrapper.Prs3d.Prs3d_DimensionTextHorizontalPosition

        """
        return _Prs3d.Handle_Prs3d_DimensionAspect_SetTextHorizontalPosition(self, *args)


    def TextHorizontalPosition(self, *args):
        """
        TextHorizontalPosition(Handle_Prs3d_DimensionAspect self) -> Prs3d_DimensionTextHorizontalPosition

        Gets horizontal text alignment for text label.

        :rtype: OCC.wrapper.Prs3d.Prs3d_DimensionTextHorizontalPosition

        """
        return _Prs3d.Handle_Prs3d_DimensionAspect_TextHorizontalPosition(self, *args)


    def ArrowAspect(self, *args):
        """
        Returns the settings for displaying arrows.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_ArrowAspect

        """
        res = _Prs3d.Handle_Prs3d_DimensionAspect_ArrowAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetArrowAspect(self, *args):
        """
        SetArrowAspect(Handle_Prs3d_DimensionAspect self, Handle_Prs3d_ArrowAspect theAspect)

        Sets the display attributes of arrows used in presentation of dimensions.

        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_ArrowAspect

        """
        return _Prs3d.Handle_Prs3d_DimensionAspect_SetArrowAspect(self, *args)


    def SetCommonColor(self, *args):
        """
        SetCommonColor(Handle_Prs3d_DimensionAspect self, Quantity_Color theColor)

        Sets the same color for all parts of dimension: lines, arrows and text.

        :type theColor: OCC.wrapper.Quantity.Quantity_Color

        """
        return _Prs3d.Handle_Prs3d_DimensionAspect_SetCommonColor(self, *args)


    def SetExtensionSize(self, *args):
        """
        SetExtensionSize(Handle_Prs3d_DimensionAspect self, Standard_Real const theSize)

        Sets extension size.

        :type theSize: float

        """
        return _Prs3d.Handle_Prs3d_DimensionAspect_SetExtensionSize(self, *args)


    def ExtensionSize(self, *args):
        """
        ExtensionSize(Handle_Prs3d_DimensionAspect self) -> Standard_Real

        Returns extension size.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Handle_Prs3d_DimensionAspect_ExtensionSize(self, *args)


    def SetArrowTailSize(self, *args):
        """
        SetArrowTailSize(Handle_Prs3d_DimensionAspect self, Standard_Real const theSize)

        Set size for arrow tail (extension without text).

        :type theSize: float

        """
        return _Prs3d.Handle_Prs3d_DimensionAspect_SetArrowTailSize(self, *args)


    def ArrowTailSize(self, *args):
        """
        ArrowTailSize(Handle_Prs3d_DimensionAspect self) -> Standard_Real

        Returns arrow tail size.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Handle_Prs3d_DimensionAspect_ArrowTailSize(self, *args)


    def SetValueStringFormat(self, *args):
        """
        SetValueStringFormat(Handle_Prs3d_DimensionAspect self, TCollection_AsciiString theFormat)

        Sets "sprintf"-syntax format for formatting dimension value labels.

        :type theFormat: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Prs3d.Handle_Prs3d_DimensionAspect_SetValueStringFormat(self, *args)


    def ValueStringFormat(self, *args):
        """
        Returns format.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Prs3d.Handle_Prs3d_DimensionAspect_ValueStringFormat(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Prs3d_DimensionAspect self)

        Memory deallocator for transient classes


        """
        return _Prs3d.Handle_Prs3d_DimensionAspect_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Prs3d_DimensionAspect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Prs3d_DimensionAspect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_DimensionAspect_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Prs3d_DimensionAspect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Prs3d_DimensionAspect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_DimensionAspect_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Prs3d_DimensionAspect self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Prs3d.Handle_Prs3d_DimensionAspect_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Prs3d_DimensionAspect self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Handle_Prs3d_DimensionAspect_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Prs3d_DimensionAspect self)

        Increments the reference counter of this object


        """
        return _Prs3d.Handle_Prs3d_DimensionAspect_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Prs3d_DimensionAspect self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Handle_Prs3d_DimensionAspect_DecrementRefCounter(self, *args)

Handle_Prs3d_DimensionAspect_swigregister = _Prs3d.Handle_Prs3d_DimensionAspect_swigregister
Handle_Prs3d_DimensionAspect_swigregister(Handle_Prs3d_DimensionAspect)

def Handle_Prs3d_DimensionAspect_DownCast(thing):
    return _Prs3d.Handle_Prs3d_DimensionAspect_DownCast(thing)
Handle_Prs3d_DimensionAspect_DownCast = _Prs3d.Handle_Prs3d_DimensionAspect_DownCast

class Prs3d_DimensionUnits(object):
    """
    This class provides units for two dimension groups:
    - lengthes (length, radius, diameter)
    - angles
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Prs3d_DimensionUnits self) -> Prs3d_DimensionUnits
        __init__(Prs3d_DimensionUnits self, Prs3d_DimensionUnits theUnits) -> Prs3d_DimensionUnits

        :type theUnits: OCC.wrapper.Prs3d.Prs3d_DimensionUnits

        """
        this = _Prs3d.new_Prs3d_DimensionUnits(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetAngleUnits(self, *args):
        """
        SetAngleUnits(Prs3d_DimensionUnits self, TCollection_AsciiString theUnits)

        Sets angle units

        :type theUnits: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Prs3d.Prs3d_DimensionUnits_SetAngleUnits(self, *args)


    def GetAngleUnits(self, *args):
        """
        @return angle units

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Prs3d.Prs3d_DimensionUnits_GetAngleUnits(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetLengthUnits(self, *args):
        """
        SetLengthUnits(Prs3d_DimensionUnits self, TCollection_AsciiString theUnits)

        Sets length units

        :type theUnits: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Prs3d.Prs3d_DimensionUnits_SetLengthUnits(self, *args)


    def GetLengthUnits(self, *args):
        """
        @return length units

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Prs3d.Prs3d_DimensionUnits_GetLengthUnits(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Prs3d.delete_Prs3d_DimensionUnits
Prs3d_DimensionUnits_swigregister = _Prs3d.Prs3d_DimensionUnits_swigregister
Prs3d_DimensionUnits_swigregister(Prs3d_DimensionUnits)

class Handle_Prs3d_LineAspect(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Prs3d_LineAspect self)

        Nullify the handle


        """
        return _Prs3d.Handle_Prs3d_LineAspect_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Prs3d_LineAspect self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Prs3d.Handle_Prs3d_LineAspect_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Prs3d_LineAspect self, Prs3d_LineAspect thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Prs3d.Handle_Prs3d_LineAspect_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Prs3d_LineAspect self, Handle_Prs3d_LineAspect theHandle) -> Handle_Prs3d_LineAspect
        assign(Handle_Prs3d_LineAspect self, Prs3d_LineAspect thePtr) -> Handle_Prs3d_LineAspect
        assign(Handle_Prs3d_LineAspect self, Handle_Prs3d_LineAspect theHandle) -> Handle_Prs3d_LineAspect

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Prs3d.Handle_Prs3d_LineAspect_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Prs3d_LineAspect self) -> Prs3d_LineAspect

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Prs3d.Handle_Prs3d_LineAspect_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Prs3d_LineAspect self) -> Prs3d_LineAspect

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Prs3d.Handle_Prs3d_LineAspect___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Prs3d_LineAspect self) -> Prs3d_LineAspect

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Prs3d.Handle_Prs3d_LineAspect___ref__(self, *args)


    def __hash__(self):
        return _Prs3d.Handle_Prs3d_LineAspect___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Prs3d.Handle_Prs3d_LineAspect___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Prs3d.new_Handle_Prs3d_LineAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Prs3d.Handle_Prs3d_LineAspect_DownCast)
    __swig_destroy__ = _Prs3d.delete_Handle_Prs3d_LineAspect

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Prs3d_LineAspect self) -> char const *

        :rtype: const char *

        """
        return _Prs3d.Handle_Prs3d_LineAspect_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Handle_Prs3d_LineAspect_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Handle_Prs3d_LineAspect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetColor(self, *args):
        """
        SetColor(Handle_Prs3d_LineAspect self, Quantity_Color theColor)

        Sets the line color defined at the time of construction.
        Default value: Quantity_NOC_YELLOW

        :type theColor: OCC.wrapper.Quantity.Quantity_Color

        """
        return _Prs3d.Handle_Prs3d_LineAspect_SetColor(self, *args)


    def SetTypeOfLine(self, *args):
        """
        SetTypeOfLine(Handle_Prs3d_LineAspect self, Aspect_TypeOfLine const theType)

        Sets the type of line defined at the time of construction.
        This could, for example, be solid, dotted or made up of dashes.
        Default value: Aspect_TOL_SOLID

        :type theType: OCC.wrapper.Aspect.Aspect_TypeOfLine

        """
        return _Prs3d.Handle_Prs3d_LineAspect_SetTypeOfLine(self, *args)


    def SetWidth(self, *args):
        """
        SetWidth(Handle_Prs3d_LineAspect self, Standard_Real const theWidth)

        Sets the line width defined at the time of construction.
        Default value: 1.

        :type theWidth: float

        """
        return _Prs3d.Handle_Prs3d_LineAspect_SetWidth(self, *args)


    def Aspect(self, *args):
        """
        Returns the line aspect. This is defined as the set of
        color, type and thickness attributes.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectLine3d

        """
        res = _Prs3d.Handle_Prs3d_LineAspect_Aspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetAspect(self, *args):
        """
        SetAspect(Handle_Prs3d_LineAspect self, Handle_Graphic3d_AspectLine3d theAspect)

        :type theAspect: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectLine3d

        """
        return _Prs3d.Handle_Prs3d_LineAspect_SetAspect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Prs3d_LineAspect self)

        Memory deallocator for transient classes


        """
        return _Prs3d.Handle_Prs3d_LineAspect_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Prs3d_LineAspect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Prs3d_LineAspect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_LineAspect_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Prs3d_LineAspect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Prs3d_LineAspect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_LineAspect_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Prs3d_LineAspect self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Prs3d.Handle_Prs3d_LineAspect_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Prs3d_LineAspect self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Handle_Prs3d_LineAspect_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Prs3d_LineAspect self)

        Increments the reference counter of this object


        """
        return _Prs3d.Handle_Prs3d_LineAspect_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Prs3d_LineAspect self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Handle_Prs3d_LineAspect_DecrementRefCounter(self, *args)

Handle_Prs3d_LineAspect_swigregister = _Prs3d.Handle_Prs3d_LineAspect_swigregister
Handle_Prs3d_LineAspect_swigregister(Handle_Prs3d_LineAspect)

def Handle_Prs3d_LineAspect_DownCast(thing):
    return _Prs3d.Handle_Prs3d_LineAspect_DownCast(thing)
Handle_Prs3d_LineAspect_DownCast = _Prs3d.Handle_Prs3d_LineAspect_DownCast

class Prs3d_Root(object):
    """A root class for the standard presentation algorithms of the StdPrs package."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CurrentGroup(*args):
        """
        CurrentGroup(Handle_Prs3d_Presentation thePrs3d) -> Handle_Graphic3d_Group

        Returns the current (last created) group of primititves inside graphic objects in the display.
        A group also contains the attributes whose ranges are limited to the primitives in it.

        :type thePrs3d: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_Group

        """
        return _Prs3d.Prs3d_Root_CurrentGroup(*args)

    CurrentGroup = staticmethod(CurrentGroup)

    def NewGroup(*args):
        """
        NewGroup(Handle_Prs3d_Presentation thePrs3d) -> Handle_Graphic3d_Group

        Returns the new group of primitives inside graphic objects in the display.
        A group also contains the attributes whose ranges are limited to the primitives in it.

        :type thePrs3d: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_Group

        """
        return _Prs3d.Prs3d_Root_NewGroup(*args)

    NewGroup = staticmethod(NewGroup)

    def __init__(self):
        """A root class for the standard presentation algorithms of the StdPrs package."""
        this = _Prs3d.new_Prs3d_Root()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Prs3d.delete_Prs3d_Root
Prs3d_Root_swigregister = _Prs3d.Prs3d_Root_swigregister
Prs3d_Root_swigregister(Prs3d_Root)

def Prs3d_Root_CurrentGroup(*args):
    """
    Prs3d_Root_CurrentGroup(Handle_Prs3d_Presentation thePrs3d) -> Handle_Graphic3d_Group

    Returns the current (last created) group of primititves inside graphic objects in the display.
    A group also contains the attributes whose ranges are limited to the primitives in it.

    :type thePrs3d: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
    :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_Group

    """
    return _Prs3d.Prs3d_Root_CurrentGroup(*args)

def Prs3d_Root_NewGroup(*args):
    """
    Prs3d_Root_NewGroup(Handle_Prs3d_Presentation thePrs3d) -> Handle_Graphic3d_Group

    Returns the new group of primitives inside graphic objects in the display.
    A group also contains the attributes whose ranges are limited to the primitives in it.

    :type thePrs3d: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
    :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_Group

    """
    return _Prs3d.Prs3d_Root_NewGroup(*args)

class Prs3d_PlaneAspect(Prs3d_BasicAspect):
    """A framework to define the display of planes."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Prs3d_PlaneAspect
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Prs3d_PlaneAspect(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Prs3d.Prs3d_PlaneAspect_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Prs3d.Prs3d_PlaneAspect_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Prs3d_PlaneAspect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Prs3d_PlaneAspect self) -> Prs3d_PlaneAspect

        Constructs an empty framework for the display of planes.


        """
        this = _Prs3d.new_Prs3d_PlaneAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def EdgesAspect(self, *args):
        """
        Returns the attributes of displayed edges involved in the presentation of planes.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        res = _Prs3d.Prs3d_PlaneAspect_EdgesAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsoAspect(self, *args):
        """
        Returns the attributes of displayed isoparameters involved in the presentation of planes.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        res = _Prs3d.Prs3d_PlaneAspect_IsoAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ArrowAspect(self, *args):
        """
        Returns the settings for displaying an arrow.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        res = _Prs3d.Prs3d_PlaneAspect_ArrowAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetArrowsLength(self, *args):
        """
        SetArrowsLength(Prs3d_PlaneAspect self, Standard_Real const theLength)

        :type theLength: float

        """
        return _Prs3d.Prs3d_PlaneAspect_SetArrowsLength(self, *args)


    def ArrowsLength(self, *args):
        """
        ArrowsLength(Prs3d_PlaneAspect self) -> Standard_Real

        Returns the length of the arrow shaft used in the display of arrows.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Prs3d_PlaneAspect_ArrowsLength(self, *args)


    def SetArrowsSize(self, *args):
        """
        SetArrowsSize(Prs3d_PlaneAspect self, Standard_Real const theSize)

        Sets the angle of the arrowhead used in the display of planes.

        :type theSize: float

        """
        return _Prs3d.Prs3d_PlaneAspect_SetArrowsSize(self, *args)


    def ArrowsSize(self, *args):
        """
        ArrowsSize(Prs3d_PlaneAspect self) -> Standard_Real

        Returns the size of arrows used in the display of planes.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Prs3d_PlaneAspect_ArrowsSize(self, *args)


    def SetArrowsAngle(self, *args):
        """
        SetArrowsAngle(Prs3d_PlaneAspect self, Standard_Real const theAngle)

        Sets the angle of the arrowhead used in the display
        of arrows involved in the presentation of planes.

        :type theAngle: float

        """
        return _Prs3d.Prs3d_PlaneAspect_SetArrowsAngle(self, *args)


    def ArrowsAngle(self, *args):
        """
        ArrowsAngle(Prs3d_PlaneAspect self) -> Standard_Real

        Returns the angle of the arrowhead used in the
        display of arrows involved in the presentation of planes.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Prs3d_PlaneAspect_ArrowsAngle(self, *args)


    def SetDisplayCenterArrow(self, *args):
        """
        SetDisplayCenterArrow(Prs3d_PlaneAspect self, Standard_Boolean const theToDraw)

        Sets the display attributes defined in DisplayCenterArrow to active.

        :type theToDraw: bool

        """
        return _Prs3d.Prs3d_PlaneAspect_SetDisplayCenterArrow(self, *args)


    def DisplayCenterArrow(self, *args):
        """
        DisplayCenterArrow(Prs3d_PlaneAspect self) -> Standard_Boolean

        Returns true if the display of center arrows is allowed.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_PlaneAspect_DisplayCenterArrow(self, *args)


    def SetDisplayEdgesArrows(self, *args):
        """
        SetDisplayEdgesArrows(Prs3d_PlaneAspect self, Standard_Boolean const theToDraw)

        Sets the display attributes defined in DisplayEdgesArrows to active.

        :type theToDraw: bool

        """
        return _Prs3d.Prs3d_PlaneAspect_SetDisplayEdgesArrows(self, *args)


    def DisplayEdgesArrows(self, *args):
        """
        DisplayEdgesArrows(Prs3d_PlaneAspect self) -> Standard_Boolean

        Returns true if the display of edge arrows is allowed.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_PlaneAspect_DisplayEdgesArrows(self, *args)


    def SetDisplayEdges(self, *args):
        """
        SetDisplayEdges(Prs3d_PlaneAspect self, Standard_Boolean const theToDraw)

        :type theToDraw: bool

        """
        return _Prs3d.Prs3d_PlaneAspect_SetDisplayEdges(self, *args)


    def DisplayEdges(self, *args):
        """
        DisplayEdges(Prs3d_PlaneAspect self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_PlaneAspect_DisplayEdges(self, *args)


    def SetDisplayIso(self, *args):
        """
        SetDisplayIso(Prs3d_PlaneAspect self, Standard_Boolean const theToDraw)

        Sets the display attributes defined in DisplayIso to active.

        :type theToDraw: bool

        """
        return _Prs3d.Prs3d_PlaneAspect_SetDisplayIso(self, *args)


    def DisplayIso(self, *args):
        """
        DisplayIso(Prs3d_PlaneAspect self) -> Standard_Boolean

        Returns true if the display of isoparameters is allowed.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_PlaneAspect_DisplayIso(self, *args)


    def SetPlaneLength(self, *args):
        """
        SetPlaneLength(Prs3d_PlaneAspect self, Standard_Real const theLX, Standard_Real const theLY)

        :type theLX: float
        :type theLY: float

        """
        return _Prs3d.Prs3d_PlaneAspect_SetPlaneLength(self, *args)


    def PlaneXLength(self, *args):
        """
        PlaneXLength(Prs3d_PlaneAspect self) -> Standard_Real

        Returns the length of the x axis used in the display of planes.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Prs3d_PlaneAspect_PlaneXLength(self, *args)


    def PlaneYLength(self, *args):
        """
        PlaneYLength(Prs3d_PlaneAspect self) -> Standard_Real

        Returns the length of the y axis used in the display of planes.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Prs3d_PlaneAspect_PlaneYLength(self, *args)


    def SetIsoDistance(self, *args):
        """
        SetIsoDistance(Prs3d_PlaneAspect self, Standard_Real const theL)

        Sets the distance L between isoparameters used in the display of planes.

        :type theL: float

        """
        return _Prs3d.Prs3d_PlaneAspect_SetIsoDistance(self, *args)


    def IsoDistance(self, *args):
        """
        IsoDistance(Prs3d_PlaneAspect self) -> Standard_Real

        Returns the distance between isoparameters used in the display of planes.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Prs3d_PlaneAspect_IsoDistance(self, *args)

    __swig_destroy__ = _Prs3d.delete_Prs3d_PlaneAspect
Prs3d_PlaneAspect_swigregister = _Prs3d.Prs3d_PlaneAspect_swigregister
Prs3d_PlaneAspect_swigregister(Prs3d_PlaneAspect)

def Prs3d_PlaneAspect_get_type_name(*args):
    """
    Prs3d_PlaneAspect_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Prs3d.Prs3d_PlaneAspect_get_type_name(*args)

def Prs3d_PlaneAspect_get_type_descriptor(*args):
    """
    Prs3d_PlaneAspect_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Prs3d.Prs3d_PlaneAspect_get_type_descriptor(*args)

class NCollection_List_Handle_TColgp_HSequenceOfPnt(NCollection.NCollection_BaseList):
    """
    Purpose:      Simple list to link  items together keeping the first 
    and the last one.
    Inherits BaseList, adding the data item to each node.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_List_Handle_TColgp_HSequenceOfPnt self) -> NCollection_List< opencascade::handle< TColgp_HSequenceOfPnt > >::iterator

        Returns an iterator pointing to the first element in the list.

        :rtype: iterator

        """
        return _Prs3d.NCollection_List_Handle_TColgp_HSequenceOfPnt_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_List_Handle_TColgp_HSequenceOfPnt self) -> NCollection_List< opencascade::handle< TColgp_HSequenceOfPnt > >::iterator

        Returns an iterator referring to the past-the-end element in the list.

        :rtype: iterator

        """
        return _Prs3d.NCollection_List_Handle_TColgp_HSequenceOfPnt_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_List_Handle_TColgp_HSequenceOfPnt self) -> NCollection_List< opencascade::handle< TColgp_HSequenceOfPnt > >::const_iterator

        Returns a const iterator pointing to the first element in the list.

        :rtype: const_iterator

        """
        return _Prs3d.NCollection_List_Handle_TColgp_HSequenceOfPnt_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_List_Handle_TColgp_HSequenceOfPnt self) -> NCollection_List< opencascade::handle< TColgp_HSequenceOfPnt > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the list.

        :rtype: const_iterator

        """
        return _Prs3d.NCollection_List_Handle_TColgp_HSequenceOfPnt_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:      Simple list to link  items together keeping the first 
        and the last one.
        Inherits BaseList, adding the data item to each node.
        """
        this = _Prs3d.new_NCollection_List_Handle_TColgp_HSequenceOfPnt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_List_Handle_TColgp_HSequenceOfPnt self) -> Standard_Integer

        Size - Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.NCollection_List_Handle_TColgp_HSequenceOfPnt_Size(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_List_Handle_TColgp_HSequenceOfPnt self, NCollection_List_Handle_TColgp_HSequenceOfPnt theOther) -> NCollection_List_Handle_TColgp_HSequenceOfPnt

        Replace this list by the items of another list (theOther parameter).
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_List
        :rtype: OCC.wrapper.NCollection.NCollection_List

        """
        return _Prs3d.NCollection_List_Handle_TColgp_HSequenceOfPnt_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_List_Handle_TColgp_HSequenceOfPnt self, NCollection_List_Handle_TColgp_HSequenceOfPnt theOther) -> NCollection_List_Handle_TColgp_HSequenceOfPnt

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_List
        :rtype: OCC.wrapper.NCollection.NCollection_List

        """
        return _Prs3d.NCollection_List_Handle_TColgp_HSequenceOfPnt_assign(self, *args)


    def Clear(self, *args):
        """
        Clear(NCollection_List_Handle_TColgp_HSequenceOfPnt self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear this list

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _Prs3d.NCollection_List_Handle_TColgp_HSequenceOfPnt_Clear(self, *args)


    def First(self, *args):
        """
        First item

        :rtype: const TheItemType &

        """
        res = _Prs3d.NCollection_List_Handle_TColgp_HSequenceOfPnt_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Last(self, *args):
        """
        Last item

        :rtype: const TheItemType &

        """
        res = _Prs3d.NCollection_List_Handle_TColgp_HSequenceOfPnt_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(NCollection_List_Handle_TColgp_HSequenceOfPnt self, Handle_TColgp_HSequenceOfPnt theItem) -> Handle_TColgp_HSequenceOfPnt
        Append(NCollection_List_Handle_TColgp_HSequenceOfPnt self, Handle_TColgp_HSequenceOfPnt theItem, NCollection_List< opencascade::handle< TColgp_HSequenceOfPnt > >::Iterator & theIter)
        Append(NCollection_List_Handle_TColgp_HSequenceOfPnt self, NCollection_List_Handle_TColgp_HSequenceOfPnt theOther)

        Append another list at the end

        :type theOther: OCC.wrapper.NCollection.NCollection_List

        """
        return _Prs3d.NCollection_List_Handle_TColgp_HSequenceOfPnt_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_List_Handle_TColgp_HSequenceOfPnt self, Handle_TColgp_HSequenceOfPnt theItem) -> Handle_TColgp_HSequenceOfPnt
        Prepend(NCollection_List_Handle_TColgp_HSequenceOfPnt self, NCollection_List_Handle_TColgp_HSequenceOfPnt theOther)

        Prepend another list at the beginning

        :type theOther: OCC.wrapper.NCollection.NCollection_List

        """
        return _Prs3d.NCollection_List_Handle_TColgp_HSequenceOfPnt_Prepend(self, *args)


    def RemoveFirst(self, *args):
        """
        RemoveFirst(NCollection_List_Handle_TColgp_HSequenceOfPnt self)

        RemoveFirst item


        """
        return _Prs3d.NCollection_List_Handle_TColgp_HSequenceOfPnt_RemoveFirst(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_List_Handle_TColgp_HSequenceOfPnt self, NCollection_List< opencascade::handle< TColgp_HSequenceOfPnt > >::Iterator & theIter)

        Remove item pointed by iterator theIter; 
        theIter is then set to the next item

        :type theIter: Iterator

        """
        return _Prs3d.NCollection_List_Handle_TColgp_HSequenceOfPnt_Remove(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_List_Handle_TColgp_HSequenceOfPnt self, Handle_TColgp_HSequenceOfPnt theItem, NCollection_List< opencascade::handle< TColgp_HSequenceOfPnt > >::Iterator & theIter) -> Handle_TColgp_HSequenceOfPnt
        InsertBefore(NCollection_List_Handle_TColgp_HSequenceOfPnt self, NCollection_List_Handle_TColgp_HSequenceOfPnt theOther, NCollection_List< opencascade::handle< TColgp_HSequenceOfPnt > >::Iterator & theIter)

        InsertBefore

        :type theOther: OCC.wrapper.NCollection.NCollection_List
        :type theIter: Iterator

        """
        return _Prs3d.NCollection_List_Handle_TColgp_HSequenceOfPnt_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_List_Handle_TColgp_HSequenceOfPnt self, Handle_TColgp_HSequenceOfPnt theItem, NCollection_List< opencascade::handle< TColgp_HSequenceOfPnt > >::Iterator & theIter) -> Handle_TColgp_HSequenceOfPnt
        InsertAfter(NCollection_List_Handle_TColgp_HSequenceOfPnt self, NCollection_List_Handle_TColgp_HSequenceOfPnt theOther, NCollection_List< opencascade::handle< TColgp_HSequenceOfPnt > >::Iterator & theIter)

        InsertAfter

        :type theOther: OCC.wrapper.NCollection.NCollection_List
        :type theIter: Iterator

        """
        return _Prs3d.NCollection_List_Handle_TColgp_HSequenceOfPnt_InsertAfter(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_List_Handle_TColgp_HSequenceOfPnt self)

        Reverse the list


        """
        return _Prs3d.NCollection_List_Handle_TColgp_HSequenceOfPnt_Reverse(self, *args)


    def __iter__(self):
        return _Prs3d.NCollection_List_Handle_TColgp_HSequenceOfPnt___iter__(self)
    __swig_destroy__ = _Prs3d.delete_NCollection_List_Handle_TColgp_HSequenceOfPnt
NCollection_List_Handle_TColgp_HSequenceOfPnt_swigregister = _Prs3d.NCollection_List_Handle_TColgp_HSequenceOfPnt_swigregister
NCollection_List_Handle_TColgp_HSequenceOfPnt_swigregister(NCollection_List_Handle_TColgp_HSequenceOfPnt)

class NCollection_List_Handle_TColgp_HSequenceOfPnt_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _Prs3d.new_NCollection_List_Handle_TColgp_HSequenceOfPnt_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Prs3d.delete_NCollection_List_Handle_TColgp_HSequenceOfPnt_IteratorHelper

    def __next__(self):
        return _Prs3d.NCollection_List_Handle_TColgp_HSequenceOfPnt_IteratorHelper___next__(self)
NCollection_List_Handle_TColgp_HSequenceOfPnt_IteratorHelper_swigregister = _Prs3d.NCollection_List_Handle_TColgp_HSequenceOfPnt_IteratorHelper_swigregister
NCollection_List_Handle_TColgp_HSequenceOfPnt_IteratorHelper_swigregister(NCollection_List_Handle_TColgp_HSequenceOfPnt_IteratorHelper)


try:
	Prs3d_NListOfSequenceOfPnt = NCollection_List_Handle_TColgp_HSequenceOfPnt
except NameError:
	pass # does not exist, probably ignored

class Prs3d_Projector(Standard.Standard_Transient):
    """
    A projector object.
    This object defines the parameters of a view for a
    visualization algorithm. It is, for example, used by the
    hidden line removal algorithms.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Prs3d_Projector
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Prs3d_Projector(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Prs3d_Projector self, HLRAlgo_Projector Pr) -> Prs3d_Projector
        __init__(Prs3d_Projector self, Standard_Boolean const Pers, Standard_Real const Focus, Standard_Real const DX, Standard_Real const DY, Standard_Real const DZ, Standard_Real const XAt, Standard_Real const YAt, Standard_Real const ZAt, Standard_Real const XUp, Standard_Real const YUp, Standard_Real const ZUp) -> Prs3d_Projector

        Constructs a projector framework from the following parameters
        -   Pers is true if the view is a perspective view and
        false if it is an axonometric one;
        -   Focus is the focal length if a perspective view is defined;
        -   DX, DY and DZ are the coordinates of the
        projection vector;
        -   XAt, YAt and ZAt are the coordinates of the view point;
        -   XUp, YUp and ZUp are the coordinates of the
        vertical direction vector.

        :type Pers: bool
        :type Focus: float
        :type DX: float
        :type DY: float
        :type DZ: float
        :type XAt: float
        :type YAt: float
        :type ZAt: float
        :type XUp: float
        :type YUp: float
        :type ZUp: float

        """
        this = _Prs3d.new_Prs3d_Projector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Projector(self, *args):
        """
        Projector(Prs3d_Projector self) -> HLRAlgo_Projector

        Returns a projector object for use in a hidden line removal algorithm.

        :rtype: OCC.wrapper.HLRAlgo.HLRAlgo_Projector

        """
        return _Prs3d.Prs3d_Projector_Projector(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Prs3d.Prs3d_Projector_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Prs3d.Prs3d_Projector_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Prs3d_Projector_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Prs3d.delete_Prs3d_Projector
Prs3d_Projector_swigregister = _Prs3d.Prs3d_Projector_swigregister
Prs3d_Projector_swigregister(Prs3d_Projector)

def Prs3d_Projector_get_type_name(*args):
    """
    Prs3d_Projector_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Prs3d.Prs3d_Projector_get_type_name(*args)

def Prs3d_Projector_get_type_descriptor(*args):
    """
    Prs3d_Projector_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Prs3d.Prs3d_Projector_get_type_descriptor(*args)

class Handle_Prs3d_Presentation(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Prs3d_Presentation self)

        Nullify the handle


        """
        return _Prs3d.Handle_Prs3d_Presentation_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Prs3d_Presentation self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Prs3d.Handle_Prs3d_Presentation_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Prs3d_Presentation self, Prs3d_Presentation thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Prs3d.Handle_Prs3d_Presentation_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Prs3d_Presentation self, Handle_Prs3d_Presentation theHandle) -> Handle_Prs3d_Presentation
        assign(Handle_Prs3d_Presentation self, Prs3d_Presentation thePtr) -> Handle_Prs3d_Presentation
        assign(Handle_Prs3d_Presentation self, Handle_Prs3d_Presentation theHandle) -> Handle_Prs3d_Presentation

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Prs3d.Handle_Prs3d_Presentation_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Prs3d_Presentation self) -> Prs3d_Presentation

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Prs3d.Handle_Prs3d_Presentation_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Prs3d_Presentation self) -> Prs3d_Presentation

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Prs3d.Handle_Prs3d_Presentation___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Prs3d_Presentation self) -> Prs3d_Presentation

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Prs3d.Handle_Prs3d_Presentation___ref__(self, *args)


    def __hash__(self):
        return _Prs3d.Handle_Prs3d_Presentation___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Prs3d.Handle_Prs3d_Presentation___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Prs3d.new_Handle_Prs3d_Presentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Prs3d.Handle_Prs3d_Presentation_DownCast)
    __swig_destroy__ = _Prs3d.delete_Handle_Prs3d_Presentation

    def Compute(self, *args):
        """
        Compute(Handle_Prs3d_Presentation self, Handle_Graphic3d_DataStructureManager aProjector) -> Handle_Graphic3d_Structure
        Compute(Handle_Prs3d_Presentation self, Handle_Graphic3d_DataStructureManager theProjector, Handle_Geom_Transformation theTrsf) -> Handle_Graphic3d_Structure
        Compute(Handle_Prs3d_Presentation self, Handle_Graphic3d_DataStructureManager aProjector, Handle_Graphic3d_Structure aStructure)
        Compute(Handle_Prs3d_Presentation self, Handle_Graphic3d_DataStructureManager theProjector, Handle_Geom_Transformation theTrsf, Handle_Graphic3d_Structure theStructure)

        Returns the new Structure defined for the new visualization

        :type theProjector: OCC.wrapper.Graphic3d.Handle_Graphic3d_DataStructureManager
        :type theTrsf: OCC.wrapper.Geom.Handle_Geom_Transformation
        :type theStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        return _Prs3d.Handle_Prs3d_Presentation_Compute(self, *args)


    def Connect(self, *args):
        """
        Connect(Handle_Prs3d_Presentation self, Handle_Prs3d_Presentation aPresentation)

        :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation

        """
        return _Prs3d.Handle_Prs3d_Presentation_Connect(self, *args)


    def Remove(self, *args):
        """
        Remove(Handle_Prs3d_Presentation self, Handle_Prs3d_Presentation aPresentation)

        :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation

        """
        return _Prs3d.Handle_Prs3d_Presentation_Remove(self, *args)


    def RemoveAll(self, *args):
        """RemoveAll(Handle_Prs3d_Presentation self)"""
        return _Prs3d.Handle_Prs3d_Presentation_RemoveAll(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Prs3d_Presentation self) -> char const *

        :rtype: const char *

        """
        return _Prs3d.Handle_Prs3d_Presentation_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Handle_Prs3d_Presentation_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Handle_Prs3d_Presentation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Clear(self, *args):
        """
        Clear(Handle_Prs3d_Presentation self, Standard_Boolean const WithDestruction)

        if WithDestruction == Standard_True then
        suppress all the groups of primitives in the structure.
        and it is mandatory to create a new group in <me>.
        if WithDestruction == Standard_False then
        clears all the groups of primitives in the structure.
        and all the groups are conserved and empty.
        They will be erased at the next screen update.
        The structure itself is conserved.
        The transformation and the attributes of <me> are conserved.
        The childs of <me> are conserved.

        :type WithDestruction: bool

        """
        return _Prs3d.Handle_Prs3d_Presentation_Clear(self, *args)


    def Display(self, *args):
        """
        Display(Handle_Prs3d_Presentation self)

        Displays the structure <me> in all the views of the visualiser.


        """
        return _Prs3d.Handle_Prs3d_Presentation_Display(self, *args)


    def DisplayPriority(self, *args):
        """
        DisplayPriority(Handle_Prs3d_Presentation self) -> Standard_Integer

        Returns the current display priority for the
        structure <me>.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Handle_Prs3d_Presentation_DisplayPriority(self, *args)


    def Erase(self, *args):
        """
        Erase(Handle_Prs3d_Presentation self)

        Erases the structure <me> in all the views
        of the visualiser.


        """
        return _Prs3d.Handle_Prs3d_Presentation_Erase(self, *args)


    def Highlight(self, *args):
        """
        Highlight(Handle_Prs3d_Presentation self, Handle_Graphic3d_PresentationAttributes theStyle, Standard_Boolean const theToUpdateMgr)

        Highlights the structure in all the views with the given style
        @param theStyle [in] the style (type of highlighting: box/color, color and opacity)
        @param theToUpdateMgr [in] defines whether related computed structures will be
        highlighted via structure manager or not

        :type theStyle: OCC.wrapper.Graphic3d.Handle_Graphic3d_PresentationAttributes
        :type theToUpdateMgr: bool

        """
        return _Prs3d.Handle_Prs3d_Presentation_Highlight(self, *args)


    def CalculateBoundBox(self, *args):
        """
        CalculateBoundBox(Handle_Prs3d_Presentation self)

        Computes axis-aligned bounding box of a structure.


        """
        return _Prs3d.Handle_Prs3d_Presentation_CalculateBoundBox(self, *args)


    def SetInfiniteState(self, *args):
        """
        SetInfiniteState(Handle_Prs3d_Presentation self, Standard_Boolean const theToSet)

        If <theToSet> is Standard_True then <me> is infinite and
        the MinMaxValues method method return :
        theXMin = theYMin = theZMin = RealFirst().
        theXMax = theYMax = theZMax = RealLast().
        By default, <me> is not infinite but empty.

        :type theToSet: bool

        """
        return _Prs3d.Handle_Prs3d_Presentation_SetInfiniteState(self, *args)


    def SetDisplayPriority(self, *args):
        """
        SetDisplayPriority(Handle_Prs3d_Presentation self, Standard_Integer const Priority)

        Modifies the order of displaying the structure.
        Values are between 0 and 10.
        Structures are drawn according to their display priorities
        in ascending order.
        A structure of priority 10 is displayed the last and appears over the others.
        The default value is 5.
        Category: Methods to modify the class definition
        Warning: If <me> is displayed then the SetDisplayPriority
        method erase <me> and display <me> with the
        new priority.
        Raises PriorityDefinitionError if <Priority> is
        greater than 10 or a negative value.

        :type Priority: int

        """
        return _Prs3d.Handle_Prs3d_Presentation_SetDisplayPriority(self, *args)


    def ResetDisplayPriority(self, *args):
        """
        ResetDisplayPriority(Handle_Prs3d_Presentation self)

        Reset the current priority of the structure to the
        previous priority.
        Category: Methods to modify the class definition
        Warning: If <me> is displayed then the SetDisplayPriority
        method erase <me> and display <me> with the
        previous priority.


        """
        return _Prs3d.Handle_Prs3d_Presentation_ResetDisplayPriority(self, *args)


    def SetZLayer(self, *args):
        """
        SetZLayer(Handle_Prs3d_Presentation self, Graphic3d_ZLayerId const theLayerId)

        Set Z layer ID for the structure. The Z layer mechanism
        allows to display structures presented in higher layers in overlay
        of structures in lower layers by switching off z buffer depth
        test between layers

        :type theLayerId: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _Prs3d.Handle_Prs3d_Presentation_SetZLayer(self, *args)


    def GetZLayer(self, *args):
        """
        GetZLayer(Handle_Prs3d_Presentation self) -> Graphic3d_ZLayerId

        Get Z layer ID of displayed structure. The method
        returns -1 if the structure has no ID (deleted from graphic driver).

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _Prs3d.Handle_Prs3d_Presentation_GetZLayer(self, *args)


    def SetClipPlanes(self, *args):
        """
        SetClipPlanes(Handle_Prs3d_Presentation self, Handle_Graphic3d_SequenceOfHClipPlane thePlanes)

        Changes a sequence of clip planes slicing the structure on rendering.
        @param thePlanes [in] the set of clip planes.

        :type thePlanes: OCC.wrapper.Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane

        """
        return _Prs3d.Handle_Prs3d_Presentation_SetClipPlanes(self, *args)


    def ClipPlanes(self, *args):
        """
        Get clip planes slicing the structure on rendering.
        @return set of clip planes.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane

        """
        res = _Prs3d.Handle_Prs3d_Presentation_ClipPlanes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetVisible(self, *args):
        """
        SetVisible(Handle_Prs3d_Presentation self, Standard_Boolean const AValue)

        Modifies the visibility indicator to Standard_True or
        Standard_False for the structure <me>.
        The default value at the definition of <me> is
        Standard_True.

        :type AValue: bool

        """
        return _Prs3d.Handle_Prs3d_Presentation_SetVisible(self, *args)


    def SetVisual(self, *args):
        """
        SetVisual(Handle_Prs3d_Presentation self, Graphic3d_TypeOfStructure const AVisual)

        Modifies the visualisation mode for the structure <me>.

        :type AVisual: OCC.wrapper.Graphic3d.Graphic3d_TypeOfStructure

        """
        return _Prs3d.Handle_Prs3d_Presentation_SetVisual(self, *args)


    def SetZoomLimit(self, *args):
        """
        SetZoomLimit(Handle_Prs3d_Presentation self, Standard_Real const LimitInf, Standard_Real const LimitSup)

        Modifies the minimum and maximum zoom coefficients
        for the structure <me>.
        The default value at the definition of <me> is unlimited.
        Category: Methods to modify the class definition
        Warning: Raises StructureDefinitionError if <LimitInf> is
        greater than <LimitSup> or if <LimitInf> or
        <LimitSup> is a negative value.

        :type LimitInf: float
        :type LimitSup: float

        """
        return _Prs3d.Handle_Prs3d_Presentation_SetZoomLimit(self, *args)


    def SetIsForHighlight(self, *args):
        """
        SetIsForHighlight(Handle_Prs3d_Presentation self, Standard_Boolean const isForHighlight)

        marks the structure <me> representing wired structure needed for
        highlight only so it won't be added to BVH tree.
        Category: Methods to modify the class definition

        :type isForHighlight: bool

        """
        return _Prs3d.Handle_Prs3d_Presentation_SetIsForHighlight(self, *args)


    def UnHighlight(self, *args):
        """
        UnHighlight(Handle_Prs3d_Presentation self)

        Suppresses the highlight for the structure <me>
        in all the views of the visualiser.


        """
        return _Prs3d.Handle_Prs3d_Presentation_UnHighlight(self, *args)


    def ReCompute(self, *args):
        """
        ReCompute(Handle_Prs3d_Presentation self)
        ReCompute(Handle_Prs3d_Presentation self, Handle_Graphic3d_DataStructureManager aProjector)

        Forces a new construction of the structure <me>
        if <me> is displayed in <aProjetor> and TOS_COMPUTED.

        :type aProjector: OCC.wrapper.Graphic3d.Handle_Graphic3d_DataStructureManager

        """
        return _Prs3d.Handle_Prs3d_Presentation_ReCompute(self, *args)


    def ContainsFacet(self, *args):
        """
        ContainsFacet(Handle_Prs3d_Presentation self) -> Standard_Boolean

        Returns Standard_True if the structure <me> contains
        Polygons, Triangles or Quadrangles.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Presentation_ContainsFacet(self, *args)


    def Groups(self, *args):
        """
        Returns the groups sequence included in the structure <me> (internal storage).

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_SequenceOfGroup

        """
        res = _Prs3d.Handle_Prs3d_Presentation_Groups(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NumberOfGroups(self, *args):
        """
        NumberOfGroups(Handle_Prs3d_Presentation self) -> Standard_Integer

        Returns the current number of groups in the
        structure <me>.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Handle_Prs3d_Presentation_NumberOfGroups(self, *args)


    def NewGroup(self, *args):
        """
        NewGroup(Handle_Prs3d_Presentation self) -> Handle_Graphic3d_Group

        Append new group to this structure.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_Group

        """
        return _Prs3d.Handle_Prs3d_Presentation_NewGroup(self, *args)


    def HighlightStyle(self, *args):
        """
        Returns the highlight color for the Highlight method
        with the highlight method TOHM_COLOR or TOHM_BOUNDBOX.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_PresentationAttributes

        """
        res = _Prs3d.Handle_Prs3d_Presentation_HighlightStyle(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsDeleted(self, *args):
        """
        IsDeleted(Handle_Prs3d_Presentation self) -> Standard_Boolean

        Returns Standard_True if the structure <me> is deleted.
        <me> is deleted after the call Remove (me).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Presentation_IsDeleted(self, *args)


    def IsDisplayed(self, *args):
        """
        IsDisplayed(Handle_Prs3d_Presentation self) -> Standard_Boolean

        Returns the display indicator for the structure <me>.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Presentation_IsDisplayed(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(Handle_Prs3d_Presentation self) -> Standard_Boolean

        Returns Standard_True if the structure <me> is empty.
        Warning: A structure is empty if :
        it do not have group or all the groups are empties
        and it do not have descendant or all the descendants
        are empties.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Presentation_IsEmpty(self, *args)


    def IsInfinite(self, *args):
        """
        IsInfinite(Handle_Prs3d_Presentation self) -> Standard_Boolean

        Returns Standard_True if the structure <me> is infinite.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Presentation_IsInfinite(self, *args)


    def IsHighlighted(self, *args):
        """
        IsHighlighted(Handle_Prs3d_Presentation self) -> Standard_Boolean

        Returns the highlight indicator for the structure <me>.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Presentation_IsHighlighted(self, *args)


    def IsTransformed(self, *args):
        """
        IsTransformed(Handle_Prs3d_Presentation self) -> Standard_Boolean

        Returns Standard_True if the structure <me> is transformed.
        <=> The transformation != Identity.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Presentation_IsTransformed(self, *args)


    def IsVisible(self, *args):
        """
        IsVisible(Handle_Prs3d_Presentation self) -> Standard_Boolean

        Returns the visibility indicator for the structure <me>.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Presentation_IsVisible(self, *args)


    def MinMaxValues(self, *args):
        """
        MinMaxValues(Handle_Prs3d_Presentation self, Standard_Boolean const theToIgnoreInfiniteFlag) -> Bnd_Box

        Returns the coordinates of the boundary box of the structure <me>.
        If <theToIgnoreInfiniteFlag> is TRUE, the method returns actual graphical
        boundaries of the Graphic3d_Group components. Otherwise, the
        method returns boundaries taking into account infinite state
        of the structure. This approach generally used for application
        specific fit operation (e.g. fitting the model into screen,
        not taking into accout infinite helper elements).
        Warning: If the structure <me> is empty then the empty box is returned,
        If the structure <me> is infinite then the whole box is returned.

        :type theToIgnoreInfiniteFlag: bool
        :rtype: OCC.wrapper.Bnd.Bnd_Box

        """
        return _Prs3d.Handle_Prs3d_Presentation_MinMaxValues(self, *args)


    def Visual(self, *args):
        """
        Visual(Handle_Prs3d_Presentation self) -> Graphic3d_TypeOfStructure

        Returns the visualisation mode for the structure <me>.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfStructure

        """
        return _Prs3d.Handle_Prs3d_Presentation_Visual(self, *args)


    def AcceptConnection(self, *args):
        """
        AcceptConnection(Handle_Prs3d_Presentation self, Handle_Graphic3d_Structure AStructure1, Handle_Graphic3d_Structure AStructure2, Graphic3d_TypeOfConnection const AType) -> Standard_Boolean

        Returns Standard_True if the connection is possible between
        <AStructure1> and <AStructure2> without a creation
        of a cycle.

        It's not possible to call the method
        AStructure1->Connect (AStructure2, TypeOfConnection)
        if
        - the set of all ancestors of <AStructure1> contains
        <AStructure1> and if the
        TypeOfConnection == TOC_DESCENDANT
        - the set of all descendants of <AStructure1> contains
        <AStructure2> and if the
        TypeOfConnection == TOC_ANCESTOR

        :type AStructure1: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
        :type AStructure2: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
        :type AType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfConnection
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Presentation_AcceptConnection(self, *args)


    def Ancestors(self, *args):
        """
        Ancestors(Handle_Prs3d_Presentation self, Graphic3d_MapOfStructure & SG)

        Returns the group of structures to which <me> is connected.

        :type SG: OCC.wrapper.Graphic3d.Graphic3d_MapOfStructure

        """
        return _Prs3d.Handle_Prs3d_Presentation_Ancestors(self, *args)


    def Descendants(self, *args):
        """
        Descendants(Handle_Prs3d_Presentation self, Graphic3d_MapOfStructure & SG)

        Returns the group of structures connected to <me>.

        :type SG: OCC.wrapper.Graphic3d.Graphic3d_MapOfStructure

        """
        return _Prs3d.Handle_Prs3d_Presentation_Descendants(self, *args)


    def Disconnect(self, *args):
        """
        Disconnect(Handle_Prs3d_Presentation self, Handle_Graphic3d_Structure AStructure)

        Suppress the connection between <AStructure> and <me>.

        :type AStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        return _Prs3d.Handle_Prs3d_Presentation_Disconnect(self, *args)


    def DisconnectAll(self, *args):
        """
        DisconnectAll(Handle_Prs3d_Presentation self, Graphic3d_TypeOfConnection const AType)

        If Atype is TOC_DESCENDANT then suppress all
        the connections with the child structures of <me>.
        If Atype is TOC_ANCESTOR then suppress all
        the connections with the parent structures of <me>.

        :type AType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfConnection

        """
        return _Prs3d.Handle_Prs3d_Presentation_DisconnectAll(self, *args)


    def Network(self, *args):
        """
        Network(Handle_Prs3d_Presentation self, Handle_Graphic3d_Structure AStructure, Graphic3d_TypeOfConnection const AType, Graphic3d_MapOfStructure & ASet)

        Returns <ASet> the group of structures :
        - directly or indirectly connected to <AStructure> if the
        TypeOfConnection == TOC_DESCENDANT
        - to which <AStructure> is directly or indirectly connected
        if the TypeOfConnection == TOC_ANCESTOR

        :type AStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
        :type AType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfConnection
        :type ASet: OCC.wrapper.Graphic3d.Graphic3d_MapOfStructure

        """
        return _Prs3d.Handle_Prs3d_Presentation_Network(self, *args)


    def SetOwner(self, *args):
        """
        SetOwner(Handle_Prs3d_Presentation self, Standard_Address const Owner)

        :type Owner: OCC.wrapper.Standard.Standard_Address

        """
        return _Prs3d.Handle_Prs3d_Presentation_SetOwner(self, *args)


    def Owner(self, *args):
        """
        Owner(Handle_Prs3d_Presentation self) -> Standard_Address

        :rtype: OCC.wrapper.Standard.Standard_Address

        """
        return _Prs3d.Handle_Prs3d_Presentation_Owner(self, *args)


    def SetHLRValidation(self, *args):
        """
        SetHLRValidation(Handle_Prs3d_Presentation self, Standard_Boolean const AFlag)

        :type AFlag: bool

        """
        return _Prs3d.Handle_Prs3d_Presentation_SetHLRValidation(self, *args)


    def HLRValidation(self, *args):
        """
        HLRValidation(Handle_Prs3d_Presentation self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Presentation_HLRValidation(self, *args)


    def Transformation(self, *args):
        """
        Return local transformation.

        :rtype: OCC.wrapper.Geom.Handle_Geom_Transformation

        """
        res = _Prs3d.Handle_Prs3d_Presentation_Transformation(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetTransformation(self, *args):
        """
        SetTransformation(Handle_Prs3d_Presentation self, Handle_Geom_Transformation theTrsf)

        Modifies the current local transformation

        :type theTrsf: OCC.wrapper.Geom.Handle_Geom_Transformation

        """
        return _Prs3d.Handle_Prs3d_Presentation_SetTransformation(self, *args)


    def Transform(self, *args):
        """
        Transform(Handle_Prs3d_Presentation self, Handle_Geom_Transformation theTrsf)

        :type theTrsf: OCC.wrapper.Geom.Handle_Geom_Transformation

        """
        return _Prs3d.Handle_Prs3d_Presentation_Transform(self, *args)


    def SetTransformPersistence(self, *args):
        """
        SetTransformPersistence(Handle_Prs3d_Presentation self, Handle_Graphic3d_TransformPers theTrsfPers)

        Modifies the current transform persistence (pan, zoom or rotate)

        :type theTrsfPers: OCC.wrapper.Graphic3d.Handle_Graphic3d_TransformPers

        """
        return _Prs3d.Handle_Prs3d_Presentation_SetTransformPersistence(self, *args)


    def TransformPersistence(self, *args):
        """
        @return transform persistence of the presentable object.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_TransformPers

        """
        res = _Prs3d.Handle_Prs3d_Presentation_TransformPersistence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetMutable(self, *args):
        """
        SetMutable(Handle_Prs3d_Presentation self, Standard_Boolean const theIsMutable)

        Sets if the structure location has mutable nature (content or location will be changed regularly).

        :type theIsMutable: bool

        """
        return _Prs3d.Handle_Prs3d_Presentation_SetMutable(self, *args)


    def IsMutable(self, *args):
        """
        IsMutable(Handle_Prs3d_Presentation self) -> Standard_Boolean

        Returns true if structure has mutable nature (content or location are be changed regularly).
        Mutable structure will be managed in different way than static onces.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Presentation_IsMutable(self, *args)


    def ComputeVisual(self, *args):
        """
        ComputeVisual(Handle_Prs3d_Presentation self) -> Graphic3d_TypeOfStructure

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfStructure

        """
        return _Prs3d.Handle_Prs3d_Presentation_ComputeVisual(self, *args)


    def GraphicClear(self, *args):
        """
        GraphicClear(Handle_Prs3d_Presentation self, Standard_Boolean const WithDestruction)

        Clears the structure <me>.

        :type WithDestruction: bool

        """
        return _Prs3d.Handle_Prs3d_Presentation_GraphicClear(self, *args)


    def GraphicConnect(self, *args):
        """
        GraphicConnect(Handle_Prs3d_Presentation self, Handle_Graphic3d_Structure ADaughter)

        :type ADaughter: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        return _Prs3d.Handle_Prs3d_Presentation_GraphicConnect(self, *args)


    def GraphicDisconnect(self, *args):
        """
        GraphicDisconnect(Handle_Prs3d_Presentation self, Handle_Graphic3d_Structure ADaughter)

        :type ADaughter: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        return _Prs3d.Handle_Prs3d_Presentation_GraphicDisconnect(self, *args)


    def GraphicTransform(self, *args):
        """
        GraphicTransform(Handle_Prs3d_Presentation self, Handle_Geom_Transformation theTrsf)

        Internal method which sets new transformation without calling graphic manager callbacks.

        :type theTrsf: OCC.wrapper.Geom.Handle_Geom_Transformation

        """
        return _Prs3d.Handle_Prs3d_Presentation_GraphicTransform(self, *args)


    def Identification(self, *args):
        """
        Identification(Handle_Prs3d_Presentation self) -> Standard_Integer

        Returns the identification number of the structure <me>.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Handle_Prs3d_Presentation_Identification(self, *args)


    def PrintNetwork(self, *args):
        """
        PrintNetwork(Handle_Prs3d_Presentation self, Handle_Graphic3d_Structure AStructure, Graphic3d_TypeOfConnection const AType)

        Prints informations about the network associated
        with the structure <AStructure>.

        :type AStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
        :type AType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfConnection

        """
        return _Prs3d.Handle_Prs3d_Presentation_PrintNetwork(self, *args)


    def SetComputeVisual(self, *args):
        """
        SetComputeVisual(Handle_Prs3d_Presentation self, Graphic3d_TypeOfStructure const AVisual)

        :type AVisual: OCC.wrapper.Graphic3d.Graphic3d_TypeOfStructure

        """
        return _Prs3d.Handle_Prs3d_Presentation_SetComputeVisual(self, *args)


    def Transforms(self, *args):
        """
        Transforms(Handle_Prs3d_Presentation self, gp_Trsf theTrsf, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ)

        Transforms theX, theY, theZ with the transformation theTrsf.

        :type theTrsf: OCC.wrapper.gp.gp_Trsf
        :type theX: float
        :type theY: float
        :type theZ: float
        :type theNewX: float
        :type theNewY: float
        :type theNewZ: float

        """
        return _Prs3d.Handle_Prs3d_Presentation_Transforms(self, *args)


    def CStructure(self, *args):
        """
        Returns the low-level structure

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_CStructure

        """
        res = _Prs3d.Handle_Prs3d_Presentation_CStructure(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Prs3d_Presentation self)

        Memory deallocator for transient classes


        """
        return _Prs3d.Handle_Prs3d_Presentation_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Prs3d_Presentation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Prs3d_Presentation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Presentation_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Prs3d_Presentation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Prs3d_Presentation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Presentation_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Prs3d_Presentation self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Prs3d.Handle_Prs3d_Presentation_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Prs3d_Presentation self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Handle_Prs3d_Presentation_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Prs3d_Presentation self)

        Increments the reference counter of this object


        """
        return _Prs3d.Handle_Prs3d_Presentation_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Prs3d_Presentation self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Handle_Prs3d_Presentation_DecrementRefCounter(self, *args)

Handle_Prs3d_Presentation_swigregister = _Prs3d.Handle_Prs3d_Presentation_swigregister
Handle_Prs3d_Presentation_swigregister(Handle_Prs3d_Presentation)

def Handle_Prs3d_Presentation_DownCast(thing):
    return _Prs3d.Handle_Prs3d_Presentation_DownCast(thing)
Handle_Prs3d_Presentation_DownCast = _Prs3d.Handle_Prs3d_Presentation_DownCast

class Prs3d_Arrow(Prs3d_Root):
    """Provides class methods to draw an arrow at a given location, along a given direction and using a given angle."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def DrawShaded(*args):
        """
        DrawShaded(gp_Ax1 theAxis, Standard_Real const theTubeRadius, Standard_Real const theAxisLength, Standard_Real const theConeRadius, Standard_Real const theConeLength, Standard_Integer const theNbFacettes) -> Handle_Graphic3d_ArrayOfTriangles

        Defines the representation of the arrow as shaded triangulation.
        @param theAxis       axis definition (arrow origin and direction)
        @param theTubeRadius tube (cylinder) radius
        @param theAxisLength overall arrow length (cylinder + cone)
        @param theConeRadius cone radius (arrow tip)
        @param theConeLength cone length (arrow tip)
        @param theNbFacettes tessellation quality for each part

        :type theAxis: OCC.wrapper.gp.gp_Ax1
        :type theTubeRadius: float
        :type theAxisLength: float
        :type theConeRadius: float
        :type theConeLength: float
        :type theNbFacettes: int
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_ArrayOfTriangles

        """
        return _Prs3d.Prs3d_Arrow_DrawShaded(*args)

    DrawShaded = staticmethod(DrawShaded)

    def DrawSegments(*args):
        """
        DrawSegments(gp_Pnt theLocation, gp_Dir theDir, Standard_Real const theAngle, Standard_Real const theLength, Standard_Integer const theNbSegments) -> Handle_Graphic3d_ArrayOfSegments

        Defines the representation of the arrow as a container of segments.
        @param theLocation   location of the arrow tip
        @param theDir        direction of the arrow
        @param theAngle      angle of opening of the arrow head
        @param theLength     length of the arrow (from the tip)
        @param theNbSegments count of points on polyline where location is connected

        :type theLocation: OCC.wrapper.gp.gp_Pnt
        :type theDir: OCC.wrapper.gp.gp_Dir
        :type theAngle: float
        :type theLength: float
        :type theNbSegments: int
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_ArrayOfSegments

        """
        return _Prs3d.Prs3d_Arrow_DrawSegments(*args)

    DrawSegments = staticmethod(DrawSegments)

    def Draw(*args):
        """
        Draw(Handle_Graphic3d_Group theGroup, gp_Pnt theLocation, gp_Dir theDirection, Standard_Real const theAngle, Standard_Real const theLength)
        Draw(Handle_Prs3d_Presentation thePrs, gp_Pnt theLocation, gp_Dir theDirection, Standard_Real const theAngle, Standard_Real const theLength)

        Alias to another method Draw() for backward compatibility.

        :type thePrs: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
        :type theLocation: OCC.wrapper.gp.gp_Pnt
        :type theDirection: OCC.wrapper.gp.gp_Dir
        :type theAngle: float
        :type theLength: float

        """
        return _Prs3d.Prs3d_Arrow_Draw(*args)

    Draw = staticmethod(Draw)

    def __init__(self):
        """Provides class methods to draw an arrow at a given location, along a given direction and using a given angle."""
        this = _Prs3d.new_Prs3d_Arrow()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Prs3d.delete_Prs3d_Arrow
Prs3d_Arrow_swigregister = _Prs3d.Prs3d_Arrow_swigregister
Prs3d_Arrow_swigregister(Prs3d_Arrow)

def Prs3d_Arrow_DrawShaded(*args):
    """
    Prs3d_Arrow_DrawShaded(gp_Ax1 theAxis, Standard_Real const theTubeRadius, Standard_Real const theAxisLength, Standard_Real const theConeRadius, Standard_Real const theConeLength, Standard_Integer const theNbFacettes) -> Handle_Graphic3d_ArrayOfTriangles

    Defines the representation of the arrow as shaded triangulation.
    @param theAxis       axis definition (arrow origin and direction)
    @param theTubeRadius tube (cylinder) radius
    @param theAxisLength overall arrow length (cylinder + cone)
    @param theConeRadius cone radius (arrow tip)
    @param theConeLength cone length (arrow tip)
    @param theNbFacettes tessellation quality for each part

    :type theAxis: OCC.wrapper.gp.gp_Ax1
    :type theTubeRadius: float
    :type theAxisLength: float
    :type theConeRadius: float
    :type theConeLength: float
    :type theNbFacettes: int
    :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_ArrayOfTriangles

    """
    return _Prs3d.Prs3d_Arrow_DrawShaded(*args)

def Prs3d_Arrow_DrawSegments(*args):
    """
    Prs3d_Arrow_DrawSegments(gp_Pnt theLocation, gp_Dir theDir, Standard_Real const theAngle, Standard_Real const theLength, Standard_Integer const theNbSegments) -> Handle_Graphic3d_ArrayOfSegments

    Defines the representation of the arrow as a container of segments.
    @param theLocation   location of the arrow tip
    @param theDir        direction of the arrow
    @param theAngle      angle of opening of the arrow head
    @param theLength     length of the arrow (from the tip)
    @param theNbSegments count of points on polyline where location is connected

    :type theLocation: OCC.wrapper.gp.gp_Pnt
    :type theDir: OCC.wrapper.gp.gp_Dir
    :type theAngle: float
    :type theLength: float
    :type theNbSegments: int
    :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_ArrayOfSegments

    """
    return _Prs3d.Prs3d_Arrow_DrawSegments(*args)

def Prs3d_Arrow_Draw(*args):
    """
    Draw(Handle_Graphic3d_Group theGroup, gp_Pnt theLocation, gp_Dir theDirection, Standard_Real const theAngle, Standard_Real const theLength)
    Prs3d_Arrow_Draw(Handle_Prs3d_Presentation thePrs, gp_Pnt theLocation, gp_Dir theDirection, Standard_Real const theAngle, Standard_Real const theLength)

    Alias to another method Draw() for backward compatibility.

    :type thePrs: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
    :type theLocation: OCC.wrapper.gp.gp_Pnt
    :type theDirection: OCC.wrapper.gp.gp_Dir
    :type theAngle: float
    :type theLength: float

    """
    return _Prs3d.Prs3d_Arrow_Draw(*args)

class Handle_Prs3d_DatumAspect(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Prs3d_DatumAspect self)

        Nullify the handle


        """
        return _Prs3d.Handle_Prs3d_DatumAspect_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Prs3d_DatumAspect self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Prs3d.Handle_Prs3d_DatumAspect_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Prs3d_DatumAspect self, Prs3d_DatumAspect thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Prs3d.Handle_Prs3d_DatumAspect_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Prs3d_DatumAspect self, Handle_Prs3d_DatumAspect theHandle) -> Handle_Prs3d_DatumAspect
        assign(Handle_Prs3d_DatumAspect self, Prs3d_DatumAspect thePtr) -> Handle_Prs3d_DatumAspect
        assign(Handle_Prs3d_DatumAspect self, Handle_Prs3d_DatumAspect theHandle) -> Handle_Prs3d_DatumAspect

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Prs3d.Handle_Prs3d_DatumAspect_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Prs3d_DatumAspect self) -> Prs3d_DatumAspect

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Prs3d.Handle_Prs3d_DatumAspect_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Prs3d_DatumAspect self) -> Prs3d_DatumAspect

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Prs3d.Handle_Prs3d_DatumAspect___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Prs3d_DatumAspect self) -> Prs3d_DatumAspect

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Prs3d.Handle_Prs3d_DatumAspect___ref__(self, *args)


    def __hash__(self):
        return _Prs3d.Handle_Prs3d_DatumAspect___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Prs3d.Handle_Prs3d_DatumAspect___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Prs3d.new_Handle_Prs3d_DatumAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Prs3d.Handle_Prs3d_DatumAspect_DownCast)
    __swig_destroy__ = _Prs3d.delete_Handle_Prs3d_DatumAspect

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Prs3d_DatumAspect self) -> char const *

        :rtype: const char *

        """
        return _Prs3d.Handle_Prs3d_DatumAspect_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Handle_Prs3d_DatumAspect_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Handle_Prs3d_DatumAspect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def LineAspect(self, *args):
        """
        LineAspect(Handle_Prs3d_DatumAspect self, Prs3d_DatumParts thePart) -> Handle_Prs3d_LineAspect

        Returns the right-handed coordinate system set in SetComponent.

        :type thePart: OCC.wrapper.Prs3d.Prs3d_DatumParts
        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        return _Prs3d.Handle_Prs3d_DatumAspect_LineAspect(self, *args)


    def ShadingAspect(self, *args):
        """
        ShadingAspect(Handle_Prs3d_DatumAspect self, Prs3d_DatumParts thePart) -> Handle_Prs3d_ShadingAspect

        Returns the right-handed coordinate system set in SetComponent.

        :type thePart: OCC.wrapper.Prs3d.Prs3d_DatumParts
        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_ShadingAspect

        """
        return _Prs3d.Handle_Prs3d_DatumAspect_ShadingAspect(self, *args)


    def TextAspect(self, *args):
        """
        Returns the right-handed coordinate system set in SetComponent.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_TextAspect

        """
        res = _Prs3d.Handle_Prs3d_DatumAspect_TextAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PointAspect(self, *args):
        """
        Returns the point aspect of origin wireframe presentation

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_PointAspect

        """
        res = _Prs3d.Handle_Prs3d_DatumAspect_PointAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ArrowAspect(self, *args):
        """
        Returns the arrow aspect of presentation

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_ArrowAspect

        """
        res = _Prs3d.Handle_Prs3d_DatumAspect_ArrowAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FirstAxisAspect(self, *args):
        """
        Returns the attributes for display of the first axis.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        res = _Prs3d.Handle_Prs3d_DatumAspect_FirstAxisAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SecondAxisAspect(self, *args):
        """
        Returns the attributes for display of the second axis.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        res = _Prs3d.Handle_Prs3d_DatumAspect_SecondAxisAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ThirdAxisAspect(self, *args):
        """
        Returns the attributes for display of the third axis.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        res = _Prs3d.Handle_Prs3d_DatumAspect_ThirdAxisAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetDrawFirstAndSecondAxis(self, *args):
        """
        SetDrawFirstAndSecondAxis(Handle_Prs3d_DatumAspect self, Standard_Boolean theToDraw)

        Sets the DrawFirstAndSecondAxis attributes to active.

        :type theToDraw: bool

        """
        return _Prs3d.Handle_Prs3d_DatumAspect_SetDrawFirstAndSecondAxis(self, *args)


    def DrawFirstAndSecondAxis(self, *args):
        """
        DrawFirstAndSecondAxis(Handle_Prs3d_DatumAspect self) -> Standard_Boolean

        Returns true if the first and second axes can be drawn.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_DatumAspect_DrawFirstAndSecondAxis(self, *args)


    def SetDrawThirdAxis(self, *args):
        """
        SetDrawThirdAxis(Handle_Prs3d_DatumAspect self, Standard_Boolean theToDraw)

        Sets the DrawThirdAxis attributes to active.

        :type theToDraw: bool

        """
        return _Prs3d.Handle_Prs3d_DatumAspect_SetDrawThirdAxis(self, *args)


    def DrawThirdAxis(self, *args):
        """
        DrawThirdAxis(Handle_Prs3d_DatumAspect self) -> Standard_Boolean

        Returns true if the third axis can be drawn.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_DatumAspect_DrawThirdAxis(self, *args)


    def DrawDatumPart(self, *args):
        """
        DrawDatumPart(Handle_Prs3d_DatumAspect self, Prs3d_DatumParts thePart) -> Standard_Boolean

        Returns true if the given part is used in axes of aspect

        :type thePart: OCC.wrapper.Prs3d.Prs3d_DatumParts
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_DatumAspect_DrawDatumPart(self, *args)


    def SetDrawDatumAxes(self, *args):
        """
        SetDrawDatumAxes(Handle_Prs3d_DatumAspect self, Prs3d_DatumAxes theType)

        Sets the axes used in the datum aspect

        :type theType: OCC.wrapper.Prs3d.Prs3d_DatumAxes

        """
        return _Prs3d.Handle_Prs3d_DatumAspect_SetDrawDatumAxes(self, *args)


    def DatumAxes(self, *args):
        """
        DatumAxes(Handle_Prs3d_DatumAspect self) -> Prs3d_DatumAxes

        Returns axes used in the datum aspect

        :rtype: OCC.wrapper.Prs3d.Prs3d_DatumAxes

        """
        return _Prs3d.Handle_Prs3d_DatumAspect_DatumAxes(self, *args)


    def SetAttribute(self, *args):
        """
        SetAttribute(Handle_Prs3d_DatumAspect self, Prs3d_DatumAttribute theType, Standard_Real const & theValue)

        Sets the attribute of the datum type

        :type theType: OCC.wrapper.Prs3d.Prs3d_DatumAttribute
        :type theValue: float

        """
        return _Prs3d.Handle_Prs3d_DatumAspect_SetAttribute(self, *args)


    def Attribute(self, *args):
        """
        Attribute(Handle_Prs3d_DatumAspect self, Prs3d_DatumAttribute theType) -> Standard_Real

        Returns the attribute of the datum type

        :type theType: OCC.wrapper.Prs3d.Prs3d_DatumAttribute
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Handle_Prs3d_DatumAspect_Attribute(self, *args)


    def SetAxisLength(self, *args):
        """
        SetAxisLength(Handle_Prs3d_DatumAspect self, Standard_Real theL1, Standard_Real theL2, Standard_Real theL3)

        Sets the lengths of the three axes.

        :type theL1: float
        :type theL2: float
        :type theL3: float

        """
        return _Prs3d.Handle_Prs3d_DatumAspect_SetAxisLength(self, *args)


    def AxisLength(self, *args):
        """
        AxisLength(Handle_Prs3d_DatumAspect self, Prs3d_DatumParts thePart) -> Standard_Real

        Returns the length of the displayed first axis.

        :type thePart: OCC.wrapper.Prs3d.Prs3d_DatumParts
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Handle_Prs3d_DatumAspect_AxisLength(self, *args)


    def FirstAxisLength(self, *args):
        """
        FirstAxisLength(Handle_Prs3d_DatumAspect self) -> Standard_Real

        Returns the length of the displayed first axis.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Handle_Prs3d_DatumAspect_FirstAxisLength(self, *args)


    def SecondAxisLength(self, *args):
        """
        SecondAxisLength(Handle_Prs3d_DatumAspect self) -> Standard_Real

        Returns the length of the displayed second axis.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Handle_Prs3d_DatumAspect_SecondAxisLength(self, *args)


    def ThirdAxisLength(self, *args):
        """
        ThirdAxisLength(Handle_Prs3d_DatumAspect self) -> Standard_Real

        Returns the length of the displayed third axis.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Handle_Prs3d_DatumAspect_ThirdAxisLength(self, *args)


    def ToDrawLabels(self, *args):
        """
        ToDrawLabels(Handle_Prs3d_DatumAspect self) -> Standard_Boolean

        @return true if axes labels are drawn; TRUE by default.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_DatumAspect_ToDrawLabels(self, *args)


    def SetDrawLabels(self, *args):
        """
        SetDrawLabels(Handle_Prs3d_DatumAspect self, Standard_Boolean theToDraw)

        Sets option to draw or not to draw text labels for axes

        :type theToDraw: bool

        """
        return _Prs3d.Handle_Prs3d_DatumAspect_SetDrawLabels(self, *args)


    def SetToDrawLabels(self, *args):
        """
        SetToDrawLabels(Handle_Prs3d_DatumAspect self, Standard_Boolean theToDraw)

        :type theToDraw: bool

        """
        return _Prs3d.Handle_Prs3d_DatumAspect_SetToDrawLabels(self, *args)


    def ToDrawArrows(self, *args):
        """
        ToDrawArrows(Handle_Prs3d_DatumAspect self) -> Standard_Boolean

        @return true if axes arrows are drawn; TRUE by default.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_DatumAspect_ToDrawArrows(self, *args)


    def SetDrawArrows(self, *args):
        """
        SetDrawArrows(Handle_Prs3d_DatumAspect self, Standard_Boolean theToDraw)

        Sets option to draw or not arrows for axes

        :type theToDraw: bool

        """
        return _Prs3d.Handle_Prs3d_DatumAspect_SetDrawArrows(self, *args)


    def ArrowPartForAxis(self, *args):
        """
        ArrowPartForAxis(Handle_Prs3d_DatumAspect self, Prs3d_DatumParts thePart) -> Prs3d_DatumParts

        Returns type of arrow for a type of axis

        :type thePart: OCC.wrapper.Prs3d.Prs3d_DatumParts
        :rtype: OCC.wrapper.Prs3d.Prs3d_DatumParts

        """
        return _Prs3d.Handle_Prs3d_DatumAspect_ArrowPartForAxis(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Prs3d_DatumAspect self)

        Memory deallocator for transient classes


        """
        return _Prs3d.Handle_Prs3d_DatumAspect_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Prs3d_DatumAspect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Prs3d_DatumAspect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_DatumAspect_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Prs3d_DatumAspect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Prs3d_DatumAspect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_DatumAspect_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Prs3d_DatumAspect self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Prs3d.Handle_Prs3d_DatumAspect_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Prs3d_DatumAspect self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Handle_Prs3d_DatumAspect_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Prs3d_DatumAspect self)

        Increments the reference counter of this object


        """
        return _Prs3d.Handle_Prs3d_DatumAspect_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Prs3d_DatumAspect self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Handle_Prs3d_DatumAspect_DecrementRefCounter(self, *args)

Handle_Prs3d_DatumAspect_swigregister = _Prs3d.Handle_Prs3d_DatumAspect_swigregister
Handle_Prs3d_DatumAspect_swigregister(Handle_Prs3d_DatumAspect)

def Handle_Prs3d_DatumAspect_DownCast(thing):
    return _Prs3d.Handle_Prs3d_DatumAspect_DownCast(thing)
Handle_Prs3d_DatumAspect_DownCast = _Prs3d.Handle_Prs3d_DatumAspect_DownCast

class Prs3d_ToolDisk(Prs3d_ToolQuadric):
    """Standard presentation algorithm that outputs graphical primitives for disk surface."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Create(*args):
        """
        Create(Standard_Real const theInnerRadius, Standard_Real const theOuterRadius, Standard_Integer const theNbSlices, Standard_Integer const theNbStacks, gp_Trsf theTrsf) -> Handle_Graphic3d_ArrayOfTriangles

        Generate primitives for 3D quadric surface and return a filled array.

        :type theInnerRadius: float
        :type theOuterRadius: float
        :type theNbSlices: int
        :type theNbStacks: int
        :type theTrsf: OCC.wrapper.gp.gp_Trsf
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_ArrayOfTriangles

        """
        return _Prs3d.Prs3d_ToolDisk_Create(*args)

    Create = staticmethod(Create)

    def __init__(self, *args):
        """
        __init__(Prs3d_ToolDisk self, Standard_Real const theInnerRadius, Standard_Real const theOuterRadius, Standard_Integer const theNbSlices, Standard_Integer const theNbStacks) -> Prs3d_ToolDisk

        Initializes the algorithm.

        :type theInnerRadius: float
        :type theOuterRadius: float
        :type theNbSlices: int
        :type theNbStacks: int

        """
        this = _Prs3d.new_Prs3d_ToolDisk(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Prs3d.delete_Prs3d_ToolDisk
Prs3d_ToolDisk_swigregister = _Prs3d.Prs3d_ToolDisk_swigregister
Prs3d_ToolDisk_swigregister(Prs3d_ToolDisk)

def Prs3d_ToolDisk_Create(*args):
    """
    Prs3d_ToolDisk_Create(Standard_Real const theInnerRadius, Standard_Real const theOuterRadius, Standard_Integer const theNbSlices, Standard_Integer const theNbStacks, gp_Trsf theTrsf) -> Handle_Graphic3d_ArrayOfTriangles

    Generate primitives for 3D quadric surface and return a filled array.

    :type theInnerRadius: float
    :type theOuterRadius: float
    :type theNbSlices: int
    :type theNbStacks: int
    :type theTrsf: OCC.wrapper.gp.gp_Trsf
    :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_ArrayOfTriangles

    """
    return _Prs3d.Prs3d_ToolDisk_Create(*args)

class Handle_Prs3d_ShadingAspect(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Prs3d_ShadingAspect self)

        Nullify the handle


        """
        return _Prs3d.Handle_Prs3d_ShadingAspect_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Prs3d_ShadingAspect self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Prs3d.Handle_Prs3d_ShadingAspect_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Prs3d_ShadingAspect self, Prs3d_ShadingAspect thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Prs3d.Handle_Prs3d_ShadingAspect_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Prs3d_ShadingAspect self, Handle_Prs3d_ShadingAspect theHandle) -> Handle_Prs3d_ShadingAspect
        assign(Handle_Prs3d_ShadingAspect self, Prs3d_ShadingAspect thePtr) -> Handle_Prs3d_ShadingAspect
        assign(Handle_Prs3d_ShadingAspect self, Handle_Prs3d_ShadingAspect theHandle) -> Handle_Prs3d_ShadingAspect

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Prs3d.Handle_Prs3d_ShadingAspect_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Prs3d_ShadingAspect self) -> Prs3d_ShadingAspect

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Prs3d.Handle_Prs3d_ShadingAspect_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Prs3d_ShadingAspect self) -> Prs3d_ShadingAspect

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Prs3d.Handle_Prs3d_ShadingAspect___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Prs3d_ShadingAspect self) -> Prs3d_ShadingAspect

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Prs3d.Handle_Prs3d_ShadingAspect___ref__(self, *args)


    def __hash__(self):
        return _Prs3d.Handle_Prs3d_ShadingAspect___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Prs3d.Handle_Prs3d_ShadingAspect___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Prs3d.new_Handle_Prs3d_ShadingAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Prs3d.Handle_Prs3d_ShadingAspect_DownCast)
    __swig_destroy__ = _Prs3d.delete_Handle_Prs3d_ShadingAspect

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Prs3d_ShadingAspect self) -> char const *

        :rtype: const char *

        """
        return _Prs3d.Handle_Prs3d_ShadingAspect_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Handle_Prs3d_ShadingAspect_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Handle_Prs3d_ShadingAspect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetColor(self, *args):
        """
        SetColor(Handle_Prs3d_ShadingAspect self, Quantity_Color aColor, Aspect_TypeOfFacingModel const aModel=Aspect_TOFM_BOTH_SIDE)

        Change the polygons interior color and material ambient color.

        :type aColor: OCC.wrapper.Quantity.Quantity_Color
        :type aModel: OCC.wrapper.Aspect.Aspect_TypeOfFacingModel

        """
        return _Prs3d.Handle_Prs3d_ShadingAspect_SetColor(self, *args)


    def SetMaterial(self, *args):
        """
        SetMaterial(Handle_Prs3d_ShadingAspect self, Graphic3d_MaterialAspect aMaterial, Aspect_TypeOfFacingModel const aModel=Aspect_TOFM_BOTH_SIDE)

        Change the polygons material aspect.

        :type aMaterial: OCC.wrapper.Graphic3d.Graphic3d_MaterialAspect
        :type aModel: OCC.wrapper.Aspect.Aspect_TypeOfFacingModel

        """
        return _Prs3d.Handle_Prs3d_ShadingAspect_SetMaterial(self, *args)


    def SetTransparency(self, *args):
        """
        SetTransparency(Handle_Prs3d_ShadingAspect self, Standard_Real const aValue, Aspect_TypeOfFacingModel const aModel=Aspect_TOFM_BOTH_SIDE)

        Change the polygons transparency value.
        Warning : aValue must be in the range 0,1. 0 is the default (NO transparent)

        :type aValue: float
        :type aModel: OCC.wrapper.Aspect.Aspect_TypeOfFacingModel

        """
        return _Prs3d.Handle_Prs3d_ShadingAspect_SetTransparency(self, *args)


    def Color(self, *args):
        """
        Returns the polygons color.

        :type aModel: OCC.wrapper.Aspect.Aspect_TypeOfFacingModel
        :rtype: OCC.wrapper.Quantity.Quantity_Color

        """
        res = _Prs3d.Handle_Prs3d_ShadingAspect_Color(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Material(self, *args):
        """
        Returns the polygons material aspect.

        :type aModel: OCC.wrapper.Aspect.Aspect_TypeOfFacingModel
        :rtype: OCC.wrapper.Graphic3d.Graphic3d_MaterialAspect

        """
        res = _Prs3d.Handle_Prs3d_ShadingAspect_Material(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Transparency(self, *args):
        """
        Transparency(Handle_Prs3d_ShadingAspect self, Aspect_TypeOfFacingModel const aModel=Aspect_TOFM_FRONT_SIDE) -> Standard_Real

        Returns the polygons transparency value.

        :type aModel: OCC.wrapper.Aspect.Aspect_TypeOfFacingModel
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Handle_Prs3d_ShadingAspect_Transparency(self, *args)


    def Aspect(self, *args):
        """
        Returns the polygons aspect properties.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectFillArea3d

        """
        res = _Prs3d.Handle_Prs3d_ShadingAspect_Aspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetAspect(self, *args):
        """
        SetAspect(Handle_Prs3d_ShadingAspect self, Handle_Graphic3d_AspectFillArea3d theAspect)

        :type theAspect: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectFillArea3d

        """
        return _Prs3d.Handle_Prs3d_ShadingAspect_SetAspect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Prs3d_ShadingAspect self)

        Memory deallocator for transient classes


        """
        return _Prs3d.Handle_Prs3d_ShadingAspect_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Prs3d_ShadingAspect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Prs3d_ShadingAspect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_ShadingAspect_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Prs3d_ShadingAspect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Prs3d_ShadingAspect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_ShadingAspect_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Prs3d_ShadingAspect self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Prs3d.Handle_Prs3d_ShadingAspect_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Prs3d_ShadingAspect self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Handle_Prs3d_ShadingAspect_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Prs3d_ShadingAspect self)

        Increments the reference counter of this object


        """
        return _Prs3d.Handle_Prs3d_ShadingAspect_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Prs3d_ShadingAspect self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Handle_Prs3d_ShadingAspect_DecrementRefCounter(self, *args)

Handle_Prs3d_ShadingAspect_swigregister = _Prs3d.Handle_Prs3d_ShadingAspect_swigregister
Handle_Prs3d_ShadingAspect_swigregister(Handle_Prs3d_ShadingAspect)

def Handle_Prs3d_ShadingAspect_DownCast(thing):
    return _Prs3d.Handle_Prs3d_ShadingAspect_DownCast(thing)
Handle_Prs3d_ShadingAspect_DownCast = _Prs3d.Handle_Prs3d_ShadingAspect_DownCast

class Handle_Prs3d_PresentationShadow(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Prs3d_PresentationShadow self)

        Nullify the handle


        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Prs3d_PresentationShadow self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Prs3d_PresentationShadow self, Prs3d_PresentationShadow thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Prs3d_PresentationShadow self, Handle_Prs3d_PresentationShadow theHandle) -> Handle_Prs3d_PresentationShadow
        assign(Handle_Prs3d_PresentationShadow self, Prs3d_PresentationShadow thePtr) -> Handle_Prs3d_PresentationShadow
        assign(Handle_Prs3d_PresentationShadow self, Handle_Prs3d_PresentationShadow theHandle) -> Handle_Prs3d_PresentationShadow

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Prs3d_PresentationShadow self) -> Prs3d_PresentationShadow

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Prs3d_PresentationShadow self) -> Prs3d_PresentationShadow

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Prs3d_PresentationShadow self) -> Prs3d_PresentationShadow

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow___ref__(self, *args)


    def __hash__(self):
        return _Prs3d.Handle_Prs3d_PresentationShadow___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Prs3d.Handle_Prs3d_PresentationShadow___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Prs3d.new_Handle_Prs3d_PresentationShadow(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Prs3d.Handle_Prs3d_PresentationShadow_DownCast)
    __swig_destroy__ = _Prs3d.delete_Handle_Prs3d_PresentationShadow

    def ParentId(self, *args):
        """
        ParentId(Handle_Prs3d_PresentationShadow self) -> Standard_Integer

        Returns the id of the parent presentation

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_ParentId(self, *args)


    def ParentAffinity(self, *args):
        """
        Returns view affinity of the parent presentation

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_ViewAffinity

        """
        res = _Prs3d.Handle_Prs3d_PresentationShadow_ParentAffinity(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def CalculateBoundBox(self, *args):
        """
        CalculateBoundBox(Handle_Prs3d_PresentationShadow self)

        Do nothing - axis-aligned bounding box should be initialized from parent structure.


        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_CalculateBoundBox(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Prs3d_PresentationShadow self) -> char const *

        :rtype: const char *

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Handle_Prs3d_PresentationShadow_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Handle_Prs3d_PresentationShadow_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Compute(self, *args):
        """
        Compute(Handle_Prs3d_PresentationShadow self, Handle_Graphic3d_DataStructureManager aProjector) -> Handle_Graphic3d_Structure
        Compute(Handle_Prs3d_PresentationShadow self, Handle_Graphic3d_DataStructureManager theProjector, Handle_Geom_Transformation theTrsf) -> Handle_Graphic3d_Structure
        Compute(Handle_Prs3d_PresentationShadow self, Handle_Graphic3d_DataStructureManager aProjector, Handle_Graphic3d_Structure aStructure)
        Compute(Handle_Prs3d_PresentationShadow self, Handle_Graphic3d_DataStructureManager theProjector, Handle_Geom_Transformation theTrsf, Handle_Graphic3d_Structure theStructure)

        Returns the new Structure defined for the new visualization

        :type theProjector: OCC.wrapper.Graphic3d.Handle_Graphic3d_DataStructureManager
        :type theTrsf: OCC.wrapper.Geom.Handle_Geom_Transformation
        :type theStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_Compute(self, *args)


    def Connect(self, *args):
        """
        Connect(Handle_Prs3d_PresentationShadow self, Handle_Prs3d_Presentation aPresentation)

        :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_Connect(self, *args)


    def Remove(self, *args):
        """
        Remove(Handle_Prs3d_PresentationShadow self, Handle_Prs3d_Presentation aPresentation)

        :type aPresentation: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_Remove(self, *args)


    def RemoveAll(self, *args):
        """RemoveAll(Handle_Prs3d_PresentationShadow self)"""
        return _Prs3d.Handle_Prs3d_PresentationShadow_RemoveAll(self, *args)


    def Clear(self, *args):
        """
        Clear(Handle_Prs3d_PresentationShadow self, Standard_Boolean const WithDestruction)

        if WithDestruction == Standard_True then
        suppress all the groups of primitives in the structure.
        and it is mandatory to create a new group in <me>.
        if WithDestruction == Standard_False then
        clears all the groups of primitives in the structure.
        and all the groups are conserved and empty.
        They will be erased at the next screen update.
        The structure itself is conserved.
        The transformation and the attributes of <me> are conserved.
        The childs of <me> are conserved.

        :type WithDestruction: bool

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_Clear(self, *args)


    def Display(self, *args):
        """
        Display(Handle_Prs3d_PresentationShadow self)

        Displays the structure <me> in all the views of the visualiser.


        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_Display(self, *args)


    def DisplayPriority(self, *args):
        """
        DisplayPriority(Handle_Prs3d_PresentationShadow self) -> Standard_Integer

        Returns the current display priority for the
        structure <me>.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_DisplayPriority(self, *args)


    def Erase(self, *args):
        """
        Erase(Handle_Prs3d_PresentationShadow self)

        Erases the structure <me> in all the views
        of the visualiser.


        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_Erase(self, *args)


    def Highlight(self, *args):
        """
        Highlight(Handle_Prs3d_PresentationShadow self, Handle_Graphic3d_PresentationAttributes theStyle, Standard_Boolean const theToUpdateMgr)

        Highlights the structure in all the views with the given style
        @param theStyle [in] the style (type of highlighting: box/color, color and opacity)
        @param theToUpdateMgr [in] defines whether related computed structures will be
        highlighted via structure manager or not

        :type theStyle: OCC.wrapper.Graphic3d.Handle_Graphic3d_PresentationAttributes
        :type theToUpdateMgr: bool

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_Highlight(self, *args)


    def SetInfiniteState(self, *args):
        """
        SetInfiniteState(Handle_Prs3d_PresentationShadow self, Standard_Boolean const theToSet)

        If <theToSet> is Standard_True then <me> is infinite and
        the MinMaxValues method method return :
        theXMin = theYMin = theZMin = RealFirst().
        theXMax = theYMax = theZMax = RealLast().
        By default, <me> is not infinite but empty.

        :type theToSet: bool

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_SetInfiniteState(self, *args)


    def SetDisplayPriority(self, *args):
        """
        SetDisplayPriority(Handle_Prs3d_PresentationShadow self, Standard_Integer const Priority)

        Modifies the order of displaying the structure.
        Values are between 0 and 10.
        Structures are drawn according to their display priorities
        in ascending order.
        A structure of priority 10 is displayed the last and appears over the others.
        The default value is 5.
        Category: Methods to modify the class definition
        Warning: If <me> is displayed then the SetDisplayPriority
        method erase <me> and display <me> with the
        new priority.
        Raises PriorityDefinitionError if <Priority> is
        greater than 10 or a negative value.

        :type Priority: int

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_SetDisplayPriority(self, *args)


    def ResetDisplayPriority(self, *args):
        """
        ResetDisplayPriority(Handle_Prs3d_PresentationShadow self)

        Reset the current priority of the structure to the
        previous priority.
        Category: Methods to modify the class definition
        Warning: If <me> is displayed then the SetDisplayPriority
        method erase <me> and display <me> with the
        previous priority.


        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_ResetDisplayPriority(self, *args)


    def SetZLayer(self, *args):
        """
        SetZLayer(Handle_Prs3d_PresentationShadow self, Graphic3d_ZLayerId const theLayerId)

        Set Z layer ID for the structure. The Z layer mechanism
        allows to display structures presented in higher layers in overlay
        of structures in lower layers by switching off z buffer depth
        test between layers

        :type theLayerId: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_SetZLayer(self, *args)


    def GetZLayer(self, *args):
        """
        GetZLayer(Handle_Prs3d_PresentationShadow self) -> Graphic3d_ZLayerId

        Get Z layer ID of displayed structure. The method
        returns -1 if the structure has no ID (deleted from graphic driver).

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_GetZLayer(self, *args)


    def SetClipPlanes(self, *args):
        """
        SetClipPlanes(Handle_Prs3d_PresentationShadow self, Handle_Graphic3d_SequenceOfHClipPlane thePlanes)

        Changes a sequence of clip planes slicing the structure on rendering.
        @param thePlanes [in] the set of clip planes.

        :type thePlanes: OCC.wrapper.Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_SetClipPlanes(self, *args)


    def ClipPlanes(self, *args):
        """
        Get clip planes slicing the structure on rendering.
        @return set of clip planes.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane

        """
        res = _Prs3d.Handle_Prs3d_PresentationShadow_ClipPlanes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetVisible(self, *args):
        """
        SetVisible(Handle_Prs3d_PresentationShadow self, Standard_Boolean const AValue)

        Modifies the visibility indicator to Standard_True or
        Standard_False for the structure <me>.
        The default value at the definition of <me> is
        Standard_True.

        :type AValue: bool

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_SetVisible(self, *args)


    def SetVisual(self, *args):
        """
        SetVisual(Handle_Prs3d_PresentationShadow self, Graphic3d_TypeOfStructure const AVisual)

        Modifies the visualisation mode for the structure <me>.

        :type AVisual: OCC.wrapper.Graphic3d.Graphic3d_TypeOfStructure

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_SetVisual(self, *args)


    def SetZoomLimit(self, *args):
        """
        SetZoomLimit(Handle_Prs3d_PresentationShadow self, Standard_Real const LimitInf, Standard_Real const LimitSup)

        Modifies the minimum and maximum zoom coefficients
        for the structure <me>.
        The default value at the definition of <me> is unlimited.
        Category: Methods to modify the class definition
        Warning: Raises StructureDefinitionError if <LimitInf> is
        greater than <LimitSup> or if <LimitInf> or
        <LimitSup> is a negative value.

        :type LimitInf: float
        :type LimitSup: float

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_SetZoomLimit(self, *args)


    def SetIsForHighlight(self, *args):
        """
        SetIsForHighlight(Handle_Prs3d_PresentationShadow self, Standard_Boolean const isForHighlight)

        marks the structure <me> representing wired structure needed for
        highlight only so it won't be added to BVH tree.
        Category: Methods to modify the class definition

        :type isForHighlight: bool

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_SetIsForHighlight(self, *args)


    def UnHighlight(self, *args):
        """
        UnHighlight(Handle_Prs3d_PresentationShadow self)

        Suppresses the highlight for the structure <me>
        in all the views of the visualiser.


        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_UnHighlight(self, *args)


    def ReCompute(self, *args):
        """
        ReCompute(Handle_Prs3d_PresentationShadow self)
        ReCompute(Handle_Prs3d_PresentationShadow self, Handle_Graphic3d_DataStructureManager aProjector)

        Forces a new construction of the structure <me>
        if <me> is displayed in <aProjetor> and TOS_COMPUTED.

        :type aProjector: OCC.wrapper.Graphic3d.Handle_Graphic3d_DataStructureManager

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_ReCompute(self, *args)


    def ContainsFacet(self, *args):
        """
        ContainsFacet(Handle_Prs3d_PresentationShadow self) -> Standard_Boolean

        Returns Standard_True if the structure <me> contains
        Polygons, Triangles or Quadrangles.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_ContainsFacet(self, *args)


    def Groups(self, *args):
        """
        Returns the groups sequence included in the structure <me> (internal storage).

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_SequenceOfGroup

        """
        res = _Prs3d.Handle_Prs3d_PresentationShadow_Groups(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NumberOfGroups(self, *args):
        """
        NumberOfGroups(Handle_Prs3d_PresentationShadow self) -> Standard_Integer

        Returns the current number of groups in the
        structure <me>.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_NumberOfGroups(self, *args)


    def NewGroup(self, *args):
        """
        NewGroup(Handle_Prs3d_PresentationShadow self) -> Handle_Graphic3d_Group

        Append new group to this structure.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_Group

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_NewGroup(self, *args)


    def HighlightStyle(self, *args):
        """
        Returns the highlight color for the Highlight method
        with the highlight method TOHM_COLOR or TOHM_BOUNDBOX.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_PresentationAttributes

        """
        res = _Prs3d.Handle_Prs3d_PresentationShadow_HighlightStyle(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsDeleted(self, *args):
        """
        IsDeleted(Handle_Prs3d_PresentationShadow self) -> Standard_Boolean

        Returns Standard_True if the structure <me> is deleted.
        <me> is deleted after the call Remove (me).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_IsDeleted(self, *args)


    def IsDisplayed(self, *args):
        """
        IsDisplayed(Handle_Prs3d_PresentationShadow self) -> Standard_Boolean

        Returns the display indicator for the structure <me>.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_IsDisplayed(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(Handle_Prs3d_PresentationShadow self) -> Standard_Boolean

        Returns Standard_True if the structure <me> is empty.
        Warning: A structure is empty if :
        it do not have group or all the groups are empties
        and it do not have descendant or all the descendants
        are empties.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_IsEmpty(self, *args)


    def IsInfinite(self, *args):
        """
        IsInfinite(Handle_Prs3d_PresentationShadow self) -> Standard_Boolean

        Returns Standard_True if the structure <me> is infinite.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_IsInfinite(self, *args)


    def IsHighlighted(self, *args):
        """
        IsHighlighted(Handle_Prs3d_PresentationShadow self) -> Standard_Boolean

        Returns the highlight indicator for the structure <me>.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_IsHighlighted(self, *args)


    def IsTransformed(self, *args):
        """
        IsTransformed(Handle_Prs3d_PresentationShadow self) -> Standard_Boolean

        Returns Standard_True if the structure <me> is transformed.
        <=> The transformation != Identity.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_IsTransformed(self, *args)


    def IsVisible(self, *args):
        """
        IsVisible(Handle_Prs3d_PresentationShadow self) -> Standard_Boolean

        Returns the visibility indicator for the structure <me>.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_IsVisible(self, *args)


    def MinMaxValues(self, *args):
        """
        MinMaxValues(Handle_Prs3d_PresentationShadow self, Standard_Boolean const theToIgnoreInfiniteFlag) -> Bnd_Box

        Returns the coordinates of the boundary box of the structure <me>.
        If <theToIgnoreInfiniteFlag> is TRUE, the method returns actual graphical
        boundaries of the Graphic3d_Group components. Otherwise, the
        method returns boundaries taking into account infinite state
        of the structure. This approach generally used for application
        specific fit operation (e.g. fitting the model into screen,
        not taking into accout infinite helper elements).
        Warning: If the structure <me> is empty then the empty box is returned,
        If the structure <me> is infinite then the whole box is returned.

        :type theToIgnoreInfiniteFlag: bool
        :rtype: OCC.wrapper.Bnd.Bnd_Box

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_MinMaxValues(self, *args)


    def Visual(self, *args):
        """
        Visual(Handle_Prs3d_PresentationShadow self) -> Graphic3d_TypeOfStructure

        Returns the visualisation mode for the structure <me>.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfStructure

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_Visual(self, *args)


    def AcceptConnection(self, *args):
        """
        AcceptConnection(Handle_Prs3d_PresentationShadow self, Handle_Graphic3d_Structure AStructure1, Handle_Graphic3d_Structure AStructure2, Graphic3d_TypeOfConnection const AType) -> Standard_Boolean

        Returns Standard_True if the connection is possible between
        <AStructure1> and <AStructure2> without a creation
        of a cycle.

        It's not possible to call the method
        AStructure1->Connect (AStructure2, TypeOfConnection)
        if
        - the set of all ancestors of <AStructure1> contains
        <AStructure1> and if the
        TypeOfConnection == TOC_DESCENDANT
        - the set of all descendants of <AStructure1> contains
        <AStructure2> and if the
        TypeOfConnection == TOC_ANCESTOR

        :type AStructure1: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
        :type AStructure2: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
        :type AType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfConnection
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_AcceptConnection(self, *args)


    def Ancestors(self, *args):
        """
        Ancestors(Handle_Prs3d_PresentationShadow self, Graphic3d_MapOfStructure & SG)

        Returns the group of structures to which <me> is connected.

        :type SG: OCC.wrapper.Graphic3d.Graphic3d_MapOfStructure

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_Ancestors(self, *args)


    def Descendants(self, *args):
        """
        Descendants(Handle_Prs3d_PresentationShadow self, Graphic3d_MapOfStructure & SG)

        Returns the group of structures connected to <me>.

        :type SG: OCC.wrapper.Graphic3d.Graphic3d_MapOfStructure

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_Descendants(self, *args)


    def Disconnect(self, *args):
        """
        Disconnect(Handle_Prs3d_PresentationShadow self, Handle_Graphic3d_Structure AStructure)

        Suppress the connection between <AStructure> and <me>.

        :type AStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_Disconnect(self, *args)


    def DisconnectAll(self, *args):
        """
        DisconnectAll(Handle_Prs3d_PresentationShadow self, Graphic3d_TypeOfConnection const AType)

        If Atype is TOC_DESCENDANT then suppress all
        the connections with the child structures of <me>.
        If Atype is TOC_ANCESTOR then suppress all
        the connections with the parent structures of <me>.

        :type AType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfConnection

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_DisconnectAll(self, *args)


    def Network(self, *args):
        """
        Network(Handle_Prs3d_PresentationShadow self, Handle_Graphic3d_Structure AStructure, Graphic3d_TypeOfConnection const AType, Graphic3d_MapOfStructure & ASet)

        Returns <ASet> the group of structures :
        - directly or indirectly connected to <AStructure> if the
        TypeOfConnection == TOC_DESCENDANT
        - to which <AStructure> is directly or indirectly connected
        if the TypeOfConnection == TOC_ANCESTOR

        :type AStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
        :type AType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfConnection
        :type ASet: OCC.wrapper.Graphic3d.Graphic3d_MapOfStructure

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_Network(self, *args)


    def SetOwner(self, *args):
        """
        SetOwner(Handle_Prs3d_PresentationShadow self, Standard_Address const Owner)

        :type Owner: OCC.wrapper.Standard.Standard_Address

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_SetOwner(self, *args)


    def Owner(self, *args):
        """
        Owner(Handle_Prs3d_PresentationShadow self) -> Standard_Address

        :rtype: OCC.wrapper.Standard.Standard_Address

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_Owner(self, *args)


    def SetHLRValidation(self, *args):
        """
        SetHLRValidation(Handle_Prs3d_PresentationShadow self, Standard_Boolean const AFlag)

        :type AFlag: bool

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_SetHLRValidation(self, *args)


    def HLRValidation(self, *args):
        """
        HLRValidation(Handle_Prs3d_PresentationShadow self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_HLRValidation(self, *args)


    def Transformation(self, *args):
        """
        Return local transformation.

        :rtype: OCC.wrapper.Geom.Handle_Geom_Transformation

        """
        res = _Prs3d.Handle_Prs3d_PresentationShadow_Transformation(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetTransformation(self, *args):
        """
        SetTransformation(Handle_Prs3d_PresentationShadow self, Handle_Geom_Transformation theTrsf)

        Modifies the current local transformation

        :type theTrsf: OCC.wrapper.Geom.Handle_Geom_Transformation

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_SetTransformation(self, *args)


    def Transform(self, *args):
        """
        Transform(Handle_Prs3d_PresentationShadow self, Handle_Geom_Transformation theTrsf)

        :type theTrsf: OCC.wrapper.Geom.Handle_Geom_Transformation

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_Transform(self, *args)


    def SetTransformPersistence(self, *args):
        """
        SetTransformPersistence(Handle_Prs3d_PresentationShadow self, Handle_Graphic3d_TransformPers theTrsfPers)

        Modifies the current transform persistence (pan, zoom or rotate)

        :type theTrsfPers: OCC.wrapper.Graphic3d.Handle_Graphic3d_TransformPers

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_SetTransformPersistence(self, *args)


    def TransformPersistence(self, *args):
        """
        @return transform persistence of the presentable object.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_TransformPers

        """
        res = _Prs3d.Handle_Prs3d_PresentationShadow_TransformPersistence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetMutable(self, *args):
        """
        SetMutable(Handle_Prs3d_PresentationShadow self, Standard_Boolean const theIsMutable)

        Sets if the structure location has mutable nature (content or location will be changed regularly).

        :type theIsMutable: bool

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_SetMutable(self, *args)


    def IsMutable(self, *args):
        """
        IsMutable(Handle_Prs3d_PresentationShadow self) -> Standard_Boolean

        Returns true if structure has mutable nature (content or location are be changed regularly).
        Mutable structure will be managed in different way than static onces.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_IsMutable(self, *args)


    def ComputeVisual(self, *args):
        """
        ComputeVisual(Handle_Prs3d_PresentationShadow self) -> Graphic3d_TypeOfStructure

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfStructure

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_ComputeVisual(self, *args)


    def GraphicClear(self, *args):
        """
        GraphicClear(Handle_Prs3d_PresentationShadow self, Standard_Boolean const WithDestruction)

        Clears the structure <me>.

        :type WithDestruction: bool

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_GraphicClear(self, *args)


    def GraphicConnect(self, *args):
        """
        GraphicConnect(Handle_Prs3d_PresentationShadow self, Handle_Graphic3d_Structure ADaughter)

        :type ADaughter: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_GraphicConnect(self, *args)


    def GraphicDisconnect(self, *args):
        """
        GraphicDisconnect(Handle_Prs3d_PresentationShadow self, Handle_Graphic3d_Structure ADaughter)

        :type ADaughter: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_GraphicDisconnect(self, *args)


    def GraphicTransform(self, *args):
        """
        GraphicTransform(Handle_Prs3d_PresentationShadow self, Handle_Geom_Transformation theTrsf)

        Internal method which sets new transformation without calling graphic manager callbacks.

        :type theTrsf: OCC.wrapper.Geom.Handle_Geom_Transformation

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_GraphicTransform(self, *args)


    def Identification(self, *args):
        """
        Identification(Handle_Prs3d_PresentationShadow self) -> Standard_Integer

        Returns the identification number of the structure <me>.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_Identification(self, *args)


    def PrintNetwork(self, *args):
        """
        PrintNetwork(Handle_Prs3d_PresentationShadow self, Handle_Graphic3d_Structure AStructure, Graphic3d_TypeOfConnection const AType)

        Prints informations about the network associated
        with the structure <AStructure>.

        :type AStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
        :type AType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfConnection

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_PrintNetwork(self, *args)


    def SetComputeVisual(self, *args):
        """
        SetComputeVisual(Handle_Prs3d_PresentationShadow self, Graphic3d_TypeOfStructure const AVisual)

        :type AVisual: OCC.wrapper.Graphic3d.Graphic3d_TypeOfStructure

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_SetComputeVisual(self, *args)


    def Transforms(self, *args):
        """
        Transforms(Handle_Prs3d_PresentationShadow self, gp_Trsf theTrsf, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ)

        Transforms theX, theY, theZ with the transformation theTrsf.

        :type theTrsf: OCC.wrapper.gp.gp_Trsf
        :type theX: float
        :type theY: float
        :type theZ: float
        :type theNewX: float
        :type theNewY: float
        :type theNewZ: float

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_Transforms(self, *args)


    def CStructure(self, *args):
        """
        Returns the low-level structure

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_CStructure

        """
        res = _Prs3d.Handle_Prs3d_PresentationShadow_CStructure(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Prs3d_PresentationShadow self)

        Memory deallocator for transient classes


        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Prs3d_PresentationShadow self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Prs3d_PresentationShadow self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Prs3d_PresentationShadow self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Prs3d_PresentationShadow self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Prs3d_PresentationShadow self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Prs3d_PresentationShadow self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Prs3d_PresentationShadow self)

        Increments the reference counter of this object


        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Prs3d_PresentationShadow self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Handle_Prs3d_PresentationShadow_DecrementRefCounter(self, *args)

Handle_Prs3d_PresentationShadow_swigregister = _Prs3d.Handle_Prs3d_PresentationShadow_swigregister
Handle_Prs3d_PresentationShadow_swigregister(Handle_Prs3d_PresentationShadow)

def Handle_Prs3d_PresentationShadow_DownCast(thing):
    return _Prs3d.Handle_Prs3d_PresentationShadow_DownCast(thing)
Handle_Prs3d_PresentationShadow_DownCast = _Prs3d.Handle_Prs3d_PresentationShadow_DownCast

class Handle_Prs3d_Projector(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Prs3d_Projector self)

        Nullify the handle


        """
        return _Prs3d.Handle_Prs3d_Projector_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Prs3d_Projector self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Prs3d.Handle_Prs3d_Projector_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Prs3d_Projector self, Prs3d_Projector thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Prs3d.Handle_Prs3d_Projector_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Prs3d_Projector self, Handle_Prs3d_Projector theHandle) -> Handle_Prs3d_Projector
        assign(Handle_Prs3d_Projector self, Prs3d_Projector thePtr) -> Handle_Prs3d_Projector
        assign(Handle_Prs3d_Projector self, Handle_Prs3d_Projector theHandle) -> Handle_Prs3d_Projector

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Prs3d.Handle_Prs3d_Projector_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Prs3d_Projector self) -> Prs3d_Projector

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Prs3d.Handle_Prs3d_Projector_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Prs3d_Projector self) -> Prs3d_Projector

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Prs3d.Handle_Prs3d_Projector___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Prs3d_Projector self) -> Prs3d_Projector

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Prs3d.Handle_Prs3d_Projector___ref__(self, *args)


    def __hash__(self):
        return _Prs3d.Handle_Prs3d_Projector___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Prs3d.Handle_Prs3d_Projector___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Prs3d.new_Handle_Prs3d_Projector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Prs3d.Handle_Prs3d_Projector_DownCast)
    __swig_destroy__ = _Prs3d.delete_Handle_Prs3d_Projector

    def Projector(self, *args):
        """
        Projector(Handle_Prs3d_Projector self) -> HLRAlgo_Projector

        Returns a projector object for use in a hidden line removal algorithm.

        :rtype: OCC.wrapper.HLRAlgo.HLRAlgo_Projector

        """
        return _Prs3d.Handle_Prs3d_Projector_Projector(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Prs3d_Projector self) -> char const *

        :rtype: const char *

        """
        return _Prs3d.Handle_Prs3d_Projector_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Handle_Prs3d_Projector_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Handle_Prs3d_Projector_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Prs3d_Projector self)

        Memory deallocator for transient classes


        """
        return _Prs3d.Handle_Prs3d_Projector_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Prs3d_Projector self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Prs3d_Projector self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Projector_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Prs3d_Projector self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Prs3d_Projector self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_Projector_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Prs3d_Projector self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Prs3d.Handle_Prs3d_Projector_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Prs3d_Projector self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Handle_Prs3d_Projector_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Prs3d_Projector self)

        Increments the reference counter of this object


        """
        return _Prs3d.Handle_Prs3d_Projector_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Prs3d_Projector self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Handle_Prs3d_Projector_DecrementRefCounter(self, *args)

Handle_Prs3d_Projector_swigregister = _Prs3d.Handle_Prs3d_Projector_swigregister
Handle_Prs3d_Projector_swigregister(Handle_Prs3d_Projector)

def Handle_Prs3d_Projector_DownCast(thing):
    return _Prs3d.Handle_Prs3d_Projector_DownCast(thing)
Handle_Prs3d_Projector_DownCast = _Prs3d.Handle_Prs3d_Projector_DownCast

class Prs3d_ToolCylinder(Prs3d_ToolQuadric):
    """Standard presentation algorithm that outputs graphical primitives for cylindrical surface."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Create(*args):
        """
        Create(Standard_Real const theBottomRad, Standard_Real const theTopRad, Standard_Real const theHeight, Standard_Integer const theNbSlices, Standard_Integer const theNbStacks, gp_Trsf theTrsf) -> Handle_Graphic3d_ArrayOfTriangles

        Generate primitives for 3D quadric surface and return a filled array.

        :type theBottomRad: float
        :type theTopRad: float
        :type theHeight: float
        :type theNbSlices: int
        :type theNbStacks: int
        :type theTrsf: OCC.wrapper.gp.gp_Trsf
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_ArrayOfTriangles

        """
        return _Prs3d.Prs3d_ToolCylinder_Create(*args)

    Create = staticmethod(Create)

    def __init__(self, *args):
        """
        __init__(Prs3d_ToolCylinder self, Standard_Real const theBottomRad, Standard_Real const theTopRad, Standard_Real const theHeight, Standard_Integer const theNbSlices, Standard_Integer const theNbStacks) -> Prs3d_ToolCylinder

        Initializes the algorithm.

        :type theBottomRad: float
        :type theTopRad: float
        :type theHeight: float
        :type theNbSlices: int
        :type theNbStacks: int

        """
        this = _Prs3d.new_Prs3d_ToolCylinder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Prs3d.delete_Prs3d_ToolCylinder
Prs3d_ToolCylinder_swigregister = _Prs3d.Prs3d_ToolCylinder_swigregister
Prs3d_ToolCylinder_swigregister(Prs3d_ToolCylinder)

def Prs3d_ToolCylinder_Create(*args):
    """
    Prs3d_ToolCylinder_Create(Standard_Real const theBottomRad, Standard_Real const theTopRad, Standard_Real const theHeight, Standard_Integer const theNbSlices, Standard_Integer const theNbStacks, gp_Trsf theTrsf) -> Handle_Graphic3d_ArrayOfTriangles

    Generate primitives for 3D quadric surface and return a filled array.

    :type theBottomRad: float
    :type theTopRad: float
    :type theHeight: float
    :type theNbSlices: int
    :type theNbStacks: int
    :type theTrsf: OCC.wrapper.gp.gp_Trsf
    :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_ArrayOfTriangles

    """
    return _Prs3d.Prs3d_ToolCylinder_Create(*args)

class Handle_Prs3d_TextAspect(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Prs3d_TextAspect self)

        Nullify the handle


        """
        return _Prs3d.Handle_Prs3d_TextAspect_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Prs3d_TextAspect self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Prs3d.Handle_Prs3d_TextAspect_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Prs3d_TextAspect self, Prs3d_TextAspect thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Prs3d.Handle_Prs3d_TextAspect_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Prs3d_TextAspect self, Handle_Prs3d_TextAspect theHandle) -> Handle_Prs3d_TextAspect
        assign(Handle_Prs3d_TextAspect self, Prs3d_TextAspect thePtr) -> Handle_Prs3d_TextAspect
        assign(Handle_Prs3d_TextAspect self, Handle_Prs3d_TextAspect theHandle) -> Handle_Prs3d_TextAspect

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Prs3d.Handle_Prs3d_TextAspect_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Prs3d_TextAspect self) -> Prs3d_TextAspect

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Prs3d.Handle_Prs3d_TextAspect_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Prs3d_TextAspect self) -> Prs3d_TextAspect

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Prs3d.Handle_Prs3d_TextAspect___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Prs3d_TextAspect self) -> Prs3d_TextAspect

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Prs3d.Handle_Prs3d_TextAspect___ref__(self, *args)


    def __hash__(self):
        return _Prs3d.Handle_Prs3d_TextAspect___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Prs3d.Handle_Prs3d_TextAspect___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Prs3d.new_Handle_Prs3d_TextAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Prs3d.Handle_Prs3d_TextAspect_DownCast)
    __swig_destroy__ = _Prs3d.delete_Handle_Prs3d_TextAspect

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Prs3d_TextAspect self) -> char const *

        :rtype: const char *

        """
        return _Prs3d.Handle_Prs3d_TextAspect_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Handle_Prs3d_TextAspect_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Handle_Prs3d_TextAspect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetColor(self, *args):
        """
        SetColor(Handle_Prs3d_TextAspect self, Quantity_Color theColor)

        Sets the color of the type used in text display.

        :type theColor: OCC.wrapper.Quantity.Quantity_Color

        """
        return _Prs3d.Handle_Prs3d_TextAspect_SetColor(self, *args)


    def SetFont(self, *args):
        """
        SetFont(Handle_Prs3d_TextAspect self, Standard_CString const theFont)

        Sets the font used in text display.

        :type theFont: OCC.wrapper.Standard.Standard_CString

        """
        return _Prs3d.Handle_Prs3d_TextAspect_SetFont(self, *args)


    def SetHeightWidthRatio(self, *args):
        """
        SetHeightWidthRatio(Handle_Prs3d_TextAspect self, Standard_Real const theRatio)

        Returns the height-width ratio, also known as the expansion factor.

        :type theRatio: float

        """
        return _Prs3d.Handle_Prs3d_TextAspect_SetHeightWidthRatio(self, *args)


    def SetSpace(self, *args):
        """
        SetSpace(Handle_Prs3d_TextAspect self, Standard_Real const theSpace)

        Sets the length of the box which text will occupy.

        :type theSpace: float

        """
        return _Prs3d.Handle_Prs3d_TextAspect_SetSpace(self, *args)


    def SetHeight(self, *args):
        """
        SetHeight(Handle_Prs3d_TextAspect self, Standard_Real const theHeight)

        Sets the height of the text.

        :type theHeight: float

        """
        return _Prs3d.Handle_Prs3d_TextAspect_SetHeight(self, *args)


    def SetAngle(self, *args):
        """
        SetAngle(Handle_Prs3d_TextAspect self, Standard_Real const theAngle)

        Sets the angle

        :type theAngle: float

        """
        return _Prs3d.Handle_Prs3d_TextAspect_SetAngle(self, *args)


    def Height(self, *args):
        """
        Height(Handle_Prs3d_TextAspect self) -> Standard_Real

        Returns the height of the text box.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Handle_Prs3d_TextAspect_Height(self, *args)


    def Angle(self, *args):
        """
        Angle(Handle_Prs3d_TextAspect self) -> Standard_Real

        Returns the angle

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Handle_Prs3d_TextAspect_Angle(self, *args)


    def SetHorizontalJustification(self, *args):
        """
        SetHorizontalJustification(Handle_Prs3d_TextAspect self, Graphic3d_HorizontalTextAlignment const theJustification)

        Sets horizontal alignment of text.

        :type theJustification: OCC.wrapper.Graphic3d.Graphic3d_HorizontalTextAlignment

        """
        return _Prs3d.Handle_Prs3d_TextAspect_SetHorizontalJustification(self, *args)


    def SetVerticalJustification(self, *args):
        """
        SetVerticalJustification(Handle_Prs3d_TextAspect self, Graphic3d_VerticalTextAlignment const theJustification)

        Sets the vertical alignment of text.

        :type theJustification: OCC.wrapper.Graphic3d.Graphic3d_VerticalTextAlignment

        """
        return _Prs3d.Handle_Prs3d_TextAspect_SetVerticalJustification(self, *args)


    def SetOrientation(self, *args):
        """
        SetOrientation(Handle_Prs3d_TextAspect self, Graphic3d_TextPath const theOrientation)

        Sets the orientation of text.

        :type theOrientation: OCC.wrapper.Graphic3d.Graphic3d_TextPath

        """
        return _Prs3d.Handle_Prs3d_TextAspect_SetOrientation(self, *args)


    def HorizontalJustification(self, *args):
        """
        HorizontalJustification(Handle_Prs3d_TextAspect self) -> Graphic3d_HorizontalTextAlignment

        Returns the horizontal alignment of the text.
        The range of values includes:
        -   left
        -   center
        -   right, and
        -   normal (justified).

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_HorizontalTextAlignment

        """
        return _Prs3d.Handle_Prs3d_TextAspect_HorizontalJustification(self, *args)


    def VerticalJustification(self, *args):
        """
        VerticalJustification(Handle_Prs3d_TextAspect self) -> Graphic3d_VerticalTextAlignment

        Returns the vertical alignment of the text.
        The range of values includes:
        -   normal
        -   top
        -   cap
        -   half
        -   base
        -   bottom

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_VerticalTextAlignment

        """
        return _Prs3d.Handle_Prs3d_TextAspect_VerticalJustification(self, *args)


    def Orientation(self, *args):
        """
        Orientation(Handle_Prs3d_TextAspect self) -> Graphic3d_TextPath

        Returns the orientation of the text.
        Text can be displayed in the following directions:
        -   up
        -   down
        -   left, or
        -   right

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TextPath

        """
        return _Prs3d.Handle_Prs3d_TextAspect_Orientation(self, *args)


    def Aspect(self, *args):
        """
        Returns the purely textual attributes used in the display of text.
        These include:
        -   color
        -   font
        -   height/width ratio, that is, the expansion factor, and
        -   space between characters.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectText3d

        """
        res = _Prs3d.Handle_Prs3d_TextAspect_Aspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetAspect(self, *args):
        """
        SetAspect(Handle_Prs3d_TextAspect self, Handle_Graphic3d_AspectText3d theAspect)

        :type theAspect: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectText3d

        """
        return _Prs3d.Handle_Prs3d_TextAspect_SetAspect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Prs3d_TextAspect self)

        Memory deallocator for transient classes


        """
        return _Prs3d.Handle_Prs3d_TextAspect_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Prs3d_TextAspect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Prs3d_TextAspect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_TextAspect_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Prs3d_TextAspect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Prs3d_TextAspect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_TextAspect_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Prs3d_TextAspect self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Prs3d.Handle_Prs3d_TextAspect_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Prs3d_TextAspect self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Handle_Prs3d_TextAspect_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Prs3d_TextAspect self)

        Increments the reference counter of this object


        """
        return _Prs3d.Handle_Prs3d_TextAspect_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Prs3d_TextAspect self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Handle_Prs3d_TextAspect_DecrementRefCounter(self, *args)

Handle_Prs3d_TextAspect_swigregister = _Prs3d.Handle_Prs3d_TextAspect_swigregister
Handle_Prs3d_TextAspect_swigregister(Handle_Prs3d_TextAspect)

def Handle_Prs3d_TextAspect_DownCast(thing):
    return _Prs3d.Handle_Prs3d_TextAspect_DownCast(thing)
Handle_Prs3d_TextAspect_DownCast = _Prs3d.Handle_Prs3d_TextAspect_DownCast

class Handle_Prs3d_IsoAspect(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Prs3d_IsoAspect self)

        Nullify the handle


        """
        return _Prs3d.Handle_Prs3d_IsoAspect_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Prs3d_IsoAspect self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Prs3d.Handle_Prs3d_IsoAspect_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Prs3d_IsoAspect self, Prs3d_IsoAspect thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Prs3d.Handle_Prs3d_IsoAspect_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Prs3d_IsoAspect self, Handle_Prs3d_IsoAspect theHandle) -> Handle_Prs3d_IsoAspect
        assign(Handle_Prs3d_IsoAspect self, Prs3d_IsoAspect thePtr) -> Handle_Prs3d_IsoAspect
        assign(Handle_Prs3d_IsoAspect self, Handle_Prs3d_IsoAspect theHandle) -> Handle_Prs3d_IsoAspect

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Prs3d.Handle_Prs3d_IsoAspect_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Prs3d_IsoAspect self) -> Prs3d_IsoAspect

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Prs3d.Handle_Prs3d_IsoAspect_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Prs3d_IsoAspect self) -> Prs3d_IsoAspect

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Prs3d.Handle_Prs3d_IsoAspect___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Prs3d_IsoAspect self) -> Prs3d_IsoAspect

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Prs3d.Handle_Prs3d_IsoAspect___ref__(self, *args)


    def __hash__(self):
        return _Prs3d.Handle_Prs3d_IsoAspect___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Prs3d.Handle_Prs3d_IsoAspect___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Prs3d.new_Handle_Prs3d_IsoAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Prs3d.Handle_Prs3d_IsoAspect_DownCast)
    __swig_destroy__ = _Prs3d.delete_Handle_Prs3d_IsoAspect

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Prs3d_IsoAspect self) -> char const *

        :rtype: const char *

        """
        return _Prs3d.Handle_Prs3d_IsoAspect_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Handle_Prs3d_IsoAspect_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Handle_Prs3d_IsoAspect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetNumber(self, *args):
        """
        SetNumber(Handle_Prs3d_IsoAspect self, Standard_Integer const theNumber)

        defines the number of U or V isoparametric curves
        to be drawn for a single face.
        Default value: 10

        :type theNumber: int

        """
        return _Prs3d.Handle_Prs3d_IsoAspect_SetNumber(self, *args)


    def Number(self, *args):
        """
        Number(Handle_Prs3d_IsoAspect self) -> Standard_Integer

        returns the number of U or V isoparametric curves drawn for a single face.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Handle_Prs3d_IsoAspect_Number(self, *args)


    def SetColor(self, *args):
        """
        SetColor(Handle_Prs3d_IsoAspect self, Quantity_Color theColor)

        Sets the line color defined at the time of construction.
        Default value: Quantity_NOC_YELLOW

        :type theColor: OCC.wrapper.Quantity.Quantity_Color

        """
        return _Prs3d.Handle_Prs3d_IsoAspect_SetColor(self, *args)


    def SetTypeOfLine(self, *args):
        """
        SetTypeOfLine(Handle_Prs3d_IsoAspect self, Aspect_TypeOfLine const theType)

        Sets the type of line defined at the time of construction.
        This could, for example, be solid, dotted or made up of dashes.
        Default value: Aspect_TOL_SOLID

        :type theType: OCC.wrapper.Aspect.Aspect_TypeOfLine

        """
        return _Prs3d.Handle_Prs3d_IsoAspect_SetTypeOfLine(self, *args)


    def SetWidth(self, *args):
        """
        SetWidth(Handle_Prs3d_IsoAspect self, Standard_Real const theWidth)

        Sets the line width defined at the time of construction.
        Default value: 1.

        :type theWidth: float

        """
        return _Prs3d.Handle_Prs3d_IsoAspect_SetWidth(self, *args)


    def Aspect(self, *args):
        """
        Returns the line aspect. This is defined as the set of
        color, type and thickness attributes.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectLine3d

        """
        res = _Prs3d.Handle_Prs3d_IsoAspect_Aspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetAspect(self, *args):
        """
        SetAspect(Handle_Prs3d_IsoAspect self, Handle_Graphic3d_AspectLine3d theAspect)

        :type theAspect: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectLine3d

        """
        return _Prs3d.Handle_Prs3d_IsoAspect_SetAspect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Prs3d_IsoAspect self)

        Memory deallocator for transient classes


        """
        return _Prs3d.Handle_Prs3d_IsoAspect_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Prs3d_IsoAspect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Prs3d_IsoAspect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_IsoAspect_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Prs3d_IsoAspect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Prs3d_IsoAspect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_IsoAspect_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Prs3d_IsoAspect self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Prs3d.Handle_Prs3d_IsoAspect_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Prs3d_IsoAspect self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Handle_Prs3d_IsoAspect_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Prs3d_IsoAspect self)

        Increments the reference counter of this object


        """
        return _Prs3d.Handle_Prs3d_IsoAspect_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Prs3d_IsoAspect self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Handle_Prs3d_IsoAspect_DecrementRefCounter(self, *args)

Handle_Prs3d_IsoAspect_swigregister = _Prs3d.Handle_Prs3d_IsoAspect_swigregister
Handle_Prs3d_IsoAspect_swigregister(Handle_Prs3d_IsoAspect)

def Handle_Prs3d_IsoAspect_DownCast(thing):
    return _Prs3d.Handle_Prs3d_IsoAspect_DownCast(thing)
Handle_Prs3d_IsoAspect_DownCast = _Prs3d.Handle_Prs3d_IsoAspect_DownCast

class Prs3d_Text(Prs3d_Root):
    """A framework to define the display of texts."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Draw(*args):
        """
        Draw(Handle_Graphic3d_Group theGroup, Handle_Prs3d_TextAspect theAspect, TCollection_ExtendedString theText, gp_Pnt theAttachmentPoint)
        Draw(Handle_Graphic3d_Group theGroup, Handle_Prs3d_TextAspect theAspect, TCollection_ExtendedString theText, gp_Ax2 theOrientation, Standard_Boolean const theHasOwnAnchor)
        Draw(Handle_Prs3d_Presentation thePrs, Handle_Prs3d_Drawer theDrawer, TCollection_ExtendedString theText, gp_Pnt theAttachmentPoint)
        Draw(Handle_Prs3d_Presentation thePrs, Handle_Prs3d_TextAspect theAspect, TCollection_ExtendedString theText, gp_Ax2 theOrientation, Standard_Boolean const theHasOwnAnchor)
        Draw(Handle_Prs3d_Presentation thePrs, Handle_Prs3d_TextAspect theAspect, TCollection_ExtendedString theText, gp_Pnt theAttachmentPoint)

        Alias to another method Draw() for backward compatibility.

        :type thePrs: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
        :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_TextAspect
        :type theText: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theAttachmentPoint: OCC.wrapper.gp.gp_Pnt

        """
        return _Prs3d.Prs3d_Text_Draw(*args)

    Draw = staticmethod(Draw)

    def __init__(self):
        """A framework to define the display of texts."""
        this = _Prs3d.new_Prs3d_Text()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Prs3d.delete_Prs3d_Text
Prs3d_Text_swigregister = _Prs3d.Prs3d_Text_swigregister
Prs3d_Text_swigregister(Prs3d_Text)

def Prs3d_Text_Draw(*args):
    """
    Draw(Handle_Graphic3d_Group theGroup, Handle_Prs3d_TextAspect theAspect, TCollection_ExtendedString theText, gp_Pnt theAttachmentPoint)
    Draw(Handle_Graphic3d_Group theGroup, Handle_Prs3d_TextAspect theAspect, TCollection_ExtendedString theText, gp_Ax2 theOrientation, Standard_Boolean const theHasOwnAnchor)
    Draw(Handle_Prs3d_Presentation thePrs, Handle_Prs3d_Drawer theDrawer, TCollection_ExtendedString theText, gp_Pnt theAttachmentPoint)
    Draw(Handle_Prs3d_Presentation thePrs, Handle_Prs3d_TextAspect theAspect, TCollection_ExtendedString theText, gp_Ax2 theOrientation, Standard_Boolean const theHasOwnAnchor)
    Prs3d_Text_Draw(Handle_Prs3d_Presentation thePrs, Handle_Prs3d_TextAspect theAspect, TCollection_ExtendedString theText, gp_Pnt theAttachmentPoint)

    Alias to another method Draw() for backward compatibility.

    :type thePrs: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation
    :type theAspect: OCC.wrapper.Prs3d.Handle_Prs3d_TextAspect
    :type theText: OCC.wrapper.TCollection.TCollection_ExtendedString
    :type theAttachmentPoint: OCC.wrapper.gp.gp_Pnt

    """
    return _Prs3d.Prs3d_Text_Draw(*args)

class Handle_Prs3d_PlaneAspect(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Prs3d_PlaneAspect self)

        Nullify the handle


        """
        return _Prs3d.Handle_Prs3d_PlaneAspect_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Prs3d_PlaneAspect self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Prs3d.Handle_Prs3d_PlaneAspect_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Prs3d_PlaneAspect self, Prs3d_PlaneAspect thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Prs3d.Handle_Prs3d_PlaneAspect_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Prs3d_PlaneAspect self, Handle_Prs3d_PlaneAspect theHandle) -> Handle_Prs3d_PlaneAspect
        assign(Handle_Prs3d_PlaneAspect self, Prs3d_PlaneAspect thePtr) -> Handle_Prs3d_PlaneAspect
        assign(Handle_Prs3d_PlaneAspect self, Handle_Prs3d_PlaneAspect theHandle) -> Handle_Prs3d_PlaneAspect

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Prs3d.Handle_Prs3d_PlaneAspect_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Prs3d_PlaneAspect self) -> Prs3d_PlaneAspect

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Prs3d.Handle_Prs3d_PlaneAspect_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Prs3d_PlaneAspect self) -> Prs3d_PlaneAspect

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Prs3d.Handle_Prs3d_PlaneAspect___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Prs3d_PlaneAspect self) -> Prs3d_PlaneAspect

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Prs3d.Handle_Prs3d_PlaneAspect___ref__(self, *args)


    def __hash__(self):
        return _Prs3d.Handle_Prs3d_PlaneAspect___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Prs3d.Handle_Prs3d_PlaneAspect___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Prs3d.new_Handle_Prs3d_PlaneAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Prs3d.Handle_Prs3d_PlaneAspect_DownCast)
    __swig_destroy__ = _Prs3d.delete_Handle_Prs3d_PlaneAspect

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Prs3d_PlaneAspect self) -> char const *

        :rtype: const char *

        """
        return _Prs3d.Handle_Prs3d_PlaneAspect_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Handle_Prs3d_PlaneAspect_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Handle_Prs3d_PlaneAspect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def EdgesAspect(self, *args):
        """
        Returns the attributes of displayed edges involved in the presentation of planes.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        res = _Prs3d.Handle_Prs3d_PlaneAspect_EdgesAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsoAspect(self, *args):
        """
        Returns the attributes of displayed isoparameters involved in the presentation of planes.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        res = _Prs3d.Handle_Prs3d_PlaneAspect_IsoAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ArrowAspect(self, *args):
        """
        Returns the settings for displaying an arrow.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_LineAspect

        """
        res = _Prs3d.Handle_Prs3d_PlaneAspect_ArrowAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetArrowsLength(self, *args):
        """
        SetArrowsLength(Handle_Prs3d_PlaneAspect self, Standard_Real const theLength)

        :type theLength: float

        """
        return _Prs3d.Handle_Prs3d_PlaneAspect_SetArrowsLength(self, *args)


    def ArrowsLength(self, *args):
        """
        ArrowsLength(Handle_Prs3d_PlaneAspect self) -> Standard_Real

        Returns the length of the arrow shaft used in the display of arrows.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Handle_Prs3d_PlaneAspect_ArrowsLength(self, *args)


    def SetArrowsSize(self, *args):
        """
        SetArrowsSize(Handle_Prs3d_PlaneAspect self, Standard_Real const theSize)

        Sets the angle of the arrowhead used in the display of planes.

        :type theSize: float

        """
        return _Prs3d.Handle_Prs3d_PlaneAspect_SetArrowsSize(self, *args)


    def ArrowsSize(self, *args):
        """
        ArrowsSize(Handle_Prs3d_PlaneAspect self) -> Standard_Real

        Returns the size of arrows used in the display of planes.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Handle_Prs3d_PlaneAspect_ArrowsSize(self, *args)


    def SetArrowsAngle(self, *args):
        """
        SetArrowsAngle(Handle_Prs3d_PlaneAspect self, Standard_Real const theAngle)

        Sets the angle of the arrowhead used in the display
        of arrows involved in the presentation of planes.

        :type theAngle: float

        """
        return _Prs3d.Handle_Prs3d_PlaneAspect_SetArrowsAngle(self, *args)


    def ArrowsAngle(self, *args):
        """
        ArrowsAngle(Handle_Prs3d_PlaneAspect self) -> Standard_Real

        Returns the angle of the arrowhead used in the
        display of arrows involved in the presentation of planes.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Handle_Prs3d_PlaneAspect_ArrowsAngle(self, *args)


    def SetDisplayCenterArrow(self, *args):
        """
        SetDisplayCenterArrow(Handle_Prs3d_PlaneAspect self, Standard_Boolean const theToDraw)

        Sets the display attributes defined in DisplayCenterArrow to active.

        :type theToDraw: bool

        """
        return _Prs3d.Handle_Prs3d_PlaneAspect_SetDisplayCenterArrow(self, *args)


    def DisplayCenterArrow(self, *args):
        """
        DisplayCenterArrow(Handle_Prs3d_PlaneAspect self) -> Standard_Boolean

        Returns true if the display of center arrows is allowed.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_PlaneAspect_DisplayCenterArrow(self, *args)


    def SetDisplayEdgesArrows(self, *args):
        """
        SetDisplayEdgesArrows(Handle_Prs3d_PlaneAspect self, Standard_Boolean const theToDraw)

        Sets the display attributes defined in DisplayEdgesArrows to active.

        :type theToDraw: bool

        """
        return _Prs3d.Handle_Prs3d_PlaneAspect_SetDisplayEdgesArrows(self, *args)


    def DisplayEdgesArrows(self, *args):
        """
        DisplayEdgesArrows(Handle_Prs3d_PlaneAspect self) -> Standard_Boolean

        Returns true if the display of edge arrows is allowed.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_PlaneAspect_DisplayEdgesArrows(self, *args)


    def SetDisplayEdges(self, *args):
        """
        SetDisplayEdges(Handle_Prs3d_PlaneAspect self, Standard_Boolean const theToDraw)

        :type theToDraw: bool

        """
        return _Prs3d.Handle_Prs3d_PlaneAspect_SetDisplayEdges(self, *args)


    def DisplayEdges(self, *args):
        """
        DisplayEdges(Handle_Prs3d_PlaneAspect self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_PlaneAspect_DisplayEdges(self, *args)


    def SetDisplayIso(self, *args):
        """
        SetDisplayIso(Handle_Prs3d_PlaneAspect self, Standard_Boolean const theToDraw)

        Sets the display attributes defined in DisplayIso to active.

        :type theToDraw: bool

        """
        return _Prs3d.Handle_Prs3d_PlaneAspect_SetDisplayIso(self, *args)


    def DisplayIso(self, *args):
        """
        DisplayIso(Handle_Prs3d_PlaneAspect self) -> Standard_Boolean

        Returns true if the display of isoparameters is allowed.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_PlaneAspect_DisplayIso(self, *args)


    def SetPlaneLength(self, *args):
        """
        SetPlaneLength(Handle_Prs3d_PlaneAspect self, Standard_Real const theLX, Standard_Real const theLY)

        :type theLX: float
        :type theLY: float

        """
        return _Prs3d.Handle_Prs3d_PlaneAspect_SetPlaneLength(self, *args)


    def PlaneXLength(self, *args):
        """
        PlaneXLength(Handle_Prs3d_PlaneAspect self) -> Standard_Real

        Returns the length of the x axis used in the display of planes.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Handle_Prs3d_PlaneAspect_PlaneXLength(self, *args)


    def PlaneYLength(self, *args):
        """
        PlaneYLength(Handle_Prs3d_PlaneAspect self) -> Standard_Real

        Returns the length of the y axis used in the display of planes.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Handle_Prs3d_PlaneAspect_PlaneYLength(self, *args)


    def SetIsoDistance(self, *args):
        """
        SetIsoDistance(Handle_Prs3d_PlaneAspect self, Standard_Real const theL)

        Sets the distance L between isoparameters used in the display of planes.

        :type theL: float

        """
        return _Prs3d.Handle_Prs3d_PlaneAspect_SetIsoDistance(self, *args)


    def IsoDistance(self, *args):
        """
        IsoDistance(Handle_Prs3d_PlaneAspect self) -> Standard_Real

        Returns the distance between isoparameters used in the display of planes.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Prs3d.Handle_Prs3d_PlaneAspect_IsoDistance(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Prs3d_PlaneAspect self)

        Memory deallocator for transient classes


        """
        return _Prs3d.Handle_Prs3d_PlaneAspect_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Prs3d_PlaneAspect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Prs3d_PlaneAspect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_PlaneAspect_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Prs3d_PlaneAspect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Prs3d_PlaneAspect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_PlaneAspect_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Prs3d_PlaneAspect self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Prs3d.Handle_Prs3d_PlaneAspect_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Prs3d_PlaneAspect self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Handle_Prs3d_PlaneAspect_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Prs3d_PlaneAspect self)

        Increments the reference counter of this object


        """
        return _Prs3d.Handle_Prs3d_PlaneAspect_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Prs3d_PlaneAspect self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Handle_Prs3d_PlaneAspect_DecrementRefCounter(self, *args)

Handle_Prs3d_PlaneAspect_swigregister = _Prs3d.Handle_Prs3d_PlaneAspect_swigregister
Handle_Prs3d_PlaneAspect_swigregister(Handle_Prs3d_PlaneAspect)

def Handle_Prs3d_PlaneAspect_DownCast(thing):
    return _Prs3d.Handle_Prs3d_PlaneAspect_DownCast(thing)
Handle_Prs3d_PlaneAspect_DownCast = _Prs3d.Handle_Prs3d_PlaneAspect_DownCast

class Prs3d_ShapeTool(object):
    """
    describes the behaviour requested for a wireframe
    shape presentation.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Prs3d_ShapeTool self, TopoDS_Shape theShape, Standard_Boolean const theAllVertices) -> Prs3d_ShapeTool

        Constructs the tool and initializes it using theShape and theAllVertices
        (optional) arguments. By default, only isolated and internal vertices are considered,
        however if theAllVertices argument is equal to True, all shape's vertices are taken into account.

        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type theAllVertices: bool

        """
        this = _Prs3d.new_Prs3d_ShapeTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def InitFace(self, *args):
        """InitFace(Prs3d_ShapeTool self)"""
        return _Prs3d.Prs3d_ShapeTool_InitFace(self, *args)


    def MoreFace(self, *args):
        """
        MoreFace(Prs3d_ShapeTool self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_ShapeTool_MoreFace(self, *args)


    def NextFace(self, *args):
        """NextFace(Prs3d_ShapeTool self)"""
        return _Prs3d.Prs3d_ShapeTool_NextFace(self, *args)


    def GetFace(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        res = _Prs3d.Prs3d_ShapeTool_GetFace(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FaceBound(self, *args):
        """
        FaceBound(Prs3d_ShapeTool self) -> Bnd_Box

        :rtype: OCC.wrapper.Bnd.Bnd_Box

        """
        return _Prs3d.Prs3d_ShapeTool_FaceBound(self, *args)


    def InitCurve(self, *args):
        """InitCurve(Prs3d_ShapeTool self)"""
        return _Prs3d.Prs3d_ShapeTool_InitCurve(self, *args)


    def MoreCurve(self, *args):
        """
        MoreCurve(Prs3d_ShapeTool self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_ShapeTool_MoreCurve(self, *args)


    def NextCurve(self, *args):
        """NextCurve(Prs3d_ShapeTool self)"""
        return _Prs3d.Prs3d_ShapeTool_NextCurve(self, *args)


    def GetCurve(self, *args):
        """
        GetCurve(Prs3d_ShapeTool self) -> TopoDS_Edge

        :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _Prs3d.Prs3d_ShapeTool_GetCurve(self, *args)


    def CurveBound(self, *args):
        """
        CurveBound(Prs3d_ShapeTool self) -> Bnd_Box

        :rtype: OCC.wrapper.Bnd.Bnd_Box

        """
        return _Prs3d.Prs3d_ShapeTool_CurveBound(self, *args)


    def Neighbours(self, *args):
        """
        Neighbours(Prs3d_ShapeTool self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Prs3d_ShapeTool_Neighbours(self, *args)


    def FacesOfEdge(self, *args):
        """
        FacesOfEdge(Prs3d_ShapeTool self) -> Handle_TopTools_HSequenceOfShape

        :rtype: OCC.wrapper.TopTools.Handle_TopTools_HSequenceOfShape

        """
        return _Prs3d.Prs3d_ShapeTool_FacesOfEdge(self, *args)


    def InitVertex(self, *args):
        """InitVertex(Prs3d_ShapeTool self)"""
        return _Prs3d.Prs3d_ShapeTool_InitVertex(self, *args)


    def MoreVertex(self, *args):
        """
        MoreVertex(Prs3d_ShapeTool self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_ShapeTool_MoreVertex(self, *args)


    def NextVertex(self, *args):
        """NextVertex(Prs3d_ShapeTool self)"""
        return _Prs3d.Prs3d_ShapeTool_NextVertex(self, *args)


    def GetVertex(self, *args):
        """
        GetVertex(Prs3d_ShapeTool self) -> TopoDS_Vertex

        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _Prs3d.Prs3d_ShapeTool_GetVertex(self, *args)


    def HasSurface(self, *args):
        """
        HasSurface(Prs3d_ShapeTool self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_ShapeTool_HasSurface(self, *args)


    def CurrentTriangulation(self, *args):
        """
        CurrentTriangulation(Prs3d_ShapeTool self, TopLoc_Location l) -> Handle_Poly_Triangulation

        :type l: OCC.wrapper.TopLoc.TopLoc_Location
        :rtype: OCC.wrapper.Poly.Handle_Poly_Triangulation

        """
        return _Prs3d.Prs3d_ShapeTool_CurrentTriangulation(self, *args)


    def HasCurve(self, *args):
        """
        HasCurve(Prs3d_ShapeTool self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_ShapeTool_HasCurve(self, *args)


    def PolygonOnTriangulation(self, *args):
        """
        PolygonOnTriangulation(Prs3d_ShapeTool self, Handle_Poly_PolygonOnTriangulation Indices, Handle_Poly_Triangulation T, TopLoc_Location l)

        :type Indices: OCC.wrapper.Poly.Handle_Poly_PolygonOnTriangulation
        :type T: OCC.wrapper.Poly.Handle_Poly_Triangulation
        :type l: OCC.wrapper.TopLoc.TopLoc_Location

        """
        return _Prs3d.Prs3d_ShapeTool_PolygonOnTriangulation(self, *args)


    def Polygon3D(self, *args):
        """
        Polygon3D(Prs3d_ShapeTool self, TopLoc_Location l) -> Handle_Poly_Polygon3D

        :type l: OCC.wrapper.TopLoc.TopLoc_Location
        :rtype: OCC.wrapper.Poly.Handle_Poly_Polygon3D

        """
        return _Prs3d.Prs3d_ShapeTool_Polygon3D(self, *args)


    def IsPlanarFace(*args):
        """
        IsPlanarFace() -> Standard_Boolean
        IsPlanarFace(TopoDS_Face theFace) -> Standard_Boolean

        :type theFace: OCC.wrapper.TopoDS.TopoDS_Face
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Prs3d_ShapeTool_IsPlanarFace(*args)

    IsPlanarFace = staticmethod(IsPlanarFace)
    __swig_destroy__ = _Prs3d.delete_Prs3d_ShapeTool
Prs3d_ShapeTool_swigregister = _Prs3d.Prs3d_ShapeTool_swigregister
Prs3d_ShapeTool_swigregister(Prs3d_ShapeTool)

def Prs3d_ShapeTool_IsPlanarFace(*args):
    """
    IsPlanarFace() -> Standard_Boolean
    Prs3d_ShapeTool_IsPlanarFace(TopoDS_Face theFace) -> Standard_Boolean

    :type theFace: OCC.wrapper.TopoDS.TopoDS_Face
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _Prs3d.Prs3d_ShapeTool_IsPlanarFace(*args)

class Handle_Prs3d_BasicAspect(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Prs3d_BasicAspect self)

        Nullify the handle


        """
        return _Prs3d.Handle_Prs3d_BasicAspect_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Prs3d_BasicAspect self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Prs3d.Handle_Prs3d_BasicAspect_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Prs3d_BasicAspect self, Prs3d_BasicAspect thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Prs3d.Handle_Prs3d_BasicAspect_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Prs3d_BasicAspect self, Handle_Prs3d_BasicAspect theHandle) -> Handle_Prs3d_BasicAspect
        assign(Handle_Prs3d_BasicAspect self, Prs3d_BasicAspect thePtr) -> Handle_Prs3d_BasicAspect
        assign(Handle_Prs3d_BasicAspect self, Handle_Prs3d_BasicAspect theHandle) -> Handle_Prs3d_BasicAspect

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Prs3d.Handle_Prs3d_BasicAspect_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Prs3d_BasicAspect self) -> Prs3d_BasicAspect

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Prs3d.Handle_Prs3d_BasicAspect_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Prs3d_BasicAspect self) -> Prs3d_BasicAspect

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Prs3d.Handle_Prs3d_BasicAspect___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Prs3d_BasicAspect self) -> Prs3d_BasicAspect

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Prs3d.Handle_Prs3d_BasicAspect___ref__(self, *args)


    def __hash__(self):
        return _Prs3d.Handle_Prs3d_BasicAspect___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Prs3d.Handle_Prs3d_BasicAspect___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Prs3d.new_Handle_Prs3d_BasicAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Prs3d.Handle_Prs3d_BasicAspect_DownCast)
    __swig_destroy__ = _Prs3d.delete_Handle_Prs3d_BasicAspect

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Prs3d_BasicAspect self) -> char const *

        :rtype: const char *

        """
        return _Prs3d.Handle_Prs3d_BasicAspect_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Handle_Prs3d_BasicAspect_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Prs3d.Handle_Prs3d_BasicAspect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Prs3d_BasicAspect self)

        Memory deallocator for transient classes


        """
        return _Prs3d.Handle_Prs3d_BasicAspect_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Prs3d_BasicAspect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Prs3d_BasicAspect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_BasicAspect_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Prs3d_BasicAspect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Prs3d_BasicAspect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Prs3d.Handle_Prs3d_BasicAspect_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Prs3d_BasicAspect self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Prs3d.Handle_Prs3d_BasicAspect_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Prs3d_BasicAspect self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Handle_Prs3d_BasicAspect_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Prs3d_BasicAspect self)

        Increments the reference counter of this object


        """
        return _Prs3d.Handle_Prs3d_BasicAspect_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Prs3d_BasicAspect self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Prs3d.Handle_Prs3d_BasicAspect_DecrementRefCounter(self, *args)

Handle_Prs3d_BasicAspect_swigregister = _Prs3d.Handle_Prs3d_BasicAspect_swigregister
Handle_Prs3d_BasicAspect_swigregister(Handle_Prs3d_BasicAspect)

def Handle_Prs3d_BasicAspect_DownCast(thing):
    return _Prs3d.Handle_Prs3d_BasicAspect_DownCast(thing)
Handle_Prs3d_BasicAspect_DownCast = _Prs3d.Handle_Prs3d_BasicAspect_DownCast



