# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_FEmTool')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_FEmTool')
    _FEmTool = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_FEmTool', [dirname(__file__)])
        except ImportError:
            import _FEmTool
            return _FEmTool
        try:
            _mod = imp.load_module('_FEmTool', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _FEmTool = swig_import_helper()
    del swig_import_helper
else:
    import _FEmTool
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _FEmTool.delete_SwigPyIterator

    def value(self):
        return _FEmTool.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _FEmTool.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _FEmTool.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _FEmTool.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _FEmTool.SwigPyIterator_equal(self, x)

    def copy(self):
        return _FEmTool.SwigPyIterator_copy(self)

    def next(self):
        return _FEmTool.SwigPyIterator_next(self)

    def __next__(self):
        return _FEmTool.SwigPyIterator___next__(self)

    def previous(self):
        return _FEmTool.SwigPyIterator_previous(self)

    def advance(self, n):
        return _FEmTool.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _FEmTool.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _FEmTool.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _FEmTool.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _FEmTool.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _FEmTool.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _FEmTool.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _FEmTool.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _FEmTool.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_FEmTool.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _FEmTool.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _FEmTool.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _FEmTool.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _FEmTool.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _FEmTool.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _FEmTool.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _FEmTool.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_FEmTool.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _FEmTool.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _FEmTool.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _FEmTool.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _FEmTool.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _FEmTool.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _FEmTool.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _FEmTool.ptr_to_number(item)
ptr_to_number = _FEmTool.ptr_to_number

def HashCode(*args):
    return _FEmTool.HashCode(*args)
HashCode = _FEmTool.HashCode

def ptr_equal(a, b):
    return _FEmTool.ptr_equal(a, b)
ptr_equal = _FEmTool.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import PLib
else:
    import PLib
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import math
else:
    import math
del _swig_python_version_info
class FEmTool_SparseMatrix(Standard.Standard_Transient):
    """Sparse Matrix definition"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_FEmTool_SparseMatrix
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_FEmTool_SparseMatrix(self) 
            return h


    def Init(self, *args):
        """
        Init(FEmTool_SparseMatrix self, Standard_Real const Value)

        :type Value: float

        """
        return _FEmTool.FEmTool_SparseMatrix_Init(self, *args)


    def ChangeValue(self, *args):
        """
        ChangeValue(FEmTool_SparseMatrix self, Standard_Integer const I, Standard_Integer const J) -> Standard_Real &

        :type I: int
        :type J: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _FEmTool.FEmTool_SparseMatrix_ChangeValue(self, *args)


    def Decompose(self, *args):
        """
        Decompose(FEmTool_SparseMatrix self) -> Standard_Boolean

        To make a Factorization of <me>

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _FEmTool.FEmTool_SparseMatrix_Decompose(self, *args)


    def Prepare(self, *args):
        """
        Prepare(FEmTool_SparseMatrix self) -> Standard_Boolean

        Make Preparation to iterative solve

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _FEmTool.FEmTool_SparseMatrix_Prepare(self, *args)


    def Solve(self, *args):
        """
        Solve(FEmTool_SparseMatrix self, math_Vector B, math_Vector X)
        Solve(FEmTool_SparseMatrix self, math_Vector B, math_Vector Init, math_Vector X, math_Vector Residual, Standard_Real const Tolerance=1.0e-8, Standard_Integer const NbIterations=50)

        Iterative solve  of AX = B

        :type B: OCC.wrapper.math.math_Vector
        :type Init: OCC.wrapper.math.math_Vector
        :type X: OCC.wrapper.math.math_Vector
        :type Residual: OCC.wrapper.math.math_Vector
        :type Tolerance: float
        :type NbIterations: int

        """
        return _FEmTool.FEmTool_SparseMatrix_Solve(self, *args)


    def Multiplied(self, *args):
        """
        Multiplied(FEmTool_SparseMatrix self, math_Vector X, math_Vector MX)

        returns the product of a SparseMatrix by a vector.
        An exception is raised if the dimensions are different

        :type X: OCC.wrapper.math.math_Vector
        :type MX: OCC.wrapper.math.math_Vector

        """
        return _FEmTool.FEmTool_SparseMatrix_Multiplied(self, *args)


    def RowNumber(self, *args):
        """
        RowNumber(FEmTool_SparseMatrix self) -> Standard_Integer

        returns the row range of a matrix.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.FEmTool_SparseMatrix_RowNumber(self, *args)


    def ColNumber(self, *args):
        """
        ColNumber(FEmTool_SparseMatrix self) -> Standard_Integer

        returns the column range of the matrix.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.FEmTool_SparseMatrix_ColNumber(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _FEmTool.FEmTool_SparseMatrix_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _FEmTool.FEmTool_SparseMatrix_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _FEmTool.FEmTool_SparseMatrix_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _FEmTool.delete_FEmTool_SparseMatrix
FEmTool_SparseMatrix_swigregister = _FEmTool.FEmTool_SparseMatrix_swigregister
FEmTool_SparseMatrix_swigregister(FEmTool_SparseMatrix)

def FEmTool_SparseMatrix_get_type_name(*args):
    """
    FEmTool_SparseMatrix_get_type_name() -> char const *

    :rtype: const char *

    """
    return _FEmTool.FEmTool_SparseMatrix_get_type_name(*args)

def FEmTool_SparseMatrix_get_type_descriptor(*args):
    """
    FEmTool_SparseMatrix_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _FEmTool.FEmTool_SparseMatrix_get_type_descriptor(*args)

class FEmTool_ElementaryCriterion(Standard.Standard_Transient):
    """defined J Criteria to used in minimisation"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_FEmTool_ElementaryCriterion
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_FEmTool_ElementaryCriterion(self) 
            return h


    def Set(self, *args):
        """
        Set(FEmTool_ElementaryCriterion self, Handle_TColStd_HArray2OfReal Coeff)
        Set(FEmTool_ElementaryCriterion self, Standard_Real const FirstKnot, Standard_Real const LastKnot)

        Set the definition interval of the Element

        :type FirstKnot: float
        :type LastKnot: float

        """
        return _FEmTool.FEmTool_ElementaryCriterion_Set(self, *args)


    def DependenceTable(self, *args):
        """
        DependenceTable(FEmTool_ElementaryCriterion self) -> Handle_TColStd_HArray2OfInteger

        To know if two dimension are independent.

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfInteger

        """
        return _FEmTool.FEmTool_ElementaryCriterion_DependenceTable(self, *args)


    def Value(self, *args):
        """
        Value(FEmTool_ElementaryCriterion self) -> Standard_Real

        To Compute J(E) where E  is the current Element

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _FEmTool.FEmTool_ElementaryCriterion_Value(self, *args)


    def Hessian(self, *args):
        """
        Hessian(FEmTool_ElementaryCriterion self, Standard_Integer const Dim1, Standard_Integer const Dim2, math_Matrix H)

        To Compute J(E)  the coefficients of Hessian matrix of
        J(E) wich are crossed derivatives in dimensions <Dim1>
        and  <Dim2>.
        If DependenceTable(Dimension1,Dimension2) is False

        :type Dim1: int
        :type Dim2: int
        :type H: OCC.wrapper.math.math_Matrix

        """
        return _FEmTool.FEmTool_ElementaryCriterion_Hessian(self, *args)


    def Gradient(self, *args):
        """
        Gradient(FEmTool_ElementaryCriterion self, Standard_Integer const Dim, math_Vector G)

        To Compute the  coefficients in the dimension <dim>
        of  the  J(E)'s  Gradient where E  is  the current  Element

        :type Dim: int
        :type G: OCC.wrapper.math.math_Vector

        """
        return _FEmTool.FEmTool_ElementaryCriterion_Gradient(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _FEmTool.FEmTool_ElementaryCriterion_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _FEmTool.FEmTool_ElementaryCriterion_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _FEmTool.FEmTool_ElementaryCriterion_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _FEmTool.delete_FEmTool_ElementaryCriterion
FEmTool_ElementaryCriterion_swigregister = _FEmTool.FEmTool_ElementaryCriterion_swigregister
FEmTool_ElementaryCriterion_swigregister(FEmTool_ElementaryCriterion)

def FEmTool_ElementaryCriterion_get_type_name(*args):
    """
    FEmTool_ElementaryCriterion_get_type_name() -> char const *

    :rtype: const char *

    """
    return _FEmTool.FEmTool_ElementaryCriterion_get_type_name(*args)

def FEmTool_ElementaryCriterion_get_type_descriptor(*args):
    """
    FEmTool_ElementaryCriterion_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _FEmTool.FEmTool_ElementaryCriterion_get_type_descriptor(*args)

class FEmTool_ProfileMatrix(FEmTool_SparseMatrix):
    """
    Symmetric Sparse ProfileMatrix useful  for 1D Finite
    Element methods
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_FEmTool_ProfileMatrix
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_FEmTool_ProfileMatrix(self) 
            return h


    def __init__(self, *args):
        """
        __init__(FEmTool_ProfileMatrix self, NCollection_Array1_Standard_Integer FirstIndexes) -> FEmTool_ProfileMatrix

        :type FirstIndexes: OCC.wrapper.TColStd.TColStd_Array1OfInteger

        """
        this = _FEmTool.new_FEmTool_ProfileMatrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(FEmTool_ProfileMatrix self, Standard_Real const Value)

        :type Value: float

        """
        return _FEmTool.FEmTool_ProfileMatrix_Init(self, *args)


    def ChangeValue(self, *args):
        """
        ChangeValue(FEmTool_ProfileMatrix self, Standard_Integer const I, Standard_Integer const J) -> Standard_Real &

        :type I: int
        :type J: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _FEmTool.FEmTool_ProfileMatrix_ChangeValue(self, *args)


    def Decompose(self, *args):
        """
        Decompose(FEmTool_ProfileMatrix self) -> Standard_Boolean

        To make a Factorization of <me>

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _FEmTool.FEmTool_ProfileMatrix_Decompose(self, *args)


    def Prepare(self, *args):
        """
        Prepare(FEmTool_ProfileMatrix self) -> Standard_Boolean

        Make Preparation to iterative solve

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _FEmTool.FEmTool_ProfileMatrix_Prepare(self, *args)


    def Solve(self, *args):
        """
        Solve(FEmTool_ProfileMatrix self, math_Vector B, math_Vector X)
        Solve(FEmTool_ProfileMatrix self, math_Vector B, math_Vector Init, math_Vector X, math_Vector Residual, Standard_Real const Tolerance=1.0e-8, Standard_Integer const NbIterations=50)

        Iterative solve  of AX = B

        :type B: OCC.wrapper.math.math_Vector
        :type Init: OCC.wrapper.math.math_Vector
        :type X: OCC.wrapper.math.math_Vector
        :type Residual: OCC.wrapper.math.math_Vector
        :type Tolerance: float
        :type NbIterations: int

        """
        return _FEmTool.FEmTool_ProfileMatrix_Solve(self, *args)


    def Multiplied(self, *args):
        """
        Multiplied(FEmTool_ProfileMatrix self, math_Vector X, math_Vector MX)

        returns the product of a SparseMatrix by a vector.
        An exception is raised if the dimensions are different

        :type X: OCC.wrapper.math.math_Vector
        :type MX: OCC.wrapper.math.math_Vector

        """
        return _FEmTool.FEmTool_ProfileMatrix_Multiplied(self, *args)


    def RowNumber(self, *args):
        """
        RowNumber(FEmTool_ProfileMatrix self) -> Standard_Integer

        returns the row range of a matrix.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.FEmTool_ProfileMatrix_RowNumber(self, *args)


    def ColNumber(self, *args):
        """
        ColNumber(FEmTool_ProfileMatrix self) -> Standard_Integer

        returns the column range of the matrix.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.FEmTool_ProfileMatrix_ColNumber(self, *args)


    def IsInProfile(self, *args):
        """
        IsInProfile(FEmTool_ProfileMatrix self, Standard_Integer const i, Standard_Integer const j) -> Standard_Boolean

        :type i: int
        :type j: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _FEmTool.FEmTool_ProfileMatrix_IsInProfile(self, *args)


    def OutM(self, *args):
        """OutM(FEmTool_ProfileMatrix self)"""
        return _FEmTool.FEmTool_ProfileMatrix_OutM(self, *args)


    def OutS(self, *args):
        """OutS(FEmTool_ProfileMatrix self)"""
        return _FEmTool.FEmTool_ProfileMatrix_OutS(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _FEmTool.FEmTool_ProfileMatrix_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _FEmTool.FEmTool_ProfileMatrix_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _FEmTool.FEmTool_ProfileMatrix_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _FEmTool.delete_FEmTool_ProfileMatrix
FEmTool_ProfileMatrix_swigregister = _FEmTool.FEmTool_ProfileMatrix_swigregister
FEmTool_ProfileMatrix_swigregister(FEmTool_ProfileMatrix)

def FEmTool_ProfileMatrix_get_type_name(*args):
    """
    FEmTool_ProfileMatrix_get_type_name() -> char const *

    :rtype: const char *

    """
    return _FEmTool.FEmTool_ProfileMatrix_get_type_name(*args)

def FEmTool_ProfileMatrix_get_type_descriptor(*args):
    """
    FEmTool_ProfileMatrix_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _FEmTool.FEmTool_ProfileMatrix_get_type_descriptor(*args)

class FEmTool_LinearJerk(FEmTool_ElementaryCriterion):
    """Criterion of LinearJerk To Hermit-Jacobi  elements"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_FEmTool_LinearJerk
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_FEmTool_LinearJerk(self) 
            return h


    def __init__(self, *args):
        """
        __init__(FEmTool_LinearJerk self, Standard_Integer const WorkDegree, GeomAbs_Shape const ConstraintOrder) -> FEmTool_LinearJerk

        :type WorkDegree: int
        :type ConstraintOrder: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        this = _FEmTool.new_FEmTool_LinearJerk(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def DependenceTable(self, *args):
        """
        DependenceTable(FEmTool_LinearJerk self) -> Handle_TColStd_HArray2OfInteger

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfInteger

        """
        return _FEmTool.FEmTool_LinearJerk_DependenceTable(self, *args)


    def Value(self, *args):
        """
        Value(FEmTool_LinearJerk self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _FEmTool.FEmTool_LinearJerk_Value(self, *args)


    def Hessian(self, *args):
        """
        Hessian(FEmTool_LinearJerk self, Standard_Integer const Dimension1, Standard_Integer const Dimension2, math_Matrix H)

        :type Dimension1: int
        :type Dimension2: int
        :type H: OCC.wrapper.math.math_Matrix

        """
        return _FEmTool.FEmTool_LinearJerk_Hessian(self, *args)


    def Gradient(self, *args):
        """
        Gradient(FEmTool_LinearJerk self, Standard_Integer const Dimension, math_Vector G)

        :type Dimension: int
        :type G: OCC.wrapper.math.math_Vector

        """
        return _FEmTool.FEmTool_LinearJerk_Gradient(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _FEmTool.FEmTool_LinearJerk_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _FEmTool.FEmTool_LinearJerk_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _FEmTool.FEmTool_LinearJerk_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _FEmTool.delete_FEmTool_LinearJerk
FEmTool_LinearJerk_swigregister = _FEmTool.FEmTool_LinearJerk_swigregister
FEmTool_LinearJerk_swigregister(FEmTool_LinearJerk)

def FEmTool_LinearJerk_get_type_name(*args):
    """
    FEmTool_LinearJerk_get_type_name() -> char const *

    :rtype: const char *

    """
    return _FEmTool.FEmTool_LinearJerk_get_type_name(*args)

def FEmTool_LinearJerk_get_type_descriptor(*args):
    """
    FEmTool_LinearJerk_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _FEmTool.FEmTool_LinearJerk_get_type_descriptor(*args)

class FEmTool_LinearTension(FEmTool_ElementaryCriterion):
    """Criterium of LinearTension To Hermit-Jacobi  elements"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_FEmTool_LinearTension
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_FEmTool_LinearTension(self) 
            return h


    def __init__(self, *args):
        """
        __init__(FEmTool_LinearTension self, Standard_Integer const WorkDegree, GeomAbs_Shape const ConstraintOrder) -> FEmTool_LinearTension

        :type WorkDegree: int
        :type ConstraintOrder: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        this = _FEmTool.new_FEmTool_LinearTension(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def DependenceTable(self, *args):
        """
        DependenceTable(FEmTool_LinearTension self) -> Handle_TColStd_HArray2OfInteger

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfInteger

        """
        return _FEmTool.FEmTool_LinearTension_DependenceTable(self, *args)


    def Value(self, *args):
        """
        Value(FEmTool_LinearTension self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _FEmTool.FEmTool_LinearTension_Value(self, *args)


    def Hessian(self, *args):
        """
        Hessian(FEmTool_LinearTension self, Standard_Integer const Dimension1, Standard_Integer const Dimension2, math_Matrix H)

        :type Dimension1: int
        :type Dimension2: int
        :type H: OCC.wrapper.math.math_Matrix

        """
        return _FEmTool.FEmTool_LinearTension_Hessian(self, *args)


    def Gradient(self, *args):
        """
        Gradient(FEmTool_LinearTension self, Standard_Integer const Dimension, math_Vector G)

        :type Dimension: int
        :type G: OCC.wrapper.math.math_Vector

        """
        return _FEmTool.FEmTool_LinearTension_Gradient(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _FEmTool.FEmTool_LinearTension_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _FEmTool.FEmTool_LinearTension_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _FEmTool.FEmTool_LinearTension_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _FEmTool.delete_FEmTool_LinearTension
FEmTool_LinearTension_swigregister = _FEmTool.FEmTool_LinearTension_swigregister
FEmTool_LinearTension_swigregister(FEmTool_LinearTension)

def FEmTool_LinearTension_get_type_name(*args):
    """
    FEmTool_LinearTension_get_type_name() -> char const *

    :rtype: const char *

    """
    return _FEmTool.FEmTool_LinearTension_get_type_name(*args)

def FEmTool_LinearTension_get_type_descriptor(*args):
    """
    FEmTool_LinearTension_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _FEmTool.FEmTool_LinearTension_get_type_descriptor(*args)

class FEmTool_Curve(Standard.Standard_Transient):
    """Curve defined by Polynomial Elements."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_FEmTool_Curve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_FEmTool_Curve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(FEmTool_Curve self, Standard_Integer const Dimension, Standard_Integer const NbElements, Handle_PLib_Base TheBase, Standard_Real const Tolerance) -> FEmTool_Curve

        :type Dimension: int
        :type NbElements: int
        :type TheBase: OCC.wrapper.PLib.Handle_PLib_Base
        :type Tolerance: float

        """
        this = _FEmTool.new_FEmTool_Curve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Knots(self, *args):
        """
        Knots(FEmTool_Curve self) -> NCollection_Array1_Standard_Real

        :rtype: OCC.wrapper.TColStd.TColStd_Array1OfReal

        """
        return _FEmTool.FEmTool_Curve_Knots(self, *args)


    def SetElement(self, *args):
        """
        SetElement(FEmTool_Curve self, Standard_Integer const IndexOfElement, NCollection_Array2_Standard_Real Coeffs)

        :type IndexOfElement: int
        :type Coeffs: OCC.wrapper.TColStd.TColStd_Array2OfReal

        """
        return _FEmTool.FEmTool_Curve_SetElement(self, *args)


    def D0(self, *args):
        """
        D0(FEmTool_Curve self, Standard_Real const U, NCollection_Array1_Standard_Real Pnt)

        :type U: float
        :type Pnt: OCC.wrapper.TColStd.TColStd_Array1OfReal

        """
        return _FEmTool.FEmTool_Curve_D0(self, *args)


    def D1(self, *args):
        """
        D1(FEmTool_Curve self, Standard_Real const U, NCollection_Array1_Standard_Real Vec)

        :type U: float
        :type Vec: OCC.wrapper.TColStd.TColStd_Array1OfReal

        """
        return _FEmTool.FEmTool_Curve_D1(self, *args)


    def D2(self, *args):
        """
        D2(FEmTool_Curve self, Standard_Real const U, NCollection_Array1_Standard_Real Vec)

        :type U: float
        :type Vec: OCC.wrapper.TColStd.TColStd_Array1OfReal

        """
        return _FEmTool.FEmTool_Curve_D2(self, *args)


    def Length(self, *args):
        """
        Length(FEmTool_Curve self, Standard_Real const FirstU, Standard_Real const LastU)

        :type FirstU: float
        :type LastU: float
        :type Length: float

        """
        return _FEmTool.FEmTool_Curve_Length(self, *args)


    def GetElement(self, *args):
        """
        GetElement(FEmTool_Curve self, Standard_Integer const IndexOfElement, NCollection_Array2_Standard_Real Coeffs)

        :type IndexOfElement: int
        :type Coeffs: OCC.wrapper.TColStd.TColStd_Array2OfReal

        """
        return _FEmTool.FEmTool_Curve_GetElement(self, *args)


    def GetPolynom(self, *args):
        """
        GetPolynom(FEmTool_Curve self, NCollection_Array1_Standard_Real Coeffs)

        returns  coefficients  of  all  elements  in  canonical  base.

        :type Coeffs: OCC.wrapper.TColStd.TColStd_Array1OfReal

        """
        return _FEmTool.FEmTool_Curve_GetPolynom(self, *args)


    def NbElements(self, *args):
        """
        NbElements(FEmTool_Curve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.FEmTool_Curve_NbElements(self, *args)


    def Dimension(self, *args):
        """
        Dimension(FEmTool_Curve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.FEmTool_Curve_Dimension(self, *args)


    def Base(self, *args):
        """
        Base(FEmTool_Curve self) -> Handle_PLib_Base

        :rtype: OCC.wrapper.PLib.Handle_PLib_Base

        """
        return _FEmTool.FEmTool_Curve_Base(self, *args)


    def Degree(self, *args):
        """
        Degree(FEmTool_Curve self, Standard_Integer const IndexOfElement) -> Standard_Integer

        :type IndexOfElement: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.FEmTool_Curve_Degree(self, *args)


    def SetDegree(self, *args):
        """
        SetDegree(FEmTool_Curve self, Standard_Integer const IndexOfElement, Standard_Integer const Degree)

        :type IndexOfElement: int
        :type Degree: int

        """
        return _FEmTool.FEmTool_Curve_SetDegree(self, *args)


    def ReduceDegree(self, *args):
        """
        ReduceDegree(FEmTool_Curve self, Standard_Integer const IndexOfElement, Standard_Real const Tol)

        :type IndexOfElement: int
        :type Tol: float
        :type NewDegree: int
        :type MaxError: float

        """
        return _FEmTool.FEmTool_Curve_ReduceDegree(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _FEmTool.FEmTool_Curve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _FEmTool.FEmTool_Curve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _FEmTool.FEmTool_Curve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _FEmTool.delete_FEmTool_Curve
FEmTool_Curve_swigregister = _FEmTool.FEmTool_Curve_swigregister
FEmTool_Curve_swigregister(FEmTool_Curve)

def FEmTool_Curve_get_type_name(*args):
    """
    FEmTool_Curve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _FEmTool.FEmTool_Curve_get_type_name(*args)

def FEmTool_Curve_get_type_descriptor(*args):
    """
    FEmTool_Curve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _FEmTool.FEmTool_Curve_get_type_descriptor(*args)

class FEmTool_LinearFlexion(FEmTool_ElementaryCriterion):
    """Criterium of LinearFlexion To Hermit-Jacobi  elements"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_FEmTool_LinearFlexion
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_FEmTool_LinearFlexion(self) 
            return h


    def __init__(self, *args):
        """
        __init__(FEmTool_LinearFlexion self, Standard_Integer const WorkDegree, GeomAbs_Shape const ConstraintOrder) -> FEmTool_LinearFlexion

        :type WorkDegree: int
        :type ConstraintOrder: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        this = _FEmTool.new_FEmTool_LinearFlexion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def DependenceTable(self, *args):
        """
        DependenceTable(FEmTool_LinearFlexion self) -> Handle_TColStd_HArray2OfInteger

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfInteger

        """
        return _FEmTool.FEmTool_LinearFlexion_DependenceTable(self, *args)


    def Value(self, *args):
        """
        Value(FEmTool_LinearFlexion self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _FEmTool.FEmTool_LinearFlexion_Value(self, *args)


    def Hessian(self, *args):
        """
        Hessian(FEmTool_LinearFlexion self, Standard_Integer const Dimension1, Standard_Integer const Dimension2, math_Matrix H)

        :type Dimension1: int
        :type Dimension2: int
        :type H: OCC.wrapper.math.math_Matrix

        """
        return _FEmTool.FEmTool_LinearFlexion_Hessian(self, *args)


    def Gradient(self, *args):
        """
        Gradient(FEmTool_LinearFlexion self, Standard_Integer const Dimension, math_Vector G)

        :type Dimension: int
        :type G: OCC.wrapper.math.math_Vector

        """
        return _FEmTool.FEmTool_LinearFlexion_Gradient(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _FEmTool.FEmTool_LinearFlexion_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _FEmTool.FEmTool_LinearFlexion_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _FEmTool.FEmTool_LinearFlexion_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _FEmTool.delete_FEmTool_LinearFlexion
FEmTool_LinearFlexion_swigregister = _FEmTool.FEmTool_LinearFlexion_swigregister
FEmTool_LinearFlexion_swigregister(FEmTool_LinearFlexion)

def FEmTool_LinearFlexion_get_type_name(*args):
    """
    FEmTool_LinearFlexion_get_type_name() -> char const *

    :rtype: const char *

    """
    return _FEmTool.FEmTool_LinearFlexion_get_type_name(*args)

def FEmTool_LinearFlexion_get_type_descriptor(*args):
    """
    FEmTool_LinearFlexion_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _FEmTool.FEmTool_LinearFlexion_get_type_descriptor(*args)

class Handle_FEmTool_ProfileMatrix(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_FEmTool_ProfileMatrix self)

        Nullify the handle


        """
        return _FEmTool.Handle_FEmTool_ProfileMatrix_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_FEmTool_ProfileMatrix self) -> bool

        Check for being null

        :rtype: bool

        """
        return _FEmTool.Handle_FEmTool_ProfileMatrix_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_FEmTool_ProfileMatrix self, FEmTool_ProfileMatrix thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _FEmTool.Handle_FEmTool_ProfileMatrix_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_FEmTool_ProfileMatrix self, Handle_FEmTool_ProfileMatrix theHandle) -> Handle_FEmTool_ProfileMatrix
        assign(Handle_FEmTool_ProfileMatrix self, FEmTool_ProfileMatrix thePtr) -> Handle_FEmTool_ProfileMatrix
        assign(Handle_FEmTool_ProfileMatrix self, Handle_FEmTool_ProfileMatrix theHandle) -> Handle_FEmTool_ProfileMatrix

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _FEmTool.Handle_FEmTool_ProfileMatrix_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_FEmTool_ProfileMatrix self) -> FEmTool_ProfileMatrix

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _FEmTool.Handle_FEmTool_ProfileMatrix_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_FEmTool_ProfileMatrix self) -> FEmTool_ProfileMatrix

        Member access operator (note non-const)

        :rtype: T *

        """
        return _FEmTool.Handle_FEmTool_ProfileMatrix___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_FEmTool_ProfileMatrix self) -> FEmTool_ProfileMatrix

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _FEmTool.Handle_FEmTool_ProfileMatrix___ref__(self, *args)


    def __hash__(self):
        return _FEmTool.Handle_FEmTool_ProfileMatrix___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _FEmTool.Handle_FEmTool_ProfileMatrix___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _FEmTool.new_Handle_FEmTool_ProfileMatrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_FEmTool.Handle_FEmTool_ProfileMatrix_DownCast)
    __swig_destroy__ = _FEmTool.delete_Handle_FEmTool_ProfileMatrix

    def Init(self, *args):
        """
        Init(Handle_FEmTool_ProfileMatrix self, Standard_Real const Value)

        :type Value: float

        """
        return _FEmTool.Handle_FEmTool_ProfileMatrix_Init(self, *args)


    def ChangeValue(self, *args):
        """
        ChangeValue(Handle_FEmTool_ProfileMatrix self, Standard_Integer const I, Standard_Integer const J) -> Standard_Real &

        :type I: int
        :type J: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _FEmTool.Handle_FEmTool_ProfileMatrix_ChangeValue(self, *args)


    def Decompose(self, *args):
        """
        Decompose(Handle_FEmTool_ProfileMatrix self) -> Standard_Boolean

        To make a Factorization of <me>

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _FEmTool.Handle_FEmTool_ProfileMatrix_Decompose(self, *args)


    def Solve(self, *args):
        """
        Solve(Handle_FEmTool_ProfileMatrix self, math_Vector B, math_Vector X)
        Solve(Handle_FEmTool_ProfileMatrix self, math_Vector B, math_Vector Init, math_Vector X, math_Vector Residual, Standard_Real const Tolerance=1.0e-8, Standard_Integer const NbIterations=50)

        Iterative solve  of AX = B

        :type B: OCC.wrapper.math.math_Vector
        :type Init: OCC.wrapper.math.math_Vector
        :type X: OCC.wrapper.math.math_Vector
        :type Residual: OCC.wrapper.math.math_Vector
        :type Tolerance: float
        :type NbIterations: int

        """
        return _FEmTool.Handle_FEmTool_ProfileMatrix_Solve(self, *args)


    def Prepare(self, *args):
        """
        Prepare(Handle_FEmTool_ProfileMatrix self) -> Standard_Boolean

        Make Preparation to iterative solve

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _FEmTool.Handle_FEmTool_ProfileMatrix_Prepare(self, *args)


    def Multiplied(self, *args):
        """
        Multiplied(Handle_FEmTool_ProfileMatrix self, math_Vector X, math_Vector MX)

        returns the product of a SparseMatrix by a vector.
        An exception is raised if the dimensions are different

        :type X: OCC.wrapper.math.math_Vector
        :type MX: OCC.wrapper.math.math_Vector

        """
        return _FEmTool.Handle_FEmTool_ProfileMatrix_Multiplied(self, *args)


    def RowNumber(self, *args):
        """
        RowNumber(Handle_FEmTool_ProfileMatrix self) -> Standard_Integer

        returns the row range of a matrix.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.Handle_FEmTool_ProfileMatrix_RowNumber(self, *args)


    def ColNumber(self, *args):
        """
        ColNumber(Handle_FEmTool_ProfileMatrix self) -> Standard_Integer

        returns the column range of the matrix.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.Handle_FEmTool_ProfileMatrix_ColNumber(self, *args)


    def IsInProfile(self, *args):
        """
        IsInProfile(Handle_FEmTool_ProfileMatrix self, Standard_Integer const i, Standard_Integer const j) -> Standard_Boolean

        :type i: int
        :type j: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _FEmTool.Handle_FEmTool_ProfileMatrix_IsInProfile(self, *args)


    def OutM(self, *args):
        """OutM(Handle_FEmTool_ProfileMatrix self)"""
        return _FEmTool.Handle_FEmTool_ProfileMatrix_OutM(self, *args)


    def OutS(self, *args):
        """OutS(Handle_FEmTool_ProfileMatrix self)"""
        return _FEmTool.Handle_FEmTool_ProfileMatrix_OutS(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_FEmTool_ProfileMatrix self) -> char const *

        :rtype: const char *

        """
        return _FEmTool.Handle_FEmTool_ProfileMatrix_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _FEmTool.Handle_FEmTool_ProfileMatrix_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _FEmTool.Handle_FEmTool_ProfileMatrix_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_FEmTool_ProfileMatrix self)

        Memory deallocator for transient classes


        """
        return _FEmTool.Handle_FEmTool_ProfileMatrix_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_FEmTool_ProfileMatrix self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_FEmTool_ProfileMatrix self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _FEmTool.Handle_FEmTool_ProfileMatrix_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_FEmTool_ProfileMatrix self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_FEmTool_ProfileMatrix self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _FEmTool.Handle_FEmTool_ProfileMatrix_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_FEmTool_ProfileMatrix self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _FEmTool.Handle_FEmTool_ProfileMatrix_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_FEmTool_ProfileMatrix self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.Handle_FEmTool_ProfileMatrix_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_FEmTool_ProfileMatrix self)

        Increments the reference counter of this object


        """
        return _FEmTool.Handle_FEmTool_ProfileMatrix_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_FEmTool_ProfileMatrix self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.Handle_FEmTool_ProfileMatrix_DecrementRefCounter(self, *args)

Handle_FEmTool_ProfileMatrix_swigregister = _FEmTool.Handle_FEmTool_ProfileMatrix_swigregister
Handle_FEmTool_ProfileMatrix_swigregister(Handle_FEmTool_ProfileMatrix)

def Handle_FEmTool_ProfileMatrix_DownCast(thing):
    return _FEmTool.Handle_FEmTool_ProfileMatrix_DownCast(thing)
Handle_FEmTool_ProfileMatrix_DownCast = _FEmTool.Handle_FEmTool_ProfileMatrix_DownCast

class Handle_FEmTool_LinearJerk(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_FEmTool_LinearJerk self)

        Nullify the handle


        """
        return _FEmTool.Handle_FEmTool_LinearJerk_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_FEmTool_LinearJerk self) -> bool

        Check for being null

        :rtype: bool

        """
        return _FEmTool.Handle_FEmTool_LinearJerk_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_FEmTool_LinearJerk self, FEmTool_LinearJerk thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _FEmTool.Handle_FEmTool_LinearJerk_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_FEmTool_LinearJerk self, Handle_FEmTool_LinearJerk theHandle) -> Handle_FEmTool_LinearJerk
        assign(Handle_FEmTool_LinearJerk self, FEmTool_LinearJerk thePtr) -> Handle_FEmTool_LinearJerk
        assign(Handle_FEmTool_LinearJerk self, Handle_FEmTool_LinearJerk theHandle) -> Handle_FEmTool_LinearJerk

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _FEmTool.Handle_FEmTool_LinearJerk_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_FEmTool_LinearJerk self) -> FEmTool_LinearJerk

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _FEmTool.Handle_FEmTool_LinearJerk_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_FEmTool_LinearJerk self) -> FEmTool_LinearJerk

        Member access operator (note non-const)

        :rtype: T *

        """
        return _FEmTool.Handle_FEmTool_LinearJerk___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_FEmTool_LinearJerk self) -> FEmTool_LinearJerk

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _FEmTool.Handle_FEmTool_LinearJerk___ref__(self, *args)


    def __hash__(self):
        return _FEmTool.Handle_FEmTool_LinearJerk___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _FEmTool.Handle_FEmTool_LinearJerk___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _FEmTool.new_Handle_FEmTool_LinearJerk(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_FEmTool.Handle_FEmTool_LinearJerk_DownCast)
    __swig_destroy__ = _FEmTool.delete_Handle_FEmTool_LinearJerk

    def DependenceTable(self, *args):
        """
        DependenceTable(Handle_FEmTool_LinearJerk self) -> Handle_TColStd_HArray2OfInteger

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfInteger

        """
        return _FEmTool.Handle_FEmTool_LinearJerk_DependenceTable(self, *args)


    def Value(self, *args):
        """
        Value(Handle_FEmTool_LinearJerk self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _FEmTool.Handle_FEmTool_LinearJerk_Value(self, *args)


    def Hessian(self, *args):
        """
        Hessian(Handle_FEmTool_LinearJerk self, Standard_Integer const Dimension1, Standard_Integer const Dimension2, math_Matrix H)

        :type Dimension1: int
        :type Dimension2: int
        :type H: OCC.wrapper.math.math_Matrix

        """
        return _FEmTool.Handle_FEmTool_LinearJerk_Hessian(self, *args)


    def Gradient(self, *args):
        """
        Gradient(Handle_FEmTool_LinearJerk self, Standard_Integer const Dimension, math_Vector G)

        :type Dimension: int
        :type G: OCC.wrapper.math.math_Vector

        """
        return _FEmTool.Handle_FEmTool_LinearJerk_Gradient(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_FEmTool_LinearJerk self) -> char const *

        :rtype: const char *

        """
        return _FEmTool.Handle_FEmTool_LinearJerk_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _FEmTool.Handle_FEmTool_LinearJerk_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _FEmTool.Handle_FEmTool_LinearJerk_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Set(self, *args):
        """
        Set(Handle_FEmTool_LinearJerk self, Handle_TColStd_HArray2OfReal Coeff)
        Set(Handle_FEmTool_LinearJerk self, Standard_Real const FirstKnot, Standard_Real const LastKnot)

        Set the definition interval of the Element

        :type FirstKnot: float
        :type LastKnot: float

        """
        return _FEmTool.Handle_FEmTool_LinearJerk_Set(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_FEmTool_LinearJerk self)

        Memory deallocator for transient classes


        """
        return _FEmTool.Handle_FEmTool_LinearJerk_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_FEmTool_LinearJerk self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_FEmTool_LinearJerk self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _FEmTool.Handle_FEmTool_LinearJerk_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_FEmTool_LinearJerk self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_FEmTool_LinearJerk self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _FEmTool.Handle_FEmTool_LinearJerk_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_FEmTool_LinearJerk self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _FEmTool.Handle_FEmTool_LinearJerk_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_FEmTool_LinearJerk self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.Handle_FEmTool_LinearJerk_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_FEmTool_LinearJerk self)

        Increments the reference counter of this object


        """
        return _FEmTool.Handle_FEmTool_LinearJerk_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_FEmTool_LinearJerk self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.Handle_FEmTool_LinearJerk_DecrementRefCounter(self, *args)

Handle_FEmTool_LinearJerk_swigregister = _FEmTool.Handle_FEmTool_LinearJerk_swigregister
Handle_FEmTool_LinearJerk_swigregister(Handle_FEmTool_LinearJerk)

def Handle_FEmTool_LinearJerk_DownCast(thing):
    return _FEmTool.Handle_FEmTool_LinearJerk_DownCast(thing)
Handle_FEmTool_LinearJerk_DownCast = _FEmTool.Handle_FEmTool_LinearJerk_DownCast

class NCollection_List_Handle_TColStd_HArray1OfReal(NCollection.NCollection_BaseList):
    """
    Purpose:      Simple list to link  items together keeping the first 
    and the last one.
    Inherits BaseList, adding the data item to each node.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_List_Handle_TColStd_HArray1OfReal self) -> NCollection_List< opencascade::handle< TColStd_HArray1OfReal > >::iterator

        Returns an iterator pointing to the first element in the list.

        :rtype: iterator

        """
        return _FEmTool.NCollection_List_Handle_TColStd_HArray1OfReal_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_List_Handle_TColStd_HArray1OfReal self) -> NCollection_List< opencascade::handle< TColStd_HArray1OfReal > >::iterator

        Returns an iterator referring to the past-the-end element in the list.

        :rtype: iterator

        """
        return _FEmTool.NCollection_List_Handle_TColStd_HArray1OfReal_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_List_Handle_TColStd_HArray1OfReal self) -> NCollection_List< opencascade::handle< TColStd_HArray1OfReal > >::const_iterator

        Returns a const iterator pointing to the first element in the list.

        :rtype: const_iterator

        """
        return _FEmTool.NCollection_List_Handle_TColStd_HArray1OfReal_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_List_Handle_TColStd_HArray1OfReal self) -> NCollection_List< opencascade::handle< TColStd_HArray1OfReal > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the list.

        :rtype: const_iterator

        """
        return _FEmTool.NCollection_List_Handle_TColStd_HArray1OfReal_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:      Simple list to link  items together keeping the first 
        and the last one.
        Inherits BaseList, adding the data item to each node.
        """
        this = _FEmTool.new_NCollection_List_Handle_TColStd_HArray1OfReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_List_Handle_TColStd_HArray1OfReal self) -> Standard_Integer

        Size - Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.NCollection_List_Handle_TColStd_HArray1OfReal_Size(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_List_Handle_TColStd_HArray1OfReal self, NCollection_List_Handle_TColStd_HArray1OfReal theOther) -> NCollection_List_Handle_TColStd_HArray1OfReal

        Replace this list by the items of another list (theOther parameter).
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_List
        :rtype: OCC.wrapper.NCollection.NCollection_List

        """
        return _FEmTool.NCollection_List_Handle_TColStd_HArray1OfReal_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_List_Handle_TColStd_HArray1OfReal self, NCollection_List_Handle_TColStd_HArray1OfReal theOther) -> NCollection_List_Handle_TColStd_HArray1OfReal

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_List
        :rtype: OCC.wrapper.NCollection.NCollection_List

        """
        return _FEmTool.NCollection_List_Handle_TColStd_HArray1OfReal_assign(self, *args)


    def Clear(self, *args):
        """
        Clear(NCollection_List_Handle_TColStd_HArray1OfReal self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear this list

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _FEmTool.NCollection_List_Handle_TColStd_HArray1OfReal_Clear(self, *args)


    def First(self, *args):
        """
        First item

        :rtype: const TheItemType &

        """
        res = _FEmTool.NCollection_List_Handle_TColStd_HArray1OfReal_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Last(self, *args):
        """
        Last item

        :rtype: const TheItemType &

        """
        res = _FEmTool.NCollection_List_Handle_TColStd_HArray1OfReal_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(NCollection_List_Handle_TColStd_HArray1OfReal self, Handle_TColStd_HArray1OfReal theItem) -> Handle_TColStd_HArray1OfReal
        Append(NCollection_List_Handle_TColStd_HArray1OfReal self, Handle_TColStd_HArray1OfReal theItem, NCollection_List< opencascade::handle< TColStd_HArray1OfReal > >::Iterator & theIter)
        Append(NCollection_List_Handle_TColStd_HArray1OfReal self, NCollection_List_Handle_TColStd_HArray1OfReal theOther)

        Append another list at the end

        :type theOther: OCC.wrapper.NCollection.NCollection_List

        """
        return _FEmTool.NCollection_List_Handle_TColStd_HArray1OfReal_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_List_Handle_TColStd_HArray1OfReal self, Handle_TColStd_HArray1OfReal theItem) -> Handle_TColStd_HArray1OfReal
        Prepend(NCollection_List_Handle_TColStd_HArray1OfReal self, NCollection_List_Handle_TColStd_HArray1OfReal theOther)

        Prepend another list at the beginning

        :type theOther: OCC.wrapper.NCollection.NCollection_List

        """
        return _FEmTool.NCollection_List_Handle_TColStd_HArray1OfReal_Prepend(self, *args)


    def RemoveFirst(self, *args):
        """
        RemoveFirst(NCollection_List_Handle_TColStd_HArray1OfReal self)

        RemoveFirst item


        """
        return _FEmTool.NCollection_List_Handle_TColStd_HArray1OfReal_RemoveFirst(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_List_Handle_TColStd_HArray1OfReal self, NCollection_List< opencascade::handle< TColStd_HArray1OfReal > >::Iterator & theIter)

        Remove item pointed by iterator theIter; 
        theIter is then set to the next item

        :type theIter: Iterator

        """
        return _FEmTool.NCollection_List_Handle_TColStd_HArray1OfReal_Remove(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_List_Handle_TColStd_HArray1OfReal self, Handle_TColStd_HArray1OfReal theItem, NCollection_List< opencascade::handle< TColStd_HArray1OfReal > >::Iterator & theIter) -> Handle_TColStd_HArray1OfReal
        InsertBefore(NCollection_List_Handle_TColStd_HArray1OfReal self, NCollection_List_Handle_TColStd_HArray1OfReal theOther, NCollection_List< opencascade::handle< TColStd_HArray1OfReal > >::Iterator & theIter)

        InsertBefore

        :type theOther: OCC.wrapper.NCollection.NCollection_List
        :type theIter: Iterator

        """
        return _FEmTool.NCollection_List_Handle_TColStd_HArray1OfReal_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_List_Handle_TColStd_HArray1OfReal self, Handle_TColStd_HArray1OfReal theItem, NCollection_List< opencascade::handle< TColStd_HArray1OfReal > >::Iterator & theIter) -> Handle_TColStd_HArray1OfReal
        InsertAfter(NCollection_List_Handle_TColStd_HArray1OfReal self, NCollection_List_Handle_TColStd_HArray1OfReal theOther, NCollection_List< opencascade::handle< TColStd_HArray1OfReal > >::Iterator & theIter)

        InsertAfter

        :type theOther: OCC.wrapper.NCollection.NCollection_List
        :type theIter: Iterator

        """
        return _FEmTool.NCollection_List_Handle_TColStd_HArray1OfReal_InsertAfter(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_List_Handle_TColStd_HArray1OfReal self)

        Reverse the list


        """
        return _FEmTool.NCollection_List_Handle_TColStd_HArray1OfReal_Reverse(self, *args)


    def __iter__(self):
        return _FEmTool.NCollection_List_Handle_TColStd_HArray1OfReal___iter__(self)
    __swig_destroy__ = _FEmTool.delete_NCollection_List_Handle_TColStd_HArray1OfReal
NCollection_List_Handle_TColStd_HArray1OfReal_swigregister = _FEmTool.NCollection_List_Handle_TColStd_HArray1OfReal_swigregister
NCollection_List_Handle_TColStd_HArray1OfReal_swigregister(NCollection_List_Handle_TColStd_HArray1OfReal)

class NCollection_List_Handle_TColStd_HArray1OfReal_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _FEmTool.new_NCollection_List_Handle_TColStd_HArray1OfReal_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _FEmTool.delete_NCollection_List_Handle_TColStd_HArray1OfReal_IteratorHelper

    def __next__(self):
        return _FEmTool.NCollection_List_Handle_TColStd_HArray1OfReal_IteratorHelper___next__(self)
NCollection_List_Handle_TColStd_HArray1OfReal_IteratorHelper_swigregister = _FEmTool.NCollection_List_Handle_TColStd_HArray1OfReal_IteratorHelper_swigregister
NCollection_List_Handle_TColStd_HArray1OfReal_IteratorHelper_swigregister(NCollection_List_Handle_TColStd_HArray1OfReal_IteratorHelper)


try:
	FEmTool_ListOfVectors = NCollection_List_Handle_TColStd_HArray1OfReal
except NameError:
	pass # does not exist, probably ignored

class Handle_FEmTool_SparseMatrix(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_FEmTool_SparseMatrix self)

        Nullify the handle


        """
        return _FEmTool.Handle_FEmTool_SparseMatrix_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_FEmTool_SparseMatrix self) -> bool

        Check for being null

        :rtype: bool

        """
        return _FEmTool.Handle_FEmTool_SparseMatrix_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_FEmTool_SparseMatrix self, FEmTool_SparseMatrix thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _FEmTool.Handle_FEmTool_SparseMatrix_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_FEmTool_SparseMatrix self, Handle_FEmTool_SparseMatrix theHandle) -> Handle_FEmTool_SparseMatrix
        assign(Handle_FEmTool_SparseMatrix self, FEmTool_SparseMatrix thePtr) -> Handle_FEmTool_SparseMatrix
        assign(Handle_FEmTool_SparseMatrix self, Handle_FEmTool_SparseMatrix theHandle) -> Handle_FEmTool_SparseMatrix

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _FEmTool.Handle_FEmTool_SparseMatrix_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_FEmTool_SparseMatrix self) -> FEmTool_SparseMatrix

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _FEmTool.Handle_FEmTool_SparseMatrix_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_FEmTool_SparseMatrix self) -> FEmTool_SparseMatrix

        Member access operator (note non-const)

        :rtype: T *

        """
        return _FEmTool.Handle_FEmTool_SparseMatrix___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_FEmTool_SparseMatrix self) -> FEmTool_SparseMatrix

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _FEmTool.Handle_FEmTool_SparseMatrix___ref__(self, *args)


    def __hash__(self):
        return _FEmTool.Handle_FEmTool_SparseMatrix___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _FEmTool.Handle_FEmTool_SparseMatrix___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _FEmTool.new_Handle_FEmTool_SparseMatrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_FEmTool.Handle_FEmTool_SparseMatrix_DownCast)
    __swig_destroy__ = _FEmTool.delete_Handle_FEmTool_SparseMatrix

    def Init(self, *args):
        """
        Init(Handle_FEmTool_SparseMatrix self, Standard_Real const Value)

        :type Value: float

        """
        return _FEmTool.Handle_FEmTool_SparseMatrix_Init(self, *args)


    def ChangeValue(self, *args):
        """
        ChangeValue(Handle_FEmTool_SparseMatrix self, Standard_Integer const I, Standard_Integer const J) -> Standard_Real &

        :type I: int
        :type J: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _FEmTool.Handle_FEmTool_SparseMatrix_ChangeValue(self, *args)


    def Decompose(self, *args):
        """
        Decompose(Handle_FEmTool_SparseMatrix self) -> Standard_Boolean

        To make a Factorization of <me>

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _FEmTool.Handle_FEmTool_SparseMatrix_Decompose(self, *args)


    def Solve(self, *args):
        """
        Solve(Handle_FEmTool_SparseMatrix self, math_Vector B, math_Vector X)
        Solve(Handle_FEmTool_SparseMatrix self, math_Vector B, math_Vector Init, math_Vector X, math_Vector Residual, Standard_Real const Tolerance=1.0e-8, Standard_Integer const NbIterations=50)

        Iterative solve  of AX = B

        :type B: OCC.wrapper.math.math_Vector
        :type Init: OCC.wrapper.math.math_Vector
        :type X: OCC.wrapper.math.math_Vector
        :type Residual: OCC.wrapper.math.math_Vector
        :type Tolerance: float
        :type NbIterations: int

        """
        return _FEmTool.Handle_FEmTool_SparseMatrix_Solve(self, *args)


    def Prepare(self, *args):
        """
        Prepare(Handle_FEmTool_SparseMatrix self) -> Standard_Boolean

        Make Preparation to iterative solve

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _FEmTool.Handle_FEmTool_SparseMatrix_Prepare(self, *args)


    def Multiplied(self, *args):
        """
        Multiplied(Handle_FEmTool_SparseMatrix self, math_Vector X, math_Vector MX)

        returns the product of a SparseMatrix by a vector.
        An exception is raised if the dimensions are different

        :type X: OCC.wrapper.math.math_Vector
        :type MX: OCC.wrapper.math.math_Vector

        """
        return _FEmTool.Handle_FEmTool_SparseMatrix_Multiplied(self, *args)


    def RowNumber(self, *args):
        """
        RowNumber(Handle_FEmTool_SparseMatrix self) -> Standard_Integer

        returns the row range of a matrix.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.Handle_FEmTool_SparseMatrix_RowNumber(self, *args)


    def ColNumber(self, *args):
        """
        ColNumber(Handle_FEmTool_SparseMatrix self) -> Standard_Integer

        returns the column range of the matrix.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.Handle_FEmTool_SparseMatrix_ColNumber(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_FEmTool_SparseMatrix self) -> char const *

        :rtype: const char *

        """
        return _FEmTool.Handle_FEmTool_SparseMatrix_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _FEmTool.Handle_FEmTool_SparseMatrix_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _FEmTool.Handle_FEmTool_SparseMatrix_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_FEmTool_SparseMatrix self)

        Memory deallocator for transient classes


        """
        return _FEmTool.Handle_FEmTool_SparseMatrix_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_FEmTool_SparseMatrix self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_FEmTool_SparseMatrix self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _FEmTool.Handle_FEmTool_SparseMatrix_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_FEmTool_SparseMatrix self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_FEmTool_SparseMatrix self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _FEmTool.Handle_FEmTool_SparseMatrix_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_FEmTool_SparseMatrix self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _FEmTool.Handle_FEmTool_SparseMatrix_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_FEmTool_SparseMatrix self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.Handle_FEmTool_SparseMatrix_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_FEmTool_SparseMatrix self)

        Increments the reference counter of this object


        """
        return _FEmTool.Handle_FEmTool_SparseMatrix_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_FEmTool_SparseMatrix self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.Handle_FEmTool_SparseMatrix_DecrementRefCounter(self, *args)

Handle_FEmTool_SparseMatrix_swigregister = _FEmTool.Handle_FEmTool_SparseMatrix_swigregister
Handle_FEmTool_SparseMatrix_swigregister(Handle_FEmTool_SparseMatrix)

def Handle_FEmTool_SparseMatrix_DownCast(thing):
    return _FEmTool.Handle_FEmTool_SparseMatrix_DownCast(thing)
Handle_FEmTool_SparseMatrix_DownCast = _FEmTool.Handle_FEmTool_SparseMatrix_DownCast

class Handle_FEmTool_ElementaryCriterion(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_FEmTool_ElementaryCriterion self)

        Nullify the handle


        """
        return _FEmTool.Handle_FEmTool_ElementaryCriterion_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_FEmTool_ElementaryCriterion self) -> bool

        Check for being null

        :rtype: bool

        """
        return _FEmTool.Handle_FEmTool_ElementaryCriterion_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_FEmTool_ElementaryCriterion self, FEmTool_ElementaryCriterion thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _FEmTool.Handle_FEmTool_ElementaryCriterion_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_FEmTool_ElementaryCriterion self, Handle_FEmTool_ElementaryCriterion theHandle) -> Handle_FEmTool_ElementaryCriterion
        assign(Handle_FEmTool_ElementaryCriterion self, FEmTool_ElementaryCriterion thePtr) -> Handle_FEmTool_ElementaryCriterion
        assign(Handle_FEmTool_ElementaryCriterion self, Handle_FEmTool_ElementaryCriterion theHandle) -> Handle_FEmTool_ElementaryCriterion

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _FEmTool.Handle_FEmTool_ElementaryCriterion_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_FEmTool_ElementaryCriterion self) -> FEmTool_ElementaryCriterion

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _FEmTool.Handle_FEmTool_ElementaryCriterion_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_FEmTool_ElementaryCriterion self) -> FEmTool_ElementaryCriterion

        Member access operator (note non-const)

        :rtype: T *

        """
        return _FEmTool.Handle_FEmTool_ElementaryCriterion___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_FEmTool_ElementaryCriterion self) -> FEmTool_ElementaryCriterion

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _FEmTool.Handle_FEmTool_ElementaryCriterion___ref__(self, *args)


    def __hash__(self):
        return _FEmTool.Handle_FEmTool_ElementaryCriterion___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _FEmTool.Handle_FEmTool_ElementaryCriterion___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _FEmTool.new_Handle_FEmTool_ElementaryCriterion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_FEmTool.Handle_FEmTool_ElementaryCriterion_DownCast)
    __swig_destroy__ = _FEmTool.delete_Handle_FEmTool_ElementaryCriterion

    def Set(self, *args):
        """
        Set(Handle_FEmTool_ElementaryCriterion self, Handle_TColStd_HArray2OfReal Coeff)
        Set(Handle_FEmTool_ElementaryCriterion self, Standard_Real const FirstKnot, Standard_Real const LastKnot)

        Set the definition interval of the Element

        :type FirstKnot: float
        :type LastKnot: float

        """
        return _FEmTool.Handle_FEmTool_ElementaryCriterion_Set(self, *args)


    def DependenceTable(self, *args):
        """
        DependenceTable(Handle_FEmTool_ElementaryCriterion self) -> Handle_TColStd_HArray2OfInteger

        To know if two dimension are independent.

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfInteger

        """
        return _FEmTool.Handle_FEmTool_ElementaryCriterion_DependenceTable(self, *args)


    def Value(self, *args):
        """
        Value(Handle_FEmTool_ElementaryCriterion self) -> Standard_Real

        To Compute J(E) where E  is the current Element

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _FEmTool.Handle_FEmTool_ElementaryCriterion_Value(self, *args)


    def Hessian(self, *args):
        """
        Hessian(Handle_FEmTool_ElementaryCriterion self, Standard_Integer const Dim1, Standard_Integer const Dim2, math_Matrix H)

        To Compute J(E)  the coefficients of Hessian matrix of
        J(E) wich are crossed derivatives in dimensions <Dim1>
        and  <Dim2>.
        If DependenceTable(Dimension1,Dimension2) is False

        :type Dim1: int
        :type Dim2: int
        :type H: OCC.wrapper.math.math_Matrix

        """
        return _FEmTool.Handle_FEmTool_ElementaryCriterion_Hessian(self, *args)


    def Gradient(self, *args):
        """
        Gradient(Handle_FEmTool_ElementaryCriterion self, Standard_Integer const Dim, math_Vector G)

        To Compute the  coefficients in the dimension <dim>
        of  the  J(E)'s  Gradient where E  is  the current  Element

        :type Dim: int
        :type G: OCC.wrapper.math.math_Vector

        """
        return _FEmTool.Handle_FEmTool_ElementaryCriterion_Gradient(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_FEmTool_ElementaryCriterion self) -> char const *

        :rtype: const char *

        """
        return _FEmTool.Handle_FEmTool_ElementaryCriterion_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _FEmTool.Handle_FEmTool_ElementaryCriterion_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _FEmTool.Handle_FEmTool_ElementaryCriterion_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_FEmTool_ElementaryCriterion self)

        Memory deallocator for transient classes


        """
        return _FEmTool.Handle_FEmTool_ElementaryCriterion_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_FEmTool_ElementaryCriterion self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_FEmTool_ElementaryCriterion self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _FEmTool.Handle_FEmTool_ElementaryCriterion_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_FEmTool_ElementaryCriterion self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_FEmTool_ElementaryCriterion self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _FEmTool.Handle_FEmTool_ElementaryCriterion_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_FEmTool_ElementaryCriterion self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _FEmTool.Handle_FEmTool_ElementaryCriterion_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_FEmTool_ElementaryCriterion self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.Handle_FEmTool_ElementaryCriterion_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_FEmTool_ElementaryCriterion self)

        Increments the reference counter of this object


        """
        return _FEmTool.Handle_FEmTool_ElementaryCriterion_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_FEmTool_ElementaryCriterion self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.Handle_FEmTool_ElementaryCriterion_DecrementRefCounter(self, *args)

Handle_FEmTool_ElementaryCriterion_swigregister = _FEmTool.Handle_FEmTool_ElementaryCriterion_swigregister
Handle_FEmTool_ElementaryCriterion_swigregister(Handle_FEmTool_ElementaryCriterion)

def Handle_FEmTool_ElementaryCriterion_DownCast(thing):
    return _FEmTool.Handle_FEmTool_ElementaryCriterion_DownCast(thing)
Handle_FEmTool_ElementaryCriterion_DownCast = _FEmTool.Handle_FEmTool_ElementaryCriterion_DownCast

class FEmTool_Assembly(object):
    """Assemble and solve system from (one dimensional) Finite Elements"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FEmTool_Assembly self, NCollection_Array2_Standard_Integer Dependence, Handle_FEmTool_HAssemblyTable Table) -> FEmTool_Assembly

        :type Dependence: OCC.wrapper.TColStd.TColStd_Array2OfInteger
        :type Table: OCC.wrapper.FEmTool.Handle_FEmTool_HAssemblyTable

        """
        this = _FEmTool.new_FEmTool_Assembly(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def NullifyMatrix(self, *args):
        """
        NullifyMatrix(FEmTool_Assembly self)

        Nullify all Matrix 's Coefficient


        """
        return _FEmTool.FEmTool_Assembly_NullifyMatrix(self, *args)


    def AddMatrix(self, *args):
        """
        AddMatrix(FEmTool_Assembly self, Standard_Integer const Element, Standard_Integer const Dimension1, Standard_Integer const Dimension2, math_Matrix Mat)

        Add an elementary Matrix in the assembly Matrix
        if  Dependence(Dimension1,Dimension2)  is  False

        :type Element: int
        :type Dimension1: int
        :type Dimension2: int
        :type Mat: OCC.wrapper.math.math_Matrix

        """
        return _FEmTool.FEmTool_Assembly_AddMatrix(self, *args)


    def NullifyVector(self, *args):
        """
        NullifyVector(FEmTool_Assembly self)

        Nullify  all  Coordinate of  assembly  Vector (second member)


        """
        return _FEmTool.FEmTool_Assembly_NullifyVector(self, *args)


    def AddVector(self, *args):
        """
        AddVector(FEmTool_Assembly self, Standard_Integer const Element, Standard_Integer const Dimension, math_Vector Vec)

        Add an elementary Vector in the assembly Vector (second member)

        :type Element: int
        :type Dimension: int
        :type Vec: OCC.wrapper.math.math_Vector

        """
        return _FEmTool.FEmTool_Assembly_AddVector(self, *args)


    def ResetConstraint(self, *args):
        """
        ResetConstraint(FEmTool_Assembly self)

        Delete all Constraints.


        """
        return _FEmTool.FEmTool_Assembly_ResetConstraint(self, *args)


    def NullifyConstraint(self, *args):
        """
        NullifyConstraint(FEmTool_Assembly self)

        Nullify all Constraints.


        """
        return _FEmTool.FEmTool_Assembly_NullifyConstraint(self, *args)


    def AddConstraint(self, *args):
        """
        AddConstraint(FEmTool_Assembly self, Standard_Integer const IndexofConstraint, Standard_Integer const Element, Standard_Integer const Dimension, math_Vector LinearForm, Standard_Real const Value)

        :type IndexofConstraint: int
        :type Element: int
        :type Dimension: int
        :type LinearForm: OCC.wrapper.math.math_Vector
        :type Value: float

        """
        return _FEmTool.FEmTool_Assembly_AddConstraint(self, *args)


    def Solve(self, *args):
        """
        Solve(FEmTool_Assembly self) -> Standard_Boolean

        Solve the assembly system
        Returns Standard_False if the computation failed.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _FEmTool.FEmTool_Assembly_Solve(self, *args)


    def Solution(self, *args):
        """
        Solution(FEmTool_Assembly self, math_Vector Solution)

        :type Solution: OCC.wrapper.math.math_Vector

        """
        return _FEmTool.FEmTool_Assembly_Solution(self, *args)


    def NbGlobVar(self, *args):
        """
        NbGlobVar(FEmTool_Assembly self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.FEmTool_Assembly_NbGlobVar(self, *args)


    def GetAssemblyTable(self, *args):
        """
        GetAssemblyTable(FEmTool_Assembly self, Handle_FEmTool_HAssemblyTable AssTable)

        :type AssTable: OCC.wrapper.FEmTool.Handle_FEmTool_HAssemblyTable

        """
        return _FEmTool.FEmTool_Assembly_GetAssemblyTable(self, *args)

    __swig_destroy__ = _FEmTool.delete_FEmTool_Assembly
FEmTool_Assembly_swigregister = _FEmTool.FEmTool_Assembly_swigregister
FEmTool_Assembly_swigregister(FEmTool_Assembly)

class FEmTool_HAssemblyTable(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_FEmTool_HAssemblyTable
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_FEmTool_HAssemblyTable(self) 
            return h


    def __init__(self, *args):
        """
        __init__(FEmTool_HAssemblyTable self, Standard_Integer const theRowLow, Standard_Integer const theRowUpp, Standard_Integer const theColLow, Standard_Integer const theColUpp) -> FEmTool_HAssemblyTable
        __init__(FEmTool_HAssemblyTable self, Standard_Integer const theRowLow, Standard_Integer const theRowUpp, Standard_Integer const theColLow, Standard_Integer const theColUpp, Handle_TColStd_HArray1OfInteger theValue) -> FEmTool_HAssemblyTable
        __init__(FEmTool_HAssemblyTable self, NCollection_Array2_Handle_TColStd_HArray1OfInteger theOther) -> FEmTool_HAssemblyTable

        :type theOther: OCC.wrapper.FEmTool.FEmTool_AssemblyTable

        """
        this = _FEmTool.new_FEmTool_HAssemblyTable(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array2(self, *args):
        """
        :rtype: OCC.wrapper.FEmTool.FEmTool_AssemblyTable

        """
        res = _FEmTool.FEmTool_HAssemblyTable_Array2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray2(self, *args):
        """
        ChangeArray2(FEmTool_HAssemblyTable self) -> NCollection_Array2_Handle_TColStd_HArray1OfInteger

        :rtype: OCC.wrapper.FEmTool.FEmTool_AssemblyTable

        """
        return _FEmTool.FEmTool_HAssemblyTable_ChangeArray2(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _FEmTool.FEmTool_HAssemblyTable_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _FEmTool.FEmTool_HAssemblyTable_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _FEmTool.FEmTool_HAssemblyTable_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _FEmTool.delete_FEmTool_HAssemblyTable
FEmTool_HAssemblyTable_swigregister = _FEmTool.FEmTool_HAssemblyTable_swigregister
FEmTool_HAssemblyTable_swigregister(FEmTool_HAssemblyTable)

def FEmTool_HAssemblyTable_get_type_name(*args):
    """
    FEmTool_HAssemblyTable_get_type_name() -> char const *

    :rtype: const char *

    """
    return _FEmTool.FEmTool_HAssemblyTable_get_type_name(*args)

def FEmTool_HAssemblyTable_get_type_descriptor(*args):
    """
    FEmTool_HAssemblyTable_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _FEmTool.FEmTool_HAssemblyTable_get_type_descriptor(*args)

class FEmTool_ElementsOfRefMatrix(math.math_FunctionSet):
    """
    this  class  describes  the  functions  needed  for
    calculating  matrix  elements  of  RefMatrix  for  linear
    criteriums  (Tension,  Flexsion  and  Jerk) by  Gauss  integration.
    Each  function  from  set  gives  value  Pi(u)'*Pj(u)'  or
    Pi(u)''*Pj(u)''  or  Pi(u)'''*Pj(u)'''  for  each  i  and  j,
    where  Pi(u)  is  i-th  basis  function  of  expansion  and
    (')  means  derivative.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FEmTool_ElementsOfRefMatrix self, Handle_PLib_Base TheBase, Standard_Integer const DerOrder) -> FEmTool_ElementsOfRefMatrix

        :type TheBase: OCC.wrapper.PLib.Handle_PLib_Base
        :type DerOrder: int

        """
        this = _FEmTool.new_FEmTool_ElementsOfRefMatrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def NbVariables(self, *args):
        """
        NbVariables(FEmTool_ElementsOfRefMatrix self) -> Standard_Integer

        returns the number of variables of the function.
        It  is  supposed  that  NbVariables  =  1.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.FEmTool_ElementsOfRefMatrix_NbVariables(self, *args)


    def NbEquations(self, *args):
        """
        NbEquations(FEmTool_ElementsOfRefMatrix self) -> Standard_Integer

        returns the number of equations of the function.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.FEmTool_ElementsOfRefMatrix_NbEquations(self, *args)


    def Value(self, *args):
        """
        Value(FEmTool_ElementsOfRefMatrix self, math_Vector X, math_Vector F) -> Standard_Boolean

        computes the values <F> of the functions for the
        variable <X>.
        returns True if the computation was done successfully,
        False otherwise.
        F  contains  results  only  for  i<=j  in  following  order:
        P0*P0,  P0*P1,  P0*P2...  P1*P1,  P1*P2,...  (upper  triangle of
        matrix  {PiPj})

        :type X: OCC.wrapper.math.math_Vector
        :type F: OCC.wrapper.math.math_Vector
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _FEmTool.FEmTool_ElementsOfRefMatrix_Value(self, *args)

    __swig_destroy__ = _FEmTool.delete_FEmTool_ElementsOfRefMatrix
FEmTool_ElementsOfRefMatrix_swigregister = _FEmTool.FEmTool_ElementsOfRefMatrix_swigregister
FEmTool_ElementsOfRefMatrix_swigregister(FEmTool_ElementsOfRefMatrix)

class Handle_FEmTool_LinearTension(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_FEmTool_LinearTension self)

        Nullify the handle


        """
        return _FEmTool.Handle_FEmTool_LinearTension_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_FEmTool_LinearTension self) -> bool

        Check for being null

        :rtype: bool

        """
        return _FEmTool.Handle_FEmTool_LinearTension_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_FEmTool_LinearTension self, FEmTool_LinearTension thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _FEmTool.Handle_FEmTool_LinearTension_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_FEmTool_LinearTension self, Handle_FEmTool_LinearTension theHandle) -> Handle_FEmTool_LinearTension
        assign(Handle_FEmTool_LinearTension self, FEmTool_LinearTension thePtr) -> Handle_FEmTool_LinearTension
        assign(Handle_FEmTool_LinearTension self, Handle_FEmTool_LinearTension theHandle) -> Handle_FEmTool_LinearTension

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _FEmTool.Handle_FEmTool_LinearTension_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_FEmTool_LinearTension self) -> FEmTool_LinearTension

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _FEmTool.Handle_FEmTool_LinearTension_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_FEmTool_LinearTension self) -> FEmTool_LinearTension

        Member access operator (note non-const)

        :rtype: T *

        """
        return _FEmTool.Handle_FEmTool_LinearTension___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_FEmTool_LinearTension self) -> FEmTool_LinearTension

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _FEmTool.Handle_FEmTool_LinearTension___ref__(self, *args)


    def __hash__(self):
        return _FEmTool.Handle_FEmTool_LinearTension___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _FEmTool.Handle_FEmTool_LinearTension___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _FEmTool.new_Handle_FEmTool_LinearTension(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_FEmTool.Handle_FEmTool_LinearTension_DownCast)
    __swig_destroy__ = _FEmTool.delete_Handle_FEmTool_LinearTension

    def DependenceTable(self, *args):
        """
        DependenceTable(Handle_FEmTool_LinearTension self) -> Handle_TColStd_HArray2OfInteger

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfInteger

        """
        return _FEmTool.Handle_FEmTool_LinearTension_DependenceTable(self, *args)


    def Value(self, *args):
        """
        Value(Handle_FEmTool_LinearTension self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _FEmTool.Handle_FEmTool_LinearTension_Value(self, *args)


    def Hessian(self, *args):
        """
        Hessian(Handle_FEmTool_LinearTension self, Standard_Integer const Dimension1, Standard_Integer const Dimension2, math_Matrix H)

        :type Dimension1: int
        :type Dimension2: int
        :type H: OCC.wrapper.math.math_Matrix

        """
        return _FEmTool.Handle_FEmTool_LinearTension_Hessian(self, *args)


    def Gradient(self, *args):
        """
        Gradient(Handle_FEmTool_LinearTension self, Standard_Integer const Dimension, math_Vector G)

        :type Dimension: int
        :type G: OCC.wrapper.math.math_Vector

        """
        return _FEmTool.Handle_FEmTool_LinearTension_Gradient(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_FEmTool_LinearTension self) -> char const *

        :rtype: const char *

        """
        return _FEmTool.Handle_FEmTool_LinearTension_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _FEmTool.Handle_FEmTool_LinearTension_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _FEmTool.Handle_FEmTool_LinearTension_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Set(self, *args):
        """
        Set(Handle_FEmTool_LinearTension self, Handle_TColStd_HArray2OfReal Coeff)
        Set(Handle_FEmTool_LinearTension self, Standard_Real const FirstKnot, Standard_Real const LastKnot)

        Set the definition interval of the Element

        :type FirstKnot: float
        :type LastKnot: float

        """
        return _FEmTool.Handle_FEmTool_LinearTension_Set(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_FEmTool_LinearTension self)

        Memory deallocator for transient classes


        """
        return _FEmTool.Handle_FEmTool_LinearTension_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_FEmTool_LinearTension self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_FEmTool_LinearTension self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _FEmTool.Handle_FEmTool_LinearTension_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_FEmTool_LinearTension self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_FEmTool_LinearTension self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _FEmTool.Handle_FEmTool_LinearTension_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_FEmTool_LinearTension self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _FEmTool.Handle_FEmTool_LinearTension_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_FEmTool_LinearTension self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.Handle_FEmTool_LinearTension_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_FEmTool_LinearTension self)

        Increments the reference counter of this object


        """
        return _FEmTool.Handle_FEmTool_LinearTension_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_FEmTool_LinearTension self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.Handle_FEmTool_LinearTension_DecrementRefCounter(self, *args)

Handle_FEmTool_LinearTension_swigregister = _FEmTool.Handle_FEmTool_LinearTension_swigregister
Handle_FEmTool_LinearTension_swigregister(Handle_FEmTool_LinearTension)

def Handle_FEmTool_LinearTension_DownCast(thing):
    return _FEmTool.Handle_FEmTool_LinearTension_DownCast(thing)
Handle_FEmTool_LinearTension_DownCast = _FEmTool.Handle_FEmTool_LinearTension_DownCast

class Handle_FEmTool_HAssemblyTable(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_FEmTool_HAssemblyTable self)

        Nullify the handle


        """
        return _FEmTool.Handle_FEmTool_HAssemblyTable_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_FEmTool_HAssemblyTable self) -> bool

        Check for being null

        :rtype: bool

        """
        return _FEmTool.Handle_FEmTool_HAssemblyTable_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_FEmTool_HAssemblyTable self, FEmTool_HAssemblyTable thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _FEmTool.Handle_FEmTool_HAssemblyTable_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_FEmTool_HAssemblyTable self, Handle_FEmTool_HAssemblyTable theHandle) -> Handle_FEmTool_HAssemblyTable
        assign(Handle_FEmTool_HAssemblyTable self, FEmTool_HAssemblyTable thePtr) -> Handle_FEmTool_HAssemblyTable
        assign(Handle_FEmTool_HAssemblyTable self, Handle_FEmTool_HAssemblyTable theHandle) -> Handle_FEmTool_HAssemblyTable

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _FEmTool.Handle_FEmTool_HAssemblyTable_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_FEmTool_HAssemblyTable self) -> FEmTool_HAssemblyTable

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _FEmTool.Handle_FEmTool_HAssemblyTable_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_FEmTool_HAssemblyTable self) -> FEmTool_HAssemblyTable

        Member access operator (note non-const)

        :rtype: T *

        """
        return _FEmTool.Handle_FEmTool_HAssemblyTable___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_FEmTool_HAssemblyTable self) -> FEmTool_HAssemblyTable

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _FEmTool.Handle_FEmTool_HAssemblyTable___ref__(self, *args)


    def __hash__(self):
        return _FEmTool.Handle_FEmTool_HAssemblyTable___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _FEmTool.Handle_FEmTool_HAssemblyTable___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _FEmTool.new_Handle_FEmTool_HAssemblyTable(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_FEmTool.Handle_FEmTool_HAssemblyTable_DownCast)
    __swig_destroy__ = _FEmTool.delete_Handle_FEmTool_HAssemblyTable

    def Array2(self, *args):
        """
        :rtype: OCC.wrapper.FEmTool.FEmTool_AssemblyTable

        """
        res = _FEmTool.Handle_FEmTool_HAssemblyTable_Array2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray2(self, *args):
        """
        ChangeArray2(Handle_FEmTool_HAssemblyTable self) -> NCollection_Array2_Handle_TColStd_HArray1OfInteger

        :rtype: OCC.wrapper.FEmTool.FEmTool_AssemblyTable

        """
        return _FEmTool.Handle_FEmTool_HAssemblyTable_ChangeArray2(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_FEmTool_HAssemblyTable self) -> char const *

        :rtype: const char *

        """
        return _FEmTool.Handle_FEmTool_HAssemblyTable_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _FEmTool.Handle_FEmTool_HAssemblyTable_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _FEmTool.Handle_FEmTool_HAssemblyTable_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_FEmTool_HAssemblyTable self)

        Memory deallocator for transient classes


        """
        return _FEmTool.Handle_FEmTool_HAssemblyTable_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_FEmTool_HAssemblyTable self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_FEmTool_HAssemblyTable self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _FEmTool.Handle_FEmTool_HAssemblyTable_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_FEmTool_HAssemblyTable self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_FEmTool_HAssemblyTable self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _FEmTool.Handle_FEmTool_HAssemblyTable_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_FEmTool_HAssemblyTable self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _FEmTool.Handle_FEmTool_HAssemblyTable_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_FEmTool_HAssemblyTable self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.Handle_FEmTool_HAssemblyTable_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_FEmTool_HAssemblyTable self)

        Increments the reference counter of this object


        """
        return _FEmTool.Handle_FEmTool_HAssemblyTable_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_FEmTool_HAssemblyTable self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.Handle_FEmTool_HAssemblyTable_DecrementRefCounter(self, *args)

Handle_FEmTool_HAssemblyTable_swigregister = _FEmTool.Handle_FEmTool_HAssemblyTable_swigregister
Handle_FEmTool_HAssemblyTable_swigregister(Handle_FEmTool_HAssemblyTable)

def Handle_FEmTool_HAssemblyTable_DownCast(thing):
    return _FEmTool.Handle_FEmTool_HAssemblyTable_DownCast(thing)
Handle_FEmTool_HAssemblyTable_DownCast = _FEmTool.Handle_FEmTool_HAssemblyTable_DownCast

class Handle_FEmTool_Curve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_FEmTool_Curve self)

        Nullify the handle


        """
        return _FEmTool.Handle_FEmTool_Curve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_FEmTool_Curve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _FEmTool.Handle_FEmTool_Curve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_FEmTool_Curve self, FEmTool_Curve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _FEmTool.Handle_FEmTool_Curve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_FEmTool_Curve self, Handle_FEmTool_Curve theHandle) -> Handle_FEmTool_Curve
        assign(Handle_FEmTool_Curve self, FEmTool_Curve thePtr) -> Handle_FEmTool_Curve
        assign(Handle_FEmTool_Curve self, Handle_FEmTool_Curve theHandle) -> Handle_FEmTool_Curve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _FEmTool.Handle_FEmTool_Curve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_FEmTool_Curve self) -> FEmTool_Curve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _FEmTool.Handle_FEmTool_Curve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_FEmTool_Curve self) -> FEmTool_Curve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _FEmTool.Handle_FEmTool_Curve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_FEmTool_Curve self) -> FEmTool_Curve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _FEmTool.Handle_FEmTool_Curve___ref__(self, *args)


    def __hash__(self):
        return _FEmTool.Handle_FEmTool_Curve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _FEmTool.Handle_FEmTool_Curve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _FEmTool.new_Handle_FEmTool_Curve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_FEmTool.Handle_FEmTool_Curve_DownCast)
    __swig_destroy__ = _FEmTool.delete_Handle_FEmTool_Curve

    def Knots(self, *args):
        """
        Knots(Handle_FEmTool_Curve self) -> NCollection_Array1_Standard_Real

        :rtype: OCC.wrapper.TColStd.TColStd_Array1OfReal

        """
        return _FEmTool.Handle_FEmTool_Curve_Knots(self, *args)


    def SetElement(self, *args):
        """
        SetElement(Handle_FEmTool_Curve self, Standard_Integer const IndexOfElement, NCollection_Array2_Standard_Real Coeffs)

        :type IndexOfElement: int
        :type Coeffs: OCC.wrapper.TColStd.TColStd_Array2OfReal

        """
        return _FEmTool.Handle_FEmTool_Curve_SetElement(self, *args)


    def D0(self, *args):
        """
        D0(Handle_FEmTool_Curve self, Standard_Real const U, NCollection_Array1_Standard_Real Pnt)

        :type U: float
        :type Pnt: OCC.wrapper.TColStd.TColStd_Array1OfReal

        """
        return _FEmTool.Handle_FEmTool_Curve_D0(self, *args)


    def D1(self, *args):
        """
        D1(Handle_FEmTool_Curve self, Standard_Real const U, NCollection_Array1_Standard_Real Vec)

        :type U: float
        :type Vec: OCC.wrapper.TColStd.TColStd_Array1OfReal

        """
        return _FEmTool.Handle_FEmTool_Curve_D1(self, *args)


    def D2(self, *args):
        """
        D2(Handle_FEmTool_Curve self, Standard_Real const U, NCollection_Array1_Standard_Real Vec)

        :type U: float
        :type Vec: OCC.wrapper.TColStd.TColStd_Array1OfReal

        """
        return _FEmTool.Handle_FEmTool_Curve_D2(self, *args)


    def Length(self, *args):
        """
        Length(Handle_FEmTool_Curve self, Standard_Real const FirstU, Standard_Real const LastU)

        :type FirstU: float
        :type LastU: float
        :type Length: float

        """
        return _FEmTool.Handle_FEmTool_Curve_Length(self, *args)


    def GetElement(self, *args):
        """
        GetElement(Handle_FEmTool_Curve self, Standard_Integer const IndexOfElement, NCollection_Array2_Standard_Real Coeffs)

        :type IndexOfElement: int
        :type Coeffs: OCC.wrapper.TColStd.TColStd_Array2OfReal

        """
        return _FEmTool.Handle_FEmTool_Curve_GetElement(self, *args)


    def GetPolynom(self, *args):
        """
        GetPolynom(Handle_FEmTool_Curve self, NCollection_Array1_Standard_Real Coeffs)

        returns  coefficients  of  all  elements  in  canonical  base.

        :type Coeffs: OCC.wrapper.TColStd.TColStd_Array1OfReal

        """
        return _FEmTool.Handle_FEmTool_Curve_GetPolynom(self, *args)


    def NbElements(self, *args):
        """
        NbElements(Handle_FEmTool_Curve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.Handle_FEmTool_Curve_NbElements(self, *args)


    def Dimension(self, *args):
        """
        Dimension(Handle_FEmTool_Curve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.Handle_FEmTool_Curve_Dimension(self, *args)


    def Base(self, *args):
        """
        Base(Handle_FEmTool_Curve self) -> Handle_PLib_Base

        :rtype: OCC.wrapper.PLib.Handle_PLib_Base

        """
        return _FEmTool.Handle_FEmTool_Curve_Base(self, *args)


    def Degree(self, *args):
        """
        Degree(Handle_FEmTool_Curve self, Standard_Integer const IndexOfElement) -> Standard_Integer

        :type IndexOfElement: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.Handle_FEmTool_Curve_Degree(self, *args)


    def SetDegree(self, *args):
        """
        SetDegree(Handle_FEmTool_Curve self, Standard_Integer const IndexOfElement, Standard_Integer const Degree)

        :type IndexOfElement: int
        :type Degree: int

        """
        return _FEmTool.Handle_FEmTool_Curve_SetDegree(self, *args)


    def ReduceDegree(self, *args):
        """
        ReduceDegree(Handle_FEmTool_Curve self, Standard_Integer const IndexOfElement, Standard_Real const Tol)

        :type IndexOfElement: int
        :type Tol: float
        :type NewDegree: int
        :type MaxError: float

        """
        return _FEmTool.Handle_FEmTool_Curve_ReduceDegree(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_FEmTool_Curve self) -> char const *

        :rtype: const char *

        """
        return _FEmTool.Handle_FEmTool_Curve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _FEmTool.Handle_FEmTool_Curve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _FEmTool.Handle_FEmTool_Curve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_FEmTool_Curve self)

        Memory deallocator for transient classes


        """
        return _FEmTool.Handle_FEmTool_Curve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_FEmTool_Curve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_FEmTool_Curve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _FEmTool.Handle_FEmTool_Curve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_FEmTool_Curve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_FEmTool_Curve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _FEmTool.Handle_FEmTool_Curve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_FEmTool_Curve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _FEmTool.Handle_FEmTool_Curve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_FEmTool_Curve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.Handle_FEmTool_Curve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_FEmTool_Curve self)

        Increments the reference counter of this object


        """
        return _FEmTool.Handle_FEmTool_Curve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_FEmTool_Curve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.Handle_FEmTool_Curve_DecrementRefCounter(self, *args)

Handle_FEmTool_Curve_swigregister = _FEmTool.Handle_FEmTool_Curve_swigregister
Handle_FEmTool_Curve_swigregister(Handle_FEmTool_Curve)

def Handle_FEmTool_Curve_DownCast(thing):
    return _FEmTool.Handle_FEmTool_Curve_DownCast(thing)
Handle_FEmTool_Curve_DownCast = _FEmTool.Handle_FEmTool_Curve_DownCast

class NCollection_Array2_Handle_TColStd_HArray1OfInteger(object):
    """
    Purpose:   The class Array2 represents bi-dimensional arrays 
    of fixed size known at run time. 
    The ranges of indices are user defined.

    Warning:   Programs clients of such class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.LowerRow(); i <= A.UpperRow(); i++)
    for (j = A.LowerCol(); j <= A.UpperCol(); j++)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Purpose:   The class Array2 represents bi-dimensional arrays 
        of fixed size known at run time. 
        The ranges of indices are user defined.

        Warning:   Programs clients of such class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.LowerRow(); i <= A.UpperRow(); i++)
        for (j = A.LowerCol(); j <= A.UpperCol(); j++)
        """
        this = _FEmTool.new_NCollection_Array2_Handle_TColStd_HArray1OfInteger(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array2_Handle_TColStd_HArray1OfInteger self, Handle_TColStd_HArray1OfInteger theValue)

        Initialise the values

        :type theValue: const TheItemType &

        """
        return _FEmTool.NCollection_Array2_Handle_TColStd_HArray1OfInteger_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array2_Handle_TColStd_HArray1OfInteger self) -> Standard_Integer

        Size (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.NCollection_Array2_Handle_TColStd_HArray1OfInteger_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array2_Handle_TColStd_HArray1OfInteger self) -> Standard_Integer

        Length (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.NCollection_Array2_Handle_TColStd_HArray1OfInteger_Length(self, *args)


    def RowLength(self, *args):
        """
        RowLength(NCollection_Array2_Handle_TColStd_HArray1OfInteger self) -> Standard_Integer

        Returns length of the row, i.e. number of columns

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.NCollection_Array2_Handle_TColStd_HArray1OfInteger_RowLength(self, *args)


    def ColLength(self, *args):
        """
        ColLength(NCollection_Array2_Handle_TColStd_HArray1OfInteger self) -> Standard_Integer

        Returns length of the column, i.e. number of rows

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.NCollection_Array2_Handle_TColStd_HArray1OfInteger_ColLength(self, *args)


    def LowerRow(self, *args):
        """
        LowerRow(NCollection_Array2_Handle_TColStd_HArray1OfInteger self) -> Standard_Integer

        LowerRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.NCollection_Array2_Handle_TColStd_HArray1OfInteger_LowerRow(self, *args)


    def UpperRow(self, *args):
        """
        UpperRow(NCollection_Array2_Handle_TColStd_HArray1OfInteger self) -> Standard_Integer

        UpperRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.NCollection_Array2_Handle_TColStd_HArray1OfInteger_UpperRow(self, *args)


    def LowerCol(self, *args):
        """
        LowerCol(NCollection_Array2_Handle_TColStd_HArray1OfInteger self) -> Standard_Integer

        LowerCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.NCollection_Array2_Handle_TColStd_HArray1OfInteger_LowerCol(self, *args)


    def UpperCol(self, *args):
        """
        UpperCol(NCollection_Array2_Handle_TColStd_HArray1OfInteger self) -> Standard_Integer

        UpperCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.NCollection_Array2_Handle_TColStd_HArray1OfInteger_UpperCol(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array2_Handle_TColStd_HArray1OfInteger self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _FEmTool.NCollection_Array2_Handle_TColStd_HArray1OfInteger_IsDeletable(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array2_Handle_TColStd_HArray1OfInteger self, NCollection_Array2_Handle_TColStd_HArray1OfInteger theOther) -> NCollection_Array2_Handle_TColStd_HArray1OfInteger

        Assignment

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _FEmTool.NCollection_Array2_Handle_TColStd_HArray1OfInteger_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array2_Handle_TColStd_HArray1OfInteger self, NCollection_Array2_Handle_TColStd_HArray1OfInteger theOther) -> NCollection_Array2_Handle_TColStd_HArray1OfInteger

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _FEmTool.NCollection_Array2_Handle_TColStd_HArray1OfInteger_assign(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _FEmTool.NCollection_Array2_Handle_TColStd_HArray1OfInteger_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array2_Handle_TColStd_HArray1OfInteger self, Standard_Integer const theRow, Standard_Integer const theCol) -> Handle_TColStd_HArray1OfInteger

        Variable value access

        :type theRow: int
        :type theCol: int
        :rtype: TheItemType &

        """
        return _FEmTool.NCollection_Array2_Handle_TColStd_HArray1OfInteger_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to ChangeValue

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _FEmTool.NCollection_Array2_Handle_TColStd_HArray1OfInteger___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array2_Handle_TColStd_HArray1OfInteger self, Standard_Integer const theRow, Standard_Integer const theCol, Handle_TColStd_HArray1OfInteger theItem)

        SetValue

        :type theRow: int
        :type theCol: int
        :type theItem: const TheItemType &

        """
        return _FEmTool.NCollection_Array2_Handle_TColStd_HArray1OfInteger_SetValue(self, *args)

    __swig_destroy__ = _FEmTool.delete_NCollection_Array2_Handle_TColStd_HArray1OfInteger
NCollection_Array2_Handle_TColStd_HArray1OfInteger_swigregister = _FEmTool.NCollection_Array2_Handle_TColStd_HArray1OfInteger_swigregister
NCollection_Array2_Handle_TColStd_HArray1OfInteger_swigregister(NCollection_Array2_Handle_TColStd_HArray1OfInteger)


try:
	FEmTool_AssemblyTable = NCollection_Array2_Handle_TColStd_HArray1OfInteger
except NameError:
	pass # does not exist, probably ignored

class NCollection_Sequence_FEmTool_ListOfVectors(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_FEmTool_ListOfVectors self) -> NCollection_Sequence< FEmTool_ListOfVectors >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _FEmTool.NCollection_Sequence_FEmTool_ListOfVectors_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_FEmTool_ListOfVectors self) -> NCollection_Sequence< FEmTool_ListOfVectors >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _FEmTool.NCollection_Sequence_FEmTool_ListOfVectors_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_FEmTool_ListOfVectors self) -> NCollection_Sequence< FEmTool_ListOfVectors >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _FEmTool.NCollection_Sequence_FEmTool_ListOfVectors_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_FEmTool_ListOfVectors self) -> NCollection_Sequence< FEmTool_ListOfVectors >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _FEmTool.NCollection_Sequence_FEmTool_ListOfVectors_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _FEmTool.new_NCollection_Sequence_FEmTool_ListOfVectors(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_FEmTool_ListOfVectors self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.NCollection_Sequence_FEmTool_ListOfVectors_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_FEmTool_ListOfVectors self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.NCollection_Sequence_FEmTool_ListOfVectors_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_FEmTool_ListOfVectors self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.NCollection_Sequence_FEmTool_ListOfVectors_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_FEmTool_ListOfVectors self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.NCollection_Sequence_FEmTool_ListOfVectors_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_FEmTool_ListOfVectors self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _FEmTool.NCollection_Sequence_FEmTool_ListOfVectors_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_FEmTool_ListOfVectors self)

        Reverse sequence


        """
        return _FEmTool.NCollection_Sequence_FEmTool_ListOfVectors_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_FEmTool_ListOfVectors self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _FEmTool.NCollection_Sequence_FEmTool_ListOfVectors_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _FEmTool.NCollection_Sequence_FEmTool_ListOfVectors_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_FEmTool_ListOfVectors self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _FEmTool.NCollection_Sequence_FEmTool_ListOfVectors_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_FEmTool_ListOfVectors self, NCollection_Sequence_FEmTool_ListOfVectors theOther) -> NCollection_Sequence_FEmTool_ListOfVectors

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _FEmTool.NCollection_Sequence_FEmTool_ListOfVectors_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_FEmTool_ListOfVectors self, NCollection_Sequence_FEmTool_ListOfVectors theOther) -> NCollection_Sequence_FEmTool_ListOfVectors

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _FEmTool.NCollection_Sequence_FEmTool_ListOfVectors_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_FEmTool_ListOfVectors self, NCollection_Sequence< FEmTool_ListOfVectors >::Iterator & thePosition)
        Remove(NCollection_Sequence_FEmTool_ListOfVectors self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_FEmTool_ListOfVectors self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _FEmTool.NCollection_Sequence_FEmTool_ListOfVectors_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_FEmTool_ListOfVectors self, NCollection_List_Handle_TColStd_HArray1OfReal theItem)
        Append(NCollection_Sequence_FEmTool_ListOfVectors self, NCollection_Sequence_FEmTool_ListOfVectors theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _FEmTool.NCollection_Sequence_FEmTool_ListOfVectors_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_FEmTool_ListOfVectors self, NCollection_List_Handle_TColStd_HArray1OfReal theItem)
        Prepend(NCollection_Sequence_FEmTool_ListOfVectors self, NCollection_Sequence_FEmTool_ListOfVectors theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _FEmTool.NCollection_Sequence_FEmTool_ListOfVectors_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_FEmTool_ListOfVectors self, Standard_Integer const theIndex, NCollection_List_Handle_TColStd_HArray1OfReal theItem)
        InsertBefore(NCollection_Sequence_FEmTool_ListOfVectors self, Standard_Integer const theIndex, NCollection_Sequence_FEmTool_ListOfVectors theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _FEmTool.NCollection_Sequence_FEmTool_ListOfVectors_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_FEmTool_ListOfVectors self, NCollection_Sequence< FEmTool_ListOfVectors >::Iterator & thePosition, NCollection_List_Handle_TColStd_HArray1OfReal theItem)
        InsertAfter(NCollection_Sequence_FEmTool_ListOfVectors self, Standard_Integer const theIndex, NCollection_Sequence_FEmTool_ListOfVectors theSeq)
        InsertAfter(NCollection_Sequence_FEmTool_ListOfVectors self, Standard_Integer const theIndex, NCollection_List_Handle_TColStd_HArray1OfReal theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _FEmTool.NCollection_Sequence_FEmTool_ListOfVectors_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_FEmTool_ListOfVectors self, Standard_Integer const theIndex, NCollection_Sequence_FEmTool_ListOfVectors theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _FEmTool.NCollection_Sequence_FEmTool_ListOfVectors_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _FEmTool.NCollection_Sequence_FEmTool_ListOfVectors_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_FEmTool_ListOfVectors self) -> NCollection_List_Handle_TColStd_HArray1OfReal

        First item access

        :rtype: TheItemType &

        """
        return _FEmTool.NCollection_Sequence_FEmTool_ListOfVectors_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _FEmTool.NCollection_Sequence_FEmTool_ListOfVectors_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_FEmTool_ListOfVectors self) -> NCollection_List_Handle_TColStd_HArray1OfReal

        Last item access

        :rtype: TheItemType &

        """
        return _FEmTool.NCollection_Sequence_FEmTool_ListOfVectors_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _FEmTool.NCollection_Sequence_FEmTool_ListOfVectors_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_FEmTool_ListOfVectors self, Standard_Integer const theIndex) -> NCollection_List_Handle_TColStd_HArray1OfReal

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _FEmTool.NCollection_Sequence_FEmTool_ListOfVectors_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _FEmTool.NCollection_Sequence_FEmTool_ListOfVectors___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_FEmTool_ListOfVectors self, Standard_Integer const theIndex, NCollection_List_Handle_TColStd_HArray1OfReal theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _FEmTool.NCollection_Sequence_FEmTool_ListOfVectors_SetValue(self, *args)


    def __iter__(self):
        return _FEmTool.NCollection_Sequence_FEmTool_ListOfVectors___iter__(self)
    __swig_destroy__ = _FEmTool.delete_NCollection_Sequence_FEmTool_ListOfVectors
NCollection_Sequence_FEmTool_ListOfVectors_swigregister = _FEmTool.NCollection_Sequence_FEmTool_ListOfVectors_swigregister
NCollection_Sequence_FEmTool_ListOfVectors_swigregister(NCollection_Sequence_FEmTool_ListOfVectors)

def NCollection_Sequence_FEmTool_ListOfVectors_delNode(*args):
    """
    NCollection_Sequence_FEmTool_ListOfVectors_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _FEmTool.NCollection_Sequence_FEmTool_ListOfVectors_delNode(*args)

class NCollection_Sequence_FEmTool_ListOfVectors_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _FEmTool.new_NCollection_Sequence_FEmTool_ListOfVectors_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _FEmTool.delete_NCollection_Sequence_FEmTool_ListOfVectors_IteratorHelper

    def __next__(self):
        return _FEmTool.NCollection_Sequence_FEmTool_ListOfVectors_IteratorHelper___next__(self)
NCollection_Sequence_FEmTool_ListOfVectors_IteratorHelper_swigregister = _FEmTool.NCollection_Sequence_FEmTool_ListOfVectors_IteratorHelper_swigregister
NCollection_Sequence_FEmTool_ListOfVectors_IteratorHelper_swigregister(NCollection_Sequence_FEmTool_ListOfVectors_IteratorHelper)


try:
	FEmTool_SeqOfLinConstr = NCollection_Sequence_FEmTool_ListOfVectors
except NameError:
	pass # does not exist, probably ignored

class Handle_FEmTool_LinearFlexion(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_FEmTool_LinearFlexion self)

        Nullify the handle


        """
        return _FEmTool.Handle_FEmTool_LinearFlexion_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_FEmTool_LinearFlexion self) -> bool

        Check for being null

        :rtype: bool

        """
        return _FEmTool.Handle_FEmTool_LinearFlexion_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_FEmTool_LinearFlexion self, FEmTool_LinearFlexion thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _FEmTool.Handle_FEmTool_LinearFlexion_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_FEmTool_LinearFlexion self, Handle_FEmTool_LinearFlexion theHandle) -> Handle_FEmTool_LinearFlexion
        assign(Handle_FEmTool_LinearFlexion self, FEmTool_LinearFlexion thePtr) -> Handle_FEmTool_LinearFlexion
        assign(Handle_FEmTool_LinearFlexion self, Handle_FEmTool_LinearFlexion theHandle) -> Handle_FEmTool_LinearFlexion

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _FEmTool.Handle_FEmTool_LinearFlexion_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_FEmTool_LinearFlexion self) -> FEmTool_LinearFlexion

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _FEmTool.Handle_FEmTool_LinearFlexion_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_FEmTool_LinearFlexion self) -> FEmTool_LinearFlexion

        Member access operator (note non-const)

        :rtype: T *

        """
        return _FEmTool.Handle_FEmTool_LinearFlexion___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_FEmTool_LinearFlexion self) -> FEmTool_LinearFlexion

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _FEmTool.Handle_FEmTool_LinearFlexion___ref__(self, *args)


    def __hash__(self):
        return _FEmTool.Handle_FEmTool_LinearFlexion___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _FEmTool.Handle_FEmTool_LinearFlexion___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _FEmTool.new_Handle_FEmTool_LinearFlexion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_FEmTool.Handle_FEmTool_LinearFlexion_DownCast)
    __swig_destroy__ = _FEmTool.delete_Handle_FEmTool_LinearFlexion

    def DependenceTable(self, *args):
        """
        DependenceTable(Handle_FEmTool_LinearFlexion self) -> Handle_TColStd_HArray2OfInteger

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfInteger

        """
        return _FEmTool.Handle_FEmTool_LinearFlexion_DependenceTable(self, *args)


    def Value(self, *args):
        """
        Value(Handle_FEmTool_LinearFlexion self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _FEmTool.Handle_FEmTool_LinearFlexion_Value(self, *args)


    def Hessian(self, *args):
        """
        Hessian(Handle_FEmTool_LinearFlexion self, Standard_Integer const Dimension1, Standard_Integer const Dimension2, math_Matrix H)

        :type Dimension1: int
        :type Dimension2: int
        :type H: OCC.wrapper.math.math_Matrix

        """
        return _FEmTool.Handle_FEmTool_LinearFlexion_Hessian(self, *args)


    def Gradient(self, *args):
        """
        Gradient(Handle_FEmTool_LinearFlexion self, Standard_Integer const Dimension, math_Vector G)

        :type Dimension: int
        :type G: OCC.wrapper.math.math_Vector

        """
        return _FEmTool.Handle_FEmTool_LinearFlexion_Gradient(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_FEmTool_LinearFlexion self) -> char const *

        :rtype: const char *

        """
        return _FEmTool.Handle_FEmTool_LinearFlexion_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _FEmTool.Handle_FEmTool_LinearFlexion_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _FEmTool.Handle_FEmTool_LinearFlexion_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Set(self, *args):
        """
        Set(Handle_FEmTool_LinearFlexion self, Handle_TColStd_HArray2OfReal Coeff)
        Set(Handle_FEmTool_LinearFlexion self, Standard_Real const FirstKnot, Standard_Real const LastKnot)

        Set the definition interval of the Element

        :type FirstKnot: float
        :type LastKnot: float

        """
        return _FEmTool.Handle_FEmTool_LinearFlexion_Set(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_FEmTool_LinearFlexion self)

        Memory deallocator for transient classes


        """
        return _FEmTool.Handle_FEmTool_LinearFlexion_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_FEmTool_LinearFlexion self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_FEmTool_LinearFlexion self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _FEmTool.Handle_FEmTool_LinearFlexion_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_FEmTool_LinearFlexion self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_FEmTool_LinearFlexion self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _FEmTool.Handle_FEmTool_LinearFlexion_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_FEmTool_LinearFlexion self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _FEmTool.Handle_FEmTool_LinearFlexion_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_FEmTool_LinearFlexion self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.Handle_FEmTool_LinearFlexion_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_FEmTool_LinearFlexion self)

        Increments the reference counter of this object


        """
        return _FEmTool.Handle_FEmTool_LinearFlexion_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_FEmTool_LinearFlexion self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FEmTool.Handle_FEmTool_LinearFlexion_DecrementRefCounter(self, *args)

Handle_FEmTool_LinearFlexion_swigregister = _FEmTool.Handle_FEmTool_LinearFlexion_swigregister
Handle_FEmTool_LinearFlexion_swigregister(Handle_FEmTool_LinearFlexion)

def Handle_FEmTool_LinearFlexion_DownCast(thing):
    return _FEmTool.Handle_FEmTool_LinearFlexion_DownCast(thing)
Handle_FEmTool_LinearFlexion_DownCast = _FEmTool.Handle_FEmTool_LinearFlexion_DownCast



