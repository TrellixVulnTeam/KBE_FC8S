# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_DDF')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_DDF')
    _DDF = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_DDF', [dirname(__file__)])
        except ImportError:
            import _DDF
            return _DDF
        try:
            _mod = imp.load_module('_DDF', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _DDF = swig_import_helper()
    del swig_import_helper
else:
    import _DDF
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _DDF.delete_SwigPyIterator

    def value(self):
        return _DDF.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _DDF.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _DDF.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _DDF.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _DDF.SwigPyIterator_equal(self, x)

    def copy(self):
        return _DDF.SwigPyIterator_copy(self)

    def next(self):
        return _DDF.SwigPyIterator_next(self)

    def __next__(self):
        return _DDF.SwigPyIterator___next__(self)

    def previous(self):
        return _DDF.SwigPyIterator_previous(self)

    def advance(self, n):
        return _DDF.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _DDF.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _DDF.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _DDF.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _DDF.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _DDF.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _DDF.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _DDF.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _DDF.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_DDF.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _DDF.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _DDF.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DDF.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _DDF.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _DDF.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _DDF.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _DDF.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_DDF.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _DDF.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _DDF.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DDF.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _DDF.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _DDF.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _DDF.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _DDF.ptr_to_number(item)
ptr_to_number = _DDF.ptr_to_number

def HashCode(*args):
    return _DDF.HashCode(*args)
HashCode = _DDF.HashCode

def ptr_equal(a, b):
    return _DDF.ptr_equal(a, b)
ptr_equal = _DDF.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Draw
else:
    import Draw
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Storage
else:
    import Storage
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDF
else:
    import TDF
del _swig_python_version_info
class DDF_Browser(Draw.Draw_Drawable3D):
    """Browses a data framework from TDF."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_DDF_Browser
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_DDF_Browser(self) 
            return h


    def __init__(self, *args):
        """
        __init__(DDF_Browser self, Handle_TDF_Data aDF) -> DDF_Browser

        :type aDF: OCC.wrapper.TDF.Handle_TDF_Data

        """
        this = _DDF.new_DDF_Browser(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def DrawOn(self, *args):
        """
        DrawOn(DDF_Browser self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DDF.DDF_Browser_DrawOn(self, *args)


    def Copy(self, *args):
        """
        Copy(DDF_Browser self) -> Handle_Draw_Drawable3D

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DDF.DDF_Browser_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(DDF_Browser self, Standard_OStream & S)

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DDF.DDF_Browser_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(DDF_Browser self, Draw_Interpretor I)

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DDF.DDF_Browser_Whatis(self, *args)


    def Data(self, *args):
        """
        Data(DDF_Browser self, Handle_TDF_Data aDF)
        Data(DDF_Browser self) -> Handle_TDF_Data

        :rtype: OCC.wrapper.TDF.Handle_TDF_Data

        """
        return _DDF.DDF_Browser_Data(self, *args)


    def OpenRoot(self, *args):
        """
        OpenRoot(DDF_Browser self) -> TCollection_AsciiString

        Returns a string composed with the sub-label
        entries of <myDF>.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _DDF.DDF_Browser_OpenRoot(self, *args)


    def OpenLabel(self, *args):
        """
        OpenLabel(DDF_Browser self, TDF_Label aLab) -> TCollection_AsciiString

        Returns a string composed with the sub-label
        entries of <aLab>.

        :type aLab: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _DDF.DDF_Browser_OpenLabel(self, *args)


    def OpenAttributeList(self, *args):
        """
        OpenAttributeList(DDF_Browser self, TDF_Label aLab) -> TCollection_AsciiString

        Returns a string composed with the attribute index
        (found in <myAttMap>) of <aLab>.

        :type aLab: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _DDF.DDF_Browser_OpenAttributeList(self, *args)


    def OpenAttribute(self, *args):
        """
        OpenAttribute(DDF_Browser self, Standard_Integer const anIndex=0) -> TCollection_AsciiString

        Returns a string composed with the list of
        referenced attribute index of the attribute
        <anIndex>. For exemple, it is usefull for
        TDataStd_Group. It uses a mecanism based on a
        DDF_AttributeBrowser.

        :type anIndex: int
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _DDF.DDF_Browser_OpenAttribute(self, *args)


    def Information(self, *args):
        """
        Information(DDF_Browser self, TDF_Label aLab) -> TCollection_AsciiString
        Information(DDF_Browser self, Standard_Integer const anIndex=0) -> TCollection_AsciiString

        Returns information about attribute <anIndex> to
        be displayed in information window.

        :type anIndex: int
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _DDF.DDF_Browser_Information(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _DDF.DDF_Browser_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _DDF.DDF_Browser_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DDF.DDF_Browser_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _DDF.delete_DDF_Browser
DDF_Browser_swigregister = _DDF.DDF_Browser_swigregister
DDF_Browser_swigregister(DDF_Browser)

def DDF_Browser_get_type_name(*args):
    """
    DDF_Browser_get_type_name() -> char const *

    :rtype: const char *

    """
    return _DDF.DDF_Browser_get_type_name(*args)

def DDF_Browser_get_type_descriptor(*args):
    """
    DDF_Browser_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _DDF.DDF_Browser_get_type_descriptor(*args)

class DDF_Transaction(Standard.Standard_Transient):
    """This class encapsulates TDF_Transaction."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_DDF_Transaction
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_DDF_Transaction(self) 
            return h


    def __init__(self, *args):
        """
        __init__(DDF_Transaction self) -> DDF_Transaction
        __init__(DDF_Transaction self, Handle_TDF_Data aDF) -> DDF_Transaction

        Creates a transaction context on <aDF>, ready to
        be opened.

        :type aDF: OCC.wrapper.TDF.Handle_TDF_Data

        """
        this = _DDF.new_DDF_Transaction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Open(self, *args):
        """
        Open(DDF_Transaction self) -> Standard_Integer

        If not yet done, opens a new transaction on
        <myDF>. Returns the index of the just opened
        transaction.

        It raises DomainError if the transaction is
        already open, and NullObject if there is no
        current Data framework.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DDF.DDF_Transaction_Open(self, *args)


    def Commit(self, *args):
        """
        Commit(DDF_Transaction self, Standard_Boolean const withDelta) -> Handle_TDF_Delta

        Commits the transactions until AND including the
        current opened one.

        :type withDelta: bool
        :rtype: OCC.wrapper.TDF.Handle_TDF_Delta

        """
        return _DDF.DDF_Transaction_Commit(self, *args)


    def Abort(self, *args):
        """
        Abort(DDF_Transaction self)

        Aborts the transactions until AND including the
        current opened one.


        """
        return _DDF.DDF_Transaction_Abort(self, *args)


    def Data(self, *args):
        """
        Data(DDF_Transaction self) -> Handle_TDF_Data

        Returns the Data from TDF.

        :rtype: OCC.wrapper.TDF.Handle_TDF_Data

        """
        return _DDF.DDF_Transaction_Data(self, *args)


    def Transaction(self, *args):
        """
        Transaction(DDF_Transaction self) -> Standard_Integer

        Returns the number of the transaction opened by <me>.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DDF.DDF_Transaction_Transaction(self, *args)


    def IsOpen(self, *args):
        """
        IsOpen(DDF_Transaction self) -> Standard_Boolean

        Returns true if the transaction is open.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDF.DDF_Transaction_IsOpen(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _DDF.DDF_Transaction_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _DDF.DDF_Transaction_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DDF.DDF_Transaction_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _DDF.delete_DDF_Transaction
DDF_Transaction_swigregister = _DDF.DDF_Transaction_swigregister
DDF_Transaction_swigregister(DDF_Transaction)

def DDF_Transaction_get_type_name(*args):
    """
    DDF_Transaction_get_type_name() -> char const *

    :rtype: const char *

    """
    return _DDF.DDF_Transaction_get_type_name(*args)

def DDF_Transaction_get_type_descriptor(*args):
    """
    DDF_Transaction_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _DDF.DDF_Transaction_get_type_descriptor(*args)

class DDF_Data(Draw.Draw_Drawable3D):
    """Encapsulates a data framework from TDF in a drawable object"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_DDF_Data
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_DDF_Data(self) 
            return h


    def __init__(self, *args):
        """
        __init__(DDF_Data self, Handle_TDF_Data aDF) -> DDF_Data

        :type aDF: OCC.wrapper.TDF.Handle_TDF_Data

        """
        this = _DDF.new_DDF_Data(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def DrawOn(self, *args):
        """
        DrawOn(DDF_Data self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DDF.DDF_Data_DrawOn(self, *args)


    def Copy(self, *args):
        """
        Copy(DDF_Data self) -> Handle_Draw_Drawable3D

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DDF.DDF_Data_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(DDF_Data self, Standard_OStream & S)

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DDF.DDF_Data_Dump(self, *args)


    def DataFramework(self, *args):
        """
        DataFramework(DDF_Data self, Handle_TDF_Data aDF)
        DataFramework(DDF_Data self) -> Handle_TDF_Data

        :rtype: OCC.wrapper.TDF.Handle_TDF_Data

        """
        return _DDF.DDF_Data_DataFramework(self, *args)


    def Whatis(self, *args):
        """
        Whatis(DDF_Data self, Draw_Interpretor I)

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DDF.DDF_Data_Whatis(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _DDF.DDF_Data_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _DDF.DDF_Data_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DDF.DDF_Data_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _DDF.delete_DDF_Data
DDF_Data_swigregister = _DDF.DDF_Data_swigregister
DDF_Data_swigregister(DDF_Data)

def DDF_Data_get_type_name(*args):
    """
    DDF_Data_get_type_name() -> char const *

    :rtype: const char *

    """
    return _DDF.DDF_Data_get_type_name(*args)

def DDF_Data_get_type_descriptor(*args):
    """
    DDF_Data_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _DDF.DDF_Data_get_type_descriptor(*args)

class Handle_DDF_Browser(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_DDF_Browser self)

        Nullify the handle


        """
        return _DDF.Handle_DDF_Browser_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_DDF_Browser self) -> bool

        Check for being null

        :rtype: bool

        """
        return _DDF.Handle_DDF_Browser_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_DDF_Browser self, DDF_Browser thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _DDF.Handle_DDF_Browser_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_DDF_Browser self, Handle_DDF_Browser theHandle) -> Handle_DDF_Browser
        assign(Handle_DDF_Browser self, DDF_Browser thePtr) -> Handle_DDF_Browser
        assign(Handle_DDF_Browser self, Handle_DDF_Browser theHandle) -> Handle_DDF_Browser

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _DDF.Handle_DDF_Browser_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_DDF_Browser self) -> DDF_Browser

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _DDF.Handle_DDF_Browser_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_DDF_Browser self) -> DDF_Browser

        Member access operator (note non-const)

        :rtype: T *

        """
        return _DDF.Handle_DDF_Browser___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_DDF_Browser self) -> DDF_Browser

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _DDF.Handle_DDF_Browser___ref__(self, *args)


    def __hash__(self):
        return _DDF.Handle_DDF_Browser___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _DDF.Handle_DDF_Browser___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _DDF.new_Handle_DDF_Browser(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_DDF.Handle_DDF_Browser_DownCast)
    __swig_destroy__ = _DDF.delete_Handle_DDF_Browser

    def DrawOn(self, *args):
        """
        DrawOn(Handle_DDF_Browser self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DDF.Handle_DDF_Browser_DrawOn(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_DDF_Browser self) -> Handle_Draw_Drawable3D

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DDF.Handle_DDF_Browser_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_DDF_Browser self, Standard_OStream & S)

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DDF.Handle_DDF_Browser_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_DDF_Browser self, Draw_Interpretor I)

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DDF.Handle_DDF_Browser_Whatis(self, *args)


    def Data(self, *args):
        """
        Data(Handle_DDF_Browser self, Handle_TDF_Data aDF)
        Data(Handle_DDF_Browser self) -> Handle_TDF_Data

        :rtype: OCC.wrapper.TDF.Handle_TDF_Data

        """
        return _DDF.Handle_DDF_Browser_Data(self, *args)


    def OpenRoot(self, *args):
        """
        OpenRoot(Handle_DDF_Browser self) -> TCollection_AsciiString

        Returns a string composed with the sub-label
        entries of <myDF>.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _DDF.Handle_DDF_Browser_OpenRoot(self, *args)


    def OpenLabel(self, *args):
        """
        OpenLabel(Handle_DDF_Browser self, TDF_Label aLab) -> TCollection_AsciiString

        Returns a string composed with the sub-label
        entries of <aLab>.

        :type aLab: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _DDF.Handle_DDF_Browser_OpenLabel(self, *args)


    def OpenAttributeList(self, *args):
        """
        OpenAttributeList(Handle_DDF_Browser self, TDF_Label aLab) -> TCollection_AsciiString

        Returns a string composed with the attribute index
        (found in <myAttMap>) of <aLab>.

        :type aLab: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _DDF.Handle_DDF_Browser_OpenAttributeList(self, *args)


    def OpenAttribute(self, *args):
        """
        OpenAttribute(Handle_DDF_Browser self, Standard_Integer const anIndex=0) -> TCollection_AsciiString

        Returns a string composed with the list of
        referenced attribute index of the attribute
        <anIndex>. For exemple, it is usefull for
        TDataStd_Group. It uses a mecanism based on a
        DDF_AttributeBrowser.

        :type anIndex: int
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _DDF.Handle_DDF_Browser_OpenAttribute(self, *args)


    def Information(self, *args):
        """
        Information(Handle_DDF_Browser self, TDF_Label aLab) -> TCollection_AsciiString
        Information(Handle_DDF_Browser self, Standard_Integer const anIndex=0) -> TCollection_AsciiString

        Returns information about attribute <anIndex> to
        be displayed in information window.

        :type anIndex: int
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _DDF.Handle_DDF_Browser_Information(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_DDF_Browser self) -> char const *

        :rtype: const char *

        """
        return _DDF.Handle_DDF_Browser_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DDF.Handle_DDF_Browser_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DDF.Handle_DDF_Browser_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PickReject(self, *args):
        """
        PickReject(Handle_DDF_Browser self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDF.Handle_DDF_Browser_PickReject(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_DDF_Browser self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDF.Handle_DDF_Browser_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_DDF_Browser self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DDF.Handle_DDF_Browser_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_DDF_Browser self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DDF.Handle_DDF_Browser_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_DDF_Browser self) -> Standard_Boolean
        Visible(Handle_DDF_Browser self, Standard_Boolean const V)

        :type V: bool

        """
        return _DDF.Handle_DDF_Browser_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_DDF_Browser self) -> Standard_Boolean
        Protected(Handle_DDF_Browser self, Standard_Boolean const P)

        :type P: bool

        """
        return _DDF.Handle_DDF_Browser_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_DDF_Browser self) -> Standard_CString
        Name(Handle_DDF_Browser self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _DDF.Handle_DDF_Browser_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_DDF_Browser self)

        Memory deallocator for transient classes


        """
        return _DDF.Handle_DDF_Browser_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_DDF_Browser self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_DDF_Browser self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDF.Handle_DDF_Browser_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_DDF_Browser self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_DDF_Browser self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDF.Handle_DDF_Browser_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_DDF_Browser self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _DDF.Handle_DDF_Browser_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_DDF_Browser self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DDF.Handle_DDF_Browser_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_DDF_Browser self)

        Increments the reference counter of this object


        """
        return _DDF.Handle_DDF_Browser_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_DDF_Browser self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DDF.Handle_DDF_Browser_DecrementRefCounter(self, *args)

Handle_DDF_Browser_swigregister = _DDF.Handle_DDF_Browser_swigregister
Handle_DDF_Browser_swigregister(Handle_DDF_Browser)

def Handle_DDF_Browser_DownCast(thing):
    return _DDF.Handle_DDF_Browser_DownCast(thing)
Handle_DDF_Browser_DownCast = _DDF.Handle_DDF_Browser_DownCast

class NCollection_List_Handle_DDF_Transaction(NCollection.NCollection_BaseList):
    """
    Purpose:      Simple list to link  items together keeping the first 
    and the last one.
    Inherits BaseList, adding the data item to each node.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_List_Handle_DDF_Transaction self) -> NCollection_List< opencascade::handle< DDF_Transaction > >::iterator

        Returns an iterator pointing to the first element in the list.

        :rtype: iterator

        """
        return _DDF.NCollection_List_Handle_DDF_Transaction_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_List_Handle_DDF_Transaction self) -> NCollection_List< opencascade::handle< DDF_Transaction > >::iterator

        Returns an iterator referring to the past-the-end element in the list.

        :rtype: iterator

        """
        return _DDF.NCollection_List_Handle_DDF_Transaction_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_List_Handle_DDF_Transaction self) -> NCollection_List< opencascade::handle< DDF_Transaction > >::const_iterator

        Returns a const iterator pointing to the first element in the list.

        :rtype: const_iterator

        """
        return _DDF.NCollection_List_Handle_DDF_Transaction_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_List_Handle_DDF_Transaction self) -> NCollection_List< opencascade::handle< DDF_Transaction > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the list.

        :rtype: const_iterator

        """
        return _DDF.NCollection_List_Handle_DDF_Transaction_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:      Simple list to link  items together keeping the first 
        and the last one.
        Inherits BaseList, adding the data item to each node.
        """
        this = _DDF.new_NCollection_List_Handle_DDF_Transaction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_List_Handle_DDF_Transaction self) -> Standard_Integer

        Size - Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DDF.NCollection_List_Handle_DDF_Transaction_Size(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_List_Handle_DDF_Transaction self, NCollection_List_Handle_DDF_Transaction theOther) -> NCollection_List_Handle_DDF_Transaction

        Replace this list by the items of another list (theOther parameter).
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_List
        :rtype: OCC.wrapper.NCollection.NCollection_List

        """
        return _DDF.NCollection_List_Handle_DDF_Transaction_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_List_Handle_DDF_Transaction self, NCollection_List_Handle_DDF_Transaction theOther) -> NCollection_List_Handle_DDF_Transaction

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_List
        :rtype: OCC.wrapper.NCollection.NCollection_List

        """
        return _DDF.NCollection_List_Handle_DDF_Transaction_assign(self, *args)


    def Clear(self, *args):
        """
        Clear(NCollection_List_Handle_DDF_Transaction self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear this list

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _DDF.NCollection_List_Handle_DDF_Transaction_Clear(self, *args)


    def First(self, *args):
        """
        First item

        :rtype: const TheItemType &

        """
        res = _DDF.NCollection_List_Handle_DDF_Transaction_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Last(self, *args):
        """
        Last item

        :rtype: const TheItemType &

        """
        res = _DDF.NCollection_List_Handle_DDF_Transaction_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(NCollection_List_Handle_DDF_Transaction self, Handle_DDF_Transaction theItem) -> Handle_DDF_Transaction
        Append(NCollection_List_Handle_DDF_Transaction self, Handle_DDF_Transaction theItem, NCollection_List< opencascade::handle< DDF_Transaction > >::Iterator & theIter)
        Append(NCollection_List_Handle_DDF_Transaction self, NCollection_List_Handle_DDF_Transaction theOther)

        Append another list at the end

        :type theOther: OCC.wrapper.NCollection.NCollection_List

        """
        return _DDF.NCollection_List_Handle_DDF_Transaction_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_List_Handle_DDF_Transaction self, Handle_DDF_Transaction theItem) -> Handle_DDF_Transaction
        Prepend(NCollection_List_Handle_DDF_Transaction self, NCollection_List_Handle_DDF_Transaction theOther)

        Prepend another list at the beginning

        :type theOther: OCC.wrapper.NCollection.NCollection_List

        """
        return _DDF.NCollection_List_Handle_DDF_Transaction_Prepend(self, *args)


    def RemoveFirst(self, *args):
        """
        RemoveFirst(NCollection_List_Handle_DDF_Transaction self)

        RemoveFirst item


        """
        return _DDF.NCollection_List_Handle_DDF_Transaction_RemoveFirst(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_List_Handle_DDF_Transaction self, NCollection_List< opencascade::handle< DDF_Transaction > >::Iterator & theIter)

        Remove item pointed by iterator theIter; 
        theIter is then set to the next item

        :type theIter: Iterator

        """
        return _DDF.NCollection_List_Handle_DDF_Transaction_Remove(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_List_Handle_DDF_Transaction self, Handle_DDF_Transaction theItem, NCollection_List< opencascade::handle< DDF_Transaction > >::Iterator & theIter) -> Handle_DDF_Transaction
        InsertBefore(NCollection_List_Handle_DDF_Transaction self, NCollection_List_Handle_DDF_Transaction theOther, NCollection_List< opencascade::handle< DDF_Transaction > >::Iterator & theIter)

        InsertBefore

        :type theOther: OCC.wrapper.NCollection.NCollection_List
        :type theIter: Iterator

        """
        return _DDF.NCollection_List_Handle_DDF_Transaction_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_List_Handle_DDF_Transaction self, Handle_DDF_Transaction theItem, NCollection_List< opencascade::handle< DDF_Transaction > >::Iterator & theIter) -> Handle_DDF_Transaction
        InsertAfter(NCollection_List_Handle_DDF_Transaction self, NCollection_List_Handle_DDF_Transaction theOther, NCollection_List< opencascade::handle< DDF_Transaction > >::Iterator & theIter)

        InsertAfter

        :type theOther: OCC.wrapper.NCollection.NCollection_List
        :type theIter: Iterator

        """
        return _DDF.NCollection_List_Handle_DDF_Transaction_InsertAfter(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_List_Handle_DDF_Transaction self)

        Reverse the list


        """
        return _DDF.NCollection_List_Handle_DDF_Transaction_Reverse(self, *args)


    def __iter__(self):
        return _DDF.NCollection_List_Handle_DDF_Transaction___iter__(self)
    __swig_destroy__ = _DDF.delete_NCollection_List_Handle_DDF_Transaction
NCollection_List_Handle_DDF_Transaction_swigregister = _DDF.NCollection_List_Handle_DDF_Transaction_swigregister
NCollection_List_Handle_DDF_Transaction_swigregister(NCollection_List_Handle_DDF_Transaction)

class NCollection_List_Handle_DDF_Transaction_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _DDF.new_NCollection_List_Handle_DDF_Transaction_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DDF.delete_NCollection_List_Handle_DDF_Transaction_IteratorHelper

    def __next__(self):
        return _DDF.NCollection_List_Handle_DDF_Transaction_IteratorHelper___next__(self)
NCollection_List_Handle_DDF_Transaction_IteratorHelper_swigregister = _DDF.NCollection_List_Handle_DDF_Transaction_IteratorHelper_swigregister
NCollection_List_Handle_DDF_Transaction_IteratorHelper_swigregister(NCollection_List_Handle_DDF_Transaction_IteratorHelper)


try:
	DDF_TransactionStack = NCollection_List_Handle_DDF_Transaction
except NameError:
	pass # does not exist, probably ignored

class DDF_IOStream(Storage.Storage_BaseDriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Tell(self, *args):
        """
        Tell(DDF_IOStream self) -> Storage_Position

        :rtype: OCC.wrapper.Storage.Storage_Position

        """
        return _DDF.DDF_IOStream_Tell(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(DDF_IOStream self, Standard_Character const aValue) -> Storage_BaseDriver
        __lshift__(DDF_IOStream self, Standard_ExtCharacter const aValue) -> Storage_BaseDriver
        __lshift__(DDF_IOStream self, Standard_Integer const aValue) -> Storage_BaseDriver
        __lshift__(DDF_IOStream self, Standard_Boolean const aValue) -> Storage_BaseDriver
        __lshift__(DDF_IOStream self, Standard_Real const aValue) -> Storage_BaseDriver
        __lshift__(DDF_IOStream self, Standard_ShortReal const aValue) -> Storage_BaseDriver

        :type aValue: float
        :rtype: OCC.wrapper.Storage.Storage_BaseDriver

        """
        return _DDF.DDF_IOStream___lshift__(self, *args)


    def __rshift__(self, *args):
        """
        __rshift__(DDF_IOStream self) -> Storage_BaseDriver
        __rshift__(DDF_IOStream self) -> Storage_BaseDriver
        __rshift__(DDF_IOStream self) -> Storage_BaseDriver
        __rshift__(DDF_IOStream self) -> Storage_BaseDriver
        __rshift__(DDF_IOStream self) -> Storage_BaseDriver
        __rshift__(DDF_IOStream self) -> Storage_BaseDriver

        :type aValue: float
        :rtype: OCC.wrapper.Storage.Storage_BaseDriver

        """
        return _DDF.DDF_IOStream___rshift__(self, *args)

    __swig_destroy__ = _DDF.delete_DDF_IOStream
DDF_IOStream_swigregister = _DDF.DDF_IOStream_swigregister
DDF_IOStream_swigregister(DDF_IOStream)

class DDF_(object):
    """
    Provides facilities to manipulate data framework
    in a Draw-Commands environment.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetDF(*args):
        """
        GetDF(Standard_CString & Name, Handle_TDF_Data DF, Standard_Boolean const Complain) -> Standard_Boolean

        Search in draw  directory the framewok  identified
        by its name <Name>. returns True if found. In that
        case <DF> is setted.

        :type Name: OCC.wrapper.Standard.Standard_CString
        :type DF: OCC.wrapper.TDF.Handle_TDF_Data
        :type Complain: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDF.DDF__GetDF(*args)

    GetDF = staticmethod(GetDF)

    def FindLabel(*args):
        """
        FindLabel(Handle_TDF_Data DF, Standard_CString const Entry, TDF_Label Label, Standard_Boolean const Complain) -> Standard_Boolean

        Search in <DF>  the label identified by its  entry
        <Entry>.  returns  <True> if  found. In  that case
        <Label> is setted.

        :type DF: OCC.wrapper.TDF.Handle_TDF_Data
        :type Entry: OCC.wrapper.Standard.Standard_CString
        :type Label: OCC.wrapper.TDF.TDF_Label
        :type Complain: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDF.DDF__FindLabel(*args)

    FindLabel = staticmethod(FindLabel)

    def AddLabel(*args):
        """
        AddLabel(Handle_TDF_Data DF, Standard_CString const Entry, TDF_Label Label) -> Standard_Boolean

        Search in <DF> the  label identified by its entry
        <Entry>.   if label doesn't  exist, create  and add
        the Label in <DF>. In that case return True.

        :type DF: OCC.wrapper.TDF.Handle_TDF_Data
        :type Entry: OCC.wrapper.Standard.Standard_CString
        :type Label: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDF.DDF__AddLabel(*args)

    AddLabel = staticmethod(AddLabel)

    def Find(*args):
        """
        Find(Handle_TDF_Data DF, Standard_CString const Entry, Standard_GUID ID, Handle_TDF_Attribute A, Standard_Boolean const Complain) -> Standard_Boolean

        Search   in <DF> the  attribute  identified by its
        <ID> and its <entry>.  returns <True> if found. In
        that case A is setted.

        :type DF: OCC.wrapper.TDF.Handle_TDF_Data
        :type Entry: OCC.wrapper.Standard.Standard_CString
        :type ID: OCC.wrapper.Standard.Standard_GUID
        :type A: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Complain: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDF.DDF__Find(*args)

    Find = staticmethod(Find)

    def ReturnLabel(*args):
        """
        ReturnLabel(Draw_Interpretor theCommands, TDF_Label L) -> Draw_Interpretor

        :type theCommands: OCC.wrapper.Draw.Draw_Interpretor
        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DDF.DDF__ReturnLabel(*args)

    ReturnLabel = staticmethod(ReturnLabel)

    def AllCommands(*args):
        """
        AllCommands(Draw_Interpretor theCommands)

        :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DDF.DDF__AllCommands(*args)

    AllCommands = staticmethod(AllCommands)

    def BasicCommands(*args):
        """
        BasicCommands(Draw_Interpretor theCommands)

        Basic commands.

        :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DDF.DDF__BasicCommands(*args)

    BasicCommands = staticmethod(BasicCommands)

    def DataCommands(*args):
        """
        DataCommands(Draw_Interpretor theCommands)

        Data framework commands
        create, clear & copy.

        :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DDF.DDF__DataCommands(*args)

    DataCommands = staticmethod(DataCommands)

    def TransactionCommands(*args):
        """
        TransactionCommands(Draw_Interpretor theCommands)

        open commit abort a transaction
        undo facilities.

        :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DDF.DDF__TransactionCommands(*args)

    TransactionCommands = staticmethod(TransactionCommands)

    def BrowserCommands(*args):
        """
        BrowserCommands(Draw_Interpretor theCommands)

        Browser commands .

        :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DDF.DDF__BrowserCommands(*args)

    BrowserCommands = staticmethod(BrowserCommands)

    def __init__(self):
        """
        Provides facilities to manipulate data framework
        in a Draw-Commands environment.
        """
        this = _DDF.new_DDF_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DDF.delete_DDF_
DDF__swigregister = _DDF.DDF__swigregister
DDF__swigregister(DDF_)

def DDF__GetDF(*args):
    """
    DDF__GetDF(Standard_CString & Name, Handle_TDF_Data DF, Standard_Boolean const Complain) -> Standard_Boolean

    Search in draw  directory the framewok  identified
    by its name <Name>. returns True if found. In that
    case <DF> is setted.

    :type Name: OCC.wrapper.Standard.Standard_CString
    :type DF: OCC.wrapper.TDF.Handle_TDF_Data
    :type Complain: bool
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _DDF.DDF__GetDF(*args)

def DDF__FindLabel(*args):
    """
    DDF__FindLabel(Handle_TDF_Data DF, Standard_CString const Entry, TDF_Label Label, Standard_Boolean const Complain) -> Standard_Boolean

    Search in <DF>  the label identified by its  entry
    <Entry>.  returns  <True> if  found. In  that case
    <Label> is setted.

    :type DF: OCC.wrapper.TDF.Handle_TDF_Data
    :type Entry: OCC.wrapper.Standard.Standard_CString
    :type Label: OCC.wrapper.TDF.TDF_Label
    :type Complain: bool
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _DDF.DDF__FindLabel(*args)

def DDF__AddLabel(*args):
    """
    DDF__AddLabel(Handle_TDF_Data DF, Standard_CString const Entry, TDF_Label Label) -> Standard_Boolean

    Search in <DF> the  label identified by its entry
    <Entry>.   if label doesn't  exist, create  and add
    the Label in <DF>. In that case return True.

    :type DF: OCC.wrapper.TDF.Handle_TDF_Data
    :type Entry: OCC.wrapper.Standard.Standard_CString
    :type Label: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _DDF.DDF__AddLabel(*args)

def DDF__Find(*args):
    """
    DDF__Find(Handle_TDF_Data DF, Standard_CString const Entry, Standard_GUID ID, Handle_TDF_Attribute A, Standard_Boolean const Complain) -> Standard_Boolean

    Search   in <DF> the  attribute  identified by its
    <ID> and its <entry>.  returns <True> if found. In
    that case A is setted.

    :type DF: OCC.wrapper.TDF.Handle_TDF_Data
    :type Entry: OCC.wrapper.Standard.Standard_CString
    :type ID: OCC.wrapper.Standard.Standard_GUID
    :type A: OCC.wrapper.TDF.Handle_TDF_Attribute
    :type Complain: bool
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _DDF.DDF__Find(*args)

def DDF__ReturnLabel(*args):
    """
    DDF__ReturnLabel(Draw_Interpretor theCommands, TDF_Label L) -> Draw_Interpretor

    :type theCommands: OCC.wrapper.Draw.Draw_Interpretor
    :type L: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _DDF.DDF__ReturnLabel(*args)

def DDF__AllCommands(*args):
    """
    DDF__AllCommands(Draw_Interpretor theCommands)

    :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _DDF.DDF__AllCommands(*args)

def DDF__BasicCommands(*args):
    """
    DDF__BasicCommands(Draw_Interpretor theCommands)

    Basic commands.

    :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _DDF.DDF__BasicCommands(*args)

def DDF__DataCommands(*args):
    """
    DDF__DataCommands(Draw_Interpretor theCommands)

    Data framework commands
    create, clear & copy.

    :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _DDF.DDF__DataCommands(*args)

def DDF__TransactionCommands(*args):
    """
    DDF__TransactionCommands(Draw_Interpretor theCommands)

    open commit abort a transaction
    undo facilities.

    :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _DDF.DDF__TransactionCommands(*args)

def DDF__BrowserCommands(*args):
    """
    DDF__BrowserCommands(Draw_Interpretor theCommands)

    Browser commands .

    :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _DDF.DDF__BrowserCommands(*args)

class Handle_DDF_Transaction(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_DDF_Transaction self)

        Nullify the handle


        """
        return _DDF.Handle_DDF_Transaction_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_DDF_Transaction self) -> bool

        Check for being null

        :rtype: bool

        """
        return _DDF.Handle_DDF_Transaction_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_DDF_Transaction self, DDF_Transaction thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _DDF.Handle_DDF_Transaction_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_DDF_Transaction self, Handle_DDF_Transaction theHandle) -> Handle_DDF_Transaction
        assign(Handle_DDF_Transaction self, DDF_Transaction thePtr) -> Handle_DDF_Transaction
        assign(Handle_DDF_Transaction self, Handle_DDF_Transaction theHandle) -> Handle_DDF_Transaction

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _DDF.Handle_DDF_Transaction_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_DDF_Transaction self) -> DDF_Transaction

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _DDF.Handle_DDF_Transaction_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_DDF_Transaction self) -> DDF_Transaction

        Member access operator (note non-const)

        :rtype: T *

        """
        return _DDF.Handle_DDF_Transaction___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_DDF_Transaction self) -> DDF_Transaction

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _DDF.Handle_DDF_Transaction___ref__(self, *args)


    def __hash__(self):
        return _DDF.Handle_DDF_Transaction___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _DDF.Handle_DDF_Transaction___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _DDF.new_Handle_DDF_Transaction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_DDF.Handle_DDF_Transaction_DownCast)
    __swig_destroy__ = _DDF.delete_Handle_DDF_Transaction

    def Open(self, *args):
        """
        Open(Handle_DDF_Transaction self) -> Standard_Integer

        If not yet done, opens a new transaction on
        <myDF>. Returns the index of the just opened
        transaction.

        It raises DomainError if the transaction is
        already open, and NullObject if there is no
        current Data framework.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DDF.Handle_DDF_Transaction_Open(self, *args)


    def Commit(self, *args):
        """
        Commit(Handle_DDF_Transaction self, Standard_Boolean const withDelta) -> Handle_TDF_Delta

        Commits the transactions until AND including the
        current opened one.

        :type withDelta: bool
        :rtype: OCC.wrapper.TDF.Handle_TDF_Delta

        """
        return _DDF.Handle_DDF_Transaction_Commit(self, *args)


    def Abort(self, *args):
        """
        Abort(Handle_DDF_Transaction self)

        Aborts the transactions until AND including the
        current opened one.


        """
        return _DDF.Handle_DDF_Transaction_Abort(self, *args)


    def Data(self, *args):
        """
        Data(Handle_DDF_Transaction self) -> Handle_TDF_Data

        Returns the Data from TDF.

        :rtype: OCC.wrapper.TDF.Handle_TDF_Data

        """
        return _DDF.Handle_DDF_Transaction_Data(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_DDF_Transaction self) -> Standard_Integer

        Returns the number of the transaction opened by <me>.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DDF.Handle_DDF_Transaction_Transaction(self, *args)


    def IsOpen(self, *args):
        """
        IsOpen(Handle_DDF_Transaction self) -> Standard_Boolean

        Returns true if the transaction is open.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDF.Handle_DDF_Transaction_IsOpen(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_DDF_Transaction self) -> char const *

        :rtype: const char *

        """
        return _DDF.Handle_DDF_Transaction_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DDF.Handle_DDF_Transaction_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DDF.Handle_DDF_Transaction_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_DDF_Transaction self)

        Memory deallocator for transient classes


        """
        return _DDF.Handle_DDF_Transaction_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_DDF_Transaction self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_DDF_Transaction self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDF.Handle_DDF_Transaction_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_DDF_Transaction self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_DDF_Transaction self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDF.Handle_DDF_Transaction_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_DDF_Transaction self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _DDF.Handle_DDF_Transaction_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_DDF_Transaction self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DDF.Handle_DDF_Transaction_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_DDF_Transaction self)

        Increments the reference counter of this object


        """
        return _DDF.Handle_DDF_Transaction_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_DDF_Transaction self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DDF.Handle_DDF_Transaction_DecrementRefCounter(self, *args)

Handle_DDF_Transaction_swigregister = _DDF.Handle_DDF_Transaction_swigregister
Handle_DDF_Transaction_swigregister(Handle_DDF_Transaction)

def Handle_DDF_Transaction_DownCast(thing):
    return _DDF.Handle_DDF_Transaction_DownCast(thing)
Handle_DDF_Transaction_DownCast = _DDF.Handle_DDF_Transaction_DownCast

class Handle_DDF_Data(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_DDF_Data self)

        Nullify the handle


        """
        return _DDF.Handle_DDF_Data_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_DDF_Data self) -> bool

        Check for being null

        :rtype: bool

        """
        return _DDF.Handle_DDF_Data_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_DDF_Data self, DDF_Data thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _DDF.Handle_DDF_Data_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_DDF_Data self, Handle_DDF_Data theHandle) -> Handle_DDF_Data
        assign(Handle_DDF_Data self, DDF_Data thePtr) -> Handle_DDF_Data
        assign(Handle_DDF_Data self, Handle_DDF_Data theHandle) -> Handle_DDF_Data

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _DDF.Handle_DDF_Data_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_DDF_Data self) -> DDF_Data

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _DDF.Handle_DDF_Data_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_DDF_Data self) -> DDF_Data

        Member access operator (note non-const)

        :rtype: T *

        """
        return _DDF.Handle_DDF_Data___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_DDF_Data self) -> DDF_Data

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _DDF.Handle_DDF_Data___ref__(self, *args)


    def __hash__(self):
        return _DDF.Handle_DDF_Data___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _DDF.Handle_DDF_Data___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _DDF.new_Handle_DDF_Data(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_DDF.Handle_DDF_Data_DownCast)
    __swig_destroy__ = _DDF.delete_Handle_DDF_Data

    def DrawOn(self, *args):
        """
        DrawOn(Handle_DDF_Data self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DDF.Handle_DDF_Data_DrawOn(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_DDF_Data self) -> Handle_Draw_Drawable3D

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DDF.Handle_DDF_Data_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_DDF_Data self, Standard_OStream & S)

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DDF.Handle_DDF_Data_Dump(self, *args)


    def DataFramework(self, *args):
        """
        DataFramework(Handle_DDF_Data self, Handle_TDF_Data aDF)
        DataFramework(Handle_DDF_Data self) -> Handle_TDF_Data

        :rtype: OCC.wrapper.TDF.Handle_TDF_Data

        """
        return _DDF.Handle_DDF_Data_DataFramework(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_DDF_Data self, Draw_Interpretor I)

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DDF.Handle_DDF_Data_Whatis(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_DDF_Data self) -> char const *

        :rtype: const char *

        """
        return _DDF.Handle_DDF_Data_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DDF.Handle_DDF_Data_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DDF.Handle_DDF_Data_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PickReject(self, *args):
        """
        PickReject(Handle_DDF_Data self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDF.Handle_DDF_Data_PickReject(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_DDF_Data self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDF.Handle_DDF_Data_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_DDF_Data self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DDF.Handle_DDF_Data_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_DDF_Data self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DDF.Handle_DDF_Data_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_DDF_Data self) -> Standard_Boolean
        Visible(Handle_DDF_Data self, Standard_Boolean const V)

        :type V: bool

        """
        return _DDF.Handle_DDF_Data_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_DDF_Data self) -> Standard_Boolean
        Protected(Handle_DDF_Data self, Standard_Boolean const P)

        :type P: bool

        """
        return _DDF.Handle_DDF_Data_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_DDF_Data self) -> Standard_CString
        Name(Handle_DDF_Data self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _DDF.Handle_DDF_Data_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_DDF_Data self)

        Memory deallocator for transient classes


        """
        return _DDF.Handle_DDF_Data_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_DDF_Data self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_DDF_Data self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDF.Handle_DDF_Data_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_DDF_Data self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_DDF_Data self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDF.Handle_DDF_Data_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_DDF_Data self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _DDF.Handle_DDF_Data_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_DDF_Data self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DDF.Handle_DDF_Data_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_DDF_Data self)

        Increments the reference counter of this object


        """
        return _DDF.Handle_DDF_Data_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_DDF_Data self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DDF.Handle_DDF_Data_DecrementRefCounter(self, *args)

Handle_DDF_Data_swigregister = _DDF.Handle_DDF_Data_swigregister
Handle_DDF_Data_swigregister(Handle_DDF_Data)

def Handle_DDF_Data_DownCast(thing):
    return _DDF.Handle_DDF_Data_DownCast(thing)
Handle_DDF_Data_DownCast = _DDF.Handle_DDF_Data_DownCast



