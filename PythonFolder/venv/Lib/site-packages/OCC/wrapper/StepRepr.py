# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_StepRepr')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_StepRepr')
    _StepRepr = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StepRepr', [dirname(__file__)])
        except ImportError:
            import _StepRepr
            return _StepRepr
        try:
            _mod = imp.load_module('_StepRepr', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _StepRepr = swig_import_helper()
    del swig_import_helper
else:
    import _StepRepr
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StepRepr.delete_SwigPyIterator

    def value(self):
        return _StepRepr.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _StepRepr.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _StepRepr.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _StepRepr.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _StepRepr.SwigPyIterator_equal(self, x)

    def copy(self):
        return _StepRepr.SwigPyIterator_copy(self)

    def next(self):
        return _StepRepr.SwigPyIterator_next(self)

    def __next__(self):
        return _StepRepr.SwigPyIterator___next__(self)

    def previous(self):
        return _StepRepr.SwigPyIterator_previous(self)

    def advance(self, n):
        return _StepRepr.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _StepRepr.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _StepRepr.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _StepRepr.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _StepRepr.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _StepRepr.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _StepRepr.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _StepRepr.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _StepRepr.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_StepRepr.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _StepRepr.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _StepRepr.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StepRepr.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _StepRepr.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _StepRepr.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _StepRepr.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _StepRepr.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_StepRepr.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _StepRepr.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _StepRepr.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StepRepr.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _StepRepr.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _StepRepr.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _StepRepr.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _StepRepr.ptr_to_number(item)
ptr_to_number = _StepRepr.ptr_to_number

def HashCode(*args):
    return _StepRepr.HashCode(*args)
HashCode = _StepRepr.HashCode

def ptr_equal(a, b):
    return _StepRepr.ptr_equal(a, b)
ptr_equal = _StepRepr.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepBasic
else:
    import StepBasic
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepData
else:
    import StepData
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
class StepRepr_RepresentationItem(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_RepresentationItem
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_RepresentationItem(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_RepresentationItem self) -> StepRepr_RepresentationItem

        Returns a RepresentationItem


        """
        this = _StepRepr.new_StepRepr_RepresentationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepRepr_RepresentationItem self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_RepresentationItem_Init(self, *args)


    def SetName(self, *args):
        """
        SetName(StepRepr_RepresentationItem self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_RepresentationItem_SetName(self, *args)


    def Name(self, *args):
        """
        Name(StepRepr_RepresentationItem self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_RepresentationItem_Name(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_RepresentationItem_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_RepresentationItem_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_RepresentationItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_RepresentationItem
StepRepr_RepresentationItem_swigregister = _StepRepr.StepRepr_RepresentationItem_swigregister
StepRepr_RepresentationItem_swigregister(StepRepr_RepresentationItem)

def StepRepr_RepresentationItem_get_type_name(*args):
    """
    StepRepr_RepresentationItem_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_RepresentationItem_get_type_name(*args)

def StepRepr_RepresentationItem_get_type_descriptor(*args):
    """
    StepRepr_RepresentationItem_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_RepresentationItem_get_type_descriptor(*args)

class StepRepr_ShapeAspect(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_ShapeAspect
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_ShapeAspect(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_ShapeAspect self) -> StepRepr_ShapeAspect

        Returns a ShapeAspect


        """
        this = _StepRepr.new_StepRepr_ShapeAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepRepr_ShapeAspect self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepRepr_ProductDefinitionShape aOfShape, StepData_Logical const aProductDefinitional)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape
        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.StepRepr_ShapeAspect_Init(self, *args)


    def SetName(self, *args):
        """
        SetName(StepRepr_ShapeAspect self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_ShapeAspect_SetName(self, *args)


    def Name(self, *args):
        """
        Name(StepRepr_ShapeAspect self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_ShapeAspect_Name(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(StepRepr_ShapeAspect self, Handle_TCollection_HAsciiString aDescription)

        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_ShapeAspect_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(StepRepr_ShapeAspect self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_ShapeAspect_Description(self, *args)


    def SetOfShape(self, *args):
        """
        SetOfShape(StepRepr_ShapeAspect self, Handle_StepRepr_ProductDefinitionShape aOfShape)

        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepRepr.StepRepr_ShapeAspect_SetOfShape(self, *args)


    def OfShape(self, *args):
        """
        OfShape(StepRepr_ShapeAspect self) -> Handle_StepRepr_ProductDefinitionShape

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepRepr.StepRepr_ShapeAspect_OfShape(self, *args)


    def SetProductDefinitional(self, *args):
        """
        SetProductDefinitional(StepRepr_ShapeAspect self, StepData_Logical const aProductDefinitional)

        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.StepRepr_ShapeAspect_SetProductDefinitional(self, *args)


    def ProductDefinitional(self, *args):
        """
        ProductDefinitional(StepRepr_ShapeAspect self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.StepRepr_ShapeAspect_ProductDefinitional(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_ShapeAspect_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_ShapeAspect_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_ShapeAspect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_ShapeAspect
StepRepr_ShapeAspect_swigregister = _StepRepr.StepRepr_ShapeAspect_swigregister
StepRepr_ShapeAspect_swigregister(StepRepr_ShapeAspect)

def StepRepr_ShapeAspect_get_type_name(*args):
    """
    StepRepr_ShapeAspect_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_ShapeAspect_get_type_name(*args)

def StepRepr_ShapeAspect_get_type_descriptor(*args):
    """
    StepRepr_ShapeAspect_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_ShapeAspect_get_type_descriptor(*args)

class StepRepr_PropertyDefinitionRepresentation(Standard.Standard_Transient):
    """Representation of STEP entity PropertyDefinitionRepresentation"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_PropertyDefinitionRepresentation
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_PropertyDefinitionRepresentation(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_PropertyDefinitionRepresentation self) -> StepRepr_PropertyDefinitionRepresentation

        Empty constructor


        """
        this = _StepRepr.new_StepRepr_PropertyDefinitionRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepRepr_PropertyDefinitionRepresentation self, StepRepr_RepresentedDefinition aDefinition, Handle_StepRepr_Representation aUsedRepresentation)

        Initialize all fields (own and inherited)

        :type aDefinition: OCC.wrapper.StepRepr.StepRepr_RepresentedDefinition
        :type aUsedRepresentation: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepRepr.StepRepr_PropertyDefinitionRepresentation_Init(self, *args)


    def Definition(self, *args):
        """
        Definition(StepRepr_PropertyDefinitionRepresentation self) -> StepRepr_RepresentedDefinition

        Returns field Definition

        :rtype: OCC.wrapper.StepRepr.StepRepr_RepresentedDefinition

        """
        return _StepRepr.StepRepr_PropertyDefinitionRepresentation_Definition(self, *args)


    def SetDefinition(self, *args):
        """
        SetDefinition(StepRepr_PropertyDefinitionRepresentation self, StepRepr_RepresentedDefinition Definition)

        Set field Definition

        :type Definition: OCC.wrapper.StepRepr.StepRepr_RepresentedDefinition

        """
        return _StepRepr.StepRepr_PropertyDefinitionRepresentation_SetDefinition(self, *args)


    def UsedRepresentation(self, *args):
        """
        UsedRepresentation(StepRepr_PropertyDefinitionRepresentation self) -> Handle_StepRepr_Representation

        Returns field UsedRepresentation

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepRepr.StepRepr_PropertyDefinitionRepresentation_UsedRepresentation(self, *args)


    def SetUsedRepresentation(self, *args):
        """
        SetUsedRepresentation(StepRepr_PropertyDefinitionRepresentation self, Handle_StepRepr_Representation UsedRepresentation)

        Set field UsedRepresentation

        :type UsedRepresentation: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepRepr.StepRepr_PropertyDefinitionRepresentation_SetUsedRepresentation(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_PropertyDefinitionRepresentation_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_PropertyDefinitionRepresentation_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_PropertyDefinitionRepresentation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_PropertyDefinitionRepresentation
StepRepr_PropertyDefinitionRepresentation_swigregister = _StepRepr.StepRepr_PropertyDefinitionRepresentation_swigregister
StepRepr_PropertyDefinitionRepresentation_swigregister(StepRepr_PropertyDefinitionRepresentation)

def StepRepr_PropertyDefinitionRepresentation_get_type_name(*args):
    """
    StepRepr_PropertyDefinitionRepresentation_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_PropertyDefinitionRepresentation_get_type_name(*args)

def StepRepr_PropertyDefinitionRepresentation_get_type_descriptor(*args):
    """
    StepRepr_PropertyDefinitionRepresentation_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_PropertyDefinitionRepresentation_get_type_descriptor(*args)

class StepRepr_ReprItemAndMeasureWithUnit(StepRepr_RepresentationItem):
    """
    Base class for complex types (MEASURE_REPRESENTATION_ITEM, MEASURE_WITH_UNIT, 
    REPRESENTATION_ITEM, LENGTH_MEASURE_WITH_UNIT/PLANE_ANGLE_MEASURE_WITH_UNIT).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_ReprItemAndMeasureWithUnit
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_ReprItemAndMeasureWithUnit(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_ReprItemAndMeasureWithUnit self) -> StepRepr_ReprItemAndMeasureWithUnit

        Base class for complex types (MEASURE_REPRESENTATION_ITEM, MEASURE_WITH_UNIT, 
        REPRESENTATION_ITEM, LENGTH_MEASURE_WITH_UNIT/PLANE_ANGLE_MEASURE_WITH_UNIT).
        """
        this = _StepRepr.new_StepRepr_ReprItemAndMeasureWithUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepRepr_ReprItemAndMeasureWithUnit self, Handle_StepBasic_MeasureWithUnit aMWU, Handle_StepRepr_RepresentationItem aRI)

        :type aMWU: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type aRI: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepRepr.StepRepr_ReprItemAndMeasureWithUnit_Init(self, *args)


    def GetMeasureRepresentationItem(self, *args):
        """
        GetMeasureRepresentationItem(StepRepr_ReprItemAndMeasureWithUnit self) -> Handle_StepRepr_MeasureRepresentationItem

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_MeasureRepresentationItem

        """
        return _StepRepr.StepRepr_ReprItemAndMeasureWithUnit_GetMeasureRepresentationItem(self, *args)


    def SetMeasureWithUnit(self, *args):
        """
        SetMeasureWithUnit(StepRepr_ReprItemAndMeasureWithUnit self, Handle_StepBasic_MeasureWithUnit aMWU)

        :type aMWU: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepRepr.StepRepr_ReprItemAndMeasureWithUnit_SetMeasureWithUnit(self, *args)


    def GetMeasureWithUnit(self, *args):
        """
        GetMeasureWithUnit(StepRepr_ReprItemAndMeasureWithUnit self) -> Handle_StepBasic_MeasureWithUnit

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepRepr.StepRepr_ReprItemAndMeasureWithUnit_GetMeasureWithUnit(self, *args)


    def GetRepresentationItem(self, *args):
        """
        GetRepresentationItem(StepRepr_ReprItemAndMeasureWithUnit self) -> Handle_StepRepr_RepresentationItem

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepRepr.StepRepr_ReprItemAndMeasureWithUnit_GetRepresentationItem(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_ReprItemAndMeasureWithUnit_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_ReprItemAndMeasureWithUnit_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_ReprItemAndMeasureWithUnit_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_ReprItemAndMeasureWithUnit
StepRepr_ReprItemAndMeasureWithUnit_swigregister = _StepRepr.StepRepr_ReprItemAndMeasureWithUnit_swigregister
StepRepr_ReprItemAndMeasureWithUnit_swigregister(StepRepr_ReprItemAndMeasureWithUnit)

def StepRepr_ReprItemAndMeasureWithUnit_get_type_name(*args):
    """
    StepRepr_ReprItemAndMeasureWithUnit_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_ReprItemAndMeasureWithUnit_get_type_name(*args)

def StepRepr_ReprItemAndMeasureWithUnit_get_type_descriptor(*args):
    """
    StepRepr_ReprItemAndMeasureWithUnit_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_ReprItemAndMeasureWithUnit_get_type_descriptor(*args)

class StepRepr_ProductDefinitionUsage(StepBasic.StepBasic_ProductDefinitionRelationship):
    """Representation of STEP entity ProductDefinitionUsage"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_ProductDefinitionUsage
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_ProductDefinitionUsage(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_ProductDefinitionUsage self) -> StepRepr_ProductDefinitionUsage

        Empty constructor


        """
        this = _StepRepr.new_StepRepr_ProductDefinitionUsage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_ProductDefinitionUsage_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_ProductDefinitionUsage_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_ProductDefinitionUsage_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_ProductDefinitionUsage
StepRepr_ProductDefinitionUsage_swigregister = _StepRepr.StepRepr_ProductDefinitionUsage_swigregister
StepRepr_ProductDefinitionUsage_swigregister(StepRepr_ProductDefinitionUsage)

def StepRepr_ProductDefinitionUsage_get_type_name(*args):
    """
    StepRepr_ProductDefinitionUsage_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_ProductDefinitionUsage_get_type_name(*args)

def StepRepr_ProductDefinitionUsage_get_type_descriptor(*args):
    """
    StepRepr_ProductDefinitionUsage_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_ProductDefinitionUsage_get_type_descriptor(*args)

class StepRepr_Representation(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_Representation
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_Representation(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_Representation self) -> StepRepr_Representation

        Returns a Representation


        """
        this = _StepRepr.new_StepRepr_Representation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepRepr_Representation self, Handle_TCollection_HAsciiString aName, Handle_StepRepr_HArray1OfRepresentationItem aItems, Handle_StepRepr_RepresentationContext aContextOfItems)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aItems: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfRepresentationItem
        :type aContextOfItems: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationContext

        """
        return _StepRepr.StepRepr_Representation_Init(self, *args)


    def SetName(self, *args):
        """
        SetName(StepRepr_Representation self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_Representation_SetName(self, *args)


    def Name(self, *args):
        """
        Name(StepRepr_Representation self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_Representation_Name(self, *args)


    def SetItems(self, *args):
        """
        SetItems(StepRepr_Representation self, Handle_StepRepr_HArray1OfRepresentationItem aItems)

        :type aItems: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfRepresentationItem

        """
        return _StepRepr.StepRepr_Representation_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(StepRepr_Representation self) -> Handle_StepRepr_HArray1OfRepresentationItem

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfRepresentationItem

        """
        return _StepRepr.StepRepr_Representation_Items(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(StepRepr_Representation self, Standard_Integer const num) -> Handle_StepRepr_RepresentationItem

        :type num: int
        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepRepr.StepRepr_Representation_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(StepRepr_Representation self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.StepRepr_Representation_NbItems(self, *args)


    def SetContextOfItems(self, *args):
        """
        SetContextOfItems(StepRepr_Representation self, Handle_StepRepr_RepresentationContext aContextOfItems)

        :type aContextOfItems: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationContext

        """
        return _StepRepr.StepRepr_Representation_SetContextOfItems(self, *args)


    def ContextOfItems(self, *args):
        """
        ContextOfItems(StepRepr_Representation self) -> Handle_StepRepr_RepresentationContext

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationContext

        """
        return _StepRepr.StepRepr_Representation_ContextOfItems(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_Representation_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_Representation_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_Representation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_Representation
StepRepr_Representation_swigregister = _StepRepr.StepRepr_Representation_swigregister
StepRepr_Representation_swigregister(StepRepr_Representation)

def StepRepr_Representation_get_type_name(*args):
    """
    StepRepr_Representation_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_Representation_get_type_name(*args)

def StepRepr_Representation_get_type_descriptor(*args):
    """
    StepRepr_Representation_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_Representation_get_type_descriptor(*args)

class StepRepr_RepresentationContext(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_RepresentationContext
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_RepresentationContext(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_RepresentationContext self) -> StepRepr_RepresentationContext

        Returns a RepresentationContext


        """
        this = _StepRepr.new_StepRepr_RepresentationContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepRepr_RepresentationContext self, Handle_TCollection_HAsciiString aContextIdentifier, Handle_TCollection_HAsciiString aContextType)

        :type aContextIdentifier: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aContextType: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_RepresentationContext_Init(self, *args)


    def SetContextIdentifier(self, *args):
        """
        SetContextIdentifier(StepRepr_RepresentationContext self, Handle_TCollection_HAsciiString aContextIdentifier)

        :type aContextIdentifier: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_RepresentationContext_SetContextIdentifier(self, *args)


    def ContextIdentifier(self, *args):
        """
        ContextIdentifier(StepRepr_RepresentationContext self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_RepresentationContext_ContextIdentifier(self, *args)


    def SetContextType(self, *args):
        """
        SetContextType(StepRepr_RepresentationContext self, Handle_TCollection_HAsciiString aContextType)

        :type aContextType: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_RepresentationContext_SetContextType(self, *args)


    def ContextType(self, *args):
        """
        ContextType(StepRepr_RepresentationContext self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_RepresentationContext_ContextType(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_RepresentationContext_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_RepresentationContext_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_RepresentationContext_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_RepresentationContext
StepRepr_RepresentationContext_swigregister = _StepRepr.StepRepr_RepresentationContext_swigregister
StepRepr_RepresentationContext_swigregister(StepRepr_RepresentationContext)

def StepRepr_RepresentationContext_get_type_name(*args):
    """
    StepRepr_RepresentationContext_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_RepresentationContext_get_type_name(*args)

def StepRepr_RepresentationContext_get_type_descriptor(*args):
    """
    StepRepr_RepresentationContext_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_RepresentationContext_get_type_descriptor(*args)

class StepRepr_CompositeShapeAspect(StepRepr_ShapeAspect):
    """Added for Dimensional Tolerances"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_CompositeShapeAspect
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_CompositeShapeAspect(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_CompositeShapeAspect self) -> StepRepr_CompositeShapeAspect

        Added for Dimensional Tolerances
        """
        this = _StepRepr.new_StepRepr_CompositeShapeAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_CompositeShapeAspect_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_CompositeShapeAspect_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_CompositeShapeAspect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_CompositeShapeAspect
StepRepr_CompositeShapeAspect_swigregister = _StepRepr.StepRepr_CompositeShapeAspect_swigregister
StepRepr_CompositeShapeAspect_swigregister(StepRepr_CompositeShapeAspect)

def StepRepr_CompositeShapeAspect_get_type_name(*args):
    """
    StepRepr_CompositeShapeAspect_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_CompositeShapeAspect_get_type_name(*args)

def StepRepr_CompositeShapeAspect_get_type_descriptor(*args):
    """
    StepRepr_CompositeShapeAspect_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_CompositeShapeAspect_get_type_descriptor(*args)

class StepRepr_AssemblyComponentUsage(StepRepr_ProductDefinitionUsage):
    """Representation of STEP entity AssemblyComponentUsage"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_AssemblyComponentUsage
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_AssemblyComponentUsage(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_AssemblyComponentUsage self) -> StepRepr_AssemblyComponentUsage

        Empty constructor


        """
        this = _StepRepr.new_StepRepr_AssemblyComponentUsage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepRepr_AssemblyComponentUsage self, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Id, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Name, Standard_Boolean const hasProductDefinitionRelationship_Description, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Description, Handle_StepBasic_ProductDefinition aProductDefinitionRelationship_RelatingProductDefinition, Handle_StepBasic_ProductDefinition aProductDefinitionRelationship_RelatedProductDefinition, Standard_Boolean const hasReferenceDesignator, Handle_TCollection_HAsciiString aReferenceDesignator)
        Init(StepRepr_AssemblyComponentUsage self, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Id, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Name, Standard_Boolean const hasProductDefinitionRelationship_Description, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Description, StepBasic_ProductDefinitionOrReference aProductDefinitionRelationship_RelatingProductDefinition, StepBasic_ProductDefinitionOrReference aProductDefinitionRelationship_RelatedProductDefinition, Standard_Boolean const hasReferenceDesignator, Handle_TCollection_HAsciiString aReferenceDesignator)

        Initialize all fields (own and inherited)

        :type aProductDefinitionRelationship_Id: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aProductDefinitionRelationship_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type hasProductDefinitionRelationship_Description: bool
        :type aProductDefinitionRelationship_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aProductDefinitionRelationship_RelatingProductDefinition: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference
        :type aProductDefinitionRelationship_RelatedProductDefinition: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference
        :type hasReferenceDesignator: bool
        :type aReferenceDesignator: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_AssemblyComponentUsage_Init(self, *args)


    def ReferenceDesignator(self, *args):
        """
        ReferenceDesignator(StepRepr_AssemblyComponentUsage self) -> Handle_TCollection_HAsciiString

        Returns field ReferenceDesignator

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_AssemblyComponentUsage_ReferenceDesignator(self, *args)


    def SetReferenceDesignator(self, *args):
        """
        SetReferenceDesignator(StepRepr_AssemblyComponentUsage self, Handle_TCollection_HAsciiString ReferenceDesignator)

        Set field ReferenceDesignator

        :type ReferenceDesignator: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_AssemblyComponentUsage_SetReferenceDesignator(self, *args)


    def HasReferenceDesignator(self, *args):
        """
        HasReferenceDesignator(StepRepr_AssemblyComponentUsage self) -> Standard_Boolean

        Returns True if optional field ReferenceDesignator is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.StepRepr_AssemblyComponentUsage_HasReferenceDesignator(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_AssemblyComponentUsage_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_AssemblyComponentUsage_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_AssemblyComponentUsage_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_AssemblyComponentUsage
StepRepr_AssemblyComponentUsage_swigregister = _StepRepr.StepRepr_AssemblyComponentUsage_swigregister
StepRepr_AssemblyComponentUsage_swigregister(StepRepr_AssemblyComponentUsage)

def StepRepr_AssemblyComponentUsage_get_type_name(*args):
    """
    StepRepr_AssemblyComponentUsage_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_AssemblyComponentUsage_get_type_name(*args)

def StepRepr_AssemblyComponentUsage_get_type_descriptor(*args):
    """
    StepRepr_AssemblyComponentUsage_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_AssemblyComponentUsage_get_type_descriptor(*args)

class StepRepr_ContinuosShapeAspect(StepRepr_CompositeShapeAspect):
    """Added for Dimensional Tolerances"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_ContinuosShapeAspect
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_ContinuosShapeAspect(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_ContinuosShapeAspect self) -> StepRepr_ContinuosShapeAspect

        Added for Dimensional Tolerances
        """
        this = _StepRepr.new_StepRepr_ContinuosShapeAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_ContinuosShapeAspect_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_ContinuosShapeAspect_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_ContinuosShapeAspect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_ContinuosShapeAspect
StepRepr_ContinuosShapeAspect_swigregister = _StepRepr.StepRepr_ContinuosShapeAspect_swigregister
StepRepr_ContinuosShapeAspect_swigregister(StepRepr_ContinuosShapeAspect)

def StepRepr_ContinuosShapeAspect_get_type_name(*args):
    """
    StepRepr_ContinuosShapeAspect_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_ContinuosShapeAspect_get_type_name(*args)

def StepRepr_ContinuosShapeAspect_get_type_descriptor(*args):
    """
    StepRepr_ContinuosShapeAspect_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_ContinuosShapeAspect_get_type_descriptor(*args)

class StepRepr_PropertyDefinition(Standard.Standard_Transient):
    """Representation of STEP entity PropertyDefinition"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_PropertyDefinition
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_PropertyDefinition(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_PropertyDefinition self) -> StepRepr_PropertyDefinition

        Empty constructor


        """
        this = _StepRepr.new_StepRepr_PropertyDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepRepr_PropertyDefinition self, Handle_TCollection_HAsciiString aName, Standard_Boolean const hasDescription, Handle_TCollection_HAsciiString aDescription, StepRepr_CharacterizedDefinition aDefinition)

        Initialize all fields (own and inherited)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type hasDescription: bool
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDefinition: OCC.wrapper.StepRepr.StepRepr_CharacterizedDefinition

        """
        return _StepRepr.StepRepr_PropertyDefinition_Init(self, *args)


    def Name(self, *args):
        """
        Name(StepRepr_PropertyDefinition self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_PropertyDefinition_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(StepRepr_PropertyDefinition self, Handle_TCollection_HAsciiString Name)

        Set field Name

        :type Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_PropertyDefinition_SetName(self, *args)


    def Description(self, *args):
        """
        Description(StepRepr_PropertyDefinition self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_PropertyDefinition_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(StepRepr_PropertyDefinition self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_PropertyDefinition_SetDescription(self, *args)


    def HasDescription(self, *args):
        """
        HasDescription(StepRepr_PropertyDefinition self) -> Standard_Boolean

        Returns True if optional field Description is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.StepRepr_PropertyDefinition_HasDescription(self, *args)


    def Definition(self, *args):
        """
        Definition(StepRepr_PropertyDefinition self) -> StepRepr_CharacterizedDefinition

        Returns field Definition

        :rtype: OCC.wrapper.StepRepr.StepRepr_CharacterizedDefinition

        """
        return _StepRepr.StepRepr_PropertyDefinition_Definition(self, *args)


    def SetDefinition(self, *args):
        """
        SetDefinition(StepRepr_PropertyDefinition self, StepRepr_CharacterizedDefinition Definition)

        Set field Definition

        :type Definition: OCC.wrapper.StepRepr.StepRepr_CharacterizedDefinition

        """
        return _StepRepr.StepRepr_PropertyDefinition_SetDefinition(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_PropertyDefinition_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_PropertyDefinition_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_PropertyDefinition_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_PropertyDefinition
StepRepr_PropertyDefinition_swigregister = _StepRepr.StepRepr_PropertyDefinition_swigregister
StepRepr_PropertyDefinition_swigregister(StepRepr_PropertyDefinition)

def StepRepr_PropertyDefinition_get_type_name(*args):
    """
    StepRepr_PropertyDefinition_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_PropertyDefinition_get_type_name(*args)

def StepRepr_PropertyDefinition_get_type_descriptor(*args):
    """
    StepRepr_PropertyDefinition_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_PropertyDefinition_get_type_descriptor(*args)

class StepRepr_MappedItem(StepRepr_RepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_MappedItem
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_MappedItem(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_MappedItem self) -> StepRepr_MappedItem

        Returns a MappedItem


        """
        this = _StepRepr.new_StepRepr_MappedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepRepr_MappedItem self, Handle_TCollection_HAsciiString aName, Handle_StepRepr_RepresentationMap aMappingSource, Handle_StepRepr_RepresentationItem aMappingTarget)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aMappingSource: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationMap
        :type aMappingTarget: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepRepr.StepRepr_MappedItem_Init(self, *args)


    def SetMappingSource(self, *args):
        """
        SetMappingSource(StepRepr_MappedItem self, Handle_StepRepr_RepresentationMap aMappingSource)

        :type aMappingSource: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationMap

        """
        return _StepRepr.StepRepr_MappedItem_SetMappingSource(self, *args)


    def MappingSource(self, *args):
        """
        MappingSource(StepRepr_MappedItem self) -> Handle_StepRepr_RepresentationMap

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationMap

        """
        return _StepRepr.StepRepr_MappedItem_MappingSource(self, *args)


    def SetMappingTarget(self, *args):
        """
        SetMappingTarget(StepRepr_MappedItem self, Handle_StepRepr_RepresentationItem aMappingTarget)

        :type aMappingTarget: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepRepr.StepRepr_MappedItem_SetMappingTarget(self, *args)


    def MappingTarget(self, *args):
        """
        MappingTarget(StepRepr_MappedItem self) -> Handle_StepRepr_RepresentationItem

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepRepr.StepRepr_MappedItem_MappingTarget(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_MappedItem_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_MappedItem_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_MappedItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_MappedItem
StepRepr_MappedItem_swigregister = _StepRepr.StepRepr_MappedItem_swigregister
StepRepr_MappedItem_swigregister(StepRepr_MappedItem)

def StepRepr_MappedItem_get_type_name(*args):
    """
    StepRepr_MappedItem_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_MappedItem_get_type_name(*args)

def StepRepr_MappedItem_get_type_descriptor(*args):
    """
    StepRepr_MappedItem_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_MappedItem_get_type_descriptor(*args)

class StepRepr_RepresentationRelationship(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_RepresentationRelationship
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_RepresentationRelationship(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_RepresentationRelationship self) -> StepRepr_RepresentationRelationship

        Returns a RepresentationRelationship


        """
        this = _StepRepr.new_StepRepr_RepresentationRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepRepr_RepresentationRelationship self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepRepr_Representation aRep1, Handle_StepRepr_Representation aRep2)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aRep1: OCC.wrapper.StepRepr.Handle_StepRepr_Representation
        :type aRep2: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepRepr.StepRepr_RepresentationRelationship_Init(self, *args)


    def SetName(self, *args):
        """
        SetName(StepRepr_RepresentationRelationship self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_RepresentationRelationship_SetName(self, *args)


    def Name(self, *args):
        """
        Name(StepRepr_RepresentationRelationship self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_RepresentationRelationship_Name(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(StepRepr_RepresentationRelationship self, Handle_TCollection_HAsciiString aDescription)

        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_RepresentationRelationship_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(StepRepr_RepresentationRelationship self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_RepresentationRelationship_Description(self, *args)


    def SetRep1(self, *args):
        """
        SetRep1(StepRepr_RepresentationRelationship self, Handle_StepRepr_Representation aRep1)

        :type aRep1: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepRepr.StepRepr_RepresentationRelationship_SetRep1(self, *args)


    def Rep1(self, *args):
        """
        Rep1(StepRepr_RepresentationRelationship self) -> Handle_StepRepr_Representation

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepRepr.StepRepr_RepresentationRelationship_Rep1(self, *args)


    def SetRep2(self, *args):
        """
        SetRep2(StepRepr_RepresentationRelationship self, Handle_StepRepr_Representation aRep2)

        :type aRep2: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepRepr.StepRepr_RepresentationRelationship_SetRep2(self, *args)


    def Rep2(self, *args):
        """
        Rep2(StepRepr_RepresentationRelationship self) -> Handle_StepRepr_Representation

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepRepr.StepRepr_RepresentationRelationship_Rep2(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_RepresentationRelationship_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_RepresentationRelationship_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_RepresentationRelationship_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_RepresentationRelationship
StepRepr_RepresentationRelationship_swigregister = _StepRepr.StepRepr_RepresentationRelationship_swigregister
StepRepr_RepresentationRelationship_swigregister(StepRepr_RepresentationRelationship)

def StepRepr_RepresentationRelationship_get_type_name(*args):
    """
    StepRepr_RepresentationRelationship_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_RepresentationRelationship_get_type_name(*args)

def StepRepr_RepresentationRelationship_get_type_descriptor(*args):
    """
    StepRepr_RepresentationRelationship_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_RepresentationRelationship_get_type_descriptor(*args)

class StepRepr_ConstructiveGeometryRepresentationRelationship(StepRepr_RepresentationRelationship):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_ConstructiveGeometryRepresentationRelationship
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_ConstructiveGeometryRepresentationRelationship(self) 
            return h


    def __init__(self, *args):
        """__init__(StepRepr_ConstructiveGeometryRepresentationRelationship self) -> StepRepr_ConstructiveGeometryRepresentationRelationship"""
        this = _StepRepr.new_StepRepr_ConstructiveGeometryRepresentationRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_ConstructiveGeometryRepresentationRelationship_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_ConstructiveGeometryRepresentationRelationship_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_ConstructiveGeometryRepresentationRelationship_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_ConstructiveGeometryRepresentationRelationship
StepRepr_ConstructiveGeometryRepresentationRelationship_swigregister = _StepRepr.StepRepr_ConstructiveGeometryRepresentationRelationship_swigregister
StepRepr_ConstructiveGeometryRepresentationRelationship_swigregister(StepRepr_ConstructiveGeometryRepresentationRelationship)

def StepRepr_ConstructiveGeometryRepresentationRelationship_get_type_name(*args):
    """
    StepRepr_ConstructiveGeometryRepresentationRelationship_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_ConstructiveGeometryRepresentationRelationship_get_type_name(*args)

def StepRepr_ConstructiveGeometryRepresentationRelationship_get_type_descriptor(*args):
    """
    StepRepr_ConstructiveGeometryRepresentationRelationship_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_ConstructiveGeometryRepresentationRelationship_get_type_descriptor(*args)

class StepRepr_ShapeAspectRelationship(Standard.Standard_Transient):
    """Representation of STEP entity ShapeAspectRelationship"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_ShapeAspectRelationship
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_ShapeAspectRelationship(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_ShapeAspectRelationship self) -> StepRepr_ShapeAspectRelationship

        Empty constructor


        """
        this = _StepRepr.new_StepRepr_ShapeAspectRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepRepr_ShapeAspectRelationship self, Handle_TCollection_HAsciiString aName, Standard_Boolean const hasDescription, Handle_TCollection_HAsciiString aDescription, Handle_StepRepr_ShapeAspect aRelatingShapeAspect, Handle_StepRepr_ShapeAspect aRelatedShapeAspect)

        Initialize all fields (own and inherited)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type hasDescription: bool
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aRelatingShapeAspect: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspect
        :type aRelatedShapeAspect: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspect

        """
        return _StepRepr.StepRepr_ShapeAspectRelationship_Init(self, *args)


    def Name(self, *args):
        """
        Name(StepRepr_ShapeAspectRelationship self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_ShapeAspectRelationship_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(StepRepr_ShapeAspectRelationship self, Handle_TCollection_HAsciiString Name)

        Set field Name

        :type Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_ShapeAspectRelationship_SetName(self, *args)


    def Description(self, *args):
        """
        Description(StepRepr_ShapeAspectRelationship self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_ShapeAspectRelationship_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(StepRepr_ShapeAspectRelationship self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_ShapeAspectRelationship_SetDescription(self, *args)


    def HasDescription(self, *args):
        """
        HasDescription(StepRepr_ShapeAspectRelationship self) -> Standard_Boolean

        Returns True if optional field Description is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.StepRepr_ShapeAspectRelationship_HasDescription(self, *args)


    def RelatingShapeAspect(self, *args):
        """
        RelatingShapeAspect(StepRepr_ShapeAspectRelationship self) -> Handle_StepRepr_ShapeAspect

        Returns field RelatingShapeAspect

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspect

        """
        return _StepRepr.StepRepr_ShapeAspectRelationship_RelatingShapeAspect(self, *args)


    def SetRelatingShapeAspect(self, *args):
        """
        SetRelatingShapeAspect(StepRepr_ShapeAspectRelationship self, Handle_StepRepr_ShapeAspect RelatingShapeAspect)

        Set field RelatingShapeAspect

        :type RelatingShapeAspect: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspect

        """
        return _StepRepr.StepRepr_ShapeAspectRelationship_SetRelatingShapeAspect(self, *args)


    def RelatedShapeAspect(self, *args):
        """
        RelatedShapeAspect(StepRepr_ShapeAspectRelationship self) -> Handle_StepRepr_ShapeAspect

        Returns field RelatedShapeAspect

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspect

        """
        return _StepRepr.StepRepr_ShapeAspectRelationship_RelatedShapeAspect(self, *args)


    def SetRelatedShapeAspect(self, *args):
        """
        SetRelatedShapeAspect(StepRepr_ShapeAspectRelationship self, Handle_StepRepr_ShapeAspect RelatedShapeAspect)

        Set field RelatedShapeAspect

        :type RelatedShapeAspect: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspect

        """
        return _StepRepr.StepRepr_ShapeAspectRelationship_SetRelatedShapeAspect(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_ShapeAspectRelationship_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_ShapeAspectRelationship_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_ShapeAspectRelationship_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_ShapeAspectRelationship
StepRepr_ShapeAspectRelationship_swigregister = _StepRepr.StepRepr_ShapeAspectRelationship_swigregister
StepRepr_ShapeAspectRelationship_swigregister(StepRepr_ShapeAspectRelationship)

def StepRepr_ShapeAspectRelationship_get_type_name(*args):
    """
    StepRepr_ShapeAspectRelationship_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_ShapeAspectRelationship_get_type_name(*args)

def StepRepr_ShapeAspectRelationship_get_type_descriptor(*args):
    """
    StepRepr_ShapeAspectRelationship_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_ShapeAspectRelationship_get_type_descriptor(*args)

class StepRepr_ShapeRepresentationRelationship(StepRepr_RepresentationRelationship):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_ShapeRepresentationRelationship
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_ShapeRepresentationRelationship(self) 
            return h


    def __init__(self, *args):
        """__init__(StepRepr_ShapeRepresentationRelationship self) -> StepRepr_ShapeRepresentationRelationship"""
        this = _StepRepr.new_StepRepr_ShapeRepresentationRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_ShapeRepresentationRelationship_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_ShapeRepresentationRelationship_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_ShapeRepresentationRelationship_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_ShapeRepresentationRelationship
StepRepr_ShapeRepresentationRelationship_swigregister = _StepRepr.StepRepr_ShapeRepresentationRelationship_swigregister
StepRepr_ShapeRepresentationRelationship_swigregister(StepRepr_ShapeRepresentationRelationship)

def StepRepr_ShapeRepresentationRelationship_get_type_name(*args):
    """
    StepRepr_ShapeRepresentationRelationship_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_ShapeRepresentationRelationship_get_type_name(*args)

def StepRepr_ShapeRepresentationRelationship_get_type_descriptor(*args):
    """
    StepRepr_ShapeRepresentationRelationship_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_ShapeRepresentationRelationship_get_type_descriptor(*args)

class StepRepr_StructuralResponsePropertyDefinitionRepresentation(StepRepr_PropertyDefinitionRepresentation):
    """Representation of STEP entity StructuralResponsePropertyDefinitionRepresentation"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_StructuralResponsePropertyDefinitionRepresentation self) -> StepRepr_StructuralResponsePropertyDefinitionRepresentation

        Empty constructor


        """
        this = _StepRepr.new_StepRepr_StructuralResponsePropertyDefinitionRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_StructuralResponsePropertyDefinitionRepresentation_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_StructuralResponsePropertyDefinitionRepresentation_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_StructuralResponsePropertyDefinitionRepresentation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_StructuralResponsePropertyDefinitionRepresentation
StepRepr_StructuralResponsePropertyDefinitionRepresentation_swigregister = _StepRepr.StepRepr_StructuralResponsePropertyDefinitionRepresentation_swigregister
StepRepr_StructuralResponsePropertyDefinitionRepresentation_swigregister(StepRepr_StructuralResponsePropertyDefinitionRepresentation)

def StepRepr_StructuralResponsePropertyDefinitionRepresentation_get_type_name(*args):
    """
    StepRepr_StructuralResponsePropertyDefinitionRepresentation_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_StructuralResponsePropertyDefinitionRepresentation_get_type_name(*args)

def StepRepr_StructuralResponsePropertyDefinitionRepresentation_get_type_descriptor(*args):
    """
    StepRepr_StructuralResponsePropertyDefinitionRepresentation_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_StructuralResponsePropertyDefinitionRepresentation_get_type_descriptor(*args)

class StepRepr_ReprItemAndMeasureWithUnitAndQRI(StepRepr_ReprItemAndMeasureWithUnit):
    """
    Base class for complex types (MEASURE_REPRESENTATION_ITEM, MEASURE_WITH_UNIT, QUALIFIED_REPRESENTATION_ITEM
    REPRESENTATION_ITEM, LENGTH_MEASURE_WITH_UNIT/PLANE_ANGLE_MEASURE_WITH_UNIT).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_ReprItemAndMeasureWithUnitAndQRI self) -> StepRepr_ReprItemAndMeasureWithUnitAndQRI

        Base class for complex types (MEASURE_REPRESENTATION_ITEM, MEASURE_WITH_UNIT, QUALIFIED_REPRESENTATION_ITEM
        REPRESENTATION_ITEM, LENGTH_MEASURE_WITH_UNIT/PLANE_ANGLE_MEASURE_WITH_UNIT).
        """
        this = _StepRepr.new_StepRepr_ReprItemAndMeasureWithUnitAndQRI(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepRepr_ReprItemAndMeasureWithUnitAndQRI self, Handle_StepBasic_MeasureWithUnit aMWU, Handle_StepRepr_RepresentationItem aRI, Handle_StepShape_QualifiedRepresentationItem aQRI)

        :type aMWU: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type aRI: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem
        :type aQRI: OCC.wrapper.StepRepr.Handle_StepShape_QualifiedRepresentationItem

        """
        return _StepRepr.StepRepr_ReprItemAndMeasureWithUnitAndQRI_Init(self, *args)


    def SetQualifiedRepresentationItem(self, *args):
        """
        SetQualifiedRepresentationItem(StepRepr_ReprItemAndMeasureWithUnitAndQRI self, Handle_StepShape_QualifiedRepresentationItem aQRI)

        :type aQRI: OCC.wrapper.StepRepr.Handle_StepShape_QualifiedRepresentationItem

        """
        return _StepRepr.StepRepr_ReprItemAndMeasureWithUnitAndQRI_SetQualifiedRepresentationItem(self, *args)


    def GetQualifiedRepresentationItem(self, *args):
        """
        GetQualifiedRepresentationItem(StepRepr_ReprItemAndMeasureWithUnitAndQRI self) -> Handle_StepShape_QualifiedRepresentationItem

        :rtype: OCC.wrapper.StepRepr.Handle_StepShape_QualifiedRepresentationItem

        """
        return _StepRepr.StepRepr_ReprItemAndMeasureWithUnitAndQRI_GetQualifiedRepresentationItem(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_ReprItemAndMeasureWithUnitAndQRI_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_ReprItemAndMeasureWithUnitAndQRI_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_ReprItemAndMeasureWithUnitAndQRI_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_ReprItemAndMeasureWithUnitAndQRI
StepRepr_ReprItemAndMeasureWithUnitAndQRI_swigregister = _StepRepr.StepRepr_ReprItemAndMeasureWithUnitAndQRI_swigregister
StepRepr_ReprItemAndMeasureWithUnitAndQRI_swigregister(StepRepr_ReprItemAndMeasureWithUnitAndQRI)

def StepRepr_ReprItemAndMeasureWithUnitAndQRI_get_type_name(*args):
    """
    StepRepr_ReprItemAndMeasureWithUnitAndQRI_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_ReprItemAndMeasureWithUnitAndQRI_get_type_name(*args)

def StepRepr_ReprItemAndMeasureWithUnitAndQRI_get_type_descriptor(*args):
    """
    StepRepr_ReprItemAndMeasureWithUnitAndQRI_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_ReprItemAndMeasureWithUnitAndQRI_get_type_descriptor(*args)

class StepRepr_ParametricRepresentationContext(StepRepr_RepresentationContext):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_ParametricRepresentationContext
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_ParametricRepresentationContext(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_ParametricRepresentationContext self) -> StepRepr_ParametricRepresentationContext

        Returns a ParametricRepresentationContext


        """
        this = _StepRepr.new_StepRepr_ParametricRepresentationContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_ParametricRepresentationContext_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_ParametricRepresentationContext_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_ParametricRepresentationContext_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_ParametricRepresentationContext
StepRepr_ParametricRepresentationContext_swigregister = _StepRepr.StepRepr_ParametricRepresentationContext_swigregister
StepRepr_ParametricRepresentationContext_swigregister(StepRepr_ParametricRepresentationContext)

def StepRepr_ParametricRepresentationContext_get_type_name(*args):
    """
    StepRepr_ParametricRepresentationContext_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_ParametricRepresentationContext_get_type_name(*args)

def StepRepr_ParametricRepresentationContext_get_type_descriptor(*args):
    """
    StepRepr_ParametricRepresentationContext_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_ParametricRepresentationContext_get_type_descriptor(*args)

class StepRepr_GlobalUncertaintyAssignedContext(StepRepr_RepresentationContext):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_GlobalUncertaintyAssignedContext
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_GlobalUncertaintyAssignedContext(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_GlobalUncertaintyAssignedContext self) -> StepRepr_GlobalUncertaintyAssignedContext

        Returns a GlobalUncertaintyAssignedContext


        """
        this = _StepRepr.new_StepRepr_GlobalUncertaintyAssignedContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepRepr_GlobalUncertaintyAssignedContext self, Handle_TCollection_HAsciiString aContextIdentifier, Handle_TCollection_HAsciiString aContextType, Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit aUncertainty)

        :type aContextIdentifier: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aContextType: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aUncertainty: OCC.wrapper.StepBasic.Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit

        """
        return _StepRepr.StepRepr_GlobalUncertaintyAssignedContext_Init(self, *args)


    def SetUncertainty(self, *args):
        """
        SetUncertainty(StepRepr_GlobalUncertaintyAssignedContext self, Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit aUncertainty)

        :type aUncertainty: OCC.wrapper.StepBasic.Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit

        """
        return _StepRepr.StepRepr_GlobalUncertaintyAssignedContext_SetUncertainty(self, *args)


    def Uncertainty(self, *args):
        """
        Uncertainty(StepRepr_GlobalUncertaintyAssignedContext self) -> Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_HArray1OfUncertaintyMeasureWithUnit

        """
        return _StepRepr.StepRepr_GlobalUncertaintyAssignedContext_Uncertainty(self, *args)


    def UncertaintyValue(self, *args):
        """
        UncertaintyValue(StepRepr_GlobalUncertaintyAssignedContext self, Standard_Integer const num) -> Handle_StepBasic_UncertaintyMeasureWithUnit

        :type num: int
        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_UncertaintyMeasureWithUnit

        """
        return _StepRepr.StepRepr_GlobalUncertaintyAssignedContext_UncertaintyValue(self, *args)


    def NbUncertainty(self, *args):
        """
        NbUncertainty(StepRepr_GlobalUncertaintyAssignedContext self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.StepRepr_GlobalUncertaintyAssignedContext_NbUncertainty(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_GlobalUncertaintyAssignedContext_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_GlobalUncertaintyAssignedContext_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_GlobalUncertaintyAssignedContext_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_GlobalUncertaintyAssignedContext
StepRepr_GlobalUncertaintyAssignedContext_swigregister = _StepRepr.StepRepr_GlobalUncertaintyAssignedContext_swigregister
StepRepr_GlobalUncertaintyAssignedContext_swigregister(StepRepr_GlobalUncertaintyAssignedContext)

def StepRepr_GlobalUncertaintyAssignedContext_get_type_name(*args):
    """
    StepRepr_GlobalUncertaintyAssignedContext_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_GlobalUncertaintyAssignedContext_get_type_name(*args)

def StepRepr_GlobalUncertaintyAssignedContext_get_type_descriptor(*args):
    """
    StepRepr_GlobalUncertaintyAssignedContext_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_GlobalUncertaintyAssignedContext_get_type_descriptor(*args)

class StepRepr_BetweenShapeAspect(StepRepr_ContinuosShapeAspect):
    """Added for Dimensional Tolerances"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_BetweenShapeAspect
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_BetweenShapeAspect(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_BetweenShapeAspect self) -> StepRepr_BetweenShapeAspect

        Added for Dimensional Tolerances
        """
        this = _StepRepr.new_StepRepr_BetweenShapeAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_BetweenShapeAspect_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_BetweenShapeAspect_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_BetweenShapeAspect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_BetweenShapeAspect
StepRepr_BetweenShapeAspect_swigregister = _StepRepr.StepRepr_BetweenShapeAspect_swigregister
StepRepr_BetweenShapeAspect_swigregister(StepRepr_BetweenShapeAspect)

def StepRepr_BetweenShapeAspect_get_type_name(*args):
    """
    StepRepr_BetweenShapeAspect_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_BetweenShapeAspect_get_type_name(*args)

def StepRepr_BetweenShapeAspect_get_type_descriptor(*args):
    """
    StepRepr_BetweenShapeAspect_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_BetweenShapeAspect_get_type_descriptor(*args)

class StepRepr_ReprItemAndLengthMeasureWithUnit(StepRepr_ReprItemAndMeasureWithUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_ReprItemAndLengthMeasureWithUnit
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_ReprItemAndLengthMeasureWithUnit(self) 
            return h


    def __init__(self, *args):
        """__init__(StepRepr_ReprItemAndLengthMeasureWithUnit self) -> StepRepr_ReprItemAndLengthMeasureWithUnit"""
        this = _StepRepr.new_StepRepr_ReprItemAndLengthMeasureWithUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetLengthMeasureWithUnit(self, *args):
        """
        SetLengthMeasureWithUnit(StepRepr_ReprItemAndLengthMeasureWithUnit self, Handle_StepBasic_LengthMeasureWithUnit aLMWU)

        :type aLMWU: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepRepr.StepRepr_ReprItemAndLengthMeasureWithUnit_SetLengthMeasureWithUnit(self, *args)


    def GetLengthMeasureWithUnit(self, *args):
        """
        GetLengthMeasureWithUnit(StepRepr_ReprItemAndLengthMeasureWithUnit self) -> Handle_StepBasic_LengthMeasureWithUnit

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepRepr.StepRepr_ReprItemAndLengthMeasureWithUnit_GetLengthMeasureWithUnit(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_ReprItemAndLengthMeasureWithUnit_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_ReprItemAndLengthMeasureWithUnit_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_ReprItemAndLengthMeasureWithUnit_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_ReprItemAndLengthMeasureWithUnit
StepRepr_ReprItemAndLengthMeasureWithUnit_swigregister = _StepRepr.StepRepr_ReprItemAndLengthMeasureWithUnit_swigregister
StepRepr_ReprItemAndLengthMeasureWithUnit_swigregister(StepRepr_ReprItemAndLengthMeasureWithUnit)

def StepRepr_ReprItemAndLengthMeasureWithUnit_get_type_name(*args):
    """
    StepRepr_ReprItemAndLengthMeasureWithUnit_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_ReprItemAndLengthMeasureWithUnit_get_type_name(*args)

def StepRepr_ReprItemAndLengthMeasureWithUnit_get_type_descriptor(*args):
    """
    StepRepr_ReprItemAndLengthMeasureWithUnit_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_ReprItemAndLengthMeasureWithUnit_get_type_descriptor(*args)

class StepRepr_HArray1OfMaterialPropertyRepresentation(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_HArray1OfMaterialPropertyRepresentation
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_HArray1OfMaterialPropertyRepresentation(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_HArray1OfMaterialPropertyRepresentation self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepRepr_HArray1OfMaterialPropertyRepresentation
        __init__(StepRepr_HArray1OfMaterialPropertyRepresentation self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_StepRepr_MaterialPropertyRepresentation theValue) -> StepRepr_HArray1OfMaterialPropertyRepresentation
        __init__(StepRepr_HArray1OfMaterialPropertyRepresentation self, NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation theOther) -> StepRepr_HArray1OfMaterialPropertyRepresentation

        :type theOther: OCC.wrapper.StepRepr.StepRepr_Array1OfMaterialPropertyRepresentation

        """
        this = _StepRepr.new_StepRepr_HArray1OfMaterialPropertyRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepRepr.StepRepr_Array1OfMaterialPropertyRepresentation

        """
        res = _StepRepr.StepRepr_HArray1OfMaterialPropertyRepresentation_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepRepr_HArray1OfMaterialPropertyRepresentation self) -> NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation

        :rtype: OCC.wrapper.StepRepr.StepRepr_Array1OfMaterialPropertyRepresentation

        """
        return _StepRepr.StepRepr_HArray1OfMaterialPropertyRepresentation_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_HArray1OfMaterialPropertyRepresentation_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_HArray1OfMaterialPropertyRepresentation_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_HArray1OfMaterialPropertyRepresentation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_HArray1OfMaterialPropertyRepresentation
StepRepr_HArray1OfMaterialPropertyRepresentation_swigregister = _StepRepr.StepRepr_HArray1OfMaterialPropertyRepresentation_swigregister
StepRepr_HArray1OfMaterialPropertyRepresentation_swigregister(StepRepr_HArray1OfMaterialPropertyRepresentation)

def StepRepr_HArray1OfMaterialPropertyRepresentation_get_type_name(*args):
    """
    StepRepr_HArray1OfMaterialPropertyRepresentation_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_HArray1OfMaterialPropertyRepresentation_get_type_name(*args)

def StepRepr_HArray1OfMaterialPropertyRepresentation_get_type_descriptor(*args):
    """
    StepRepr_HArray1OfMaterialPropertyRepresentation_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_HArray1OfMaterialPropertyRepresentation_get_type_descriptor(*args)

class StepRepr_CharacterizedRepresentation(StepRepr_Representation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_CharacterizedRepresentation
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_CharacterizedRepresentation(self) 
            return h


    def __init__(self, *args):
        """__init__(StepRepr_CharacterizedRepresentation self) -> StepRepr_CharacterizedRepresentation"""
        this = _StepRepr.new_StepRepr_CharacterizedRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepRepr_CharacterizedRepresentation self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepRepr_HArray1OfRepresentationItem theItems, Handle_StepRepr_RepresentationContext theContextOfItems)

        Returns a CharacterizedRepresentation

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theItems: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfRepresentationItem
        :type theContextOfItems: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationContext

        """
        return _StepRepr.StepRepr_CharacterizedRepresentation_Init(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(StepRepr_CharacterizedRepresentation self, Handle_TCollection_HAsciiString theDescription)

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_CharacterizedRepresentation_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(StepRepr_CharacterizedRepresentation self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_CharacterizedRepresentation_Description(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_CharacterizedRepresentation_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_CharacterizedRepresentation_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_CharacterizedRepresentation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_CharacterizedRepresentation
StepRepr_CharacterizedRepresentation_swigregister = _StepRepr.StepRepr_CharacterizedRepresentation_swigregister
StepRepr_CharacterizedRepresentation_swigregister(StepRepr_CharacterizedRepresentation)

def StepRepr_CharacterizedRepresentation_get_type_name(*args):
    """
    StepRepr_CharacterizedRepresentation_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_CharacterizedRepresentation_get_type_name(*args)

def StepRepr_CharacterizedRepresentation_get_type_descriptor(*args):
    """
    StepRepr_CharacterizedRepresentation_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_CharacterizedRepresentation_get_type_descriptor(*args)

class StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI(StepRepr_ReprItemAndMeasureWithUnitAndQRI):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI(self) 
            return h


    def __init__(self, *args):
        """__init__(StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI self) -> StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI"""
        this = _StepRepr.new_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetLengthMeasureWithUnit(self, *args):
        """
        SetLengthMeasureWithUnit(StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI self, Handle_StepBasic_LengthMeasureWithUnit aLMWU)

        :type aLMWU: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepRepr.StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_SetLengthMeasureWithUnit(self, *args)


    def GetLengthMeasureWithUnit(self, *args):
        """
        GetLengthMeasureWithUnit(StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI self) -> Handle_StepBasic_LengthMeasureWithUnit

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepRepr.StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_GetLengthMeasureWithUnit(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI
StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_swigregister = _StepRepr.StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_swigregister
StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_swigregister(StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI)

def StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_get_type_name(*args):
    """
    StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_get_type_name(*args)

def StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_get_type_descriptor(*args):
    """
    StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_get_type_descriptor(*args)

class StepRepr_ConfigurationItem(Standard.Standard_Transient):
    """Representation of STEP entity ConfigurationItem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_ConfigurationItem
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_ConfigurationItem(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_ConfigurationItem self) -> StepRepr_ConfigurationItem

        Empty constructor


        """
        this = _StepRepr.new_StepRepr_ConfigurationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepRepr_ConfigurationItem self, Handle_TCollection_HAsciiString aId, Handle_TCollection_HAsciiString aName, Standard_Boolean const hasDescription, Handle_TCollection_HAsciiString aDescription, Handle_StepRepr_ProductConcept aItemConcept, Standard_Boolean const hasPurpose, Handle_TCollection_HAsciiString aPurpose)

        Initialize all fields (own and inherited)

        :type aId: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type hasDescription: bool
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aItemConcept: OCC.wrapper.StepRepr.Handle_StepRepr_ProductConcept
        :type hasPurpose: bool
        :type aPurpose: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_ConfigurationItem_Init(self, *args)


    def Id(self, *args):
        """
        Id(StepRepr_ConfigurationItem self) -> Handle_TCollection_HAsciiString

        Returns field Id

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_ConfigurationItem_Id(self, *args)


    def SetId(self, *args):
        """
        SetId(StepRepr_ConfigurationItem self, Handle_TCollection_HAsciiString Id)

        Set field Id

        :type Id: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_ConfigurationItem_SetId(self, *args)


    def Name(self, *args):
        """
        Name(StepRepr_ConfigurationItem self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_ConfigurationItem_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(StepRepr_ConfigurationItem self, Handle_TCollection_HAsciiString Name)

        Set field Name

        :type Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_ConfigurationItem_SetName(self, *args)


    def Description(self, *args):
        """
        Description(StepRepr_ConfigurationItem self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_ConfigurationItem_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(StepRepr_ConfigurationItem self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_ConfigurationItem_SetDescription(self, *args)


    def HasDescription(self, *args):
        """
        HasDescription(StepRepr_ConfigurationItem self) -> Standard_Boolean

        Returns True if optional field Description is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.StepRepr_ConfigurationItem_HasDescription(self, *args)


    def ItemConcept(self, *args):
        """
        ItemConcept(StepRepr_ConfigurationItem self) -> Handle_StepRepr_ProductConcept

        Returns field ItemConcept

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ProductConcept

        """
        return _StepRepr.StepRepr_ConfigurationItem_ItemConcept(self, *args)


    def SetItemConcept(self, *args):
        """
        SetItemConcept(StepRepr_ConfigurationItem self, Handle_StepRepr_ProductConcept ItemConcept)

        Set field ItemConcept

        :type ItemConcept: OCC.wrapper.StepRepr.Handle_StepRepr_ProductConcept

        """
        return _StepRepr.StepRepr_ConfigurationItem_SetItemConcept(self, *args)


    def Purpose(self, *args):
        """
        Purpose(StepRepr_ConfigurationItem self) -> Handle_TCollection_HAsciiString

        Returns field Purpose

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_ConfigurationItem_Purpose(self, *args)


    def SetPurpose(self, *args):
        """
        SetPurpose(StepRepr_ConfigurationItem self, Handle_TCollection_HAsciiString Purpose)

        Set field Purpose

        :type Purpose: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_ConfigurationItem_SetPurpose(self, *args)


    def HasPurpose(self, *args):
        """
        HasPurpose(StepRepr_ConfigurationItem self) -> Standard_Boolean

        Returns True if optional field Purpose is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.StepRepr_ConfigurationItem_HasPurpose(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_ConfigurationItem_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_ConfigurationItem_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_ConfigurationItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_ConfigurationItem
StepRepr_ConfigurationItem_swigregister = _StepRepr.StepRepr_ConfigurationItem_swigregister
StepRepr_ConfigurationItem_swigregister(StepRepr_ConfigurationItem)

def StepRepr_ConfigurationItem_get_type_name(*args):
    """
    StepRepr_ConfigurationItem_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_ConfigurationItem_get_type_name(*args)

def StepRepr_ConfigurationItem_get_type_descriptor(*args):
    """
    StepRepr_ConfigurationItem_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_ConfigurationItem_get_type_descriptor(*args)

class StepRepr_DerivedShapeAspect(StepRepr_ShapeAspect):
    """Added for Dimensional Tolerances"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_DerivedShapeAspect
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_DerivedShapeAspect(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_DerivedShapeAspect self) -> StepRepr_DerivedShapeAspect

        Added for Dimensional Tolerances
        """
        this = _StepRepr.new_StepRepr_DerivedShapeAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_DerivedShapeAspect_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_DerivedShapeAspect_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_DerivedShapeAspect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_DerivedShapeAspect
StepRepr_DerivedShapeAspect_swigregister = _StepRepr.StepRepr_DerivedShapeAspect_swigregister
StepRepr_DerivedShapeAspect_swigregister(StepRepr_DerivedShapeAspect)

def StepRepr_DerivedShapeAspect_get_type_name(*args):
    """
    StepRepr_DerivedShapeAspect_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_DerivedShapeAspect_get_type_name(*args)

def StepRepr_DerivedShapeAspect_get_type_descriptor(*args):
    """
    StepRepr_DerivedShapeAspect_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_DerivedShapeAspect_get_type_descriptor(*args)

class StepRepr_CompoundRepresentationItem(StepRepr_RepresentationItem):
    """Added for Dimensional Tolerances"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_CompoundRepresentationItem
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_CompoundRepresentationItem(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_CompoundRepresentationItem self) -> StepRepr_CompoundRepresentationItem

        Added for Dimensional Tolerances
        """
        this = _StepRepr.new_StepRepr_CompoundRepresentationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepRepr_CompoundRepresentationItem self, Handle_TCollection_HAsciiString aName, Handle_StepRepr_HArray1OfRepresentationItem item_element)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type item_element: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfRepresentationItem

        """
        return _StepRepr.StepRepr_CompoundRepresentationItem_Init(self, *args)


    def ItemElement(self, *args):
        """
        ItemElement(StepRepr_CompoundRepresentationItem self) -> Handle_StepRepr_HArray1OfRepresentationItem

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfRepresentationItem

        """
        return _StepRepr.StepRepr_CompoundRepresentationItem_ItemElement(self, *args)


    def NbItemElement(self, *args):
        """
        NbItemElement(StepRepr_CompoundRepresentationItem self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.StepRepr_CompoundRepresentationItem_NbItemElement(self, *args)


    def SetItemElement(self, *args):
        """
        SetItemElement(StepRepr_CompoundRepresentationItem self, Handle_StepRepr_HArray1OfRepresentationItem item_element)

        :type item_element: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfRepresentationItem

        """
        return _StepRepr.StepRepr_CompoundRepresentationItem_SetItemElement(self, *args)


    def ItemElementValue(self, *args):
        """
        ItemElementValue(StepRepr_CompoundRepresentationItem self, Standard_Integer const num) -> Handle_StepRepr_RepresentationItem

        :type num: int
        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepRepr.StepRepr_CompoundRepresentationItem_ItemElementValue(self, *args)


    def SetItemElementValue(self, *args):
        """
        SetItemElementValue(StepRepr_CompoundRepresentationItem self, Standard_Integer const num, Handle_StepRepr_RepresentationItem anelement)

        :type num: int
        :type anelement: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepRepr.StepRepr_CompoundRepresentationItem_SetItemElementValue(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_CompoundRepresentationItem_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_CompoundRepresentationItem_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_CompoundRepresentationItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_CompoundRepresentationItem
StepRepr_CompoundRepresentationItem_swigregister = _StepRepr.StepRepr_CompoundRepresentationItem_swigregister
StepRepr_CompoundRepresentationItem_swigregister(StepRepr_CompoundRepresentationItem)

def StepRepr_CompoundRepresentationItem_get_type_name(*args):
    """
    StepRepr_CompoundRepresentationItem_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_CompoundRepresentationItem_get_type_name(*args)

def StepRepr_CompoundRepresentationItem_get_type_descriptor(*args):
    """
    StepRepr_CompoundRepresentationItem_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_CompoundRepresentationItem_get_type_descriptor(*args)

class StepRepr_SuppliedPartRelationship(StepBasic.StepBasic_ProductDefinitionRelationship):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_SuppliedPartRelationship
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_SuppliedPartRelationship(self) 
            return h


    def __init__(self, *args):
        """__init__(StepRepr_SuppliedPartRelationship self) -> StepRepr_SuppliedPartRelationship"""
        this = _StepRepr.new_StepRepr_SuppliedPartRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_SuppliedPartRelationship_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_SuppliedPartRelationship_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_SuppliedPartRelationship_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_SuppliedPartRelationship
StepRepr_SuppliedPartRelationship_swigregister = _StepRepr.StepRepr_SuppliedPartRelationship_swigregister
StepRepr_SuppliedPartRelationship_swigregister(StepRepr_SuppliedPartRelationship)

def StepRepr_SuppliedPartRelationship_get_type_name(*args):
    """
    StepRepr_SuppliedPartRelationship_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_SuppliedPartRelationship_get_type_name(*args)

def StepRepr_SuppliedPartRelationship_get_type_descriptor(*args):
    """
    StepRepr_SuppliedPartRelationship_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_SuppliedPartRelationship_get_type_descriptor(*args)

class StepRepr_CompShAspAndDatumFeatAndShAsp(StepRepr_ShapeAspect):
    """Added for Dimensional Tolerances"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_CompShAspAndDatumFeatAndShAsp
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_CompShAspAndDatumFeatAndShAsp(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_CompShAspAndDatumFeatAndShAsp self) -> StepRepr_CompShAspAndDatumFeatAndShAsp

        Added for Dimensional Tolerances
        """
        this = _StepRepr.new_StepRepr_CompShAspAndDatumFeatAndShAsp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_CompShAspAndDatumFeatAndShAsp_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_CompShAspAndDatumFeatAndShAsp_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_CompShAspAndDatumFeatAndShAsp_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_CompShAspAndDatumFeatAndShAsp
StepRepr_CompShAspAndDatumFeatAndShAsp_swigregister = _StepRepr.StepRepr_CompShAspAndDatumFeatAndShAsp_swigregister
StepRepr_CompShAspAndDatumFeatAndShAsp_swigregister(StepRepr_CompShAspAndDatumFeatAndShAsp)

def StepRepr_CompShAspAndDatumFeatAndShAsp_get_type_name(*args):
    """
    StepRepr_CompShAspAndDatumFeatAndShAsp_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_CompShAspAndDatumFeatAndShAsp_get_type_name(*args)

def StepRepr_CompShAspAndDatumFeatAndShAsp_get_type_descriptor(*args):
    """
    StepRepr_CompShAspAndDatumFeatAndShAsp_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_CompShAspAndDatumFeatAndShAsp_get_type_descriptor(*args)

class StepRepr_HArray1OfRepresentationItem(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_HArray1OfRepresentationItem
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_HArray1OfRepresentationItem(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_HArray1OfRepresentationItem self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepRepr_HArray1OfRepresentationItem
        __init__(StepRepr_HArray1OfRepresentationItem self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_StepRepr_RepresentationItem theValue) -> StepRepr_HArray1OfRepresentationItem
        __init__(StepRepr_HArray1OfRepresentationItem self, NCollection_Array1_Handle_StepRepr_RepresentationItem theOther) -> StepRepr_HArray1OfRepresentationItem

        :type theOther: OCC.wrapper.StepRepr.StepRepr_Array1OfRepresentationItem

        """
        this = _StepRepr.new_StepRepr_HArray1OfRepresentationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepRepr.StepRepr_Array1OfRepresentationItem

        """
        res = _StepRepr.StepRepr_HArray1OfRepresentationItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepRepr_HArray1OfRepresentationItem self) -> NCollection_Array1_Handle_StepRepr_RepresentationItem

        :rtype: OCC.wrapper.StepRepr.StepRepr_Array1OfRepresentationItem

        """
        return _StepRepr.StepRepr_HArray1OfRepresentationItem_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_HArray1OfRepresentationItem_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_HArray1OfRepresentationItem_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_HArray1OfRepresentationItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_HArray1OfRepresentationItem
StepRepr_HArray1OfRepresentationItem_swigregister = _StepRepr.StepRepr_HArray1OfRepresentationItem_swigregister
StepRepr_HArray1OfRepresentationItem_swigregister(StepRepr_HArray1OfRepresentationItem)

def StepRepr_HArray1OfRepresentationItem_get_type_name(*args):
    """
    StepRepr_HArray1OfRepresentationItem_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_HArray1OfRepresentationItem_get_type_name(*args)

def StepRepr_HArray1OfRepresentationItem_get_type_descriptor(*args):
    """
    StepRepr_HArray1OfRepresentationItem_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_HArray1OfRepresentationItem_get_type_descriptor(*args)

class StepRepr_HArray1OfPropertyDefinitionRepresentation(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_HArray1OfPropertyDefinitionRepresentation self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepRepr_HArray1OfPropertyDefinitionRepresentation
        __init__(StepRepr_HArray1OfPropertyDefinitionRepresentation self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_StepRepr_PropertyDefinitionRepresentation theValue) -> StepRepr_HArray1OfPropertyDefinitionRepresentation
        __init__(StepRepr_HArray1OfPropertyDefinitionRepresentation self, NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation theOther) -> StepRepr_HArray1OfPropertyDefinitionRepresentation

        :type theOther: OCC.wrapper.StepRepr.StepRepr_Array1OfPropertyDefinitionRepresentation

        """
        this = _StepRepr.new_StepRepr_HArray1OfPropertyDefinitionRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepRepr.StepRepr_Array1OfPropertyDefinitionRepresentation

        """
        res = _StepRepr.StepRepr_HArray1OfPropertyDefinitionRepresentation_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepRepr_HArray1OfPropertyDefinitionRepresentation self) -> NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation

        :rtype: OCC.wrapper.StepRepr.StepRepr_Array1OfPropertyDefinitionRepresentation

        """
        return _StepRepr.StepRepr_HArray1OfPropertyDefinitionRepresentation_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_HArray1OfPropertyDefinitionRepresentation_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_HArray1OfPropertyDefinitionRepresentation_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_HArray1OfPropertyDefinitionRepresentation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_HArray1OfPropertyDefinitionRepresentation
StepRepr_HArray1OfPropertyDefinitionRepresentation_swigregister = _StepRepr.StepRepr_HArray1OfPropertyDefinitionRepresentation_swigregister
StepRepr_HArray1OfPropertyDefinitionRepresentation_swigregister(StepRepr_HArray1OfPropertyDefinitionRepresentation)

def StepRepr_HArray1OfPropertyDefinitionRepresentation_get_type_name(*args):
    """
    StepRepr_HArray1OfPropertyDefinitionRepresentation_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_HArray1OfPropertyDefinitionRepresentation_get_type_name(*args)

def StepRepr_HArray1OfPropertyDefinitionRepresentation_get_type_descriptor(*args):
    """
    StepRepr_HArray1OfPropertyDefinitionRepresentation_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_HArray1OfPropertyDefinitionRepresentation_get_type_descriptor(*args)

class StepRepr_MaterialProperty(StepRepr_PropertyDefinition):
    """Representation of STEP entity MaterialProperty"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_MaterialProperty
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_MaterialProperty(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_MaterialProperty self) -> StepRepr_MaterialProperty

        Empty constructor


        """
        this = _StepRepr.new_StepRepr_MaterialProperty(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_MaterialProperty_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_MaterialProperty_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_MaterialProperty_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_MaterialProperty
StepRepr_MaterialProperty_swigregister = _StepRepr.StepRepr_MaterialProperty_swigregister
StepRepr_MaterialProperty_swigregister(StepRepr_MaterialProperty)

def StepRepr_MaterialProperty_get_type_name(*args):
    """
    StepRepr_MaterialProperty_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_MaterialProperty_get_type_name(*args)

def StepRepr_MaterialProperty_get_type_descriptor(*args):
    """
    StepRepr_MaterialProperty_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_MaterialProperty_get_type_descriptor(*args)

class StepRepr_Tangent(StepRepr_DerivedShapeAspect):
    """Added for Dimensional Tolerances"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_Tangent
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_Tangent(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_Tangent self) -> StepRepr_Tangent

        Added for Dimensional Tolerances
        """
        this = _StepRepr.new_StepRepr_Tangent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_Tangent_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_Tangent_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_Tangent_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_Tangent
StepRepr_Tangent_swigregister = _StepRepr.StepRepr_Tangent_swigregister
StepRepr_Tangent_swigregister(StepRepr_Tangent)

def StepRepr_Tangent_get_type_name(*args):
    """
    StepRepr_Tangent_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_Tangent_get_type_name(*args)

def StepRepr_Tangent_get_type_descriptor(*args):
    """
    StepRepr_Tangent_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_Tangent_get_type_descriptor(*args)

class StepRepr_PropertyDefinitionRelationship(Standard.Standard_Transient):
    """Representation of STEP entity PropertyDefinitionRelationship"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_PropertyDefinitionRelationship
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_PropertyDefinitionRelationship(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_PropertyDefinitionRelationship self) -> StepRepr_PropertyDefinitionRelationship

        Empty constructor


        """
        this = _StepRepr.new_StepRepr_PropertyDefinitionRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepRepr_PropertyDefinitionRelationship self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepRepr_PropertyDefinition aRelatingPropertyDefinition, Handle_StepRepr_PropertyDefinition aRelatedPropertyDefinition)

        Initialize all fields (own and inherited)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aRelatingPropertyDefinition: OCC.wrapper.StepRepr.Handle_StepRepr_PropertyDefinition
        :type aRelatedPropertyDefinition: OCC.wrapper.StepRepr.Handle_StepRepr_PropertyDefinition

        """
        return _StepRepr.StepRepr_PropertyDefinitionRelationship_Init(self, *args)


    def Name(self, *args):
        """
        Name(StepRepr_PropertyDefinitionRelationship self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_PropertyDefinitionRelationship_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(StepRepr_PropertyDefinitionRelationship self, Handle_TCollection_HAsciiString Name)

        Set field Name

        :type Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_PropertyDefinitionRelationship_SetName(self, *args)


    def Description(self, *args):
        """
        Description(StepRepr_PropertyDefinitionRelationship self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_PropertyDefinitionRelationship_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(StepRepr_PropertyDefinitionRelationship self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_PropertyDefinitionRelationship_SetDescription(self, *args)


    def RelatingPropertyDefinition(self, *args):
        """
        RelatingPropertyDefinition(StepRepr_PropertyDefinitionRelationship self) -> Handle_StepRepr_PropertyDefinition

        Returns field RelatingPropertyDefinition

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_PropertyDefinition

        """
        return _StepRepr.StepRepr_PropertyDefinitionRelationship_RelatingPropertyDefinition(self, *args)


    def SetRelatingPropertyDefinition(self, *args):
        """
        SetRelatingPropertyDefinition(StepRepr_PropertyDefinitionRelationship self, Handle_StepRepr_PropertyDefinition RelatingPropertyDefinition)

        Set field RelatingPropertyDefinition

        :type RelatingPropertyDefinition: OCC.wrapper.StepRepr.Handle_StepRepr_PropertyDefinition

        """
        return _StepRepr.StepRepr_PropertyDefinitionRelationship_SetRelatingPropertyDefinition(self, *args)


    def RelatedPropertyDefinition(self, *args):
        """
        RelatedPropertyDefinition(StepRepr_PropertyDefinitionRelationship self) -> Handle_StepRepr_PropertyDefinition

        Returns field RelatedPropertyDefinition

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_PropertyDefinition

        """
        return _StepRepr.StepRepr_PropertyDefinitionRelationship_RelatedPropertyDefinition(self, *args)


    def SetRelatedPropertyDefinition(self, *args):
        """
        SetRelatedPropertyDefinition(StepRepr_PropertyDefinitionRelationship self, Handle_StepRepr_PropertyDefinition RelatedPropertyDefinition)

        Set field RelatedPropertyDefinition

        :type RelatedPropertyDefinition: OCC.wrapper.StepRepr.Handle_StepRepr_PropertyDefinition

        """
        return _StepRepr.StepRepr_PropertyDefinitionRelationship_SetRelatedPropertyDefinition(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_PropertyDefinitionRelationship_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_PropertyDefinitionRelationship_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_PropertyDefinitionRelationship_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_PropertyDefinitionRelationship
StepRepr_PropertyDefinitionRelationship_swigregister = _StepRepr.StepRepr_PropertyDefinitionRelationship_swigregister
StepRepr_PropertyDefinitionRelationship_swigregister(StepRepr_PropertyDefinitionRelationship)

def StepRepr_PropertyDefinitionRelationship_get_type_name(*args):
    """
    StepRepr_PropertyDefinitionRelationship_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_PropertyDefinitionRelationship_get_type_name(*args)

def StepRepr_PropertyDefinitionRelationship_get_type_descriptor(*args):
    """
    StepRepr_PropertyDefinitionRelationship_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_PropertyDefinitionRelationship_get_type_descriptor(*args)

class StepRepr_FeatureForDatumTargetRelationship(StepRepr_ShapeAspectRelationship):
    """Representation of STEP entity DimensionalLocation"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_FeatureForDatumTargetRelationship
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_FeatureForDatumTargetRelationship(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_FeatureForDatumTargetRelationship self) -> StepRepr_FeatureForDatumTargetRelationship

        Empty constructor


        """
        this = _StepRepr.new_StepRepr_FeatureForDatumTargetRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_FeatureForDatumTargetRelationship_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_FeatureForDatumTargetRelationship_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_FeatureForDatumTargetRelationship_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_FeatureForDatumTargetRelationship
StepRepr_FeatureForDatumTargetRelationship_swigregister = _StepRepr.StepRepr_FeatureForDatumTargetRelationship_swigregister
StepRepr_FeatureForDatumTargetRelationship_swigregister(StepRepr_FeatureForDatumTargetRelationship)

def StepRepr_FeatureForDatumTargetRelationship_get_type_name(*args):
    """
    StepRepr_FeatureForDatumTargetRelationship_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_FeatureForDatumTargetRelationship_get_type_name(*args)

def StepRepr_FeatureForDatumTargetRelationship_get_type_descriptor(*args):
    """
    StepRepr_FeatureForDatumTargetRelationship_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_FeatureForDatumTargetRelationship_get_type_descriptor(*args)

class StepRepr_CompositeGroupShapeAspect(StepRepr_CompositeShapeAspect):
    """Added for Dimensional Tolerances"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_CompositeGroupShapeAspect
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_CompositeGroupShapeAspect(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_CompositeGroupShapeAspect self) -> StepRepr_CompositeGroupShapeAspect

        Added for Dimensional Tolerances
        """
        this = _StepRepr.new_StepRepr_CompositeGroupShapeAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_CompositeGroupShapeAspect_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_CompositeGroupShapeAspect_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_CompositeGroupShapeAspect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_CompositeGroupShapeAspect
StepRepr_CompositeGroupShapeAspect_swigregister = _StepRepr.StepRepr_CompositeGroupShapeAspect_swigregister
StepRepr_CompositeGroupShapeAspect_swigregister(StepRepr_CompositeGroupShapeAspect)

def StepRepr_CompositeGroupShapeAspect_get_type_name(*args):
    """
    StepRepr_CompositeGroupShapeAspect_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_CompositeGroupShapeAspect_get_type_name(*args)

def StepRepr_CompositeGroupShapeAspect_get_type_descriptor(*args):
    """
    StepRepr_CompositeGroupShapeAspect_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_CompositeGroupShapeAspect_get_type_descriptor(*args)

class StepRepr_Apex(StepRepr_DerivedShapeAspect):
    """Added for Dimensional Tolerances"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_Apex
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_Apex(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_Apex self) -> StepRepr_Apex

        Added for Dimensional Tolerances
        """
        this = _StepRepr.new_StepRepr_Apex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_Apex_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_Apex_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_Apex_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_Apex
StepRepr_Apex_swigregister = _StepRepr.StepRepr_Apex_swigregister
StepRepr_Apex_swigregister(StepRepr_Apex)

def StepRepr_Apex_get_type_name(*args):
    """
    StepRepr_Apex_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_Apex_get_type_name(*args)

def StepRepr_Apex_get_type_descriptor(*args):
    """
    StepRepr_Apex_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_Apex_get_type_descriptor(*args)

class StepRepr_ConfigurationEffectivity(StepBasic.StepBasic_ProductDefinitionEffectivity):
    """Representation of STEP entity ConfigurationEffectivity"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_ConfigurationEffectivity
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_ConfigurationEffectivity(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_ConfigurationEffectivity self) -> StepRepr_ConfigurationEffectivity

        Empty constructor


        """
        this = _StepRepr.new_StepRepr_ConfigurationEffectivity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepRepr_ConfigurationEffectivity self, Handle_TCollection_HAsciiString aEffectivity_Id, Handle_StepBasic_ProductDefinitionRelationship aProductDefinitionEffectivity_Usage, Handle_StepRepr_ConfigurationDesign aConfiguration)

        Initialize all fields (own and inherited)

        :type aEffectivity_Id: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aProductDefinitionEffectivity_Usage: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionRelationship
        :type aConfiguration: OCC.wrapper.StepRepr.Handle_StepRepr_ConfigurationDesign

        """
        return _StepRepr.StepRepr_ConfigurationEffectivity_Init(self, *args)


    def Configuration(self, *args):
        """
        Configuration(StepRepr_ConfigurationEffectivity self) -> Handle_StepRepr_ConfigurationDesign

        Returns field Configuration

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ConfigurationDesign

        """
        return _StepRepr.StepRepr_ConfigurationEffectivity_Configuration(self, *args)


    def SetConfiguration(self, *args):
        """
        SetConfiguration(StepRepr_ConfigurationEffectivity self, Handle_StepRepr_ConfigurationDesign Configuration)

        Set field Configuration

        :type Configuration: OCC.wrapper.StepRepr.Handle_StepRepr_ConfigurationDesign

        """
        return _StepRepr.StepRepr_ConfigurationEffectivity_SetConfiguration(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_ConfigurationEffectivity_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_ConfigurationEffectivity_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_ConfigurationEffectivity_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_ConfigurationEffectivity
StepRepr_ConfigurationEffectivity_swigregister = _StepRepr.StepRepr_ConfigurationEffectivity_swigregister
StepRepr_ConfigurationEffectivity_swigregister(StepRepr_ConfigurationEffectivity)

def StepRepr_ConfigurationEffectivity_get_type_name(*args):
    """
    StepRepr_ConfigurationEffectivity_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_ConfigurationEffectivity_get_type_name(*args)

def StepRepr_ConfigurationEffectivity_get_type_descriptor(*args):
    """
    StepRepr_ConfigurationEffectivity_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_ConfigurationEffectivity_get_type_descriptor(*args)

class StepRepr_ValueRepresentationItem(StepRepr_RepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_ValueRepresentationItem
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_ValueRepresentationItem(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_ValueRepresentationItem self) -> StepRepr_ValueRepresentationItem

        Returns a ValueRepresentationItem


        """
        this = _StepRepr.new_StepRepr_ValueRepresentationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepRepr_ValueRepresentationItem self, Handle_TCollection_HAsciiString theName, Handle_StepBasic_MeasureValueMember theValueComponentMember)

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theValueComponentMember: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureValueMember

        """
        return _StepRepr.StepRepr_ValueRepresentationItem_Init(self, *args)


    def SetValueComponentMember(self, *args):
        """
        SetValueComponentMember(StepRepr_ValueRepresentationItem self, Handle_StepBasic_MeasureValueMember theValueComponentMember)

        :type theValueComponentMember: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureValueMember

        """
        return _StepRepr.StepRepr_ValueRepresentationItem_SetValueComponentMember(self, *args)


    def ValueComponentMember(self, *args):
        """
        ValueComponentMember(StepRepr_ValueRepresentationItem self) -> Handle_StepBasic_MeasureValueMember

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureValueMember

        """
        return _StepRepr.StepRepr_ValueRepresentationItem_ValueComponentMember(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_ValueRepresentationItem_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_ValueRepresentationItem_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_ValueRepresentationItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_ValueRepresentationItem
StepRepr_ValueRepresentationItem_swigregister = _StepRepr.StepRepr_ValueRepresentationItem_swigregister
StepRepr_ValueRepresentationItem_swigregister(StepRepr_ValueRepresentationItem)

def StepRepr_ValueRepresentationItem_get_type_name(*args):
    """
    StepRepr_ValueRepresentationItem_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_ValueRepresentationItem_get_type_name(*args)

def StepRepr_ValueRepresentationItem_get_type_descriptor(*args):
    """
    StepRepr_ValueRepresentationItem_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_ValueRepresentationItem_get_type_descriptor(*args)

class StepRepr_GeometricAlignment(StepRepr_DerivedShapeAspect):
    """Added for Dimensional Tolerances"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_GeometricAlignment
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_GeometricAlignment(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_GeometricAlignment self) -> StepRepr_GeometricAlignment

        Added for Dimensional Tolerances
        """
        this = _StepRepr.new_StepRepr_GeometricAlignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_GeometricAlignment_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_GeometricAlignment_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_GeometricAlignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_GeometricAlignment
StepRepr_GeometricAlignment_swigregister = _StepRepr.StepRepr_GeometricAlignment_swigregister
StepRepr_GeometricAlignment_swigregister(StepRepr_GeometricAlignment)

def StepRepr_GeometricAlignment_get_type_name(*args):
    """
    StepRepr_GeometricAlignment_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_GeometricAlignment_get_type_name(*args)

def StepRepr_GeometricAlignment_get_type_descriptor(*args):
    """
    StepRepr_GeometricAlignment_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_GeometricAlignment_get_type_descriptor(*args)

class StepRepr_QuantifiedAssemblyComponentUsage(StepRepr_AssemblyComponentUsage):
    """Representation of STEP entity QuantifiedAssemblyComponentUsage"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_QuantifiedAssemblyComponentUsage
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_QuantifiedAssemblyComponentUsage(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_QuantifiedAssemblyComponentUsage self) -> StepRepr_QuantifiedAssemblyComponentUsage

        Empty constructor


        """
        this = _StepRepr.new_StepRepr_QuantifiedAssemblyComponentUsage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepRepr_QuantifiedAssemblyComponentUsage self, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Id, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Name, Standard_Boolean const hasProductDefinitionRelationship_Description, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Description, Handle_StepBasic_ProductDefinition aProductDefinitionRelationship_RelatingProductDefinition, Handle_StepBasic_ProductDefinition aProductDefinitionRelationship_RelatedProductDefinition, Standard_Boolean const hasAssemblyComponentUsage_ReferenceDesignator, Handle_TCollection_HAsciiString aAssemblyComponentUsage_ReferenceDesignator, Handle_StepBasic_MeasureWithUnit aQuantity)
        Init(StepRepr_QuantifiedAssemblyComponentUsage self, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Id, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Name, Standard_Boolean const hasProductDefinitionRelationship_Description, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Description, StepBasic_ProductDefinitionOrReference aProductDefinitionRelationship_RelatingProductDefinition, StepBasic_ProductDefinitionOrReference aProductDefinitionRelationship_RelatedProductDefinition, Standard_Boolean const hasAssemblyComponentUsage_ReferenceDesignator, Handle_TCollection_HAsciiString aAssemblyComponentUsage_ReferenceDesignator, Handle_StepBasic_MeasureWithUnit aQuantity)

        Initialize all fields (own and inherited)

        :type aProductDefinitionRelationship_Id: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aProductDefinitionRelationship_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type hasProductDefinitionRelationship_Description: bool
        :type aProductDefinitionRelationship_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aProductDefinitionRelationship_RelatingProductDefinition: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference
        :type aProductDefinitionRelationship_RelatedProductDefinition: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference
        :type hasAssemblyComponentUsage_ReferenceDesignator: bool
        :type aAssemblyComponentUsage_ReferenceDesignator: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aQuantity: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepRepr.StepRepr_QuantifiedAssemblyComponentUsage_Init(self, *args)


    def Quantity(self, *args):
        """
        Quantity(StepRepr_QuantifiedAssemblyComponentUsage self) -> Handle_StepBasic_MeasureWithUnit

        Returns field Quantity

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepRepr.StepRepr_QuantifiedAssemblyComponentUsage_Quantity(self, *args)


    def SetQuantity(self, *args):
        """
        SetQuantity(StepRepr_QuantifiedAssemblyComponentUsage self, Handle_StepBasic_MeasureWithUnit Quantity)

        Set field Quantity

        :type Quantity: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepRepr.StepRepr_QuantifiedAssemblyComponentUsage_SetQuantity(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_QuantifiedAssemblyComponentUsage_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_QuantifiedAssemblyComponentUsage_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_QuantifiedAssemblyComponentUsage_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_QuantifiedAssemblyComponentUsage
StepRepr_QuantifiedAssemblyComponentUsage_swigregister = _StepRepr.StepRepr_QuantifiedAssemblyComponentUsage_swigregister
StepRepr_QuantifiedAssemblyComponentUsage_swigregister(StepRepr_QuantifiedAssemblyComponentUsage)

def StepRepr_QuantifiedAssemblyComponentUsage_get_type_name(*args):
    """
    StepRepr_QuantifiedAssemblyComponentUsage_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_QuantifiedAssemblyComponentUsage_get_type_name(*args)

def StepRepr_QuantifiedAssemblyComponentUsage_get_type_descriptor(*args):
    """
    StepRepr_QuantifiedAssemblyComponentUsage_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_QuantifiedAssemblyComponentUsage_get_type_descriptor(*args)

class StepRepr_DescriptiveRepresentationItem(StepRepr_RepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_DescriptiveRepresentationItem
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_DescriptiveRepresentationItem(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_DescriptiveRepresentationItem self) -> StepRepr_DescriptiveRepresentationItem

        Returns a DescriptiveRepresentationItem


        """
        this = _StepRepr.new_StepRepr_DescriptiveRepresentationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepRepr_DescriptiveRepresentationItem self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_DescriptiveRepresentationItem_Init(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(StepRepr_DescriptiveRepresentationItem self, Handle_TCollection_HAsciiString aDescription)

        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_DescriptiveRepresentationItem_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(StepRepr_DescriptiveRepresentationItem self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_DescriptiveRepresentationItem_Description(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_DescriptiveRepresentationItem_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_DescriptiveRepresentationItem_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_DescriptiveRepresentationItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_DescriptiveRepresentationItem
StepRepr_DescriptiveRepresentationItem_swigregister = _StepRepr.StepRepr_DescriptiveRepresentationItem_swigregister
StepRepr_DescriptiveRepresentationItem_swigregister(StepRepr_DescriptiveRepresentationItem)

def StepRepr_DescriptiveRepresentationItem_get_type_name(*args):
    """
    StepRepr_DescriptiveRepresentationItem_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_DescriptiveRepresentationItem_get_type_name(*args)

def StepRepr_DescriptiveRepresentationItem_get_type_descriptor(*args):
    """
    StepRepr_DescriptiveRepresentationItem_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_DescriptiveRepresentationItem_get_type_descriptor(*args)

class StepRepr_AllAroundShapeAspect(StepRepr_ContinuosShapeAspect):
    """Added for Dimensional Tolerances"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_AllAroundShapeAspect
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_AllAroundShapeAspect(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_AllAroundShapeAspect self) -> StepRepr_AllAroundShapeAspect

        Added for Dimensional Tolerances
        """
        this = _StepRepr.new_StepRepr_AllAroundShapeAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_AllAroundShapeAspect_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_AllAroundShapeAspect_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_AllAroundShapeAspect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_AllAroundShapeAspect
StepRepr_AllAroundShapeAspect_swigregister = _StepRepr.StepRepr_AllAroundShapeAspect_swigregister
StepRepr_AllAroundShapeAspect_swigregister(StepRepr_AllAroundShapeAspect)

def StepRepr_AllAroundShapeAspect_get_type_name(*args):
    """
    StepRepr_AllAroundShapeAspect_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_AllAroundShapeAspect_get_type_name(*args)

def StepRepr_AllAroundShapeAspect_get_type_descriptor(*args):
    """
    StepRepr_AllAroundShapeAspect_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_AllAroundShapeAspect_get_type_descriptor(*args)

class StepRepr_AssemblyComponentUsageSubstitute(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_AssemblyComponentUsageSubstitute
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_AssemblyComponentUsageSubstitute(self) 
            return h


    def __init__(self, *args):
        """__init__(StepRepr_AssemblyComponentUsageSubstitute self) -> StepRepr_AssemblyComponentUsageSubstitute"""
        this = _StepRepr.new_StepRepr_AssemblyComponentUsageSubstitute(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepRepr_AssemblyComponentUsageSubstitute self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDef, Handle_StepRepr_AssemblyComponentUsage aBase, Handle_StepRepr_AssemblyComponentUsage aSubs)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDef: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aBase: OCC.wrapper.StepRepr.Handle_StepRepr_AssemblyComponentUsage
        :type aSubs: OCC.wrapper.StepRepr.Handle_StepRepr_AssemblyComponentUsage

        """
        return _StepRepr.StepRepr_AssemblyComponentUsageSubstitute_Init(self, *args)


    def Name(self, *args):
        """
        Name(StepRepr_AssemblyComponentUsageSubstitute self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_AssemblyComponentUsageSubstitute_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(StepRepr_AssemblyComponentUsageSubstitute self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_AssemblyComponentUsageSubstitute_SetName(self, *args)


    def Definition(self, *args):
        """
        Definition(StepRepr_AssemblyComponentUsageSubstitute self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_AssemblyComponentUsageSubstitute_Definition(self, *args)


    def SetDefinition(self, *args):
        """
        SetDefinition(StepRepr_AssemblyComponentUsageSubstitute self, Handle_TCollection_HAsciiString aDef)

        :type aDef: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_AssemblyComponentUsageSubstitute_SetDefinition(self, *args)


    def Base(self, *args):
        """
        Base(StepRepr_AssemblyComponentUsageSubstitute self) -> Handle_StepRepr_AssemblyComponentUsage

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_AssemblyComponentUsage

        """
        return _StepRepr.StepRepr_AssemblyComponentUsageSubstitute_Base(self, *args)


    def SetBase(self, *args):
        """
        SetBase(StepRepr_AssemblyComponentUsageSubstitute self, Handle_StepRepr_AssemblyComponentUsage aBase)

        :type aBase: OCC.wrapper.StepRepr.Handle_StepRepr_AssemblyComponentUsage

        """
        return _StepRepr.StepRepr_AssemblyComponentUsageSubstitute_SetBase(self, *args)


    def Substitute(self, *args):
        """
        Substitute(StepRepr_AssemblyComponentUsageSubstitute self) -> Handle_StepRepr_AssemblyComponentUsage

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_AssemblyComponentUsage

        """
        return _StepRepr.StepRepr_AssemblyComponentUsageSubstitute_Substitute(self, *args)


    def SetSubstitute(self, *args):
        """
        SetSubstitute(StepRepr_AssemblyComponentUsageSubstitute self, Handle_StepRepr_AssemblyComponentUsage aSubstitute)

        :type aSubstitute: OCC.wrapper.StepRepr.Handle_StepRepr_AssemblyComponentUsage

        """
        return _StepRepr.StepRepr_AssemblyComponentUsageSubstitute_SetSubstitute(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_AssemblyComponentUsageSubstitute_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_AssemblyComponentUsageSubstitute_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_AssemblyComponentUsageSubstitute_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_AssemblyComponentUsageSubstitute
StepRepr_AssemblyComponentUsageSubstitute_swigregister = _StepRepr.StepRepr_AssemblyComponentUsageSubstitute_swigregister
StepRepr_AssemblyComponentUsageSubstitute_swigregister(StepRepr_AssemblyComponentUsageSubstitute)

def StepRepr_AssemblyComponentUsageSubstitute_get_type_name(*args):
    """
    StepRepr_AssemblyComponentUsageSubstitute_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_AssemblyComponentUsageSubstitute_get_type_name(*args)

def StepRepr_AssemblyComponentUsageSubstitute_get_type_descriptor(*args):
    """
    StepRepr_AssemblyComponentUsageSubstitute_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_AssemblyComponentUsageSubstitute_get_type_descriptor(*args)

class StepRepr_HArray1OfShapeAspect(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_HArray1OfShapeAspect
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_HArray1OfShapeAspect(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_HArray1OfShapeAspect self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepRepr_HArray1OfShapeAspect
        __init__(StepRepr_HArray1OfShapeAspect self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_StepRepr_ShapeAspect theValue) -> StepRepr_HArray1OfShapeAspect
        __init__(StepRepr_HArray1OfShapeAspect self, NCollection_Array1_Handle_StepRepr_ShapeAspect theOther) -> StepRepr_HArray1OfShapeAspect

        :type theOther: OCC.wrapper.StepRepr.StepRepr_Array1OfShapeAspect

        """
        this = _StepRepr.new_StepRepr_HArray1OfShapeAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepRepr.StepRepr_Array1OfShapeAspect

        """
        res = _StepRepr.StepRepr_HArray1OfShapeAspect_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepRepr_HArray1OfShapeAspect self) -> NCollection_Array1_Handle_StepRepr_ShapeAspect

        :rtype: OCC.wrapper.StepRepr.StepRepr_Array1OfShapeAspect

        """
        return _StepRepr.StepRepr_HArray1OfShapeAspect_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_HArray1OfShapeAspect_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_HArray1OfShapeAspect_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_HArray1OfShapeAspect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_HArray1OfShapeAspect
StepRepr_HArray1OfShapeAspect_swigregister = _StepRepr.StepRepr_HArray1OfShapeAspect_swigregister
StepRepr_HArray1OfShapeAspect_swigregister(StepRepr_HArray1OfShapeAspect)

def StepRepr_HArray1OfShapeAspect_get_type_name(*args):
    """
    StepRepr_HArray1OfShapeAspect_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_HArray1OfShapeAspect_get_type_name(*args)

def StepRepr_HArray1OfShapeAspect_get_type_descriptor(*args):
    """
    StepRepr_HArray1OfShapeAspect_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_HArray1OfShapeAspect_get_type_descriptor(*args)

class StepRepr_ProductConcept(Standard.Standard_Transient):
    """Representation of STEP entity ProductConcept"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_ProductConcept
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_ProductConcept(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_ProductConcept self) -> StepRepr_ProductConcept

        Empty constructor


        """
        this = _StepRepr.new_StepRepr_ProductConcept(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepRepr_ProductConcept self, Handle_TCollection_HAsciiString aId, Handle_TCollection_HAsciiString aName, Standard_Boolean const hasDescription, Handle_TCollection_HAsciiString aDescription, Handle_StepBasic_ProductConceptContext aMarketContext)

        Initialize all fields (own and inherited)

        :type aId: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type hasDescription: bool
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aMarketContext: OCC.wrapper.StepBasic.Handle_StepBasic_ProductConceptContext

        """
        return _StepRepr.StepRepr_ProductConcept_Init(self, *args)


    def Id(self, *args):
        """
        Id(StepRepr_ProductConcept self) -> Handle_TCollection_HAsciiString

        Returns field Id

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_ProductConcept_Id(self, *args)


    def SetId(self, *args):
        """
        SetId(StepRepr_ProductConcept self, Handle_TCollection_HAsciiString Id)

        Set field Id

        :type Id: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_ProductConcept_SetId(self, *args)


    def Name(self, *args):
        """
        Name(StepRepr_ProductConcept self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_ProductConcept_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(StepRepr_ProductConcept self, Handle_TCollection_HAsciiString Name)

        Set field Name

        :type Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_ProductConcept_SetName(self, *args)


    def Description(self, *args):
        """
        Description(StepRepr_ProductConcept self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_ProductConcept_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(StepRepr_ProductConcept self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_ProductConcept_SetDescription(self, *args)


    def HasDescription(self, *args):
        """
        HasDescription(StepRepr_ProductConcept self) -> Standard_Boolean

        Returns True if optional field Description is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.StepRepr_ProductConcept_HasDescription(self, *args)


    def MarketContext(self, *args):
        """
        MarketContext(StepRepr_ProductConcept self) -> Handle_StepBasic_ProductConceptContext

        Returns field MarketContext

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductConceptContext

        """
        return _StepRepr.StepRepr_ProductConcept_MarketContext(self, *args)


    def SetMarketContext(self, *args):
        """
        SetMarketContext(StepRepr_ProductConcept self, Handle_StepBasic_ProductConceptContext MarketContext)

        Set field MarketContext

        :type MarketContext: OCC.wrapper.StepBasic.Handle_StepBasic_ProductConceptContext

        """
        return _StepRepr.StepRepr_ProductConcept_SetMarketContext(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_ProductConcept_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_ProductConcept_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_ProductConcept_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_ProductConcept
StepRepr_ProductConcept_swigregister = _StepRepr.StepRepr_ProductConcept_swigregister
StepRepr_ProductConcept_swigregister(StepRepr_ProductConcept)

def StepRepr_ProductConcept_get_type_name(*args):
    """
    StepRepr_ProductConcept_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_ProductConcept_get_type_name(*args)

def StepRepr_ProductConcept_get_type_descriptor(*args):
    """
    StepRepr_ProductConcept_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_ProductConcept_get_type_descriptor(*args)

class StepRepr_ShapeAspectTransition(StepRepr_ShapeAspectRelationship):
    """Representation of STEP entity ShapeAspectTransition"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_ShapeAspectTransition
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_ShapeAspectTransition(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_ShapeAspectTransition self) -> StepRepr_ShapeAspectTransition

        Empty constructor


        """
        this = _StepRepr.new_StepRepr_ShapeAspectTransition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_ShapeAspectTransition_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_ShapeAspectTransition_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_ShapeAspectTransition_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_ShapeAspectTransition
StepRepr_ShapeAspectTransition_swigregister = _StepRepr.StepRepr_ShapeAspectTransition_swigregister
StepRepr_ShapeAspectTransition_swigregister(StepRepr_ShapeAspectTransition)

def StepRepr_ShapeAspectTransition_get_type_name(*args):
    """
    StepRepr_ShapeAspectTransition_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_ShapeAspectTransition_get_type_name(*args)

def StepRepr_ShapeAspectTransition_get_type_descriptor(*args):
    """
    StepRepr_ShapeAspectTransition_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_ShapeAspectTransition_get_type_descriptor(*args)

class StepRepr_NextAssemblyUsageOccurrence(StepRepr_AssemblyComponentUsage):
    """Representation of STEP entity NextAssemblyUsageOccurrence"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_NextAssemblyUsageOccurrence
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_NextAssemblyUsageOccurrence(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_NextAssemblyUsageOccurrence self) -> StepRepr_NextAssemblyUsageOccurrence

        Empty constructor


        """
        this = _StepRepr.new_StepRepr_NextAssemblyUsageOccurrence(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_NextAssemblyUsageOccurrence_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_NextAssemblyUsageOccurrence_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_NextAssemblyUsageOccurrence_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_NextAssemblyUsageOccurrence
StepRepr_NextAssemblyUsageOccurrence_swigregister = _StepRepr.StepRepr_NextAssemblyUsageOccurrence_swigregister
StepRepr_NextAssemblyUsageOccurrence_swigregister(StepRepr_NextAssemblyUsageOccurrence)

def StepRepr_NextAssemblyUsageOccurrence_get_type_name(*args):
    """
    StepRepr_NextAssemblyUsageOccurrence_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_NextAssemblyUsageOccurrence_get_type_name(*args)

def StepRepr_NextAssemblyUsageOccurrence_get_type_descriptor(*args):
    """
    StepRepr_NextAssemblyUsageOccurrence_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_NextAssemblyUsageOccurrence_get_type_descriptor(*args)

class StepRepr_MakeFromUsageOption(StepRepr_ProductDefinitionUsage):
    """Representation of STEP entity MakeFromUsageOption"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_MakeFromUsageOption
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_MakeFromUsageOption(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_MakeFromUsageOption self) -> StepRepr_MakeFromUsageOption

        Empty constructor


        """
        this = _StepRepr.new_StepRepr_MakeFromUsageOption(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepRepr_MakeFromUsageOption self, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Id, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Name, Standard_Boolean const hasProductDefinitionRelationship_Description, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Description, Handle_StepBasic_ProductDefinition aProductDefinitionRelationship_RelatingProductDefinition, Handle_StepBasic_ProductDefinition aProductDefinitionRelationship_RelatedProductDefinition, Standard_Integer const aRanking, Handle_TCollection_HAsciiString aRankingRationale, Handle_StepBasic_MeasureWithUnit aQuantity)
        Init(StepRepr_MakeFromUsageOption self, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Id, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Name, Standard_Boolean const hasProductDefinitionRelationship_Description, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Description, StepBasic_ProductDefinitionOrReference aProductDefinitionRelationship_RelatingProductDefinition, StepBasic_ProductDefinitionOrReference aProductDefinitionRelationship_RelatedProductDefinition, Standard_Integer const aRanking, Handle_TCollection_HAsciiString aRankingRationale, Handle_StepBasic_MeasureWithUnit aQuantity)

        Initialize all fields (own and inherited)

        :type aProductDefinitionRelationship_Id: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aProductDefinitionRelationship_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type hasProductDefinitionRelationship_Description: bool
        :type aProductDefinitionRelationship_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aProductDefinitionRelationship_RelatingProductDefinition: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference
        :type aProductDefinitionRelationship_RelatedProductDefinition: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference
        :type aRanking: int
        :type aRankingRationale: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aQuantity: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepRepr.StepRepr_MakeFromUsageOption_Init(self, *args)


    def Ranking(self, *args):
        """
        Ranking(StepRepr_MakeFromUsageOption self) -> Standard_Integer

        Returns field Ranking

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.StepRepr_MakeFromUsageOption_Ranking(self, *args)


    def SetRanking(self, *args):
        """
        SetRanking(StepRepr_MakeFromUsageOption self, Standard_Integer const Ranking)

        Set field Ranking

        :type Ranking: int

        """
        return _StepRepr.StepRepr_MakeFromUsageOption_SetRanking(self, *args)


    def RankingRationale(self, *args):
        """
        RankingRationale(StepRepr_MakeFromUsageOption self) -> Handle_TCollection_HAsciiString

        Returns field RankingRationale

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_MakeFromUsageOption_RankingRationale(self, *args)


    def SetRankingRationale(self, *args):
        """
        SetRankingRationale(StepRepr_MakeFromUsageOption self, Handle_TCollection_HAsciiString RankingRationale)

        Set field RankingRationale

        :type RankingRationale: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_MakeFromUsageOption_SetRankingRationale(self, *args)


    def Quantity(self, *args):
        """
        Quantity(StepRepr_MakeFromUsageOption self) -> Handle_StepBasic_MeasureWithUnit

        Returns field Quantity

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepRepr.StepRepr_MakeFromUsageOption_Quantity(self, *args)


    def SetQuantity(self, *args):
        """
        SetQuantity(StepRepr_MakeFromUsageOption self, Handle_StepBasic_MeasureWithUnit Quantity)

        Set field Quantity

        :type Quantity: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepRepr.StepRepr_MakeFromUsageOption_SetQuantity(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_MakeFromUsageOption_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_MakeFromUsageOption_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_MakeFromUsageOption_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_MakeFromUsageOption
StepRepr_MakeFromUsageOption_swigregister = _StepRepr.StepRepr_MakeFromUsageOption_swigregister
StepRepr_MakeFromUsageOption_swigregister(StepRepr_MakeFromUsageOption)

def StepRepr_MakeFromUsageOption_get_type_name(*args):
    """
    StepRepr_MakeFromUsageOption_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_MakeFromUsageOption_get_type_name(*args)

def StepRepr_MakeFromUsageOption_get_type_descriptor(*args):
    """
    StepRepr_MakeFromUsageOption_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_MakeFromUsageOption_get_type_descriptor(*args)

class StepRepr_IntegerRepresentationItem(StepRepr_RepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_IntegerRepresentationItem
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_IntegerRepresentationItem(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_IntegerRepresentationItem self) -> StepRepr_IntegerRepresentationItem

        Returns a IntegerRepresentationItem


        """
        this = _StepRepr.new_StepRepr_IntegerRepresentationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepRepr_IntegerRepresentationItem self, Handle_TCollection_HAsciiString theName, Standard_Integer const theValue)

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theValue: int

        """
        return _StepRepr.StepRepr_IntegerRepresentationItem_Init(self, *args)


    def SetValue(self, *args):
        """
        SetValue(StepRepr_IntegerRepresentationItem self, Standard_Integer const theValue)

        :type theValue: int

        """
        return _StepRepr.StepRepr_IntegerRepresentationItem_SetValue(self, *args)


    def Value(self, *args):
        """
        Value(StepRepr_IntegerRepresentationItem self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.StepRepr_IntegerRepresentationItem_Value(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_IntegerRepresentationItem_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_IntegerRepresentationItem_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_IntegerRepresentationItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_IntegerRepresentationItem
StepRepr_IntegerRepresentationItem_swigregister = _StepRepr.StepRepr_IntegerRepresentationItem_swigregister
StepRepr_IntegerRepresentationItem_swigregister(StepRepr_IntegerRepresentationItem)

def StepRepr_IntegerRepresentationItem_get_type_name(*args):
    """
    StepRepr_IntegerRepresentationItem_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_IntegerRepresentationItem_get_type_name(*args)

def StepRepr_IntegerRepresentationItem_get_type_descriptor(*args):
    """
    StepRepr_IntegerRepresentationItem_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_IntegerRepresentationItem_get_type_descriptor(*args)

class StepRepr_FunctionallyDefinedTransformation(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_FunctionallyDefinedTransformation
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_FunctionallyDefinedTransformation(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_FunctionallyDefinedTransformation self) -> StepRepr_FunctionallyDefinedTransformation

        Returns a FunctionallyDefinedTransformation


        """
        this = _StepRepr.new_StepRepr_FunctionallyDefinedTransformation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepRepr_FunctionallyDefinedTransformation self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_FunctionallyDefinedTransformation_Init(self, *args)


    def SetName(self, *args):
        """
        SetName(StepRepr_FunctionallyDefinedTransformation self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_FunctionallyDefinedTransformation_SetName(self, *args)


    def Name(self, *args):
        """
        Name(StepRepr_FunctionallyDefinedTransformation self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_FunctionallyDefinedTransformation_Name(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(StepRepr_FunctionallyDefinedTransformation self, Handle_TCollection_HAsciiString aDescription)

        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_FunctionallyDefinedTransformation_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(StepRepr_FunctionallyDefinedTransformation self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_FunctionallyDefinedTransformation_Description(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_FunctionallyDefinedTransformation_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_FunctionallyDefinedTransformation_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_FunctionallyDefinedTransformation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_FunctionallyDefinedTransformation
StepRepr_FunctionallyDefinedTransformation_swigregister = _StepRepr.StepRepr_FunctionallyDefinedTransformation_swigregister
StepRepr_FunctionallyDefinedTransformation_swigregister(StepRepr_FunctionallyDefinedTransformation)

def StepRepr_FunctionallyDefinedTransformation_get_type_name(*args):
    """
    StepRepr_FunctionallyDefinedTransformation_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_FunctionallyDefinedTransformation_get_type_name(*args)

def StepRepr_FunctionallyDefinedTransformation_get_type_descriptor(*args):
    """
    StepRepr_FunctionallyDefinedTransformation_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_FunctionallyDefinedTransformation_get_type_descriptor(*args)

class StepRepr_RepresentationRelationshipWithTransformation(StepRepr_ShapeRepresentationRelationship):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_RepresentationRelationshipWithTransformation
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_RepresentationRelationshipWithTransformation(self) 
            return h


    def __init__(self, *args):
        """__init__(StepRepr_RepresentationRelationshipWithTransformation self) -> StepRepr_RepresentationRelationshipWithTransformation"""
        this = _StepRepr.new_StepRepr_RepresentationRelationshipWithTransformation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepRepr_RepresentationRelationshipWithTransformation self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepRepr_Representation aRep1, Handle_StepRepr_Representation aRep2, StepRepr_Transformation aTransf)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aRep1: OCC.wrapper.StepRepr.Handle_StepRepr_Representation
        :type aRep2: OCC.wrapper.StepRepr.Handle_StepRepr_Representation
        :type aTransf: OCC.wrapper.StepRepr.StepRepr_Transformation

        """
        return _StepRepr.StepRepr_RepresentationRelationshipWithTransformation_Init(self, *args)


    def TransformationOperator(self, *args):
        """
        TransformationOperator(StepRepr_RepresentationRelationshipWithTransformation self) -> StepRepr_Transformation

        :rtype: OCC.wrapper.StepRepr.StepRepr_Transformation

        """
        return _StepRepr.StepRepr_RepresentationRelationshipWithTransformation_TransformationOperator(self, *args)


    def SetTransformationOperator(self, *args):
        """
        SetTransformationOperator(StepRepr_RepresentationRelationshipWithTransformation self, StepRepr_Transformation aTrans)

        :type aTrans: OCC.wrapper.StepRepr.StepRepr_Transformation

        """
        return _StepRepr.StepRepr_RepresentationRelationshipWithTransformation_SetTransformationOperator(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_RepresentationRelationshipWithTransformation_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_RepresentationRelationshipWithTransformation_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_RepresentationRelationshipWithTransformation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_RepresentationRelationshipWithTransformation
StepRepr_RepresentationRelationshipWithTransformation_swigregister = _StepRepr.StepRepr_RepresentationRelationshipWithTransformation_swigregister
StepRepr_RepresentationRelationshipWithTransformation_swigregister(StepRepr_RepresentationRelationshipWithTransformation)

def StepRepr_RepresentationRelationshipWithTransformation_get_type_name(*args):
    """
    StepRepr_RepresentationRelationshipWithTransformation_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_RepresentationRelationshipWithTransformation_get_type_name(*args)

def StepRepr_RepresentationRelationshipWithTransformation_get_type_descriptor(*args):
    """
    StepRepr_RepresentationRelationshipWithTransformation_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_RepresentationRelationshipWithTransformation_get_type_descriptor(*args)

class StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp(StepRepr_CompShAspAndDatumFeatAndShAsp):
    """Added for Dimensional Tolerances"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp self) -> StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp

        Added for Dimensional Tolerances
        """
        this = _StepRepr.new_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp
StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_swigregister = _StepRepr.StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_swigregister
StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_swigregister(StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp)

def StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_get_type_name(*args):
    """
    StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_get_type_name(*args)

def StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_get_type_descriptor(*args):
    """
    StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_get_type_descriptor(*args)

class StepRepr_MaterialDesignation(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_MaterialDesignation
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_MaterialDesignation(self) 
            return h


    def __init__(self, *args):
        """__init__(StepRepr_MaterialDesignation self) -> StepRepr_MaterialDesignation"""
        this = _StepRepr.new_StepRepr_MaterialDesignation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepRepr_MaterialDesignation self, Handle_TCollection_HAsciiString aName, StepRepr_CharacterizedDefinition aOfDefinition)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aOfDefinition: OCC.wrapper.StepRepr.StepRepr_CharacterizedDefinition

        """
        return _StepRepr.StepRepr_MaterialDesignation_Init(self, *args)


    def SetName(self, *args):
        """
        SetName(StepRepr_MaterialDesignation self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_MaterialDesignation_SetName(self, *args)


    def Name(self, *args):
        """
        Name(StepRepr_MaterialDesignation self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_MaterialDesignation_Name(self, *args)


    def SetOfDefinition(self, *args):
        """
        SetOfDefinition(StepRepr_MaterialDesignation self, StepRepr_CharacterizedDefinition aOfDefinition)

        :type aOfDefinition: OCC.wrapper.StepRepr.StepRepr_CharacterizedDefinition

        """
        return _StepRepr.StepRepr_MaterialDesignation_SetOfDefinition(self, *args)


    def OfDefinition(self, *args):
        """
        OfDefinition(StepRepr_MaterialDesignation self) -> StepRepr_CharacterizedDefinition

        :rtype: OCC.wrapper.StepRepr.StepRepr_CharacterizedDefinition

        """
        return _StepRepr.StepRepr_MaterialDesignation_OfDefinition(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_MaterialDesignation_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_MaterialDesignation_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_MaterialDesignation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_MaterialDesignation
StepRepr_MaterialDesignation_swigregister = _StepRepr.StepRepr_MaterialDesignation_swigregister
StepRepr_MaterialDesignation_swigregister(StepRepr_MaterialDesignation)

def StepRepr_MaterialDesignation_get_type_name(*args):
    """
    StepRepr_MaterialDesignation_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_MaterialDesignation_get_type_name(*args)

def StepRepr_MaterialDesignation_get_type_descriptor(*args):
    """
    StepRepr_MaterialDesignation_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_MaterialDesignation_get_type_descriptor(*args)

class StepRepr_RepresentationMap(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_RepresentationMap
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_RepresentationMap(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_RepresentationMap self) -> StepRepr_RepresentationMap

        Returns a RepresentationMap


        """
        this = _StepRepr.new_StepRepr_RepresentationMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepRepr_RepresentationMap self, Handle_StepRepr_RepresentationItem aMappingOrigin, Handle_StepRepr_Representation aMappedRepresentation)

        :type aMappingOrigin: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem
        :type aMappedRepresentation: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepRepr.StepRepr_RepresentationMap_Init(self, *args)


    def SetMappingOrigin(self, *args):
        """
        SetMappingOrigin(StepRepr_RepresentationMap self, Handle_StepRepr_RepresentationItem aMappingOrigin)

        :type aMappingOrigin: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepRepr.StepRepr_RepresentationMap_SetMappingOrigin(self, *args)


    def MappingOrigin(self, *args):
        """
        MappingOrigin(StepRepr_RepresentationMap self) -> Handle_StepRepr_RepresentationItem

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepRepr.StepRepr_RepresentationMap_MappingOrigin(self, *args)


    def SetMappedRepresentation(self, *args):
        """
        SetMappedRepresentation(StepRepr_RepresentationMap self, Handle_StepRepr_Representation aMappedRepresentation)

        :type aMappedRepresentation: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepRepr.StepRepr_RepresentationMap_SetMappedRepresentation(self, *args)


    def MappedRepresentation(self, *args):
        """
        MappedRepresentation(StepRepr_RepresentationMap self) -> Handle_StepRepr_Representation

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepRepr.StepRepr_RepresentationMap_MappedRepresentation(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_RepresentationMap_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_RepresentationMap_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_RepresentationMap_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_RepresentationMap
StepRepr_RepresentationMap_swigregister = _StepRepr.StepRepr_RepresentationMap_swigregister
StepRepr_RepresentationMap_swigregister(StepRepr_RepresentationMap)

def StepRepr_RepresentationMap_get_type_name(*args):
    """
    StepRepr_RepresentationMap_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_RepresentationMap_get_type_name(*args)

def StepRepr_RepresentationMap_get_type_descriptor(*args):
    """
    StepRepr_RepresentationMap_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_RepresentationMap_get_type_descriptor(*args)

class StepRepr_SpecifiedHigherUsageOccurrence(StepRepr_AssemblyComponentUsage):
    """Representation of STEP entity SpecifiedHigherUsageOccurrence"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_SpecifiedHigherUsageOccurrence
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_SpecifiedHigherUsageOccurrence(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_SpecifiedHigherUsageOccurrence self) -> StepRepr_SpecifiedHigherUsageOccurrence

        Empty constructor


        """
        this = _StepRepr.new_StepRepr_SpecifiedHigherUsageOccurrence(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepRepr_SpecifiedHigherUsageOccurrence self, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Id, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Name, Standard_Boolean const hasProductDefinitionRelationship_Description, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Description, Handle_StepBasic_ProductDefinition aProductDefinitionRelationship_RelatingProductDefinition, Handle_StepBasic_ProductDefinition aProductDefinitionRelationship_RelatedProductDefinition, Standard_Boolean const hasAssemblyComponentUsage_ReferenceDesignator, Handle_TCollection_HAsciiString aAssemblyComponentUsage_ReferenceDesignator, Handle_StepRepr_AssemblyComponentUsage aUpperUsage, Handle_StepRepr_NextAssemblyUsageOccurrence aNextUsage)
        Init(StepRepr_SpecifiedHigherUsageOccurrence self, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Id, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Name, Standard_Boolean const hasProductDefinitionRelationship_Description, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Description, StepBasic_ProductDefinitionOrReference aProductDefinitionRelationship_RelatingProductDefinition, StepBasic_ProductDefinitionOrReference aProductDefinitionRelationship_RelatedProductDefinition, Standard_Boolean const hasAssemblyComponentUsage_ReferenceDesignator, Handle_TCollection_HAsciiString aAssemblyComponentUsage_ReferenceDesignator, Handle_StepRepr_AssemblyComponentUsage aUpperUsage, Handle_StepRepr_NextAssemblyUsageOccurrence aNextUsage)

        Initialize all fields (own and inherited)

        :type aProductDefinitionRelationship_Id: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aProductDefinitionRelationship_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type hasProductDefinitionRelationship_Description: bool
        :type aProductDefinitionRelationship_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aProductDefinitionRelationship_RelatingProductDefinition: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference
        :type aProductDefinitionRelationship_RelatedProductDefinition: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference
        :type hasAssemblyComponentUsage_ReferenceDesignator: bool
        :type aAssemblyComponentUsage_ReferenceDesignator: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aUpperUsage: OCC.wrapper.StepRepr.Handle_StepRepr_AssemblyComponentUsage
        :type aNextUsage: OCC.wrapper.StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence

        """
        return _StepRepr.StepRepr_SpecifiedHigherUsageOccurrence_Init(self, *args)


    def UpperUsage(self, *args):
        """
        UpperUsage(StepRepr_SpecifiedHigherUsageOccurrence self) -> Handle_StepRepr_AssemblyComponentUsage

        Returns field UpperUsage

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_AssemblyComponentUsage

        """
        return _StepRepr.StepRepr_SpecifiedHigherUsageOccurrence_UpperUsage(self, *args)


    def SetUpperUsage(self, *args):
        """
        SetUpperUsage(StepRepr_SpecifiedHigherUsageOccurrence self, Handle_StepRepr_AssemblyComponentUsage UpperUsage)

        Set field UpperUsage

        :type UpperUsage: OCC.wrapper.StepRepr.Handle_StepRepr_AssemblyComponentUsage

        """
        return _StepRepr.StepRepr_SpecifiedHigherUsageOccurrence_SetUpperUsage(self, *args)


    def NextUsage(self, *args):
        """
        NextUsage(StepRepr_SpecifiedHigherUsageOccurrence self) -> Handle_StepRepr_NextAssemblyUsageOccurrence

        Returns field NextUsage

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence

        """
        return _StepRepr.StepRepr_SpecifiedHigherUsageOccurrence_NextUsage(self, *args)


    def SetNextUsage(self, *args):
        """
        SetNextUsage(StepRepr_SpecifiedHigherUsageOccurrence self, Handle_StepRepr_NextAssemblyUsageOccurrence NextUsage)

        Set field NextUsage

        :type NextUsage: OCC.wrapper.StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence

        """
        return _StepRepr.StepRepr_SpecifiedHigherUsageOccurrence_SetNextUsage(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_SpecifiedHigherUsageOccurrence_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_SpecifiedHigherUsageOccurrence_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_SpecifiedHigherUsageOccurrence_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_SpecifiedHigherUsageOccurrence
StepRepr_SpecifiedHigherUsageOccurrence_swigregister = _StepRepr.StepRepr_SpecifiedHigherUsageOccurrence_swigregister
StepRepr_SpecifiedHigherUsageOccurrence_swigregister(StepRepr_SpecifiedHigherUsageOccurrence)

def StepRepr_SpecifiedHigherUsageOccurrence_get_type_name(*args):
    """
    StepRepr_SpecifiedHigherUsageOccurrence_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_SpecifiedHigherUsageOccurrence_get_type_name(*args)

def StepRepr_SpecifiedHigherUsageOccurrence_get_type_descriptor(*args):
    """
    StepRepr_SpecifiedHigherUsageOccurrence_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_SpecifiedHigherUsageOccurrence_get_type_descriptor(*args)

class StepRepr_HSequenceOfMaterialPropertyRepresentation(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_HSequenceOfMaterialPropertyRepresentation self) -> StepRepr_HSequenceOfMaterialPropertyRepresentation
        __init__(StepRepr_HSequenceOfMaterialPropertyRepresentation self, NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation theOther) -> StepRepr_HSequenceOfMaterialPropertyRepresentation

        :type theOther: OCC.wrapper.StepRepr.StepRepr_SequenceOfMaterialPropertyRepresentation

        """
        this = _StepRepr.new_StepRepr_HSequenceOfMaterialPropertyRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.StepRepr.StepRepr_SequenceOfMaterialPropertyRepresentation

        """
        res = _StepRepr.StepRepr_HSequenceOfMaterialPropertyRepresentation_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(StepRepr_HSequenceOfMaterialPropertyRepresentation self, Handle_StepRepr_MaterialPropertyRepresentation theItem)
        Append(StepRepr_HSequenceOfMaterialPropertyRepresentation self, NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation theSequence)

        :type theSequence: OCC.wrapper.StepRepr.StepRepr_SequenceOfMaterialPropertyRepresentation

        """
        return _StepRepr.StepRepr_HSequenceOfMaterialPropertyRepresentation_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(StepRepr_HSequenceOfMaterialPropertyRepresentation self) -> NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation

        :rtype: OCC.wrapper.StepRepr.StepRepr_SequenceOfMaterialPropertyRepresentation

        """
        return _StepRepr.StepRepr_HSequenceOfMaterialPropertyRepresentation_ChangeSequence(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_HSequenceOfMaterialPropertyRepresentation_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_HSequenceOfMaterialPropertyRepresentation_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_HSequenceOfMaterialPropertyRepresentation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_HSequenceOfMaterialPropertyRepresentation
StepRepr_HSequenceOfMaterialPropertyRepresentation_swigregister = _StepRepr.StepRepr_HSequenceOfMaterialPropertyRepresentation_swigregister
StepRepr_HSequenceOfMaterialPropertyRepresentation_swigregister(StepRepr_HSequenceOfMaterialPropertyRepresentation)

def StepRepr_HSequenceOfMaterialPropertyRepresentation_get_type_name(*args):
    """
    StepRepr_HSequenceOfMaterialPropertyRepresentation_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_HSequenceOfMaterialPropertyRepresentation_get_type_name(*args)

def StepRepr_HSequenceOfMaterialPropertyRepresentation_get_type_descriptor(*args):
    """
    StepRepr_HSequenceOfMaterialPropertyRepresentation_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_HSequenceOfMaterialPropertyRepresentation_get_type_descriptor(*args)

class StepRepr_ProductDefinitionShape(StepRepr_PropertyDefinition):
    """Representation of STEP entity ProductDefinitionShape"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_ProductDefinitionShape
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_ProductDefinitionShape(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_ProductDefinitionShape self) -> StepRepr_ProductDefinitionShape

        Empty constructor


        """
        this = _StepRepr.new_StepRepr_ProductDefinitionShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_ProductDefinitionShape_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_ProductDefinitionShape_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_ProductDefinitionShape_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_ProductDefinitionShape
StepRepr_ProductDefinitionShape_swigregister = _StepRepr.StepRepr_ProductDefinitionShape_swigregister
StepRepr_ProductDefinitionShape_swigregister(StepRepr_ProductDefinitionShape)

def StepRepr_ProductDefinitionShape_get_type_name(*args):
    """
    StepRepr_ProductDefinitionShape_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_ProductDefinitionShape_get_type_name(*args)

def StepRepr_ProductDefinitionShape_get_type_descriptor(*args):
    """
    StepRepr_ProductDefinitionShape_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_ProductDefinitionShape_get_type_descriptor(*args)

class StepRepr_ConstructiveGeometryRepresentation(StepRepr_Representation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_ConstructiveGeometryRepresentation
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_ConstructiveGeometryRepresentation(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_ConstructiveGeometryRepresentation self) -> StepRepr_ConstructiveGeometryRepresentation

        Returns a ConstructiveGeometryRepresentation


        """
        this = _StepRepr.new_StepRepr_ConstructiveGeometryRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_ConstructiveGeometryRepresentation_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_ConstructiveGeometryRepresentation_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_ConstructiveGeometryRepresentation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_ConstructiveGeometryRepresentation
StepRepr_ConstructiveGeometryRepresentation_swigregister = _StepRepr.StepRepr_ConstructiveGeometryRepresentation_swigregister
StepRepr_ConstructiveGeometryRepresentation_swigregister(StepRepr_ConstructiveGeometryRepresentation)

def StepRepr_ConstructiveGeometryRepresentation_get_type_name(*args):
    """
    StepRepr_ConstructiveGeometryRepresentation_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_ConstructiveGeometryRepresentation_get_type_name(*args)

def StepRepr_ConstructiveGeometryRepresentation_get_type_descriptor(*args):
    """
    StepRepr_ConstructiveGeometryRepresentation_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_ConstructiveGeometryRepresentation_get_type_descriptor(*args)

class StepRepr_ShapeRepresentationRelationshipWithTransformation(StepRepr_RepresentationRelationshipWithTransformation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation(self) 
            return h


    def __init__(self, *args):
        """__init__(StepRepr_ShapeRepresentationRelationshipWithTransformation self) -> StepRepr_ShapeRepresentationRelationshipWithTransformation"""
        this = _StepRepr.new_StepRepr_ShapeRepresentationRelationshipWithTransformation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_ShapeRepresentationRelationshipWithTransformation_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_ShapeRepresentationRelationshipWithTransformation_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_ShapeRepresentationRelationshipWithTransformation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_ShapeRepresentationRelationshipWithTransformation
StepRepr_ShapeRepresentationRelationshipWithTransformation_swigregister = _StepRepr.StepRepr_ShapeRepresentationRelationshipWithTransformation_swigregister
StepRepr_ShapeRepresentationRelationshipWithTransformation_swigregister(StepRepr_ShapeRepresentationRelationshipWithTransformation)

def StepRepr_ShapeRepresentationRelationshipWithTransformation_get_type_name(*args):
    """
    StepRepr_ShapeRepresentationRelationshipWithTransformation_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_ShapeRepresentationRelationshipWithTransformation_get_type_name(*args)

def StepRepr_ShapeRepresentationRelationshipWithTransformation_get_type_descriptor(*args):
    """
    StepRepr_ShapeRepresentationRelationshipWithTransformation_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_ShapeRepresentationRelationshipWithTransformation_get_type_descriptor(*args)

class StepRepr_ValueRange(StepRepr_CompoundRepresentationItem):
    """Added for Dimensional Tolerances"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_ValueRange
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_ValueRange(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_ValueRange self) -> StepRepr_ValueRange

        Added for Dimensional Tolerances
        """
        this = _StepRepr.new_StepRepr_ValueRange(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_ValueRange_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_ValueRange_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_ValueRange_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_ValueRange
StepRepr_ValueRange_swigregister = _StepRepr.StepRepr_ValueRange_swigregister
StepRepr_ValueRange_swigregister(StepRepr_ValueRange)

def StepRepr_ValueRange_get_type_name(*args):
    """
    StepRepr_ValueRange_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_ValueRange_get_type_name(*args)

def StepRepr_ValueRange_get_type_descriptor(*args):
    """
    StepRepr_ValueRange_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_ValueRange_get_type_descriptor(*args)

class StepRepr_DefinitionalRepresentation(StepRepr_Representation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_DefinitionalRepresentation
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_DefinitionalRepresentation(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_DefinitionalRepresentation self) -> StepRepr_DefinitionalRepresentation

        Returns a DefinitionalRepresentation


        """
        this = _StepRepr.new_StepRepr_DefinitionalRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_DefinitionalRepresentation_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_DefinitionalRepresentation_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_DefinitionalRepresentation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_DefinitionalRepresentation
StepRepr_DefinitionalRepresentation_swigregister = _StepRepr.StepRepr_DefinitionalRepresentation_swigregister
StepRepr_DefinitionalRepresentation_swigregister(StepRepr_DefinitionalRepresentation)

def StepRepr_DefinitionalRepresentation_get_type_name(*args):
    """
    StepRepr_DefinitionalRepresentation_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_DefinitionalRepresentation_get_type_name(*args)

def StepRepr_DefinitionalRepresentation_get_type_descriptor(*args):
    """
    StepRepr_DefinitionalRepresentation_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_DefinitionalRepresentation_get_type_descriptor(*args)

class Handle_StepRepr_ConstructiveGeometryRepresentationRelationship(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_ConstructiveGeometryRepresentationRelationship self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentationRelationship_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_ConstructiveGeometryRepresentationRelationship self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentationRelationship_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_ConstructiveGeometryRepresentationRelationship self, StepRepr_ConstructiveGeometryRepresentationRelationship thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentationRelationship_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_ConstructiveGeometryRepresentationRelationship self, Handle_StepRepr_ConstructiveGeometryRepresentationRelationship theHandle) -> Handle_StepRepr_ConstructiveGeometryRepresentationRelationship
        assign(Handle_StepRepr_ConstructiveGeometryRepresentationRelationship self, StepRepr_ConstructiveGeometryRepresentationRelationship thePtr) -> Handle_StepRepr_ConstructiveGeometryRepresentationRelationship
        assign(Handle_StepRepr_ConstructiveGeometryRepresentationRelationship self, Handle_StepRepr_ConstructiveGeometryRepresentationRelationship theHandle) -> Handle_StepRepr_ConstructiveGeometryRepresentationRelationship

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentationRelationship_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_ConstructiveGeometryRepresentationRelationship self) -> StepRepr_ConstructiveGeometryRepresentationRelationship

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentationRelationship_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_ConstructiveGeometryRepresentationRelationship self) -> StepRepr_ConstructiveGeometryRepresentationRelationship

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentationRelationship___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_ConstructiveGeometryRepresentationRelationship self) -> StepRepr_ConstructiveGeometryRepresentationRelationship

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentationRelationship___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentationRelationship___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentationRelationship___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_ConstructiveGeometryRepresentationRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentationRelationship_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_ConstructiveGeometryRepresentationRelationship

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_ConstructiveGeometryRepresentationRelationship self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentationRelationship_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentationRelationship_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentationRelationship_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepRepr_ConstructiveGeometryRepresentationRelationship self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepRepr_Representation aRep1, Handle_StepRepr_Representation aRep2)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aRep1: OCC.wrapper.StepRepr.Handle_StepRepr_Representation
        :type aRep2: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentationRelationship_Init(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_ConstructiveGeometryRepresentationRelationship self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentationRelationship_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_ConstructiveGeometryRepresentationRelationship self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentationRelationship_Name(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_ConstructiveGeometryRepresentationRelationship self, Handle_TCollection_HAsciiString aDescription)

        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentationRelationship_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_ConstructiveGeometryRepresentationRelationship self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentationRelationship_Description(self, *args)


    def SetRep1(self, *args):
        """
        SetRep1(Handle_StepRepr_ConstructiveGeometryRepresentationRelationship self, Handle_StepRepr_Representation aRep1)

        :type aRep1: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentationRelationship_SetRep1(self, *args)


    def Rep1(self, *args):
        """
        Rep1(Handle_StepRepr_ConstructiveGeometryRepresentationRelationship self) -> Handle_StepRepr_Representation

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentationRelationship_Rep1(self, *args)


    def SetRep2(self, *args):
        """
        SetRep2(Handle_StepRepr_ConstructiveGeometryRepresentationRelationship self, Handle_StepRepr_Representation aRep2)

        :type aRep2: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentationRelationship_SetRep2(self, *args)


    def Rep2(self, *args):
        """
        Rep2(Handle_StepRepr_ConstructiveGeometryRepresentationRelationship self) -> Handle_StepRepr_Representation

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentationRelationship_Rep2(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_ConstructiveGeometryRepresentationRelationship self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentationRelationship_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_ConstructiveGeometryRepresentationRelationship self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_ConstructiveGeometryRepresentationRelationship self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentationRelationship_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_ConstructiveGeometryRepresentationRelationship self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_ConstructiveGeometryRepresentationRelationship self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentationRelationship_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_ConstructiveGeometryRepresentationRelationship self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentationRelationship_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_ConstructiveGeometryRepresentationRelationship self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentationRelationship_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_ConstructiveGeometryRepresentationRelationship self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentationRelationship_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_ConstructiveGeometryRepresentationRelationship self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentationRelationship_DecrementRefCounter(self, *args)

Handle_StepRepr_ConstructiveGeometryRepresentationRelationship_swigregister = _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentationRelationship_swigregister
Handle_StepRepr_ConstructiveGeometryRepresentationRelationship_swigregister(Handle_StepRepr_ConstructiveGeometryRepresentationRelationship)

def Handle_StepRepr_ConstructiveGeometryRepresentationRelationship_DownCast(thing):
    return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentationRelationship_DownCast(thing)
Handle_StepRepr_ConstructiveGeometryRepresentationRelationship_DownCast = _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentationRelationship_DownCast

class Handle_StepRepr_ShapeAspectRelationship(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_ShapeAspectRelationship self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_ShapeAspectRelationship_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_ShapeAspectRelationship self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectRelationship_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_ShapeAspectRelationship self, StepRepr_ShapeAspectRelationship thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectRelationship_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_ShapeAspectRelationship self, Handle_StepRepr_ShapeAspectRelationship theHandle) -> Handle_StepRepr_ShapeAspectRelationship
        assign(Handle_StepRepr_ShapeAspectRelationship self, StepRepr_ShapeAspectRelationship thePtr) -> Handle_StepRepr_ShapeAspectRelationship
        assign(Handle_StepRepr_ShapeAspectRelationship self, Handle_StepRepr_ShapeAspectRelationship theHandle) -> Handle_StepRepr_ShapeAspectRelationship

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectRelationship_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_ShapeAspectRelationship self) -> StepRepr_ShapeAspectRelationship

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectRelationship_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_ShapeAspectRelationship self) -> StepRepr_ShapeAspectRelationship

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectRelationship___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_ShapeAspectRelationship self) -> StepRepr_ShapeAspectRelationship

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectRelationship___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_ShapeAspectRelationship___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_ShapeAspectRelationship___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_ShapeAspectRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_ShapeAspectRelationship_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_ShapeAspectRelationship

    def Init(self, *args):
        """
        Init(Handle_StepRepr_ShapeAspectRelationship self, Handle_TCollection_HAsciiString aName, Standard_Boolean const hasDescription, Handle_TCollection_HAsciiString aDescription, Handle_StepRepr_ShapeAspect aRelatingShapeAspect, Handle_StepRepr_ShapeAspect aRelatedShapeAspect)

        Initialize all fields (own and inherited)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type hasDescription: bool
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aRelatingShapeAspect: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspect
        :type aRelatedShapeAspect: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspect

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectRelationship_Init(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_ShapeAspectRelationship self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectRelationship_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_ShapeAspectRelationship self, Handle_TCollection_HAsciiString Name)

        Set field Name

        :type Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectRelationship_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_ShapeAspectRelationship self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectRelationship_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_ShapeAspectRelationship self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectRelationship_SetDescription(self, *args)


    def HasDescription(self, *args):
        """
        HasDescription(Handle_StepRepr_ShapeAspectRelationship self) -> Standard_Boolean

        Returns True if optional field Description is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectRelationship_HasDescription(self, *args)


    def RelatingShapeAspect(self, *args):
        """
        RelatingShapeAspect(Handle_StepRepr_ShapeAspectRelationship self) -> Handle_StepRepr_ShapeAspect

        Returns field RelatingShapeAspect

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspect

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectRelationship_RelatingShapeAspect(self, *args)


    def SetRelatingShapeAspect(self, *args):
        """
        SetRelatingShapeAspect(Handle_StepRepr_ShapeAspectRelationship self, Handle_StepRepr_ShapeAspect RelatingShapeAspect)

        Set field RelatingShapeAspect

        :type RelatingShapeAspect: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspect

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectRelationship_SetRelatingShapeAspect(self, *args)


    def RelatedShapeAspect(self, *args):
        """
        RelatedShapeAspect(Handle_StepRepr_ShapeAspectRelationship self) -> Handle_StepRepr_ShapeAspect

        Returns field RelatedShapeAspect

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspect

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectRelationship_RelatedShapeAspect(self, *args)


    def SetRelatedShapeAspect(self, *args):
        """
        SetRelatedShapeAspect(Handle_StepRepr_ShapeAspectRelationship self, Handle_StepRepr_ShapeAspect RelatedShapeAspect)

        Set field RelatedShapeAspect

        :type RelatedShapeAspect: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspect

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectRelationship_SetRelatedShapeAspect(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_ShapeAspectRelationship self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectRelationship_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ShapeAspectRelationship_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ShapeAspectRelationship_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_ShapeAspectRelationship self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_ShapeAspectRelationship_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_ShapeAspectRelationship self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_ShapeAspectRelationship self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectRelationship_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_ShapeAspectRelationship self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_ShapeAspectRelationship self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectRelationship_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_ShapeAspectRelationship self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectRelationship_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_ShapeAspectRelationship self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectRelationship_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_ShapeAspectRelationship self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_ShapeAspectRelationship_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_ShapeAspectRelationship self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectRelationship_DecrementRefCounter(self, *args)

Handle_StepRepr_ShapeAspectRelationship_swigregister = _StepRepr.Handle_StepRepr_ShapeAspectRelationship_swigregister
Handle_StepRepr_ShapeAspectRelationship_swigregister(Handle_StepRepr_ShapeAspectRelationship)

def Handle_StepRepr_ShapeAspectRelationship_DownCast(thing):
    return _StepRepr.Handle_StepRepr_ShapeAspectRelationship_DownCast(thing)
Handle_StepRepr_ShapeAspectRelationship_DownCast = _StepRepr.Handle_StepRepr_ShapeAspectRelationship_DownCast

class Handle_StepRepr_MakeFromUsageOption(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_MakeFromUsageOption self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_MakeFromUsageOption_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_MakeFromUsageOption self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_MakeFromUsageOption_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_MakeFromUsageOption self, StepRepr_MakeFromUsageOption thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_MakeFromUsageOption_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_MakeFromUsageOption self, Handle_StepRepr_MakeFromUsageOption theHandle) -> Handle_StepRepr_MakeFromUsageOption
        assign(Handle_StepRepr_MakeFromUsageOption self, StepRepr_MakeFromUsageOption thePtr) -> Handle_StepRepr_MakeFromUsageOption
        assign(Handle_StepRepr_MakeFromUsageOption self, Handle_StepRepr_MakeFromUsageOption theHandle) -> Handle_StepRepr_MakeFromUsageOption

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_MakeFromUsageOption_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_MakeFromUsageOption self) -> StepRepr_MakeFromUsageOption

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_MakeFromUsageOption_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_MakeFromUsageOption self) -> StepRepr_MakeFromUsageOption

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_MakeFromUsageOption___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_MakeFromUsageOption self) -> StepRepr_MakeFromUsageOption

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_MakeFromUsageOption___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_MakeFromUsageOption___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_MakeFromUsageOption___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_MakeFromUsageOption(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_MakeFromUsageOption_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_MakeFromUsageOption

    def Init(self, *args):
        """
        Init(Handle_StepRepr_MakeFromUsageOption self, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Id, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Name, Standard_Boolean const hasProductDefinitionRelationship_Description, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Description, Handle_StepBasic_ProductDefinition aProductDefinitionRelationship_RelatingProductDefinition, Handle_StepBasic_ProductDefinition aProductDefinitionRelationship_RelatedProductDefinition, Standard_Integer const aRanking, Handle_TCollection_HAsciiString aRankingRationale, Handle_StepBasic_MeasureWithUnit aQuantity)
        Init(Handle_StepRepr_MakeFromUsageOption self, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Id, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Name, Standard_Boolean const hasProductDefinitionRelationship_Description, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Description, StepBasic_ProductDefinitionOrReference aProductDefinitionRelationship_RelatingProductDefinition, StepBasic_ProductDefinitionOrReference aProductDefinitionRelationship_RelatedProductDefinition, Standard_Integer const aRanking, Handle_TCollection_HAsciiString aRankingRationale, Handle_StepBasic_MeasureWithUnit aQuantity)

        Initialize all fields (own and inherited)

        :type aProductDefinitionRelationship_Id: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aProductDefinitionRelationship_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type hasProductDefinitionRelationship_Description: bool
        :type aProductDefinitionRelationship_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aProductDefinitionRelationship_RelatingProductDefinition: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference
        :type aProductDefinitionRelationship_RelatedProductDefinition: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference
        :type aRanking: int
        :type aRankingRationale: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aQuantity: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepRepr.Handle_StepRepr_MakeFromUsageOption_Init(self, *args)


    def Ranking(self, *args):
        """
        Ranking(Handle_StepRepr_MakeFromUsageOption self) -> Standard_Integer

        Returns field Ranking

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_MakeFromUsageOption_Ranking(self, *args)


    def SetRanking(self, *args):
        """
        SetRanking(Handle_StepRepr_MakeFromUsageOption self, Standard_Integer const Ranking)

        Set field Ranking

        :type Ranking: int

        """
        return _StepRepr.Handle_StepRepr_MakeFromUsageOption_SetRanking(self, *args)


    def RankingRationale(self, *args):
        """
        RankingRationale(Handle_StepRepr_MakeFromUsageOption self) -> Handle_TCollection_HAsciiString

        Returns field RankingRationale

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_MakeFromUsageOption_RankingRationale(self, *args)


    def SetRankingRationale(self, *args):
        """
        SetRankingRationale(Handle_StepRepr_MakeFromUsageOption self, Handle_TCollection_HAsciiString RankingRationale)

        Set field RankingRationale

        :type RankingRationale: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_MakeFromUsageOption_SetRankingRationale(self, *args)


    def Quantity(self, *args):
        """
        Quantity(Handle_StepRepr_MakeFromUsageOption self) -> Handle_StepBasic_MeasureWithUnit

        Returns field Quantity

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepRepr.Handle_StepRepr_MakeFromUsageOption_Quantity(self, *args)


    def SetQuantity(self, *args):
        """
        SetQuantity(Handle_StepRepr_MakeFromUsageOption self, Handle_StepBasic_MeasureWithUnit Quantity)

        Set field Quantity

        :type Quantity: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepRepr.Handle_StepRepr_MakeFromUsageOption_SetQuantity(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_MakeFromUsageOption self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_MakeFromUsageOption_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_MakeFromUsageOption_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_MakeFromUsageOption_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Id(self, *args):
        """
        Id(Handle_StepRepr_MakeFromUsageOption self) -> Handle_TCollection_HAsciiString

        Returns field Id

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_MakeFromUsageOption_Id(self, *args)


    def SetId(self, *args):
        """
        SetId(Handle_StepRepr_MakeFromUsageOption self, Handle_TCollection_HAsciiString Id)

        Set field Id

        :type Id: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_MakeFromUsageOption_SetId(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_MakeFromUsageOption self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_MakeFromUsageOption_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_MakeFromUsageOption self, Handle_TCollection_HAsciiString Name)

        Set field Name

        :type Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_MakeFromUsageOption_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_MakeFromUsageOption self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_MakeFromUsageOption_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_MakeFromUsageOption self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_MakeFromUsageOption_SetDescription(self, *args)


    def HasDescription(self, *args):
        """
        HasDescription(Handle_StepRepr_MakeFromUsageOption self) -> Standard_Boolean

        Returns True if optional field Description is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_MakeFromUsageOption_HasDescription(self, *args)


    def RelatingProductDefinition(self, *args):
        """
        RelatingProductDefinition(Handle_StepRepr_MakeFromUsageOption self) -> Handle_StepBasic_ProductDefinition

        Returns field RelatingProductDefinition

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinition

        """
        return _StepRepr.Handle_StepRepr_MakeFromUsageOption_RelatingProductDefinition(self, *args)


    def RelatingProductDefinitionAP242(self, *args):
        """
        RelatingProductDefinitionAP242(Handle_StepRepr_MakeFromUsageOption self) -> StepBasic_ProductDefinitionOrReference

        Returns field RelatingProductDefinition in AP242

        :rtype: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference

        """
        return _StepRepr.Handle_StepRepr_MakeFromUsageOption_RelatingProductDefinitionAP242(self, *args)


    def SetRelatingProductDefinition(self, *args):
        """
        SetRelatingProductDefinition(Handle_StepRepr_MakeFromUsageOption self, Handle_StepBasic_ProductDefinition RelatingProductDefinition)
        SetRelatingProductDefinition(Handle_StepRepr_MakeFromUsageOption self, StepBasic_ProductDefinitionOrReference RelatingProductDefinition)

        Set field RelatingProductDefinition in AP242

        :type RelatingProductDefinition: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference

        """
        return _StepRepr.Handle_StepRepr_MakeFromUsageOption_SetRelatingProductDefinition(self, *args)


    def RelatedProductDefinition(self, *args):
        """
        RelatedProductDefinition(Handle_StepRepr_MakeFromUsageOption self) -> Handle_StepBasic_ProductDefinition

        Returns field RelatedProductDefinition

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinition

        """
        return _StepRepr.Handle_StepRepr_MakeFromUsageOption_RelatedProductDefinition(self, *args)


    def RelatedProductDefinitionAP242(self, *args):
        """
        RelatedProductDefinitionAP242(Handle_StepRepr_MakeFromUsageOption self) -> StepBasic_ProductDefinitionOrReference

        Returns field RelatedProductDefinition in AP242

        :rtype: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference

        """
        return _StepRepr.Handle_StepRepr_MakeFromUsageOption_RelatedProductDefinitionAP242(self, *args)


    def SetRelatedProductDefinition(self, *args):
        """
        SetRelatedProductDefinition(Handle_StepRepr_MakeFromUsageOption self, Handle_StepBasic_ProductDefinition RelatedProductDefinition)
        SetRelatedProductDefinition(Handle_StepRepr_MakeFromUsageOption self, StepBasic_ProductDefinitionOrReference RelatedProductDefinition)

        Set field RelatedProductDefinition in AP242

        :type RelatedProductDefinition: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference

        """
        return _StepRepr.Handle_StepRepr_MakeFromUsageOption_SetRelatedProductDefinition(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_MakeFromUsageOption self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_MakeFromUsageOption_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_MakeFromUsageOption self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_MakeFromUsageOption self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_MakeFromUsageOption_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_MakeFromUsageOption self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_MakeFromUsageOption self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_MakeFromUsageOption_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_MakeFromUsageOption self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_MakeFromUsageOption_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_MakeFromUsageOption self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_MakeFromUsageOption_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_MakeFromUsageOption self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_MakeFromUsageOption_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_MakeFromUsageOption self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_MakeFromUsageOption_DecrementRefCounter(self, *args)

Handle_StepRepr_MakeFromUsageOption_swigregister = _StepRepr.Handle_StepRepr_MakeFromUsageOption_swigregister
Handle_StepRepr_MakeFromUsageOption_swigregister(Handle_StepRepr_MakeFromUsageOption)

def Handle_StepRepr_MakeFromUsageOption_DownCast(thing):
    return _StepRepr.Handle_StepRepr_MakeFromUsageOption_DownCast(thing)
Handle_StepRepr_MakeFromUsageOption_DownCast = _StepRepr.Handle_StepRepr_MakeFromUsageOption_DownCast

class StepRepr_MaterialPropertyRepresentation(StepRepr_PropertyDefinitionRepresentation):
    """Representation of STEP entity MaterialPropertyRepresentation"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_MaterialPropertyRepresentation
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_MaterialPropertyRepresentation(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_MaterialPropertyRepresentation self) -> StepRepr_MaterialPropertyRepresentation

        Empty constructor


        """
        this = _StepRepr.new_StepRepr_MaterialPropertyRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepRepr_MaterialPropertyRepresentation self, StepRepr_RepresentedDefinition aPropertyDefinitionRepresentation_Definition, Handle_StepRepr_Representation aPropertyDefinitionRepresentation_UsedRepresentation, Handle_StepRepr_DataEnvironment aDependentEnvironment)

        Initialize all fields (own and inherited)

        :type aPropertyDefinitionRepresentation_Definition: OCC.wrapper.StepRepr.StepRepr_RepresentedDefinition
        :type aPropertyDefinitionRepresentation_UsedRepresentation: OCC.wrapper.StepRepr.Handle_StepRepr_Representation
        :type aDependentEnvironment: OCC.wrapper.StepRepr.Handle_StepRepr_DataEnvironment

        """
        return _StepRepr.StepRepr_MaterialPropertyRepresentation_Init(self, *args)


    def DependentEnvironment(self, *args):
        """
        DependentEnvironment(StepRepr_MaterialPropertyRepresentation self) -> Handle_StepRepr_DataEnvironment

        Returns field DependentEnvironment

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_DataEnvironment

        """
        return _StepRepr.StepRepr_MaterialPropertyRepresentation_DependentEnvironment(self, *args)


    def SetDependentEnvironment(self, *args):
        """
        SetDependentEnvironment(StepRepr_MaterialPropertyRepresentation self, Handle_StepRepr_DataEnvironment DependentEnvironment)

        Set field DependentEnvironment

        :type DependentEnvironment: OCC.wrapper.StepRepr.Handle_StepRepr_DataEnvironment

        """
        return _StepRepr.StepRepr_MaterialPropertyRepresentation_SetDependentEnvironment(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_MaterialPropertyRepresentation_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_MaterialPropertyRepresentation_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_MaterialPropertyRepresentation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_MaterialPropertyRepresentation
StepRepr_MaterialPropertyRepresentation_swigregister = _StepRepr.StepRepr_MaterialPropertyRepresentation_swigregister
StepRepr_MaterialPropertyRepresentation_swigregister(StepRepr_MaterialPropertyRepresentation)

def StepRepr_MaterialPropertyRepresentation_get_type_name(*args):
    """
    StepRepr_MaterialPropertyRepresentation_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_MaterialPropertyRepresentation_get_type_name(*args)

def StepRepr_MaterialPropertyRepresentation_get_type_descriptor(*args):
    """
    StepRepr_MaterialPropertyRepresentation_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_MaterialPropertyRepresentation_get_type_descriptor(*args)

class Handle_StepRepr_AssemblyComponentUsageSubstitute(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_AssemblyComponentUsageSubstitute self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsageSubstitute_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_AssemblyComponentUsageSubstitute self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsageSubstitute_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_AssemblyComponentUsageSubstitute self, StepRepr_AssemblyComponentUsageSubstitute thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsageSubstitute_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_AssemblyComponentUsageSubstitute self, Handle_StepRepr_AssemblyComponentUsageSubstitute theHandle) -> Handle_StepRepr_AssemblyComponentUsageSubstitute
        assign(Handle_StepRepr_AssemblyComponentUsageSubstitute self, StepRepr_AssemblyComponentUsageSubstitute thePtr) -> Handle_StepRepr_AssemblyComponentUsageSubstitute
        assign(Handle_StepRepr_AssemblyComponentUsageSubstitute self, Handle_StepRepr_AssemblyComponentUsageSubstitute theHandle) -> Handle_StepRepr_AssemblyComponentUsageSubstitute

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsageSubstitute_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_AssemblyComponentUsageSubstitute self) -> StepRepr_AssemblyComponentUsageSubstitute

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsageSubstitute_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_AssemblyComponentUsageSubstitute self) -> StepRepr_AssemblyComponentUsageSubstitute

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsageSubstitute___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_AssemblyComponentUsageSubstitute self) -> StepRepr_AssemblyComponentUsageSubstitute

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsageSubstitute___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsageSubstitute___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_AssemblyComponentUsageSubstitute___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_AssemblyComponentUsageSubstitute(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_AssemblyComponentUsageSubstitute_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_AssemblyComponentUsageSubstitute

    def Init(self, *args):
        """
        Init(Handle_StepRepr_AssemblyComponentUsageSubstitute self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDef, Handle_StepRepr_AssemblyComponentUsage aBase, Handle_StepRepr_AssemblyComponentUsage aSubs)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDef: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aBase: OCC.wrapper.StepRepr.Handle_StepRepr_AssemblyComponentUsage
        :type aSubs: OCC.wrapper.StepRepr.Handle_StepRepr_AssemblyComponentUsage

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsageSubstitute_Init(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_AssemblyComponentUsageSubstitute self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsageSubstitute_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_AssemblyComponentUsageSubstitute self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsageSubstitute_SetName(self, *args)


    def Definition(self, *args):
        """
        Definition(Handle_StepRepr_AssemblyComponentUsageSubstitute self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsageSubstitute_Definition(self, *args)


    def SetDefinition(self, *args):
        """
        SetDefinition(Handle_StepRepr_AssemblyComponentUsageSubstitute self, Handle_TCollection_HAsciiString aDef)

        :type aDef: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsageSubstitute_SetDefinition(self, *args)


    def Base(self, *args):
        """
        Base(Handle_StepRepr_AssemblyComponentUsageSubstitute self) -> Handle_StepRepr_AssemblyComponentUsage

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_AssemblyComponentUsage

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsageSubstitute_Base(self, *args)


    def SetBase(self, *args):
        """
        SetBase(Handle_StepRepr_AssemblyComponentUsageSubstitute self, Handle_StepRepr_AssemblyComponentUsage aBase)

        :type aBase: OCC.wrapper.StepRepr.Handle_StepRepr_AssemblyComponentUsage

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsageSubstitute_SetBase(self, *args)


    def Substitute(self, *args):
        """
        Substitute(Handle_StepRepr_AssemblyComponentUsageSubstitute self) -> Handle_StepRepr_AssemblyComponentUsage

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_AssemblyComponentUsage

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsageSubstitute_Substitute(self, *args)


    def SetSubstitute(self, *args):
        """
        SetSubstitute(Handle_StepRepr_AssemblyComponentUsageSubstitute self, Handle_StepRepr_AssemblyComponentUsage aSubstitute)

        :type aSubstitute: OCC.wrapper.StepRepr.Handle_StepRepr_AssemblyComponentUsage

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsageSubstitute_SetSubstitute(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_AssemblyComponentUsageSubstitute self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsageSubstitute_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_AssemblyComponentUsageSubstitute_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_AssemblyComponentUsageSubstitute_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_AssemblyComponentUsageSubstitute self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsageSubstitute_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_AssemblyComponentUsageSubstitute self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_AssemblyComponentUsageSubstitute self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsageSubstitute_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_AssemblyComponentUsageSubstitute self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_AssemblyComponentUsageSubstitute self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsageSubstitute_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_AssemblyComponentUsageSubstitute self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsageSubstitute_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_AssemblyComponentUsageSubstitute self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsageSubstitute_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_AssemblyComponentUsageSubstitute self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsageSubstitute_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_AssemblyComponentUsageSubstitute self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsageSubstitute_DecrementRefCounter(self, *args)

Handle_StepRepr_AssemblyComponentUsageSubstitute_swigregister = _StepRepr.Handle_StepRepr_AssemblyComponentUsageSubstitute_swigregister
Handle_StepRepr_AssemblyComponentUsageSubstitute_swigregister(Handle_StepRepr_AssemblyComponentUsageSubstitute)

def Handle_StepRepr_AssemblyComponentUsageSubstitute_DownCast(thing):
    return _StepRepr.Handle_StepRepr_AssemblyComponentUsageSubstitute_DownCast(thing)
Handle_StepRepr_AssemblyComponentUsageSubstitute_DownCast = _StepRepr.Handle_StepRepr_AssemblyComponentUsageSubstitute_DownCast

class StepRepr_GlobalUnitAssignedContext(StepRepr_RepresentationContext):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_GlobalUnitAssignedContext
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_GlobalUnitAssignedContext(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_GlobalUnitAssignedContext self) -> StepRepr_GlobalUnitAssignedContext

        Returns a GlobalUnitAssignedContext


        """
        this = _StepRepr.new_StepRepr_GlobalUnitAssignedContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepRepr_GlobalUnitAssignedContext self, Handle_TCollection_HAsciiString aContextIdentifier, Handle_TCollection_HAsciiString aContextType, Handle_StepBasic_HArray1OfNamedUnit aUnits)

        :type aContextIdentifier: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aContextType: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aUnits: OCC.wrapper.StepBasic.Handle_StepBasic_HArray1OfNamedUnit

        """
        return _StepRepr.StepRepr_GlobalUnitAssignedContext_Init(self, *args)


    def SetUnits(self, *args):
        """
        SetUnits(StepRepr_GlobalUnitAssignedContext self, Handle_StepBasic_HArray1OfNamedUnit aUnits)

        :type aUnits: OCC.wrapper.StepBasic.Handle_StepBasic_HArray1OfNamedUnit

        """
        return _StepRepr.StepRepr_GlobalUnitAssignedContext_SetUnits(self, *args)


    def Units(self, *args):
        """
        Units(StepRepr_GlobalUnitAssignedContext self) -> Handle_StepBasic_HArray1OfNamedUnit

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_HArray1OfNamedUnit

        """
        return _StepRepr.StepRepr_GlobalUnitAssignedContext_Units(self, *args)


    def UnitsValue(self, *args):
        """
        UnitsValue(StepRepr_GlobalUnitAssignedContext self, Standard_Integer const num) -> Handle_StepBasic_NamedUnit

        :type num: int
        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_NamedUnit

        """
        return _StepRepr.StepRepr_GlobalUnitAssignedContext_UnitsValue(self, *args)


    def NbUnits(self, *args):
        """
        NbUnits(StepRepr_GlobalUnitAssignedContext self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.StepRepr_GlobalUnitAssignedContext_NbUnits(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_GlobalUnitAssignedContext_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_GlobalUnitAssignedContext_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_GlobalUnitAssignedContext_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_GlobalUnitAssignedContext
StepRepr_GlobalUnitAssignedContext_swigregister = _StepRepr.StepRepr_GlobalUnitAssignedContext_swigregister
StepRepr_GlobalUnitAssignedContext_swigregister(StepRepr_GlobalUnitAssignedContext)

def StepRepr_GlobalUnitAssignedContext_get_type_name(*args):
    """
    StepRepr_GlobalUnitAssignedContext_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_GlobalUnitAssignedContext_get_type_name(*args)

def StepRepr_GlobalUnitAssignedContext_get_type_descriptor(*args):
    """
    StepRepr_GlobalUnitAssignedContext_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_GlobalUnitAssignedContext_get_type_descriptor(*args)

class StepRepr_Extension(StepRepr_DerivedShapeAspect):
    """Added for Dimensional Tolerances"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_Extension
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_Extension(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_Extension self) -> StepRepr_Extension

        Added for Dimensional Tolerances
        """
        this = _StepRepr.new_StepRepr_Extension(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_Extension_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_Extension_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_Extension_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_Extension
StepRepr_Extension_swigregister = _StepRepr.StepRepr_Extension_swigregister
StepRepr_Extension_swigregister(StepRepr_Extension)

def StepRepr_Extension_get_type_name(*args):
    """
    StepRepr_Extension_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_Extension_get_type_name(*args)

def StepRepr_Extension_get_type_descriptor(*args):
    """
    StepRepr_Extension_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_Extension_get_type_descriptor(*args)

class NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation self) -> NCollection_Array1< opencascade::handle< StepRepr_MaterialPropertyRepresentation > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation self) -> NCollection_Array1< opencascade::handle< StepRepr_MaterialPropertyRepresentation > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation self) -> NCollection_Array1< opencascade::handle< StepRepr_MaterialPropertyRepresentation > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation self) -> NCollection_Array1< opencascade::handle< StepRepr_MaterialPropertyRepresentation > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepRepr.new_NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation self, Handle_StepRepr_MaterialPropertyRepresentation theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation self, NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation theOther) -> NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation self, NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation theOther) -> NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation self, NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation theOther) -> NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation
        assign(NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation self, NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation theOther) -> NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepRepr.NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation self) -> Handle_StepRepr_MaterialPropertyRepresentation

        @return first element

        :rtype: TheItemType &

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepRepr.NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation self) -> Handle_StepRepr_MaterialPropertyRepresentation

        @return last element

        :rtype: TheItemType &

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepRepr.NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation self, Standard_Integer const theIndex) -> Handle_StepRepr_MaterialPropertyRepresentation

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepRepr.NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepRepr.NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation self, Standard_Integer const theIndex, Handle_StepRepr_MaterialPropertyRepresentation theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation_Resize(self, *args)

    __swig_destroy__ = _StepRepr.delete_NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation
NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation_swigregister = _StepRepr.NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation_swigregister
NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation_swigregister(NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation)


try:
	StepRepr_Array1OfMaterialPropertyRepresentation = NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation
except NameError:
	pass # does not exist, probably ignored

class Handle_StepRepr_SpecifiedHigherUsageOccurrence(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_SpecifiedHigherUsageOccurrence self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_SpecifiedHigherUsageOccurrence self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_SpecifiedHigherUsageOccurrence self, StepRepr_SpecifiedHigherUsageOccurrence thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_SpecifiedHigherUsageOccurrence self, Handle_StepRepr_SpecifiedHigherUsageOccurrence theHandle) -> Handle_StepRepr_SpecifiedHigherUsageOccurrence
        assign(Handle_StepRepr_SpecifiedHigherUsageOccurrence self, StepRepr_SpecifiedHigherUsageOccurrence thePtr) -> Handle_StepRepr_SpecifiedHigherUsageOccurrence
        assign(Handle_StepRepr_SpecifiedHigherUsageOccurrence self, Handle_StepRepr_SpecifiedHigherUsageOccurrence theHandle) -> Handle_StepRepr_SpecifiedHigherUsageOccurrence

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_SpecifiedHigherUsageOccurrence self) -> StepRepr_SpecifiedHigherUsageOccurrence

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_SpecifiedHigherUsageOccurrence self) -> StepRepr_SpecifiedHigherUsageOccurrence

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_SpecifiedHigherUsageOccurrence self) -> StepRepr_SpecifiedHigherUsageOccurrence

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_SpecifiedHigherUsageOccurrence(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_SpecifiedHigherUsageOccurrence

    def Init(self, *args):
        """
        Init(Handle_StepRepr_SpecifiedHigherUsageOccurrence self, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Id, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Name, Standard_Boolean const hasProductDefinitionRelationship_Description, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Description, Handle_StepBasic_ProductDefinition aProductDefinitionRelationship_RelatingProductDefinition, Handle_StepBasic_ProductDefinition aProductDefinitionRelationship_RelatedProductDefinition, Standard_Boolean const hasAssemblyComponentUsage_ReferenceDesignator, Handle_TCollection_HAsciiString aAssemblyComponentUsage_ReferenceDesignator, Handle_StepRepr_AssemblyComponentUsage aUpperUsage, Handle_StepRepr_NextAssemblyUsageOccurrence aNextUsage)
        Init(Handle_StepRepr_SpecifiedHigherUsageOccurrence self, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Id, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Name, Standard_Boolean const hasProductDefinitionRelationship_Description, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Description, StepBasic_ProductDefinitionOrReference aProductDefinitionRelationship_RelatingProductDefinition, StepBasic_ProductDefinitionOrReference aProductDefinitionRelationship_RelatedProductDefinition, Standard_Boolean const hasAssemblyComponentUsage_ReferenceDesignator, Handle_TCollection_HAsciiString aAssemblyComponentUsage_ReferenceDesignator, Handle_StepRepr_AssemblyComponentUsage aUpperUsage, Handle_StepRepr_NextAssemblyUsageOccurrence aNextUsage)

        Initialize all fields (own and inherited)

        :type aProductDefinitionRelationship_Id: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aProductDefinitionRelationship_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type hasProductDefinitionRelationship_Description: bool
        :type aProductDefinitionRelationship_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aProductDefinitionRelationship_RelatingProductDefinition: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference
        :type aProductDefinitionRelationship_RelatedProductDefinition: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference
        :type hasAssemblyComponentUsage_ReferenceDesignator: bool
        :type aAssemblyComponentUsage_ReferenceDesignator: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aUpperUsage: OCC.wrapper.StepRepr.Handle_StepRepr_AssemblyComponentUsage
        :type aNextUsage: OCC.wrapper.StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence

        """
        return _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence_Init(self, *args)


    def UpperUsage(self, *args):
        """
        UpperUsage(Handle_StepRepr_SpecifiedHigherUsageOccurrence self) -> Handle_StepRepr_AssemblyComponentUsage

        Returns field UpperUsage

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_AssemblyComponentUsage

        """
        return _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence_UpperUsage(self, *args)


    def SetUpperUsage(self, *args):
        """
        SetUpperUsage(Handle_StepRepr_SpecifiedHigherUsageOccurrence self, Handle_StepRepr_AssemblyComponentUsage UpperUsage)

        Set field UpperUsage

        :type UpperUsage: OCC.wrapper.StepRepr.Handle_StepRepr_AssemblyComponentUsage

        """
        return _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence_SetUpperUsage(self, *args)


    def NextUsage(self, *args):
        """
        NextUsage(Handle_StepRepr_SpecifiedHigherUsageOccurrence self) -> Handle_StepRepr_NextAssemblyUsageOccurrence

        Returns field NextUsage

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence

        """
        return _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence_NextUsage(self, *args)


    def SetNextUsage(self, *args):
        """
        SetNextUsage(Handle_StepRepr_SpecifiedHigherUsageOccurrence self, Handle_StepRepr_NextAssemblyUsageOccurrence NextUsage)

        Set field NextUsage

        :type NextUsage: OCC.wrapper.StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence

        """
        return _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence_SetNextUsage(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_SpecifiedHigherUsageOccurrence self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ReferenceDesignator(self, *args):
        """
        ReferenceDesignator(Handle_StepRepr_SpecifiedHigherUsageOccurrence self) -> Handle_TCollection_HAsciiString

        Returns field ReferenceDesignator

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence_ReferenceDesignator(self, *args)


    def SetReferenceDesignator(self, *args):
        """
        SetReferenceDesignator(Handle_StepRepr_SpecifiedHigherUsageOccurrence self, Handle_TCollection_HAsciiString ReferenceDesignator)

        Set field ReferenceDesignator

        :type ReferenceDesignator: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence_SetReferenceDesignator(self, *args)


    def HasReferenceDesignator(self, *args):
        """
        HasReferenceDesignator(Handle_StepRepr_SpecifiedHigherUsageOccurrence self) -> Standard_Boolean

        Returns True if optional field ReferenceDesignator is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence_HasReferenceDesignator(self, *args)


    def Id(self, *args):
        """
        Id(Handle_StepRepr_SpecifiedHigherUsageOccurrence self) -> Handle_TCollection_HAsciiString

        Returns field Id

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence_Id(self, *args)


    def SetId(self, *args):
        """
        SetId(Handle_StepRepr_SpecifiedHigherUsageOccurrence self, Handle_TCollection_HAsciiString Id)

        Set field Id

        :type Id: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence_SetId(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_SpecifiedHigherUsageOccurrence self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_SpecifiedHigherUsageOccurrence self, Handle_TCollection_HAsciiString Name)

        Set field Name

        :type Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_SpecifiedHigherUsageOccurrence self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_SpecifiedHigherUsageOccurrence self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence_SetDescription(self, *args)


    def HasDescription(self, *args):
        """
        HasDescription(Handle_StepRepr_SpecifiedHigherUsageOccurrence self) -> Standard_Boolean

        Returns True if optional field Description is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence_HasDescription(self, *args)


    def RelatingProductDefinition(self, *args):
        """
        RelatingProductDefinition(Handle_StepRepr_SpecifiedHigherUsageOccurrence self) -> Handle_StepBasic_ProductDefinition

        Returns field RelatingProductDefinition

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinition

        """
        return _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence_RelatingProductDefinition(self, *args)


    def RelatingProductDefinitionAP242(self, *args):
        """
        RelatingProductDefinitionAP242(Handle_StepRepr_SpecifiedHigherUsageOccurrence self) -> StepBasic_ProductDefinitionOrReference

        Returns field RelatingProductDefinition in AP242

        :rtype: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference

        """
        return _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence_RelatingProductDefinitionAP242(self, *args)


    def SetRelatingProductDefinition(self, *args):
        """
        SetRelatingProductDefinition(Handle_StepRepr_SpecifiedHigherUsageOccurrence self, Handle_StepBasic_ProductDefinition RelatingProductDefinition)
        SetRelatingProductDefinition(Handle_StepRepr_SpecifiedHigherUsageOccurrence self, StepBasic_ProductDefinitionOrReference RelatingProductDefinition)

        Set field RelatingProductDefinition in AP242

        :type RelatingProductDefinition: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference

        """
        return _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence_SetRelatingProductDefinition(self, *args)


    def RelatedProductDefinition(self, *args):
        """
        RelatedProductDefinition(Handle_StepRepr_SpecifiedHigherUsageOccurrence self) -> Handle_StepBasic_ProductDefinition

        Returns field RelatedProductDefinition

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinition

        """
        return _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence_RelatedProductDefinition(self, *args)


    def RelatedProductDefinitionAP242(self, *args):
        """
        RelatedProductDefinitionAP242(Handle_StepRepr_SpecifiedHigherUsageOccurrence self) -> StepBasic_ProductDefinitionOrReference

        Returns field RelatedProductDefinition in AP242

        :rtype: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference

        """
        return _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence_RelatedProductDefinitionAP242(self, *args)


    def SetRelatedProductDefinition(self, *args):
        """
        SetRelatedProductDefinition(Handle_StepRepr_SpecifiedHigherUsageOccurrence self, Handle_StepBasic_ProductDefinition RelatedProductDefinition)
        SetRelatedProductDefinition(Handle_StepRepr_SpecifiedHigherUsageOccurrence self, StepBasic_ProductDefinitionOrReference RelatedProductDefinition)

        Set field RelatedProductDefinition in AP242

        :type RelatedProductDefinition: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference

        """
        return _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence_SetRelatedProductDefinition(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_SpecifiedHigherUsageOccurrence self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_SpecifiedHigherUsageOccurrence self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_SpecifiedHigherUsageOccurrence self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_SpecifiedHigherUsageOccurrence self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_SpecifiedHigherUsageOccurrence self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_SpecifiedHigherUsageOccurrence self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_SpecifiedHigherUsageOccurrence self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_SpecifiedHigherUsageOccurrence self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_SpecifiedHigherUsageOccurrence self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence_DecrementRefCounter(self, *args)

Handle_StepRepr_SpecifiedHigherUsageOccurrence_swigregister = _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence_swigregister
Handle_StepRepr_SpecifiedHigherUsageOccurrence_swigregister(Handle_StepRepr_SpecifiedHigherUsageOccurrence)

def Handle_StepRepr_SpecifiedHigherUsageOccurrence_DownCast(thing):
    return _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence_DownCast(thing)
Handle_StepRepr_SpecifiedHigherUsageOccurrence_DownCast = _StepRepr.Handle_StepRepr_SpecifiedHigherUsageOccurrence_DownCast

class StepRepr_ShapeDefinition(StepData.StepData_SelectType):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepRepr_ShapeDefinition self) -> StepRepr_ShapeDefinition

        Returns a ShapeDefinition SelectType


        """
        this = _StepRepr.new_StepRepr_ShapeDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepRepr_ShapeDefinition self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a ShapeDefinition Kind Entity that is :
        1 -> ProductDefinitionShape
        2 -> ShapeAspect
        3 -> ShapeAspectRelationship
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.StepRepr_ShapeDefinition_CaseNum(self, *args)


    def ProductDefinitionShape(self, *args):
        """
        ProductDefinitionShape(StepRepr_ShapeDefinition self) -> Handle_StepRepr_ProductDefinitionShape

        returns Value as a ProductDefinitionShape (Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepRepr.StepRepr_ShapeDefinition_ProductDefinitionShape(self, *args)


    def ShapeAspect(self, *args):
        """
        ShapeAspect(StepRepr_ShapeDefinition self) -> Handle_StepRepr_ShapeAspect

        returns Value as a ShapeAspect (Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspect

        """
        return _StepRepr.StepRepr_ShapeDefinition_ShapeAspect(self, *args)


    def ShapeAspectRelationship(self, *args):
        """
        ShapeAspectRelationship(StepRepr_ShapeDefinition self) -> Handle_StepRepr_ShapeAspectRelationship

        returns Value as a ShapeAspectRelationship (Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspectRelationship

        """
        return _StepRepr.StepRepr_ShapeDefinition_ShapeAspectRelationship(self, *args)

    __swig_destroy__ = _StepRepr.delete_StepRepr_ShapeDefinition
StepRepr_ShapeDefinition_swigregister = _StepRepr.StepRepr_ShapeDefinition_swigregister
StepRepr_ShapeDefinition_swigregister(StepRepr_ShapeDefinition)

class StepRepr_ConfigurationDesign(Standard.Standard_Transient):
    """Representation of STEP entity ConfigurationDesign"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_ConfigurationDesign
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_ConfigurationDesign(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_ConfigurationDesign self) -> StepRepr_ConfigurationDesign

        Empty constructor


        """
        this = _StepRepr.new_StepRepr_ConfigurationDesign(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepRepr_ConfigurationDesign self, Handle_StepRepr_ConfigurationItem aConfiguration, StepRepr_ConfigurationDesignItem aDesign)

        Initialize all fields (own and inherited)

        :type aConfiguration: OCC.wrapper.StepRepr.Handle_StepRepr_ConfigurationItem
        :type aDesign: OCC.wrapper.StepRepr.StepRepr_ConfigurationDesignItem

        """
        return _StepRepr.StepRepr_ConfigurationDesign_Init(self, *args)


    def Configuration(self, *args):
        """
        Configuration(StepRepr_ConfigurationDesign self) -> Handle_StepRepr_ConfigurationItem

        Returns field Configuration

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ConfigurationItem

        """
        return _StepRepr.StepRepr_ConfigurationDesign_Configuration(self, *args)


    def SetConfiguration(self, *args):
        """
        SetConfiguration(StepRepr_ConfigurationDesign self, Handle_StepRepr_ConfigurationItem Configuration)

        Set field Configuration

        :type Configuration: OCC.wrapper.StepRepr.Handle_StepRepr_ConfigurationItem

        """
        return _StepRepr.StepRepr_ConfigurationDesign_SetConfiguration(self, *args)


    def Design(self, *args):
        """
        Design(StepRepr_ConfigurationDesign self) -> StepRepr_ConfigurationDesignItem

        Returns field Design

        :rtype: OCC.wrapper.StepRepr.StepRepr_ConfigurationDesignItem

        """
        return _StepRepr.StepRepr_ConfigurationDesign_Design(self, *args)


    def SetDesign(self, *args):
        """
        SetDesign(StepRepr_ConfigurationDesign self, StepRepr_ConfigurationDesignItem Design)

        Set field Design

        :type Design: OCC.wrapper.StepRepr.StepRepr_ConfigurationDesignItem

        """
        return _StepRepr.StepRepr_ConfigurationDesign_SetDesign(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_ConfigurationDesign_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_ConfigurationDesign_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_ConfigurationDesign_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_ConfigurationDesign
StepRepr_ConfigurationDesign_swigregister = _StepRepr.StepRepr_ConfigurationDesign_swigregister
StepRepr_ConfigurationDesign_swigregister(StepRepr_ConfigurationDesign)

def StepRepr_ConfigurationDesign_get_type_name(*args):
    """
    StepRepr_ConfigurationDesign_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_ConfigurationDesign_get_type_name(*args)

def StepRepr_ConfigurationDesign_get_type_descriptor(*args):
    """
    StepRepr_ConfigurationDesign_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_ConfigurationDesign_get_type_descriptor(*args)

class StepRepr_MeasureRepresentationItem(StepRepr_RepresentationItem):
    """
    Implements a measure_representation_item entity
    which is used for storing validation properties
    (e.g. area) for shapes
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_MeasureRepresentationItem
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_MeasureRepresentationItem(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_MeasureRepresentationItem self) -> StepRepr_MeasureRepresentationItem

        Creates empty object


        """
        this = _StepRepr.new_StepRepr_MeasureRepresentationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepRepr_MeasureRepresentationItem self, Handle_TCollection_HAsciiString aName, Handle_StepBasic_MeasureValueMember aValueComponent, StepBasic_Unit aUnitComponent)

        Init all fields

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aValueComponent: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureValueMember
        :type aUnitComponent: OCC.wrapper.StepBasic.StepBasic_Unit

        """
        return _StepRepr.StepRepr_MeasureRepresentationItem_Init(self, *args)


    def SetMeasure(self, *args):
        """
        SetMeasure(StepRepr_MeasureRepresentationItem self, Handle_StepBasic_MeasureWithUnit Measure)

        :type Measure: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepRepr.StepRepr_MeasureRepresentationItem_SetMeasure(self, *args)


    def Measure(self, *args):
        """
        Measure(StepRepr_MeasureRepresentationItem self) -> Handle_StepBasic_MeasureWithUnit

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepRepr.StepRepr_MeasureRepresentationItem_Measure(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_MeasureRepresentationItem_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_MeasureRepresentationItem_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_MeasureRepresentationItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_MeasureRepresentationItem
StepRepr_MeasureRepresentationItem_swigregister = _StepRepr.StepRepr_MeasureRepresentationItem_swigregister
StepRepr_MeasureRepresentationItem_swigregister(StepRepr_MeasureRepresentationItem)

def StepRepr_MeasureRepresentationItem_get_type_name(*args):
    """
    StepRepr_MeasureRepresentationItem_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_MeasureRepresentationItem_get_type_name(*args)

def StepRepr_MeasureRepresentationItem_get_type_descriptor(*args):
    """
    StepRepr_MeasureRepresentationItem_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_MeasureRepresentationItem_get_type_descriptor(*args)

class StepRepr_ShapeAspectDerivingRelationship(StepRepr_ShapeAspectRelationship):
    """Added for Dimensional Tolerances"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_ShapeAspectDerivingRelationship
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_ShapeAspectDerivingRelationship(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_ShapeAspectDerivingRelationship self) -> StepRepr_ShapeAspectDerivingRelationship

        Added for Dimensional Tolerances
        """
        this = _StepRepr.new_StepRepr_ShapeAspectDerivingRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_ShapeAspectDerivingRelationship_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_ShapeAspectDerivingRelationship_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_ShapeAspectDerivingRelationship_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_ShapeAspectDerivingRelationship
StepRepr_ShapeAspectDerivingRelationship_swigregister = _StepRepr.StepRepr_ShapeAspectDerivingRelationship_swigregister
StepRepr_ShapeAspectDerivingRelationship_swigregister(StepRepr_ShapeAspectDerivingRelationship)

def StepRepr_ShapeAspectDerivingRelationship_get_type_name(*args):
    """
    StepRepr_ShapeAspectDerivingRelationship_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_ShapeAspectDerivingRelationship_get_type_name(*args)

def StepRepr_ShapeAspectDerivingRelationship_get_type_descriptor(*args):
    """
    StepRepr_ShapeAspectDerivingRelationship_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_ShapeAspectDerivingRelationship_get_type_descriptor(*args)

class Handle_StepRepr_MappedItem(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_MappedItem self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_MappedItem_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_MappedItem self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_MappedItem_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_MappedItem self, StepRepr_MappedItem thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_MappedItem_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_MappedItem self, Handle_StepRepr_MappedItem theHandle) -> Handle_StepRepr_MappedItem
        assign(Handle_StepRepr_MappedItem self, StepRepr_MappedItem thePtr) -> Handle_StepRepr_MappedItem
        assign(Handle_StepRepr_MappedItem self, Handle_StepRepr_MappedItem theHandle) -> Handle_StepRepr_MappedItem

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_MappedItem_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_MappedItem self) -> StepRepr_MappedItem

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_MappedItem_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_MappedItem self) -> StepRepr_MappedItem

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_MappedItem___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_MappedItem self) -> StepRepr_MappedItem

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_MappedItem___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_MappedItem___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_MappedItem___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_MappedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_MappedItem_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_MappedItem

    def Init(self, *args):
        """
        Init(Handle_StepRepr_MappedItem self, Handle_TCollection_HAsciiString aName, Handle_StepRepr_RepresentationMap aMappingSource, Handle_StepRepr_RepresentationItem aMappingTarget)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aMappingSource: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationMap
        :type aMappingTarget: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepRepr.Handle_StepRepr_MappedItem_Init(self, *args)


    def SetMappingSource(self, *args):
        """
        SetMappingSource(Handle_StepRepr_MappedItem self, Handle_StepRepr_RepresentationMap aMappingSource)

        :type aMappingSource: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationMap

        """
        return _StepRepr.Handle_StepRepr_MappedItem_SetMappingSource(self, *args)


    def MappingSource(self, *args):
        """
        MappingSource(Handle_StepRepr_MappedItem self) -> Handle_StepRepr_RepresentationMap

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationMap

        """
        return _StepRepr.Handle_StepRepr_MappedItem_MappingSource(self, *args)


    def SetMappingTarget(self, *args):
        """
        SetMappingTarget(Handle_StepRepr_MappedItem self, Handle_StepRepr_RepresentationItem aMappingTarget)

        :type aMappingTarget: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepRepr.Handle_StepRepr_MappedItem_SetMappingTarget(self, *args)


    def MappingTarget(self, *args):
        """
        MappingTarget(Handle_StepRepr_MappedItem self) -> Handle_StepRepr_RepresentationItem

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepRepr.Handle_StepRepr_MappedItem_MappingTarget(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_MappedItem self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_MappedItem_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_MappedItem_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_MappedItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_MappedItem self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_MappedItem_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_MappedItem self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_MappedItem_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_MappedItem self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_MappedItem_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_MappedItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_MappedItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_MappedItem_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_MappedItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_MappedItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_MappedItem_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_MappedItem self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_MappedItem_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_MappedItem self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_MappedItem_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_MappedItem self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_MappedItem_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_MappedItem self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_MappedItem_DecrementRefCounter(self, *args)

Handle_StepRepr_MappedItem_swigregister = _StepRepr.Handle_StepRepr_MappedItem_swigregister
Handle_StepRepr_MappedItem_swigregister(Handle_StepRepr_MappedItem)

def Handle_StepRepr_MappedItem_DownCast(thing):
    return _StepRepr.Handle_StepRepr_MappedItem_DownCast(thing)
Handle_StepRepr_MappedItem_DownCast = _StepRepr.Handle_StepRepr_MappedItem_DownCast

class Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation self, StepRepr_StructuralResponsePropertyDefinitionRepresentation thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation self, Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation theHandle) -> Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation
        assign(Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation self, StepRepr_StructuralResponsePropertyDefinitionRepresentation thePtr) -> Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation
        assign(Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation self, Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation theHandle) -> Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation self) -> StepRepr_StructuralResponsePropertyDefinitionRepresentation

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation self) -> StepRepr_StructuralResponsePropertyDefinitionRepresentation

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation self) -> StepRepr_StructuralResponsePropertyDefinitionRepresentation

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation self, StepRepr_RepresentedDefinition aDefinition, Handle_StepRepr_Representation aUsedRepresentation)

        Initialize all fields (own and inherited)

        :type aDefinition: OCC.wrapper.StepRepr.StepRepr_RepresentedDefinition
        :type aUsedRepresentation: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepRepr.Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation_Init(self, *args)


    def Definition(self, *args):
        """
        Definition(Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation self) -> StepRepr_RepresentedDefinition

        Returns field Definition

        :rtype: OCC.wrapper.StepRepr.StepRepr_RepresentedDefinition

        """
        return _StepRepr.Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation_Definition(self, *args)


    def SetDefinition(self, *args):
        """
        SetDefinition(Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation self, StepRepr_RepresentedDefinition Definition)

        Set field Definition

        :type Definition: OCC.wrapper.StepRepr.StepRepr_RepresentedDefinition

        """
        return _StepRepr.Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation_SetDefinition(self, *args)


    def UsedRepresentation(self, *args):
        """
        UsedRepresentation(Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation self) -> Handle_StepRepr_Representation

        Returns field UsedRepresentation

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepRepr.Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation_UsedRepresentation(self, *args)


    def SetUsedRepresentation(self, *args):
        """
        SetUsedRepresentation(Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation self, Handle_StepRepr_Representation UsedRepresentation)

        Set field UsedRepresentation

        :type UsedRepresentation: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepRepr.Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation_SetUsedRepresentation(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation_DecrementRefCounter(self, *args)

Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation_swigregister = _StepRepr.Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation_swigregister
Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation_swigregister(Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation)

def Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation_DownCast(thing):
    return _StepRepr.Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation_DownCast(thing)
Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation_DownCast = _StepRepr.Handle_StepRepr_StructuralResponsePropertyDefinitionRepresentation_DownCast

class StepRepr_StructuralResponseProperty(StepRepr_PropertyDefinition):
    """Representation of STEP entity StructuralResponseProperty"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_StructuralResponseProperty
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_StructuralResponseProperty(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_StructuralResponseProperty self) -> StepRepr_StructuralResponseProperty

        Empty constructor


        """
        this = _StepRepr.new_StepRepr_StructuralResponseProperty(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_StructuralResponseProperty_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_StructuralResponseProperty_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_StructuralResponseProperty_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_StructuralResponseProperty
StepRepr_StructuralResponseProperty_swigregister = _StepRepr.StepRepr_StructuralResponseProperty_swigregister
StepRepr_StructuralResponseProperty_swigregister(StepRepr_StructuralResponseProperty)

def StepRepr_StructuralResponseProperty_get_type_name(*args):
    """
    StepRepr_StructuralResponseProperty_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_StructuralResponseProperty_get_type_name(*args)

def StepRepr_StructuralResponseProperty_get_type_descriptor(*args):
    """
    StepRepr_StructuralResponseProperty_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_StructuralResponseProperty_get_type_descriptor(*args)

class Handle_StepRepr_PropertyDefinition(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_PropertyDefinition self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_PropertyDefinition_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_PropertyDefinition self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinition_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_PropertyDefinition self, StepRepr_PropertyDefinition thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinition_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_PropertyDefinition self, Handle_StepRepr_PropertyDefinition theHandle) -> Handle_StepRepr_PropertyDefinition
        assign(Handle_StepRepr_PropertyDefinition self, StepRepr_PropertyDefinition thePtr) -> Handle_StepRepr_PropertyDefinition
        assign(Handle_StepRepr_PropertyDefinition self, Handle_StepRepr_PropertyDefinition theHandle) -> Handle_StepRepr_PropertyDefinition

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinition_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_PropertyDefinition self) -> StepRepr_PropertyDefinition

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinition_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_PropertyDefinition self) -> StepRepr_PropertyDefinition

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinition___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_PropertyDefinition self) -> StepRepr_PropertyDefinition

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinition___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_PropertyDefinition___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_PropertyDefinition___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_PropertyDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_PropertyDefinition_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_PropertyDefinition

    def Init(self, *args):
        """
        Init(Handle_StepRepr_PropertyDefinition self, Handle_TCollection_HAsciiString aName, Standard_Boolean const hasDescription, Handle_TCollection_HAsciiString aDescription, StepRepr_CharacterizedDefinition aDefinition)

        Initialize all fields (own and inherited)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type hasDescription: bool
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDefinition: OCC.wrapper.StepRepr.StepRepr_CharacterizedDefinition

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinition_Init(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_PropertyDefinition self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinition_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_PropertyDefinition self, Handle_TCollection_HAsciiString Name)

        Set field Name

        :type Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinition_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_PropertyDefinition self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinition_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_PropertyDefinition self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinition_SetDescription(self, *args)


    def HasDescription(self, *args):
        """
        HasDescription(Handle_StepRepr_PropertyDefinition self) -> Standard_Boolean

        Returns True if optional field Description is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinition_HasDescription(self, *args)


    def Definition(self, *args):
        """
        Definition(Handle_StepRepr_PropertyDefinition self) -> StepRepr_CharacterizedDefinition

        Returns field Definition

        :rtype: OCC.wrapper.StepRepr.StepRepr_CharacterizedDefinition

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinition_Definition(self, *args)


    def SetDefinition(self, *args):
        """
        SetDefinition(Handle_StepRepr_PropertyDefinition self, StepRepr_CharacterizedDefinition Definition)

        Set field Definition

        :type Definition: OCC.wrapper.StepRepr.StepRepr_CharacterizedDefinition

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinition_SetDefinition(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_PropertyDefinition self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinition_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_PropertyDefinition_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_PropertyDefinition_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_PropertyDefinition self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_PropertyDefinition_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_PropertyDefinition self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_PropertyDefinition self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinition_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_PropertyDefinition self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_PropertyDefinition self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinition_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_PropertyDefinition self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinition_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_PropertyDefinition self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinition_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_PropertyDefinition self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_PropertyDefinition_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_PropertyDefinition self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinition_DecrementRefCounter(self, *args)

Handle_StepRepr_PropertyDefinition_swigregister = _StepRepr.Handle_StepRepr_PropertyDefinition_swigregister
Handle_StepRepr_PropertyDefinition_swigregister(Handle_StepRepr_PropertyDefinition)

def Handle_StepRepr_PropertyDefinition_DownCast(thing):
    return _StepRepr.Handle_StepRepr_PropertyDefinition_DownCast(thing)
Handle_StepRepr_PropertyDefinition_DownCast = _StepRepr.Handle_StepRepr_PropertyDefinition_DownCast

class StepRepr_ExternallyDefinedRepresentation(StepRepr_Representation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_ExternallyDefinedRepresentation
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_ExternallyDefinedRepresentation(self) 
            return h


    def __init__(self, *args):
        """__init__(StepRepr_ExternallyDefinedRepresentation self) -> StepRepr_ExternallyDefinedRepresentation"""
        this = _StepRepr.new_StepRepr_ExternallyDefinedRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_ExternallyDefinedRepresentation_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_ExternallyDefinedRepresentation_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_ExternallyDefinedRepresentation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_ExternallyDefinedRepresentation
StepRepr_ExternallyDefinedRepresentation_swigregister = _StepRepr.StepRepr_ExternallyDefinedRepresentation_swigregister
StepRepr_ExternallyDefinedRepresentation_swigregister(StepRepr_ExternallyDefinedRepresentation)

def StepRepr_ExternallyDefinedRepresentation_get_type_name(*args):
    """
    StepRepr_ExternallyDefinedRepresentation_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_ExternallyDefinedRepresentation_get_type_name(*args)

def StepRepr_ExternallyDefinedRepresentation_get_type_descriptor(*args):
    """
    StepRepr_ExternallyDefinedRepresentation_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_ExternallyDefinedRepresentation_get_type_descriptor(*args)

class StepRepr_ReprItemAndPlaneAngleMeasureWithUnit(StepRepr_ReprItemAndMeasureWithUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit(self) 
            return h


    def __init__(self, *args):
        """__init__(StepRepr_ReprItemAndPlaneAngleMeasureWithUnit self) -> StepRepr_ReprItemAndPlaneAngleMeasureWithUnit"""
        this = _StepRepr.new_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetPlaneAngleMeasureWithUnit(self, *args):
        """
        SetPlaneAngleMeasureWithUnit(StepRepr_ReprItemAndPlaneAngleMeasureWithUnit self, Handle_StepBasic_PlaneAngleMeasureWithUnit aLMWU)

        :type aLMWU: OCC.wrapper.StepBasic.Handle_StepBasic_PlaneAngleMeasureWithUnit

        """
        return _StepRepr.StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_SetPlaneAngleMeasureWithUnit(self, *args)


    def GetPlaneAngleMeasureWithUnit(self, *args):
        """
        GetPlaneAngleMeasureWithUnit(StepRepr_ReprItemAndPlaneAngleMeasureWithUnit self) -> Handle_StepBasic_PlaneAngleMeasureWithUnit

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_PlaneAngleMeasureWithUnit

        """
        return _StepRepr.StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_GetPlaneAngleMeasureWithUnit(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit
StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_swigregister = _StepRepr.StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_swigregister
StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_swigregister(StepRepr_ReprItemAndPlaneAngleMeasureWithUnit)

def StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_get_type_name(*args):
    """
    StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_get_type_name(*args)

def StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_get_type_descriptor(*args):
    """
    StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_get_type_descriptor(*args)

class Handle_StepRepr_BetweenShapeAspect(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_BetweenShapeAspect self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_BetweenShapeAspect_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_BetweenShapeAspect self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_BetweenShapeAspect_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_BetweenShapeAspect self, StepRepr_BetweenShapeAspect thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_BetweenShapeAspect_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_BetweenShapeAspect self, Handle_StepRepr_BetweenShapeAspect theHandle) -> Handle_StepRepr_BetweenShapeAspect
        assign(Handle_StepRepr_BetweenShapeAspect self, StepRepr_BetweenShapeAspect thePtr) -> Handle_StepRepr_BetweenShapeAspect
        assign(Handle_StepRepr_BetweenShapeAspect self, Handle_StepRepr_BetweenShapeAspect theHandle) -> Handle_StepRepr_BetweenShapeAspect

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_BetweenShapeAspect_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_BetweenShapeAspect self) -> StepRepr_BetweenShapeAspect

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_BetweenShapeAspect_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_BetweenShapeAspect self) -> StepRepr_BetweenShapeAspect

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_BetweenShapeAspect___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_BetweenShapeAspect self) -> StepRepr_BetweenShapeAspect

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_BetweenShapeAspect___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_BetweenShapeAspect___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_BetweenShapeAspect___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_BetweenShapeAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_BetweenShapeAspect_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_BetweenShapeAspect

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_BetweenShapeAspect self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_BetweenShapeAspect_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_BetweenShapeAspect_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_BetweenShapeAspect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepRepr_BetweenShapeAspect self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepRepr_ProductDefinitionShape aOfShape, StepData_Logical const aProductDefinitional)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape
        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_BetweenShapeAspect_Init(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_BetweenShapeAspect self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_BetweenShapeAspect_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_BetweenShapeAspect self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_BetweenShapeAspect_Name(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_BetweenShapeAspect self, Handle_TCollection_HAsciiString aDescription)

        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_BetweenShapeAspect_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_BetweenShapeAspect self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_BetweenShapeAspect_Description(self, *args)


    def SetOfShape(self, *args):
        """
        SetOfShape(Handle_StepRepr_BetweenShapeAspect self, Handle_StepRepr_ProductDefinitionShape aOfShape)

        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepRepr.Handle_StepRepr_BetweenShapeAspect_SetOfShape(self, *args)


    def OfShape(self, *args):
        """
        OfShape(Handle_StepRepr_BetweenShapeAspect self) -> Handle_StepRepr_ProductDefinitionShape

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepRepr.Handle_StepRepr_BetweenShapeAspect_OfShape(self, *args)


    def SetProductDefinitional(self, *args):
        """
        SetProductDefinitional(Handle_StepRepr_BetweenShapeAspect self, StepData_Logical const aProductDefinitional)

        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_BetweenShapeAspect_SetProductDefinitional(self, *args)


    def ProductDefinitional(self, *args):
        """
        ProductDefinitional(Handle_StepRepr_BetweenShapeAspect self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_BetweenShapeAspect_ProductDefinitional(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_BetweenShapeAspect self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_BetweenShapeAspect_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_BetweenShapeAspect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_BetweenShapeAspect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_BetweenShapeAspect_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_BetweenShapeAspect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_BetweenShapeAspect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_BetweenShapeAspect_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_BetweenShapeAspect self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_BetweenShapeAspect_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_BetweenShapeAspect self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_BetweenShapeAspect_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_BetweenShapeAspect self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_BetweenShapeAspect_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_BetweenShapeAspect self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_BetweenShapeAspect_DecrementRefCounter(self, *args)

Handle_StepRepr_BetweenShapeAspect_swigregister = _StepRepr.Handle_StepRepr_BetweenShapeAspect_swigregister
Handle_StepRepr_BetweenShapeAspect_swigregister(Handle_StepRepr_BetweenShapeAspect)

def Handle_StepRepr_BetweenShapeAspect_DownCast(thing):
    return _StepRepr.Handle_StepRepr_BetweenShapeAspect_DownCast(thing)
Handle_StepRepr_BetweenShapeAspect_DownCast = _StepRepr.Handle_StepRepr_BetweenShapeAspect_DownCast

class Handle_StepRepr_FeatureForDatumTargetRelationship(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_FeatureForDatumTargetRelationship self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_FeatureForDatumTargetRelationship_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_FeatureForDatumTargetRelationship self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_FeatureForDatumTargetRelationship_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_FeatureForDatumTargetRelationship self, StepRepr_FeatureForDatumTargetRelationship thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_FeatureForDatumTargetRelationship_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_FeatureForDatumTargetRelationship self, Handle_StepRepr_FeatureForDatumTargetRelationship theHandle) -> Handle_StepRepr_FeatureForDatumTargetRelationship
        assign(Handle_StepRepr_FeatureForDatumTargetRelationship self, StepRepr_FeatureForDatumTargetRelationship thePtr) -> Handle_StepRepr_FeatureForDatumTargetRelationship
        assign(Handle_StepRepr_FeatureForDatumTargetRelationship self, Handle_StepRepr_FeatureForDatumTargetRelationship theHandle) -> Handle_StepRepr_FeatureForDatumTargetRelationship

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_FeatureForDatumTargetRelationship_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_FeatureForDatumTargetRelationship self) -> StepRepr_FeatureForDatumTargetRelationship

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_FeatureForDatumTargetRelationship_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_FeatureForDatumTargetRelationship self) -> StepRepr_FeatureForDatumTargetRelationship

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_FeatureForDatumTargetRelationship___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_FeatureForDatumTargetRelationship self) -> StepRepr_FeatureForDatumTargetRelationship

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_FeatureForDatumTargetRelationship___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_FeatureForDatumTargetRelationship___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_FeatureForDatumTargetRelationship___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_FeatureForDatumTargetRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_FeatureForDatumTargetRelationship_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_FeatureForDatumTargetRelationship

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_FeatureForDatumTargetRelationship self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_FeatureForDatumTargetRelationship_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_FeatureForDatumTargetRelationship_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_FeatureForDatumTargetRelationship_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepRepr_FeatureForDatumTargetRelationship self, Handle_TCollection_HAsciiString aName, Standard_Boolean const hasDescription, Handle_TCollection_HAsciiString aDescription, Handle_StepRepr_ShapeAspect aRelatingShapeAspect, Handle_StepRepr_ShapeAspect aRelatedShapeAspect)

        Initialize all fields (own and inherited)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type hasDescription: bool
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aRelatingShapeAspect: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspect
        :type aRelatedShapeAspect: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspect

        """
        return _StepRepr.Handle_StepRepr_FeatureForDatumTargetRelationship_Init(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_FeatureForDatumTargetRelationship self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_FeatureForDatumTargetRelationship_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_FeatureForDatumTargetRelationship self, Handle_TCollection_HAsciiString Name)

        Set field Name

        :type Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_FeatureForDatumTargetRelationship_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_FeatureForDatumTargetRelationship self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_FeatureForDatumTargetRelationship_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_FeatureForDatumTargetRelationship self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_FeatureForDatumTargetRelationship_SetDescription(self, *args)


    def HasDescription(self, *args):
        """
        HasDescription(Handle_StepRepr_FeatureForDatumTargetRelationship self) -> Standard_Boolean

        Returns True if optional field Description is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_FeatureForDatumTargetRelationship_HasDescription(self, *args)


    def RelatingShapeAspect(self, *args):
        """
        RelatingShapeAspect(Handle_StepRepr_FeatureForDatumTargetRelationship self) -> Handle_StepRepr_ShapeAspect

        Returns field RelatingShapeAspect

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspect

        """
        return _StepRepr.Handle_StepRepr_FeatureForDatumTargetRelationship_RelatingShapeAspect(self, *args)


    def SetRelatingShapeAspect(self, *args):
        """
        SetRelatingShapeAspect(Handle_StepRepr_FeatureForDatumTargetRelationship self, Handle_StepRepr_ShapeAspect RelatingShapeAspect)

        Set field RelatingShapeAspect

        :type RelatingShapeAspect: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspect

        """
        return _StepRepr.Handle_StepRepr_FeatureForDatumTargetRelationship_SetRelatingShapeAspect(self, *args)


    def RelatedShapeAspect(self, *args):
        """
        RelatedShapeAspect(Handle_StepRepr_FeatureForDatumTargetRelationship self) -> Handle_StepRepr_ShapeAspect

        Returns field RelatedShapeAspect

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspect

        """
        return _StepRepr.Handle_StepRepr_FeatureForDatumTargetRelationship_RelatedShapeAspect(self, *args)


    def SetRelatedShapeAspect(self, *args):
        """
        SetRelatedShapeAspect(Handle_StepRepr_FeatureForDatumTargetRelationship self, Handle_StepRepr_ShapeAspect RelatedShapeAspect)

        Set field RelatedShapeAspect

        :type RelatedShapeAspect: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspect

        """
        return _StepRepr.Handle_StepRepr_FeatureForDatumTargetRelationship_SetRelatedShapeAspect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_FeatureForDatumTargetRelationship self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_FeatureForDatumTargetRelationship_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_FeatureForDatumTargetRelationship self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_FeatureForDatumTargetRelationship self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_FeatureForDatumTargetRelationship_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_FeatureForDatumTargetRelationship self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_FeatureForDatumTargetRelationship self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_FeatureForDatumTargetRelationship_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_FeatureForDatumTargetRelationship self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_FeatureForDatumTargetRelationship_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_FeatureForDatumTargetRelationship self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_FeatureForDatumTargetRelationship_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_FeatureForDatumTargetRelationship self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_FeatureForDatumTargetRelationship_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_FeatureForDatumTargetRelationship self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_FeatureForDatumTargetRelationship_DecrementRefCounter(self, *args)

Handle_StepRepr_FeatureForDatumTargetRelationship_swigregister = _StepRepr.Handle_StepRepr_FeatureForDatumTargetRelationship_swigregister
Handle_StepRepr_FeatureForDatumTargetRelationship_swigregister(Handle_StepRepr_FeatureForDatumTargetRelationship)

def Handle_StepRepr_FeatureForDatumTargetRelationship_DownCast(thing):
    return _StepRepr.Handle_StepRepr_FeatureForDatumTargetRelationship_DownCast(thing)
Handle_StepRepr_FeatureForDatumTargetRelationship_DownCast = _StepRepr.Handle_StepRepr_FeatureForDatumTargetRelationship_DownCast

class StepRepr_RepresentedDefinition(StepData.StepData_SelectType):
    """Representation of STEP SELECT type RepresentedDefinition"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepRepr_RepresentedDefinition self) -> StepRepr_RepresentedDefinition

        Empty constructor


        """
        this = _StepRepr.new_StepRepr_RepresentedDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepRepr_RepresentedDefinition self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a kind of RepresentedDefinition select type
        1 -> GeneralProperty from StepBasic
        2 -> PropertyDefinition from StepRepr
        3 -> PropertyDefinitionRelationship from StepRepr
        4 -> ShapeAspect from StepRepr
        5 -> ShapeAspectRelationship from StepRepr
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.StepRepr_RepresentedDefinition_CaseNum(self, *args)


    def GeneralProperty(self, *args):
        """
        GeneralProperty(StepRepr_RepresentedDefinition self) -> Handle_StepBasic_GeneralProperty

        Returns Value as GeneralProperty (or Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_GeneralProperty

        """
        return _StepRepr.StepRepr_RepresentedDefinition_GeneralProperty(self, *args)


    def PropertyDefinition(self, *args):
        """
        PropertyDefinition(StepRepr_RepresentedDefinition self) -> Handle_StepRepr_PropertyDefinition

        Returns Value as PropertyDefinition (or Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_PropertyDefinition

        """
        return _StepRepr.StepRepr_RepresentedDefinition_PropertyDefinition(self, *args)


    def PropertyDefinitionRelationship(self, *args):
        """
        PropertyDefinitionRelationship(StepRepr_RepresentedDefinition self) -> Handle_StepRepr_PropertyDefinitionRelationship

        Returns Value as PropertyDefinitionRelationship (or Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_PropertyDefinitionRelationship

        """
        return _StepRepr.StepRepr_RepresentedDefinition_PropertyDefinitionRelationship(self, *args)


    def ShapeAspect(self, *args):
        """
        ShapeAspect(StepRepr_RepresentedDefinition self) -> Handle_StepRepr_ShapeAspect

        Returns Value as ShapeAspect (or Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspect

        """
        return _StepRepr.StepRepr_RepresentedDefinition_ShapeAspect(self, *args)


    def ShapeAspectRelationship(self, *args):
        """
        ShapeAspectRelationship(StepRepr_RepresentedDefinition self) -> Handle_StepRepr_ShapeAspectRelationship

        Returns Value as ShapeAspectRelationship (or Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspectRelationship

        """
        return _StepRepr.StepRepr_RepresentedDefinition_ShapeAspectRelationship(self, *args)

    __swig_destroy__ = _StepRepr.delete_StepRepr_RepresentedDefinition
StepRepr_RepresentedDefinition_swigregister = _StepRepr.StepRepr_RepresentedDefinition_swigregister
StepRepr_RepresentedDefinition_swigregister(StepRepr_RepresentedDefinition)

class Handle_StepRepr_HArray1OfMaterialPropertyRepresentation(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_HArray1OfMaterialPropertyRepresentation self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_HArray1OfMaterialPropertyRepresentation_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_HArray1OfMaterialPropertyRepresentation self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_HArray1OfMaterialPropertyRepresentation_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_HArray1OfMaterialPropertyRepresentation self, StepRepr_HArray1OfMaterialPropertyRepresentation thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_HArray1OfMaterialPropertyRepresentation_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_HArray1OfMaterialPropertyRepresentation self, Handle_StepRepr_HArray1OfMaterialPropertyRepresentation theHandle) -> Handle_StepRepr_HArray1OfMaterialPropertyRepresentation
        assign(Handle_StepRepr_HArray1OfMaterialPropertyRepresentation self, StepRepr_HArray1OfMaterialPropertyRepresentation thePtr) -> Handle_StepRepr_HArray1OfMaterialPropertyRepresentation
        assign(Handle_StepRepr_HArray1OfMaterialPropertyRepresentation self, Handle_StepRepr_HArray1OfMaterialPropertyRepresentation theHandle) -> Handle_StepRepr_HArray1OfMaterialPropertyRepresentation

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_HArray1OfMaterialPropertyRepresentation_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_HArray1OfMaterialPropertyRepresentation self) -> StepRepr_HArray1OfMaterialPropertyRepresentation

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_HArray1OfMaterialPropertyRepresentation_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_HArray1OfMaterialPropertyRepresentation self) -> StepRepr_HArray1OfMaterialPropertyRepresentation

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_HArray1OfMaterialPropertyRepresentation___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_HArray1OfMaterialPropertyRepresentation self) -> StepRepr_HArray1OfMaterialPropertyRepresentation

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_HArray1OfMaterialPropertyRepresentation___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_HArray1OfMaterialPropertyRepresentation___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_HArray1OfMaterialPropertyRepresentation___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_HArray1OfMaterialPropertyRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_HArray1OfMaterialPropertyRepresentation_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_HArray1OfMaterialPropertyRepresentation

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepRepr.StepRepr_Array1OfMaterialPropertyRepresentation

        """
        res = _StepRepr.Handle_StepRepr_HArray1OfMaterialPropertyRepresentation_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepRepr_HArray1OfMaterialPropertyRepresentation self) -> NCollection_Array1_Handle_StepRepr_MaterialPropertyRepresentation

        :rtype: OCC.wrapper.StepRepr.StepRepr_Array1OfMaterialPropertyRepresentation

        """
        return _StepRepr.Handle_StepRepr_HArray1OfMaterialPropertyRepresentation_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_HArray1OfMaterialPropertyRepresentation self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_HArray1OfMaterialPropertyRepresentation_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_HArray1OfMaterialPropertyRepresentation_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_HArray1OfMaterialPropertyRepresentation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_HArray1OfMaterialPropertyRepresentation self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_HArray1OfMaterialPropertyRepresentation_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_HArray1OfMaterialPropertyRepresentation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_HArray1OfMaterialPropertyRepresentation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_HArray1OfMaterialPropertyRepresentation_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_HArray1OfMaterialPropertyRepresentation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_HArray1OfMaterialPropertyRepresentation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_HArray1OfMaterialPropertyRepresentation_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_HArray1OfMaterialPropertyRepresentation self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_HArray1OfMaterialPropertyRepresentation_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_HArray1OfMaterialPropertyRepresentation self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_HArray1OfMaterialPropertyRepresentation_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_HArray1OfMaterialPropertyRepresentation self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_HArray1OfMaterialPropertyRepresentation_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_HArray1OfMaterialPropertyRepresentation self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_HArray1OfMaterialPropertyRepresentation_DecrementRefCounter(self, *args)

Handle_StepRepr_HArray1OfMaterialPropertyRepresentation_swigregister = _StepRepr.Handle_StepRepr_HArray1OfMaterialPropertyRepresentation_swigregister
Handle_StepRepr_HArray1OfMaterialPropertyRepresentation_swigregister(Handle_StepRepr_HArray1OfMaterialPropertyRepresentation)

def Handle_StepRepr_HArray1OfMaterialPropertyRepresentation_DownCast(thing):
    return _StepRepr.Handle_StepRepr_HArray1OfMaterialPropertyRepresentation_DownCast(thing)
Handle_StepRepr_HArray1OfMaterialPropertyRepresentation_DownCast = _StepRepr.Handle_StepRepr_HArray1OfMaterialPropertyRepresentation_DownCast

class StepRepr_CharacterizedDefinition(StepData.StepData_SelectType):
    """Representation of STEP SELECT type CharacterizedDefinition"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepRepr_CharacterizedDefinition self) -> StepRepr_CharacterizedDefinition

        Empty constructor


        """
        this = _StepRepr.new_StepRepr_CharacterizedDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepRepr_CharacterizedDefinition self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a kind of CharacterizedDefinition select type
        1 -> CharacterizedObject from StepBasic
        2 -> ProductDefinition from StepBasic
        3 -> ProductDefinitionRelationship from StepBasic
        4 -> ProductDefinitionShape from StepRepr
        5 -> ShapeAspect from StepRepr
        6 -> ShapeAspectRelationship from StepRepr
        7 -> DocumentFile from StepBasic
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.StepRepr_CharacterizedDefinition_CaseNum(self, *args)


    def CharacterizedObject(self, *args):
        """
        CharacterizedObject(StepRepr_CharacterizedDefinition self) -> Handle_StepBasic_CharacterizedObject

        Returns Value as CharacterizedObject (or Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_CharacterizedObject

        """
        return _StepRepr.StepRepr_CharacterizedDefinition_CharacterizedObject(self, *args)


    def ProductDefinition(self, *args):
        """
        ProductDefinition(StepRepr_CharacterizedDefinition self) -> Handle_StepBasic_ProductDefinition

        Returns Value as ProductDefinition (or Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinition

        """
        return _StepRepr.StepRepr_CharacterizedDefinition_ProductDefinition(self, *args)


    def ProductDefinitionRelationship(self, *args):
        """
        ProductDefinitionRelationship(StepRepr_CharacterizedDefinition self) -> Handle_StepBasic_ProductDefinitionRelationship

        Returns Value as ProductDefinitionRelationship (or Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionRelationship

        """
        return _StepRepr.StepRepr_CharacterizedDefinition_ProductDefinitionRelationship(self, *args)


    def ProductDefinitionShape(self, *args):
        """
        ProductDefinitionShape(StepRepr_CharacterizedDefinition self) -> Handle_StepRepr_ProductDefinitionShape

        Returns Value as ProductDefinitionShape (or Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepRepr.StepRepr_CharacterizedDefinition_ProductDefinitionShape(self, *args)


    def ShapeAspect(self, *args):
        """
        ShapeAspect(StepRepr_CharacterizedDefinition self) -> Handle_StepRepr_ShapeAspect

        Returns Value as ShapeAspect (or Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspect

        """
        return _StepRepr.StepRepr_CharacterizedDefinition_ShapeAspect(self, *args)


    def ShapeAspectRelationship(self, *args):
        """
        ShapeAspectRelationship(StepRepr_CharacterizedDefinition self) -> Handle_StepRepr_ShapeAspectRelationship

        Returns Value as ShapeAspectRelationship (or Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspectRelationship

        """
        return _StepRepr.StepRepr_CharacterizedDefinition_ShapeAspectRelationship(self, *args)


    def DocumentFile(self, *args):
        """
        DocumentFile(StepRepr_CharacterizedDefinition self) -> Handle_StepBasic_DocumentFile

        Returns Value as DocumentFile (or Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_DocumentFile

        """
        return _StepRepr.StepRepr_CharacterizedDefinition_DocumentFile(self, *args)

    __swig_destroy__ = _StepRepr.delete_StepRepr_CharacterizedDefinition
StepRepr_CharacterizedDefinition_swigregister = _StepRepr.StepRepr_CharacterizedDefinition_swigregister
StepRepr_CharacterizedDefinition_swigregister(StepRepr_CharacterizedDefinition)

class Handle_StepRepr_QuantifiedAssemblyComponentUsage(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_QuantifiedAssemblyComponentUsage self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_QuantifiedAssemblyComponentUsage self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_QuantifiedAssemblyComponentUsage self, StepRepr_QuantifiedAssemblyComponentUsage thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_QuantifiedAssemblyComponentUsage self, Handle_StepRepr_QuantifiedAssemblyComponentUsage theHandle) -> Handle_StepRepr_QuantifiedAssemblyComponentUsage
        assign(Handle_StepRepr_QuantifiedAssemblyComponentUsage self, StepRepr_QuantifiedAssemblyComponentUsage thePtr) -> Handle_StepRepr_QuantifiedAssemblyComponentUsage
        assign(Handle_StepRepr_QuantifiedAssemblyComponentUsage self, Handle_StepRepr_QuantifiedAssemblyComponentUsage theHandle) -> Handle_StepRepr_QuantifiedAssemblyComponentUsage

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_QuantifiedAssemblyComponentUsage self) -> StepRepr_QuantifiedAssemblyComponentUsage

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_QuantifiedAssemblyComponentUsage self) -> StepRepr_QuantifiedAssemblyComponentUsage

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_QuantifiedAssemblyComponentUsage self) -> StepRepr_QuantifiedAssemblyComponentUsage

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_QuantifiedAssemblyComponentUsage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_QuantifiedAssemblyComponentUsage

    def Init(self, *args):
        """
        Init(Handle_StepRepr_QuantifiedAssemblyComponentUsage self, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Id, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Name, Standard_Boolean const hasProductDefinitionRelationship_Description, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Description, Handle_StepBasic_ProductDefinition aProductDefinitionRelationship_RelatingProductDefinition, Handle_StepBasic_ProductDefinition aProductDefinitionRelationship_RelatedProductDefinition, Standard_Boolean const hasAssemblyComponentUsage_ReferenceDesignator, Handle_TCollection_HAsciiString aAssemblyComponentUsage_ReferenceDesignator, Handle_StepBasic_MeasureWithUnit aQuantity)
        Init(Handle_StepRepr_QuantifiedAssemblyComponentUsage self, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Id, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Name, Standard_Boolean const hasProductDefinitionRelationship_Description, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Description, StepBasic_ProductDefinitionOrReference aProductDefinitionRelationship_RelatingProductDefinition, StepBasic_ProductDefinitionOrReference aProductDefinitionRelationship_RelatedProductDefinition, Standard_Boolean const hasAssemblyComponentUsage_ReferenceDesignator, Handle_TCollection_HAsciiString aAssemblyComponentUsage_ReferenceDesignator, Handle_StepBasic_MeasureWithUnit aQuantity)

        Initialize all fields (own and inherited)

        :type aProductDefinitionRelationship_Id: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aProductDefinitionRelationship_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type hasProductDefinitionRelationship_Description: bool
        :type aProductDefinitionRelationship_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aProductDefinitionRelationship_RelatingProductDefinition: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference
        :type aProductDefinitionRelationship_RelatedProductDefinition: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference
        :type hasAssemblyComponentUsage_ReferenceDesignator: bool
        :type aAssemblyComponentUsage_ReferenceDesignator: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aQuantity: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage_Init(self, *args)


    def Quantity(self, *args):
        """
        Quantity(Handle_StepRepr_QuantifiedAssemblyComponentUsage self) -> Handle_StepBasic_MeasureWithUnit

        Returns field Quantity

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage_Quantity(self, *args)


    def SetQuantity(self, *args):
        """
        SetQuantity(Handle_StepRepr_QuantifiedAssemblyComponentUsage self, Handle_StepBasic_MeasureWithUnit Quantity)

        Set field Quantity

        :type Quantity: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage_SetQuantity(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_QuantifiedAssemblyComponentUsage self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ReferenceDesignator(self, *args):
        """
        ReferenceDesignator(Handle_StepRepr_QuantifiedAssemblyComponentUsage self) -> Handle_TCollection_HAsciiString

        Returns field ReferenceDesignator

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage_ReferenceDesignator(self, *args)


    def SetReferenceDesignator(self, *args):
        """
        SetReferenceDesignator(Handle_StepRepr_QuantifiedAssemblyComponentUsage self, Handle_TCollection_HAsciiString ReferenceDesignator)

        Set field ReferenceDesignator

        :type ReferenceDesignator: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage_SetReferenceDesignator(self, *args)


    def HasReferenceDesignator(self, *args):
        """
        HasReferenceDesignator(Handle_StepRepr_QuantifiedAssemblyComponentUsage self) -> Standard_Boolean

        Returns True if optional field ReferenceDesignator is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage_HasReferenceDesignator(self, *args)


    def Id(self, *args):
        """
        Id(Handle_StepRepr_QuantifiedAssemblyComponentUsage self) -> Handle_TCollection_HAsciiString

        Returns field Id

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage_Id(self, *args)


    def SetId(self, *args):
        """
        SetId(Handle_StepRepr_QuantifiedAssemblyComponentUsage self, Handle_TCollection_HAsciiString Id)

        Set field Id

        :type Id: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage_SetId(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_QuantifiedAssemblyComponentUsage self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_QuantifiedAssemblyComponentUsage self, Handle_TCollection_HAsciiString Name)

        Set field Name

        :type Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_QuantifiedAssemblyComponentUsage self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_QuantifiedAssemblyComponentUsage self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage_SetDescription(self, *args)


    def HasDescription(self, *args):
        """
        HasDescription(Handle_StepRepr_QuantifiedAssemblyComponentUsage self) -> Standard_Boolean

        Returns True if optional field Description is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage_HasDescription(self, *args)


    def RelatingProductDefinition(self, *args):
        """
        RelatingProductDefinition(Handle_StepRepr_QuantifiedAssemblyComponentUsage self) -> Handle_StepBasic_ProductDefinition

        Returns field RelatingProductDefinition

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinition

        """
        return _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage_RelatingProductDefinition(self, *args)


    def RelatingProductDefinitionAP242(self, *args):
        """
        RelatingProductDefinitionAP242(Handle_StepRepr_QuantifiedAssemblyComponentUsage self) -> StepBasic_ProductDefinitionOrReference

        Returns field RelatingProductDefinition in AP242

        :rtype: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference

        """
        return _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage_RelatingProductDefinitionAP242(self, *args)


    def SetRelatingProductDefinition(self, *args):
        """
        SetRelatingProductDefinition(Handle_StepRepr_QuantifiedAssemblyComponentUsage self, Handle_StepBasic_ProductDefinition RelatingProductDefinition)
        SetRelatingProductDefinition(Handle_StepRepr_QuantifiedAssemblyComponentUsage self, StepBasic_ProductDefinitionOrReference RelatingProductDefinition)

        Set field RelatingProductDefinition in AP242

        :type RelatingProductDefinition: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference

        """
        return _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage_SetRelatingProductDefinition(self, *args)


    def RelatedProductDefinition(self, *args):
        """
        RelatedProductDefinition(Handle_StepRepr_QuantifiedAssemblyComponentUsage self) -> Handle_StepBasic_ProductDefinition

        Returns field RelatedProductDefinition

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinition

        """
        return _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage_RelatedProductDefinition(self, *args)


    def RelatedProductDefinitionAP242(self, *args):
        """
        RelatedProductDefinitionAP242(Handle_StepRepr_QuantifiedAssemblyComponentUsage self) -> StepBasic_ProductDefinitionOrReference

        Returns field RelatedProductDefinition in AP242

        :rtype: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference

        """
        return _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage_RelatedProductDefinitionAP242(self, *args)


    def SetRelatedProductDefinition(self, *args):
        """
        SetRelatedProductDefinition(Handle_StepRepr_QuantifiedAssemblyComponentUsage self, Handle_StepBasic_ProductDefinition RelatedProductDefinition)
        SetRelatedProductDefinition(Handle_StepRepr_QuantifiedAssemblyComponentUsage self, StepBasic_ProductDefinitionOrReference RelatedProductDefinition)

        Set field RelatedProductDefinition in AP242

        :type RelatedProductDefinition: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference

        """
        return _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage_SetRelatedProductDefinition(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_QuantifiedAssemblyComponentUsage self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_QuantifiedAssemblyComponentUsage self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_QuantifiedAssemblyComponentUsage self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_QuantifiedAssemblyComponentUsage self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_QuantifiedAssemblyComponentUsage self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_QuantifiedAssemblyComponentUsage self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_QuantifiedAssemblyComponentUsage self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_QuantifiedAssemblyComponentUsage self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_QuantifiedAssemblyComponentUsage self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage_DecrementRefCounter(self, *args)

Handle_StepRepr_QuantifiedAssemblyComponentUsage_swigregister = _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage_swigregister
Handle_StepRepr_QuantifiedAssemblyComponentUsage_swigregister(Handle_StepRepr_QuantifiedAssemblyComponentUsage)

def Handle_StepRepr_QuantifiedAssemblyComponentUsage_DownCast(thing):
    return _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage_DownCast(thing)
Handle_StepRepr_QuantifiedAssemblyComponentUsage_DownCast = _StepRepr.Handle_StepRepr_QuantifiedAssemblyComponentUsage_DownCast

class StepRepr_ParallelOffset(StepRepr_DerivedShapeAspect):
    """Added for Dimensional Tolerances"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_ParallelOffset
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_ParallelOffset(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_ParallelOffset self) -> StepRepr_ParallelOffset

        Added for Dimensional Tolerances
        """
        this = _StepRepr.new_StepRepr_ParallelOffset(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepRepr_ParallelOffset self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepRepr_ProductDefinitionShape theOfShape, StepData_Logical const theProductDefinitional, Handle_StepBasic_MeasureWithUnit theOffset)

        Initialize all fields (own and inherited)

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape
        :type theProductDefinitional: OCC.wrapper.StepData.StepData_Logical
        :type theOffset: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepRepr.StepRepr_ParallelOffset_Init(self, *args)


    def Offset(self, *args):
        """
        Offset(StepRepr_ParallelOffset self) -> Handle_StepBasic_MeasureWithUnit

        Returns field Offset  

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepRepr.StepRepr_ParallelOffset_Offset(self, *args)


    def SetOffset(self, *args):
        """
        SetOffset(StepRepr_ParallelOffset self, Handle_StepBasic_MeasureWithUnit theOffset)

        Set field Offset  

        :type theOffset: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepRepr.StepRepr_ParallelOffset_SetOffset(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_ParallelOffset_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_ParallelOffset_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_ParallelOffset_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_ParallelOffset
StepRepr_ParallelOffset_swigregister = _StepRepr.StepRepr_ParallelOffset_swigregister
StepRepr_ParallelOffset_swigregister(StepRepr_ParallelOffset)

def StepRepr_ParallelOffset_get_type_name(*args):
    """
    StepRepr_ParallelOffset_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_ParallelOffset_get_type_name(*args)

def StepRepr_ParallelOffset_get_type_descriptor(*args):
    """
    StepRepr_ParallelOffset_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_ParallelOffset_get_type_descriptor(*args)

class Handle_StepRepr_MaterialProperty(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_MaterialProperty self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_MaterialProperty_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_MaterialProperty self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_MaterialProperty_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_MaterialProperty self, StepRepr_MaterialProperty thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_MaterialProperty_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_MaterialProperty self, Handle_StepRepr_MaterialProperty theHandle) -> Handle_StepRepr_MaterialProperty
        assign(Handle_StepRepr_MaterialProperty self, StepRepr_MaterialProperty thePtr) -> Handle_StepRepr_MaterialProperty
        assign(Handle_StepRepr_MaterialProperty self, Handle_StepRepr_MaterialProperty theHandle) -> Handle_StepRepr_MaterialProperty

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_MaterialProperty_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_MaterialProperty self) -> StepRepr_MaterialProperty

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_MaterialProperty_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_MaterialProperty self) -> StepRepr_MaterialProperty

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_MaterialProperty___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_MaterialProperty self) -> StepRepr_MaterialProperty

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_MaterialProperty___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_MaterialProperty___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_MaterialProperty___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_MaterialProperty(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_MaterialProperty_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_MaterialProperty

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_MaterialProperty self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_MaterialProperty_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_MaterialProperty_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_MaterialProperty_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepRepr_MaterialProperty self, Handle_TCollection_HAsciiString aName, Standard_Boolean const hasDescription, Handle_TCollection_HAsciiString aDescription, StepRepr_CharacterizedDefinition aDefinition)

        Initialize all fields (own and inherited)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type hasDescription: bool
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDefinition: OCC.wrapper.StepRepr.StepRepr_CharacterizedDefinition

        """
        return _StepRepr.Handle_StepRepr_MaterialProperty_Init(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_MaterialProperty self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_MaterialProperty_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_MaterialProperty self, Handle_TCollection_HAsciiString Name)

        Set field Name

        :type Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_MaterialProperty_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_MaterialProperty self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_MaterialProperty_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_MaterialProperty self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_MaterialProperty_SetDescription(self, *args)


    def HasDescription(self, *args):
        """
        HasDescription(Handle_StepRepr_MaterialProperty self) -> Standard_Boolean

        Returns True if optional field Description is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_MaterialProperty_HasDescription(self, *args)


    def Definition(self, *args):
        """
        Definition(Handle_StepRepr_MaterialProperty self) -> StepRepr_CharacterizedDefinition

        Returns field Definition

        :rtype: OCC.wrapper.StepRepr.StepRepr_CharacterizedDefinition

        """
        return _StepRepr.Handle_StepRepr_MaterialProperty_Definition(self, *args)


    def SetDefinition(self, *args):
        """
        SetDefinition(Handle_StepRepr_MaterialProperty self, StepRepr_CharacterizedDefinition Definition)

        Set field Definition

        :type Definition: OCC.wrapper.StepRepr.StepRepr_CharacterizedDefinition

        """
        return _StepRepr.Handle_StepRepr_MaterialProperty_SetDefinition(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_MaterialProperty self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_MaterialProperty_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_MaterialProperty self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_MaterialProperty self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_MaterialProperty_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_MaterialProperty self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_MaterialProperty self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_MaterialProperty_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_MaterialProperty self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_MaterialProperty_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_MaterialProperty self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_MaterialProperty_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_MaterialProperty self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_MaterialProperty_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_MaterialProperty self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_MaterialProperty_DecrementRefCounter(self, *args)

Handle_StepRepr_MaterialProperty_swigregister = _StepRepr.Handle_StepRepr_MaterialProperty_swigregister
Handle_StepRepr_MaterialProperty_swigregister(Handle_StepRepr_MaterialProperty)

def Handle_StepRepr_MaterialProperty_DownCast(thing):
    return _StepRepr.Handle_StepRepr_MaterialProperty_DownCast(thing)
Handle_StepRepr_MaterialProperty_DownCast = _StepRepr.Handle_StepRepr_MaterialProperty_DownCast

class StepRepr_PerpendicularTo(StepRepr_DerivedShapeAspect):
    """Added for Dimensional Tolerances"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_PerpendicularTo
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_PerpendicularTo(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_PerpendicularTo self) -> StepRepr_PerpendicularTo

        Added for Dimensional Tolerances
        """
        this = _StepRepr.new_StepRepr_PerpendicularTo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_PerpendicularTo_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_PerpendicularTo_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_PerpendicularTo_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_PerpendicularTo
StepRepr_PerpendicularTo_swigregister = _StepRepr.StepRepr_PerpendicularTo_swigregister
StepRepr_PerpendicularTo_swigregister(StepRepr_PerpendicularTo)

def StepRepr_PerpendicularTo_get_type_name(*args):
    """
    StepRepr_PerpendicularTo_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_PerpendicularTo_get_type_name(*args)

def StepRepr_PerpendicularTo_get_type_descriptor(*args):
    """
    StepRepr_PerpendicularTo_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_PerpendicularTo_get_type_descriptor(*args)

class StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI(StepRepr_ReprItemAndMeasureWithUnitAndQRI):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI(self) 
            return h


    def __init__(self, *args):
        """__init__(StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI self) -> StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI"""
        this = _StepRepr.new_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetPlaneAngleMeasureWithUnit(self, *args):
        """
        SetPlaneAngleMeasureWithUnit(StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI self, Handle_StepBasic_PlaneAngleMeasureWithUnit aLMWU)

        :type aLMWU: OCC.wrapper.StepBasic.Handle_StepBasic_PlaneAngleMeasureWithUnit

        """
        return _StepRepr.StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_SetPlaneAngleMeasureWithUnit(self, *args)


    def GetPlaneAngleMeasureWithUnit(self, *args):
        """
        GetPlaneAngleMeasureWithUnit(StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI self) -> Handle_StepBasic_PlaneAngleMeasureWithUnit

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_PlaneAngleMeasureWithUnit

        """
        return _StepRepr.StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_GetPlaneAngleMeasureWithUnit(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI
StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_swigregister = _StepRepr.StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_swigregister
StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_swigregister(StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI)

def StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_get_type_name(*args):
    """
    StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_get_type_name(*args)

def StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_get_type_descriptor(*args):
    """
    StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_get_type_descriptor(*args)

class Handle_StepRepr_ReprItemAndLengthMeasureWithUnit(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_ReprItemAndLengthMeasureWithUnit self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnit_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_ReprItemAndLengthMeasureWithUnit self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnit_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_ReprItemAndLengthMeasureWithUnit self, StepRepr_ReprItemAndLengthMeasureWithUnit thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnit_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_ReprItemAndLengthMeasureWithUnit self, Handle_StepRepr_ReprItemAndLengthMeasureWithUnit theHandle) -> Handle_StepRepr_ReprItemAndLengthMeasureWithUnit
        assign(Handle_StepRepr_ReprItemAndLengthMeasureWithUnit self, StepRepr_ReprItemAndLengthMeasureWithUnit thePtr) -> Handle_StepRepr_ReprItemAndLengthMeasureWithUnit
        assign(Handle_StepRepr_ReprItemAndLengthMeasureWithUnit self, Handle_StepRepr_ReprItemAndLengthMeasureWithUnit theHandle) -> Handle_StepRepr_ReprItemAndLengthMeasureWithUnit

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnit_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_ReprItemAndLengthMeasureWithUnit self) -> StepRepr_ReprItemAndLengthMeasureWithUnit

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnit_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_ReprItemAndLengthMeasureWithUnit self) -> StepRepr_ReprItemAndLengthMeasureWithUnit

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnit___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_ReprItemAndLengthMeasureWithUnit self) -> StepRepr_ReprItemAndLengthMeasureWithUnit

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnit___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnit___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnit___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_ReprItemAndLengthMeasureWithUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnit_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_ReprItemAndLengthMeasureWithUnit

    def SetLengthMeasureWithUnit(self, *args):
        """
        SetLengthMeasureWithUnit(Handle_StepRepr_ReprItemAndLengthMeasureWithUnit self, Handle_StepBasic_LengthMeasureWithUnit aLMWU)

        :type aLMWU: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnit_SetLengthMeasureWithUnit(self, *args)


    def GetLengthMeasureWithUnit(self, *args):
        """
        GetLengthMeasureWithUnit(Handle_StepRepr_ReprItemAndLengthMeasureWithUnit self) -> Handle_StepBasic_LengthMeasureWithUnit

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnit_GetLengthMeasureWithUnit(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_ReprItemAndLengthMeasureWithUnit self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnit_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnit_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnit_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepRepr_ReprItemAndLengthMeasureWithUnit self, Handle_StepBasic_MeasureWithUnit aMWU, Handle_StepRepr_RepresentationItem aRI)

        :type aMWU: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type aRI: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnit_Init(self, *args)


    def GetMeasureRepresentationItem(self, *args):
        """
        GetMeasureRepresentationItem(Handle_StepRepr_ReprItemAndLengthMeasureWithUnit self) -> Handle_StepRepr_MeasureRepresentationItem

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_MeasureRepresentationItem

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnit_GetMeasureRepresentationItem(self, *args)


    def SetMeasureWithUnit(self, *args):
        """
        SetMeasureWithUnit(Handle_StepRepr_ReprItemAndLengthMeasureWithUnit self, Handle_StepBasic_MeasureWithUnit aMWU)

        :type aMWU: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnit_SetMeasureWithUnit(self, *args)


    def GetMeasureWithUnit(self, *args):
        """
        GetMeasureWithUnit(Handle_StepRepr_ReprItemAndLengthMeasureWithUnit self) -> Handle_StepBasic_MeasureWithUnit

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnit_GetMeasureWithUnit(self, *args)


    def GetRepresentationItem(self, *args):
        """
        GetRepresentationItem(Handle_StepRepr_ReprItemAndLengthMeasureWithUnit self) -> Handle_StepRepr_RepresentationItem

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnit_GetRepresentationItem(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_ReprItemAndLengthMeasureWithUnit self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnit_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_ReprItemAndLengthMeasureWithUnit self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnit_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_ReprItemAndLengthMeasureWithUnit self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnit_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_ReprItemAndLengthMeasureWithUnit self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_ReprItemAndLengthMeasureWithUnit self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnit_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_ReprItemAndLengthMeasureWithUnit self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_ReprItemAndLengthMeasureWithUnit self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnit_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_ReprItemAndLengthMeasureWithUnit self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnit_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_ReprItemAndLengthMeasureWithUnit self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnit_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_ReprItemAndLengthMeasureWithUnit self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnit_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_ReprItemAndLengthMeasureWithUnit self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnit_DecrementRefCounter(self, *args)

Handle_StepRepr_ReprItemAndLengthMeasureWithUnit_swigregister = _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnit_swigregister
Handle_StepRepr_ReprItemAndLengthMeasureWithUnit_swigregister(Handle_StepRepr_ReprItemAndLengthMeasureWithUnit)

def Handle_StepRepr_ReprItemAndLengthMeasureWithUnit_DownCast(thing):
    return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnit_DownCast(thing)
Handle_StepRepr_ReprItemAndLengthMeasureWithUnit_DownCast = _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnit_DownCast

class Handle_StepRepr_SuppliedPartRelationship(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_SuppliedPartRelationship self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_SuppliedPartRelationship_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_SuppliedPartRelationship self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_SuppliedPartRelationship_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_SuppliedPartRelationship self, StepRepr_SuppliedPartRelationship thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_SuppliedPartRelationship_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_SuppliedPartRelationship self, Handle_StepRepr_SuppliedPartRelationship theHandle) -> Handle_StepRepr_SuppliedPartRelationship
        assign(Handle_StepRepr_SuppliedPartRelationship self, StepRepr_SuppliedPartRelationship thePtr) -> Handle_StepRepr_SuppliedPartRelationship
        assign(Handle_StepRepr_SuppliedPartRelationship self, Handle_StepRepr_SuppliedPartRelationship theHandle) -> Handle_StepRepr_SuppliedPartRelationship

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_SuppliedPartRelationship_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_SuppliedPartRelationship self) -> StepRepr_SuppliedPartRelationship

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_SuppliedPartRelationship_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_SuppliedPartRelationship self) -> StepRepr_SuppliedPartRelationship

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_SuppliedPartRelationship___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_SuppliedPartRelationship self) -> StepRepr_SuppliedPartRelationship

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_SuppliedPartRelationship___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_SuppliedPartRelationship___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_SuppliedPartRelationship___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_SuppliedPartRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_SuppliedPartRelationship_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_SuppliedPartRelationship

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_SuppliedPartRelationship self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_SuppliedPartRelationship_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_SuppliedPartRelationship_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_SuppliedPartRelationship_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepRepr_SuppliedPartRelationship self, Handle_TCollection_HAsciiString aId, Handle_TCollection_HAsciiString aName, Standard_Boolean const hasDescription, Handle_TCollection_HAsciiString aDescription, Handle_StepBasic_ProductDefinition aRelatingProductDefinition, Handle_StepBasic_ProductDefinition aRelatedProductDefinition)
        Init(Handle_StepRepr_SuppliedPartRelationship self, Handle_TCollection_HAsciiString aId, Handle_TCollection_HAsciiString aName, Standard_Boolean const hasDescription, Handle_TCollection_HAsciiString aDescription, StepBasic_ProductDefinitionOrReference aRelatingProductDefinition, StepBasic_ProductDefinitionOrReference aRelatedProductDefinition)

        Initialize all fields (own and inherited)

        :type aId: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type hasDescription: bool
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aRelatingProductDefinition: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference
        :type aRelatedProductDefinition: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference

        """
        return _StepRepr.Handle_StepRepr_SuppliedPartRelationship_Init(self, *args)


    def Id(self, *args):
        """
        Id(Handle_StepRepr_SuppliedPartRelationship self) -> Handle_TCollection_HAsciiString

        Returns field Id

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_SuppliedPartRelationship_Id(self, *args)


    def SetId(self, *args):
        """
        SetId(Handle_StepRepr_SuppliedPartRelationship self, Handle_TCollection_HAsciiString Id)

        Set field Id

        :type Id: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_SuppliedPartRelationship_SetId(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_SuppliedPartRelationship self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_SuppliedPartRelationship_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_SuppliedPartRelationship self, Handle_TCollection_HAsciiString Name)

        Set field Name

        :type Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_SuppliedPartRelationship_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_SuppliedPartRelationship self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_SuppliedPartRelationship_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_SuppliedPartRelationship self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_SuppliedPartRelationship_SetDescription(self, *args)


    def HasDescription(self, *args):
        """
        HasDescription(Handle_StepRepr_SuppliedPartRelationship self) -> Standard_Boolean

        Returns True if optional field Description is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_SuppliedPartRelationship_HasDescription(self, *args)


    def RelatingProductDefinition(self, *args):
        """
        RelatingProductDefinition(Handle_StepRepr_SuppliedPartRelationship self) -> Handle_StepBasic_ProductDefinition

        Returns field RelatingProductDefinition

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinition

        """
        return _StepRepr.Handle_StepRepr_SuppliedPartRelationship_RelatingProductDefinition(self, *args)


    def RelatingProductDefinitionAP242(self, *args):
        """
        RelatingProductDefinitionAP242(Handle_StepRepr_SuppliedPartRelationship self) -> StepBasic_ProductDefinitionOrReference

        Returns field RelatingProductDefinition in AP242

        :rtype: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference

        """
        return _StepRepr.Handle_StepRepr_SuppliedPartRelationship_RelatingProductDefinitionAP242(self, *args)


    def SetRelatingProductDefinition(self, *args):
        """
        SetRelatingProductDefinition(Handle_StepRepr_SuppliedPartRelationship self, Handle_StepBasic_ProductDefinition RelatingProductDefinition)
        SetRelatingProductDefinition(Handle_StepRepr_SuppliedPartRelationship self, StepBasic_ProductDefinitionOrReference RelatingProductDefinition)

        Set field RelatingProductDefinition in AP242

        :type RelatingProductDefinition: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference

        """
        return _StepRepr.Handle_StepRepr_SuppliedPartRelationship_SetRelatingProductDefinition(self, *args)


    def RelatedProductDefinition(self, *args):
        """
        RelatedProductDefinition(Handle_StepRepr_SuppliedPartRelationship self) -> Handle_StepBasic_ProductDefinition

        Returns field RelatedProductDefinition

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinition

        """
        return _StepRepr.Handle_StepRepr_SuppliedPartRelationship_RelatedProductDefinition(self, *args)


    def RelatedProductDefinitionAP242(self, *args):
        """
        RelatedProductDefinitionAP242(Handle_StepRepr_SuppliedPartRelationship self) -> StepBasic_ProductDefinitionOrReference

        Returns field RelatedProductDefinition in AP242

        :rtype: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference

        """
        return _StepRepr.Handle_StepRepr_SuppliedPartRelationship_RelatedProductDefinitionAP242(self, *args)


    def SetRelatedProductDefinition(self, *args):
        """
        SetRelatedProductDefinition(Handle_StepRepr_SuppliedPartRelationship self, Handle_StepBasic_ProductDefinition RelatedProductDefinition)
        SetRelatedProductDefinition(Handle_StepRepr_SuppliedPartRelationship self, StepBasic_ProductDefinitionOrReference RelatedProductDefinition)

        Set field RelatedProductDefinition in AP242

        :type RelatedProductDefinition: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference

        """
        return _StepRepr.Handle_StepRepr_SuppliedPartRelationship_SetRelatedProductDefinition(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_SuppliedPartRelationship self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_SuppliedPartRelationship_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_SuppliedPartRelationship self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_SuppliedPartRelationship self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_SuppliedPartRelationship_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_SuppliedPartRelationship self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_SuppliedPartRelationship self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_SuppliedPartRelationship_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_SuppliedPartRelationship self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_SuppliedPartRelationship_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_SuppliedPartRelationship self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_SuppliedPartRelationship_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_SuppliedPartRelationship self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_SuppliedPartRelationship_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_SuppliedPartRelationship self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_SuppliedPartRelationship_DecrementRefCounter(self, *args)

Handle_StepRepr_SuppliedPartRelationship_swigregister = _StepRepr.Handle_StepRepr_SuppliedPartRelationship_swigregister
Handle_StepRepr_SuppliedPartRelationship_swigregister(Handle_StepRepr_SuppliedPartRelationship)

def Handle_StepRepr_SuppliedPartRelationship_DownCast(thing):
    return _StepRepr.Handle_StepRepr_SuppliedPartRelationship_DownCast(thing)
Handle_StepRepr_SuppliedPartRelationship_DownCast = _StepRepr.Handle_StepRepr_SuppliedPartRelationship_DownCast

class Handle_StepRepr_CompShAspAndDatumFeatAndShAsp(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_CompShAspAndDatumFeatAndShAsp self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_CompShAspAndDatumFeatAndShAsp_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_CompShAspAndDatumFeatAndShAsp self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_CompShAspAndDatumFeatAndShAsp_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_CompShAspAndDatumFeatAndShAsp self, StepRepr_CompShAspAndDatumFeatAndShAsp thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_CompShAspAndDatumFeatAndShAsp_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_CompShAspAndDatumFeatAndShAsp self, Handle_StepRepr_CompShAspAndDatumFeatAndShAsp theHandle) -> Handle_StepRepr_CompShAspAndDatumFeatAndShAsp
        assign(Handle_StepRepr_CompShAspAndDatumFeatAndShAsp self, StepRepr_CompShAspAndDatumFeatAndShAsp thePtr) -> Handle_StepRepr_CompShAspAndDatumFeatAndShAsp
        assign(Handle_StepRepr_CompShAspAndDatumFeatAndShAsp self, Handle_StepRepr_CompShAspAndDatumFeatAndShAsp theHandle) -> Handle_StepRepr_CompShAspAndDatumFeatAndShAsp

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_CompShAspAndDatumFeatAndShAsp_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_CompShAspAndDatumFeatAndShAsp self) -> StepRepr_CompShAspAndDatumFeatAndShAsp

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_CompShAspAndDatumFeatAndShAsp_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_CompShAspAndDatumFeatAndShAsp self) -> StepRepr_CompShAspAndDatumFeatAndShAsp

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_CompShAspAndDatumFeatAndShAsp___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_CompShAspAndDatumFeatAndShAsp self) -> StepRepr_CompShAspAndDatumFeatAndShAsp

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_CompShAspAndDatumFeatAndShAsp___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_CompShAspAndDatumFeatAndShAsp___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_CompShAspAndDatumFeatAndShAsp___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_CompShAspAndDatumFeatAndShAsp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_CompShAspAndDatumFeatAndShAsp_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_CompShAspAndDatumFeatAndShAsp

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_CompShAspAndDatumFeatAndShAsp self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_CompShAspAndDatumFeatAndShAsp_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_CompShAspAndDatumFeatAndShAsp_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_CompShAspAndDatumFeatAndShAsp_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepRepr_CompShAspAndDatumFeatAndShAsp self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepRepr_ProductDefinitionShape aOfShape, StepData_Logical const aProductDefinitional)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape
        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_CompShAspAndDatumFeatAndShAsp_Init(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_CompShAspAndDatumFeatAndShAsp self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_CompShAspAndDatumFeatAndShAsp_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_CompShAspAndDatumFeatAndShAsp self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_CompShAspAndDatumFeatAndShAsp_Name(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_CompShAspAndDatumFeatAndShAsp self, Handle_TCollection_HAsciiString aDescription)

        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_CompShAspAndDatumFeatAndShAsp_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_CompShAspAndDatumFeatAndShAsp self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_CompShAspAndDatumFeatAndShAsp_Description(self, *args)


    def SetOfShape(self, *args):
        """
        SetOfShape(Handle_StepRepr_CompShAspAndDatumFeatAndShAsp self, Handle_StepRepr_ProductDefinitionShape aOfShape)

        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepRepr.Handle_StepRepr_CompShAspAndDatumFeatAndShAsp_SetOfShape(self, *args)


    def OfShape(self, *args):
        """
        OfShape(Handle_StepRepr_CompShAspAndDatumFeatAndShAsp self) -> Handle_StepRepr_ProductDefinitionShape

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepRepr.Handle_StepRepr_CompShAspAndDatumFeatAndShAsp_OfShape(self, *args)


    def SetProductDefinitional(self, *args):
        """
        SetProductDefinitional(Handle_StepRepr_CompShAspAndDatumFeatAndShAsp self, StepData_Logical const aProductDefinitional)

        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_CompShAspAndDatumFeatAndShAsp_SetProductDefinitional(self, *args)


    def ProductDefinitional(self, *args):
        """
        ProductDefinitional(Handle_StepRepr_CompShAspAndDatumFeatAndShAsp self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_CompShAspAndDatumFeatAndShAsp_ProductDefinitional(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_CompShAspAndDatumFeatAndShAsp self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_CompShAspAndDatumFeatAndShAsp_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_CompShAspAndDatumFeatAndShAsp self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_CompShAspAndDatumFeatAndShAsp self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_CompShAspAndDatumFeatAndShAsp_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_CompShAspAndDatumFeatAndShAsp self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_CompShAspAndDatumFeatAndShAsp self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_CompShAspAndDatumFeatAndShAsp_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_CompShAspAndDatumFeatAndShAsp self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_CompShAspAndDatumFeatAndShAsp_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_CompShAspAndDatumFeatAndShAsp self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_CompShAspAndDatumFeatAndShAsp_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_CompShAspAndDatumFeatAndShAsp self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_CompShAspAndDatumFeatAndShAsp_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_CompShAspAndDatumFeatAndShAsp self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_CompShAspAndDatumFeatAndShAsp_DecrementRefCounter(self, *args)

Handle_StepRepr_CompShAspAndDatumFeatAndShAsp_swigregister = _StepRepr.Handle_StepRepr_CompShAspAndDatumFeatAndShAsp_swigregister
Handle_StepRepr_CompShAspAndDatumFeatAndShAsp_swigregister(Handle_StepRepr_CompShAspAndDatumFeatAndShAsp)

def Handle_StepRepr_CompShAspAndDatumFeatAndShAsp_DownCast(thing):
    return _StepRepr.Handle_StepRepr_CompShAspAndDatumFeatAndShAsp_DownCast(thing)
Handle_StepRepr_CompShAspAndDatumFeatAndShAsp_DownCast = _StepRepr.Handle_StepRepr_CompShAspAndDatumFeatAndShAsp_DownCast

class StepRepr_CentreOfSymmetry(StepRepr_DerivedShapeAspect):
    """Added for Dimensional Tolerances"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_CentreOfSymmetry
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_CentreOfSymmetry(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_CentreOfSymmetry self) -> StepRepr_CentreOfSymmetry

        Added for Dimensional Tolerances
        """
        this = _StepRepr.new_StepRepr_CentreOfSymmetry(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_CentreOfSymmetry_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_CentreOfSymmetry_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_CentreOfSymmetry_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_CentreOfSymmetry
StepRepr_CentreOfSymmetry_swigregister = _StepRepr.StepRepr_CentreOfSymmetry_swigregister
StepRepr_CentreOfSymmetry_swigregister(StepRepr_CentreOfSymmetry)

def StepRepr_CentreOfSymmetry_get_type_name(*args):
    """
    StepRepr_CentreOfSymmetry_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_CentreOfSymmetry_get_type_name(*args)

def StepRepr_CentreOfSymmetry_get_type_descriptor(*args):
    """
    StepRepr_CentreOfSymmetry_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_CentreOfSymmetry_get_type_descriptor(*args)

class NCollection_Sequence_Handle_StepRepr_RepresentationItem(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_Handle_StepRepr_RepresentationItem self) -> NCollection_Sequence< opencascade::handle< StepRepr_RepresentationItem > >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_RepresentationItem_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_Handle_StepRepr_RepresentationItem self) -> NCollection_Sequence< opencascade::handle< StepRepr_RepresentationItem > >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_RepresentationItem_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_Handle_StepRepr_RepresentationItem self) -> NCollection_Sequence< opencascade::handle< StepRepr_RepresentationItem > >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_RepresentationItem_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_Handle_StepRepr_RepresentationItem self) -> NCollection_Sequence< opencascade::handle< StepRepr_RepresentationItem > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_RepresentationItem_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _StepRepr.new_NCollection_Sequence_Handle_StepRepr_RepresentationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_Handle_StepRepr_RepresentationItem self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_RepresentationItem_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_Handle_StepRepr_RepresentationItem self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_RepresentationItem_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_Handle_StepRepr_RepresentationItem self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_RepresentationItem_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_Handle_StepRepr_RepresentationItem self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_RepresentationItem_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_Handle_StepRepr_RepresentationItem self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_RepresentationItem_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_Handle_StepRepr_RepresentationItem self)

        Reverse sequence


        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_RepresentationItem_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_Handle_StepRepr_RepresentationItem self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_RepresentationItem_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_RepresentationItem_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_Handle_StepRepr_RepresentationItem self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_RepresentationItem_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_Handle_StepRepr_RepresentationItem self, NCollection_Sequence_Handle_StepRepr_RepresentationItem theOther) -> NCollection_Sequence_Handle_StepRepr_RepresentationItem

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_RepresentationItem_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_Handle_StepRepr_RepresentationItem self, NCollection_Sequence_Handle_StepRepr_RepresentationItem theOther) -> NCollection_Sequence_Handle_StepRepr_RepresentationItem

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_RepresentationItem_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_Handle_StepRepr_RepresentationItem self, NCollection_Sequence< opencascade::handle< StepRepr_RepresentationItem > >::Iterator & thePosition)
        Remove(NCollection_Sequence_Handle_StepRepr_RepresentationItem self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_Handle_StepRepr_RepresentationItem self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_RepresentationItem_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_Handle_StepRepr_RepresentationItem self, Handle_StepRepr_RepresentationItem theItem)
        Append(NCollection_Sequence_Handle_StepRepr_RepresentationItem self, NCollection_Sequence_Handle_StepRepr_RepresentationItem theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_RepresentationItem_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_Handle_StepRepr_RepresentationItem self, Handle_StepRepr_RepresentationItem theItem)
        Prepend(NCollection_Sequence_Handle_StepRepr_RepresentationItem self, NCollection_Sequence_Handle_StepRepr_RepresentationItem theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_RepresentationItem_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_Handle_StepRepr_RepresentationItem self, Standard_Integer const theIndex, Handle_StepRepr_RepresentationItem theItem)
        InsertBefore(NCollection_Sequence_Handle_StepRepr_RepresentationItem self, Standard_Integer const theIndex, NCollection_Sequence_Handle_StepRepr_RepresentationItem theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_RepresentationItem_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_Handle_StepRepr_RepresentationItem self, NCollection_Sequence< opencascade::handle< StepRepr_RepresentationItem > >::Iterator & thePosition, Handle_StepRepr_RepresentationItem theItem)
        InsertAfter(NCollection_Sequence_Handle_StepRepr_RepresentationItem self, Standard_Integer const theIndex, NCollection_Sequence_Handle_StepRepr_RepresentationItem theSeq)
        InsertAfter(NCollection_Sequence_Handle_StepRepr_RepresentationItem self, Standard_Integer const theIndex, Handle_StepRepr_RepresentationItem theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_RepresentationItem_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_Handle_StepRepr_RepresentationItem self, Standard_Integer const theIndex, NCollection_Sequence_Handle_StepRepr_RepresentationItem theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_RepresentationItem_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _StepRepr.NCollection_Sequence_Handle_StepRepr_RepresentationItem_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_Handle_StepRepr_RepresentationItem self) -> Handle_StepRepr_RepresentationItem

        First item access

        :rtype: TheItemType &

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_RepresentationItem_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _StepRepr.NCollection_Sequence_Handle_StepRepr_RepresentationItem_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_Handle_StepRepr_RepresentationItem self) -> Handle_StepRepr_RepresentationItem

        Last item access

        :rtype: TheItemType &

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_RepresentationItem_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepRepr.NCollection_Sequence_Handle_StepRepr_RepresentationItem_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_Handle_StepRepr_RepresentationItem self, Standard_Integer const theIndex) -> Handle_StepRepr_RepresentationItem

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_RepresentationItem_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepRepr.NCollection_Sequence_Handle_StepRepr_RepresentationItem___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_Handle_StepRepr_RepresentationItem self, Standard_Integer const theIndex, Handle_StepRepr_RepresentationItem theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_RepresentationItem_SetValue(self, *args)


    def __iter__(self):
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_RepresentationItem___iter__(self)
    __swig_destroy__ = _StepRepr.delete_NCollection_Sequence_Handle_StepRepr_RepresentationItem
NCollection_Sequence_Handle_StepRepr_RepresentationItem_swigregister = _StepRepr.NCollection_Sequence_Handle_StepRepr_RepresentationItem_swigregister
NCollection_Sequence_Handle_StepRepr_RepresentationItem_swigregister(NCollection_Sequence_Handle_StepRepr_RepresentationItem)

def NCollection_Sequence_Handle_StepRepr_RepresentationItem_delNode(*args):
    """
    NCollection_Sequence_Handle_StepRepr_RepresentationItem_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _StepRepr.NCollection_Sequence_Handle_StepRepr_RepresentationItem_delNode(*args)

class NCollection_Sequence_Handle_StepRepr_RepresentationItem_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _StepRepr.new_NCollection_Sequence_Handle_StepRepr_RepresentationItem_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StepRepr.delete_NCollection_Sequence_Handle_StepRepr_RepresentationItem_IteratorHelper

    def __next__(self):
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_RepresentationItem_IteratorHelper___next__(self)
NCollection_Sequence_Handle_StepRepr_RepresentationItem_IteratorHelper_swigregister = _StepRepr.NCollection_Sequence_Handle_StepRepr_RepresentationItem_IteratorHelper_swigregister
NCollection_Sequence_Handle_StepRepr_RepresentationItem_IteratorHelper_swigregister(NCollection_Sequence_Handle_StepRepr_RepresentationItem_IteratorHelper)


try:
	StepRepr_SequenceOfRepresentationItem = NCollection_Sequence_Handle_StepRepr_RepresentationItem
except NameError:
	pass # does not exist, probably ignored

class Handle_StepRepr_Tangent(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_Tangent self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_Tangent_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_Tangent self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_Tangent_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_Tangent self, StepRepr_Tangent thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_Tangent_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_Tangent self, Handle_StepRepr_Tangent theHandle) -> Handle_StepRepr_Tangent
        assign(Handle_StepRepr_Tangent self, StepRepr_Tangent thePtr) -> Handle_StepRepr_Tangent
        assign(Handle_StepRepr_Tangent self, Handle_StepRepr_Tangent theHandle) -> Handle_StepRepr_Tangent

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_Tangent_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_Tangent self) -> StepRepr_Tangent

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_Tangent_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_Tangent self) -> StepRepr_Tangent

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_Tangent___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_Tangent self) -> StepRepr_Tangent

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_Tangent___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_Tangent___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_Tangent___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_Tangent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_Tangent_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_Tangent

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_Tangent self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_Tangent_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_Tangent_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_Tangent_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepRepr_Tangent self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepRepr_ProductDefinitionShape aOfShape, StepData_Logical const aProductDefinitional)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape
        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_Tangent_Init(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_Tangent self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_Tangent_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_Tangent self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_Tangent_Name(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_Tangent self, Handle_TCollection_HAsciiString aDescription)

        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_Tangent_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_Tangent self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_Tangent_Description(self, *args)


    def SetOfShape(self, *args):
        """
        SetOfShape(Handle_StepRepr_Tangent self, Handle_StepRepr_ProductDefinitionShape aOfShape)

        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepRepr.Handle_StepRepr_Tangent_SetOfShape(self, *args)


    def OfShape(self, *args):
        """
        OfShape(Handle_StepRepr_Tangent self) -> Handle_StepRepr_ProductDefinitionShape

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepRepr.Handle_StepRepr_Tangent_OfShape(self, *args)


    def SetProductDefinitional(self, *args):
        """
        SetProductDefinitional(Handle_StepRepr_Tangent self, StepData_Logical const aProductDefinitional)

        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_Tangent_SetProductDefinitional(self, *args)


    def ProductDefinitional(self, *args):
        """
        ProductDefinitional(Handle_StepRepr_Tangent self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_Tangent_ProductDefinitional(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_Tangent self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_Tangent_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_Tangent self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_Tangent self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_Tangent_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_Tangent self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_Tangent self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_Tangent_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_Tangent self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_Tangent_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_Tangent self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_Tangent_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_Tangent self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_Tangent_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_Tangent self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_Tangent_DecrementRefCounter(self, *args)

Handle_StepRepr_Tangent_swigregister = _StepRepr.Handle_StepRepr_Tangent_swigregister
Handle_StepRepr_Tangent_swigregister(Handle_StepRepr_Tangent)

def Handle_StepRepr_Tangent_DownCast(thing):
    return _StepRepr.Handle_StepRepr_Tangent_DownCast(thing)
Handle_StepRepr_Tangent_DownCast = _StepRepr.Handle_StepRepr_Tangent_DownCast

class Handle_StepRepr_ConfigurationItem(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_ConfigurationItem self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_ConfigurationItem_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_ConfigurationItem self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_ConfigurationItem_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_ConfigurationItem self, StepRepr_ConfigurationItem thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_ConfigurationItem_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_ConfigurationItem self, Handle_StepRepr_ConfigurationItem theHandle) -> Handle_StepRepr_ConfigurationItem
        assign(Handle_StepRepr_ConfigurationItem self, StepRepr_ConfigurationItem thePtr) -> Handle_StepRepr_ConfigurationItem
        assign(Handle_StepRepr_ConfigurationItem self, Handle_StepRepr_ConfigurationItem theHandle) -> Handle_StepRepr_ConfigurationItem

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_ConfigurationItem_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_ConfigurationItem self) -> StepRepr_ConfigurationItem

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ConfigurationItem_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_ConfigurationItem self) -> StepRepr_ConfigurationItem

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ConfigurationItem___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_ConfigurationItem self) -> StepRepr_ConfigurationItem

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_ConfigurationItem___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_ConfigurationItem___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_ConfigurationItem___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_ConfigurationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_ConfigurationItem_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_ConfigurationItem

    def Init(self, *args):
        """
        Init(Handle_StepRepr_ConfigurationItem self, Handle_TCollection_HAsciiString aId, Handle_TCollection_HAsciiString aName, Standard_Boolean const hasDescription, Handle_TCollection_HAsciiString aDescription, Handle_StepRepr_ProductConcept aItemConcept, Standard_Boolean const hasPurpose, Handle_TCollection_HAsciiString aPurpose)

        Initialize all fields (own and inherited)

        :type aId: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type hasDescription: bool
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aItemConcept: OCC.wrapper.StepRepr.Handle_StepRepr_ProductConcept
        :type hasPurpose: bool
        :type aPurpose: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ConfigurationItem_Init(self, *args)


    def Id(self, *args):
        """
        Id(Handle_StepRepr_ConfigurationItem self) -> Handle_TCollection_HAsciiString

        Returns field Id

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ConfigurationItem_Id(self, *args)


    def SetId(self, *args):
        """
        SetId(Handle_StepRepr_ConfigurationItem self, Handle_TCollection_HAsciiString Id)

        Set field Id

        :type Id: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ConfigurationItem_SetId(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_ConfigurationItem self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ConfigurationItem_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_ConfigurationItem self, Handle_TCollection_HAsciiString Name)

        Set field Name

        :type Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ConfigurationItem_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_ConfigurationItem self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ConfigurationItem_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_ConfigurationItem self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ConfigurationItem_SetDescription(self, *args)


    def HasDescription(self, *args):
        """
        HasDescription(Handle_StepRepr_ConfigurationItem self) -> Standard_Boolean

        Returns True if optional field Description is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ConfigurationItem_HasDescription(self, *args)


    def ItemConcept(self, *args):
        """
        ItemConcept(Handle_StepRepr_ConfigurationItem self) -> Handle_StepRepr_ProductConcept

        Returns field ItemConcept

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ProductConcept

        """
        return _StepRepr.Handle_StepRepr_ConfigurationItem_ItemConcept(self, *args)


    def SetItemConcept(self, *args):
        """
        SetItemConcept(Handle_StepRepr_ConfigurationItem self, Handle_StepRepr_ProductConcept ItemConcept)

        Set field ItemConcept

        :type ItemConcept: OCC.wrapper.StepRepr.Handle_StepRepr_ProductConcept

        """
        return _StepRepr.Handle_StepRepr_ConfigurationItem_SetItemConcept(self, *args)


    def Purpose(self, *args):
        """
        Purpose(Handle_StepRepr_ConfigurationItem self) -> Handle_TCollection_HAsciiString

        Returns field Purpose

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ConfigurationItem_Purpose(self, *args)


    def SetPurpose(self, *args):
        """
        SetPurpose(Handle_StepRepr_ConfigurationItem self, Handle_TCollection_HAsciiString Purpose)

        Set field Purpose

        :type Purpose: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ConfigurationItem_SetPurpose(self, *args)


    def HasPurpose(self, *args):
        """
        HasPurpose(Handle_StepRepr_ConfigurationItem self) -> Standard_Boolean

        Returns True if optional field Purpose is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ConfigurationItem_HasPurpose(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_ConfigurationItem self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_ConfigurationItem_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ConfigurationItem_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ConfigurationItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_ConfigurationItem self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_ConfigurationItem_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_ConfigurationItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_ConfigurationItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ConfigurationItem_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_ConfigurationItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_ConfigurationItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ConfigurationItem_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_ConfigurationItem self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_ConfigurationItem_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_ConfigurationItem self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ConfigurationItem_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_ConfigurationItem self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_ConfigurationItem_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_ConfigurationItem self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ConfigurationItem_DecrementRefCounter(self, *args)

Handle_StepRepr_ConfigurationItem_swigregister = _StepRepr.Handle_StepRepr_ConfigurationItem_swigregister
Handle_StepRepr_ConfigurationItem_swigregister(Handle_StepRepr_ConfigurationItem)

def Handle_StepRepr_ConfigurationItem_DownCast(thing):
    return _StepRepr.Handle_StepRepr_ConfigurationItem_DownCast(thing)
Handle_StepRepr_ConfigurationItem_DownCast = _StepRepr.Handle_StepRepr_ConfigurationItem_DownCast

class Handle_StepRepr_GeometricAlignment(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_GeometricAlignment self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_GeometricAlignment_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_GeometricAlignment self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_GeometricAlignment_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_GeometricAlignment self, StepRepr_GeometricAlignment thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_GeometricAlignment_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_GeometricAlignment self, Handle_StepRepr_GeometricAlignment theHandle) -> Handle_StepRepr_GeometricAlignment
        assign(Handle_StepRepr_GeometricAlignment self, StepRepr_GeometricAlignment thePtr) -> Handle_StepRepr_GeometricAlignment
        assign(Handle_StepRepr_GeometricAlignment self, Handle_StepRepr_GeometricAlignment theHandle) -> Handle_StepRepr_GeometricAlignment

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_GeometricAlignment_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_GeometricAlignment self) -> StepRepr_GeometricAlignment

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_GeometricAlignment_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_GeometricAlignment self) -> StepRepr_GeometricAlignment

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_GeometricAlignment___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_GeometricAlignment self) -> StepRepr_GeometricAlignment

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_GeometricAlignment___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_GeometricAlignment___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_GeometricAlignment___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_GeometricAlignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_GeometricAlignment_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_GeometricAlignment

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_GeometricAlignment self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_GeometricAlignment_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_GeometricAlignment_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_GeometricAlignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepRepr_GeometricAlignment self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepRepr_ProductDefinitionShape aOfShape, StepData_Logical const aProductDefinitional)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape
        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_GeometricAlignment_Init(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_GeometricAlignment self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_GeometricAlignment_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_GeometricAlignment self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_GeometricAlignment_Name(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_GeometricAlignment self, Handle_TCollection_HAsciiString aDescription)

        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_GeometricAlignment_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_GeometricAlignment self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_GeometricAlignment_Description(self, *args)


    def SetOfShape(self, *args):
        """
        SetOfShape(Handle_StepRepr_GeometricAlignment self, Handle_StepRepr_ProductDefinitionShape aOfShape)

        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepRepr.Handle_StepRepr_GeometricAlignment_SetOfShape(self, *args)


    def OfShape(self, *args):
        """
        OfShape(Handle_StepRepr_GeometricAlignment self) -> Handle_StepRepr_ProductDefinitionShape

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepRepr.Handle_StepRepr_GeometricAlignment_OfShape(self, *args)


    def SetProductDefinitional(self, *args):
        """
        SetProductDefinitional(Handle_StepRepr_GeometricAlignment self, StepData_Logical const aProductDefinitional)

        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_GeometricAlignment_SetProductDefinitional(self, *args)


    def ProductDefinitional(self, *args):
        """
        ProductDefinitional(Handle_StepRepr_GeometricAlignment self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_GeometricAlignment_ProductDefinitional(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_GeometricAlignment self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_GeometricAlignment_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_GeometricAlignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_GeometricAlignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_GeometricAlignment_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_GeometricAlignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_GeometricAlignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_GeometricAlignment_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_GeometricAlignment self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_GeometricAlignment_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_GeometricAlignment self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_GeometricAlignment_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_GeometricAlignment self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_GeometricAlignment_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_GeometricAlignment self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_GeometricAlignment_DecrementRefCounter(self, *args)

Handle_StepRepr_GeometricAlignment_swigregister = _StepRepr.Handle_StepRepr_GeometricAlignment_swigregister
Handle_StepRepr_GeometricAlignment_swigregister(Handle_StepRepr_GeometricAlignment)

def Handle_StepRepr_GeometricAlignment_DownCast(thing):
    return _StepRepr.Handle_StepRepr_GeometricAlignment_DownCast(thing)
Handle_StepRepr_GeometricAlignment_DownCast = _StepRepr.Handle_StepRepr_GeometricAlignment_DownCast

class Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI self, StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI self, Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI theHandle) -> Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI
        assign(Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI self, StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI thePtr) -> Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI
        assign(Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI self, Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI theHandle) -> Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI self) -> StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI self) -> StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI self) -> StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI

    def SetLengthMeasureWithUnit(self, *args):
        """
        SetLengthMeasureWithUnit(Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI self, Handle_StepBasic_LengthMeasureWithUnit aLMWU)

        :type aLMWU: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_SetLengthMeasureWithUnit(self, *args)


    def GetLengthMeasureWithUnit(self, *args):
        """
        GetLengthMeasureWithUnit(Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI self) -> Handle_StepBasic_LengthMeasureWithUnit

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_GetLengthMeasureWithUnit(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI self, Handle_StepBasic_MeasureWithUnit aMWU, Handle_StepRepr_RepresentationItem aRI, Handle_StepShape_QualifiedRepresentationItem aQRI)

        :type aMWU: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type aRI: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem
        :type aQRI: OCC.wrapper.StepRepr.Handle_StepShape_QualifiedRepresentationItem

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_Init(self, *args)


    def SetQualifiedRepresentationItem(self, *args):
        """
        SetQualifiedRepresentationItem(Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI self, Handle_StepShape_QualifiedRepresentationItem aQRI)

        :type aQRI: OCC.wrapper.StepRepr.Handle_StepShape_QualifiedRepresentationItem

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_SetQualifiedRepresentationItem(self, *args)


    def GetQualifiedRepresentationItem(self, *args):
        """
        GetQualifiedRepresentationItem(Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI self) -> Handle_StepShape_QualifiedRepresentationItem

        :rtype: OCC.wrapper.StepRepr.Handle_StepShape_QualifiedRepresentationItem

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_GetQualifiedRepresentationItem(self, *args)


    def GetMeasureRepresentationItem(self, *args):
        """
        GetMeasureRepresentationItem(Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI self) -> Handle_StepRepr_MeasureRepresentationItem

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_MeasureRepresentationItem

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_GetMeasureRepresentationItem(self, *args)


    def SetMeasureWithUnit(self, *args):
        """
        SetMeasureWithUnit(Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI self, Handle_StepBasic_MeasureWithUnit aMWU)

        :type aMWU: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_SetMeasureWithUnit(self, *args)


    def GetMeasureWithUnit(self, *args):
        """
        GetMeasureWithUnit(Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI self) -> Handle_StepBasic_MeasureWithUnit

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_GetMeasureWithUnit(self, *args)


    def GetRepresentationItem(self, *args):
        """
        GetRepresentationItem(Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI self) -> Handle_StepRepr_RepresentationItem

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_GetRepresentationItem(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_DecrementRefCounter(self, *args)

Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_swigregister = _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_swigregister
Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_swigregister(Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI)

def Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_DownCast(thing):
    return _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_DownCast(thing)
Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_DownCast = _StepRepr.Handle_StepRepr_ReprItemAndLengthMeasureWithUnitAndQRI_DownCast

class Handle_StepRepr_StructuralResponseProperty(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_StructuralResponseProperty self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_StructuralResponseProperty_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_StructuralResponseProperty self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_StructuralResponseProperty_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_StructuralResponseProperty self, StepRepr_StructuralResponseProperty thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_StructuralResponseProperty_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_StructuralResponseProperty self, Handle_StepRepr_StructuralResponseProperty theHandle) -> Handle_StepRepr_StructuralResponseProperty
        assign(Handle_StepRepr_StructuralResponseProperty self, StepRepr_StructuralResponseProperty thePtr) -> Handle_StepRepr_StructuralResponseProperty
        assign(Handle_StepRepr_StructuralResponseProperty self, Handle_StepRepr_StructuralResponseProperty theHandle) -> Handle_StepRepr_StructuralResponseProperty

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_StructuralResponseProperty_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_StructuralResponseProperty self) -> StepRepr_StructuralResponseProperty

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_StructuralResponseProperty_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_StructuralResponseProperty self) -> StepRepr_StructuralResponseProperty

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_StructuralResponseProperty___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_StructuralResponseProperty self) -> StepRepr_StructuralResponseProperty

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_StructuralResponseProperty___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_StructuralResponseProperty___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_StructuralResponseProperty___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_StructuralResponseProperty(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_StructuralResponseProperty_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_StructuralResponseProperty

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_StructuralResponseProperty self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_StructuralResponseProperty_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_StructuralResponseProperty_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_StructuralResponseProperty_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepRepr_StructuralResponseProperty self, Handle_TCollection_HAsciiString aName, Standard_Boolean const hasDescription, Handle_TCollection_HAsciiString aDescription, StepRepr_CharacterizedDefinition aDefinition)

        Initialize all fields (own and inherited)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type hasDescription: bool
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDefinition: OCC.wrapper.StepRepr.StepRepr_CharacterizedDefinition

        """
        return _StepRepr.Handle_StepRepr_StructuralResponseProperty_Init(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_StructuralResponseProperty self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_StructuralResponseProperty_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_StructuralResponseProperty self, Handle_TCollection_HAsciiString Name)

        Set field Name

        :type Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_StructuralResponseProperty_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_StructuralResponseProperty self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_StructuralResponseProperty_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_StructuralResponseProperty self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_StructuralResponseProperty_SetDescription(self, *args)


    def HasDescription(self, *args):
        """
        HasDescription(Handle_StepRepr_StructuralResponseProperty self) -> Standard_Boolean

        Returns True if optional field Description is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_StructuralResponseProperty_HasDescription(self, *args)


    def Definition(self, *args):
        """
        Definition(Handle_StepRepr_StructuralResponseProperty self) -> StepRepr_CharacterizedDefinition

        Returns field Definition

        :rtype: OCC.wrapper.StepRepr.StepRepr_CharacterizedDefinition

        """
        return _StepRepr.Handle_StepRepr_StructuralResponseProperty_Definition(self, *args)


    def SetDefinition(self, *args):
        """
        SetDefinition(Handle_StepRepr_StructuralResponseProperty self, StepRepr_CharacterizedDefinition Definition)

        Set field Definition

        :type Definition: OCC.wrapper.StepRepr.StepRepr_CharacterizedDefinition

        """
        return _StepRepr.Handle_StepRepr_StructuralResponseProperty_SetDefinition(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_StructuralResponseProperty self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_StructuralResponseProperty_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_StructuralResponseProperty self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_StructuralResponseProperty self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_StructuralResponseProperty_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_StructuralResponseProperty self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_StructuralResponseProperty self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_StructuralResponseProperty_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_StructuralResponseProperty self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_StructuralResponseProperty_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_StructuralResponseProperty self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_StructuralResponseProperty_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_StructuralResponseProperty self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_StructuralResponseProperty_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_StructuralResponseProperty self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_StructuralResponseProperty_DecrementRefCounter(self, *args)

Handle_StepRepr_StructuralResponseProperty_swigregister = _StepRepr.Handle_StepRepr_StructuralResponseProperty_swigregister
Handle_StepRepr_StructuralResponseProperty_swigregister(Handle_StepRepr_StructuralResponseProperty)

def Handle_StepRepr_StructuralResponseProperty_DownCast(thing):
    return _StepRepr.Handle_StepRepr_StructuralResponseProperty_DownCast(thing)
Handle_StepRepr_StructuralResponseProperty_DownCast = _StepRepr.Handle_StepRepr_StructuralResponseProperty_DownCast

class Handle_StepRepr_MaterialDesignation(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_MaterialDesignation self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_MaterialDesignation_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_MaterialDesignation self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_MaterialDesignation_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_MaterialDesignation self, StepRepr_MaterialDesignation thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_MaterialDesignation_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_MaterialDesignation self, Handle_StepRepr_MaterialDesignation theHandle) -> Handle_StepRepr_MaterialDesignation
        assign(Handle_StepRepr_MaterialDesignation self, StepRepr_MaterialDesignation thePtr) -> Handle_StepRepr_MaterialDesignation
        assign(Handle_StepRepr_MaterialDesignation self, Handle_StepRepr_MaterialDesignation theHandle) -> Handle_StepRepr_MaterialDesignation

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_MaterialDesignation_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_MaterialDesignation self) -> StepRepr_MaterialDesignation

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_MaterialDesignation_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_MaterialDesignation self) -> StepRepr_MaterialDesignation

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_MaterialDesignation___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_MaterialDesignation self) -> StepRepr_MaterialDesignation

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_MaterialDesignation___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_MaterialDesignation___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_MaterialDesignation___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_MaterialDesignation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_MaterialDesignation_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_MaterialDesignation

    def Init(self, *args):
        """
        Init(Handle_StepRepr_MaterialDesignation self, Handle_TCollection_HAsciiString aName, StepRepr_CharacterizedDefinition aOfDefinition)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aOfDefinition: OCC.wrapper.StepRepr.StepRepr_CharacterizedDefinition

        """
        return _StepRepr.Handle_StepRepr_MaterialDesignation_Init(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_MaterialDesignation self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_MaterialDesignation_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_MaterialDesignation self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_MaterialDesignation_Name(self, *args)


    def SetOfDefinition(self, *args):
        """
        SetOfDefinition(Handle_StepRepr_MaterialDesignation self, StepRepr_CharacterizedDefinition aOfDefinition)

        :type aOfDefinition: OCC.wrapper.StepRepr.StepRepr_CharacterizedDefinition

        """
        return _StepRepr.Handle_StepRepr_MaterialDesignation_SetOfDefinition(self, *args)


    def OfDefinition(self, *args):
        """
        OfDefinition(Handle_StepRepr_MaterialDesignation self) -> StepRepr_CharacterizedDefinition

        :rtype: OCC.wrapper.StepRepr.StepRepr_CharacterizedDefinition

        """
        return _StepRepr.Handle_StepRepr_MaterialDesignation_OfDefinition(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_MaterialDesignation self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_MaterialDesignation_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_MaterialDesignation_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_MaterialDesignation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_MaterialDesignation self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_MaterialDesignation_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_MaterialDesignation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_MaterialDesignation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_MaterialDesignation_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_MaterialDesignation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_MaterialDesignation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_MaterialDesignation_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_MaterialDesignation self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_MaterialDesignation_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_MaterialDesignation self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_MaterialDesignation_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_MaterialDesignation self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_MaterialDesignation_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_MaterialDesignation self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_MaterialDesignation_DecrementRefCounter(self, *args)

Handle_StepRepr_MaterialDesignation_swigregister = _StepRepr.Handle_StepRepr_MaterialDesignation_swigregister
Handle_StepRepr_MaterialDesignation_swigregister(Handle_StepRepr_MaterialDesignation)

def Handle_StepRepr_MaterialDesignation_DownCast(thing):
    return _StepRepr.Handle_StepRepr_MaterialDesignation_DownCast(thing)
Handle_StepRepr_MaterialDesignation_DownCast = _StepRepr.Handle_StepRepr_MaterialDesignation_DownCast

class StepRepr_PromissoryUsageOccurrence(StepRepr_AssemblyComponentUsage):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_PromissoryUsageOccurrence
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_PromissoryUsageOccurrence(self) 
            return h


    def __init__(self, *args):
        """__init__(StepRepr_PromissoryUsageOccurrence self) -> StepRepr_PromissoryUsageOccurrence"""
        this = _StepRepr.new_StepRepr_PromissoryUsageOccurrence(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_PromissoryUsageOccurrence_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_PromissoryUsageOccurrence_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_PromissoryUsageOccurrence_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_PromissoryUsageOccurrence
StepRepr_PromissoryUsageOccurrence_swigregister = _StepRepr.StepRepr_PromissoryUsageOccurrence_swigregister
StepRepr_PromissoryUsageOccurrence_swigregister(StepRepr_PromissoryUsageOccurrence)

def StepRepr_PromissoryUsageOccurrence_get_type_name(*args):
    """
    StepRepr_PromissoryUsageOccurrence_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_PromissoryUsageOccurrence_get_type_name(*args)

def StepRepr_PromissoryUsageOccurrence_get_type_descriptor(*args):
    """
    StepRepr_PromissoryUsageOccurrence_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_PromissoryUsageOccurrence_get_type_descriptor(*args)

class Handle_StepRepr_RepresentationRelationshipWithTransformation(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_RepresentationRelationshipWithTransformation self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationshipWithTransformation_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_RepresentationRelationshipWithTransformation self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationshipWithTransformation_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_RepresentationRelationshipWithTransformation self, StepRepr_RepresentationRelationshipWithTransformation thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationshipWithTransformation_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_RepresentationRelationshipWithTransformation self, Handle_StepRepr_RepresentationRelationshipWithTransformation theHandle) -> Handle_StepRepr_RepresentationRelationshipWithTransformation
        assign(Handle_StepRepr_RepresentationRelationshipWithTransformation self, StepRepr_RepresentationRelationshipWithTransformation thePtr) -> Handle_StepRepr_RepresentationRelationshipWithTransformation
        assign(Handle_StepRepr_RepresentationRelationshipWithTransformation self, Handle_StepRepr_RepresentationRelationshipWithTransformation theHandle) -> Handle_StepRepr_RepresentationRelationshipWithTransformation

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationshipWithTransformation_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_RepresentationRelationshipWithTransformation self) -> StepRepr_RepresentationRelationshipWithTransformation

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationshipWithTransformation_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_RepresentationRelationshipWithTransformation self) -> StepRepr_RepresentationRelationshipWithTransformation

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationshipWithTransformation___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_RepresentationRelationshipWithTransformation self) -> StepRepr_RepresentationRelationshipWithTransformation

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationshipWithTransformation___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_RepresentationRelationshipWithTransformation___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_RepresentationRelationshipWithTransformation___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_RepresentationRelationshipWithTransformation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_RepresentationRelationshipWithTransformation_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_RepresentationRelationshipWithTransformation

    def Init(self, *args):
        """
        Init(Handle_StepRepr_RepresentationRelationshipWithTransformation self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepRepr_Representation aRep1, Handle_StepRepr_Representation aRep2, StepRepr_Transformation aTransf)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aRep1: OCC.wrapper.StepRepr.Handle_StepRepr_Representation
        :type aRep2: OCC.wrapper.StepRepr.Handle_StepRepr_Representation
        :type aTransf: OCC.wrapper.StepRepr.StepRepr_Transformation

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationshipWithTransformation_Init(self, *args)


    def TransformationOperator(self, *args):
        """
        TransformationOperator(Handle_StepRepr_RepresentationRelationshipWithTransformation self) -> StepRepr_Transformation

        :rtype: OCC.wrapper.StepRepr.StepRepr_Transformation

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationshipWithTransformation_TransformationOperator(self, *args)


    def SetTransformationOperator(self, *args):
        """
        SetTransformationOperator(Handle_StepRepr_RepresentationRelationshipWithTransformation self, StepRepr_Transformation aTrans)

        :type aTrans: OCC.wrapper.StepRepr.StepRepr_Transformation

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationshipWithTransformation_SetTransformationOperator(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_RepresentationRelationshipWithTransformation self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationshipWithTransformation_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_RepresentationRelationshipWithTransformation_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_RepresentationRelationshipWithTransformation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_RepresentationRelationshipWithTransformation self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationshipWithTransformation_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_RepresentationRelationshipWithTransformation self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationshipWithTransformation_Name(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_RepresentationRelationshipWithTransformation self, Handle_TCollection_HAsciiString aDescription)

        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationshipWithTransformation_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_RepresentationRelationshipWithTransformation self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationshipWithTransformation_Description(self, *args)


    def SetRep1(self, *args):
        """
        SetRep1(Handle_StepRepr_RepresentationRelationshipWithTransformation self, Handle_StepRepr_Representation aRep1)

        :type aRep1: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationshipWithTransformation_SetRep1(self, *args)


    def Rep1(self, *args):
        """
        Rep1(Handle_StepRepr_RepresentationRelationshipWithTransformation self) -> Handle_StepRepr_Representation

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationshipWithTransformation_Rep1(self, *args)


    def SetRep2(self, *args):
        """
        SetRep2(Handle_StepRepr_RepresentationRelationshipWithTransformation self, Handle_StepRepr_Representation aRep2)

        :type aRep2: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationshipWithTransformation_SetRep2(self, *args)


    def Rep2(self, *args):
        """
        Rep2(Handle_StepRepr_RepresentationRelationshipWithTransformation self) -> Handle_StepRepr_Representation

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationshipWithTransformation_Rep2(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_RepresentationRelationshipWithTransformation self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationshipWithTransformation_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_RepresentationRelationshipWithTransformation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_RepresentationRelationshipWithTransformation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationshipWithTransformation_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_RepresentationRelationshipWithTransformation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_RepresentationRelationshipWithTransformation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationshipWithTransformation_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_RepresentationRelationshipWithTransformation self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationshipWithTransformation_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_RepresentationRelationshipWithTransformation self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationshipWithTransformation_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_RepresentationRelationshipWithTransformation self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationshipWithTransformation_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_RepresentationRelationshipWithTransformation self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationshipWithTransformation_DecrementRefCounter(self, *args)

Handle_StepRepr_RepresentationRelationshipWithTransformation_swigregister = _StepRepr.Handle_StepRepr_RepresentationRelationshipWithTransformation_swigregister
Handle_StepRepr_RepresentationRelationshipWithTransformation_swigregister(Handle_StepRepr_RepresentationRelationshipWithTransformation)

def Handle_StepRepr_RepresentationRelationshipWithTransformation_DownCast(thing):
    return _StepRepr.Handle_StepRepr_RepresentationRelationshipWithTransformation_DownCast(thing)
Handle_StepRepr_RepresentationRelationshipWithTransformation_DownCast = _StepRepr.Handle_StepRepr_RepresentationRelationshipWithTransformation_DownCast

class StepRepr_ItemDefinedTransformation(Standard.Standard_Transient):
    """Added from StepRepr Rev2 to Rev4"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_ItemDefinedTransformation
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_ItemDefinedTransformation(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_ItemDefinedTransformation self) -> StepRepr_ItemDefinedTransformation

        Added from StepRepr Rev2 to Rev4
        """
        this = _StepRepr.new_StepRepr_ItemDefinedTransformation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepRepr_ItemDefinedTransformation self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepRepr_RepresentationItem aTransformItem1, Handle_StepRepr_RepresentationItem aTransformItem2)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aTransformItem1: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem
        :type aTransformItem2: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepRepr.StepRepr_ItemDefinedTransformation_Init(self, *args)


    def SetName(self, *args):
        """
        SetName(StepRepr_ItemDefinedTransformation self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_ItemDefinedTransformation_SetName(self, *args)


    def Name(self, *args):
        """
        Name(StepRepr_ItemDefinedTransformation self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_ItemDefinedTransformation_Name(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(StepRepr_ItemDefinedTransformation self, Handle_TCollection_HAsciiString aDescription)

        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_ItemDefinedTransformation_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(StepRepr_ItemDefinedTransformation self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_ItemDefinedTransformation_Description(self, *args)


    def SetTransformItem1(self, *args):
        """
        SetTransformItem1(StepRepr_ItemDefinedTransformation self, Handle_StepRepr_RepresentationItem aItem)

        :type aItem: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepRepr.StepRepr_ItemDefinedTransformation_SetTransformItem1(self, *args)


    def TransformItem1(self, *args):
        """
        TransformItem1(StepRepr_ItemDefinedTransformation self) -> Handle_StepRepr_RepresentationItem

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepRepr.StepRepr_ItemDefinedTransformation_TransformItem1(self, *args)


    def SetTransformItem2(self, *args):
        """
        SetTransformItem2(StepRepr_ItemDefinedTransformation self, Handle_StepRepr_RepresentationItem aItem)

        :type aItem: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepRepr.StepRepr_ItemDefinedTransformation_SetTransformItem2(self, *args)


    def TransformItem2(self, *args):
        """
        TransformItem2(StepRepr_ItemDefinedTransformation self) -> Handle_StepRepr_RepresentationItem

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepRepr.StepRepr_ItemDefinedTransformation_TransformItem2(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_ItemDefinedTransformation_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_ItemDefinedTransformation_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_ItemDefinedTransformation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_ItemDefinedTransformation
StepRepr_ItemDefinedTransformation_swigregister = _StepRepr.StepRepr_ItemDefinedTransformation_swigregister
StepRepr_ItemDefinedTransformation_swigregister(StepRepr_ItemDefinedTransformation)

def StepRepr_ItemDefinedTransformation_get_type_name(*args):
    """
    StepRepr_ItemDefinedTransformation_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_ItemDefinedTransformation_get_type_name(*args)

def StepRepr_ItemDefinedTransformation_get_type_descriptor(*args):
    """
    StepRepr_ItemDefinedTransformation_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_ItemDefinedTransformation_get_type_descriptor(*args)

class StepRepr_DataEnvironment(Standard.Standard_Transient):
    """Representation of STEP entity DataEnvironment"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_DataEnvironment
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_DataEnvironment(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_DataEnvironment self) -> StepRepr_DataEnvironment

        Empty constructor


        """
        this = _StepRepr.new_StepRepr_DataEnvironment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepRepr_DataEnvironment self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation aElements)

        Initialize all fields (own and inherited)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aElements: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation

        """
        return _StepRepr.StepRepr_DataEnvironment_Init(self, *args)


    def Name(self, *args):
        """
        Name(StepRepr_DataEnvironment self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_DataEnvironment_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(StepRepr_DataEnvironment self, Handle_TCollection_HAsciiString Name)

        Set field Name

        :type Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_DataEnvironment_SetName(self, *args)


    def Description(self, *args):
        """
        Description(StepRepr_DataEnvironment self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_DataEnvironment_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(StepRepr_DataEnvironment self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.StepRepr_DataEnvironment_SetDescription(self, *args)


    def Elements(self, *args):
        """
        Elements(StepRepr_DataEnvironment self) -> Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation

        Returns field Elements

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation

        """
        return _StepRepr.StepRepr_DataEnvironment_Elements(self, *args)


    def SetElements(self, *args):
        """
        SetElements(StepRepr_DataEnvironment self, Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation Elements)

        Set field Elements

        :type Elements: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation

        """
        return _StepRepr.StepRepr_DataEnvironment_SetElements(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_DataEnvironment_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_DataEnvironment_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_DataEnvironment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_DataEnvironment
StepRepr_DataEnvironment_swigregister = _StepRepr.StepRepr_DataEnvironment_swigregister
StepRepr_DataEnvironment_swigregister(StepRepr_DataEnvironment)

def StepRepr_DataEnvironment_get_type_name(*args):
    """
    StepRepr_DataEnvironment_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_DataEnvironment_get_type_name(*args)

def StepRepr_DataEnvironment_get_type_descriptor(*args):
    """
    StepRepr_DataEnvironment_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_DataEnvironment_get_type_descriptor(*args)

class Handle_StepRepr_Apex(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_Apex self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_Apex_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_Apex self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_Apex_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_Apex self, StepRepr_Apex thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_Apex_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_Apex self, Handle_StepRepr_Apex theHandle) -> Handle_StepRepr_Apex
        assign(Handle_StepRepr_Apex self, StepRepr_Apex thePtr) -> Handle_StepRepr_Apex
        assign(Handle_StepRepr_Apex self, Handle_StepRepr_Apex theHandle) -> Handle_StepRepr_Apex

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_Apex_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_Apex self) -> StepRepr_Apex

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_Apex_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_Apex self) -> StepRepr_Apex

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_Apex___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_Apex self) -> StepRepr_Apex

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_Apex___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_Apex___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_Apex___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_Apex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_Apex_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_Apex

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_Apex self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_Apex_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_Apex_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_Apex_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepRepr_Apex self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepRepr_ProductDefinitionShape aOfShape, StepData_Logical const aProductDefinitional)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape
        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_Apex_Init(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_Apex self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_Apex_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_Apex self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_Apex_Name(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_Apex self, Handle_TCollection_HAsciiString aDescription)

        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_Apex_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_Apex self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_Apex_Description(self, *args)


    def SetOfShape(self, *args):
        """
        SetOfShape(Handle_StepRepr_Apex self, Handle_StepRepr_ProductDefinitionShape aOfShape)

        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepRepr.Handle_StepRepr_Apex_SetOfShape(self, *args)


    def OfShape(self, *args):
        """
        OfShape(Handle_StepRepr_Apex self) -> Handle_StepRepr_ProductDefinitionShape

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepRepr.Handle_StepRepr_Apex_OfShape(self, *args)


    def SetProductDefinitional(self, *args):
        """
        SetProductDefinitional(Handle_StepRepr_Apex self, StepData_Logical const aProductDefinitional)

        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_Apex_SetProductDefinitional(self, *args)


    def ProductDefinitional(self, *args):
        """
        ProductDefinitional(Handle_StepRepr_Apex self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_Apex_ProductDefinitional(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_Apex self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_Apex_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_Apex self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_Apex self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_Apex_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_Apex self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_Apex self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_Apex_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_Apex self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_Apex_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_Apex self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_Apex_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_Apex self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_Apex_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_Apex self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_Apex_DecrementRefCounter(self, *args)

Handle_StepRepr_Apex_swigregister = _StepRepr.Handle_StepRepr_Apex_swigregister
Handle_StepRepr_Apex_swigregister(Handle_StepRepr_Apex)

def Handle_StepRepr_Apex_DownCast(thing):
    return _StepRepr.Handle_StepRepr_Apex_DownCast(thing)
Handle_StepRepr_Apex_DownCast = _StepRepr.Handle_StepRepr_Apex_DownCast

class Handle_StepRepr_CharacterizedRepresentation(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_CharacterizedRepresentation self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_CharacterizedRepresentation_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_CharacterizedRepresentation self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_CharacterizedRepresentation_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_CharacterizedRepresentation self, StepRepr_CharacterizedRepresentation thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_CharacterizedRepresentation_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_CharacterizedRepresentation self, Handle_StepRepr_CharacterizedRepresentation theHandle) -> Handle_StepRepr_CharacterizedRepresentation
        assign(Handle_StepRepr_CharacterizedRepresentation self, StepRepr_CharacterizedRepresentation thePtr) -> Handle_StepRepr_CharacterizedRepresentation
        assign(Handle_StepRepr_CharacterizedRepresentation self, Handle_StepRepr_CharacterizedRepresentation theHandle) -> Handle_StepRepr_CharacterizedRepresentation

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_CharacterizedRepresentation_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_CharacterizedRepresentation self) -> StepRepr_CharacterizedRepresentation

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_CharacterizedRepresentation_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_CharacterizedRepresentation self) -> StepRepr_CharacterizedRepresentation

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_CharacterizedRepresentation___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_CharacterizedRepresentation self) -> StepRepr_CharacterizedRepresentation

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_CharacterizedRepresentation___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_CharacterizedRepresentation___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_CharacterizedRepresentation___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_CharacterizedRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_CharacterizedRepresentation_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_CharacterizedRepresentation

    def Init(self, *args):
        """
        Init(Handle_StepRepr_CharacterizedRepresentation self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepRepr_HArray1OfRepresentationItem theItems, Handle_StepRepr_RepresentationContext theContextOfItems)

        Returns a CharacterizedRepresentation

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theItems: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfRepresentationItem
        :type theContextOfItems: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationContext

        """
        return _StepRepr.Handle_StepRepr_CharacterizedRepresentation_Init(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_CharacterizedRepresentation self, Handle_TCollection_HAsciiString theDescription)

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_CharacterizedRepresentation_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_CharacterizedRepresentation self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_CharacterizedRepresentation_Description(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_CharacterizedRepresentation self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_CharacterizedRepresentation_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_CharacterizedRepresentation_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_CharacterizedRepresentation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_CharacterizedRepresentation self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_CharacterizedRepresentation_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_CharacterizedRepresentation self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_CharacterizedRepresentation_Name(self, *args)


    def SetItems(self, *args):
        """
        SetItems(Handle_StepRepr_CharacterizedRepresentation self, Handle_StepRepr_HArray1OfRepresentationItem aItems)

        :type aItems: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfRepresentationItem

        """
        return _StepRepr.Handle_StepRepr_CharacterizedRepresentation_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(Handle_StepRepr_CharacterizedRepresentation self) -> Handle_StepRepr_HArray1OfRepresentationItem

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfRepresentationItem

        """
        return _StepRepr.Handle_StepRepr_CharacterizedRepresentation_Items(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(Handle_StepRepr_CharacterizedRepresentation self, Standard_Integer const num) -> Handle_StepRepr_RepresentationItem

        :type num: int
        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepRepr.Handle_StepRepr_CharacterizedRepresentation_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(Handle_StepRepr_CharacterizedRepresentation self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_CharacterizedRepresentation_NbItems(self, *args)


    def SetContextOfItems(self, *args):
        """
        SetContextOfItems(Handle_StepRepr_CharacterizedRepresentation self, Handle_StepRepr_RepresentationContext aContextOfItems)

        :type aContextOfItems: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationContext

        """
        return _StepRepr.Handle_StepRepr_CharacterizedRepresentation_SetContextOfItems(self, *args)


    def ContextOfItems(self, *args):
        """
        ContextOfItems(Handle_StepRepr_CharacterizedRepresentation self) -> Handle_StepRepr_RepresentationContext

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationContext

        """
        return _StepRepr.Handle_StepRepr_CharacterizedRepresentation_ContextOfItems(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_CharacterizedRepresentation self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_CharacterizedRepresentation_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_CharacterizedRepresentation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_CharacterizedRepresentation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_CharacterizedRepresentation_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_CharacterizedRepresentation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_CharacterizedRepresentation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_CharacterizedRepresentation_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_CharacterizedRepresentation self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_CharacterizedRepresentation_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_CharacterizedRepresentation self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_CharacterizedRepresentation_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_CharacterizedRepresentation self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_CharacterizedRepresentation_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_CharacterizedRepresentation self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_CharacterizedRepresentation_DecrementRefCounter(self, *args)

Handle_StepRepr_CharacterizedRepresentation_swigregister = _StepRepr.Handle_StepRepr_CharacterizedRepresentation_swigregister
Handle_StepRepr_CharacterizedRepresentation_swigregister(Handle_StepRepr_CharacterizedRepresentation)

def Handle_StepRepr_CharacterizedRepresentation_DownCast(thing):
    return _StepRepr.Handle_StepRepr_CharacterizedRepresentation_DownCast(thing)
Handle_StepRepr_CharacterizedRepresentation_DownCast = _StepRepr.Handle_StepRepr_CharacterizedRepresentation_DownCast

class Handle_StepRepr_AllAroundShapeAspect(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_AllAroundShapeAspect self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_AllAroundShapeAspect_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_AllAroundShapeAspect self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_AllAroundShapeAspect_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_AllAroundShapeAspect self, StepRepr_AllAroundShapeAspect thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_AllAroundShapeAspect_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_AllAroundShapeAspect self, Handle_StepRepr_AllAroundShapeAspect theHandle) -> Handle_StepRepr_AllAroundShapeAspect
        assign(Handle_StepRepr_AllAroundShapeAspect self, StepRepr_AllAroundShapeAspect thePtr) -> Handle_StepRepr_AllAroundShapeAspect
        assign(Handle_StepRepr_AllAroundShapeAspect self, Handle_StepRepr_AllAroundShapeAspect theHandle) -> Handle_StepRepr_AllAroundShapeAspect

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_AllAroundShapeAspect_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_AllAroundShapeAspect self) -> StepRepr_AllAroundShapeAspect

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_AllAroundShapeAspect_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_AllAroundShapeAspect self) -> StepRepr_AllAroundShapeAspect

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_AllAroundShapeAspect___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_AllAroundShapeAspect self) -> StepRepr_AllAroundShapeAspect

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_AllAroundShapeAspect___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_AllAroundShapeAspect___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_AllAroundShapeAspect___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_AllAroundShapeAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_AllAroundShapeAspect_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_AllAroundShapeAspect

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_AllAroundShapeAspect self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_AllAroundShapeAspect_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_AllAroundShapeAspect_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_AllAroundShapeAspect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepRepr_AllAroundShapeAspect self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepRepr_ProductDefinitionShape aOfShape, StepData_Logical const aProductDefinitional)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape
        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_AllAroundShapeAspect_Init(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_AllAroundShapeAspect self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_AllAroundShapeAspect_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_AllAroundShapeAspect self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_AllAroundShapeAspect_Name(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_AllAroundShapeAspect self, Handle_TCollection_HAsciiString aDescription)

        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_AllAroundShapeAspect_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_AllAroundShapeAspect self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_AllAroundShapeAspect_Description(self, *args)


    def SetOfShape(self, *args):
        """
        SetOfShape(Handle_StepRepr_AllAroundShapeAspect self, Handle_StepRepr_ProductDefinitionShape aOfShape)

        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepRepr.Handle_StepRepr_AllAroundShapeAspect_SetOfShape(self, *args)


    def OfShape(self, *args):
        """
        OfShape(Handle_StepRepr_AllAroundShapeAspect self) -> Handle_StepRepr_ProductDefinitionShape

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepRepr.Handle_StepRepr_AllAroundShapeAspect_OfShape(self, *args)


    def SetProductDefinitional(self, *args):
        """
        SetProductDefinitional(Handle_StepRepr_AllAroundShapeAspect self, StepData_Logical const aProductDefinitional)

        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_AllAroundShapeAspect_SetProductDefinitional(self, *args)


    def ProductDefinitional(self, *args):
        """
        ProductDefinitional(Handle_StepRepr_AllAroundShapeAspect self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_AllAroundShapeAspect_ProductDefinitional(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_AllAroundShapeAspect self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_AllAroundShapeAspect_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_AllAroundShapeAspect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_AllAroundShapeAspect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_AllAroundShapeAspect_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_AllAroundShapeAspect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_AllAroundShapeAspect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_AllAroundShapeAspect_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_AllAroundShapeAspect self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_AllAroundShapeAspect_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_AllAroundShapeAspect self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_AllAroundShapeAspect_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_AllAroundShapeAspect self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_AllAroundShapeAspect_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_AllAroundShapeAspect self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_AllAroundShapeAspect_DecrementRefCounter(self, *args)

Handle_StepRepr_AllAroundShapeAspect_swigregister = _StepRepr.Handle_StepRepr_AllAroundShapeAspect_swigregister
Handle_StepRepr_AllAroundShapeAspect_swigregister(Handle_StepRepr_AllAroundShapeAspect)

def Handle_StepRepr_AllAroundShapeAspect_DownCast(thing):
    return _StepRepr.Handle_StepRepr_AllAroundShapeAspect_DownCast(thing)
Handle_StepRepr_AllAroundShapeAspect_DownCast = _StepRepr.Handle_StepRepr_AllAroundShapeAspect_DownCast

class Handle_StepRepr_ProductDefinitionUsage(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_ProductDefinitionUsage self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_ProductDefinitionUsage_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_ProductDefinitionUsage self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_ProductDefinitionUsage_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_ProductDefinitionUsage self, StepRepr_ProductDefinitionUsage thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_ProductDefinitionUsage_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_ProductDefinitionUsage self, Handle_StepRepr_ProductDefinitionUsage theHandle) -> Handle_StepRepr_ProductDefinitionUsage
        assign(Handle_StepRepr_ProductDefinitionUsage self, StepRepr_ProductDefinitionUsage thePtr) -> Handle_StepRepr_ProductDefinitionUsage
        assign(Handle_StepRepr_ProductDefinitionUsage self, Handle_StepRepr_ProductDefinitionUsage theHandle) -> Handle_StepRepr_ProductDefinitionUsage

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_ProductDefinitionUsage_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_ProductDefinitionUsage self) -> StepRepr_ProductDefinitionUsage

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ProductDefinitionUsage_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_ProductDefinitionUsage self) -> StepRepr_ProductDefinitionUsage

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ProductDefinitionUsage___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_ProductDefinitionUsage self) -> StepRepr_ProductDefinitionUsage

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_ProductDefinitionUsage___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_ProductDefinitionUsage___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_ProductDefinitionUsage___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_ProductDefinitionUsage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_ProductDefinitionUsage_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_ProductDefinitionUsage

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_ProductDefinitionUsage self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_ProductDefinitionUsage_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ProductDefinitionUsage_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ProductDefinitionUsage_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepRepr_ProductDefinitionUsage self, Handle_TCollection_HAsciiString aId, Handle_TCollection_HAsciiString aName, Standard_Boolean const hasDescription, Handle_TCollection_HAsciiString aDescription, Handle_StepBasic_ProductDefinition aRelatingProductDefinition, Handle_StepBasic_ProductDefinition aRelatedProductDefinition)
        Init(Handle_StepRepr_ProductDefinitionUsage self, Handle_TCollection_HAsciiString aId, Handle_TCollection_HAsciiString aName, Standard_Boolean const hasDescription, Handle_TCollection_HAsciiString aDescription, StepBasic_ProductDefinitionOrReference aRelatingProductDefinition, StepBasic_ProductDefinitionOrReference aRelatedProductDefinition)

        Initialize all fields (own and inherited)

        :type aId: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type hasDescription: bool
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aRelatingProductDefinition: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference
        :type aRelatedProductDefinition: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference

        """
        return _StepRepr.Handle_StepRepr_ProductDefinitionUsage_Init(self, *args)


    def Id(self, *args):
        """
        Id(Handle_StepRepr_ProductDefinitionUsage self) -> Handle_TCollection_HAsciiString

        Returns field Id

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ProductDefinitionUsage_Id(self, *args)


    def SetId(self, *args):
        """
        SetId(Handle_StepRepr_ProductDefinitionUsage self, Handle_TCollection_HAsciiString Id)

        Set field Id

        :type Id: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ProductDefinitionUsage_SetId(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_ProductDefinitionUsage self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ProductDefinitionUsage_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_ProductDefinitionUsage self, Handle_TCollection_HAsciiString Name)

        Set field Name

        :type Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ProductDefinitionUsage_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_ProductDefinitionUsage self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ProductDefinitionUsage_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_ProductDefinitionUsage self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ProductDefinitionUsage_SetDescription(self, *args)


    def HasDescription(self, *args):
        """
        HasDescription(Handle_StepRepr_ProductDefinitionUsage self) -> Standard_Boolean

        Returns True if optional field Description is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ProductDefinitionUsage_HasDescription(self, *args)


    def RelatingProductDefinition(self, *args):
        """
        RelatingProductDefinition(Handle_StepRepr_ProductDefinitionUsage self) -> Handle_StepBasic_ProductDefinition

        Returns field RelatingProductDefinition

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinition

        """
        return _StepRepr.Handle_StepRepr_ProductDefinitionUsage_RelatingProductDefinition(self, *args)


    def RelatingProductDefinitionAP242(self, *args):
        """
        RelatingProductDefinitionAP242(Handle_StepRepr_ProductDefinitionUsage self) -> StepBasic_ProductDefinitionOrReference

        Returns field RelatingProductDefinition in AP242

        :rtype: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference

        """
        return _StepRepr.Handle_StepRepr_ProductDefinitionUsage_RelatingProductDefinitionAP242(self, *args)


    def SetRelatingProductDefinition(self, *args):
        """
        SetRelatingProductDefinition(Handle_StepRepr_ProductDefinitionUsage self, Handle_StepBasic_ProductDefinition RelatingProductDefinition)
        SetRelatingProductDefinition(Handle_StepRepr_ProductDefinitionUsage self, StepBasic_ProductDefinitionOrReference RelatingProductDefinition)

        Set field RelatingProductDefinition in AP242

        :type RelatingProductDefinition: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference

        """
        return _StepRepr.Handle_StepRepr_ProductDefinitionUsage_SetRelatingProductDefinition(self, *args)


    def RelatedProductDefinition(self, *args):
        """
        RelatedProductDefinition(Handle_StepRepr_ProductDefinitionUsage self) -> Handle_StepBasic_ProductDefinition

        Returns field RelatedProductDefinition

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinition

        """
        return _StepRepr.Handle_StepRepr_ProductDefinitionUsage_RelatedProductDefinition(self, *args)


    def RelatedProductDefinitionAP242(self, *args):
        """
        RelatedProductDefinitionAP242(Handle_StepRepr_ProductDefinitionUsage self) -> StepBasic_ProductDefinitionOrReference

        Returns field RelatedProductDefinition in AP242

        :rtype: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference

        """
        return _StepRepr.Handle_StepRepr_ProductDefinitionUsage_RelatedProductDefinitionAP242(self, *args)


    def SetRelatedProductDefinition(self, *args):
        """
        SetRelatedProductDefinition(Handle_StepRepr_ProductDefinitionUsage self, Handle_StepBasic_ProductDefinition RelatedProductDefinition)
        SetRelatedProductDefinition(Handle_StepRepr_ProductDefinitionUsage self, StepBasic_ProductDefinitionOrReference RelatedProductDefinition)

        Set field RelatedProductDefinition in AP242

        :type RelatedProductDefinition: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference

        """
        return _StepRepr.Handle_StepRepr_ProductDefinitionUsage_SetRelatedProductDefinition(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_ProductDefinitionUsage self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_ProductDefinitionUsage_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_ProductDefinitionUsage self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_ProductDefinitionUsage self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ProductDefinitionUsage_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_ProductDefinitionUsage self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_ProductDefinitionUsage self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ProductDefinitionUsage_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_ProductDefinitionUsage self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_ProductDefinitionUsage_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_ProductDefinitionUsage self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ProductDefinitionUsage_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_ProductDefinitionUsage self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_ProductDefinitionUsage_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_ProductDefinitionUsage self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ProductDefinitionUsage_DecrementRefCounter(self, *args)

Handle_StepRepr_ProductDefinitionUsage_swigregister = _StepRepr.Handle_StepRepr_ProductDefinitionUsage_swigregister
Handle_StepRepr_ProductDefinitionUsage_swigregister(Handle_StepRepr_ProductDefinitionUsage)

def Handle_StepRepr_ProductDefinitionUsage_DownCast(thing):
    return _StepRepr.Handle_StepRepr_ProductDefinitionUsage_DownCast(thing)
Handle_StepRepr_ProductDefinitionUsage_DownCast = _StepRepr.Handle_StepRepr_ProductDefinitionUsage_DownCast

class Handle_StepRepr_ConstructiveGeometryRepresentation(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_ConstructiveGeometryRepresentation self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentation_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_ConstructiveGeometryRepresentation self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentation_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_ConstructiveGeometryRepresentation self, StepRepr_ConstructiveGeometryRepresentation thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentation_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_ConstructiveGeometryRepresentation self, Handle_StepRepr_ConstructiveGeometryRepresentation theHandle) -> Handle_StepRepr_ConstructiveGeometryRepresentation
        assign(Handle_StepRepr_ConstructiveGeometryRepresentation self, StepRepr_ConstructiveGeometryRepresentation thePtr) -> Handle_StepRepr_ConstructiveGeometryRepresentation
        assign(Handle_StepRepr_ConstructiveGeometryRepresentation self, Handle_StepRepr_ConstructiveGeometryRepresentation theHandle) -> Handle_StepRepr_ConstructiveGeometryRepresentation

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentation_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_ConstructiveGeometryRepresentation self) -> StepRepr_ConstructiveGeometryRepresentation

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentation_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_ConstructiveGeometryRepresentation self) -> StepRepr_ConstructiveGeometryRepresentation

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentation___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_ConstructiveGeometryRepresentation self) -> StepRepr_ConstructiveGeometryRepresentation

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentation___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentation___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentation___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_ConstructiveGeometryRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentation_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_ConstructiveGeometryRepresentation

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_ConstructiveGeometryRepresentation self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentation_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentation_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepRepr_ConstructiveGeometryRepresentation self, Handle_TCollection_HAsciiString aName, Handle_StepRepr_HArray1OfRepresentationItem aItems, Handle_StepRepr_RepresentationContext aContextOfItems)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aItems: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfRepresentationItem
        :type aContextOfItems: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationContext

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentation_Init(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_ConstructiveGeometryRepresentation self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentation_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_ConstructiveGeometryRepresentation self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentation_Name(self, *args)


    def SetItems(self, *args):
        """
        SetItems(Handle_StepRepr_ConstructiveGeometryRepresentation self, Handle_StepRepr_HArray1OfRepresentationItem aItems)

        :type aItems: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfRepresentationItem

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentation_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(Handle_StepRepr_ConstructiveGeometryRepresentation self) -> Handle_StepRepr_HArray1OfRepresentationItem

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfRepresentationItem

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentation_Items(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(Handle_StepRepr_ConstructiveGeometryRepresentation self, Standard_Integer const num) -> Handle_StepRepr_RepresentationItem

        :type num: int
        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentation_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(Handle_StepRepr_ConstructiveGeometryRepresentation self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentation_NbItems(self, *args)


    def SetContextOfItems(self, *args):
        """
        SetContextOfItems(Handle_StepRepr_ConstructiveGeometryRepresentation self, Handle_StepRepr_RepresentationContext aContextOfItems)

        :type aContextOfItems: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationContext

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentation_SetContextOfItems(self, *args)


    def ContextOfItems(self, *args):
        """
        ContextOfItems(Handle_StepRepr_ConstructiveGeometryRepresentation self) -> Handle_StepRepr_RepresentationContext

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationContext

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentation_ContextOfItems(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_ConstructiveGeometryRepresentation self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentation_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_ConstructiveGeometryRepresentation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_ConstructiveGeometryRepresentation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentation_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_ConstructiveGeometryRepresentation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_ConstructiveGeometryRepresentation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentation_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_ConstructiveGeometryRepresentation self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentation_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_ConstructiveGeometryRepresentation self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentation_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_ConstructiveGeometryRepresentation self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentation_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_ConstructiveGeometryRepresentation self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentation_DecrementRefCounter(self, *args)

Handle_StepRepr_ConstructiveGeometryRepresentation_swigregister = _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentation_swigregister
Handle_StepRepr_ConstructiveGeometryRepresentation_swigregister(Handle_StepRepr_ConstructiveGeometryRepresentation)

def Handle_StepRepr_ConstructiveGeometryRepresentation_DownCast(thing):
    return _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentation_DownCast(thing)
Handle_StepRepr_ConstructiveGeometryRepresentation_DownCast = _StepRepr.Handle_StepRepr_ConstructiveGeometryRepresentation_DownCast

class Handle_StepRepr_HArray1OfRepresentationItem(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_HArray1OfRepresentationItem self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_HArray1OfRepresentationItem_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_HArray1OfRepresentationItem self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_HArray1OfRepresentationItem_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_HArray1OfRepresentationItem self, StepRepr_HArray1OfRepresentationItem thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_HArray1OfRepresentationItem_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_HArray1OfRepresentationItem self, Handle_StepRepr_HArray1OfRepresentationItem theHandle) -> Handle_StepRepr_HArray1OfRepresentationItem
        assign(Handle_StepRepr_HArray1OfRepresentationItem self, StepRepr_HArray1OfRepresentationItem thePtr) -> Handle_StepRepr_HArray1OfRepresentationItem
        assign(Handle_StepRepr_HArray1OfRepresentationItem self, Handle_StepRepr_HArray1OfRepresentationItem theHandle) -> Handle_StepRepr_HArray1OfRepresentationItem

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_HArray1OfRepresentationItem_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_HArray1OfRepresentationItem self) -> StepRepr_HArray1OfRepresentationItem

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_HArray1OfRepresentationItem_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_HArray1OfRepresentationItem self) -> StepRepr_HArray1OfRepresentationItem

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_HArray1OfRepresentationItem___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_HArray1OfRepresentationItem self) -> StepRepr_HArray1OfRepresentationItem

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_HArray1OfRepresentationItem___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_HArray1OfRepresentationItem___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_HArray1OfRepresentationItem___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_HArray1OfRepresentationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_HArray1OfRepresentationItem_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_HArray1OfRepresentationItem

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepRepr.StepRepr_Array1OfRepresentationItem

        """
        res = _StepRepr.Handle_StepRepr_HArray1OfRepresentationItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepRepr_HArray1OfRepresentationItem self) -> NCollection_Array1_Handle_StepRepr_RepresentationItem

        :rtype: OCC.wrapper.StepRepr.StepRepr_Array1OfRepresentationItem

        """
        return _StepRepr.Handle_StepRepr_HArray1OfRepresentationItem_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_HArray1OfRepresentationItem self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_HArray1OfRepresentationItem_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_HArray1OfRepresentationItem_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_HArray1OfRepresentationItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_HArray1OfRepresentationItem self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_HArray1OfRepresentationItem_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_HArray1OfRepresentationItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_HArray1OfRepresentationItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_HArray1OfRepresentationItem_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_HArray1OfRepresentationItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_HArray1OfRepresentationItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_HArray1OfRepresentationItem_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_HArray1OfRepresentationItem self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_HArray1OfRepresentationItem_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_HArray1OfRepresentationItem self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_HArray1OfRepresentationItem_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_HArray1OfRepresentationItem self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_HArray1OfRepresentationItem_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_HArray1OfRepresentationItem self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_HArray1OfRepresentationItem_DecrementRefCounter(self, *args)

Handle_StepRepr_HArray1OfRepresentationItem_swigregister = _StepRepr.Handle_StepRepr_HArray1OfRepresentationItem_swigregister
Handle_StepRepr_HArray1OfRepresentationItem_swigregister(Handle_StepRepr_HArray1OfRepresentationItem)

def Handle_StepRepr_HArray1OfRepresentationItem_DownCast(thing):
    return _StepRepr.Handle_StepRepr_HArray1OfRepresentationItem_DownCast(thing)
Handle_StepRepr_HArray1OfRepresentationItem_DownCast = _StepRepr.Handle_StepRepr_HArray1OfRepresentationItem_DownCast

class Handle_StepRepr_ParallelOffset(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_ParallelOffset self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_ParallelOffset_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_ParallelOffset self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_ParallelOffset_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_ParallelOffset self, StepRepr_ParallelOffset thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_ParallelOffset_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_ParallelOffset self, Handle_StepRepr_ParallelOffset theHandle) -> Handle_StepRepr_ParallelOffset
        assign(Handle_StepRepr_ParallelOffset self, StepRepr_ParallelOffset thePtr) -> Handle_StepRepr_ParallelOffset
        assign(Handle_StepRepr_ParallelOffset self, Handle_StepRepr_ParallelOffset theHandle) -> Handle_StepRepr_ParallelOffset

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_ParallelOffset_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_ParallelOffset self) -> StepRepr_ParallelOffset

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ParallelOffset_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_ParallelOffset self) -> StepRepr_ParallelOffset

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ParallelOffset___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_ParallelOffset self) -> StepRepr_ParallelOffset

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_ParallelOffset___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_ParallelOffset___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_ParallelOffset___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_ParallelOffset(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_ParallelOffset_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_ParallelOffset

    def Init(self, *args):
        """
        Init(Handle_StepRepr_ParallelOffset self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_StepRepr_ProductDefinitionShape theOfShape, StepData_Logical const theProductDefinitional, Handle_StepBasic_MeasureWithUnit theOffset)

        Initialize all fields (own and inherited)

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape
        :type theProductDefinitional: OCC.wrapper.StepData.StepData_Logical
        :type theOffset: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepRepr.Handle_StepRepr_ParallelOffset_Init(self, *args)


    def Offset(self, *args):
        """
        Offset(Handle_StepRepr_ParallelOffset self) -> Handle_StepBasic_MeasureWithUnit

        Returns field Offset  

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepRepr.Handle_StepRepr_ParallelOffset_Offset(self, *args)


    def SetOffset(self, *args):
        """
        SetOffset(Handle_StepRepr_ParallelOffset self, Handle_StepBasic_MeasureWithUnit theOffset)

        Set field Offset  

        :type theOffset: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepRepr.Handle_StepRepr_ParallelOffset_SetOffset(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_ParallelOffset self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_ParallelOffset_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ParallelOffset_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ParallelOffset_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_ParallelOffset self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ParallelOffset_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_ParallelOffset self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ParallelOffset_Name(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_ParallelOffset self, Handle_TCollection_HAsciiString aDescription)

        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ParallelOffset_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_ParallelOffset self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ParallelOffset_Description(self, *args)


    def SetOfShape(self, *args):
        """
        SetOfShape(Handle_StepRepr_ParallelOffset self, Handle_StepRepr_ProductDefinitionShape aOfShape)

        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepRepr.Handle_StepRepr_ParallelOffset_SetOfShape(self, *args)


    def OfShape(self, *args):
        """
        OfShape(Handle_StepRepr_ParallelOffset self) -> Handle_StepRepr_ProductDefinitionShape

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepRepr.Handle_StepRepr_ParallelOffset_OfShape(self, *args)


    def SetProductDefinitional(self, *args):
        """
        SetProductDefinitional(Handle_StepRepr_ParallelOffset self, StepData_Logical const aProductDefinitional)

        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_ParallelOffset_SetProductDefinitional(self, *args)


    def ProductDefinitional(self, *args):
        """
        ProductDefinitional(Handle_StepRepr_ParallelOffset self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_ParallelOffset_ProductDefinitional(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_ParallelOffset self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_ParallelOffset_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_ParallelOffset self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_ParallelOffset self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ParallelOffset_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_ParallelOffset self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_ParallelOffset self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ParallelOffset_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_ParallelOffset self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_ParallelOffset_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_ParallelOffset self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ParallelOffset_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_ParallelOffset self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_ParallelOffset_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_ParallelOffset self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ParallelOffset_DecrementRefCounter(self, *args)

Handle_StepRepr_ParallelOffset_swigregister = _StepRepr.Handle_StepRepr_ParallelOffset_swigregister
Handle_StepRepr_ParallelOffset_swigregister(Handle_StepRepr_ParallelOffset)

def Handle_StepRepr_ParallelOffset_DownCast(thing):
    return _StepRepr.Handle_StepRepr_ParallelOffset_DownCast(thing)
Handle_StepRepr_ParallelOffset_DownCast = _StepRepr.Handle_StepRepr_ParallelOffset_DownCast

class Handle_StepRepr_DerivedShapeAspect(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_DerivedShapeAspect self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_DerivedShapeAspect_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_DerivedShapeAspect self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_DerivedShapeAspect_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_DerivedShapeAspect self, StepRepr_DerivedShapeAspect thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_DerivedShapeAspect_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_DerivedShapeAspect self, Handle_StepRepr_DerivedShapeAspect theHandle) -> Handle_StepRepr_DerivedShapeAspect
        assign(Handle_StepRepr_DerivedShapeAspect self, StepRepr_DerivedShapeAspect thePtr) -> Handle_StepRepr_DerivedShapeAspect
        assign(Handle_StepRepr_DerivedShapeAspect self, Handle_StepRepr_DerivedShapeAspect theHandle) -> Handle_StepRepr_DerivedShapeAspect

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_DerivedShapeAspect_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_DerivedShapeAspect self) -> StepRepr_DerivedShapeAspect

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_DerivedShapeAspect_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_DerivedShapeAspect self) -> StepRepr_DerivedShapeAspect

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_DerivedShapeAspect___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_DerivedShapeAspect self) -> StepRepr_DerivedShapeAspect

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_DerivedShapeAspect___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_DerivedShapeAspect___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_DerivedShapeAspect___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_DerivedShapeAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_DerivedShapeAspect_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_DerivedShapeAspect

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_DerivedShapeAspect self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_DerivedShapeAspect_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_DerivedShapeAspect_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_DerivedShapeAspect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepRepr_DerivedShapeAspect self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepRepr_ProductDefinitionShape aOfShape, StepData_Logical const aProductDefinitional)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape
        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_DerivedShapeAspect_Init(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_DerivedShapeAspect self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_DerivedShapeAspect_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_DerivedShapeAspect self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_DerivedShapeAspect_Name(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_DerivedShapeAspect self, Handle_TCollection_HAsciiString aDescription)

        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_DerivedShapeAspect_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_DerivedShapeAspect self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_DerivedShapeAspect_Description(self, *args)


    def SetOfShape(self, *args):
        """
        SetOfShape(Handle_StepRepr_DerivedShapeAspect self, Handle_StepRepr_ProductDefinitionShape aOfShape)

        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepRepr.Handle_StepRepr_DerivedShapeAspect_SetOfShape(self, *args)


    def OfShape(self, *args):
        """
        OfShape(Handle_StepRepr_DerivedShapeAspect self) -> Handle_StepRepr_ProductDefinitionShape

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepRepr.Handle_StepRepr_DerivedShapeAspect_OfShape(self, *args)


    def SetProductDefinitional(self, *args):
        """
        SetProductDefinitional(Handle_StepRepr_DerivedShapeAspect self, StepData_Logical const aProductDefinitional)

        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_DerivedShapeAspect_SetProductDefinitional(self, *args)


    def ProductDefinitional(self, *args):
        """
        ProductDefinitional(Handle_StepRepr_DerivedShapeAspect self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_DerivedShapeAspect_ProductDefinitional(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_DerivedShapeAspect self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_DerivedShapeAspect_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_DerivedShapeAspect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_DerivedShapeAspect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_DerivedShapeAspect_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_DerivedShapeAspect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_DerivedShapeAspect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_DerivedShapeAspect_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_DerivedShapeAspect self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_DerivedShapeAspect_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_DerivedShapeAspect self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_DerivedShapeAspect_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_DerivedShapeAspect self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_DerivedShapeAspect_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_DerivedShapeAspect self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_DerivedShapeAspect_DecrementRefCounter(self, *args)

Handle_StepRepr_DerivedShapeAspect_swigregister = _StepRepr.Handle_StepRepr_DerivedShapeAspect_swigregister
Handle_StepRepr_DerivedShapeAspect_swigregister(Handle_StepRepr_DerivedShapeAspect)

def Handle_StepRepr_DerivedShapeAspect_DownCast(thing):
    return _StepRepr.Handle_StepRepr_DerivedShapeAspect_DownCast(thing)
Handle_StepRepr_DerivedShapeAspect_DownCast = _StepRepr.Handle_StepRepr_DerivedShapeAspect_DownCast

class Handle_StepRepr_ConfigurationEffectivity(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_ConfigurationEffectivity self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_ConfigurationEffectivity_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_ConfigurationEffectivity self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_ConfigurationEffectivity_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_ConfigurationEffectivity self, StepRepr_ConfigurationEffectivity thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_ConfigurationEffectivity_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_ConfigurationEffectivity self, Handle_StepRepr_ConfigurationEffectivity theHandle) -> Handle_StepRepr_ConfigurationEffectivity
        assign(Handle_StepRepr_ConfigurationEffectivity self, StepRepr_ConfigurationEffectivity thePtr) -> Handle_StepRepr_ConfigurationEffectivity
        assign(Handle_StepRepr_ConfigurationEffectivity self, Handle_StepRepr_ConfigurationEffectivity theHandle) -> Handle_StepRepr_ConfigurationEffectivity

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_ConfigurationEffectivity_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_ConfigurationEffectivity self) -> StepRepr_ConfigurationEffectivity

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ConfigurationEffectivity_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_ConfigurationEffectivity self) -> StepRepr_ConfigurationEffectivity

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ConfigurationEffectivity___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_ConfigurationEffectivity self) -> StepRepr_ConfigurationEffectivity

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_ConfigurationEffectivity___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_ConfigurationEffectivity___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_ConfigurationEffectivity___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_ConfigurationEffectivity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_ConfigurationEffectivity_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_ConfigurationEffectivity

    def Init(self, *args):
        """
        Init(Handle_StepRepr_ConfigurationEffectivity self, Handle_TCollection_HAsciiString aEffectivity_Id, Handle_StepBasic_ProductDefinitionRelationship aProductDefinitionEffectivity_Usage, Handle_StepRepr_ConfigurationDesign aConfiguration)

        Initialize all fields (own and inherited)

        :type aEffectivity_Id: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aProductDefinitionEffectivity_Usage: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionRelationship
        :type aConfiguration: OCC.wrapper.StepRepr.Handle_StepRepr_ConfigurationDesign

        """
        return _StepRepr.Handle_StepRepr_ConfigurationEffectivity_Init(self, *args)


    def Configuration(self, *args):
        """
        Configuration(Handle_StepRepr_ConfigurationEffectivity self) -> Handle_StepRepr_ConfigurationDesign

        Returns field Configuration

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ConfigurationDesign

        """
        return _StepRepr.Handle_StepRepr_ConfigurationEffectivity_Configuration(self, *args)


    def SetConfiguration(self, *args):
        """
        SetConfiguration(Handle_StepRepr_ConfigurationEffectivity self, Handle_StepRepr_ConfigurationDesign Configuration)

        Set field Configuration

        :type Configuration: OCC.wrapper.StepRepr.Handle_StepRepr_ConfigurationDesign

        """
        return _StepRepr.Handle_StepRepr_ConfigurationEffectivity_SetConfiguration(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_ConfigurationEffectivity self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_ConfigurationEffectivity_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ConfigurationEffectivity_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ConfigurationEffectivity_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Usage(self, *args):
        """
        Usage(Handle_StepRepr_ConfigurationEffectivity self) -> Handle_StepBasic_ProductDefinitionRelationship

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionRelationship

        """
        return _StepRepr.Handle_StepRepr_ConfigurationEffectivity_Usage(self, *args)


    def SetUsage(self, *args):
        """
        SetUsage(Handle_StepRepr_ConfigurationEffectivity self, Handle_StepBasic_ProductDefinitionRelationship aUsage)

        :type aUsage: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionRelationship

        """
        return _StepRepr.Handle_StepRepr_ConfigurationEffectivity_SetUsage(self, *args)


    def Id(self, *args):
        """
        Id(Handle_StepRepr_ConfigurationEffectivity self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ConfigurationEffectivity_Id(self, *args)


    def SetId(self, *args):
        """
        SetId(Handle_StepRepr_ConfigurationEffectivity self, Handle_TCollection_HAsciiString aid)

        :type aid: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ConfigurationEffectivity_SetId(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_ConfigurationEffectivity self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_ConfigurationEffectivity_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_ConfigurationEffectivity self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_ConfigurationEffectivity self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ConfigurationEffectivity_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_ConfigurationEffectivity self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_ConfigurationEffectivity self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ConfigurationEffectivity_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_ConfigurationEffectivity self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_ConfigurationEffectivity_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_ConfigurationEffectivity self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ConfigurationEffectivity_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_ConfigurationEffectivity self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_ConfigurationEffectivity_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_ConfigurationEffectivity self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ConfigurationEffectivity_DecrementRefCounter(self, *args)

Handle_StepRepr_ConfigurationEffectivity_swigregister = _StepRepr.Handle_StepRepr_ConfigurationEffectivity_swigregister
Handle_StepRepr_ConfigurationEffectivity_swigregister(Handle_StepRepr_ConfigurationEffectivity)

def Handle_StepRepr_ConfigurationEffectivity_DownCast(thing):
    return _StepRepr.Handle_StepRepr_ConfigurationEffectivity_DownCast(thing)
Handle_StepRepr_ConfigurationEffectivity_DownCast = _StepRepr.Handle_StepRepr_ConfigurationEffectivity_DownCast

class Handle_StepRepr_CompositeGroupShapeAspect(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_CompositeGroupShapeAspect self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_CompositeGroupShapeAspect_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_CompositeGroupShapeAspect self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_CompositeGroupShapeAspect_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_CompositeGroupShapeAspect self, StepRepr_CompositeGroupShapeAspect thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_CompositeGroupShapeAspect_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_CompositeGroupShapeAspect self, Handle_StepRepr_CompositeGroupShapeAspect theHandle) -> Handle_StepRepr_CompositeGroupShapeAspect
        assign(Handle_StepRepr_CompositeGroupShapeAspect self, StepRepr_CompositeGroupShapeAspect thePtr) -> Handle_StepRepr_CompositeGroupShapeAspect
        assign(Handle_StepRepr_CompositeGroupShapeAspect self, Handle_StepRepr_CompositeGroupShapeAspect theHandle) -> Handle_StepRepr_CompositeGroupShapeAspect

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_CompositeGroupShapeAspect_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_CompositeGroupShapeAspect self) -> StepRepr_CompositeGroupShapeAspect

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_CompositeGroupShapeAspect_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_CompositeGroupShapeAspect self) -> StepRepr_CompositeGroupShapeAspect

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_CompositeGroupShapeAspect___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_CompositeGroupShapeAspect self) -> StepRepr_CompositeGroupShapeAspect

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_CompositeGroupShapeAspect___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_CompositeGroupShapeAspect___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_CompositeGroupShapeAspect___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_CompositeGroupShapeAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_CompositeGroupShapeAspect_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_CompositeGroupShapeAspect

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_CompositeGroupShapeAspect self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_CompositeGroupShapeAspect_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_CompositeGroupShapeAspect_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_CompositeGroupShapeAspect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepRepr_CompositeGroupShapeAspect self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepRepr_ProductDefinitionShape aOfShape, StepData_Logical const aProductDefinitional)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape
        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_CompositeGroupShapeAspect_Init(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_CompositeGroupShapeAspect self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_CompositeGroupShapeAspect_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_CompositeGroupShapeAspect self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_CompositeGroupShapeAspect_Name(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_CompositeGroupShapeAspect self, Handle_TCollection_HAsciiString aDescription)

        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_CompositeGroupShapeAspect_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_CompositeGroupShapeAspect self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_CompositeGroupShapeAspect_Description(self, *args)


    def SetOfShape(self, *args):
        """
        SetOfShape(Handle_StepRepr_CompositeGroupShapeAspect self, Handle_StepRepr_ProductDefinitionShape aOfShape)

        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepRepr.Handle_StepRepr_CompositeGroupShapeAspect_SetOfShape(self, *args)


    def OfShape(self, *args):
        """
        OfShape(Handle_StepRepr_CompositeGroupShapeAspect self) -> Handle_StepRepr_ProductDefinitionShape

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepRepr.Handle_StepRepr_CompositeGroupShapeAspect_OfShape(self, *args)


    def SetProductDefinitional(self, *args):
        """
        SetProductDefinitional(Handle_StepRepr_CompositeGroupShapeAspect self, StepData_Logical const aProductDefinitional)

        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_CompositeGroupShapeAspect_SetProductDefinitional(self, *args)


    def ProductDefinitional(self, *args):
        """
        ProductDefinitional(Handle_StepRepr_CompositeGroupShapeAspect self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_CompositeGroupShapeAspect_ProductDefinitional(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_CompositeGroupShapeAspect self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_CompositeGroupShapeAspect_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_CompositeGroupShapeAspect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_CompositeGroupShapeAspect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_CompositeGroupShapeAspect_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_CompositeGroupShapeAspect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_CompositeGroupShapeAspect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_CompositeGroupShapeAspect_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_CompositeGroupShapeAspect self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_CompositeGroupShapeAspect_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_CompositeGroupShapeAspect self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_CompositeGroupShapeAspect_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_CompositeGroupShapeAspect self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_CompositeGroupShapeAspect_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_CompositeGroupShapeAspect self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_CompositeGroupShapeAspect_DecrementRefCounter(self, *args)

Handle_StepRepr_CompositeGroupShapeAspect_swigregister = _StepRepr.Handle_StepRepr_CompositeGroupShapeAspect_swigregister
Handle_StepRepr_CompositeGroupShapeAspect_swigregister(Handle_StepRepr_CompositeGroupShapeAspect)

def Handle_StepRepr_CompositeGroupShapeAspect_DownCast(thing):
    return _StepRepr.Handle_StepRepr_CompositeGroupShapeAspect_DownCast(thing)
Handle_StepRepr_CompositeGroupShapeAspect_DownCast = _StepRepr.Handle_StepRepr_CompositeGroupShapeAspect_DownCast

class Handle_StepRepr_ShapeAspectTransition(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_ShapeAspectTransition self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_ShapeAspectTransition_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_ShapeAspectTransition self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectTransition_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_ShapeAspectTransition self, StepRepr_ShapeAspectTransition thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectTransition_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_ShapeAspectTransition self, Handle_StepRepr_ShapeAspectTransition theHandle) -> Handle_StepRepr_ShapeAspectTransition
        assign(Handle_StepRepr_ShapeAspectTransition self, StepRepr_ShapeAspectTransition thePtr) -> Handle_StepRepr_ShapeAspectTransition
        assign(Handle_StepRepr_ShapeAspectTransition self, Handle_StepRepr_ShapeAspectTransition theHandle) -> Handle_StepRepr_ShapeAspectTransition

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectTransition_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_ShapeAspectTransition self) -> StepRepr_ShapeAspectTransition

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectTransition_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_ShapeAspectTransition self) -> StepRepr_ShapeAspectTransition

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectTransition___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_ShapeAspectTransition self) -> StepRepr_ShapeAspectTransition

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectTransition___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_ShapeAspectTransition___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_ShapeAspectTransition___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_ShapeAspectTransition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_ShapeAspectTransition_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_ShapeAspectTransition

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_ShapeAspectTransition self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectTransition_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ShapeAspectTransition_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ShapeAspectTransition_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepRepr_ShapeAspectTransition self, Handle_TCollection_HAsciiString aName, Standard_Boolean const hasDescription, Handle_TCollection_HAsciiString aDescription, Handle_StepRepr_ShapeAspect aRelatingShapeAspect, Handle_StepRepr_ShapeAspect aRelatedShapeAspect)

        Initialize all fields (own and inherited)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type hasDescription: bool
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aRelatingShapeAspect: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspect
        :type aRelatedShapeAspect: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspect

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectTransition_Init(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_ShapeAspectTransition self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectTransition_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_ShapeAspectTransition self, Handle_TCollection_HAsciiString Name)

        Set field Name

        :type Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectTransition_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_ShapeAspectTransition self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectTransition_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_ShapeAspectTransition self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectTransition_SetDescription(self, *args)


    def HasDescription(self, *args):
        """
        HasDescription(Handle_StepRepr_ShapeAspectTransition self) -> Standard_Boolean

        Returns True if optional field Description is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectTransition_HasDescription(self, *args)


    def RelatingShapeAspect(self, *args):
        """
        RelatingShapeAspect(Handle_StepRepr_ShapeAspectTransition self) -> Handle_StepRepr_ShapeAspect

        Returns field RelatingShapeAspect

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspect

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectTransition_RelatingShapeAspect(self, *args)


    def SetRelatingShapeAspect(self, *args):
        """
        SetRelatingShapeAspect(Handle_StepRepr_ShapeAspectTransition self, Handle_StepRepr_ShapeAspect RelatingShapeAspect)

        Set field RelatingShapeAspect

        :type RelatingShapeAspect: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspect

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectTransition_SetRelatingShapeAspect(self, *args)


    def RelatedShapeAspect(self, *args):
        """
        RelatedShapeAspect(Handle_StepRepr_ShapeAspectTransition self) -> Handle_StepRepr_ShapeAspect

        Returns field RelatedShapeAspect

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspect

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectTransition_RelatedShapeAspect(self, *args)


    def SetRelatedShapeAspect(self, *args):
        """
        SetRelatedShapeAspect(Handle_StepRepr_ShapeAspectTransition self, Handle_StepRepr_ShapeAspect RelatedShapeAspect)

        Set field RelatedShapeAspect

        :type RelatedShapeAspect: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspect

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectTransition_SetRelatedShapeAspect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_ShapeAspectTransition self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_ShapeAspectTransition_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_ShapeAspectTransition self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_ShapeAspectTransition self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectTransition_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_ShapeAspectTransition self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_ShapeAspectTransition self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectTransition_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_ShapeAspectTransition self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectTransition_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_ShapeAspectTransition self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectTransition_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_ShapeAspectTransition self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_ShapeAspectTransition_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_ShapeAspectTransition self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectTransition_DecrementRefCounter(self, *args)

Handle_StepRepr_ShapeAspectTransition_swigregister = _StepRepr.Handle_StepRepr_ShapeAspectTransition_swigregister
Handle_StepRepr_ShapeAspectTransition_swigregister(Handle_StepRepr_ShapeAspectTransition)

def Handle_StepRepr_ShapeAspectTransition_DownCast(thing):
    return _StepRepr.Handle_StepRepr_ShapeAspectTransition_DownCast(thing)
Handle_StepRepr_ShapeAspectTransition_DownCast = _StepRepr.Handle_StepRepr_ShapeAspectTransition_DownCast

class Handle_StepRepr_PropertyDefinitionRelationship(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_PropertyDefinitionRelationship self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRelationship_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_PropertyDefinitionRelationship self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRelationship_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_PropertyDefinitionRelationship self, StepRepr_PropertyDefinitionRelationship thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRelationship_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_PropertyDefinitionRelationship self, Handle_StepRepr_PropertyDefinitionRelationship theHandle) -> Handle_StepRepr_PropertyDefinitionRelationship
        assign(Handle_StepRepr_PropertyDefinitionRelationship self, StepRepr_PropertyDefinitionRelationship thePtr) -> Handle_StepRepr_PropertyDefinitionRelationship
        assign(Handle_StepRepr_PropertyDefinitionRelationship self, Handle_StepRepr_PropertyDefinitionRelationship theHandle) -> Handle_StepRepr_PropertyDefinitionRelationship

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRelationship_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_PropertyDefinitionRelationship self) -> StepRepr_PropertyDefinitionRelationship

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRelationship_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_PropertyDefinitionRelationship self) -> StepRepr_PropertyDefinitionRelationship

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRelationship___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_PropertyDefinitionRelationship self) -> StepRepr_PropertyDefinitionRelationship

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRelationship___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRelationship___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_PropertyDefinitionRelationship___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_PropertyDefinitionRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_PropertyDefinitionRelationship_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_PropertyDefinitionRelationship

    def Init(self, *args):
        """
        Init(Handle_StepRepr_PropertyDefinitionRelationship self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepRepr_PropertyDefinition aRelatingPropertyDefinition, Handle_StepRepr_PropertyDefinition aRelatedPropertyDefinition)

        Initialize all fields (own and inherited)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aRelatingPropertyDefinition: OCC.wrapper.StepRepr.Handle_StepRepr_PropertyDefinition
        :type aRelatedPropertyDefinition: OCC.wrapper.StepRepr.Handle_StepRepr_PropertyDefinition

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRelationship_Init(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_PropertyDefinitionRelationship self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRelationship_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_PropertyDefinitionRelationship self, Handle_TCollection_HAsciiString Name)

        Set field Name

        :type Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRelationship_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_PropertyDefinitionRelationship self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRelationship_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_PropertyDefinitionRelationship self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRelationship_SetDescription(self, *args)


    def RelatingPropertyDefinition(self, *args):
        """
        RelatingPropertyDefinition(Handle_StepRepr_PropertyDefinitionRelationship self) -> Handle_StepRepr_PropertyDefinition

        Returns field RelatingPropertyDefinition

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_PropertyDefinition

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRelationship_RelatingPropertyDefinition(self, *args)


    def SetRelatingPropertyDefinition(self, *args):
        """
        SetRelatingPropertyDefinition(Handle_StepRepr_PropertyDefinitionRelationship self, Handle_StepRepr_PropertyDefinition RelatingPropertyDefinition)

        Set field RelatingPropertyDefinition

        :type RelatingPropertyDefinition: OCC.wrapper.StepRepr.Handle_StepRepr_PropertyDefinition

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRelationship_SetRelatingPropertyDefinition(self, *args)


    def RelatedPropertyDefinition(self, *args):
        """
        RelatedPropertyDefinition(Handle_StepRepr_PropertyDefinitionRelationship self) -> Handle_StepRepr_PropertyDefinition

        Returns field RelatedPropertyDefinition

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_PropertyDefinition

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRelationship_RelatedPropertyDefinition(self, *args)


    def SetRelatedPropertyDefinition(self, *args):
        """
        SetRelatedPropertyDefinition(Handle_StepRepr_PropertyDefinitionRelationship self, Handle_StepRepr_PropertyDefinition RelatedPropertyDefinition)

        Set field RelatedPropertyDefinition

        :type RelatedPropertyDefinition: OCC.wrapper.StepRepr.Handle_StepRepr_PropertyDefinition

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRelationship_SetRelatedPropertyDefinition(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_PropertyDefinitionRelationship self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRelationship_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_PropertyDefinitionRelationship_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_PropertyDefinitionRelationship_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_PropertyDefinitionRelationship self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRelationship_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_PropertyDefinitionRelationship self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_PropertyDefinitionRelationship self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRelationship_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_PropertyDefinitionRelationship self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_PropertyDefinitionRelationship self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRelationship_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_PropertyDefinitionRelationship self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRelationship_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_PropertyDefinitionRelationship self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRelationship_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_PropertyDefinitionRelationship self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRelationship_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_PropertyDefinitionRelationship self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRelationship_DecrementRefCounter(self, *args)

Handle_StepRepr_PropertyDefinitionRelationship_swigregister = _StepRepr.Handle_StepRepr_PropertyDefinitionRelationship_swigregister
Handle_StepRepr_PropertyDefinitionRelationship_swigregister(Handle_StepRepr_PropertyDefinitionRelationship)

def Handle_StepRepr_PropertyDefinitionRelationship_DownCast(thing):
    return _StepRepr.Handle_StepRepr_PropertyDefinitionRelationship_DownCast(thing)
Handle_StepRepr_PropertyDefinitionRelationship_DownCast = _StepRepr.Handle_StepRepr_PropertyDefinitionRelationship_DownCast

class Handle_StepRepr_IntegerRepresentationItem(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_IntegerRepresentationItem self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_IntegerRepresentationItem_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_IntegerRepresentationItem self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_IntegerRepresentationItem_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_IntegerRepresentationItem self, StepRepr_IntegerRepresentationItem thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_IntegerRepresentationItem_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_IntegerRepresentationItem self, Handle_StepRepr_IntegerRepresentationItem theHandle) -> Handle_StepRepr_IntegerRepresentationItem
        assign(Handle_StepRepr_IntegerRepresentationItem self, StepRepr_IntegerRepresentationItem thePtr) -> Handle_StepRepr_IntegerRepresentationItem
        assign(Handle_StepRepr_IntegerRepresentationItem self, Handle_StepRepr_IntegerRepresentationItem theHandle) -> Handle_StepRepr_IntegerRepresentationItem

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_IntegerRepresentationItem_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_IntegerRepresentationItem self) -> StepRepr_IntegerRepresentationItem

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_IntegerRepresentationItem_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_IntegerRepresentationItem self) -> StepRepr_IntegerRepresentationItem

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_IntegerRepresentationItem___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_IntegerRepresentationItem self) -> StepRepr_IntegerRepresentationItem

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_IntegerRepresentationItem___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_IntegerRepresentationItem___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_IntegerRepresentationItem___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_IntegerRepresentationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_IntegerRepresentationItem_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_IntegerRepresentationItem

    def Init(self, *args):
        """
        Init(Handle_StepRepr_IntegerRepresentationItem self, Handle_TCollection_HAsciiString theName, Standard_Integer const theValue)

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theValue: int

        """
        return _StepRepr.Handle_StepRepr_IntegerRepresentationItem_Init(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_StepRepr_IntegerRepresentationItem self, Standard_Integer const theValue)

        :type theValue: int

        """
        return _StepRepr.Handle_StepRepr_IntegerRepresentationItem_SetValue(self, *args)


    def Value(self, *args):
        """
        Value(Handle_StepRepr_IntegerRepresentationItem self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_IntegerRepresentationItem_Value(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_IntegerRepresentationItem self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_IntegerRepresentationItem_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_IntegerRepresentationItem_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_IntegerRepresentationItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_IntegerRepresentationItem self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_IntegerRepresentationItem_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_IntegerRepresentationItem self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_IntegerRepresentationItem_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_IntegerRepresentationItem self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_IntegerRepresentationItem_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_IntegerRepresentationItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_IntegerRepresentationItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_IntegerRepresentationItem_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_IntegerRepresentationItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_IntegerRepresentationItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_IntegerRepresentationItem_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_IntegerRepresentationItem self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_IntegerRepresentationItem_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_IntegerRepresentationItem self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_IntegerRepresentationItem_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_IntegerRepresentationItem self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_IntegerRepresentationItem_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_IntegerRepresentationItem self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_IntegerRepresentationItem_DecrementRefCounter(self, *args)

Handle_StepRepr_IntegerRepresentationItem_swigregister = _StepRepr.Handle_StepRepr_IntegerRepresentationItem_swigregister
Handle_StepRepr_IntegerRepresentationItem_swigregister(Handle_StepRepr_IntegerRepresentationItem)

def Handle_StepRepr_IntegerRepresentationItem_DownCast(thing):
    return _StepRepr.Handle_StepRepr_IntegerRepresentationItem_DownCast(thing)
Handle_StepRepr_IntegerRepresentationItem_DownCast = _StepRepr.Handle_StepRepr_IntegerRepresentationItem_DownCast

class Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation self, StepRepr_HArray1OfPropertyDefinitionRepresentation thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation self, Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation theHandle) -> Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation
        assign(Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation self, StepRepr_HArray1OfPropertyDefinitionRepresentation thePtr) -> Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation
        assign(Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation self, Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation theHandle) -> Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation self) -> StepRepr_HArray1OfPropertyDefinitionRepresentation

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation self) -> StepRepr_HArray1OfPropertyDefinitionRepresentation

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation self) -> StepRepr_HArray1OfPropertyDefinitionRepresentation

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepRepr.StepRepr_Array1OfPropertyDefinitionRepresentation

        """
        res = _StepRepr.Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation self) -> NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation

        :rtype: OCC.wrapper.StepRepr.StepRepr_Array1OfPropertyDefinitionRepresentation

        """
        return _StepRepr.Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation_DecrementRefCounter(self, *args)

Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation_swigregister = _StepRepr.Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation_swigregister
Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation_swigregister(Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation)

def Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation_DownCast(thing):
    return _StepRepr.Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation_DownCast(thing)
Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation_DownCast = _StepRepr.Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation_DownCast

class Handle_StepRepr_Representation(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_Representation self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_Representation_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_Representation self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_Representation_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_Representation self, StepRepr_Representation thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_Representation_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_Representation self, Handle_StepRepr_Representation theHandle) -> Handle_StepRepr_Representation
        assign(Handle_StepRepr_Representation self, StepRepr_Representation thePtr) -> Handle_StepRepr_Representation
        assign(Handle_StepRepr_Representation self, Handle_StepRepr_Representation theHandle) -> Handle_StepRepr_Representation

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_Representation_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_Representation self) -> StepRepr_Representation

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_Representation_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_Representation self) -> StepRepr_Representation

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_Representation___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_Representation self) -> StepRepr_Representation

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_Representation___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_Representation___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_Representation___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_Representation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_Representation_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_Representation

    def Init(self, *args):
        """
        Init(Handle_StepRepr_Representation self, Handle_TCollection_HAsciiString aName, Handle_StepRepr_HArray1OfRepresentationItem aItems, Handle_StepRepr_RepresentationContext aContextOfItems)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aItems: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfRepresentationItem
        :type aContextOfItems: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationContext

        """
        return _StepRepr.Handle_StepRepr_Representation_Init(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_Representation self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_Representation_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_Representation self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_Representation_Name(self, *args)


    def SetItems(self, *args):
        """
        SetItems(Handle_StepRepr_Representation self, Handle_StepRepr_HArray1OfRepresentationItem aItems)

        :type aItems: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfRepresentationItem

        """
        return _StepRepr.Handle_StepRepr_Representation_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(Handle_StepRepr_Representation self) -> Handle_StepRepr_HArray1OfRepresentationItem

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfRepresentationItem

        """
        return _StepRepr.Handle_StepRepr_Representation_Items(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(Handle_StepRepr_Representation self, Standard_Integer const num) -> Handle_StepRepr_RepresentationItem

        :type num: int
        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepRepr.Handle_StepRepr_Representation_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(Handle_StepRepr_Representation self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_Representation_NbItems(self, *args)


    def SetContextOfItems(self, *args):
        """
        SetContextOfItems(Handle_StepRepr_Representation self, Handle_StepRepr_RepresentationContext aContextOfItems)

        :type aContextOfItems: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationContext

        """
        return _StepRepr.Handle_StepRepr_Representation_SetContextOfItems(self, *args)


    def ContextOfItems(self, *args):
        """
        ContextOfItems(Handle_StepRepr_Representation self) -> Handle_StepRepr_RepresentationContext

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationContext

        """
        return _StepRepr.Handle_StepRepr_Representation_ContextOfItems(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_Representation self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_Representation_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_Representation_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_Representation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_Representation self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_Representation_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_Representation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_Representation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_Representation_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_Representation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_Representation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_Representation_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_Representation self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_Representation_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_Representation self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_Representation_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_Representation self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_Representation_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_Representation self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_Representation_DecrementRefCounter(self, *args)

Handle_StepRepr_Representation_swigregister = _StepRepr.Handle_StepRepr_Representation_swigregister
Handle_StepRepr_Representation_swigregister(Handle_StepRepr_Representation)

def Handle_StepRepr_Representation_DownCast(thing):
    return _StepRepr.Handle_StepRepr_Representation_DownCast(thing)
Handle_StepRepr_Representation_DownCast = _StepRepr.Handle_StepRepr_Representation_DownCast

class Handle_StepRepr_ValueRepresentationItem(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_ValueRepresentationItem self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_ValueRepresentationItem_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_ValueRepresentationItem self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_ValueRepresentationItem_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_ValueRepresentationItem self, StepRepr_ValueRepresentationItem thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_ValueRepresentationItem_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_ValueRepresentationItem self, Handle_StepRepr_ValueRepresentationItem theHandle) -> Handle_StepRepr_ValueRepresentationItem
        assign(Handle_StepRepr_ValueRepresentationItem self, StepRepr_ValueRepresentationItem thePtr) -> Handle_StepRepr_ValueRepresentationItem
        assign(Handle_StepRepr_ValueRepresentationItem self, Handle_StepRepr_ValueRepresentationItem theHandle) -> Handle_StepRepr_ValueRepresentationItem

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_ValueRepresentationItem_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_ValueRepresentationItem self) -> StepRepr_ValueRepresentationItem

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ValueRepresentationItem_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_ValueRepresentationItem self) -> StepRepr_ValueRepresentationItem

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ValueRepresentationItem___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_ValueRepresentationItem self) -> StepRepr_ValueRepresentationItem

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_ValueRepresentationItem___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_ValueRepresentationItem___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_ValueRepresentationItem___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_ValueRepresentationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_ValueRepresentationItem_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_ValueRepresentationItem

    def Init(self, *args):
        """
        Init(Handle_StepRepr_ValueRepresentationItem self, Handle_TCollection_HAsciiString theName, Handle_StepBasic_MeasureValueMember theValueComponentMember)

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theValueComponentMember: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureValueMember

        """
        return _StepRepr.Handle_StepRepr_ValueRepresentationItem_Init(self, *args)


    def SetValueComponentMember(self, *args):
        """
        SetValueComponentMember(Handle_StepRepr_ValueRepresentationItem self, Handle_StepBasic_MeasureValueMember theValueComponentMember)

        :type theValueComponentMember: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureValueMember

        """
        return _StepRepr.Handle_StepRepr_ValueRepresentationItem_SetValueComponentMember(self, *args)


    def ValueComponentMember(self, *args):
        """
        ValueComponentMember(Handle_StepRepr_ValueRepresentationItem self) -> Handle_StepBasic_MeasureValueMember

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureValueMember

        """
        return _StepRepr.Handle_StepRepr_ValueRepresentationItem_ValueComponentMember(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_ValueRepresentationItem self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_ValueRepresentationItem_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ValueRepresentationItem_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ValueRepresentationItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_ValueRepresentationItem self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ValueRepresentationItem_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_ValueRepresentationItem self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ValueRepresentationItem_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_ValueRepresentationItem self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_ValueRepresentationItem_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_ValueRepresentationItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_ValueRepresentationItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ValueRepresentationItem_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_ValueRepresentationItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_ValueRepresentationItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ValueRepresentationItem_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_ValueRepresentationItem self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_ValueRepresentationItem_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_ValueRepresentationItem self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ValueRepresentationItem_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_ValueRepresentationItem self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_ValueRepresentationItem_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_ValueRepresentationItem self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ValueRepresentationItem_DecrementRefCounter(self, *args)

Handle_StepRepr_ValueRepresentationItem_swigregister = _StepRepr.Handle_StepRepr_ValueRepresentationItem_swigregister
Handle_StepRepr_ValueRepresentationItem_swigregister(Handle_StepRepr_ValueRepresentationItem)

def Handle_StepRepr_ValueRepresentationItem_DownCast(thing):
    return _StepRepr.Handle_StepRepr_ValueRepresentationItem_DownCast(thing)
Handle_StepRepr_ValueRepresentationItem_DownCast = _StepRepr.Handle_StepRepr_ValueRepresentationItem_DownCast

class Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit self, StepRepr_ReprItemAndPlaneAngleMeasureWithUnit thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit self, Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit theHandle) -> Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit
        assign(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit self, StepRepr_ReprItemAndPlaneAngleMeasureWithUnit thePtr) -> Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit
        assign(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit self, Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit theHandle) -> Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit self) -> StepRepr_ReprItemAndPlaneAngleMeasureWithUnit

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit self) -> StepRepr_ReprItemAndPlaneAngleMeasureWithUnit

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit self) -> StepRepr_ReprItemAndPlaneAngleMeasureWithUnit

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit

    def SetPlaneAngleMeasureWithUnit(self, *args):
        """
        SetPlaneAngleMeasureWithUnit(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit self, Handle_StepBasic_PlaneAngleMeasureWithUnit aLMWU)

        :type aLMWU: OCC.wrapper.StepBasic.Handle_StepBasic_PlaneAngleMeasureWithUnit

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_SetPlaneAngleMeasureWithUnit(self, *args)


    def GetPlaneAngleMeasureWithUnit(self, *args):
        """
        GetPlaneAngleMeasureWithUnit(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit self) -> Handle_StepBasic_PlaneAngleMeasureWithUnit

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_PlaneAngleMeasureWithUnit

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_GetPlaneAngleMeasureWithUnit(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit self, Handle_StepBasic_MeasureWithUnit aMWU, Handle_StepRepr_RepresentationItem aRI)

        :type aMWU: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type aRI: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_Init(self, *args)


    def GetMeasureRepresentationItem(self, *args):
        """
        GetMeasureRepresentationItem(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit self) -> Handle_StepRepr_MeasureRepresentationItem

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_MeasureRepresentationItem

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_GetMeasureRepresentationItem(self, *args)


    def SetMeasureWithUnit(self, *args):
        """
        SetMeasureWithUnit(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit self, Handle_StepBasic_MeasureWithUnit aMWU)

        :type aMWU: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_SetMeasureWithUnit(self, *args)


    def GetMeasureWithUnit(self, *args):
        """
        GetMeasureWithUnit(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit self) -> Handle_StepBasic_MeasureWithUnit

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_GetMeasureWithUnit(self, *args)


    def GetRepresentationItem(self, *args):
        """
        GetRepresentationItem(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit self) -> Handle_StepRepr_RepresentationItem

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_GetRepresentationItem(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_DecrementRefCounter(self, *args)

Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_swigregister = _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_swigregister
Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_swigregister(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit)

def Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_DownCast(thing):
    return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_DownCast(thing)
Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_DownCast = _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnit_DownCast

class Handle_StepRepr_HArray1OfShapeAspect(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_HArray1OfShapeAspect self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_HArray1OfShapeAspect_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_HArray1OfShapeAspect self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_HArray1OfShapeAspect_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_HArray1OfShapeAspect self, StepRepr_HArray1OfShapeAspect thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_HArray1OfShapeAspect_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_HArray1OfShapeAspect self, Handle_StepRepr_HArray1OfShapeAspect theHandle) -> Handle_StepRepr_HArray1OfShapeAspect
        assign(Handle_StepRepr_HArray1OfShapeAspect self, StepRepr_HArray1OfShapeAspect thePtr) -> Handle_StepRepr_HArray1OfShapeAspect
        assign(Handle_StepRepr_HArray1OfShapeAspect self, Handle_StepRepr_HArray1OfShapeAspect theHandle) -> Handle_StepRepr_HArray1OfShapeAspect

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_HArray1OfShapeAspect_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_HArray1OfShapeAspect self) -> StepRepr_HArray1OfShapeAspect

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_HArray1OfShapeAspect_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_HArray1OfShapeAspect self) -> StepRepr_HArray1OfShapeAspect

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_HArray1OfShapeAspect___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_HArray1OfShapeAspect self) -> StepRepr_HArray1OfShapeAspect

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_HArray1OfShapeAspect___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_HArray1OfShapeAspect___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_HArray1OfShapeAspect___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_HArray1OfShapeAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_HArray1OfShapeAspect_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_HArray1OfShapeAspect

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepRepr.StepRepr_Array1OfShapeAspect

        """
        res = _StepRepr.Handle_StepRepr_HArray1OfShapeAspect_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepRepr_HArray1OfShapeAspect self) -> NCollection_Array1_Handle_StepRepr_ShapeAspect

        :rtype: OCC.wrapper.StepRepr.StepRepr_Array1OfShapeAspect

        """
        return _StepRepr.Handle_StepRepr_HArray1OfShapeAspect_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_HArray1OfShapeAspect self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_HArray1OfShapeAspect_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_HArray1OfShapeAspect_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_HArray1OfShapeAspect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_HArray1OfShapeAspect self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_HArray1OfShapeAspect_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_HArray1OfShapeAspect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_HArray1OfShapeAspect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_HArray1OfShapeAspect_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_HArray1OfShapeAspect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_HArray1OfShapeAspect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_HArray1OfShapeAspect_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_HArray1OfShapeAspect self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_HArray1OfShapeAspect_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_HArray1OfShapeAspect self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_HArray1OfShapeAspect_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_HArray1OfShapeAspect self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_HArray1OfShapeAspect_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_HArray1OfShapeAspect self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_HArray1OfShapeAspect_DecrementRefCounter(self, *args)

Handle_StepRepr_HArray1OfShapeAspect_swigregister = _StepRepr.Handle_StepRepr_HArray1OfShapeAspect_swigregister
Handle_StepRepr_HArray1OfShapeAspect_swigregister(Handle_StepRepr_HArray1OfShapeAspect)

def Handle_StepRepr_HArray1OfShapeAspect_DownCast(thing):
    return _StepRepr.Handle_StepRepr_HArray1OfShapeAspect_DownCast(thing)
Handle_StepRepr_HArray1OfShapeAspect_DownCast = _StepRepr.Handle_StepRepr_HArray1OfShapeAspect_DownCast

class Handle_StepRepr_PropertyDefinitionRepresentation(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_PropertyDefinitionRepresentation self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRepresentation_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_PropertyDefinitionRepresentation self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRepresentation_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_PropertyDefinitionRepresentation self, StepRepr_PropertyDefinitionRepresentation thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRepresentation_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_PropertyDefinitionRepresentation self, Handle_StepRepr_PropertyDefinitionRepresentation theHandle) -> Handle_StepRepr_PropertyDefinitionRepresentation
        assign(Handle_StepRepr_PropertyDefinitionRepresentation self, StepRepr_PropertyDefinitionRepresentation thePtr) -> Handle_StepRepr_PropertyDefinitionRepresentation
        assign(Handle_StepRepr_PropertyDefinitionRepresentation self, Handle_StepRepr_PropertyDefinitionRepresentation theHandle) -> Handle_StepRepr_PropertyDefinitionRepresentation

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRepresentation_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_PropertyDefinitionRepresentation self) -> StepRepr_PropertyDefinitionRepresentation

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRepresentation_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_PropertyDefinitionRepresentation self) -> StepRepr_PropertyDefinitionRepresentation

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRepresentation___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_PropertyDefinitionRepresentation self) -> StepRepr_PropertyDefinitionRepresentation

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRepresentation___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRepresentation___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_PropertyDefinitionRepresentation___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_PropertyDefinitionRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_PropertyDefinitionRepresentation_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_PropertyDefinitionRepresentation

    def Init(self, *args):
        """
        Init(Handle_StepRepr_PropertyDefinitionRepresentation self, StepRepr_RepresentedDefinition aDefinition, Handle_StepRepr_Representation aUsedRepresentation)

        Initialize all fields (own and inherited)

        :type aDefinition: OCC.wrapper.StepRepr.StepRepr_RepresentedDefinition
        :type aUsedRepresentation: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRepresentation_Init(self, *args)


    def Definition(self, *args):
        """
        Definition(Handle_StepRepr_PropertyDefinitionRepresentation self) -> StepRepr_RepresentedDefinition

        Returns field Definition

        :rtype: OCC.wrapper.StepRepr.StepRepr_RepresentedDefinition

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRepresentation_Definition(self, *args)


    def SetDefinition(self, *args):
        """
        SetDefinition(Handle_StepRepr_PropertyDefinitionRepresentation self, StepRepr_RepresentedDefinition Definition)

        Set field Definition

        :type Definition: OCC.wrapper.StepRepr.StepRepr_RepresentedDefinition

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRepresentation_SetDefinition(self, *args)


    def UsedRepresentation(self, *args):
        """
        UsedRepresentation(Handle_StepRepr_PropertyDefinitionRepresentation self) -> Handle_StepRepr_Representation

        Returns field UsedRepresentation

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRepresentation_UsedRepresentation(self, *args)


    def SetUsedRepresentation(self, *args):
        """
        SetUsedRepresentation(Handle_StepRepr_PropertyDefinitionRepresentation self, Handle_StepRepr_Representation UsedRepresentation)

        Set field UsedRepresentation

        :type UsedRepresentation: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRepresentation_SetUsedRepresentation(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_PropertyDefinitionRepresentation self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRepresentation_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_PropertyDefinitionRepresentation_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_PropertyDefinitionRepresentation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_PropertyDefinitionRepresentation self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRepresentation_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_PropertyDefinitionRepresentation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_PropertyDefinitionRepresentation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRepresentation_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_PropertyDefinitionRepresentation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_PropertyDefinitionRepresentation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRepresentation_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_PropertyDefinitionRepresentation self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRepresentation_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_PropertyDefinitionRepresentation self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRepresentation_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_PropertyDefinitionRepresentation self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRepresentation_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_PropertyDefinitionRepresentation self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_PropertyDefinitionRepresentation_DecrementRefCounter(self, *args)

Handle_StepRepr_PropertyDefinitionRepresentation_swigregister = _StepRepr.Handle_StepRepr_PropertyDefinitionRepresentation_swigregister
Handle_StepRepr_PropertyDefinitionRepresentation_swigregister(Handle_StepRepr_PropertyDefinitionRepresentation)

def Handle_StepRepr_PropertyDefinitionRepresentation_DownCast(thing):
    return _StepRepr.Handle_StepRepr_PropertyDefinitionRepresentation_DownCast(thing)
Handle_StepRepr_PropertyDefinitionRepresentation_DownCast = _StepRepr.Handle_StepRepr_PropertyDefinitionRepresentation_DownCast

class Handle_StepRepr_RepresentationMap(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_RepresentationMap self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_RepresentationMap_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_RepresentationMap self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_RepresentationMap_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_RepresentationMap self, StepRepr_RepresentationMap thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_RepresentationMap_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_RepresentationMap self, Handle_StepRepr_RepresentationMap theHandle) -> Handle_StepRepr_RepresentationMap
        assign(Handle_StepRepr_RepresentationMap self, StepRepr_RepresentationMap thePtr) -> Handle_StepRepr_RepresentationMap
        assign(Handle_StepRepr_RepresentationMap self, Handle_StepRepr_RepresentationMap theHandle) -> Handle_StepRepr_RepresentationMap

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_RepresentationMap_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_RepresentationMap self) -> StepRepr_RepresentationMap

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_RepresentationMap_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_RepresentationMap self) -> StepRepr_RepresentationMap

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_RepresentationMap___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_RepresentationMap self) -> StepRepr_RepresentationMap

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_RepresentationMap___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_RepresentationMap___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_RepresentationMap___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_RepresentationMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_RepresentationMap_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_RepresentationMap

    def Init(self, *args):
        """
        Init(Handle_StepRepr_RepresentationMap self, Handle_StepRepr_RepresentationItem aMappingOrigin, Handle_StepRepr_Representation aMappedRepresentation)

        :type aMappingOrigin: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem
        :type aMappedRepresentation: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepRepr.Handle_StepRepr_RepresentationMap_Init(self, *args)


    def SetMappingOrigin(self, *args):
        """
        SetMappingOrigin(Handle_StepRepr_RepresentationMap self, Handle_StepRepr_RepresentationItem aMappingOrigin)

        :type aMappingOrigin: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepRepr.Handle_StepRepr_RepresentationMap_SetMappingOrigin(self, *args)


    def MappingOrigin(self, *args):
        """
        MappingOrigin(Handle_StepRepr_RepresentationMap self) -> Handle_StepRepr_RepresentationItem

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepRepr.Handle_StepRepr_RepresentationMap_MappingOrigin(self, *args)


    def SetMappedRepresentation(self, *args):
        """
        SetMappedRepresentation(Handle_StepRepr_RepresentationMap self, Handle_StepRepr_Representation aMappedRepresentation)

        :type aMappedRepresentation: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepRepr.Handle_StepRepr_RepresentationMap_SetMappedRepresentation(self, *args)


    def MappedRepresentation(self, *args):
        """
        MappedRepresentation(Handle_StepRepr_RepresentationMap self) -> Handle_StepRepr_Representation

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepRepr.Handle_StepRepr_RepresentationMap_MappedRepresentation(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_RepresentationMap self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_RepresentationMap_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_RepresentationMap_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_RepresentationMap_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_RepresentationMap self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_RepresentationMap_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_RepresentationMap self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_RepresentationMap self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_RepresentationMap_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_RepresentationMap self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_RepresentationMap self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_RepresentationMap_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_RepresentationMap self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_RepresentationMap_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_RepresentationMap self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_RepresentationMap_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_RepresentationMap self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_RepresentationMap_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_RepresentationMap self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_RepresentationMap_DecrementRefCounter(self, *args)

Handle_StepRepr_RepresentationMap_swigregister = _StepRepr.Handle_StepRepr_RepresentationMap_swigregister
Handle_StepRepr_RepresentationMap_swigregister(Handle_StepRepr_RepresentationMap)

def Handle_StepRepr_RepresentationMap_DownCast(thing):
    return _StepRepr.Handle_StepRepr_RepresentationMap_DownCast(thing)
Handle_StepRepr_RepresentationMap_DownCast = _StepRepr.Handle_StepRepr_RepresentationMap_DownCast

class NCollection_Array1_Handle_StepRepr_RepresentationItem(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_StepRepr_RepresentationItem self) -> NCollection_Array1< opencascade::handle< StepRepr_RepresentationItem > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_RepresentationItem_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_StepRepr_RepresentationItem self) -> NCollection_Array1< opencascade::handle< StepRepr_RepresentationItem > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_RepresentationItem_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_StepRepr_RepresentationItem self) -> NCollection_Array1< opencascade::handle< StepRepr_RepresentationItem > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_RepresentationItem_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_StepRepr_RepresentationItem self) -> NCollection_Array1< opencascade::handle< StepRepr_RepresentationItem > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_RepresentationItem_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepRepr.new_NCollection_Array1_Handle_StepRepr_RepresentationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_StepRepr_RepresentationItem self, Handle_StepRepr_RepresentationItem theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_RepresentationItem_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_StepRepr_RepresentationItem self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_RepresentationItem_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_StepRepr_RepresentationItem self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_RepresentationItem_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_StepRepr_RepresentationItem self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_RepresentationItem_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_StepRepr_RepresentationItem self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_RepresentationItem_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_StepRepr_RepresentationItem self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_RepresentationItem_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_StepRepr_RepresentationItem self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_RepresentationItem_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_StepRepr_RepresentationItem self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_RepresentationItem_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_StepRepr_RepresentationItem self, NCollection_Array1_Handle_StepRepr_RepresentationItem theOther) -> NCollection_Array1_Handle_StepRepr_RepresentationItem

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_RepresentationItem_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_StepRepr_RepresentationItem self, NCollection_Array1_Handle_StepRepr_RepresentationItem theOther) -> NCollection_Array1_Handle_StepRepr_RepresentationItem

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_RepresentationItem_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_StepRepr_RepresentationItem self, NCollection_Array1_Handle_StepRepr_RepresentationItem theOther) -> NCollection_Array1_Handle_StepRepr_RepresentationItem
        assign(NCollection_Array1_Handle_StepRepr_RepresentationItem self, NCollection_Array1_Handle_StepRepr_RepresentationItem theOther) -> NCollection_Array1_Handle_StepRepr_RepresentationItem

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_RepresentationItem_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepRepr.NCollection_Array1_Handle_StepRepr_RepresentationItem_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_StepRepr_RepresentationItem self) -> Handle_StepRepr_RepresentationItem

        @return first element

        :rtype: TheItemType &

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_RepresentationItem_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepRepr.NCollection_Array1_Handle_StepRepr_RepresentationItem_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_StepRepr_RepresentationItem self) -> Handle_StepRepr_RepresentationItem

        @return last element

        :rtype: TheItemType &

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_RepresentationItem_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepRepr.NCollection_Array1_Handle_StepRepr_RepresentationItem_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_StepRepr_RepresentationItem self, Standard_Integer const theIndex) -> Handle_StepRepr_RepresentationItem

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_RepresentationItem_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepRepr.NCollection_Array1_Handle_StepRepr_RepresentationItem___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepRepr.NCollection_Array1_Handle_StepRepr_RepresentationItem_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_StepRepr_RepresentationItem self, Standard_Integer const theIndex, Handle_StepRepr_RepresentationItem theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_RepresentationItem_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_StepRepr_RepresentationItem self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_RepresentationItem_Resize(self, *args)

    __swig_destroy__ = _StepRepr.delete_NCollection_Array1_Handle_StepRepr_RepresentationItem
NCollection_Array1_Handle_StepRepr_RepresentationItem_swigregister = _StepRepr.NCollection_Array1_Handle_StepRepr_RepresentationItem_swigregister
NCollection_Array1_Handle_StepRepr_RepresentationItem_swigregister(NCollection_Array1_Handle_StepRepr_RepresentationItem)


try:
	StepRepr_Array1OfRepresentationItem = NCollection_Array1_Handle_StepRepr_RepresentationItem
except NameError:
	pass # does not exist, probably ignored

class Handle_StepRepr_RepresentationContext(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_RepresentationContext self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_RepresentationContext_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_RepresentationContext self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_RepresentationContext_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_RepresentationContext self, StepRepr_RepresentationContext thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_RepresentationContext_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_RepresentationContext self, Handle_StepRepr_RepresentationContext theHandle) -> Handle_StepRepr_RepresentationContext
        assign(Handle_StepRepr_RepresentationContext self, StepRepr_RepresentationContext thePtr) -> Handle_StepRepr_RepresentationContext
        assign(Handle_StepRepr_RepresentationContext self, Handle_StepRepr_RepresentationContext theHandle) -> Handle_StepRepr_RepresentationContext

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_RepresentationContext_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_RepresentationContext self) -> StepRepr_RepresentationContext

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_RepresentationContext_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_RepresentationContext self) -> StepRepr_RepresentationContext

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_RepresentationContext___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_RepresentationContext self) -> StepRepr_RepresentationContext

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_RepresentationContext___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_RepresentationContext___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_RepresentationContext___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_RepresentationContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_RepresentationContext_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_RepresentationContext

    def Init(self, *args):
        """
        Init(Handle_StepRepr_RepresentationContext self, Handle_TCollection_HAsciiString aContextIdentifier, Handle_TCollection_HAsciiString aContextType)

        :type aContextIdentifier: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aContextType: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_RepresentationContext_Init(self, *args)


    def SetContextIdentifier(self, *args):
        """
        SetContextIdentifier(Handle_StepRepr_RepresentationContext self, Handle_TCollection_HAsciiString aContextIdentifier)

        :type aContextIdentifier: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_RepresentationContext_SetContextIdentifier(self, *args)


    def ContextIdentifier(self, *args):
        """
        ContextIdentifier(Handle_StepRepr_RepresentationContext self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_RepresentationContext_ContextIdentifier(self, *args)


    def SetContextType(self, *args):
        """
        SetContextType(Handle_StepRepr_RepresentationContext self, Handle_TCollection_HAsciiString aContextType)

        :type aContextType: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_RepresentationContext_SetContextType(self, *args)


    def ContextType(self, *args):
        """
        ContextType(Handle_StepRepr_RepresentationContext self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_RepresentationContext_ContextType(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_RepresentationContext self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_RepresentationContext_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_RepresentationContext_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_RepresentationContext_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_RepresentationContext self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_RepresentationContext_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_RepresentationContext self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_RepresentationContext self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_RepresentationContext_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_RepresentationContext self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_RepresentationContext self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_RepresentationContext_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_RepresentationContext self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_RepresentationContext_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_RepresentationContext self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_RepresentationContext_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_RepresentationContext self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_RepresentationContext_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_RepresentationContext self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_RepresentationContext_DecrementRefCounter(self, *args)

Handle_StepRepr_RepresentationContext_swigregister = _StepRepr.Handle_StepRepr_RepresentationContext_swigregister
Handle_StepRepr_RepresentationContext_swigregister(Handle_StepRepr_RepresentationContext)

def Handle_StepRepr_RepresentationContext_DownCast(thing):
    return _StepRepr.Handle_StepRepr_RepresentationContext_DownCast(thing)
Handle_StepRepr_RepresentationContext_DownCast = _StepRepr.Handle_StepRepr_RepresentationContext_DownCast

class Handle_StepRepr_ContinuosShapeAspect(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_ContinuosShapeAspect self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_ContinuosShapeAspect_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_ContinuosShapeAspect self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_ContinuosShapeAspect_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_ContinuosShapeAspect self, StepRepr_ContinuosShapeAspect thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_ContinuosShapeAspect_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_ContinuosShapeAspect self, Handle_StepRepr_ContinuosShapeAspect theHandle) -> Handle_StepRepr_ContinuosShapeAspect
        assign(Handle_StepRepr_ContinuosShapeAspect self, StepRepr_ContinuosShapeAspect thePtr) -> Handle_StepRepr_ContinuosShapeAspect
        assign(Handle_StepRepr_ContinuosShapeAspect self, Handle_StepRepr_ContinuosShapeAspect theHandle) -> Handle_StepRepr_ContinuosShapeAspect

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_ContinuosShapeAspect_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_ContinuosShapeAspect self) -> StepRepr_ContinuosShapeAspect

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ContinuosShapeAspect_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_ContinuosShapeAspect self) -> StepRepr_ContinuosShapeAspect

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ContinuosShapeAspect___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_ContinuosShapeAspect self) -> StepRepr_ContinuosShapeAspect

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_ContinuosShapeAspect___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_ContinuosShapeAspect___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_ContinuosShapeAspect___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_ContinuosShapeAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_ContinuosShapeAspect_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_ContinuosShapeAspect

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_ContinuosShapeAspect self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_ContinuosShapeAspect_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ContinuosShapeAspect_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ContinuosShapeAspect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepRepr_ContinuosShapeAspect self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepRepr_ProductDefinitionShape aOfShape, StepData_Logical const aProductDefinitional)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape
        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_ContinuosShapeAspect_Init(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_ContinuosShapeAspect self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ContinuosShapeAspect_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_ContinuosShapeAspect self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ContinuosShapeAspect_Name(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_ContinuosShapeAspect self, Handle_TCollection_HAsciiString aDescription)

        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ContinuosShapeAspect_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_ContinuosShapeAspect self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ContinuosShapeAspect_Description(self, *args)


    def SetOfShape(self, *args):
        """
        SetOfShape(Handle_StepRepr_ContinuosShapeAspect self, Handle_StepRepr_ProductDefinitionShape aOfShape)

        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepRepr.Handle_StepRepr_ContinuosShapeAspect_SetOfShape(self, *args)


    def OfShape(self, *args):
        """
        OfShape(Handle_StepRepr_ContinuosShapeAspect self) -> Handle_StepRepr_ProductDefinitionShape

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepRepr.Handle_StepRepr_ContinuosShapeAspect_OfShape(self, *args)


    def SetProductDefinitional(self, *args):
        """
        SetProductDefinitional(Handle_StepRepr_ContinuosShapeAspect self, StepData_Logical const aProductDefinitional)

        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_ContinuosShapeAspect_SetProductDefinitional(self, *args)


    def ProductDefinitional(self, *args):
        """
        ProductDefinitional(Handle_StepRepr_ContinuosShapeAspect self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_ContinuosShapeAspect_ProductDefinitional(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_ContinuosShapeAspect self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_ContinuosShapeAspect_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_ContinuosShapeAspect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_ContinuosShapeAspect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ContinuosShapeAspect_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_ContinuosShapeAspect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_ContinuosShapeAspect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ContinuosShapeAspect_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_ContinuosShapeAspect self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_ContinuosShapeAspect_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_ContinuosShapeAspect self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ContinuosShapeAspect_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_ContinuosShapeAspect self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_ContinuosShapeAspect_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_ContinuosShapeAspect self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ContinuosShapeAspect_DecrementRefCounter(self, *args)

Handle_StepRepr_ContinuosShapeAspect_swigregister = _StepRepr.Handle_StepRepr_ContinuosShapeAspect_swigregister
Handle_StepRepr_ContinuosShapeAspect_swigregister(Handle_StepRepr_ContinuosShapeAspect)

def Handle_StepRepr_ContinuosShapeAspect_DownCast(thing):
    return _StepRepr.Handle_StepRepr_ContinuosShapeAspect_DownCast(thing)
Handle_StepRepr_ContinuosShapeAspect_DownCast = _StepRepr.Handle_StepRepr_ContinuosShapeAspect_DownCast

class Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI self, StepRepr_ReprItemAndMeasureWithUnitAndQRI thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI self, Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI theHandle) -> Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI
        assign(Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI self, StepRepr_ReprItemAndMeasureWithUnitAndQRI thePtr) -> Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI
        assign(Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI self, Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI theHandle) -> Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI self) -> StepRepr_ReprItemAndMeasureWithUnitAndQRI

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI self) -> StepRepr_ReprItemAndMeasureWithUnitAndQRI

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI self) -> StepRepr_ReprItemAndMeasureWithUnitAndQRI

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI

    def Init(self, *args):
        """
        Init(Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI self, Handle_StepBasic_MeasureWithUnit aMWU, Handle_StepRepr_RepresentationItem aRI, Handle_StepShape_QualifiedRepresentationItem aQRI)

        :type aMWU: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type aRI: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem
        :type aQRI: OCC.wrapper.StepRepr.Handle_StepShape_QualifiedRepresentationItem

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI_Init(self, *args)


    def SetQualifiedRepresentationItem(self, *args):
        """
        SetQualifiedRepresentationItem(Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI self, Handle_StepShape_QualifiedRepresentationItem aQRI)

        :type aQRI: OCC.wrapper.StepRepr.Handle_StepShape_QualifiedRepresentationItem

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI_SetQualifiedRepresentationItem(self, *args)


    def GetQualifiedRepresentationItem(self, *args):
        """
        GetQualifiedRepresentationItem(Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI self) -> Handle_StepShape_QualifiedRepresentationItem

        :rtype: OCC.wrapper.StepRepr.Handle_StepShape_QualifiedRepresentationItem

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI_GetQualifiedRepresentationItem(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetMeasureRepresentationItem(self, *args):
        """
        GetMeasureRepresentationItem(Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI self) -> Handle_StepRepr_MeasureRepresentationItem

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_MeasureRepresentationItem

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI_GetMeasureRepresentationItem(self, *args)


    def SetMeasureWithUnit(self, *args):
        """
        SetMeasureWithUnit(Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI self, Handle_StepBasic_MeasureWithUnit aMWU)

        :type aMWU: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI_SetMeasureWithUnit(self, *args)


    def GetMeasureWithUnit(self, *args):
        """
        GetMeasureWithUnit(Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI self) -> Handle_StepBasic_MeasureWithUnit

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI_GetMeasureWithUnit(self, *args)


    def GetRepresentationItem(self, *args):
        """
        GetRepresentationItem(Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI self) -> Handle_StepRepr_RepresentationItem

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI_GetRepresentationItem(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI_DecrementRefCounter(self, *args)

Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI_swigregister = _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI_swigregister
Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI_swigregister(Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI)

def Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI_DownCast(thing):
    return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI_DownCast(thing)
Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI_DownCast = _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnitAndQRI_DownCast

class Handle_StepRepr_CompositeShapeAspect(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_CompositeShapeAspect self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_CompositeShapeAspect_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_CompositeShapeAspect self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_CompositeShapeAspect_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_CompositeShapeAspect self, StepRepr_CompositeShapeAspect thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_CompositeShapeAspect_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_CompositeShapeAspect self, Handle_StepRepr_CompositeShapeAspect theHandle) -> Handle_StepRepr_CompositeShapeAspect
        assign(Handle_StepRepr_CompositeShapeAspect self, StepRepr_CompositeShapeAspect thePtr) -> Handle_StepRepr_CompositeShapeAspect
        assign(Handle_StepRepr_CompositeShapeAspect self, Handle_StepRepr_CompositeShapeAspect theHandle) -> Handle_StepRepr_CompositeShapeAspect

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_CompositeShapeAspect_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_CompositeShapeAspect self) -> StepRepr_CompositeShapeAspect

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_CompositeShapeAspect_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_CompositeShapeAspect self) -> StepRepr_CompositeShapeAspect

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_CompositeShapeAspect___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_CompositeShapeAspect self) -> StepRepr_CompositeShapeAspect

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_CompositeShapeAspect___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_CompositeShapeAspect___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_CompositeShapeAspect___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_CompositeShapeAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_CompositeShapeAspect_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_CompositeShapeAspect

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_CompositeShapeAspect self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_CompositeShapeAspect_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_CompositeShapeAspect_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_CompositeShapeAspect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepRepr_CompositeShapeAspect self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepRepr_ProductDefinitionShape aOfShape, StepData_Logical const aProductDefinitional)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape
        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_CompositeShapeAspect_Init(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_CompositeShapeAspect self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_CompositeShapeAspect_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_CompositeShapeAspect self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_CompositeShapeAspect_Name(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_CompositeShapeAspect self, Handle_TCollection_HAsciiString aDescription)

        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_CompositeShapeAspect_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_CompositeShapeAspect self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_CompositeShapeAspect_Description(self, *args)


    def SetOfShape(self, *args):
        """
        SetOfShape(Handle_StepRepr_CompositeShapeAspect self, Handle_StepRepr_ProductDefinitionShape aOfShape)

        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepRepr.Handle_StepRepr_CompositeShapeAspect_SetOfShape(self, *args)


    def OfShape(self, *args):
        """
        OfShape(Handle_StepRepr_CompositeShapeAspect self) -> Handle_StepRepr_ProductDefinitionShape

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepRepr.Handle_StepRepr_CompositeShapeAspect_OfShape(self, *args)


    def SetProductDefinitional(self, *args):
        """
        SetProductDefinitional(Handle_StepRepr_CompositeShapeAspect self, StepData_Logical const aProductDefinitional)

        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_CompositeShapeAspect_SetProductDefinitional(self, *args)


    def ProductDefinitional(self, *args):
        """
        ProductDefinitional(Handle_StepRepr_CompositeShapeAspect self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_CompositeShapeAspect_ProductDefinitional(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_CompositeShapeAspect self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_CompositeShapeAspect_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_CompositeShapeAspect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_CompositeShapeAspect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_CompositeShapeAspect_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_CompositeShapeAspect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_CompositeShapeAspect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_CompositeShapeAspect_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_CompositeShapeAspect self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_CompositeShapeAspect_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_CompositeShapeAspect self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_CompositeShapeAspect_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_CompositeShapeAspect self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_CompositeShapeAspect_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_CompositeShapeAspect self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_CompositeShapeAspect_DecrementRefCounter(self, *args)

Handle_StepRepr_CompositeShapeAspect_swigregister = _StepRepr.Handle_StepRepr_CompositeShapeAspect_swigregister
Handle_StepRepr_CompositeShapeAspect_swigregister(Handle_StepRepr_CompositeShapeAspect)

def Handle_StepRepr_CompositeShapeAspect_DownCast(thing):
    return _StepRepr.Handle_StepRepr_CompositeShapeAspect_DownCast(thing)
Handle_StepRepr_CompositeShapeAspect_DownCast = _StepRepr.Handle_StepRepr_CompositeShapeAspect_DownCast

class Handle_StepRepr_ConfigurationDesign(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_ConfigurationDesign self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_ConfigurationDesign_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_ConfigurationDesign self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_ConfigurationDesign_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_ConfigurationDesign self, StepRepr_ConfigurationDesign thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_ConfigurationDesign_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_ConfigurationDesign self, Handle_StepRepr_ConfigurationDesign theHandle) -> Handle_StepRepr_ConfigurationDesign
        assign(Handle_StepRepr_ConfigurationDesign self, StepRepr_ConfigurationDesign thePtr) -> Handle_StepRepr_ConfigurationDesign
        assign(Handle_StepRepr_ConfigurationDesign self, Handle_StepRepr_ConfigurationDesign theHandle) -> Handle_StepRepr_ConfigurationDesign

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_ConfigurationDesign_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_ConfigurationDesign self) -> StepRepr_ConfigurationDesign

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ConfigurationDesign_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_ConfigurationDesign self) -> StepRepr_ConfigurationDesign

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ConfigurationDesign___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_ConfigurationDesign self) -> StepRepr_ConfigurationDesign

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_ConfigurationDesign___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_ConfigurationDesign___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_ConfigurationDesign___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_ConfigurationDesign(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_ConfigurationDesign_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_ConfigurationDesign

    def Init(self, *args):
        """
        Init(Handle_StepRepr_ConfigurationDesign self, Handle_StepRepr_ConfigurationItem aConfiguration, StepRepr_ConfigurationDesignItem aDesign)

        Initialize all fields (own and inherited)

        :type aConfiguration: OCC.wrapper.StepRepr.Handle_StepRepr_ConfigurationItem
        :type aDesign: OCC.wrapper.StepRepr.StepRepr_ConfigurationDesignItem

        """
        return _StepRepr.Handle_StepRepr_ConfigurationDesign_Init(self, *args)


    def Configuration(self, *args):
        """
        Configuration(Handle_StepRepr_ConfigurationDesign self) -> Handle_StepRepr_ConfigurationItem

        Returns field Configuration

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ConfigurationItem

        """
        return _StepRepr.Handle_StepRepr_ConfigurationDesign_Configuration(self, *args)


    def SetConfiguration(self, *args):
        """
        SetConfiguration(Handle_StepRepr_ConfigurationDesign self, Handle_StepRepr_ConfigurationItem Configuration)

        Set field Configuration

        :type Configuration: OCC.wrapper.StepRepr.Handle_StepRepr_ConfigurationItem

        """
        return _StepRepr.Handle_StepRepr_ConfigurationDesign_SetConfiguration(self, *args)


    def Design(self, *args):
        """
        Design(Handle_StepRepr_ConfigurationDesign self) -> StepRepr_ConfigurationDesignItem

        Returns field Design

        :rtype: OCC.wrapper.StepRepr.StepRepr_ConfigurationDesignItem

        """
        return _StepRepr.Handle_StepRepr_ConfigurationDesign_Design(self, *args)


    def SetDesign(self, *args):
        """
        SetDesign(Handle_StepRepr_ConfigurationDesign self, StepRepr_ConfigurationDesignItem Design)

        Set field Design

        :type Design: OCC.wrapper.StepRepr.StepRepr_ConfigurationDesignItem

        """
        return _StepRepr.Handle_StepRepr_ConfigurationDesign_SetDesign(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_ConfigurationDesign self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_ConfigurationDesign_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ConfigurationDesign_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ConfigurationDesign_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_ConfigurationDesign self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_ConfigurationDesign_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_ConfigurationDesign self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_ConfigurationDesign self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ConfigurationDesign_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_ConfigurationDesign self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_ConfigurationDesign self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ConfigurationDesign_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_ConfigurationDesign self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_ConfigurationDesign_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_ConfigurationDesign self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ConfigurationDesign_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_ConfigurationDesign self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_ConfigurationDesign_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_ConfigurationDesign self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ConfigurationDesign_DecrementRefCounter(self, *args)

Handle_StepRepr_ConfigurationDesign_swigregister = _StepRepr.Handle_StepRepr_ConfigurationDesign_swigregister
Handle_StepRepr_ConfigurationDesign_swigregister(Handle_StepRepr_ConfigurationDesign)

def Handle_StepRepr_ConfigurationDesign_DownCast(thing):
    return _StepRepr.Handle_StepRepr_ConfigurationDesign_DownCast(thing)
Handle_StepRepr_ConfigurationDesign_DownCast = _StepRepr.Handle_StepRepr_ConfigurationDesign_DownCast

class Handle_StepRepr_ProductConcept(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_ProductConcept self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_ProductConcept_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_ProductConcept self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_ProductConcept_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_ProductConcept self, StepRepr_ProductConcept thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_ProductConcept_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_ProductConcept self, Handle_StepRepr_ProductConcept theHandle) -> Handle_StepRepr_ProductConcept
        assign(Handle_StepRepr_ProductConcept self, StepRepr_ProductConcept thePtr) -> Handle_StepRepr_ProductConcept
        assign(Handle_StepRepr_ProductConcept self, Handle_StepRepr_ProductConcept theHandle) -> Handle_StepRepr_ProductConcept

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_ProductConcept_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_ProductConcept self) -> StepRepr_ProductConcept

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ProductConcept_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_ProductConcept self) -> StepRepr_ProductConcept

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ProductConcept___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_ProductConcept self) -> StepRepr_ProductConcept

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_ProductConcept___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_ProductConcept___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_ProductConcept___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_ProductConcept(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_ProductConcept_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_ProductConcept

    def Init(self, *args):
        """
        Init(Handle_StepRepr_ProductConcept self, Handle_TCollection_HAsciiString aId, Handle_TCollection_HAsciiString aName, Standard_Boolean const hasDescription, Handle_TCollection_HAsciiString aDescription, Handle_StepBasic_ProductConceptContext aMarketContext)

        Initialize all fields (own and inherited)

        :type aId: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type hasDescription: bool
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aMarketContext: OCC.wrapper.StepBasic.Handle_StepBasic_ProductConceptContext

        """
        return _StepRepr.Handle_StepRepr_ProductConcept_Init(self, *args)


    def Id(self, *args):
        """
        Id(Handle_StepRepr_ProductConcept self) -> Handle_TCollection_HAsciiString

        Returns field Id

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ProductConcept_Id(self, *args)


    def SetId(self, *args):
        """
        SetId(Handle_StepRepr_ProductConcept self, Handle_TCollection_HAsciiString Id)

        Set field Id

        :type Id: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ProductConcept_SetId(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_ProductConcept self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ProductConcept_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_ProductConcept self, Handle_TCollection_HAsciiString Name)

        Set field Name

        :type Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ProductConcept_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_ProductConcept self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ProductConcept_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_ProductConcept self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ProductConcept_SetDescription(self, *args)


    def HasDescription(self, *args):
        """
        HasDescription(Handle_StepRepr_ProductConcept self) -> Standard_Boolean

        Returns True if optional field Description is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ProductConcept_HasDescription(self, *args)


    def MarketContext(self, *args):
        """
        MarketContext(Handle_StepRepr_ProductConcept self) -> Handle_StepBasic_ProductConceptContext

        Returns field MarketContext

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductConceptContext

        """
        return _StepRepr.Handle_StepRepr_ProductConcept_MarketContext(self, *args)


    def SetMarketContext(self, *args):
        """
        SetMarketContext(Handle_StepRepr_ProductConcept self, Handle_StepBasic_ProductConceptContext MarketContext)

        Set field MarketContext

        :type MarketContext: OCC.wrapper.StepBasic.Handle_StepBasic_ProductConceptContext

        """
        return _StepRepr.Handle_StepRepr_ProductConcept_SetMarketContext(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_ProductConcept self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_ProductConcept_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ProductConcept_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ProductConcept_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_ProductConcept self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_ProductConcept_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_ProductConcept self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_ProductConcept self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ProductConcept_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_ProductConcept self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_ProductConcept self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ProductConcept_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_ProductConcept self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_ProductConcept_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_ProductConcept self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ProductConcept_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_ProductConcept self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_ProductConcept_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_ProductConcept self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ProductConcept_DecrementRefCounter(self, *args)

Handle_StepRepr_ProductConcept_swigregister = _StepRepr.Handle_StepRepr_ProductConcept_swigregister
Handle_StepRepr_ProductConcept_swigregister(Handle_StepRepr_ProductConcept)

def Handle_StepRepr_ProductConcept_DownCast(thing):
    return _StepRepr.Handle_StepRepr_ProductConcept_DownCast(thing)
Handle_StepRepr_ProductConcept_DownCast = _StepRepr.Handle_StepRepr_ProductConcept_DownCast

class Handle_StepRepr_RepresentationRelationship(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_RepresentationRelationship self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationship_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_RepresentationRelationship self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationship_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_RepresentationRelationship self, StepRepr_RepresentationRelationship thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationship_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_RepresentationRelationship self, Handle_StepRepr_RepresentationRelationship theHandle) -> Handle_StepRepr_RepresentationRelationship
        assign(Handle_StepRepr_RepresentationRelationship self, StepRepr_RepresentationRelationship thePtr) -> Handle_StepRepr_RepresentationRelationship
        assign(Handle_StepRepr_RepresentationRelationship self, Handle_StepRepr_RepresentationRelationship theHandle) -> Handle_StepRepr_RepresentationRelationship

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationship_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_RepresentationRelationship self) -> StepRepr_RepresentationRelationship

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationship_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_RepresentationRelationship self) -> StepRepr_RepresentationRelationship

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationship___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_RepresentationRelationship self) -> StepRepr_RepresentationRelationship

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationship___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_RepresentationRelationship___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_RepresentationRelationship___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_RepresentationRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_RepresentationRelationship_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_RepresentationRelationship

    def Init(self, *args):
        """
        Init(Handle_StepRepr_RepresentationRelationship self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepRepr_Representation aRep1, Handle_StepRepr_Representation aRep2)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aRep1: OCC.wrapper.StepRepr.Handle_StepRepr_Representation
        :type aRep2: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationship_Init(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_RepresentationRelationship self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationship_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_RepresentationRelationship self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationship_Name(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_RepresentationRelationship self, Handle_TCollection_HAsciiString aDescription)

        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationship_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_RepresentationRelationship self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationship_Description(self, *args)


    def SetRep1(self, *args):
        """
        SetRep1(Handle_StepRepr_RepresentationRelationship self, Handle_StepRepr_Representation aRep1)

        :type aRep1: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationship_SetRep1(self, *args)


    def Rep1(self, *args):
        """
        Rep1(Handle_StepRepr_RepresentationRelationship self) -> Handle_StepRepr_Representation

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationship_Rep1(self, *args)


    def SetRep2(self, *args):
        """
        SetRep2(Handle_StepRepr_RepresentationRelationship self, Handle_StepRepr_Representation aRep2)

        :type aRep2: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationship_SetRep2(self, *args)


    def Rep2(self, *args):
        """
        Rep2(Handle_StepRepr_RepresentationRelationship self) -> Handle_StepRepr_Representation

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationship_Rep2(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_RepresentationRelationship self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationship_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_RepresentationRelationship_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_RepresentationRelationship_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_RepresentationRelationship self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationship_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_RepresentationRelationship self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_RepresentationRelationship self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationship_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_RepresentationRelationship self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_RepresentationRelationship self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationship_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_RepresentationRelationship self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationship_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_RepresentationRelationship self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationship_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_RepresentationRelationship self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationship_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_RepresentationRelationship self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_RepresentationRelationship_DecrementRefCounter(self, *args)

Handle_StepRepr_RepresentationRelationship_swigregister = _StepRepr.Handle_StepRepr_RepresentationRelationship_swigregister
Handle_StepRepr_RepresentationRelationship_swigregister(Handle_StepRepr_RepresentationRelationship)

def Handle_StepRepr_RepresentationRelationship_DownCast(thing):
    return _StepRepr.Handle_StepRepr_RepresentationRelationship_DownCast(thing)
Handle_StepRepr_RepresentationRelationship_DownCast = _StepRepr.Handle_StepRepr_RepresentationRelationship_DownCast

class Handle_StepRepr_NextAssemblyUsageOccurrence(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_NextAssemblyUsageOccurrence self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_NextAssemblyUsageOccurrence self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_NextAssemblyUsageOccurrence self, StepRepr_NextAssemblyUsageOccurrence thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_NextAssemblyUsageOccurrence self, Handle_StepRepr_NextAssemblyUsageOccurrence theHandle) -> Handle_StepRepr_NextAssemblyUsageOccurrence
        assign(Handle_StepRepr_NextAssemblyUsageOccurrence self, StepRepr_NextAssemblyUsageOccurrence thePtr) -> Handle_StepRepr_NextAssemblyUsageOccurrence
        assign(Handle_StepRepr_NextAssemblyUsageOccurrence self, Handle_StepRepr_NextAssemblyUsageOccurrence theHandle) -> Handle_StepRepr_NextAssemblyUsageOccurrence

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_NextAssemblyUsageOccurrence self) -> StepRepr_NextAssemblyUsageOccurrence

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_NextAssemblyUsageOccurrence self) -> StepRepr_NextAssemblyUsageOccurrence

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_NextAssemblyUsageOccurrence self) -> StepRepr_NextAssemblyUsageOccurrence

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_NextAssemblyUsageOccurrence(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_NextAssemblyUsageOccurrence

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_NextAssemblyUsageOccurrence self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepRepr_NextAssemblyUsageOccurrence self, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Id, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Name, Standard_Boolean const hasProductDefinitionRelationship_Description, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Description, Handle_StepBasic_ProductDefinition aProductDefinitionRelationship_RelatingProductDefinition, Handle_StepBasic_ProductDefinition aProductDefinitionRelationship_RelatedProductDefinition, Standard_Boolean const hasReferenceDesignator, Handle_TCollection_HAsciiString aReferenceDesignator)
        Init(Handle_StepRepr_NextAssemblyUsageOccurrence self, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Id, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Name, Standard_Boolean const hasProductDefinitionRelationship_Description, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Description, StepBasic_ProductDefinitionOrReference aProductDefinitionRelationship_RelatingProductDefinition, StepBasic_ProductDefinitionOrReference aProductDefinitionRelationship_RelatedProductDefinition, Standard_Boolean const hasReferenceDesignator, Handle_TCollection_HAsciiString aReferenceDesignator)

        Initialize all fields (own and inherited)

        :type aProductDefinitionRelationship_Id: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aProductDefinitionRelationship_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type hasProductDefinitionRelationship_Description: bool
        :type aProductDefinitionRelationship_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aProductDefinitionRelationship_RelatingProductDefinition: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference
        :type aProductDefinitionRelationship_RelatedProductDefinition: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference
        :type hasReferenceDesignator: bool
        :type aReferenceDesignator: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence_Init(self, *args)


    def ReferenceDesignator(self, *args):
        """
        ReferenceDesignator(Handle_StepRepr_NextAssemblyUsageOccurrence self) -> Handle_TCollection_HAsciiString

        Returns field ReferenceDesignator

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence_ReferenceDesignator(self, *args)


    def SetReferenceDesignator(self, *args):
        """
        SetReferenceDesignator(Handle_StepRepr_NextAssemblyUsageOccurrence self, Handle_TCollection_HAsciiString ReferenceDesignator)

        Set field ReferenceDesignator

        :type ReferenceDesignator: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence_SetReferenceDesignator(self, *args)


    def HasReferenceDesignator(self, *args):
        """
        HasReferenceDesignator(Handle_StepRepr_NextAssemblyUsageOccurrence self) -> Standard_Boolean

        Returns True if optional field ReferenceDesignator is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence_HasReferenceDesignator(self, *args)


    def Id(self, *args):
        """
        Id(Handle_StepRepr_NextAssemblyUsageOccurrence self) -> Handle_TCollection_HAsciiString

        Returns field Id

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence_Id(self, *args)


    def SetId(self, *args):
        """
        SetId(Handle_StepRepr_NextAssemblyUsageOccurrence self, Handle_TCollection_HAsciiString Id)

        Set field Id

        :type Id: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence_SetId(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_NextAssemblyUsageOccurrence self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_NextAssemblyUsageOccurrence self, Handle_TCollection_HAsciiString Name)

        Set field Name

        :type Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_NextAssemblyUsageOccurrence self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_NextAssemblyUsageOccurrence self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence_SetDescription(self, *args)


    def HasDescription(self, *args):
        """
        HasDescription(Handle_StepRepr_NextAssemblyUsageOccurrence self) -> Standard_Boolean

        Returns True if optional field Description is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence_HasDescription(self, *args)


    def RelatingProductDefinition(self, *args):
        """
        RelatingProductDefinition(Handle_StepRepr_NextAssemblyUsageOccurrence self) -> Handle_StepBasic_ProductDefinition

        Returns field RelatingProductDefinition

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinition

        """
        return _StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence_RelatingProductDefinition(self, *args)


    def RelatingProductDefinitionAP242(self, *args):
        """
        RelatingProductDefinitionAP242(Handle_StepRepr_NextAssemblyUsageOccurrence self) -> StepBasic_ProductDefinitionOrReference

        Returns field RelatingProductDefinition in AP242

        :rtype: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference

        """
        return _StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence_RelatingProductDefinitionAP242(self, *args)


    def SetRelatingProductDefinition(self, *args):
        """
        SetRelatingProductDefinition(Handle_StepRepr_NextAssemblyUsageOccurrence self, Handle_StepBasic_ProductDefinition RelatingProductDefinition)
        SetRelatingProductDefinition(Handle_StepRepr_NextAssemblyUsageOccurrence self, StepBasic_ProductDefinitionOrReference RelatingProductDefinition)

        Set field RelatingProductDefinition in AP242

        :type RelatingProductDefinition: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference

        """
        return _StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence_SetRelatingProductDefinition(self, *args)


    def RelatedProductDefinition(self, *args):
        """
        RelatedProductDefinition(Handle_StepRepr_NextAssemblyUsageOccurrence self) -> Handle_StepBasic_ProductDefinition

        Returns field RelatedProductDefinition

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinition

        """
        return _StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence_RelatedProductDefinition(self, *args)


    def RelatedProductDefinitionAP242(self, *args):
        """
        RelatedProductDefinitionAP242(Handle_StepRepr_NextAssemblyUsageOccurrence self) -> StepBasic_ProductDefinitionOrReference

        Returns field RelatedProductDefinition in AP242

        :rtype: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference

        """
        return _StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence_RelatedProductDefinitionAP242(self, *args)


    def SetRelatedProductDefinition(self, *args):
        """
        SetRelatedProductDefinition(Handle_StepRepr_NextAssemblyUsageOccurrence self, Handle_StepBasic_ProductDefinition RelatedProductDefinition)
        SetRelatedProductDefinition(Handle_StepRepr_NextAssemblyUsageOccurrence self, StepBasic_ProductDefinitionOrReference RelatedProductDefinition)

        Set field RelatedProductDefinition in AP242

        :type RelatedProductDefinition: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference

        """
        return _StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence_SetRelatedProductDefinition(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_NextAssemblyUsageOccurrence self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_NextAssemblyUsageOccurrence self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_NextAssemblyUsageOccurrence self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_NextAssemblyUsageOccurrence self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_NextAssemblyUsageOccurrence self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_NextAssemblyUsageOccurrence self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_NextAssemblyUsageOccurrence self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_NextAssemblyUsageOccurrence self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_NextAssemblyUsageOccurrence self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence_DecrementRefCounter(self, *args)

Handle_StepRepr_NextAssemblyUsageOccurrence_swigregister = _StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence_swigregister
Handle_StepRepr_NextAssemblyUsageOccurrence_swigregister(Handle_StepRepr_NextAssemblyUsageOccurrence)

def Handle_StepRepr_NextAssemblyUsageOccurrence_DownCast(thing):
    return _StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence_DownCast(thing)
Handle_StepRepr_NextAssemblyUsageOccurrence_DownCast = _StepRepr.Handle_StepRepr_NextAssemblyUsageOccurrence_DownCast

class StepRepr_HSequenceOfRepresentationItem(NCollection_Sequence_Handle_StepRepr_RepresentationItem, Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepRepr_HSequenceOfRepresentationItem
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepRepr_HSequenceOfRepresentationItem(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepRepr_HSequenceOfRepresentationItem self) -> StepRepr_HSequenceOfRepresentationItem
        __init__(StepRepr_HSequenceOfRepresentationItem self, NCollection_Sequence_Handle_StepRepr_RepresentationItem theOther) -> StepRepr_HSequenceOfRepresentationItem

        :type theOther: OCC.wrapper.StepRepr.StepRepr_SequenceOfRepresentationItem

        """
        this = _StepRepr.new_StepRepr_HSequenceOfRepresentationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.StepRepr.StepRepr_SequenceOfRepresentationItem

        """
        res = _StepRepr.StepRepr_HSequenceOfRepresentationItem_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(StepRepr_HSequenceOfRepresentationItem self, Handle_StepRepr_RepresentationItem theItem)
        Append(StepRepr_HSequenceOfRepresentationItem self, NCollection_Sequence_Handle_StepRepr_RepresentationItem theSequence)

        :type theSequence: OCC.wrapper.StepRepr.StepRepr_SequenceOfRepresentationItem

        """
        return _StepRepr.StepRepr_HSequenceOfRepresentationItem_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(StepRepr_HSequenceOfRepresentationItem self) -> NCollection_Sequence_Handle_StepRepr_RepresentationItem

        :rtype: OCC.wrapper.StepRepr.StepRepr_SequenceOfRepresentationItem

        """
        return _StepRepr.StepRepr_HSequenceOfRepresentationItem_ChangeSequence(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepRepr.StepRepr_HSequenceOfRepresentationItem_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepRepr.StepRepr_HSequenceOfRepresentationItem_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.StepRepr_HSequenceOfRepresentationItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepRepr.delete_StepRepr_HSequenceOfRepresentationItem
StepRepr_HSequenceOfRepresentationItem_swigregister = _StepRepr.StepRepr_HSequenceOfRepresentationItem_swigregister
StepRepr_HSequenceOfRepresentationItem_swigregister(StepRepr_HSequenceOfRepresentationItem)

def StepRepr_HSequenceOfRepresentationItem_get_type_name(*args):
    """
    StepRepr_HSequenceOfRepresentationItem_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepRepr.StepRepr_HSequenceOfRepresentationItem_get_type_name(*args)

def StepRepr_HSequenceOfRepresentationItem_get_type_descriptor(*args):
    """
    StepRepr_HSequenceOfRepresentationItem_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepRepr.StepRepr_HSequenceOfRepresentationItem_get_type_descriptor(*args)

class Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation self, StepRepr_HSequenceOfMaterialPropertyRepresentation thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation self, Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation theHandle) -> Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation
        assign(Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation self, StepRepr_HSequenceOfMaterialPropertyRepresentation thePtr) -> Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation
        assign(Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation self, Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation theHandle) -> Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation self) -> StepRepr_HSequenceOfMaterialPropertyRepresentation

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation self) -> StepRepr_HSequenceOfMaterialPropertyRepresentation

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation self) -> StepRepr_HSequenceOfMaterialPropertyRepresentation

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation

    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.StepRepr.StepRepr_SequenceOfMaterialPropertyRepresentation

        """
        res = _StepRepr.Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation self, Handle_StepRepr_MaterialPropertyRepresentation theItem)
        Append(Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation self, NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation theSequence)

        :type theSequence: OCC.wrapper.StepRepr.StepRepr_SequenceOfMaterialPropertyRepresentation

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation self) -> NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation

        :rtype: OCC.wrapper.StepRepr.StepRepr_SequenceOfMaterialPropertyRepresentation

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation_ChangeSequence(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation_DecrementRefCounter(self, *args)

Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation_swigregister = _StepRepr.Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation_swigregister
Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation_swigregister(Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation)

def Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation_DownCast(thing):
    return _StepRepr.Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation_DownCast(thing)
Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation_DownCast = _StepRepr.Handle_StepRepr_HSequenceOfMaterialPropertyRepresentation_DownCast

class Handle_StepRepr_CentreOfSymmetry(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_CentreOfSymmetry self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_CentreOfSymmetry_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_CentreOfSymmetry self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_CentreOfSymmetry_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_CentreOfSymmetry self, StepRepr_CentreOfSymmetry thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_CentreOfSymmetry_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_CentreOfSymmetry self, Handle_StepRepr_CentreOfSymmetry theHandle) -> Handle_StepRepr_CentreOfSymmetry
        assign(Handle_StepRepr_CentreOfSymmetry self, StepRepr_CentreOfSymmetry thePtr) -> Handle_StepRepr_CentreOfSymmetry
        assign(Handle_StepRepr_CentreOfSymmetry self, Handle_StepRepr_CentreOfSymmetry theHandle) -> Handle_StepRepr_CentreOfSymmetry

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_CentreOfSymmetry_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_CentreOfSymmetry self) -> StepRepr_CentreOfSymmetry

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_CentreOfSymmetry_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_CentreOfSymmetry self) -> StepRepr_CentreOfSymmetry

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_CentreOfSymmetry___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_CentreOfSymmetry self) -> StepRepr_CentreOfSymmetry

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_CentreOfSymmetry___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_CentreOfSymmetry___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_CentreOfSymmetry___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_CentreOfSymmetry(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_CentreOfSymmetry_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_CentreOfSymmetry

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_CentreOfSymmetry self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_CentreOfSymmetry_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_CentreOfSymmetry_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_CentreOfSymmetry_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepRepr_CentreOfSymmetry self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepRepr_ProductDefinitionShape aOfShape, StepData_Logical const aProductDefinitional)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape
        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_CentreOfSymmetry_Init(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_CentreOfSymmetry self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_CentreOfSymmetry_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_CentreOfSymmetry self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_CentreOfSymmetry_Name(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_CentreOfSymmetry self, Handle_TCollection_HAsciiString aDescription)

        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_CentreOfSymmetry_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_CentreOfSymmetry self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_CentreOfSymmetry_Description(self, *args)


    def SetOfShape(self, *args):
        """
        SetOfShape(Handle_StepRepr_CentreOfSymmetry self, Handle_StepRepr_ProductDefinitionShape aOfShape)

        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepRepr.Handle_StepRepr_CentreOfSymmetry_SetOfShape(self, *args)


    def OfShape(self, *args):
        """
        OfShape(Handle_StepRepr_CentreOfSymmetry self) -> Handle_StepRepr_ProductDefinitionShape

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepRepr.Handle_StepRepr_CentreOfSymmetry_OfShape(self, *args)


    def SetProductDefinitional(self, *args):
        """
        SetProductDefinitional(Handle_StepRepr_CentreOfSymmetry self, StepData_Logical const aProductDefinitional)

        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_CentreOfSymmetry_SetProductDefinitional(self, *args)


    def ProductDefinitional(self, *args):
        """
        ProductDefinitional(Handle_StepRepr_CentreOfSymmetry self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_CentreOfSymmetry_ProductDefinitional(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_CentreOfSymmetry self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_CentreOfSymmetry_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_CentreOfSymmetry self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_CentreOfSymmetry self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_CentreOfSymmetry_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_CentreOfSymmetry self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_CentreOfSymmetry self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_CentreOfSymmetry_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_CentreOfSymmetry self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_CentreOfSymmetry_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_CentreOfSymmetry self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_CentreOfSymmetry_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_CentreOfSymmetry self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_CentreOfSymmetry_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_CentreOfSymmetry self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_CentreOfSymmetry_DecrementRefCounter(self, *args)

Handle_StepRepr_CentreOfSymmetry_swigregister = _StepRepr.Handle_StepRepr_CentreOfSymmetry_swigregister
Handle_StepRepr_CentreOfSymmetry_swigregister(Handle_StepRepr_CentreOfSymmetry)

def Handle_StepRepr_CentreOfSymmetry_DownCast(thing):
    return _StepRepr.Handle_StepRepr_CentreOfSymmetry_DownCast(thing)
Handle_StepRepr_CentreOfSymmetry_DownCast = _StepRepr.Handle_StepRepr_CentreOfSymmetry_DownCast

class Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI self, StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI self, Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI theHandle) -> Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI
        assign(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI self, StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI thePtr) -> Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI
        assign(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI self, Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI theHandle) -> Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI self) -> StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI self) -> StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI self) -> StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI

    def SetPlaneAngleMeasureWithUnit(self, *args):
        """
        SetPlaneAngleMeasureWithUnit(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI self, Handle_StepBasic_PlaneAngleMeasureWithUnit aLMWU)

        :type aLMWU: OCC.wrapper.StepBasic.Handle_StepBasic_PlaneAngleMeasureWithUnit

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_SetPlaneAngleMeasureWithUnit(self, *args)


    def GetPlaneAngleMeasureWithUnit(self, *args):
        """
        GetPlaneAngleMeasureWithUnit(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI self) -> Handle_StepBasic_PlaneAngleMeasureWithUnit

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_PlaneAngleMeasureWithUnit

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_GetPlaneAngleMeasureWithUnit(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI self, Handle_StepBasic_MeasureWithUnit aMWU, Handle_StepRepr_RepresentationItem aRI, Handle_StepShape_QualifiedRepresentationItem aQRI)

        :type aMWU: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type aRI: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem
        :type aQRI: OCC.wrapper.StepRepr.Handle_StepShape_QualifiedRepresentationItem

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_Init(self, *args)


    def SetQualifiedRepresentationItem(self, *args):
        """
        SetQualifiedRepresentationItem(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI self, Handle_StepShape_QualifiedRepresentationItem aQRI)

        :type aQRI: OCC.wrapper.StepRepr.Handle_StepShape_QualifiedRepresentationItem

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_SetQualifiedRepresentationItem(self, *args)


    def GetQualifiedRepresentationItem(self, *args):
        """
        GetQualifiedRepresentationItem(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI self) -> Handle_StepShape_QualifiedRepresentationItem

        :rtype: OCC.wrapper.StepRepr.Handle_StepShape_QualifiedRepresentationItem

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_GetQualifiedRepresentationItem(self, *args)


    def GetMeasureRepresentationItem(self, *args):
        """
        GetMeasureRepresentationItem(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI self) -> Handle_StepRepr_MeasureRepresentationItem

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_MeasureRepresentationItem

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_GetMeasureRepresentationItem(self, *args)


    def SetMeasureWithUnit(self, *args):
        """
        SetMeasureWithUnit(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI self, Handle_StepBasic_MeasureWithUnit aMWU)

        :type aMWU: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_SetMeasureWithUnit(self, *args)


    def GetMeasureWithUnit(self, *args):
        """
        GetMeasureWithUnit(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI self) -> Handle_StepBasic_MeasureWithUnit

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_GetMeasureWithUnit(self, *args)


    def GetRepresentationItem(self, *args):
        """
        GetRepresentationItem(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI self) -> Handle_StepRepr_RepresentationItem

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_GetRepresentationItem(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_DecrementRefCounter(self, *args)

Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_swigregister = _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_swigregister
Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_swigregister(Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI)

def Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_DownCast(thing):
    return _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_DownCast(thing)
Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_DownCast = _StepRepr.Handle_StepRepr_ReprItemAndPlaneAngleMeasureWithUnitAndQRI_DownCast

class Handle_StepRepr_FunctionallyDefinedTransformation(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_FunctionallyDefinedTransformation self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_FunctionallyDefinedTransformation_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_FunctionallyDefinedTransformation self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_FunctionallyDefinedTransformation_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_FunctionallyDefinedTransformation self, StepRepr_FunctionallyDefinedTransformation thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_FunctionallyDefinedTransformation_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_FunctionallyDefinedTransformation self, Handle_StepRepr_FunctionallyDefinedTransformation theHandle) -> Handle_StepRepr_FunctionallyDefinedTransformation
        assign(Handle_StepRepr_FunctionallyDefinedTransformation self, StepRepr_FunctionallyDefinedTransformation thePtr) -> Handle_StepRepr_FunctionallyDefinedTransformation
        assign(Handle_StepRepr_FunctionallyDefinedTransformation self, Handle_StepRepr_FunctionallyDefinedTransformation theHandle) -> Handle_StepRepr_FunctionallyDefinedTransformation

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_FunctionallyDefinedTransformation_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_FunctionallyDefinedTransformation self) -> StepRepr_FunctionallyDefinedTransformation

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_FunctionallyDefinedTransformation_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_FunctionallyDefinedTransformation self) -> StepRepr_FunctionallyDefinedTransformation

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_FunctionallyDefinedTransformation___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_FunctionallyDefinedTransformation self) -> StepRepr_FunctionallyDefinedTransformation

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_FunctionallyDefinedTransformation___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_FunctionallyDefinedTransformation___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_FunctionallyDefinedTransformation___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_FunctionallyDefinedTransformation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_FunctionallyDefinedTransformation_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_FunctionallyDefinedTransformation

    def Init(self, *args):
        """
        Init(Handle_StepRepr_FunctionallyDefinedTransformation self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_FunctionallyDefinedTransformation_Init(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_FunctionallyDefinedTransformation self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_FunctionallyDefinedTransformation_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_FunctionallyDefinedTransformation self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_FunctionallyDefinedTransformation_Name(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_FunctionallyDefinedTransformation self, Handle_TCollection_HAsciiString aDescription)

        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_FunctionallyDefinedTransformation_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_FunctionallyDefinedTransformation self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_FunctionallyDefinedTransformation_Description(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_FunctionallyDefinedTransformation self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_FunctionallyDefinedTransformation_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_FunctionallyDefinedTransformation_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_FunctionallyDefinedTransformation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_FunctionallyDefinedTransformation self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_FunctionallyDefinedTransformation_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_FunctionallyDefinedTransformation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_FunctionallyDefinedTransformation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_FunctionallyDefinedTransformation_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_FunctionallyDefinedTransformation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_FunctionallyDefinedTransformation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_FunctionallyDefinedTransformation_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_FunctionallyDefinedTransformation self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_FunctionallyDefinedTransformation_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_FunctionallyDefinedTransformation self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_FunctionallyDefinedTransformation_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_FunctionallyDefinedTransformation self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_FunctionallyDefinedTransformation_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_FunctionallyDefinedTransformation self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_FunctionallyDefinedTransformation_DecrementRefCounter(self, *args)

Handle_StepRepr_FunctionallyDefinedTransformation_swigregister = _StepRepr.Handle_StepRepr_FunctionallyDefinedTransformation_swigregister
Handle_StepRepr_FunctionallyDefinedTransformation_swigregister(Handle_StepRepr_FunctionallyDefinedTransformation)

def Handle_StepRepr_FunctionallyDefinedTransformation_DownCast(thing):
    return _StepRepr.Handle_StepRepr_FunctionallyDefinedTransformation_DownCast(thing)
Handle_StepRepr_FunctionallyDefinedTransformation_DownCast = _StepRepr.Handle_StepRepr_FunctionallyDefinedTransformation_DownCast

class Handle_StepRepr_Extension(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_Extension self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_Extension_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_Extension self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_Extension_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_Extension self, StepRepr_Extension thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_Extension_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_Extension self, Handle_StepRepr_Extension theHandle) -> Handle_StepRepr_Extension
        assign(Handle_StepRepr_Extension self, StepRepr_Extension thePtr) -> Handle_StepRepr_Extension
        assign(Handle_StepRepr_Extension self, Handle_StepRepr_Extension theHandle) -> Handle_StepRepr_Extension

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_Extension_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_Extension self) -> StepRepr_Extension

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_Extension_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_Extension self) -> StepRepr_Extension

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_Extension___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_Extension self) -> StepRepr_Extension

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_Extension___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_Extension___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_Extension___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_Extension(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_Extension_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_Extension

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_Extension self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_Extension_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_Extension_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_Extension_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepRepr_Extension self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepRepr_ProductDefinitionShape aOfShape, StepData_Logical const aProductDefinitional)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape
        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_Extension_Init(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_Extension self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_Extension_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_Extension self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_Extension_Name(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_Extension self, Handle_TCollection_HAsciiString aDescription)

        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_Extension_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_Extension self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_Extension_Description(self, *args)


    def SetOfShape(self, *args):
        """
        SetOfShape(Handle_StepRepr_Extension self, Handle_StepRepr_ProductDefinitionShape aOfShape)

        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepRepr.Handle_StepRepr_Extension_SetOfShape(self, *args)


    def OfShape(self, *args):
        """
        OfShape(Handle_StepRepr_Extension self) -> Handle_StepRepr_ProductDefinitionShape

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepRepr.Handle_StepRepr_Extension_OfShape(self, *args)


    def SetProductDefinitional(self, *args):
        """
        SetProductDefinitional(Handle_StepRepr_Extension self, StepData_Logical const aProductDefinitional)

        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_Extension_SetProductDefinitional(self, *args)


    def ProductDefinitional(self, *args):
        """
        ProductDefinitional(Handle_StepRepr_Extension self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_Extension_ProductDefinitional(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_Extension self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_Extension_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_Extension self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_Extension self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_Extension_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_Extension self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_Extension self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_Extension_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_Extension self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_Extension_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_Extension self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_Extension_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_Extension self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_Extension_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_Extension self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_Extension_DecrementRefCounter(self, *args)

Handle_StepRepr_Extension_swigregister = _StepRepr.Handle_StepRepr_Extension_swigregister
Handle_StepRepr_Extension_swigregister(Handle_StepRepr_Extension)

def Handle_StepRepr_Extension_DownCast(thing):
    return _StepRepr.Handle_StepRepr_Extension_DownCast(thing)
Handle_StepRepr_Extension_DownCast = _StepRepr.Handle_StepRepr_Extension_DownCast

class Handle_StepRepr_PromissoryUsageOccurrence(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_PromissoryUsageOccurrence self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_PromissoryUsageOccurrence_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_PromissoryUsageOccurrence self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_PromissoryUsageOccurrence_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_PromissoryUsageOccurrence self, StepRepr_PromissoryUsageOccurrence thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_PromissoryUsageOccurrence_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_PromissoryUsageOccurrence self, Handle_StepRepr_PromissoryUsageOccurrence theHandle) -> Handle_StepRepr_PromissoryUsageOccurrence
        assign(Handle_StepRepr_PromissoryUsageOccurrence self, StepRepr_PromissoryUsageOccurrence thePtr) -> Handle_StepRepr_PromissoryUsageOccurrence
        assign(Handle_StepRepr_PromissoryUsageOccurrence self, Handle_StepRepr_PromissoryUsageOccurrence theHandle) -> Handle_StepRepr_PromissoryUsageOccurrence

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_PromissoryUsageOccurrence_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_PromissoryUsageOccurrence self) -> StepRepr_PromissoryUsageOccurrence

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_PromissoryUsageOccurrence_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_PromissoryUsageOccurrence self) -> StepRepr_PromissoryUsageOccurrence

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_PromissoryUsageOccurrence___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_PromissoryUsageOccurrence self) -> StepRepr_PromissoryUsageOccurrence

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_PromissoryUsageOccurrence___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_PromissoryUsageOccurrence___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_PromissoryUsageOccurrence___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_PromissoryUsageOccurrence(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_PromissoryUsageOccurrence_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_PromissoryUsageOccurrence

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_PromissoryUsageOccurrence self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_PromissoryUsageOccurrence_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_PromissoryUsageOccurrence_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_PromissoryUsageOccurrence_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepRepr_PromissoryUsageOccurrence self, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Id, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Name, Standard_Boolean const hasProductDefinitionRelationship_Description, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Description, Handle_StepBasic_ProductDefinition aProductDefinitionRelationship_RelatingProductDefinition, Handle_StepBasic_ProductDefinition aProductDefinitionRelationship_RelatedProductDefinition, Standard_Boolean const hasReferenceDesignator, Handle_TCollection_HAsciiString aReferenceDesignator)
        Init(Handle_StepRepr_PromissoryUsageOccurrence self, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Id, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Name, Standard_Boolean const hasProductDefinitionRelationship_Description, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Description, StepBasic_ProductDefinitionOrReference aProductDefinitionRelationship_RelatingProductDefinition, StepBasic_ProductDefinitionOrReference aProductDefinitionRelationship_RelatedProductDefinition, Standard_Boolean const hasReferenceDesignator, Handle_TCollection_HAsciiString aReferenceDesignator)

        Initialize all fields (own and inherited)

        :type aProductDefinitionRelationship_Id: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aProductDefinitionRelationship_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type hasProductDefinitionRelationship_Description: bool
        :type aProductDefinitionRelationship_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aProductDefinitionRelationship_RelatingProductDefinition: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference
        :type aProductDefinitionRelationship_RelatedProductDefinition: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference
        :type hasReferenceDesignator: bool
        :type aReferenceDesignator: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_PromissoryUsageOccurrence_Init(self, *args)


    def ReferenceDesignator(self, *args):
        """
        ReferenceDesignator(Handle_StepRepr_PromissoryUsageOccurrence self) -> Handle_TCollection_HAsciiString

        Returns field ReferenceDesignator

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_PromissoryUsageOccurrence_ReferenceDesignator(self, *args)


    def SetReferenceDesignator(self, *args):
        """
        SetReferenceDesignator(Handle_StepRepr_PromissoryUsageOccurrence self, Handle_TCollection_HAsciiString ReferenceDesignator)

        Set field ReferenceDesignator

        :type ReferenceDesignator: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_PromissoryUsageOccurrence_SetReferenceDesignator(self, *args)


    def HasReferenceDesignator(self, *args):
        """
        HasReferenceDesignator(Handle_StepRepr_PromissoryUsageOccurrence self) -> Standard_Boolean

        Returns True if optional field ReferenceDesignator is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_PromissoryUsageOccurrence_HasReferenceDesignator(self, *args)


    def Id(self, *args):
        """
        Id(Handle_StepRepr_PromissoryUsageOccurrence self) -> Handle_TCollection_HAsciiString

        Returns field Id

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_PromissoryUsageOccurrence_Id(self, *args)


    def SetId(self, *args):
        """
        SetId(Handle_StepRepr_PromissoryUsageOccurrence self, Handle_TCollection_HAsciiString Id)

        Set field Id

        :type Id: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_PromissoryUsageOccurrence_SetId(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_PromissoryUsageOccurrence self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_PromissoryUsageOccurrence_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_PromissoryUsageOccurrence self, Handle_TCollection_HAsciiString Name)

        Set field Name

        :type Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_PromissoryUsageOccurrence_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_PromissoryUsageOccurrence self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_PromissoryUsageOccurrence_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_PromissoryUsageOccurrence self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_PromissoryUsageOccurrence_SetDescription(self, *args)


    def HasDescription(self, *args):
        """
        HasDescription(Handle_StepRepr_PromissoryUsageOccurrence self) -> Standard_Boolean

        Returns True if optional field Description is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_PromissoryUsageOccurrence_HasDescription(self, *args)


    def RelatingProductDefinition(self, *args):
        """
        RelatingProductDefinition(Handle_StepRepr_PromissoryUsageOccurrence self) -> Handle_StepBasic_ProductDefinition

        Returns field RelatingProductDefinition

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinition

        """
        return _StepRepr.Handle_StepRepr_PromissoryUsageOccurrence_RelatingProductDefinition(self, *args)


    def RelatingProductDefinitionAP242(self, *args):
        """
        RelatingProductDefinitionAP242(Handle_StepRepr_PromissoryUsageOccurrence self) -> StepBasic_ProductDefinitionOrReference

        Returns field RelatingProductDefinition in AP242

        :rtype: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference

        """
        return _StepRepr.Handle_StepRepr_PromissoryUsageOccurrence_RelatingProductDefinitionAP242(self, *args)


    def SetRelatingProductDefinition(self, *args):
        """
        SetRelatingProductDefinition(Handle_StepRepr_PromissoryUsageOccurrence self, Handle_StepBasic_ProductDefinition RelatingProductDefinition)
        SetRelatingProductDefinition(Handle_StepRepr_PromissoryUsageOccurrence self, StepBasic_ProductDefinitionOrReference RelatingProductDefinition)

        Set field RelatingProductDefinition in AP242

        :type RelatingProductDefinition: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference

        """
        return _StepRepr.Handle_StepRepr_PromissoryUsageOccurrence_SetRelatingProductDefinition(self, *args)


    def RelatedProductDefinition(self, *args):
        """
        RelatedProductDefinition(Handle_StepRepr_PromissoryUsageOccurrence self) -> Handle_StepBasic_ProductDefinition

        Returns field RelatedProductDefinition

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinition

        """
        return _StepRepr.Handle_StepRepr_PromissoryUsageOccurrence_RelatedProductDefinition(self, *args)


    def RelatedProductDefinitionAP242(self, *args):
        """
        RelatedProductDefinitionAP242(Handle_StepRepr_PromissoryUsageOccurrence self) -> StepBasic_ProductDefinitionOrReference

        Returns field RelatedProductDefinition in AP242

        :rtype: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference

        """
        return _StepRepr.Handle_StepRepr_PromissoryUsageOccurrence_RelatedProductDefinitionAP242(self, *args)


    def SetRelatedProductDefinition(self, *args):
        """
        SetRelatedProductDefinition(Handle_StepRepr_PromissoryUsageOccurrence self, Handle_StepBasic_ProductDefinition RelatedProductDefinition)
        SetRelatedProductDefinition(Handle_StepRepr_PromissoryUsageOccurrence self, StepBasic_ProductDefinitionOrReference RelatedProductDefinition)

        Set field RelatedProductDefinition in AP242

        :type RelatedProductDefinition: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference

        """
        return _StepRepr.Handle_StepRepr_PromissoryUsageOccurrence_SetRelatedProductDefinition(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_PromissoryUsageOccurrence self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_PromissoryUsageOccurrence_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_PromissoryUsageOccurrence self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_PromissoryUsageOccurrence self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_PromissoryUsageOccurrence_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_PromissoryUsageOccurrence self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_PromissoryUsageOccurrence self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_PromissoryUsageOccurrence_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_PromissoryUsageOccurrence self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_PromissoryUsageOccurrence_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_PromissoryUsageOccurrence self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_PromissoryUsageOccurrence_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_PromissoryUsageOccurrence self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_PromissoryUsageOccurrence_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_PromissoryUsageOccurrence self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_PromissoryUsageOccurrence_DecrementRefCounter(self, *args)

Handle_StepRepr_PromissoryUsageOccurrence_swigregister = _StepRepr.Handle_StepRepr_PromissoryUsageOccurrence_swigregister
Handle_StepRepr_PromissoryUsageOccurrence_swigregister(Handle_StepRepr_PromissoryUsageOccurrence)

def Handle_StepRepr_PromissoryUsageOccurrence_DownCast(thing):
    return _StepRepr.Handle_StepRepr_PromissoryUsageOccurrence_DownCast(thing)
Handle_StepRepr_PromissoryUsageOccurrence_DownCast = _StepRepr.Handle_StepRepr_PromissoryUsageOccurrence_DownCast

class Handle_StepRepr_ValueRange(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_ValueRange self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_ValueRange_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_ValueRange self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_ValueRange_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_ValueRange self, StepRepr_ValueRange thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_ValueRange_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_ValueRange self, Handle_StepRepr_ValueRange theHandle) -> Handle_StepRepr_ValueRange
        assign(Handle_StepRepr_ValueRange self, StepRepr_ValueRange thePtr) -> Handle_StepRepr_ValueRange
        assign(Handle_StepRepr_ValueRange self, Handle_StepRepr_ValueRange theHandle) -> Handle_StepRepr_ValueRange

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_ValueRange_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_ValueRange self) -> StepRepr_ValueRange

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ValueRange_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_ValueRange self) -> StepRepr_ValueRange

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ValueRange___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_ValueRange self) -> StepRepr_ValueRange

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_ValueRange___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_ValueRange___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_ValueRange___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_ValueRange(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_ValueRange_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_ValueRange

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_ValueRange self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_ValueRange_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ValueRange_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ValueRange_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepRepr_ValueRange self, Handle_TCollection_HAsciiString aName, Handle_StepRepr_HArray1OfRepresentationItem item_element)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type item_element: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfRepresentationItem

        """
        return _StepRepr.Handle_StepRepr_ValueRange_Init(self, *args)


    def ItemElement(self, *args):
        """
        ItemElement(Handle_StepRepr_ValueRange self) -> Handle_StepRepr_HArray1OfRepresentationItem

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfRepresentationItem

        """
        return _StepRepr.Handle_StepRepr_ValueRange_ItemElement(self, *args)


    def NbItemElement(self, *args):
        """
        NbItemElement(Handle_StepRepr_ValueRange self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ValueRange_NbItemElement(self, *args)


    def SetItemElement(self, *args):
        """
        SetItemElement(Handle_StepRepr_ValueRange self, Handle_StepRepr_HArray1OfRepresentationItem item_element)

        :type item_element: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfRepresentationItem

        """
        return _StepRepr.Handle_StepRepr_ValueRange_SetItemElement(self, *args)


    def ItemElementValue(self, *args):
        """
        ItemElementValue(Handle_StepRepr_ValueRange self, Standard_Integer const num) -> Handle_StepRepr_RepresentationItem

        :type num: int
        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepRepr.Handle_StepRepr_ValueRange_ItemElementValue(self, *args)


    def SetItemElementValue(self, *args):
        """
        SetItemElementValue(Handle_StepRepr_ValueRange self, Standard_Integer const num, Handle_StepRepr_RepresentationItem anelement)

        :type num: int
        :type anelement: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepRepr.Handle_StepRepr_ValueRange_SetItemElementValue(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_ValueRange self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ValueRange_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_ValueRange self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ValueRange_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_ValueRange self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_ValueRange_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_ValueRange self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_ValueRange self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ValueRange_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_ValueRange self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_ValueRange self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ValueRange_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_ValueRange self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_ValueRange_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_ValueRange self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ValueRange_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_ValueRange self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_ValueRange_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_ValueRange self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ValueRange_DecrementRefCounter(self, *args)

Handle_StepRepr_ValueRange_swigregister = _StepRepr.Handle_StepRepr_ValueRange_swigregister
Handle_StepRepr_ValueRange_swigregister(Handle_StepRepr_ValueRange)

def Handle_StepRepr_ValueRange_DownCast(thing):
    return _StepRepr.Handle_StepRepr_ValueRange_DownCast(thing)
Handle_StepRepr_ValueRange_DownCast = _StepRepr.Handle_StepRepr_ValueRange_DownCast

class Handle_StepRepr_ItemDefinedTransformation(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_ItemDefinedTransformation self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_ItemDefinedTransformation_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_ItemDefinedTransformation self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_ItemDefinedTransformation_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_ItemDefinedTransformation self, StepRepr_ItemDefinedTransformation thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_ItemDefinedTransformation_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_ItemDefinedTransformation self, Handle_StepRepr_ItemDefinedTransformation theHandle) -> Handle_StepRepr_ItemDefinedTransformation
        assign(Handle_StepRepr_ItemDefinedTransformation self, StepRepr_ItemDefinedTransformation thePtr) -> Handle_StepRepr_ItemDefinedTransformation
        assign(Handle_StepRepr_ItemDefinedTransformation self, Handle_StepRepr_ItemDefinedTransformation theHandle) -> Handle_StepRepr_ItemDefinedTransformation

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_ItemDefinedTransformation_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_ItemDefinedTransformation self) -> StepRepr_ItemDefinedTransformation

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ItemDefinedTransformation_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_ItemDefinedTransformation self) -> StepRepr_ItemDefinedTransformation

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ItemDefinedTransformation___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_ItemDefinedTransformation self) -> StepRepr_ItemDefinedTransformation

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_ItemDefinedTransformation___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_ItemDefinedTransformation___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_ItemDefinedTransformation___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_ItemDefinedTransformation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_ItemDefinedTransformation_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_ItemDefinedTransformation

    def Init(self, *args):
        """
        Init(Handle_StepRepr_ItemDefinedTransformation self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepRepr_RepresentationItem aTransformItem1, Handle_StepRepr_RepresentationItem aTransformItem2)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aTransformItem1: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem
        :type aTransformItem2: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepRepr.Handle_StepRepr_ItemDefinedTransformation_Init(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_ItemDefinedTransformation self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ItemDefinedTransformation_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_ItemDefinedTransformation self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ItemDefinedTransformation_Name(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_ItemDefinedTransformation self, Handle_TCollection_HAsciiString aDescription)

        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ItemDefinedTransformation_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_ItemDefinedTransformation self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ItemDefinedTransformation_Description(self, *args)


    def SetTransformItem1(self, *args):
        """
        SetTransformItem1(Handle_StepRepr_ItemDefinedTransformation self, Handle_StepRepr_RepresentationItem aItem)

        :type aItem: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepRepr.Handle_StepRepr_ItemDefinedTransformation_SetTransformItem1(self, *args)


    def TransformItem1(self, *args):
        """
        TransformItem1(Handle_StepRepr_ItemDefinedTransformation self) -> Handle_StepRepr_RepresentationItem

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepRepr.Handle_StepRepr_ItemDefinedTransformation_TransformItem1(self, *args)


    def SetTransformItem2(self, *args):
        """
        SetTransformItem2(Handle_StepRepr_ItemDefinedTransformation self, Handle_StepRepr_RepresentationItem aItem)

        :type aItem: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepRepr.Handle_StepRepr_ItemDefinedTransformation_SetTransformItem2(self, *args)


    def TransformItem2(self, *args):
        """
        TransformItem2(Handle_StepRepr_ItemDefinedTransformation self) -> Handle_StepRepr_RepresentationItem

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepRepr.Handle_StepRepr_ItemDefinedTransformation_TransformItem2(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_ItemDefinedTransformation self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_ItemDefinedTransformation_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ItemDefinedTransformation_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ItemDefinedTransformation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_ItemDefinedTransformation self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_ItemDefinedTransformation_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_ItemDefinedTransformation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_ItemDefinedTransformation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ItemDefinedTransformation_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_ItemDefinedTransformation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_ItemDefinedTransformation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ItemDefinedTransformation_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_ItemDefinedTransformation self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_ItemDefinedTransformation_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_ItemDefinedTransformation self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ItemDefinedTransformation_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_ItemDefinedTransformation self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_ItemDefinedTransformation_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_ItemDefinedTransformation self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ItemDefinedTransformation_DecrementRefCounter(self, *args)

Handle_StepRepr_ItemDefinedTransformation_swigregister = _StepRepr.Handle_StepRepr_ItemDefinedTransformation_swigregister
Handle_StepRepr_ItemDefinedTransformation_swigregister(Handle_StepRepr_ItemDefinedTransformation)

def Handle_StepRepr_ItemDefinedTransformation_DownCast(thing):
    return _StepRepr.Handle_StepRepr_ItemDefinedTransformation_DownCast(thing)
Handle_StepRepr_ItemDefinedTransformation_DownCast = _StepRepr.Handle_StepRepr_ItemDefinedTransformation_DownCast

class StepRepr_ConfigurationDesignItem(StepData.StepData_SelectType):
    """Representation of STEP SELECT type ConfigurationDesignItem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepRepr_ConfigurationDesignItem self) -> StepRepr_ConfigurationDesignItem

        Empty constructor


        """
        this = _StepRepr.new_StepRepr_ConfigurationDesignItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepRepr_ConfigurationDesignItem self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a kind of ConfigurationDesignItem select type
        1 -> ProductDefinition from StepBasic
        2 -> ProductDefinitionFormation from StepBasic
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.StepRepr_ConfigurationDesignItem_CaseNum(self, *args)


    def ProductDefinition(self, *args):
        """
        ProductDefinition(StepRepr_ConfigurationDesignItem self) -> Handle_StepBasic_ProductDefinition

        Returns Value as ProductDefinition (or Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinition

        """
        return _StepRepr.StepRepr_ConfigurationDesignItem_ProductDefinition(self, *args)


    def ProductDefinitionFormation(self, *args):
        """
        ProductDefinitionFormation(StepRepr_ConfigurationDesignItem self) -> Handle_StepBasic_ProductDefinitionFormation

        Returns Value as ProductDefinitionFormation (or Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionFormation

        """
        return _StepRepr.StepRepr_ConfigurationDesignItem_ProductDefinitionFormation(self, *args)

    __swig_destroy__ = _StepRepr.delete_StepRepr_ConfigurationDesignItem
StepRepr_ConfigurationDesignItem_swigregister = _StepRepr.StepRepr_ConfigurationDesignItem_swigregister
StepRepr_ConfigurationDesignItem_swigregister(StepRepr_ConfigurationDesignItem)

class Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp self, StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp self, Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp theHandle) -> Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp
        assign(Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp self, StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp thePtr) -> Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp
        assign(Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp self, Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp theHandle) -> Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp self) -> StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp self) -> StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp self) -> StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepRepr_ProductDefinitionShape aOfShape, StepData_Logical const aProductDefinitional)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape
        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_Init(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_Name(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp self, Handle_TCollection_HAsciiString aDescription)

        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_Description(self, *args)


    def SetOfShape(self, *args):
        """
        SetOfShape(Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp self, Handle_StepRepr_ProductDefinitionShape aOfShape)

        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepRepr.Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_SetOfShape(self, *args)


    def OfShape(self, *args):
        """
        OfShape(Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp self) -> Handle_StepRepr_ProductDefinitionShape

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepRepr.Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_OfShape(self, *args)


    def SetProductDefinitional(self, *args):
        """
        SetProductDefinitional(Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp self, StepData_Logical const aProductDefinitional)

        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_SetProductDefinitional(self, *args)


    def ProductDefinitional(self, *args):
        """
        ProductDefinitional(Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_ProductDefinitional(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_DecrementRefCounter(self, *args)

Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_swigregister = _StepRepr.Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_swigregister
Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_swigregister(Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp)

def Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_DownCast(thing):
    return _StepRepr.Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_DownCast(thing)
Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_DownCast = _StepRepr.Handle_StepRepr_CompGroupShAspAndCompShAspAndDatumFeatAndShAsp_DownCast

class Handle_StepRepr_AssemblyComponentUsage(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_AssemblyComponentUsage self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsage_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_AssemblyComponentUsage self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsage_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_AssemblyComponentUsage self, StepRepr_AssemblyComponentUsage thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsage_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_AssemblyComponentUsage self, Handle_StepRepr_AssemblyComponentUsage theHandle) -> Handle_StepRepr_AssemblyComponentUsage
        assign(Handle_StepRepr_AssemblyComponentUsage self, StepRepr_AssemblyComponentUsage thePtr) -> Handle_StepRepr_AssemblyComponentUsage
        assign(Handle_StepRepr_AssemblyComponentUsage self, Handle_StepRepr_AssemblyComponentUsage theHandle) -> Handle_StepRepr_AssemblyComponentUsage

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsage_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_AssemblyComponentUsage self) -> StepRepr_AssemblyComponentUsage

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsage_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_AssemblyComponentUsage self) -> StepRepr_AssemblyComponentUsage

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsage___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_AssemblyComponentUsage self) -> StepRepr_AssemblyComponentUsage

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsage___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsage___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_AssemblyComponentUsage___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_AssemblyComponentUsage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_AssemblyComponentUsage_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_AssemblyComponentUsage

    def Init(self, *args):
        """
        Init(Handle_StepRepr_AssemblyComponentUsage self, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Id, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Name, Standard_Boolean const hasProductDefinitionRelationship_Description, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Description, Handle_StepBasic_ProductDefinition aProductDefinitionRelationship_RelatingProductDefinition, Handle_StepBasic_ProductDefinition aProductDefinitionRelationship_RelatedProductDefinition, Standard_Boolean const hasReferenceDesignator, Handle_TCollection_HAsciiString aReferenceDesignator)
        Init(Handle_StepRepr_AssemblyComponentUsage self, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Id, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Name, Standard_Boolean const hasProductDefinitionRelationship_Description, Handle_TCollection_HAsciiString aProductDefinitionRelationship_Description, StepBasic_ProductDefinitionOrReference aProductDefinitionRelationship_RelatingProductDefinition, StepBasic_ProductDefinitionOrReference aProductDefinitionRelationship_RelatedProductDefinition, Standard_Boolean const hasReferenceDesignator, Handle_TCollection_HAsciiString aReferenceDesignator)

        Initialize all fields (own and inherited)

        :type aProductDefinitionRelationship_Id: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aProductDefinitionRelationship_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type hasProductDefinitionRelationship_Description: bool
        :type aProductDefinitionRelationship_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aProductDefinitionRelationship_RelatingProductDefinition: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference
        :type aProductDefinitionRelationship_RelatedProductDefinition: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference
        :type hasReferenceDesignator: bool
        :type aReferenceDesignator: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsage_Init(self, *args)


    def ReferenceDesignator(self, *args):
        """
        ReferenceDesignator(Handle_StepRepr_AssemblyComponentUsage self) -> Handle_TCollection_HAsciiString

        Returns field ReferenceDesignator

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsage_ReferenceDesignator(self, *args)


    def SetReferenceDesignator(self, *args):
        """
        SetReferenceDesignator(Handle_StepRepr_AssemblyComponentUsage self, Handle_TCollection_HAsciiString ReferenceDesignator)

        Set field ReferenceDesignator

        :type ReferenceDesignator: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsage_SetReferenceDesignator(self, *args)


    def HasReferenceDesignator(self, *args):
        """
        HasReferenceDesignator(Handle_StepRepr_AssemblyComponentUsage self) -> Standard_Boolean

        Returns True if optional field ReferenceDesignator is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsage_HasReferenceDesignator(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_AssemblyComponentUsage self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsage_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_AssemblyComponentUsage_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_AssemblyComponentUsage_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Id(self, *args):
        """
        Id(Handle_StepRepr_AssemblyComponentUsage self) -> Handle_TCollection_HAsciiString

        Returns field Id

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsage_Id(self, *args)


    def SetId(self, *args):
        """
        SetId(Handle_StepRepr_AssemblyComponentUsage self, Handle_TCollection_HAsciiString Id)

        Set field Id

        :type Id: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsage_SetId(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_AssemblyComponentUsage self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsage_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_AssemblyComponentUsage self, Handle_TCollection_HAsciiString Name)

        Set field Name

        :type Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsage_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_AssemblyComponentUsage self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsage_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_AssemblyComponentUsage self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsage_SetDescription(self, *args)


    def HasDescription(self, *args):
        """
        HasDescription(Handle_StepRepr_AssemblyComponentUsage self) -> Standard_Boolean

        Returns True if optional field Description is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsage_HasDescription(self, *args)


    def RelatingProductDefinition(self, *args):
        """
        RelatingProductDefinition(Handle_StepRepr_AssemblyComponentUsage self) -> Handle_StepBasic_ProductDefinition

        Returns field RelatingProductDefinition

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinition

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsage_RelatingProductDefinition(self, *args)


    def RelatingProductDefinitionAP242(self, *args):
        """
        RelatingProductDefinitionAP242(Handle_StepRepr_AssemblyComponentUsage self) -> StepBasic_ProductDefinitionOrReference

        Returns field RelatingProductDefinition in AP242

        :rtype: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsage_RelatingProductDefinitionAP242(self, *args)


    def SetRelatingProductDefinition(self, *args):
        """
        SetRelatingProductDefinition(Handle_StepRepr_AssemblyComponentUsage self, Handle_StepBasic_ProductDefinition RelatingProductDefinition)
        SetRelatingProductDefinition(Handle_StepRepr_AssemblyComponentUsage self, StepBasic_ProductDefinitionOrReference RelatingProductDefinition)

        Set field RelatingProductDefinition in AP242

        :type RelatingProductDefinition: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsage_SetRelatingProductDefinition(self, *args)


    def RelatedProductDefinition(self, *args):
        """
        RelatedProductDefinition(Handle_StepRepr_AssemblyComponentUsage self) -> Handle_StepBasic_ProductDefinition

        Returns field RelatedProductDefinition

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinition

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsage_RelatedProductDefinition(self, *args)


    def RelatedProductDefinitionAP242(self, *args):
        """
        RelatedProductDefinitionAP242(Handle_StepRepr_AssemblyComponentUsage self) -> StepBasic_ProductDefinitionOrReference

        Returns field RelatedProductDefinition in AP242

        :rtype: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsage_RelatedProductDefinitionAP242(self, *args)


    def SetRelatedProductDefinition(self, *args):
        """
        SetRelatedProductDefinition(Handle_StepRepr_AssemblyComponentUsage self, Handle_StepBasic_ProductDefinition RelatedProductDefinition)
        SetRelatedProductDefinition(Handle_StepRepr_AssemblyComponentUsage self, StepBasic_ProductDefinitionOrReference RelatedProductDefinition)

        Set field RelatedProductDefinition in AP242

        :type RelatedProductDefinition: OCC.wrapper.StepBasic.StepBasic_ProductDefinitionOrReference

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsage_SetRelatedProductDefinition(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_AssemblyComponentUsage self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsage_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_AssemblyComponentUsage self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_AssemblyComponentUsage self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsage_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_AssemblyComponentUsage self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_AssemblyComponentUsage self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsage_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_AssemblyComponentUsage self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsage_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_AssemblyComponentUsage self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsage_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_AssemblyComponentUsage self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsage_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_AssemblyComponentUsage self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_AssemblyComponentUsage_DecrementRefCounter(self, *args)

Handle_StepRepr_AssemblyComponentUsage_swigregister = _StepRepr.Handle_StepRepr_AssemblyComponentUsage_swigregister
Handle_StepRepr_AssemblyComponentUsage_swigregister(Handle_StepRepr_AssemblyComponentUsage)

def Handle_StepRepr_AssemblyComponentUsage_DownCast(thing):
    return _StepRepr.Handle_StepRepr_AssemblyComponentUsage_DownCast(thing)
Handle_StepRepr_AssemblyComponentUsage_DownCast = _StepRepr.Handle_StepRepr_AssemblyComponentUsage_DownCast

class Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation self, StepRepr_ShapeRepresentationRelationshipWithTransformation thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation self, Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation theHandle) -> Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation
        assign(Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation self, StepRepr_ShapeRepresentationRelationshipWithTransformation thePtr) -> Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation
        assign(Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation self, Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation theHandle) -> Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation self) -> StepRepr_ShapeRepresentationRelationshipWithTransformation

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation self) -> StepRepr_ShapeRepresentationRelationshipWithTransformation

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation self) -> StepRepr_ShapeRepresentationRelationshipWithTransformation

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepRepr_Representation aRep1, Handle_StepRepr_Representation aRep2, StepRepr_Transformation aTransf)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aRep1: OCC.wrapper.StepRepr.Handle_StepRepr_Representation
        :type aRep2: OCC.wrapper.StepRepr.Handle_StepRepr_Representation
        :type aTransf: OCC.wrapper.StepRepr.StepRepr_Transformation

        """
        return _StepRepr.Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation_Init(self, *args)


    def TransformationOperator(self, *args):
        """
        TransformationOperator(Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation self) -> StepRepr_Transformation

        :rtype: OCC.wrapper.StepRepr.StepRepr_Transformation

        """
        return _StepRepr.Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation_TransformationOperator(self, *args)


    def SetTransformationOperator(self, *args):
        """
        SetTransformationOperator(Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation self, StepRepr_Transformation aTrans)

        :type aTrans: OCC.wrapper.StepRepr.StepRepr_Transformation

        """
        return _StepRepr.Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation_SetTransformationOperator(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation_Name(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation self, Handle_TCollection_HAsciiString aDescription)

        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation_Description(self, *args)


    def SetRep1(self, *args):
        """
        SetRep1(Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation self, Handle_StepRepr_Representation aRep1)

        :type aRep1: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepRepr.Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation_SetRep1(self, *args)


    def Rep1(self, *args):
        """
        Rep1(Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation self) -> Handle_StepRepr_Representation

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepRepr.Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation_Rep1(self, *args)


    def SetRep2(self, *args):
        """
        SetRep2(Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation self, Handle_StepRepr_Representation aRep2)

        :type aRep2: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepRepr.Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation_SetRep2(self, *args)


    def Rep2(self, *args):
        """
        Rep2(Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation self) -> Handle_StepRepr_Representation

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepRepr.Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation_Rep2(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation_DecrementRefCounter(self, *args)

Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation_swigregister = _StepRepr.Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation_swigregister
Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation_swigregister(Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation)

def Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation_DownCast(thing):
    return _StepRepr.Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation_DownCast(thing)
Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation_DownCast = _StepRepr.Handle_StepRepr_ShapeRepresentationRelationshipWithTransformation_DownCast

class StepRepr_Transformation(StepData.StepData_SelectType):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepRepr_Transformation self) -> StepRepr_Transformation

        Returns a Transformation SelectType


        """
        this = _StepRepr.new_StepRepr_Transformation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepRepr_Transformation self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a Transformation Kind Entity that is :
        1 -> ItemDefinedTransformation
        2 -> FunctionallyDefinedTransformation
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.StepRepr_Transformation_CaseNum(self, *args)


    def ItemDefinedTransformation(self, *args):
        """
        ItemDefinedTransformation(StepRepr_Transformation self) -> Handle_StepRepr_ItemDefinedTransformation

        returns Value as a ItemDefinedTransformation (Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ItemDefinedTransformation

        """
        return _StepRepr.StepRepr_Transformation_ItemDefinedTransformation(self, *args)


    def FunctionallyDefinedTransformation(self, *args):
        """
        FunctionallyDefinedTransformation(StepRepr_Transformation self) -> Handle_StepRepr_FunctionallyDefinedTransformation

        returns Value as a FunctionallyDefinedTransformation (Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_FunctionallyDefinedTransformation

        """
        return _StepRepr.StepRepr_Transformation_FunctionallyDefinedTransformation(self, *args)

    __swig_destroy__ = _StepRepr.delete_StepRepr_Transformation
StepRepr_Transformation_swigregister = _StepRepr.StepRepr_Transformation_swigregister
StepRepr_Transformation_swigregister(StepRepr_Transformation)

class NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation self) -> NCollection_Array1< opencascade::handle< StepRepr_PropertyDefinitionRepresentation > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation self) -> NCollection_Array1< opencascade::handle< StepRepr_PropertyDefinitionRepresentation > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation self) -> NCollection_Array1< opencascade::handle< StepRepr_PropertyDefinitionRepresentation > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation self) -> NCollection_Array1< opencascade::handle< StepRepr_PropertyDefinitionRepresentation > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepRepr.new_NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation self, Handle_StepRepr_PropertyDefinitionRepresentation theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation self, NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation theOther) -> NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation self, NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation theOther) -> NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation self, NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation theOther) -> NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation
        assign(NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation self, NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation theOther) -> NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepRepr.NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation self) -> Handle_StepRepr_PropertyDefinitionRepresentation

        @return first element

        :rtype: TheItemType &

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepRepr.NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation self) -> Handle_StepRepr_PropertyDefinitionRepresentation

        @return last element

        :rtype: TheItemType &

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepRepr.NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation self, Standard_Integer const theIndex) -> Handle_StepRepr_PropertyDefinitionRepresentation

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepRepr.NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepRepr.NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation self, Standard_Integer const theIndex, Handle_StepRepr_PropertyDefinitionRepresentation theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation_Resize(self, *args)

    __swig_destroy__ = _StepRepr.delete_NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation
NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation_swigregister = _StepRepr.NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation_swigregister
NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation_swigregister(NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation)


try:
	StepRepr_Array1OfPropertyDefinitionRepresentation = NCollection_Array1_Handle_StepRepr_PropertyDefinitionRepresentation
except NameError:
	pass # does not exist, probably ignored

class Handle_StepRepr_MaterialPropertyRepresentation(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_MaterialPropertyRepresentation self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_MaterialPropertyRepresentation_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_MaterialPropertyRepresentation self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_MaterialPropertyRepresentation_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_MaterialPropertyRepresentation self, StepRepr_MaterialPropertyRepresentation thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_MaterialPropertyRepresentation_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_MaterialPropertyRepresentation self, Handle_StepRepr_MaterialPropertyRepresentation theHandle) -> Handle_StepRepr_MaterialPropertyRepresentation
        assign(Handle_StepRepr_MaterialPropertyRepresentation self, StepRepr_MaterialPropertyRepresentation thePtr) -> Handle_StepRepr_MaterialPropertyRepresentation
        assign(Handle_StepRepr_MaterialPropertyRepresentation self, Handle_StepRepr_MaterialPropertyRepresentation theHandle) -> Handle_StepRepr_MaterialPropertyRepresentation

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_MaterialPropertyRepresentation_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_MaterialPropertyRepresentation self) -> StepRepr_MaterialPropertyRepresentation

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_MaterialPropertyRepresentation_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_MaterialPropertyRepresentation self) -> StepRepr_MaterialPropertyRepresentation

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_MaterialPropertyRepresentation___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_MaterialPropertyRepresentation self) -> StepRepr_MaterialPropertyRepresentation

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_MaterialPropertyRepresentation___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_MaterialPropertyRepresentation___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_MaterialPropertyRepresentation___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_MaterialPropertyRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_MaterialPropertyRepresentation_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_MaterialPropertyRepresentation

    def Init(self, *args):
        """
        Init(Handle_StepRepr_MaterialPropertyRepresentation self, StepRepr_RepresentedDefinition aPropertyDefinitionRepresentation_Definition, Handle_StepRepr_Representation aPropertyDefinitionRepresentation_UsedRepresentation, Handle_StepRepr_DataEnvironment aDependentEnvironment)

        Initialize all fields (own and inherited)

        :type aPropertyDefinitionRepresentation_Definition: OCC.wrapper.StepRepr.StepRepr_RepresentedDefinition
        :type aPropertyDefinitionRepresentation_UsedRepresentation: OCC.wrapper.StepRepr.Handle_StepRepr_Representation
        :type aDependentEnvironment: OCC.wrapper.StepRepr.Handle_StepRepr_DataEnvironment

        """
        return _StepRepr.Handle_StepRepr_MaterialPropertyRepresentation_Init(self, *args)


    def DependentEnvironment(self, *args):
        """
        DependentEnvironment(Handle_StepRepr_MaterialPropertyRepresentation self) -> Handle_StepRepr_DataEnvironment

        Returns field DependentEnvironment

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_DataEnvironment

        """
        return _StepRepr.Handle_StepRepr_MaterialPropertyRepresentation_DependentEnvironment(self, *args)


    def SetDependentEnvironment(self, *args):
        """
        SetDependentEnvironment(Handle_StepRepr_MaterialPropertyRepresentation self, Handle_StepRepr_DataEnvironment DependentEnvironment)

        Set field DependentEnvironment

        :type DependentEnvironment: OCC.wrapper.StepRepr.Handle_StepRepr_DataEnvironment

        """
        return _StepRepr.Handle_StepRepr_MaterialPropertyRepresentation_SetDependentEnvironment(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_MaterialPropertyRepresentation self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_MaterialPropertyRepresentation_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_MaterialPropertyRepresentation_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_MaterialPropertyRepresentation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Definition(self, *args):
        """
        Definition(Handle_StepRepr_MaterialPropertyRepresentation self) -> StepRepr_RepresentedDefinition

        Returns field Definition

        :rtype: OCC.wrapper.StepRepr.StepRepr_RepresentedDefinition

        """
        return _StepRepr.Handle_StepRepr_MaterialPropertyRepresentation_Definition(self, *args)


    def SetDefinition(self, *args):
        """
        SetDefinition(Handle_StepRepr_MaterialPropertyRepresentation self, StepRepr_RepresentedDefinition Definition)

        Set field Definition

        :type Definition: OCC.wrapper.StepRepr.StepRepr_RepresentedDefinition

        """
        return _StepRepr.Handle_StepRepr_MaterialPropertyRepresentation_SetDefinition(self, *args)


    def UsedRepresentation(self, *args):
        """
        UsedRepresentation(Handle_StepRepr_MaterialPropertyRepresentation self) -> Handle_StepRepr_Representation

        Returns field UsedRepresentation

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepRepr.Handle_StepRepr_MaterialPropertyRepresentation_UsedRepresentation(self, *args)


    def SetUsedRepresentation(self, *args):
        """
        SetUsedRepresentation(Handle_StepRepr_MaterialPropertyRepresentation self, Handle_StepRepr_Representation UsedRepresentation)

        Set field UsedRepresentation

        :type UsedRepresentation: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepRepr.Handle_StepRepr_MaterialPropertyRepresentation_SetUsedRepresentation(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_MaterialPropertyRepresentation self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_MaterialPropertyRepresentation_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_MaterialPropertyRepresentation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_MaterialPropertyRepresentation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_MaterialPropertyRepresentation_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_MaterialPropertyRepresentation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_MaterialPropertyRepresentation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_MaterialPropertyRepresentation_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_MaterialPropertyRepresentation self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_MaterialPropertyRepresentation_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_MaterialPropertyRepresentation self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_MaterialPropertyRepresentation_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_MaterialPropertyRepresentation self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_MaterialPropertyRepresentation_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_MaterialPropertyRepresentation self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_MaterialPropertyRepresentation_DecrementRefCounter(self, *args)

Handle_StepRepr_MaterialPropertyRepresentation_swigregister = _StepRepr.Handle_StepRepr_MaterialPropertyRepresentation_swigregister
Handle_StepRepr_MaterialPropertyRepresentation_swigregister(Handle_StepRepr_MaterialPropertyRepresentation)

def Handle_StepRepr_MaterialPropertyRepresentation_DownCast(thing):
    return _StepRepr.Handle_StepRepr_MaterialPropertyRepresentation_DownCast(thing)
Handle_StepRepr_MaterialPropertyRepresentation_DownCast = _StepRepr.Handle_StepRepr_MaterialPropertyRepresentation_DownCast

class Handle_StepRepr_PerpendicularTo(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_PerpendicularTo self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_PerpendicularTo_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_PerpendicularTo self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_PerpendicularTo_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_PerpendicularTo self, StepRepr_PerpendicularTo thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_PerpendicularTo_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_PerpendicularTo self, Handle_StepRepr_PerpendicularTo theHandle) -> Handle_StepRepr_PerpendicularTo
        assign(Handle_StepRepr_PerpendicularTo self, StepRepr_PerpendicularTo thePtr) -> Handle_StepRepr_PerpendicularTo
        assign(Handle_StepRepr_PerpendicularTo self, Handle_StepRepr_PerpendicularTo theHandle) -> Handle_StepRepr_PerpendicularTo

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_PerpendicularTo_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_PerpendicularTo self) -> StepRepr_PerpendicularTo

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_PerpendicularTo_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_PerpendicularTo self) -> StepRepr_PerpendicularTo

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_PerpendicularTo___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_PerpendicularTo self) -> StepRepr_PerpendicularTo

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_PerpendicularTo___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_PerpendicularTo___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_PerpendicularTo___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_PerpendicularTo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_PerpendicularTo_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_PerpendicularTo

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_PerpendicularTo self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_PerpendicularTo_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_PerpendicularTo_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_PerpendicularTo_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepRepr_PerpendicularTo self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepRepr_ProductDefinitionShape aOfShape, StepData_Logical const aProductDefinitional)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape
        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_PerpendicularTo_Init(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_PerpendicularTo self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_PerpendicularTo_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_PerpendicularTo self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_PerpendicularTo_Name(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_PerpendicularTo self, Handle_TCollection_HAsciiString aDescription)

        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_PerpendicularTo_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_PerpendicularTo self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_PerpendicularTo_Description(self, *args)


    def SetOfShape(self, *args):
        """
        SetOfShape(Handle_StepRepr_PerpendicularTo self, Handle_StepRepr_ProductDefinitionShape aOfShape)

        :type aOfShape: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepRepr.Handle_StepRepr_PerpendicularTo_SetOfShape(self, *args)


    def OfShape(self, *args):
        """
        OfShape(Handle_StepRepr_PerpendicularTo self) -> Handle_StepRepr_ProductDefinitionShape

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepRepr.Handle_StepRepr_PerpendicularTo_OfShape(self, *args)


    def SetProductDefinitional(self, *args):
        """
        SetProductDefinitional(Handle_StepRepr_PerpendicularTo self, StepData_Logical const aProductDefinitional)

        :type aProductDefinitional: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_PerpendicularTo_SetProductDefinitional(self, *args)


    def ProductDefinitional(self, *args):
        """
        ProductDefinitional(Handle_StepRepr_PerpendicularTo self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepRepr.Handle_StepRepr_PerpendicularTo_ProductDefinitional(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_PerpendicularTo self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_PerpendicularTo_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_PerpendicularTo self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_PerpendicularTo self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_PerpendicularTo_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_PerpendicularTo self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_PerpendicularTo self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_PerpendicularTo_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_PerpendicularTo self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_PerpendicularTo_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_PerpendicularTo self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_PerpendicularTo_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_PerpendicularTo self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_PerpendicularTo_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_PerpendicularTo self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_PerpendicularTo_DecrementRefCounter(self, *args)

Handle_StepRepr_PerpendicularTo_swigregister = _StepRepr.Handle_StepRepr_PerpendicularTo_swigregister
Handle_StepRepr_PerpendicularTo_swigregister(Handle_StepRepr_PerpendicularTo)

def Handle_StepRepr_PerpendicularTo_DownCast(thing):
    return _StepRepr.Handle_StepRepr_PerpendicularTo_DownCast(thing)
Handle_StepRepr_PerpendicularTo_DownCast = _StepRepr.Handle_StepRepr_PerpendicularTo_DownCast

class Handle_StepRepr_HSequenceOfRepresentationItem(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_HSequenceOfRepresentationItem self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_HSequenceOfRepresentationItem self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_HSequenceOfRepresentationItem self, StepRepr_HSequenceOfRepresentationItem thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_HSequenceOfRepresentationItem self, Handle_StepRepr_HSequenceOfRepresentationItem theHandle) -> Handle_StepRepr_HSequenceOfRepresentationItem
        assign(Handle_StepRepr_HSequenceOfRepresentationItem self, StepRepr_HSequenceOfRepresentationItem thePtr) -> Handle_StepRepr_HSequenceOfRepresentationItem
        assign(Handle_StepRepr_HSequenceOfRepresentationItem self, Handle_StepRepr_HSequenceOfRepresentationItem theHandle) -> Handle_StepRepr_HSequenceOfRepresentationItem

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_HSequenceOfRepresentationItem self) -> StepRepr_HSequenceOfRepresentationItem

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_HSequenceOfRepresentationItem self) -> StepRepr_HSequenceOfRepresentationItem

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_HSequenceOfRepresentationItem self) -> StepRepr_HSequenceOfRepresentationItem

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_HSequenceOfRepresentationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_HSequenceOfRepresentationItem

    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.StepRepr.StepRepr_SequenceOfRepresentationItem

        """
        res = _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(Handle_StepRepr_HSequenceOfRepresentationItem self, Handle_StepRepr_RepresentationItem theItem)
        Append(Handle_StepRepr_HSequenceOfRepresentationItem self, NCollection_Sequence_Handle_StepRepr_RepresentationItem theSequence)

        :type theSequence: OCC.wrapper.StepRepr.StepRepr_SequenceOfRepresentationItem

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(Handle_StepRepr_HSequenceOfRepresentationItem self) -> NCollection_Sequence_Handle_StepRepr_RepresentationItem

        :rtype: OCC.wrapper.StepRepr.StepRepr_SequenceOfRepresentationItem

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_ChangeSequence(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_HSequenceOfRepresentationItem self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def begin(self, *args):
        """
        begin(Handle_StepRepr_HSequenceOfRepresentationItem self) -> NCollection_Sequence< opencascade::handle< StepRepr_RepresentationItem > >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_begin(self, *args)


    def end(self, *args):
        """
        end(Handle_StepRepr_HSequenceOfRepresentationItem self) -> NCollection_Sequence< opencascade::handle< StepRepr_RepresentationItem > >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(Handle_StepRepr_HSequenceOfRepresentationItem self) -> NCollection_Sequence< opencascade::handle< StepRepr_RepresentationItem > >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(Handle_StepRepr_HSequenceOfRepresentationItem self) -> NCollection_Sequence< opencascade::handle< StepRepr_RepresentationItem > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_cend(self, *args)


    def Size(self, *args):
        """
        Size(Handle_StepRepr_HSequenceOfRepresentationItem self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_Size(self, *args)


    def Length(self, *args):
        """
        Length(Handle_StepRepr_HSequenceOfRepresentationItem self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(Handle_StepRepr_HSequenceOfRepresentationItem self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(Handle_StepRepr_HSequenceOfRepresentationItem self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(Handle_StepRepr_HSequenceOfRepresentationItem self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(Handle_StepRepr_HSequenceOfRepresentationItem self)

        Reverse sequence


        """
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(Handle_StepRepr_HSequenceOfRepresentationItem self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_Exchange(self, *args)


    def delNode(self, *args):
        """
        delNode(Handle_StepRepr_HSequenceOfRepresentationItem self, NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_delNode(self, *args)


    def Clear(self, *args):
        """
        Clear(Handle_StepRepr_HSequenceOfRepresentationItem self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(Handle_StepRepr_HSequenceOfRepresentationItem self, NCollection_Sequence_Handle_StepRepr_RepresentationItem theOther) -> NCollection_Sequence_Handle_StepRepr_RepresentationItem

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_Assign(self, *args)


    def Remove(self, *args):
        """
        Remove(Handle_StepRepr_HSequenceOfRepresentationItem self, NCollection_Sequence< opencascade::handle< StepRepr_RepresentationItem > >::Iterator & thePosition)
        Remove(Handle_StepRepr_HSequenceOfRepresentationItem self, Standard_Integer const theIndex)
        Remove(Handle_StepRepr_HSequenceOfRepresentationItem self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_Remove(self, *args)


    def Prepend(self, *args):
        """
        Prepend(Handle_StepRepr_HSequenceOfRepresentationItem self, Handle_StepRepr_RepresentationItem theItem)
        Prepend(Handle_StepRepr_HSequenceOfRepresentationItem self, NCollection_Sequence_Handle_StepRepr_RepresentationItem theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(Handle_StepRepr_HSequenceOfRepresentationItem self, Standard_Integer const theIndex, Handle_StepRepr_RepresentationItem theItem)
        InsertBefore(Handle_StepRepr_HSequenceOfRepresentationItem self, Standard_Integer const theIndex, NCollection_Sequence_Handle_StepRepr_RepresentationItem theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(Handle_StepRepr_HSequenceOfRepresentationItem self, NCollection_Sequence< opencascade::handle< StepRepr_RepresentationItem > >::Iterator & thePosition, Handle_StepRepr_RepresentationItem theItem)
        InsertAfter(Handle_StepRepr_HSequenceOfRepresentationItem self, Standard_Integer const theIndex, NCollection_Sequence_Handle_StepRepr_RepresentationItem theSeq)
        InsertAfter(Handle_StepRepr_HSequenceOfRepresentationItem self, Standard_Integer const theIndex, Handle_StepRepr_RepresentationItem theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(Handle_StepRepr_HSequenceOfRepresentationItem self, Standard_Integer const theIndex, NCollection_Sequence_Handle_StepRepr_RepresentationItem theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(Handle_StepRepr_HSequenceOfRepresentationItem self) -> Handle_StepRepr_RepresentationItem

        First item access

        :rtype: TheItemType &

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(Handle_StepRepr_HSequenceOfRepresentationItem self) -> Handle_StepRepr_RepresentationItem

        Last item access

        :rtype: TheItemType &

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(Handle_StepRepr_HSequenceOfRepresentationItem self, Standard_Integer const theIndex) -> Handle_StepRepr_RepresentationItem

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_ChangeValue(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_StepRepr_HSequenceOfRepresentationItem self, Standard_Integer const theIndex, Handle_StepRepr_RepresentationItem theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_SetValue(self, *args)


    def __iter__(self):
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem___iter__(self)

    def Allocator(self, *args):
        """
        Returns attached allocator

        :rtype: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        res = _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_Allocator(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_HSequenceOfRepresentationItem self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_HSequenceOfRepresentationItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_HSequenceOfRepresentationItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_HSequenceOfRepresentationItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_HSequenceOfRepresentationItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_HSequenceOfRepresentationItem self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_HSequenceOfRepresentationItem self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_HSequenceOfRepresentationItem self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_HSequenceOfRepresentationItem self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_DecrementRefCounter(self, *args)

Handle_StepRepr_HSequenceOfRepresentationItem_swigregister = _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_swigregister
Handle_StepRepr_HSequenceOfRepresentationItem_swigregister(Handle_StepRepr_HSequenceOfRepresentationItem)

def Handle_StepRepr_HSequenceOfRepresentationItem_DownCast(thing):
    return _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_DownCast(thing)
Handle_StepRepr_HSequenceOfRepresentationItem_DownCast = _StepRepr.Handle_StepRepr_HSequenceOfRepresentationItem_DownCast

class NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation self) -> NCollection_Sequence< opencascade::handle< StepRepr_MaterialPropertyRepresentation > >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation self) -> NCollection_Sequence< opencascade::handle< StepRepr_MaterialPropertyRepresentation > >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation self) -> NCollection_Sequence< opencascade::handle< StepRepr_MaterialPropertyRepresentation > >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation self) -> NCollection_Sequence< opencascade::handle< StepRepr_MaterialPropertyRepresentation > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _StepRepr.new_NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation self)

        Reverse sequence


        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation self, NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation theOther) -> NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation self, NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation theOther) -> NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation self, NCollection_Sequence< opencascade::handle< StepRepr_MaterialPropertyRepresentation > >::Iterator & thePosition)
        Remove(NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation self, Handle_StepRepr_MaterialPropertyRepresentation theItem)
        Append(NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation self, NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation self, Handle_StepRepr_MaterialPropertyRepresentation theItem)
        Prepend(NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation self, NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation self, Standard_Integer const theIndex, Handle_StepRepr_MaterialPropertyRepresentation theItem)
        InsertBefore(NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation self, Standard_Integer const theIndex, NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation self, NCollection_Sequence< opencascade::handle< StepRepr_MaterialPropertyRepresentation > >::Iterator & thePosition, Handle_StepRepr_MaterialPropertyRepresentation theItem)
        InsertAfter(NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation self, Standard_Integer const theIndex, NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation theSeq)
        InsertAfter(NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation self, Standard_Integer const theIndex, Handle_StepRepr_MaterialPropertyRepresentation theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation self, Standard_Integer const theIndex, NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _StepRepr.NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation self) -> Handle_StepRepr_MaterialPropertyRepresentation

        First item access

        :rtype: TheItemType &

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _StepRepr.NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation self) -> Handle_StepRepr_MaterialPropertyRepresentation

        Last item access

        :rtype: TheItemType &

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepRepr.NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation self, Standard_Integer const theIndex) -> Handle_StepRepr_MaterialPropertyRepresentation

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepRepr.NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation self, Standard_Integer const theIndex, Handle_StepRepr_MaterialPropertyRepresentation theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_SetValue(self, *args)


    def __iter__(self):
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation___iter__(self)
    __swig_destroy__ = _StepRepr.delete_NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation
NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_swigregister = _StepRepr.NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_swigregister
NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_swigregister(NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation)

def NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_delNode(*args):
    """
    NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _StepRepr.NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_delNode(*args)

class NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _StepRepr.new_NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StepRepr.delete_NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_IteratorHelper

    def __next__(self):
        return _StepRepr.NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_IteratorHelper___next__(self)
NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_IteratorHelper_swigregister = _StepRepr.NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_IteratorHelper_swigregister
NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_IteratorHelper_swigregister(NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation_IteratorHelper)


try:
	StepRepr_SequenceOfMaterialPropertyRepresentation = NCollection_Sequence_Handle_StepRepr_MaterialPropertyRepresentation
except NameError:
	pass # does not exist, probably ignored

class NCollection_Array1_Handle_StepRepr_ShapeAspect(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_StepRepr_ShapeAspect self) -> NCollection_Array1< opencascade::handle< StepRepr_ShapeAspect > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_ShapeAspect_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_StepRepr_ShapeAspect self) -> NCollection_Array1< opencascade::handle< StepRepr_ShapeAspect > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_ShapeAspect_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_StepRepr_ShapeAspect self) -> NCollection_Array1< opencascade::handle< StepRepr_ShapeAspect > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_ShapeAspect_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_StepRepr_ShapeAspect self) -> NCollection_Array1< opencascade::handle< StepRepr_ShapeAspect > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_ShapeAspect_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepRepr.new_NCollection_Array1_Handle_StepRepr_ShapeAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_StepRepr_ShapeAspect self, Handle_StepRepr_ShapeAspect theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_ShapeAspect_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_StepRepr_ShapeAspect self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_ShapeAspect_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_StepRepr_ShapeAspect self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_ShapeAspect_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_StepRepr_ShapeAspect self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_ShapeAspect_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_StepRepr_ShapeAspect self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_ShapeAspect_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_StepRepr_ShapeAspect self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_ShapeAspect_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_StepRepr_ShapeAspect self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_ShapeAspect_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_StepRepr_ShapeAspect self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_ShapeAspect_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_StepRepr_ShapeAspect self, NCollection_Array1_Handle_StepRepr_ShapeAspect theOther) -> NCollection_Array1_Handle_StepRepr_ShapeAspect

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_ShapeAspect_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_StepRepr_ShapeAspect self, NCollection_Array1_Handle_StepRepr_ShapeAspect theOther) -> NCollection_Array1_Handle_StepRepr_ShapeAspect

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_ShapeAspect_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_StepRepr_ShapeAspect self, NCollection_Array1_Handle_StepRepr_ShapeAspect theOther) -> NCollection_Array1_Handle_StepRepr_ShapeAspect
        assign(NCollection_Array1_Handle_StepRepr_ShapeAspect self, NCollection_Array1_Handle_StepRepr_ShapeAspect theOther) -> NCollection_Array1_Handle_StepRepr_ShapeAspect

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_ShapeAspect_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepRepr.NCollection_Array1_Handle_StepRepr_ShapeAspect_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_StepRepr_ShapeAspect self) -> Handle_StepRepr_ShapeAspect

        @return first element

        :rtype: TheItemType &

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_ShapeAspect_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepRepr.NCollection_Array1_Handle_StepRepr_ShapeAspect_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_StepRepr_ShapeAspect self) -> Handle_StepRepr_ShapeAspect

        @return last element

        :rtype: TheItemType &

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_ShapeAspect_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepRepr.NCollection_Array1_Handle_StepRepr_ShapeAspect_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_StepRepr_ShapeAspect self, Standard_Integer const theIndex) -> Handle_StepRepr_ShapeAspect

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_ShapeAspect_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepRepr.NCollection_Array1_Handle_StepRepr_ShapeAspect___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepRepr.NCollection_Array1_Handle_StepRepr_ShapeAspect_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_StepRepr_ShapeAspect self, Standard_Integer const theIndex, Handle_StepRepr_ShapeAspect theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_ShapeAspect_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_StepRepr_ShapeAspect self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepRepr.NCollection_Array1_Handle_StepRepr_ShapeAspect_Resize(self, *args)

    __swig_destroy__ = _StepRepr.delete_NCollection_Array1_Handle_StepRepr_ShapeAspect
NCollection_Array1_Handle_StepRepr_ShapeAspect_swigregister = _StepRepr.NCollection_Array1_Handle_StepRepr_ShapeAspect_swigregister
NCollection_Array1_Handle_StepRepr_ShapeAspect_swigregister(NCollection_Array1_Handle_StepRepr_ShapeAspect)


try:
	StepRepr_Array1OfShapeAspect = NCollection_Array1_Handle_StepRepr_ShapeAspect
except NameError:
	pass # does not exist, probably ignored

class Handle_StepRepr_ShapeAspectDerivingRelationship(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_ShapeAspectDerivingRelationship self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_ShapeAspectDerivingRelationship_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_ShapeAspectDerivingRelationship self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectDerivingRelationship_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_ShapeAspectDerivingRelationship self, StepRepr_ShapeAspectDerivingRelationship thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectDerivingRelationship_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_ShapeAspectDerivingRelationship self, Handle_StepRepr_ShapeAspectDerivingRelationship theHandle) -> Handle_StepRepr_ShapeAspectDerivingRelationship
        assign(Handle_StepRepr_ShapeAspectDerivingRelationship self, StepRepr_ShapeAspectDerivingRelationship thePtr) -> Handle_StepRepr_ShapeAspectDerivingRelationship
        assign(Handle_StepRepr_ShapeAspectDerivingRelationship self, Handle_StepRepr_ShapeAspectDerivingRelationship theHandle) -> Handle_StepRepr_ShapeAspectDerivingRelationship

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectDerivingRelationship_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_ShapeAspectDerivingRelationship self) -> StepRepr_ShapeAspectDerivingRelationship

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectDerivingRelationship_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_ShapeAspectDerivingRelationship self) -> StepRepr_ShapeAspectDerivingRelationship

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectDerivingRelationship___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_ShapeAspectDerivingRelationship self) -> StepRepr_ShapeAspectDerivingRelationship

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectDerivingRelationship___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_ShapeAspectDerivingRelationship___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_ShapeAspectDerivingRelationship___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_ShapeAspectDerivingRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_ShapeAspectDerivingRelationship_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_ShapeAspectDerivingRelationship

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_ShapeAspectDerivingRelationship self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectDerivingRelationship_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ShapeAspectDerivingRelationship_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ShapeAspectDerivingRelationship_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepRepr_ShapeAspectDerivingRelationship self, Handle_TCollection_HAsciiString aName, Standard_Boolean const hasDescription, Handle_TCollection_HAsciiString aDescription, Handle_StepRepr_ShapeAspect aRelatingShapeAspect, Handle_StepRepr_ShapeAspect aRelatedShapeAspect)

        Initialize all fields (own and inherited)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type hasDescription: bool
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aRelatingShapeAspect: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspect
        :type aRelatedShapeAspect: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspect

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectDerivingRelationship_Init(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_ShapeAspectDerivingRelationship self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectDerivingRelationship_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_ShapeAspectDerivingRelationship self, Handle_TCollection_HAsciiString Name)

        Set field Name

        :type Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectDerivingRelationship_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_ShapeAspectDerivingRelationship self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectDerivingRelationship_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_ShapeAspectDerivingRelationship self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectDerivingRelationship_SetDescription(self, *args)


    def HasDescription(self, *args):
        """
        HasDescription(Handle_StepRepr_ShapeAspectDerivingRelationship self) -> Standard_Boolean

        Returns True if optional field Description is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectDerivingRelationship_HasDescription(self, *args)


    def RelatingShapeAspect(self, *args):
        """
        RelatingShapeAspect(Handle_StepRepr_ShapeAspectDerivingRelationship self) -> Handle_StepRepr_ShapeAspect

        Returns field RelatingShapeAspect

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspect

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectDerivingRelationship_RelatingShapeAspect(self, *args)


    def SetRelatingShapeAspect(self, *args):
        """
        SetRelatingShapeAspect(Handle_StepRepr_ShapeAspectDerivingRelationship self, Handle_StepRepr_ShapeAspect RelatingShapeAspect)

        Set field RelatingShapeAspect

        :type RelatingShapeAspect: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspect

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectDerivingRelationship_SetRelatingShapeAspect(self, *args)


    def RelatedShapeAspect(self, *args):
        """
        RelatedShapeAspect(Handle_StepRepr_ShapeAspectDerivingRelationship self) -> Handle_StepRepr_ShapeAspect

        Returns field RelatedShapeAspect

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspect

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectDerivingRelationship_RelatedShapeAspect(self, *args)


    def SetRelatedShapeAspect(self, *args):
        """
        SetRelatedShapeAspect(Handle_StepRepr_ShapeAspectDerivingRelationship self, Handle_StepRepr_ShapeAspect RelatedShapeAspect)

        Set field RelatedShapeAspect

        :type RelatedShapeAspect: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspect

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectDerivingRelationship_SetRelatedShapeAspect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_ShapeAspectDerivingRelationship self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_ShapeAspectDerivingRelationship_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_ShapeAspectDerivingRelationship self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_ShapeAspectDerivingRelationship self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectDerivingRelationship_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_ShapeAspectDerivingRelationship self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_ShapeAspectDerivingRelationship self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectDerivingRelationship_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_ShapeAspectDerivingRelationship self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectDerivingRelationship_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_ShapeAspectDerivingRelationship self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectDerivingRelationship_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_ShapeAspectDerivingRelationship self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_ShapeAspectDerivingRelationship_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_ShapeAspectDerivingRelationship self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ShapeAspectDerivingRelationship_DecrementRefCounter(self, *args)

Handle_StepRepr_ShapeAspectDerivingRelationship_swigregister = _StepRepr.Handle_StepRepr_ShapeAspectDerivingRelationship_swigregister
Handle_StepRepr_ShapeAspectDerivingRelationship_swigregister(Handle_StepRepr_ShapeAspectDerivingRelationship)

def Handle_StepRepr_ShapeAspectDerivingRelationship_DownCast(thing):
    return _StepRepr.Handle_StepRepr_ShapeAspectDerivingRelationship_DownCast(thing)
Handle_StepRepr_ShapeAspectDerivingRelationship_DownCast = _StepRepr.Handle_StepRepr_ShapeAspectDerivingRelationship_DownCast

class Handle_StepRepr_RepresentationItem(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_RepresentationItem self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_RepresentationItem_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_RepresentationItem self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_RepresentationItem_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_RepresentationItem self, StepRepr_RepresentationItem thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_RepresentationItem_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_RepresentationItem self, Handle_StepRepr_RepresentationItem theHandle) -> Handle_StepRepr_RepresentationItem
        assign(Handle_StepRepr_RepresentationItem self, StepRepr_RepresentationItem thePtr) -> Handle_StepRepr_RepresentationItem
        assign(Handle_StepRepr_RepresentationItem self, Handle_StepRepr_RepresentationItem theHandle) -> Handle_StepRepr_RepresentationItem

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_RepresentationItem_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_RepresentationItem self) -> StepRepr_RepresentationItem

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_RepresentationItem_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_RepresentationItem self) -> StepRepr_RepresentationItem

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_RepresentationItem___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_RepresentationItem self) -> StepRepr_RepresentationItem

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_RepresentationItem___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_RepresentationItem___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_RepresentationItem___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_RepresentationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_RepresentationItem_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_RepresentationItem

    def Init(self, *args):
        """
        Init(Handle_StepRepr_RepresentationItem self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_RepresentationItem_Init(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_RepresentationItem self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_RepresentationItem_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_RepresentationItem self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_RepresentationItem_Name(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_RepresentationItem self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_RepresentationItem_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_RepresentationItem_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_RepresentationItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_RepresentationItem self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_RepresentationItem_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_RepresentationItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_RepresentationItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_RepresentationItem_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_RepresentationItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_RepresentationItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_RepresentationItem_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_RepresentationItem self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_RepresentationItem_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_RepresentationItem self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_RepresentationItem_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_RepresentationItem self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_RepresentationItem_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_RepresentationItem self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_RepresentationItem_DecrementRefCounter(self, *args)

Handle_StepRepr_RepresentationItem_swigregister = _StepRepr.Handle_StepRepr_RepresentationItem_swigregister
Handle_StepRepr_RepresentationItem_swigregister(Handle_StepRepr_RepresentationItem)

def Handle_StepRepr_RepresentationItem_DownCast(thing):
    return _StepRepr.Handle_StepRepr_RepresentationItem_DownCast(thing)
Handle_StepRepr_RepresentationItem_DownCast = _StepRepr.Handle_StepRepr_RepresentationItem_DownCast

class Handle_StepRepr_DataEnvironment(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_DataEnvironment self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_DataEnvironment_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_DataEnvironment self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_DataEnvironment_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_DataEnvironment self, StepRepr_DataEnvironment thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_DataEnvironment_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_DataEnvironment self, Handle_StepRepr_DataEnvironment theHandle) -> Handle_StepRepr_DataEnvironment
        assign(Handle_StepRepr_DataEnvironment self, StepRepr_DataEnvironment thePtr) -> Handle_StepRepr_DataEnvironment
        assign(Handle_StepRepr_DataEnvironment self, Handle_StepRepr_DataEnvironment theHandle) -> Handle_StepRepr_DataEnvironment

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_DataEnvironment_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_DataEnvironment self) -> StepRepr_DataEnvironment

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_DataEnvironment_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_DataEnvironment self) -> StepRepr_DataEnvironment

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_DataEnvironment___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_DataEnvironment self) -> StepRepr_DataEnvironment

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_DataEnvironment___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_DataEnvironment___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_DataEnvironment___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_DataEnvironment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_DataEnvironment_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_DataEnvironment

    def Init(self, *args):
        """
        Init(Handle_StepRepr_DataEnvironment self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation aElements)

        Initialize all fields (own and inherited)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aElements: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation

        """
        return _StepRepr.Handle_StepRepr_DataEnvironment_Init(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_DataEnvironment self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_DataEnvironment_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_DataEnvironment self, Handle_TCollection_HAsciiString Name)

        Set field Name

        :type Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_DataEnvironment_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepRepr_DataEnvironment self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_DataEnvironment_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepRepr_DataEnvironment self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_DataEnvironment_SetDescription(self, *args)


    def Elements(self, *args):
        """
        Elements(Handle_StepRepr_DataEnvironment self) -> Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation

        Returns field Elements

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation

        """
        return _StepRepr.Handle_StepRepr_DataEnvironment_Elements(self, *args)


    def SetElements(self, *args):
        """
        SetElements(Handle_StepRepr_DataEnvironment self, Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation Elements)

        Set field Elements

        :type Elements: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfPropertyDefinitionRepresentation

        """
        return _StepRepr.Handle_StepRepr_DataEnvironment_SetElements(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_DataEnvironment self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_DataEnvironment_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_DataEnvironment_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_DataEnvironment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_DataEnvironment self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_DataEnvironment_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_DataEnvironment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_DataEnvironment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_DataEnvironment_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_DataEnvironment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_DataEnvironment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_DataEnvironment_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_DataEnvironment self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_DataEnvironment_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_DataEnvironment self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_DataEnvironment_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_DataEnvironment self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_DataEnvironment_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_DataEnvironment self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_DataEnvironment_DecrementRefCounter(self, *args)

Handle_StepRepr_DataEnvironment_swigregister = _StepRepr.Handle_StepRepr_DataEnvironment_swigregister
Handle_StepRepr_DataEnvironment_swigregister(Handle_StepRepr_DataEnvironment)

def Handle_StepRepr_DataEnvironment_DownCast(thing):
    return _StepRepr.Handle_StepRepr_DataEnvironment_DownCast(thing)
Handle_StepRepr_DataEnvironment_DownCast = _StepRepr.Handle_StepRepr_DataEnvironment_DownCast

class Handle_StepRepr_ReprItemAndMeasureWithUnit(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_ReprItemAndMeasureWithUnit self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnit_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_ReprItemAndMeasureWithUnit self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnit_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_ReprItemAndMeasureWithUnit self, StepRepr_ReprItemAndMeasureWithUnit thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnit_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_ReprItemAndMeasureWithUnit self, Handle_StepRepr_ReprItemAndMeasureWithUnit theHandle) -> Handle_StepRepr_ReprItemAndMeasureWithUnit
        assign(Handle_StepRepr_ReprItemAndMeasureWithUnit self, StepRepr_ReprItemAndMeasureWithUnit thePtr) -> Handle_StepRepr_ReprItemAndMeasureWithUnit
        assign(Handle_StepRepr_ReprItemAndMeasureWithUnit self, Handle_StepRepr_ReprItemAndMeasureWithUnit theHandle) -> Handle_StepRepr_ReprItemAndMeasureWithUnit

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnit_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_ReprItemAndMeasureWithUnit self) -> StepRepr_ReprItemAndMeasureWithUnit

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnit_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_ReprItemAndMeasureWithUnit self) -> StepRepr_ReprItemAndMeasureWithUnit

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnit___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_ReprItemAndMeasureWithUnit self) -> StepRepr_ReprItemAndMeasureWithUnit

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnit___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnit___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnit___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_ReprItemAndMeasureWithUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnit_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_ReprItemAndMeasureWithUnit

    def Init(self, *args):
        """
        Init(Handle_StepRepr_ReprItemAndMeasureWithUnit self, Handle_StepBasic_MeasureWithUnit aMWU, Handle_StepRepr_RepresentationItem aRI)

        :type aMWU: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type aRI: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnit_Init(self, *args)


    def GetMeasureRepresentationItem(self, *args):
        """
        GetMeasureRepresentationItem(Handle_StepRepr_ReprItemAndMeasureWithUnit self) -> Handle_StepRepr_MeasureRepresentationItem

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_MeasureRepresentationItem

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnit_GetMeasureRepresentationItem(self, *args)


    def SetMeasureWithUnit(self, *args):
        """
        SetMeasureWithUnit(Handle_StepRepr_ReprItemAndMeasureWithUnit self, Handle_StepBasic_MeasureWithUnit aMWU)

        :type aMWU: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnit_SetMeasureWithUnit(self, *args)


    def GetMeasureWithUnit(self, *args):
        """
        GetMeasureWithUnit(Handle_StepRepr_ReprItemAndMeasureWithUnit self) -> Handle_StepBasic_MeasureWithUnit

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnit_GetMeasureWithUnit(self, *args)


    def GetRepresentationItem(self, *args):
        """
        GetRepresentationItem(Handle_StepRepr_ReprItemAndMeasureWithUnit self) -> Handle_StepRepr_RepresentationItem

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnit_GetRepresentationItem(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_ReprItemAndMeasureWithUnit self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnit_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnit_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnit_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_ReprItemAndMeasureWithUnit self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnit_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_ReprItemAndMeasureWithUnit self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnit_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_ReprItemAndMeasureWithUnit self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnit_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_ReprItemAndMeasureWithUnit self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_ReprItemAndMeasureWithUnit self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnit_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_ReprItemAndMeasureWithUnit self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_ReprItemAndMeasureWithUnit self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnit_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_ReprItemAndMeasureWithUnit self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnit_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_ReprItemAndMeasureWithUnit self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnit_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_ReprItemAndMeasureWithUnit self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnit_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_ReprItemAndMeasureWithUnit self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnit_DecrementRefCounter(self, *args)

Handle_StepRepr_ReprItemAndMeasureWithUnit_swigregister = _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnit_swigregister
Handle_StepRepr_ReprItemAndMeasureWithUnit_swigregister(Handle_StepRepr_ReprItemAndMeasureWithUnit)

def Handle_StepRepr_ReprItemAndMeasureWithUnit_DownCast(thing):
    return _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnit_DownCast(thing)
Handle_StepRepr_ReprItemAndMeasureWithUnit_DownCast = _StepRepr.Handle_StepRepr_ReprItemAndMeasureWithUnit_DownCast

class Handle_StepRepr_ExternallyDefinedRepresentation(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepRepr_ExternallyDefinedRepresentation self)

        Nullify the handle


        """
        return _StepRepr.Handle_StepRepr_ExternallyDefinedRepresentation_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepRepr_ExternallyDefinedRepresentation self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepRepr.Handle_StepRepr_ExternallyDefinedRepresentation_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepRepr_ExternallyDefinedRepresentation self, StepRepr_ExternallyDefinedRepresentation thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepRepr.Handle_StepRepr_ExternallyDefinedRepresentation_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepRepr_ExternallyDefinedRepresentation self, Handle_StepRepr_ExternallyDefinedRepresentation theHandle) -> Handle_StepRepr_ExternallyDefinedRepresentation
        assign(Handle_StepRepr_ExternallyDefinedRepresentation self, StepRepr_ExternallyDefinedRepresentation thePtr) -> Handle_StepRepr_ExternallyDefinedRepresentation
        assign(Handle_StepRepr_ExternallyDefinedRepresentation self, Handle_StepRepr_ExternallyDefinedRepresentation theHandle) -> Handle_StepRepr_ExternallyDefinedRepresentation

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepRepr.Handle_StepRepr_ExternallyDefinedRepresentation_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepRepr_ExternallyDefinedRepresentation self) -> StepRepr_ExternallyDefinedRepresentation

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ExternallyDefinedRepresentation_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepRepr_ExternallyDefinedRepresentation self) -> StepRepr_ExternallyDefinedRepresentation

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepRepr.Handle_StepRepr_ExternallyDefinedRepresentation___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepRepr_ExternallyDefinedRepresentation self) -> StepRepr_ExternallyDefinedRepresentation

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepRepr.Handle_StepRepr_ExternallyDefinedRepresentation___ref__(self, *args)


    def __hash__(self):
        return _StepRepr.Handle_StepRepr_ExternallyDefinedRepresentation___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepRepr.Handle_StepRepr_ExternallyDefinedRepresentation___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepRepr.new_Handle_StepRepr_ExternallyDefinedRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepRepr.Handle_StepRepr_ExternallyDefinedRepresentation_DownCast)
    __swig_destroy__ = _StepRepr.delete_Handle_StepRepr_ExternallyDefinedRepresentation

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepRepr_ExternallyDefinedRepresentation self) -> char const *

        :rtype: const char *

        """
        return _StepRepr.Handle_StepRepr_ExternallyDefinedRepresentation_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ExternallyDefinedRepresentation_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepRepr.Handle_StepRepr_ExternallyDefinedRepresentation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepRepr_ExternallyDefinedRepresentation self, Handle_TCollection_HAsciiString aName, Handle_StepRepr_HArray1OfRepresentationItem aItems, Handle_StepRepr_RepresentationContext aContextOfItems)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aItems: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfRepresentationItem
        :type aContextOfItems: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationContext

        """
        return _StepRepr.Handle_StepRepr_ExternallyDefinedRepresentation_Init(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepRepr_ExternallyDefinedRepresentation self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ExternallyDefinedRepresentation_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepRepr_ExternallyDefinedRepresentation self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepRepr.Handle_StepRepr_ExternallyDefinedRepresentation_Name(self, *args)


    def SetItems(self, *args):
        """
        SetItems(Handle_StepRepr_ExternallyDefinedRepresentation self, Handle_StepRepr_HArray1OfRepresentationItem aItems)

        :type aItems: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfRepresentationItem

        """
        return _StepRepr.Handle_StepRepr_ExternallyDefinedRepresentation_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(Handle_StepRepr_ExternallyDefinedRepresentation self) -> Handle_StepRepr_HArray1OfRepresentationItem

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfRepresentationItem

        """
        return _StepRepr.Handle_StepRepr_ExternallyDefinedRepresentation_Items(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(Handle_StepRepr_ExternallyDefinedRepresentation self, Standard_Integer const num) -> Handle_StepRepr_RepresentationItem

        :type num: int
        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepRepr.Handle_StepRepr_ExternallyDefinedRepresentation_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(Handle_StepRepr_ExternallyDefinedRepresentation self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ExternallyDefinedRepresentation_NbItems(self, *args)


    def SetContextOfItems(self, *args):
        """
        SetContextOfItems(Handle_StepRepr_ExternallyDefinedRepresentation self, Handle_StepRepr_RepresentationContext aContextOfItems)

        :type aContextOfItems: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationContext

        """
        return _StepRepr.Handle_StepRepr_ExternallyDefinedRepresentation_SetContextOfItems(self, *args)


    def ContextOfItems(self, *args):
        """
        ContextOfItems(Handle_StepRepr_ExternallyDefinedRepresentation self) -> Handle_StepRepr_RepresentationContext

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationContext

        """
        return _StepRepr.Handle_StepRepr_ExternallyDefinedRepresentation_ContextOfItems(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepRepr_ExternallyDefinedRepresentation self)

        Memory deallocator for transient classes


        """
        return _StepRepr.Handle_StepRepr_ExternallyDefinedRepresentation_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepRepr_ExternallyDefinedRepresentation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepRepr_ExternallyDefinedRepresentation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ExternallyDefinedRepresentation_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepRepr_ExternallyDefinedRepresentation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepRepr_ExternallyDefinedRepresentation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepRepr.Handle_StepRepr_ExternallyDefinedRepresentation_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepRepr_ExternallyDefinedRepresentation self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepRepr.Handle_StepRepr_ExternallyDefinedRepresentation_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepRepr_ExternallyDefinedRepresentation self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ExternallyDefinedRepresentation_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepRepr_ExternallyDefinedRepresentation self)

        Increments the reference counter of this object


        """
        return _StepRepr.Handle_StepRepr_ExternallyDefinedRepresentation_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepRepr_ExternallyDefinedRepresentation self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepRepr.Handle_StepRepr_ExternallyDefinedRepresentation_DecrementRefCounter(self, *args)

Handle_StepRepr_ExternallyDefinedRepresentation_swigregister = _StepRepr.Handle_StepRepr_ExternallyDefinedRepresentation_swigregister
Handle_StepRepr_ExternallyDefinedRepresentation_swigregister(Handle_StepRepr_ExternallyDefinedRepresentation)

def Handle_StepRepr_ExternallyDefinedRepresentation_DownCast(thing):
    return _StepRepr.Handle_StepRepr_ExternallyDefinedRepresentation_DownCast(thing)
Handle_StepRepr_ExternallyDefinedRepresentation_DownCast = _StepRepr.Handle_StepRepr_ExternallyDefinedRepresentation_DownCast



