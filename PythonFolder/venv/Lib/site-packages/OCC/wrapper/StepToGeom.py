# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_StepToGeom')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_StepToGeom')
    _StepToGeom = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StepToGeom', [dirname(__file__)])
        except ImportError:
            import _StepToGeom
            return _StepToGeom
        try:
            _mod = imp.load_module('_StepToGeom', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _StepToGeom = swig_import_helper()
    del swig_import_helper
else:
    import _StepToGeom
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StepToGeom.delete_SwigPyIterator

    def value(self):
        return _StepToGeom.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _StepToGeom.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _StepToGeom.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _StepToGeom.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _StepToGeom.SwigPyIterator_equal(self, x)

    def copy(self):
        return _StepToGeom.SwigPyIterator_copy(self)

    def next(self):
        return _StepToGeom.SwigPyIterator_next(self)

    def __next__(self):
        return _StepToGeom.SwigPyIterator___next__(self)

    def previous(self):
        return _StepToGeom.SwigPyIterator_previous(self)

    def advance(self, n):
        return _StepToGeom.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _StepToGeom.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _StepToGeom.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _StepToGeom.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _StepToGeom.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _StepToGeom.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _StepToGeom.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _StepToGeom.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _StepToGeom.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_StepToGeom.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _StepToGeom.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _StepToGeom.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StepToGeom.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _StepToGeom.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _StepToGeom.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _StepToGeom.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _StepToGeom.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_StepToGeom.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _StepToGeom.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _StepToGeom.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StepToGeom.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _StepToGeom.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _StepToGeom.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _StepToGeom.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _StepToGeom.ptr_to_number(item)
ptr_to_number = _StepToGeom.ptr_to_number

def HashCode(*args):
    return _StepToGeom.HashCode(*args)
HashCode = _StepToGeom.HashCode

def ptr_equal(a, b):
    return _StepToGeom.ptr_equal(a, b)
ptr_equal = _StepToGeom.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepGeom
else:
    import StepGeom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepBasic
else:
    import StepBasic
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepData
else:
    import StepData
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepRepr
else:
    import StepRepr
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepShape
else:
    import StepShape
del _swig_python_version_info
class StepToGeom_(object):
    """
    This class provides static methods to convert STEP geometric entities to OCCT.
    The methods returning handles will return null handle in case of error.
    The methods returning boolean will return True if succeeded and False if error.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def MakeAxis1Placement(*args):
        """
        MakeAxis1Placement(Handle_StepGeom_Axis1Placement SA) -> Handle_Geom_Axis1Placement

        :type SA: OCC.wrapper.StepToGeom.Handle_StepGeom_Axis1Placement
        :rtype: OCC.wrapper.Geom.Handle_Geom_Axis1Placement

        """
        return _StepToGeom.StepToGeom__MakeAxis1Placement(*args)

    MakeAxis1Placement = staticmethod(MakeAxis1Placement)

    def MakeAxis2Placement(*args):
        """
        MakeAxis2Placement(Handle_StepGeom_Axis2Placement3d SA) -> Handle_Geom_Axis2Placement

        :type SA: OCC.wrapper.StepToGeom.Handle_StepGeom_Axis2Placement3d
        :rtype: OCC.wrapper.Geom.Handle_Geom_Axis2Placement

        """
        return _StepToGeom.StepToGeom__MakeAxis2Placement(*args)

    MakeAxis2Placement = staticmethod(MakeAxis2Placement)

    def MakeAxisPlacement(*args):
        """
        MakeAxisPlacement(Handle_StepGeom_Axis2Placement2d SA) -> Handle_Geom2d_AxisPlacement

        :type SA: OCC.wrapper.StepGeom.Handle_StepGeom_Axis2Placement2d
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_AxisPlacement

        """
        return _StepToGeom.StepToGeom__MakeAxisPlacement(*args)

    MakeAxisPlacement = staticmethod(MakeAxisPlacement)

    def MakeBoundedCurve(*args):
        """
        MakeBoundedCurve(Handle_StepGeom_BoundedCurve SC) -> Handle_Geom_BoundedCurve

        :type SC: OCC.wrapper.StepGeom.Handle_StepGeom_BoundedCurve
        :rtype: OCC.wrapper.Geom.Handle_Geom_BoundedCurve

        """
        return _StepToGeom.StepToGeom__MakeBoundedCurve(*args)

    MakeBoundedCurve = staticmethod(MakeBoundedCurve)

    def MakeBoundedCurve2d(*args):
        """
        MakeBoundedCurve2d(Handle_StepGeom_BoundedCurve SC) -> Handle_Geom2d_BoundedCurve

        :type SC: OCC.wrapper.StepGeom.Handle_StepGeom_BoundedCurve
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_BoundedCurve

        """
        return _StepToGeom.StepToGeom__MakeBoundedCurve2d(*args)

    MakeBoundedCurve2d = staticmethod(MakeBoundedCurve2d)

    def MakeBoundedSurface(*args):
        """
        MakeBoundedSurface(Handle_StepGeom_BoundedSurface SS) -> Handle_Geom_BoundedSurface

        :type SS: OCC.wrapper.StepGeom.Handle_StepGeom_BoundedSurface
        :rtype: OCC.wrapper.Geom.Handle_Geom_BoundedSurface

        """
        return _StepToGeom.StepToGeom__MakeBoundedSurface(*args)

    MakeBoundedSurface = staticmethod(MakeBoundedSurface)

    def MakeBSplineCurve(*args):
        """
        MakeBSplineCurve(Handle_StepGeom_BSplineCurve SC) -> Handle_Geom_BSplineCurve

        :type SC: OCC.wrapper.StepGeom.Handle_StepGeom_BSplineCurve
        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineCurve

        """
        return _StepToGeom.StepToGeom__MakeBSplineCurve(*args)

    MakeBSplineCurve = staticmethod(MakeBSplineCurve)

    def MakeBSplineCurve2d(*args):
        """
        MakeBSplineCurve2d(Handle_StepGeom_BSplineCurve SC) -> Handle_Geom2d_BSplineCurve

        :type SC: OCC.wrapper.StepGeom.Handle_StepGeom_BSplineCurve
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_BSplineCurve

        """
        return _StepToGeom.StepToGeom__MakeBSplineCurve2d(*args)

    MakeBSplineCurve2d = staticmethod(MakeBSplineCurve2d)

    def MakeBSplineSurface(*args):
        """
        MakeBSplineSurface(Handle_StepGeom_BSplineSurface SS) -> Handle_Geom_BSplineSurface

        :type SS: OCC.wrapper.StepGeom.Handle_StepGeom_BSplineSurface
        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineSurface

        """
        return _StepToGeom.StepToGeom__MakeBSplineSurface(*args)

    MakeBSplineSurface = staticmethod(MakeBSplineSurface)

    def MakeCartesianPoint(*args):
        """
        MakeCartesianPoint(Handle_StepGeom_CartesianPoint SP) -> Handle_Geom_CartesianPoint

        :type SP: OCC.wrapper.StepToGeom.Handle_StepGeom_CartesianPoint
        :rtype: OCC.wrapper.Geom.Handle_Geom_CartesianPoint

        """
        return _StepToGeom.StepToGeom__MakeCartesianPoint(*args)

    MakeCartesianPoint = staticmethod(MakeCartesianPoint)

    def MakeCartesianPoint2d(*args):
        """
        MakeCartesianPoint2d(Handle_StepGeom_CartesianPoint SP) -> Handle_Geom2d_CartesianPoint

        :type SP: OCC.wrapper.StepToGeom.Handle_StepGeom_CartesianPoint
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_CartesianPoint

        """
        return _StepToGeom.StepToGeom__MakeCartesianPoint2d(*args)

    MakeCartesianPoint2d = staticmethod(MakeCartesianPoint2d)

    def MakeCircle(*args):
        """
        MakeCircle(Handle_StepGeom_Circle SC) -> Handle_Geom_Circle

        :type SC: OCC.wrapper.StepGeom.Handle_StepGeom_Circle
        :rtype: OCC.wrapper.Geom.Handle_Geom_Circle

        """
        return _StepToGeom.StepToGeom__MakeCircle(*args)

    MakeCircle = staticmethod(MakeCircle)

    def MakeCircle2d(*args):
        """
        MakeCircle2d(Handle_StepGeom_Circle SC) -> Handle_Geom2d_Circle

        :type SC: OCC.wrapper.StepGeom.Handle_StepGeom_Circle
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Circle

        """
        return _StepToGeom.StepToGeom__MakeCircle2d(*args)

    MakeCircle2d = staticmethod(MakeCircle2d)

    def MakeConic(*args):
        """
        MakeConic(Handle_StepGeom_Conic SC) -> Handle_Geom_Conic

        :type SC: OCC.wrapper.StepGeom.Handle_StepGeom_Conic
        :rtype: OCC.wrapper.Geom.Handle_Geom_Conic

        """
        return _StepToGeom.StepToGeom__MakeConic(*args)

    MakeConic = staticmethod(MakeConic)

    def MakeConic2d(*args):
        """
        MakeConic2d(Handle_StepGeom_Conic SC) -> Handle_Geom2d_Conic

        :type SC: OCC.wrapper.StepGeom.Handle_StepGeom_Conic
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Conic

        """
        return _StepToGeom.StepToGeom__MakeConic2d(*args)

    MakeConic2d = staticmethod(MakeConic2d)

    def MakeConicalSurface(*args):
        """
        MakeConicalSurface(Handle_StepGeom_ConicalSurface SS) -> Handle_Geom_ConicalSurface

        :type SS: OCC.wrapper.StepGeom.Handle_StepGeom_ConicalSurface
        :rtype: OCC.wrapper.Geom.Handle_Geom_ConicalSurface

        """
        return _StepToGeom.StepToGeom__MakeConicalSurface(*args)

    MakeConicalSurface = staticmethod(MakeConicalSurface)

    def MakeCurve(*args):
        """
        MakeCurve(Handle_StepGeom_Curve SC) -> Handle_Geom_Curve

        :type SC: OCC.wrapper.StepToGeom.Handle_StepGeom_Curve
        :rtype: OCC.wrapper.Geom.Handle_Geom_Curve

        """
        return _StepToGeom.StepToGeom__MakeCurve(*args)

    MakeCurve = staticmethod(MakeCurve)

    def MakeCurve2d(*args):
        """
        MakeCurve2d(Handle_StepGeom_Curve SC) -> Handle_Geom2d_Curve

        :type SC: OCC.wrapper.StepToGeom.Handle_StepGeom_Curve
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _StepToGeom.StepToGeom__MakeCurve2d(*args)

    MakeCurve2d = staticmethod(MakeCurve2d)

    def MakeCylindricalSurface(*args):
        """
        MakeCylindricalSurface(Handle_StepGeom_CylindricalSurface SS) -> Handle_Geom_CylindricalSurface

        :type SS: OCC.wrapper.StepGeom.Handle_StepGeom_CylindricalSurface
        :rtype: OCC.wrapper.Geom.Handle_Geom_CylindricalSurface

        """
        return _StepToGeom.StepToGeom__MakeCylindricalSurface(*args)

    MakeCylindricalSurface = staticmethod(MakeCylindricalSurface)

    def MakeDirection(*args):
        """
        MakeDirection(Handle_StepGeom_Direction SD) -> Handle_Geom_Direction

        :type SD: OCC.wrapper.StepToGeom.Handle_StepGeom_Direction
        :rtype: OCC.wrapper.Geom.Handle_Geom_Direction

        """
        return _StepToGeom.StepToGeom__MakeDirection(*args)

    MakeDirection = staticmethod(MakeDirection)

    def MakeDirection2d(*args):
        """
        MakeDirection2d(Handle_StepGeom_Direction SD) -> Handle_Geom2d_Direction

        :type SD: OCC.wrapper.StepToGeom.Handle_StepGeom_Direction
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Direction

        """
        return _StepToGeom.StepToGeom__MakeDirection2d(*args)

    MakeDirection2d = staticmethod(MakeDirection2d)

    def MakeElementarySurface(*args):
        """
        MakeElementarySurface(Handle_StepGeom_ElementarySurface SS) -> Handle_Geom_ElementarySurface

        :type SS: OCC.wrapper.StepGeom.Handle_StepGeom_ElementarySurface
        :rtype: OCC.wrapper.Geom.Handle_Geom_ElementarySurface

        """
        return _StepToGeom.StepToGeom__MakeElementarySurface(*args)

    MakeElementarySurface = staticmethod(MakeElementarySurface)

    def MakeEllipse(*args):
        """
        MakeEllipse(Handle_StepGeom_Ellipse SC) -> Handle_Geom_Ellipse

        :type SC: OCC.wrapper.StepGeom.Handle_StepGeom_Ellipse
        :rtype: OCC.wrapper.Geom.Handle_Geom_Ellipse

        """
        return _StepToGeom.StepToGeom__MakeEllipse(*args)

    MakeEllipse = staticmethod(MakeEllipse)

    def MakeEllipse2d(*args):
        """
        MakeEllipse2d(Handle_StepGeom_Ellipse SC) -> Handle_Geom2d_Ellipse

        :type SC: OCC.wrapper.StepGeom.Handle_StepGeom_Ellipse
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Ellipse

        """
        return _StepToGeom.StepToGeom__MakeEllipse2d(*args)

    MakeEllipse2d = staticmethod(MakeEllipse2d)

    def MakeHyperbola(*args):
        """
        MakeHyperbola(Handle_StepGeom_Hyperbola SC) -> Handle_Geom_Hyperbola

        :type SC: OCC.wrapper.StepGeom.Handle_StepGeom_Hyperbola
        :rtype: OCC.wrapper.Geom.Handle_Geom_Hyperbola

        """
        return _StepToGeom.StepToGeom__MakeHyperbola(*args)

    MakeHyperbola = staticmethod(MakeHyperbola)

    def MakeHyperbola2d(*args):
        """
        MakeHyperbola2d(Handle_StepGeom_Hyperbola SC) -> Handle_Geom2d_Hyperbola

        :type SC: OCC.wrapper.StepGeom.Handle_StepGeom_Hyperbola
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Hyperbola

        """
        return _StepToGeom.StepToGeom__MakeHyperbola2d(*args)

    MakeHyperbola2d = staticmethod(MakeHyperbola2d)

    def MakeLine(*args):
        """
        MakeLine(Handle_StepGeom_Line SC) -> Handle_Geom_Line

        :type SC: OCC.wrapper.StepGeom.Handle_StepGeom_Line
        :rtype: OCC.wrapper.Geom.Handle_Geom_Line

        """
        return _StepToGeom.StepToGeom__MakeLine(*args)

    MakeLine = staticmethod(MakeLine)

    def MakeLine2d(*args):
        """
        MakeLine2d(Handle_StepGeom_Line SC) -> Handle_Geom2d_Line

        :type SC: OCC.wrapper.StepGeom.Handle_StepGeom_Line
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Line

        """
        return _StepToGeom.StepToGeom__MakeLine2d(*args)

    MakeLine2d = staticmethod(MakeLine2d)

    def MakeParabola(*args):
        """
        MakeParabola(Handle_StepGeom_Parabola SC) -> Handle_Geom_Parabola

        :type SC: OCC.wrapper.StepGeom.Handle_StepGeom_Parabola
        :rtype: OCC.wrapper.Geom.Handle_Geom_Parabola

        """
        return _StepToGeom.StepToGeom__MakeParabola(*args)

    MakeParabola = staticmethod(MakeParabola)

    def MakeParabola2d(*args):
        """
        MakeParabola2d(Handle_StepGeom_Parabola SC) -> Handle_Geom2d_Parabola

        :type SC: OCC.wrapper.StepGeom.Handle_StepGeom_Parabola
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Parabola

        """
        return _StepToGeom.StepToGeom__MakeParabola2d(*args)

    MakeParabola2d = staticmethod(MakeParabola2d)

    def MakePlane(*args):
        """
        MakePlane(Handle_StepGeom_Plane SP) -> Handle_Geom_Plane

        :type SP: OCC.wrapper.StepGeom.Handle_StepGeom_Plane
        :rtype: OCC.wrapper.Geom.Handle_Geom_Plane

        """
        return _StepToGeom.StepToGeom__MakePlane(*args)

    MakePlane = staticmethod(MakePlane)

    def MakePolyline(*args):
        """
        MakePolyline(Handle_StepGeom_Polyline SPL) -> Handle_Geom_BSplineCurve

        :type SPL: OCC.wrapper.StepGeom.Handle_StepGeom_Polyline
        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineCurve

        """
        return _StepToGeom.StepToGeom__MakePolyline(*args)

    MakePolyline = staticmethod(MakePolyline)

    def MakePolyline2d(*args):
        """
        MakePolyline2d(Handle_StepGeom_Polyline SPL) -> Handle_Geom2d_BSplineCurve

        :type SPL: OCC.wrapper.StepGeom.Handle_StepGeom_Polyline
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_BSplineCurve

        """
        return _StepToGeom.StepToGeom__MakePolyline2d(*args)

    MakePolyline2d = staticmethod(MakePolyline2d)

    def MakeRectangularTrimmedSurface(*args):
        """
        MakeRectangularTrimmedSurface(Handle_StepGeom_RectangularTrimmedSurface SS) -> Handle_Geom_RectangularTrimmedSurface

        :type SS: OCC.wrapper.StepGeom.Handle_StepGeom_RectangularTrimmedSurface
        :rtype: OCC.wrapper.Geom.Handle_Geom_RectangularTrimmedSurface

        """
        return _StepToGeom.StepToGeom__MakeRectangularTrimmedSurface(*args)

    MakeRectangularTrimmedSurface = staticmethod(MakeRectangularTrimmedSurface)

    def MakeSphericalSurface(*args):
        """
        MakeSphericalSurface(Handle_StepGeom_SphericalSurface SS) -> Handle_Geom_SphericalSurface

        :type SS: OCC.wrapper.StepGeom.Handle_StepGeom_SphericalSurface
        :rtype: OCC.wrapper.Geom.Handle_Geom_SphericalSurface

        """
        return _StepToGeom.StepToGeom__MakeSphericalSurface(*args)

    MakeSphericalSurface = staticmethod(MakeSphericalSurface)

    def MakeSurface(*args):
        """
        MakeSurface(Handle_StepGeom_Surface SS) -> Handle_Geom_Surface

        :type SS: OCC.wrapper.StepToGeom.Handle_StepGeom_Surface
        :rtype: OCC.wrapper.Geom.Handle_Geom_Surface

        """
        return _StepToGeom.StepToGeom__MakeSurface(*args)

    MakeSurface = staticmethod(MakeSurface)

    def MakeSurfaceOfLinearExtrusion(*args):
        """
        MakeSurfaceOfLinearExtrusion(Handle_StepGeom_SurfaceOfLinearExtrusion SS) -> Handle_Geom_SurfaceOfLinearExtrusion

        :type SS: OCC.wrapper.StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion
        :rtype: OCC.wrapper.Geom.Handle_Geom_SurfaceOfLinearExtrusion

        """
        return _StepToGeom.StepToGeom__MakeSurfaceOfLinearExtrusion(*args)

    MakeSurfaceOfLinearExtrusion = staticmethod(MakeSurfaceOfLinearExtrusion)

    def MakeSurfaceOfRevolution(*args):
        """
        MakeSurfaceOfRevolution(Handle_StepGeom_SurfaceOfRevolution SS) -> Handle_Geom_SurfaceOfRevolution

        :type SS: OCC.wrapper.StepGeom.Handle_StepGeom_SurfaceOfRevolution
        :rtype: OCC.wrapper.Geom.Handle_Geom_SurfaceOfRevolution

        """
        return _StepToGeom.StepToGeom__MakeSurfaceOfRevolution(*args)

    MakeSurfaceOfRevolution = staticmethod(MakeSurfaceOfRevolution)

    def MakeSweptSurface(*args):
        """
        MakeSweptSurface(Handle_StepGeom_SweptSurface SS) -> Handle_Geom_SweptSurface

        :type SS: OCC.wrapper.StepGeom.Handle_StepGeom_SweptSurface
        :rtype: OCC.wrapper.Geom.Handle_Geom_SweptSurface

        """
        return _StepToGeom.StepToGeom__MakeSweptSurface(*args)

    MakeSweptSurface = staticmethod(MakeSweptSurface)

    def MakeToroidalSurface(*args):
        """
        MakeToroidalSurface(Handle_StepGeom_ToroidalSurface SS) -> Handle_Geom_ToroidalSurface

        :type SS: OCC.wrapper.StepGeom.Handle_StepGeom_ToroidalSurface
        :rtype: OCC.wrapper.Geom.Handle_Geom_ToroidalSurface

        """
        return _StepToGeom.StepToGeom__MakeToroidalSurface(*args)

    MakeToroidalSurface = staticmethod(MakeToroidalSurface)

    def MakeTransformation2d(*args):
        """
        MakeTransformation2d(Handle_StepGeom_CartesianTransformationOperator2d SCTO, gp_Trsf2d CT) -> Standard_Boolean

        :type SCTO: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianTransformationOperator2d
        :type CT: OCC.wrapper.gp.gp_Trsf2d
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepToGeom.StepToGeom__MakeTransformation2d(*args)

    MakeTransformation2d = staticmethod(MakeTransformation2d)

    def MakeTransformation3d(*args):
        """
        MakeTransformation3d(Handle_StepGeom_CartesianTransformationOperator3d SCTO, gp_Trsf CT) -> Standard_Boolean

        :type SCTO: OCC.wrapper.StepToGeom.Handle_StepGeom_CartesianTransformationOperator3d
        :type CT: OCC.wrapper.gp.gp_Trsf
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepToGeom.StepToGeom__MakeTransformation3d(*args)

    MakeTransformation3d = staticmethod(MakeTransformation3d)

    def MakeTrimmedCurve(*args):
        """
        MakeTrimmedCurve(Handle_StepGeom_TrimmedCurve SC) -> Handle_Geom_TrimmedCurve

        :type SC: OCC.wrapper.StepGeom.Handle_StepGeom_TrimmedCurve
        :rtype: OCC.wrapper.Geom.Handle_Geom_TrimmedCurve

        """
        return _StepToGeom.StepToGeom__MakeTrimmedCurve(*args)

    MakeTrimmedCurve = staticmethod(MakeTrimmedCurve)

    def MakeTrimmedCurve2d(*args):
        """
        MakeTrimmedCurve2d(Handle_StepGeom_TrimmedCurve SC) -> Handle_Geom2d_BSplineCurve

        :type SC: OCC.wrapper.StepGeom.Handle_StepGeom_TrimmedCurve
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_BSplineCurve

        """
        return _StepToGeom.StepToGeom__MakeTrimmedCurve2d(*args)

    MakeTrimmedCurve2d = staticmethod(MakeTrimmedCurve2d)

    def MakeVectorWithMagnitude(*args):
        """
        MakeVectorWithMagnitude(Handle_StepGeom_Vector SV) -> Handle_Geom_VectorWithMagnitude

        :type SV: OCC.wrapper.StepGeom.Handle_StepGeom_Vector
        :rtype: OCC.wrapper.Geom.Handle_Geom_VectorWithMagnitude

        """
        return _StepToGeom.StepToGeom__MakeVectorWithMagnitude(*args)

    MakeVectorWithMagnitude = staticmethod(MakeVectorWithMagnitude)

    def MakeVectorWithMagnitude2d(*args):
        """
        MakeVectorWithMagnitude2d(Handle_StepGeom_Vector SV) -> Handle_Geom2d_VectorWithMagnitude

        :type SV: OCC.wrapper.StepGeom.Handle_StepGeom_Vector
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_VectorWithMagnitude

        """
        return _StepToGeom.StepToGeom__MakeVectorWithMagnitude2d(*args)

    MakeVectorWithMagnitude2d = staticmethod(MakeVectorWithMagnitude2d)

    def __init__(self):
        """
        This class provides static methods to convert STEP geometric entities to OCCT.
        The methods returning handles will return null handle in case of error.
        The methods returning boolean will return True if succeeded and False if error.
        """
        this = _StepToGeom.new_StepToGeom_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StepToGeom.delete_StepToGeom_
StepToGeom__swigregister = _StepToGeom.StepToGeom__swigregister
StepToGeom__swigregister(StepToGeom_)

def StepToGeom__MakeAxis1Placement(*args):
    """
    StepToGeom__MakeAxis1Placement(Handle_StepGeom_Axis1Placement SA) -> Handle_Geom_Axis1Placement

    :type SA: OCC.wrapper.StepToGeom.Handle_StepGeom_Axis1Placement
    :rtype: OCC.wrapper.Geom.Handle_Geom_Axis1Placement

    """
    return _StepToGeom.StepToGeom__MakeAxis1Placement(*args)

def StepToGeom__MakeAxis2Placement(*args):
    """
    StepToGeom__MakeAxis2Placement(Handle_StepGeom_Axis2Placement3d SA) -> Handle_Geom_Axis2Placement

    :type SA: OCC.wrapper.StepToGeom.Handle_StepGeom_Axis2Placement3d
    :rtype: OCC.wrapper.Geom.Handle_Geom_Axis2Placement

    """
    return _StepToGeom.StepToGeom__MakeAxis2Placement(*args)

def StepToGeom__MakeAxisPlacement(*args):
    """
    StepToGeom__MakeAxisPlacement(Handle_StepGeom_Axis2Placement2d SA) -> Handle_Geom2d_AxisPlacement

    :type SA: OCC.wrapper.StepGeom.Handle_StepGeom_Axis2Placement2d
    :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_AxisPlacement

    """
    return _StepToGeom.StepToGeom__MakeAxisPlacement(*args)

def StepToGeom__MakeBoundedCurve(*args):
    """
    StepToGeom__MakeBoundedCurve(Handle_StepGeom_BoundedCurve SC) -> Handle_Geom_BoundedCurve

    :type SC: OCC.wrapper.StepGeom.Handle_StepGeom_BoundedCurve
    :rtype: OCC.wrapper.Geom.Handle_Geom_BoundedCurve

    """
    return _StepToGeom.StepToGeom__MakeBoundedCurve(*args)

def StepToGeom__MakeBoundedCurve2d(*args):
    """
    StepToGeom__MakeBoundedCurve2d(Handle_StepGeom_BoundedCurve SC) -> Handle_Geom2d_BoundedCurve

    :type SC: OCC.wrapper.StepGeom.Handle_StepGeom_BoundedCurve
    :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_BoundedCurve

    """
    return _StepToGeom.StepToGeom__MakeBoundedCurve2d(*args)

def StepToGeom__MakeBoundedSurface(*args):
    """
    StepToGeom__MakeBoundedSurface(Handle_StepGeom_BoundedSurface SS) -> Handle_Geom_BoundedSurface

    :type SS: OCC.wrapper.StepGeom.Handle_StepGeom_BoundedSurface
    :rtype: OCC.wrapper.Geom.Handle_Geom_BoundedSurface

    """
    return _StepToGeom.StepToGeom__MakeBoundedSurface(*args)

def StepToGeom__MakeBSplineCurve(*args):
    """
    StepToGeom__MakeBSplineCurve(Handle_StepGeom_BSplineCurve SC) -> Handle_Geom_BSplineCurve

    :type SC: OCC.wrapper.StepGeom.Handle_StepGeom_BSplineCurve
    :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineCurve

    """
    return _StepToGeom.StepToGeom__MakeBSplineCurve(*args)

def StepToGeom__MakeBSplineCurve2d(*args):
    """
    StepToGeom__MakeBSplineCurve2d(Handle_StepGeom_BSplineCurve SC) -> Handle_Geom2d_BSplineCurve

    :type SC: OCC.wrapper.StepGeom.Handle_StepGeom_BSplineCurve
    :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_BSplineCurve

    """
    return _StepToGeom.StepToGeom__MakeBSplineCurve2d(*args)

def StepToGeom__MakeBSplineSurface(*args):
    """
    StepToGeom__MakeBSplineSurface(Handle_StepGeom_BSplineSurface SS) -> Handle_Geom_BSplineSurface

    :type SS: OCC.wrapper.StepGeom.Handle_StepGeom_BSplineSurface
    :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineSurface

    """
    return _StepToGeom.StepToGeom__MakeBSplineSurface(*args)

def StepToGeom__MakeCartesianPoint(*args):
    """
    StepToGeom__MakeCartesianPoint(Handle_StepGeom_CartesianPoint SP) -> Handle_Geom_CartesianPoint

    :type SP: OCC.wrapper.StepToGeom.Handle_StepGeom_CartesianPoint
    :rtype: OCC.wrapper.Geom.Handle_Geom_CartesianPoint

    """
    return _StepToGeom.StepToGeom__MakeCartesianPoint(*args)

def StepToGeom__MakeCartesianPoint2d(*args):
    """
    StepToGeom__MakeCartesianPoint2d(Handle_StepGeom_CartesianPoint SP) -> Handle_Geom2d_CartesianPoint

    :type SP: OCC.wrapper.StepToGeom.Handle_StepGeom_CartesianPoint
    :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_CartesianPoint

    """
    return _StepToGeom.StepToGeom__MakeCartesianPoint2d(*args)

def StepToGeom__MakeCircle(*args):
    """
    StepToGeom__MakeCircle(Handle_StepGeom_Circle SC) -> Handle_Geom_Circle

    :type SC: OCC.wrapper.StepGeom.Handle_StepGeom_Circle
    :rtype: OCC.wrapper.Geom.Handle_Geom_Circle

    """
    return _StepToGeom.StepToGeom__MakeCircle(*args)

def StepToGeom__MakeCircle2d(*args):
    """
    StepToGeom__MakeCircle2d(Handle_StepGeom_Circle SC) -> Handle_Geom2d_Circle

    :type SC: OCC.wrapper.StepGeom.Handle_StepGeom_Circle
    :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Circle

    """
    return _StepToGeom.StepToGeom__MakeCircle2d(*args)

def StepToGeom__MakeConic(*args):
    """
    StepToGeom__MakeConic(Handle_StepGeom_Conic SC) -> Handle_Geom_Conic

    :type SC: OCC.wrapper.StepGeom.Handle_StepGeom_Conic
    :rtype: OCC.wrapper.Geom.Handle_Geom_Conic

    """
    return _StepToGeom.StepToGeom__MakeConic(*args)

def StepToGeom__MakeConic2d(*args):
    """
    StepToGeom__MakeConic2d(Handle_StepGeom_Conic SC) -> Handle_Geom2d_Conic

    :type SC: OCC.wrapper.StepGeom.Handle_StepGeom_Conic
    :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Conic

    """
    return _StepToGeom.StepToGeom__MakeConic2d(*args)

def StepToGeom__MakeConicalSurface(*args):
    """
    StepToGeom__MakeConicalSurface(Handle_StepGeom_ConicalSurface SS) -> Handle_Geom_ConicalSurface

    :type SS: OCC.wrapper.StepGeom.Handle_StepGeom_ConicalSurface
    :rtype: OCC.wrapper.Geom.Handle_Geom_ConicalSurface

    """
    return _StepToGeom.StepToGeom__MakeConicalSurface(*args)

def StepToGeom__MakeCurve(*args):
    """
    StepToGeom__MakeCurve(Handle_StepGeom_Curve SC) -> Handle_Geom_Curve

    :type SC: OCC.wrapper.StepToGeom.Handle_StepGeom_Curve
    :rtype: OCC.wrapper.Geom.Handle_Geom_Curve

    """
    return _StepToGeom.StepToGeom__MakeCurve(*args)

def StepToGeom__MakeCurve2d(*args):
    """
    StepToGeom__MakeCurve2d(Handle_StepGeom_Curve SC) -> Handle_Geom2d_Curve

    :type SC: OCC.wrapper.StepToGeom.Handle_StepGeom_Curve
    :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

    """
    return _StepToGeom.StepToGeom__MakeCurve2d(*args)

def StepToGeom__MakeCylindricalSurface(*args):
    """
    StepToGeom__MakeCylindricalSurface(Handle_StepGeom_CylindricalSurface SS) -> Handle_Geom_CylindricalSurface

    :type SS: OCC.wrapper.StepGeom.Handle_StepGeom_CylindricalSurface
    :rtype: OCC.wrapper.Geom.Handle_Geom_CylindricalSurface

    """
    return _StepToGeom.StepToGeom__MakeCylindricalSurface(*args)

def StepToGeom__MakeDirection(*args):
    """
    StepToGeom__MakeDirection(Handle_StepGeom_Direction SD) -> Handle_Geom_Direction

    :type SD: OCC.wrapper.StepToGeom.Handle_StepGeom_Direction
    :rtype: OCC.wrapper.Geom.Handle_Geom_Direction

    """
    return _StepToGeom.StepToGeom__MakeDirection(*args)

def StepToGeom__MakeDirection2d(*args):
    """
    StepToGeom__MakeDirection2d(Handle_StepGeom_Direction SD) -> Handle_Geom2d_Direction

    :type SD: OCC.wrapper.StepToGeom.Handle_StepGeom_Direction
    :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Direction

    """
    return _StepToGeom.StepToGeom__MakeDirection2d(*args)

def StepToGeom__MakeElementarySurface(*args):
    """
    StepToGeom__MakeElementarySurface(Handle_StepGeom_ElementarySurface SS) -> Handle_Geom_ElementarySurface

    :type SS: OCC.wrapper.StepGeom.Handle_StepGeom_ElementarySurface
    :rtype: OCC.wrapper.Geom.Handle_Geom_ElementarySurface

    """
    return _StepToGeom.StepToGeom__MakeElementarySurface(*args)

def StepToGeom__MakeEllipse(*args):
    """
    StepToGeom__MakeEllipse(Handle_StepGeom_Ellipse SC) -> Handle_Geom_Ellipse

    :type SC: OCC.wrapper.StepGeom.Handle_StepGeom_Ellipse
    :rtype: OCC.wrapper.Geom.Handle_Geom_Ellipse

    """
    return _StepToGeom.StepToGeom__MakeEllipse(*args)

def StepToGeom__MakeEllipse2d(*args):
    """
    StepToGeom__MakeEllipse2d(Handle_StepGeom_Ellipse SC) -> Handle_Geom2d_Ellipse

    :type SC: OCC.wrapper.StepGeom.Handle_StepGeom_Ellipse
    :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Ellipse

    """
    return _StepToGeom.StepToGeom__MakeEllipse2d(*args)

def StepToGeom__MakeHyperbola(*args):
    """
    StepToGeom__MakeHyperbola(Handle_StepGeom_Hyperbola SC) -> Handle_Geom_Hyperbola

    :type SC: OCC.wrapper.StepGeom.Handle_StepGeom_Hyperbola
    :rtype: OCC.wrapper.Geom.Handle_Geom_Hyperbola

    """
    return _StepToGeom.StepToGeom__MakeHyperbola(*args)

def StepToGeom__MakeHyperbola2d(*args):
    """
    StepToGeom__MakeHyperbola2d(Handle_StepGeom_Hyperbola SC) -> Handle_Geom2d_Hyperbola

    :type SC: OCC.wrapper.StepGeom.Handle_StepGeom_Hyperbola
    :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Hyperbola

    """
    return _StepToGeom.StepToGeom__MakeHyperbola2d(*args)

def StepToGeom__MakeLine(*args):
    """
    StepToGeom__MakeLine(Handle_StepGeom_Line SC) -> Handle_Geom_Line

    :type SC: OCC.wrapper.StepGeom.Handle_StepGeom_Line
    :rtype: OCC.wrapper.Geom.Handle_Geom_Line

    """
    return _StepToGeom.StepToGeom__MakeLine(*args)

def StepToGeom__MakeLine2d(*args):
    """
    StepToGeom__MakeLine2d(Handle_StepGeom_Line SC) -> Handle_Geom2d_Line

    :type SC: OCC.wrapper.StepGeom.Handle_StepGeom_Line
    :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Line

    """
    return _StepToGeom.StepToGeom__MakeLine2d(*args)

def StepToGeom__MakeParabola(*args):
    """
    StepToGeom__MakeParabola(Handle_StepGeom_Parabola SC) -> Handle_Geom_Parabola

    :type SC: OCC.wrapper.StepGeom.Handle_StepGeom_Parabola
    :rtype: OCC.wrapper.Geom.Handle_Geom_Parabola

    """
    return _StepToGeom.StepToGeom__MakeParabola(*args)

def StepToGeom__MakeParabola2d(*args):
    """
    StepToGeom__MakeParabola2d(Handle_StepGeom_Parabola SC) -> Handle_Geom2d_Parabola

    :type SC: OCC.wrapper.StepGeom.Handle_StepGeom_Parabola
    :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Parabola

    """
    return _StepToGeom.StepToGeom__MakeParabola2d(*args)

def StepToGeom__MakePlane(*args):
    """
    StepToGeom__MakePlane(Handle_StepGeom_Plane SP) -> Handle_Geom_Plane

    :type SP: OCC.wrapper.StepGeom.Handle_StepGeom_Plane
    :rtype: OCC.wrapper.Geom.Handle_Geom_Plane

    """
    return _StepToGeom.StepToGeom__MakePlane(*args)

def StepToGeom__MakePolyline(*args):
    """
    StepToGeom__MakePolyline(Handle_StepGeom_Polyline SPL) -> Handle_Geom_BSplineCurve

    :type SPL: OCC.wrapper.StepGeom.Handle_StepGeom_Polyline
    :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineCurve

    """
    return _StepToGeom.StepToGeom__MakePolyline(*args)

def StepToGeom__MakePolyline2d(*args):
    """
    StepToGeom__MakePolyline2d(Handle_StepGeom_Polyline SPL) -> Handle_Geom2d_BSplineCurve

    :type SPL: OCC.wrapper.StepGeom.Handle_StepGeom_Polyline
    :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_BSplineCurve

    """
    return _StepToGeom.StepToGeom__MakePolyline2d(*args)

def StepToGeom__MakeRectangularTrimmedSurface(*args):
    """
    StepToGeom__MakeRectangularTrimmedSurface(Handle_StepGeom_RectangularTrimmedSurface SS) -> Handle_Geom_RectangularTrimmedSurface

    :type SS: OCC.wrapper.StepGeom.Handle_StepGeom_RectangularTrimmedSurface
    :rtype: OCC.wrapper.Geom.Handle_Geom_RectangularTrimmedSurface

    """
    return _StepToGeom.StepToGeom__MakeRectangularTrimmedSurface(*args)

def StepToGeom__MakeSphericalSurface(*args):
    """
    StepToGeom__MakeSphericalSurface(Handle_StepGeom_SphericalSurface SS) -> Handle_Geom_SphericalSurface

    :type SS: OCC.wrapper.StepGeom.Handle_StepGeom_SphericalSurface
    :rtype: OCC.wrapper.Geom.Handle_Geom_SphericalSurface

    """
    return _StepToGeom.StepToGeom__MakeSphericalSurface(*args)

def StepToGeom__MakeSurface(*args):
    """
    StepToGeom__MakeSurface(Handle_StepGeom_Surface SS) -> Handle_Geom_Surface

    :type SS: OCC.wrapper.StepToGeom.Handle_StepGeom_Surface
    :rtype: OCC.wrapper.Geom.Handle_Geom_Surface

    """
    return _StepToGeom.StepToGeom__MakeSurface(*args)

def StepToGeom__MakeSurfaceOfLinearExtrusion(*args):
    """
    StepToGeom__MakeSurfaceOfLinearExtrusion(Handle_StepGeom_SurfaceOfLinearExtrusion SS) -> Handle_Geom_SurfaceOfLinearExtrusion

    :type SS: OCC.wrapper.StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion
    :rtype: OCC.wrapper.Geom.Handle_Geom_SurfaceOfLinearExtrusion

    """
    return _StepToGeom.StepToGeom__MakeSurfaceOfLinearExtrusion(*args)

def StepToGeom__MakeSurfaceOfRevolution(*args):
    """
    StepToGeom__MakeSurfaceOfRevolution(Handle_StepGeom_SurfaceOfRevolution SS) -> Handle_Geom_SurfaceOfRevolution

    :type SS: OCC.wrapper.StepGeom.Handle_StepGeom_SurfaceOfRevolution
    :rtype: OCC.wrapper.Geom.Handle_Geom_SurfaceOfRevolution

    """
    return _StepToGeom.StepToGeom__MakeSurfaceOfRevolution(*args)

def StepToGeom__MakeSweptSurface(*args):
    """
    StepToGeom__MakeSweptSurface(Handle_StepGeom_SweptSurface SS) -> Handle_Geom_SweptSurface

    :type SS: OCC.wrapper.StepGeom.Handle_StepGeom_SweptSurface
    :rtype: OCC.wrapper.Geom.Handle_Geom_SweptSurface

    """
    return _StepToGeom.StepToGeom__MakeSweptSurface(*args)

def StepToGeom__MakeToroidalSurface(*args):
    """
    StepToGeom__MakeToroidalSurface(Handle_StepGeom_ToroidalSurface SS) -> Handle_Geom_ToroidalSurface

    :type SS: OCC.wrapper.StepGeom.Handle_StepGeom_ToroidalSurface
    :rtype: OCC.wrapper.Geom.Handle_Geom_ToroidalSurface

    """
    return _StepToGeom.StepToGeom__MakeToroidalSurface(*args)

def StepToGeom__MakeTransformation2d(*args):
    """
    StepToGeom__MakeTransformation2d(Handle_StepGeom_CartesianTransformationOperator2d SCTO, gp_Trsf2d CT) -> Standard_Boolean

    :type SCTO: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianTransformationOperator2d
    :type CT: OCC.wrapper.gp.gp_Trsf2d
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _StepToGeom.StepToGeom__MakeTransformation2d(*args)

def StepToGeom__MakeTransformation3d(*args):
    """
    StepToGeom__MakeTransformation3d(Handle_StepGeom_CartesianTransformationOperator3d SCTO, gp_Trsf CT) -> Standard_Boolean

    :type SCTO: OCC.wrapper.StepToGeom.Handle_StepGeom_CartesianTransformationOperator3d
    :type CT: OCC.wrapper.gp.gp_Trsf
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _StepToGeom.StepToGeom__MakeTransformation3d(*args)

def StepToGeom__MakeTrimmedCurve(*args):
    """
    StepToGeom__MakeTrimmedCurve(Handle_StepGeom_TrimmedCurve SC) -> Handle_Geom_TrimmedCurve

    :type SC: OCC.wrapper.StepGeom.Handle_StepGeom_TrimmedCurve
    :rtype: OCC.wrapper.Geom.Handle_Geom_TrimmedCurve

    """
    return _StepToGeom.StepToGeom__MakeTrimmedCurve(*args)

def StepToGeom__MakeTrimmedCurve2d(*args):
    """
    StepToGeom__MakeTrimmedCurve2d(Handle_StepGeom_TrimmedCurve SC) -> Handle_Geom2d_BSplineCurve

    :type SC: OCC.wrapper.StepGeom.Handle_StepGeom_TrimmedCurve
    :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_BSplineCurve

    """
    return _StepToGeom.StepToGeom__MakeTrimmedCurve2d(*args)

def StepToGeom__MakeVectorWithMagnitude(*args):
    """
    StepToGeom__MakeVectorWithMagnitude(Handle_StepGeom_Vector SV) -> Handle_Geom_VectorWithMagnitude

    :type SV: OCC.wrapper.StepGeom.Handle_StepGeom_Vector
    :rtype: OCC.wrapper.Geom.Handle_Geom_VectorWithMagnitude

    """
    return _StepToGeom.StepToGeom__MakeVectorWithMagnitude(*args)

def StepToGeom__MakeVectorWithMagnitude2d(*args):
    """
    StepToGeom__MakeVectorWithMagnitude2d(Handle_StepGeom_Vector SV) -> Handle_Geom2d_VectorWithMagnitude

    :type SV: OCC.wrapper.StepGeom.Handle_StepGeom_Vector
    :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_VectorWithMagnitude

    """
    return _StepToGeom.StepToGeom__MakeVectorWithMagnitude2d(*args)



